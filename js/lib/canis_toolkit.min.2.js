!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=144)}([function(t,e,r){var n=r(2),i=r(18),a=r(11),o=r(12),s=r(19),u=function(t,e,r){var c,f,l,h,p=t&u.F,d=t&u.G,v=t&u.S,g=t&u.P,y=t&u.B,m=d?n:v?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),k=b.prototype||(b.prototype={});for(c in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[c])?m:r)[c],h=y&&f?s(l,n):g&&"function"==typeof l?s(Function.call,l):l,m&&o(m,c,l,t&u.U),b[c]!=l&&a(b,c,h),g&&k[c]!=l&&(k[c]=l)};n.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(48)("wks"),i=r(33),a=r(2).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),i=r(108),a=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),i=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),i=r(11),a=r(14),o=r(33)("src"),s=r(154),u=(""+s).split("toString");r(18).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,r,s){var c="function"==typeof r;c&&(a(r,"name")||i(r,"name",e)),t[e]!==r&&(c&&(a(r,o)||i(r,o,t[e]?""+t[e]:u.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||s.call(this)})},function(t,e,r){var n=r(0),i=r(3),a=r(24),o=/"/g,s=function(t,e,r,n){var i=String(a(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(s),n(n.P+n.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(49),i=r(24);t.exports=function(t){return n(i(t))}},function(t,e,r){var n=r(50),i=r(32),a=r(15),o=r(23),s=r(14),u=r(108),c=Object.getOwnPropertyDescriptor;e.f=r(7)?c:function(t,e){if(t=a(t),e=o(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),i=r(9),a=r(76)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),i=r(18),a=r(3);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),i=r(49),a=r(9),o=r(6),s=r(92);t.exports=function(t,e){var r=1==t,u=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var v,g,y=a(e),m=i(y),b=n(s,d,3),k=o(m.length),S=0,A=r?p(e,k):u?p(e,0):void 0;k>S;S++)if((h||S in m)&&(g=b(v=m[S],S,y),t))if(r)A[S]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return S;case 2:A.push(v)}else if(f)return!1;return l?-1:c||f?f:A}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),i=r(2),a=r(3),o=r(0),s=r(66),u=r(100),c=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),v=r(6),g=r(136),y=r(35),m=r(23),b=r(14),k=r(44),S=r(4),A=r(9),w=r(89),x=r(36),T=r(17),_=r(37).f,M=r(91),E=r(33),O=r(5),P=r(26),I=r(56),j=r(52),C=r(94),R=r(46),N=r(61),F=r(38),L=r(93),D=r(125),G=r(8),V=r(16),B=G.f,W=V.f,U=i.RangeError,q=i.TypeError,z=i.Uint8Array,Y=Array.prototype,X=u.ArrayBuffer,H=u.DataView,J=P(0),Q=P(2),Z=P(3),$=P(4),K=P(5),tt=P(6),et=I(!0),rt=I(!1),nt=C.values,it=C.keys,at=C.entries,ot=Y.lastIndexOf,st=Y.reduce,ut=Y.reduceRight,ct=Y.join,ft=Y.sort,lt=Y.slice,ht=Y.toString,pt=Y.toLocaleString,dt=O("iterator"),vt=O("toStringTag"),gt=E("typed_constructor"),yt=E("def_constructor"),mt=s.CONSTR,bt=s.TYPED,kt=s.VIEW,St=P(1,function(t,e){return _t(j(t,t[yt]),e)}),At=a(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),wt=!!z&&!!z.prototype.set&&a(function(){new z(1).set({})}),xt=function(t,e){var r=d(t);if(r<0||r%e)throw U("Wrong offset!");return r},Tt=function(t){if(S(t)&&bt in t)return t;throw q(t+" is not a typed array!")},_t=function(t,e){if(!(S(t)&&gt in t))throw q("It is not a typed array constructor!");return new t(e)},Mt=function(t,e){return Et(j(t,t[yt]),e)},Et=function(t,e){for(var r=0,n=e.length,i=_t(t,n);n>r;)i[r]=e[r++];return i},Ot=function(t,e,r){B(t,e,{get:function(){return this._d[r]}})},Pt=function(t){var e,r,n,i,a,o,s=A(t),u=arguments.length,f=u>1?arguments[1]:void 0,l=void 0!==f,h=M(s);if(null!=h&&!w(h)){for(o=h.call(s),n=[],e=0;!(a=o.next()).done;e++)n.push(a.value);s=n}for(l&&u>2&&(f=c(f,arguments[2],2)),e=0,r=v(s.length),i=_t(this,r);r>e;e++)i[e]=l?f(s[e],e):s[e];return i},It=function(){for(var t=0,e=arguments.length,r=_t(this,e);e>t;)r[t]=arguments[t++];return r},jt=!!z&&a(function(){pt.call(new z(1))}),Ct=function(){return pt.apply(jt?lt.call(Tt(this)):Tt(this),arguments)},Rt={copyWithin:function(t,e){return D.call(Tt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(Tt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Tt(this),arguments)},filter:function(t){return Mt(this,Q(Tt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return K(Tt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Tt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Tt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Tt(this),arguments)},lastIndexOf:function(t){return ot.apply(Tt(this),arguments)},map:function(t){return St(Tt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Tt(this),arguments)},reduceRight:function(t){return ut.apply(Tt(this),arguments)},reverse:function(){for(var t,e=Tt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(Tt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Tt(this),t)},subarray:function(t,e){var r=Tt(this),n=r.length,i=y(t,n);return new(j(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,v((void 0===e?n:y(e,n))-i))}},Nt=function(t,e){return Mt(this,lt.call(Tt(this),t,e))},Ft=function(t){Tt(this);var e=xt(arguments[1],1),r=this.length,n=A(t),i=v(n.length),a=0;if(i+e>r)throw U("Wrong length!");for(;a<i;)this[e+a]=n[a++]},Lt={entries:function(){return at.call(Tt(this))},keys:function(){return it.call(Tt(this))},values:function(){return nt.call(Tt(this))}},Dt=function(t,e){return S(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Gt=function(t,e){return Dt(t,e=m(e,!0))?l(2,t[e]):W(t,e)},Vt=function(t,e,r){return!(Dt(t,e=m(e,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?B(t,e,r):(t[e]=r.value,t)};mt||(V.f=Gt,G.f=Vt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Gt,defineProperty:Vt}),a(function(){ht.call({})})&&(ht=pt=function(){return ct.call(this)});var Bt=p({},Rt);p(Bt,Lt),h(Bt,dt,Lt.values),p(Bt,{slice:Nt,set:Ft,constructor:function(){},toString:ht,toLocaleString:Ct}),Ot(Bt,"buffer","b"),Ot(Bt,"byteOffset","o"),Ot(Bt,"byteLength","l"),Ot(Bt,"length","e"),B(Bt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,u){var c=t+((u=!!u)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[c],y=d||{},m=d&&T(d),b=!d||!s.ABV,A={},w=d&&d.prototype,M=function(t,r){B(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,At)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;u&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[p](r*e+i.o,n,At)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,i){f(t,d,c,"_d");var a,o,s,u,l=0,p=0;if(S(r)){if(!(r instanceof X||"ArrayBuffer"==(u=k(r))||"SharedArrayBuffer"==u))return bt in r?Et(d,r):Pt.call(d,r);a=r,p=xt(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw U("Wrong length!");if((o=y-p)<0)throw U("Wrong length!")}else if((o=v(i)*e)+p>y)throw U("Wrong length!");s=o/e}else s=g(r),a=new X(o=s*e);for(h(t,"_d",{b:a,o:p,l:o,e:s,v:new H(a)});l<s;)M(t,l++)}),w=d.prototype=x(Bt),h(w,"constructor",d)):a(function(){d(1)})&&a(function(){new d(-1)})&&N(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,i){var a;return f(t,d,c),S(r)?r instanceof X||"ArrayBuffer"==(a=k(r))||"SharedArrayBuffer"==a?void 0!==i?new y(r,xt(n,e),i):void 0!==n?new y(r,xt(n,e)):new y(r):bt in r?Et(d,r):Pt.call(d,r):new y(g(r))}),J(m!==Function.prototype?_(y).concat(_(m)):_(y),function(t){t in d||h(d,t,y[t])}),d.prototype=w,n||(w.constructor=d));var E=w[dt],O=!!E&&("values"==E.name||null==E.name),P=Lt.values;h(d,gt,!0),h(w,bt,c),h(w,kt,!0),h(w,yt,d),(u?new d(1)[vt]==c:vt in w)||B(w,vt,{get:function(){return c}}),A[c]=d,o(o.G+o.W+o.F*(d!=y),A),o(o.S,c,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*a(function(){y.of.call(d,1)}),c,{from:Pt,of:It}),"BYTES_PER_ELEMENT"in w||h(w,"BYTES_PER_ELEMENT",e),o(o.P,c,Rt),F(c),o(o.P+o.F*wt,c,{set:Ft}),o(o.P+o.F*!O,c,Lt),n||w.toString==ht||(w.toString=ht),o(o.P+o.F*a(function(){new d(1).slice()}),c,{slice:Nt}),o(o.P+o.F*(a(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!a(function(){w.toLocaleString.call([1,2])})),c,{toLocaleString:Ct}),R[c]=O?E:P,n||O||h(w,dt,P)}}else t.exports=function(){}},function(t,e,r){var n=r(131),i=r(0),a=r(48)("metadata"),o=a.store||(a.store=new(r(134))),s=function(t,e,r){var i=o.get(t);if(!i){if(!r)return;o.set(t,i=new n)}var a=i.get(e);if(!a){if(!r)return;i.set(e,a=new n)}return a};t.exports={store:o,map:s,has:function(t,e,r){var n=s(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=s(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){s(r,n,!0).set(t,e)},keys:function(t,e){var r=s(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),i=r(4),a=r(14),o=r(8).f,s=0,u=Object.isExtensible||function(){return!0},c=!r(3)(function(){return u(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!u(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!u(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return c&&l.NEED&&u(t)&&!a(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),i=Array.prototype;null==i[n]&&r(11)(i,n,{}),t.exports=function(t){i[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(110),i=r(77);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(21),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},function(t,e,r){var n=r(1),i=r(111),a=r(77),o=r(76)("IE_PROTO"),s=function(){},u=function(){var t,e=r(74)("iframe"),n=a.length;for(e.style.display="none",r(78).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;n--;)delete u.prototype[a[n]];return u()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=u(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(110),i=r(77).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";var n=r(2),i=r(8),a=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];a&&e&&!e[o]&&i.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),i=r(123),a=r(89),o=r(1),s=r(6),u=r(91),c={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,v,g,y=h?function(){return t}:u(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(a(y)){for(p=s(t.length);p>b;b++)if((g=e?m(o(d=t[b])[0],d[1]):m(t[b]))===c||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=i(v,m,d.value,e))===c||g===f)return g}).BREAK=c,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,i=r(14),a=r(5)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),i=r(5)("toStringTag"),a="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:a?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),i=r(24),a=r(3),o=r(80),s="["+o+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),f=function(t,e,r){var i={},s=a(function(){return!!o[t]()||"​"!="​"[t]()}),u=i[t]=s?e(l):o[t];r&&(i[r]=u),n(n.P+n.F*s,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},function(t,e){t.exports={}},function(module,exports,__webpack_require__){"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var TimingSpec=function(){function TimingSpec(){_classCallCheck(this,TimingSpec),this._offset=0,this._reference=TimingSpec.timingRef.previousStart}return _createClass(TimingSpec,[{key:"replaceOffsetConst",value:function replaceOffsetConst(constants){var _this=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.offset?void 0===constants.get(this.offset)?0===this.offset.indexOf("calc")?(this.offset=this.offset.substring(0,this.offset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.includes(e)&&("number"==typeof t?_this.offset=_this.offset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+_this.offset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset,constants)?this.offset=eval(this.offset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset)?this.offset=constants.get(this.offset):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:this.offset&&"object"===_typeof(this.offset)&&"string"==typeof this.offset.minOffset&&(void 0===constants.get(this.offset.minOffset)?0===this.offset.minOffset.indexOf("calc")?(this.offset.minOffset=this.offset.minOffset.substring(0,this.offset.minOffset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.minOffset.includes(e)&&("number"==typeof t?_this.offset.minOffset=_this.offset.minOffset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+_this.offset.minOffset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset.minOffset,constants)?this.offset.minOffset=eval(this.offset.minOffset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset.minOffset)?this.offset.minOffset=constants.get(this.offset.minOffset):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'})}},{key:"calELeOffsetTime",value:function(t){var e=this,r=new Map,n=1e6;return"object"===_typeof(this.offset)&&t.forEach(function(t,r){n>parseFloat(t["data-datum"][e.offset.field])&&(n=parseFloat(t["data-datum"][e.offset.field]))}),t.forEach(function(t,i){var a=0;"number"==typeof e.offset?a=e.offset:"object"===_typeof(e.offset)&&(a=e.offset.minOffset*parseFloat(t["data-datum"][e.offset.field])/n),r.set(i,a)}),r}},{key:"calOffsetTime",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===n.size){var i=0;switch(this.reference){case TimingSpec.timingRef.previousStart:i=t+this.offset-r;break;case TimingSpec.timingRef.previousEnd:i=e+this.offset-r;break;case TimingSpec.timingRef.absolute:i=this.offset+r;break;default:i=t+this.offset-r}return i}var a=this,o=new Map,s=1e6;return"object"===_typeof(this.offset)&&n.forEach(function(t,e){s>parseFloat(t["data-datum"][a.offset.field])&&(s=parseFloat(t["data-datum"][a.offset.field]))}),n.forEach(function(n,i){var u=0;switch("number"==typeof a.offset?u=a.offset:"object"===_typeof(a.offset)&&(u=a.offset.minOffset*parseFloat(n["data-datum"][a.offset.field])/s),a.reference){case TimingSpec.timingRef.previousStart:o.set(i,t+u-r);break;case TimingSpec.timingRef.previousEnd:o.set(i,e+u-r);break;case TimingSpec.timingRef.absolute:o.set(i,u+r);break;default:o.set(i,t+u-r)}}),o}},{key:"reference",set:function(t){if(void 0!==t){var e=TimingSpec.transRef(t);Object.keys(TimingSpec.timingRef).includes(e)&&(this._reference=t)}},get:function(){return this._reference}},{key:"offset",set:function(t){void 0!==t&&("number"==typeof t?this._offset=Math.floor(t/(1e3/TimingSpec.FRAME_RATE))*(1e3/TimingSpec.FRAME_RATE):"object"!==_typeof(t)&&"string"!=typeof t||(this._offset=t))},get:function(){return this._offset}}],[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}]),TimingSpec}();TimingSpec.FRAME_RATE=20,TimingSpec.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"},TimingSpec.dataBindAttrs=["field","minOffset","minDuration"];var _default=TimingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){var n=r(18),i=r(2),a=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),i=r(10),a=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[a])?e:i(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n=r(54),i=r(104);function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function c(t,e,r){return e&&u(t.prototype,e),r&&u(t,r),t}var f=function(){function t(){s(this,t)}return c(t,null,[{key:"arrIsContained",value:function(t,e){if(e.length>t)return!1;for(var r=0,n=e.length;r<n;r++)if(!t.includes(e[r]))return!1;return!0}},{key:"checkEquation",value:function(t,e){if(t=t.replace(/\s/g,""),/^[\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]$/.test(t))return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]{2,}/.test(t))return!1;if(/\(\)/.test(t))return!1;for(var r,n=[],i=0;i<t.length;i++)if("("===(r=t.charAt(i)))n.push("(");else if(")"===r){if(!(n.length>0))return!1;n.pop()}if(0!==n.length)return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]\)/.test(t))return!1;if(/[\x\÷\+\-\*\/]\(/.test(t))return!1;if(/\)[\x\÷\+\-\*\/]/.test(t))return!1;for(var a,o=t.replace(/[\(\)\x\÷\+\-\*\/]{1,}/g,"`").split(","),s=0;s<o.length;s++)if(a=o[s],/[A-Z]/i.test(a)&&void 0===e.get(a))return!1;for(var u=t.split(","),c=0;c<u.length;c++)if(void 0!==e.get(u[c]))if(null==u[c+1]);else if("+"!==u[c+1]&&"."!==u[c+1]&&"-"!==u[c+1]&&"x"!==u[c+1]&&"÷"!==u[c+1]&&"("!==u[c+1]&&")"!==u[c+1])return!1;return!0}},{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=o(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var i=t.keys()[n];r.set(i,this.deepClone(t.get(i)))}}for(var a in t)t.hasOwnProperty(a)&&(r[a]=this.deepClone(t[a]));return r}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,i=t.split("");if(2===t.length)r=e=parseInt(i[0].toString()+i[1].toString(),16),n=e;else if(3===t.length)e=parseInt(i[0].toString()+i[0].toString(),16),r=parseInt(i[1].toString()+i[1].toString(),16),n=parseInt(i[2].toString()+i[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(i[0].toString()+i[1].toString(),16),r=parseInt(i[2].toString()+i[3].toString(),16),n=parseInt(i[4].toString()+i[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,i=0;i<r.length|(n=r[i]);i++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},i=0;i<Object.keys(n).length|(r=Object.keys(n)[i]);i++){var a="object"===o(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,a)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],i=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,a=void 0;a=i.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,a.index)),n.push(a[0])}var s=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(s.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var u=[],c=null,f=!0;if(s.forEach(function(t){if(f)if("M"!==t.command){if(!c)return f=!1;if("m"!==t.command){var e=c,r=t.command===t.command.toLowerCase()?c.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(u.push([e,r]),c=r):f=!1}else c=c.map(function(e,r){return e+t.parameters[r]})}else c=t.parameters.slice(-2)}),f)return{type:"lines",data:u}}if(s.every(function(t){return"MmLlAaZz".includes(t.command)})&&s.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(s.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var i=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(i.cx)||isNaN(i.cy)||l.push({...i,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var i=t*r+e*n,a=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(i/a);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,i,a,o,s,u,c){var f,l,h,p,d,v=2*Math.PI;n<0&&(n=-n),i<0&&(i=-i);var g=Math.sin(a),y=Math.cos(a),m=(e-u)/2,b=(r-c)/2,k=(e+u)/2,S=(r+c)/2,A=y*m+g*b,w=y*b-g*m,x=A*A/(n*n)+w*w/(i*i);x>1&&(n*=Math.sqrt(x),i*=Math.sqrt(x));var T=n*i,_=n*w,M=i*A,E=_*_+M*M,O=Math.sqrt(Math.abs((T*T-E)/E));o==s&&(O=-O);var P=O*_/i,I=-O*M/n;f=y*P-g*I+k,l=g*P+y*I+S;var j=(A-P)/n,C=(A+P)/n,R=(w-I)/i,N=(w+I)/i;for(h=t.radian(1,0,j,R),p=t.radian(j,R,-C,-N);p>v;)p-=v;for(;p<0;)p+=v;for(0!=s&&0!=s||(p-=v),d=h+p;d>v;)d-=v;for(;d<0;)d+=v;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==s||1==s}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,i,a,o){a=a<0?a+2*Math.PI:a,n=0===n?0:n-1,i+=1;var s=(o=o<0||a>o?o+2*Math.PI:o)-a<=Math.PI?0:1,u=t.polarToCartesian(e,r,i,o),c=t.polarToCartesian(e,r,i,a),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,a),h=!1;return u.x===c.x&&u.y===c.y&&(c.y-=1,l.y-=1,h=!0),h?["M"+u.x,u.y,"A"+i,i,0,s,1,c.x,c.y,"M"+l.x,l.y,"A"+n,n,0,s,0,f.x,f.y+"Z"].join(","):["M"+u.x,u.y,"A"+i,i,0,s,0,c.x,c.y,"L"+l.x,l.y,"A"+n,n,0,s,1,f.x,f.y,"L"+u.x,u.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var i=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(i=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(i=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(i=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),i||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var a=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",a)}}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",i=0;i<300;i++){var a=e.getPointAtLength(r*i);n+=0===i?"M"+a.x+","+a.y:"L"+a.x+","+a.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,a=(0,i.parseSVG)(r),o=new n.PathMaker;return a.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new n.PathMaker(t);return r.uniform(),[e,r]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",s=t.match(a);if(s){var u=s[0].substring(0,1),c="0",f="0";if("m"===u||"M"===u){var l=s[0].substring(1).split(",");c=l[0],f=l[1]}for(var h=0;h<s.length;h++){var p=s[h].substring(0,1),d=s[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,i,h,p,d,e,c,r);break;case"h":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,i,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var v=d.split(","),g=0;g<v.length;g++)o=g%2==0?this.calNumTrans(o,i,h,p,v[g],e,c,r):this.calNumTrans(o,i,h,p,v[g],e,f,n),g!==v.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,i,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(c)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var S=d.split(","),A=0;A<S.length;A++)A===S.length-2?(o=this.calNumTrans(o,i,h,p,S[A],e,"1",0),o+=" "):A===S.length-1?o=this.calNumTrans(o,i,h,p,S[A],e,"1",0):o+=S[A]+" "}}"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(o+="Z")}return o}},{key:"calNumTrans",value:function(t,e,r,n,i,a,o,s){if(n=n.toLowerCase(),a)if(void 0!==e.get(n)){for(var u=e.get(n),c=!1,f=0;f<u.length;f++)if(u[f].cmdIdx===r){t+=o,c=!0;break}c||(t+=i)}else t+=i;else i.length>0&&(t+=parseFloat(i)+s);return t}},{key:"calTransD",value:function(t,e,r,n,i){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a="";if(0===r)a=t;else if(1===r)a=e;else for(var o=0,s=n.length;o<s;o++)a+=(0===o?"M":"L")+((i[o][0]-n[o][0])*r+n[o][0])+","+((i[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(a+="Z"),a}},{key:"arcTransition",value:function(t,e,r,n,i,a){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var s=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=s(t,e),r=s(t,r),n=s(r,n),n=s(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var u=a||function(t,e,r){return r*(e-t)+t};return[u(t,r,i),u(e,n,i)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var i=[],a=0;a<e.length;a++)void 0!==e[a]&&i.push(e[a].d?e[a].d:"m0,0");i.length>0&&t.compareD(i,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],i=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),o=1;o<t.length;o++)for(var s=t[o],u=(s=(s=s.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),c=0;c<i.length;c++)if(void 0===u[c]){var f=i[c].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=c,l.diffAttrIdxs=[];for(var h=i[c].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=u[c].substring(0,1),v=u[c].substring(1),g=i[c].substring(1);if(v!==g){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=c,y.diffAttrIdxs=[];for(var m=v.split(","),b=g.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var S=!1,A=0;A<e.get(d).length;A++)if(e.get(d)[A].cmdIdx===y.cmdIdx){S=!0,e.get(d)[A].diffAttrIdxs=[].concat(a(new Set([].concat(a(e.get(d)[A].diffAttrIdxs),a(y.diffAttrIdxs)))));break}S||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",i=0;i<e.length;i++)e[i].indexOf("translate")>=0?n=e[i]:e[i].indexOf("scale")>=0&&(r=e[i]);var a=["0","0"],o="1";return""!==n&&(a=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(a[0]),parseFloat(a[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=f,f.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var l=function(){function t(){s(this,t),this.chartWidth=0,this.chartHeight=0}return c(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=l;var h=function(){function t(){s(this,t)}return c(t,[{key:"construcor",value:function(t,e,r,n,i){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=i}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(a(Object.keys(t)),a(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var i=new RegExp(/[0-9\.,\s]/g);return t.d.replace(i,"")===e.d.replace(i,"")}return n.every(function(t){return r.indexOf(t)>=0})}}]),t}();e.AssetTemplate=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return i.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return s.PathMaker}}),e.MaskType=e.default=void 0;var n,i=r(145),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(103),s=r(71);function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?i.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,a,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.Alpha;if(e instanceof i.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return a=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,a.root),a}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var a=e.root.layers.indexOf(r.root);if(a>0){var o=e.root.layers[a-1];0!=n&&t[n-1].root==o||t.splice(n,0,new i.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,a.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new i.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&u(e.prototype,r),n&&u(e,n),t}();e.default=f,e.MaskType=c,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(c||(e.MaskType=c={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var i={jsMovin:new(((n=r(54))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=i},function(t,e,r){var n=r(15),i=r(6),a=r(35);t.exports=function(t){return function(e,r,o){var s,u=n(e),c=i(u.length),f=a(o,c);if(t&&r!=r){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),i=r(24);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),u=n(r),c=s.length;return u<0||u>=c?t?"":void 0:(a=s.charCodeAt(u))<55296||a>56319||u+1===c||(o=s.charCodeAt(u+1))<56320||o>57343?t?s.charAt(u):a:t?s.slice(u,u+2):o-56320+(a-55296<<10)+65536}}},function(t,e,r){var n=r(4),i=r(20),a=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},function(t,e,r){var n=r(5)("iterator"),i=!1;try{var a=[7][n]();a.return=function(){i=!0},Array.from(a,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var a=[7],o=a[n]();o.next=function(){return{done:r=!0}},a[n]=function(){return o},t(a)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var a=r.call(t,e);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,r){"use strict";r(127);var n=r(12),i=r(11),a=r(3),o=r(24),s=r(5),u=r(95),c=s("species"),f=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),p=!a(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!a(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[c]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=r(o,h,""[t],function(t,e,r,n,i){return e.exec===u?p&&!i?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=g[0],m=g[1];n(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),i=r(0),a=r(12),o=r(41),s=r(30),u=r(40),c=r(39),f=r(4),l=r(3),h=r(61),p=r(43),d=r(81);t.exports=function(t,e,r,v,g,y){var m=n[t],b=m,k=g?"set":"add",S=b&&b.prototype,A={},w=function(t){var e=S[t];a(S,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||S.forEach&&!l(function(){(new b).entries().next()}))){var x=new b,T=x[k](y?{}:-0,1)!=x,_=l(function(){x.has(1)}),M=h(function(t){new b(t)}),E=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});M||((b=e(function(e,r){c(e,b,t);var n=d(new m,e,b);return null!=r&&u(r,g,n[k],n),n})).prototype=S,S.constructor=b),(_||E)&&(w("delete"),w("has"),g&&w("get")),(E||T)&&w(k),y&&S.clear&&delete S.clear}else b=v.getConstructor(e,t,g,k),o(b.prototype,r),s.NEED=!0;return p(b,t),A[t]=b,i(i.G+i.W+i.F*(b!=m),A),y||v.setStrong(b,t,g),b}},function(t,e,r){for(var n,i=r(2),a=r(11),o=r(33),s=o("typed_array"),u=o("view"),c=!(!i.ArrayBuffer||!i.DataView),f=c,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=i[h[l++]])?(a(n.prototype,s,!0),a(n.prototype,u,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:s,VIEW:u}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,s,u=arguments[1];return i(this),(e=void 0!==u)&&i(u),null==t?new this:(r=[],e?(n=0,s=a(u,arguments[2],2),o(t,!1,function(t){r.push(s(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(102)),i=l(r(106)),a=l(r(107)),o=l(r(47)),s=r(53),u=r(55),c=r(73),f=r(54);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=g(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._id,t.chartIdx,t.selector,t._align=e.alignTarget.object,t.grouping=new a.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t.leaves=[],t.allMarksThisAni=[],t.marksInOrder=[],t.anisAligned=[],t.alignOnData=!1,t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms",this.allMarkAni.forEach(function(t,r){for(var n,i=0;i<t.actionAttrs.length|(n=t.actionAttrs[i]);i++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)})}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;this.allMarkAni.forEach(function(r,n){for(var a=function(a){var l=r.actionAttrs[a];if(l.duration>0){var h=document.getElementById(n);if(l.type===i.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),v=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===i.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,c.getBoundingBox)(h);u.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),u.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&u.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var a=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,g=0;g<t.to.length;g++)if(t.to[g][0]===n){o=t.from[g][1],f=t.to[g][1];break}a.forEach(function(t){if("shape"===t){var e,r,a=p(s.CanisUtil.transDToLottieSpec(o),2);e=a[0],o=a[1];var c=p(s.CanisUtil.transDToLottieSpec(f),2);r=c[0],f=c[1],u.globalVar.markLayers.get(n).setAnimatableProperty("x",d,v,e[0],r[0],i.default.transToLottieAction(l.easing)),u.globalVar.markLayers.get(n).setAnimatableProperty("y",d,v,e[1],r[1],i.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=s.CanisUtil.toLottieRGBA(o),f=s.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);u.globalVar.markLayers.get(n).setAnimatableProperty(t,d,v,o,f,i.default.transToLottieAction(l.easing))})}else a.forEach(function(e){u.globalVar.markLayers.get(n).setAnimatableProperty(e,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else u.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else if(l.type===i.default.actionTargets.mask){var g,y=(0,c.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case i.default.targetAnimationType.wipe:case i.default.targetAnimationType.move:case i.default.targetAnimationType.appear:g=f.LayerFactory.boundingBox(h);break;case i.default.targetAnimationType.circle:(g=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),g.setStaticProperty("anchorY",y[3]/2);break;case i.default.targetAnimationType.wheel:var b=s.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],S=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];g=f.LayerFactory.ellipse(k,S,m,m);var A=t.finalStatus.get(n)[l.chartIdx].startAngle,w=t.finalStatus.get(n)[l.chartIdx].endAngle;g.setStaticProperty("trimOffset",-A/Math.PI/2*360-90),l.attribute[0].to=1-(w-A)%(2*Math.PI)/(2*Math.PI),g.setStaticProperty("strokeWidth",2*m),g.setStaticProperty("fillOpacity",0)}var x=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),T=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){g.setAnimatableProperty(t.attrName,x,T,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))}),u.globalVar.jsMovin.addMask(g,u.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)a(l)})}},{key:"transAlign",value:function(t){switch(t){case this.alignTarget.withEle:return"withEle";case this.alignTarget.withObj:return"withObj"}}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear(),e.aniIdx=0}}],(l=[{key:"replaceConstants",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.replaceOffsetConst(t,e),"undefined"!==this.grouping&&this.grouping.replaceDelayConst(t,e),this.actions.forEach(function(r){r.replaceOffsetConst(t,e),r.replaceDurationConst(t,e)})}},{key:"translate",value:function(t,e,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.id=t.id,this.reference=t.reference,this.offset=t.offset,this.align=t.align,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var o,s=0;s<t.effects.length|(o=t.effects[s]);s++){o.chartIdx=t.chartIdx;for(var u,c=i.default.transToVisualAttrAction(o,t.chartIdx,e,n.default.dataTrans,a),f=0;f<c.length|(u=c[f]);f++){var l=new i.default;l.initAction(u),this.actions.push(l)}}}}},{key:"calAniTime",value:function(t){var r,n=this,a=!1;void 0!==this.align&&e.animations.forEach(function(t,i){n.align.target===t.id&&(r=t,n.align.type===e.alignTarget.withEle&&(a=!0,n._grouping=t.grouping))}),void 0!==r&&r.anisAligned.push("".concat(this.chartIdx,"_").concat(this.selector));for(var o,u=this,c=new Map,f=0;f<t.length|(o=t[f]);f++){for(var l,v=new Map,g=0;g<this.actions.length|(l=this.actions[g]);g++)if("object"===d(l.duration)){var y=e.domMarks.get(o)["data-datum"],m=parseFloat(y[l.duration.field]),b=void 0===l.duration.minDuration?300:l.duration.minDuration;v.set(l.duration.field,[m,b])}c.set(o,v)}var k=p(i.default.calActionDuration(this.actions,c,e.domMarks),3),S=k[0],A=k[1],w=k[2],x=[],T=[];if(a){var _=p(this._grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,a),2);x=_[0],T=_[1]}else{var M=p(this.grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,a),2);x=M[0],T=M[1]}a&&(this.root.children=T),this.marksInOrder=x,this.leaves=T;for(var E,O=new Map,P=0;P<this.marksInOrder.length|(E=this.marksInOrder[P]);P++){for(var I,j={},C=0;C<e.visualAttrs.length|(I=e.visualAttrs[C]);C++)if(void 0===e.domMarks.get(E)[I])switch(I){case"opacity":j[I]=1;break;case"width":j[I]=e.domMarks.get(E).bbWidth;break;case"height":j[I]=e.domMarks.get(E).bbHeight;break;case"x":j[I]=e.domMarks.get(E).bbX;break;case"y":j[I]=e.domMarks.get(E).bbY;break;case"cx":void 0!==e.domMarks.get(E).cx?j[I]=e.domMarks.get(E).cx:j[I]=e.domMarks.get(E).bbX+e.domMarks.get(E).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(E).cy?j[I]=e.domMarks.get(E).cy:j[I]=e.domMarks.get(E).bbY+e.domMarks.get(E).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(E).innerRadius?j[I]=e.domMarks.get(E).innerRadius:j[I]=0;break;case"outterRadius":void 0!==e.domMarks.get(E).outterRadius?j[I]=e.domMarks.get(E).outterRadius:j[I]=Math.sqrt(Math.pow(e.domMarks.get(E).bbWidth/2,2)+Math.pow(e.domMarks.get(E).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(E).startAngle?j[I]=e.domMarks.get(E).startAngle:j[I]=0;break;case"endAngle":void 0!==e.domMarks.get(E).endAngle?j[I]=e.domMarks.get(E).endAngle:j[I]=2*Math.PI}else j[I]=e.domMarks.get(E)[I];void 0===e.finalStatus.get(E)&&e.finalStatus.set(E,[]),e.finalStatus.get(E).push(j),O.set(E,{startTime:0,totalDuration:S.get(E),actionAttrs:[]})}var R=new Map;if(void 0!==this.align)switch(this.align.type){case e.alignTarget.withEle:R=this.calTimeAsEle(O,r);break;case e.alignTarget.withObj:R=this.calTimeAsObj(O,r)}else R=this.calTimeAsObj(O,r);O.forEach(function(t,r){var n={startTime:t.startTime+R.get(r),totalDuration:t.totalDuration,actionAttrs:[]};u.updateAniStartAndEndTime(n);for(var a,o=0;o<w.length|(a=w[o]);o++){for(var c,f=new i.default,l=Object.keys(a),h=0;h<l.length|(c=l[h]);h++)if(f[c]=a[c],"_duration"===c&&"object"===d(a[c])){var p=e.domMarks.get(r)["data-datum"],v=A.get(a[c].field);f[c]=a[c].minDuration*parseFloat(p[a[c].field])/v}else"offsetStart"===c&&(f[c]=a[c].get(r));f.animationType===i.default.targetAnimationType.custom?s.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}O.set(r,n)}),O.forEach(function(t,r){for(var n=0,i=0;i<t.actionAttrs.length;i++)t.actionAttrs[i].startTime=t.startTime+t.actionAttrs[i].offsetStart,t.actionAttrs[i].startTime+t.actionAttrs[i].duration>n&&(n=t.actionAttrs[i].startTime+t.actionAttrs[i].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var a=e.allMarkAni.get(r).startTime,o=a+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=a<t.startTime?a:t.startTime;var s=t.startTime+t.totalDuration;o=o>s?o:s,e.allMarkAni.get(r).totalDuration=o-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}})}},{key:"calTimeAsEle",value:function(t,r){var i=this,a=this;this.root.align=this.align,r.leaves.forEach(function(t){var r=t.marks;t.leafStart=1e5,t.leafEnd=0,r.forEach(function(r){var n=e.allMarkAni.get(r);n.startTime<t.leafStart&&(t.leafStart=n.startTime),n.startTime+n.totalDuration>t.leafEnd&&(t.leafEnd=n.startTime+n.totalDuration)})});var o=new Map;if(r.leaves.forEach(function(t,e){var r=[];t.marks.forEach(function(t){var e;void 0!==n.default.marksWithSameDatum.get(t)&&(e=r).push.apply(e,h(n.default.marksWithSameDatum.get(t)))}),r=[].concat(h(new Set(r)));for(var i,u=0,c=a.leaves.length;u<c|(i=a.leaves[u]);u++)void 0===o.get(u)&&o.set(u,[]),s.CanisUtil.arrIsContained(r,i.marks)&&(o.get(u).push(e),a.alignOnData=!0)}),this.alignOnData){var u=this.leaves.length,c=0,f=function(e){var n=r.leaves[o.get(e)[0]],a=i.leaves[e-1],s=i.leaves[e],u="",f="";void 0!==s?(f=s.id,void 0===n?void 0!==a&&(a.leafStart=1e5,a.leafEnd=0,a.marks.forEach(function(e){var r=t.get(e);r.startTime<a.leafStart&&(a.leafStart=r.startTime),r.startTime+r.totalDuration>a.leafEnd&&(a.leafEnd=r.startTime+r.totalDuration)}),c=i.calOfstTimeForLastAni(s,a,t)):(s.alignTo=n.id,void 0===n.alignWithLeaves&&(n.alignWithLeaves=[]),n.alignWithLeaves.push(s),u=n.id,c=i.calOfstTimeForLastAni(s,n,t))):c=0;var l="".concat(i.chartIdx,"_").concat(i.selector);i.updateLastAnimationTiming(r,n,c,u,f,l)};for(v=0;v<u;v++)f(v)}else for(var l=this.leaves.length>r.leaves.length?this.leaves.length:r.leaves.length,p=0,d=function(n){var a=r.leaves[n],o=i.leaves[n-1],s=i.leaves[n],u="",c="";void 0!==s?(c=s.id,void 0===a?void 0!==o&&(o.leafStart=1e5,o.leafEnd=0,o.marks.forEach(function(t){var r=e.allMarkAni.get(t);r.startTime<o.leafStart&&(o.leafStart=r.startTime),r.startTime+r.totalDuration>o.leafEnd&&(o.leafEnd=r.startTime+r.totalDuration)}),p=i.calOfstTimeForLastAni(s,o,t)):(s.alignTo=a.id,void 0===a.alignWithLeaves&&(a.alignWithLeaves=[]),a.alignWithLeaves.push(s),u=a.id,p=i.calOfstTimeForLastAni(s,a,t))):p=0;var f="".concat(i.chartIdx,"_").concat(i.selector);i.updateLastAnimationTiming(r,a,p,u,c,f)},v=0;v<l;v++)d(v);return this.calAniOffset(t,void 0,e.alignTarget.withEle)}},{key:"calOfstTimeForLastAni",value:function(t,r,n){var i=0;t.start=1e6,t.end=0;var a=0;switch(this.reference){case o.default.timingRef.previousStart:return a=r.leafStart,t.marks.forEach(function(e){var o=n.get(e).totalDuration;n.get(e).startTime=a,a+o-r.leafEnd>i&&(i=a+o-r.leafEnd),a<t.start&&(t.start=a),a+o>t.end&&(t.end=a+o)}),i;case o.default.timingRef.previousEnd:return a=r.leafEnd,r.alignWithLeaves.forEach(function(t){void 0!==t.leafEnd?t.leafEnd>a&&(a=t.leafEnd):t.marks.forEach(function(t){if(void 0!==e.allMarkAni.get(t)){var r=e.allMarkAni.get(t).startTime+e.allMarkAni.get(t).totalDuration;r>a&&(a=r)}})}),t.marks.forEach(function(e){var r=n.get(e).totalDuration;n.get(e).startTime=a,a+r>i&&(i=r),a<t.start&&(t.start=a),a+r>t.end&&(t.end=a+r)}),i}}},{key:"updateLastAnimationTiming",value:function(t,r,n,i,a,o){var s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6];if(""!==i&&t.leaves.forEach(function(t){t.id===i&&(void 0===t.alignWith&&(t.alignWith=[]),t.alignWith.push(o),void 0===t.alignWithIds&&(t.alignWithIds=[]),t.alignWithIds.push(a))}),void 0!==r){var u,c=this;t.leaves.forEach(function(i){var a=r.leafStart;if(void 0===a&&(a=1e7,r.marks.forEach(function(t){e.allMarkAni.get(t).startTime<a&&(a=e.allMarkAni.get(t).startTime)})),void 0!==i.leafStart){if(i.leafStart>a){var o=1e5;i.marks.forEach(function(r){e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime<o&&(o=e.allMarkAni.get(r).startTime),e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>i.leafEnd&&(i.leafEnd=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),i.leafEnd>t.animationEndTime&&(t.animationEndTime=i.leafEnd),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n})}),i.leafStart=o}}else i.marks.forEach(function(r){e.allMarkAni.get(r).startTime>a&&(e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>t.animationEndTime&&(t.animationEndTime=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n}))})}),t.anisAligned.length>0&&t.anisAligned.forEach(function(t){if(t!=="".concat(c.chartIdx,"_").concat(c.selector)){for(var i,a=e.animations.get(t),o=0,s=r.alignWithLeaves.length;o<s;o++){for(var u=r.alignWithLeaves[o],f=0,l=a.leaves.length;f<l;f++)if(u.id===a.leaves[f].id){i=u;break}if(void 0!==i)break}c.updateLastAnimationTiming(a,i,n,"","","",!1)}}),void 0!==t.align&&s&&t.align.type===e.alignTarget.withEle&&(e.animations.forEach(function(e,r){t.align.target===e.id&&(u=e)}),c.updateLastAnimationTiming(u,r,n,"","",""))}}},{key:"calTimeAsObj",value:function(t,r){return this.grouping.calTimeWithTree(this.root,-1,-1,t),this.root.timingRef=this.reference,this.root.offset=this.offset,this.root.align=this.align,this.root.aniId=this.id,this.calAniOffset(t,r,e.alignTarget.withObj)}},{key:"calAniOffset",value:function(t,r,n){var i=1e4;return t.forEach(function(t,e){t.startTime<i&&(i=t.startTime)}),n===e.alignTarget.withEle?this.calELeOffsetTime(e.domMarks):void 0===r?this.calOffsetTime(0,0,i,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,i,e.domMarks)}},{key:"updateAniStartAndEndTime",value:function(t){t.startTime<this.animationStartTime&&(this.animationStartTime=t.startTime),t.startTime+t.totalDuration>this.animationEndTime&&(this.animationEndTime=t.startTime+t.totalDuration)}},{key:"id",set:function(t){void 0===this._id&&(void 0!==t?this._id=t:(this._id="ani"+e.aniIdx,e.aniIdx++))},get:function(){return this._id}},{key:"align",set:function(t){void 0!==t&&"object"===d(t)&&(this._align=t)},get:function(){return this._align}}])&&v(r.prototype,l),m&&v(r,m),e}();m.FIRST_ANI_ID="ani0",m.aniIdx=0,m.alignTarget={withEle:"element",withObj:"object"},m.alignAttrs=["target","type"],m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.markClass=new Map,m.allMarks=[],m.attrs=["id","selector","grouping","effects","offset","reference","align"],m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map;var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(104);function i(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,s;return e=t,s=[{key:"a2c",value:function(t,e,r,n,i,a,o,s,u,c){var f,l=120*Math.PI/180,h=Math.PI/180*(+i||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,s,u,s,u];if(c)w=c[0],x=c[1],S=c[2],A=c[3];else{t=(f=d(t,e,-h)).x,e=f.y,s=(f=d(s,u,-h)).x,u=f.y,Math.cos(Math.PI/180*i),Math.sin(Math.PI/180*i);var v=(t-s)/2,g=(e-u)/2,y=v*v/(r*r)+g*g/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(a==o?-1:1)*Math.sqrt(Math.abs((m*b-m*g*g-b*v*v)/(m*g*g+b*v*v))),S=k*r*g/n+(t+s)/2,A=k*-n*v/r+(e+u)/2,w=Math.asin((e-A)/n),x=Math.asin((u-A)/n);w=t<S?Math.PI-w:w,x=s<S?Math.PI-x:x,w<0&&(w=2*Math.PI+w),x<0&&(x=2*Math.PI+x),o&&w>x&&(w-=2*Math.PI),!o&&x>w&&(x-=2*Math.PI)}var T=x-w;if(Math.abs(T)>l){var _=x,M=s,E=u;x=w+l*(o&&x>w?1:-1),s=S+r*Math.cos(x),u=A+n*Math.sin(x),p=this.a2c(s,u,r,n,i,0,o,M,E,[x,_,S,A])}T=x-w;var O=Math.cos(w),P=Math.sin(w),I=Math.cos(x),j=Math.sin(x),C=Math.tan(T/4),R=4/3*r*C,N=4/3*n*C,F=[t,e],L=[t+R*P,e-N*O],D=[s+R*j,u-N*I],G=[s,u];if(L[0]=2*F[0]-L[0],L[1]=2*F[1]-L[1],c)return[L,D,G].concat(p);for(var V=[],B=0,W=(p=[L,D,G].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;B<W;B++)V[B]=B%2?d(p[B-1],p[B],h).y:d(p[B],p[B+1],h).x;return V}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var i=3*(n-3*r+3*e-t),a=6*(r-2*e+t),o=3*(e-t),s=1/0,u=-1/0;if(a*a-4*i*o>=0){var c=Math.sqrt(a*a-4*i*o);[1,-1].map(function(t){return(t*c-a)/2/i}).forEach(function(i){if(i>0&&i<1){var a=Math.pow(1-i,3)*t+3*Math.pow(1-i,2)*i*e+3*(1-i)*i*i*r+Math.pow(i,3)*n;s=Math.min(s,a),u=Math.max(u,a)}})}return s=Math.min(s,t,n),u=Math.max(u,t,n),[s,u]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,i){n>=i.length-1||r.push(t*(1-e)+i[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=this.calculateHighlyOrder(r,t),a=this.calculateHighlyOrder(i,t),o=this.calculateHighlyOrder(a,t);return[i[0],a[0],o[0],a[1],i[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,i(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,a,o){this.path.i.push([r-a,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([a,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,r,a)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(a,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,i,a){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+i,this.currentY+a)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,a,o,s,u){for(var c=t.a2c(this.currentX,this.currentY,e,r,n,a,o,s,u);c.length>=6;){var f=c.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,i,a,o){this.arcTo(t,e,r,n,i,this.currentX+a,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,i(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,i(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,a,o){if(a<=0)return r.v.push(n),void r.i.push(e.path.i[a]);for(var s=e.path.o,u=e.path.i,c=[o[a-1][0],s[a-1][0]+o[a-1][0],u[a][0]+n[0],n[0]],f=[o[a-1][1],s[a-1][1]+o[a-1][1],u[a][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(i(c))),d=e.calculateBezierSplit.apply(e,[h].concat(i(f))),v=c[0],g=p.shift()-v,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,S=d[1],A=d.shift()-S;r.o.push([g,k]),r.i.push([m,A]),r.v.push([y,S]),c=p,f=d}var w=c.shift(),x=c.shift()-w,T=c[1],_=c.shift()-T,M=f.shift(),E=f.shift()-M,O=f[1],P=f.shift()-O;r.o.push([x,E]),r.i.push([_,P]),r.v.push([T,O])}),this.path=r,this.uniform()}}}])&&a(e.prototype,r),s&&a(e,s),t}();e.PathMaker=s},function(t,e,r){var n=r(148),i=r(149);t.exports=function(t,e,r){var a=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var s=0;s<16;++s)e[a+s]=o[s];return e||i(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function i(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),i=t.getBBox();return[r.e+i.x,r.f+i.y,i.width+1,i.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=i,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/i(t,e)):0}},function(t,e,r){var n=r(4),i=r(2).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(2),i=r(18),a=r(29),o=r(109),s=r(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(48)("keys"),i=r(33);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),i=r(1),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),i=r(79).set;t.exports=function(t,e,r){var a,o=e.constructor;return o!==r&&"function"==typeof o&&(a=o.prototype)!==r.prototype&&n(a)&&i&&i(t,a),t}},function(t,e,r){"use strict";var n=r(21),i=r(24);t.exports=function(t){var e=String(i(this)),r="",a=n(t);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),i=r(0),a=r(12),o=r(11),s=r(46),u=r(86),c=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,v,g,y){u(r,e,d);var m,b,k,S=function(t){if(!h&&t in T)return T[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},A=e+" Iterator",w="values"==v,x=!1,T=t.prototype,_=T[l]||T["@@iterator"]||v&&T[v],M=_||S(v),E=v?w?S("entries"):M:void 0,O="Array"==e&&T.entries||_;if(O&&(k=f(O.call(new t)))!==Object.prototype&&k.next&&(c(k,A,!0),n||"function"==typeof k[l]||o(k,l,p)),w&&_&&"values"!==_.name&&(x=!0,M=function(){return _.call(this)}),n&&!y||!h&&!x&&T[l]||o(T,l,M),s[e]=M,s[A]=p,v)if(m={values:w?M:S("values"),keys:g?M:S("keys"),entries:E},y)for(b in m)b in T||a(T,b,m[b]);else i(i.P+i.F*(h||x),e,m);return m}},function(t,e,r){"use strict";var n=r(36),i=r(32),a=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},function(t,e,r){var n=r(60),i=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),i=r(5)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||a[i]===t)}},function(t,e,r){"use strict";var n=r(8),i=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},function(t,e,r){var n=r(44),i=r(5)("iterator"),a=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||a[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=function(t){for(var e=n(this),r=a(e.length),o=arguments.length,s=i(o>1?arguments[1]:void 0,r),u=o>2?arguments[2]:void 0,c=void 0===u?r:i(u,r);c>s;)e[s++]=t;return e}},function(t,e,r){"use strict";var n=r(31),i=r(126),a=r(46),o=r(15);t.exports=r(85)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,i,a=r(51),o=RegExp.prototype.exec,s=String.prototype.replace,u=o,c=(n=/a/,i=/b*/g,o.call(n,"a"),o.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(u=function(t){var e,r,n,i,u=this;return f&&(r=new RegExp("^"+u.source+"$(?!\\s)",a.call(u))),c&&(e=u.lastIndex),n=o.call(u,t),c&&n&&(u.lastIndex=u.global?n.index+n[0].length:e),f&&n&&n.length>1&&s.call(n[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)}),n}),t.exports=u},function(t,e,r){"use strict";var n=r(59)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,i,a,o=r(19),s=r(116),u=r(78),c=r(74),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++g]=function(){s("function"==typeof t?t:Function(t),e)},n(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:v&&v.now?n=function(t){v.now(o(m,t,1))}:d?(a=(i=new d).port2,i.port1.onmessage=b,n=o(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),i=r(97).set,a=n.MutationObserver||n.WebKitMutationObserver,o=n.process,s=n.Promise,u="process"==r(20)(o);t.exports=function(){var t,e,r,c=function(){var n,i;for(u&&(n=o.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(u)r=function(){o.nextTick(c)};else if(!a||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);r=function(){f.then(c)}}else r=function(){i.call(n,c)};else{var l=!0,h=document.createTextNode("");new a(c).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},function(t,e,r){"use strict";var n=r(10);function i(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},function(t,e,r){"use strict";var n=r(2),i=r(7),a=r(29),o=r(66),s=r(11),u=r(41),c=r(3),f=r(39),l=r(21),h=r(6),p=r(136),d=r(37).f,v=r(8).f,g=r(93),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,S=n.DataView,A=n.Math,w=n.RangeError,x=n.Infinity,T=k,_=A.abs,M=A.pow,E=A.floor,O=A.log,P=A.LN2,I=i?"_b":"buffer",j=i?"_l":"byteLength",C=i?"_o":"byteOffset";function R(t,e,r){var n,i,a,o=new Array(r),s=8*r-e-1,u=(1<<s)-1,c=u>>1,f=23===e?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=_(t))!=t||t===x?(i=t!=t?1:0,n=u):(n=E(O(t)/P),t*(a=M(2,-n))<1&&(n--,a*=2),(t+=n+c>=1?f/a:f*M(2,1-c))*a>=2&&(n++,a/=2),n+c>=u?(i=0,n=u):n+c>=1?(i=(t*a-1)*M(2,e),n+=c):(i=t*M(2,c-1)*M(2,e),n=0));e>=8;o[l++]=255&i,i/=256,e-=8);for(n=n<<e|i,s+=e;s>0;o[l++]=255&n,n/=256,s-=8);return o[--l]|=128*h,o}function N(t,e,r){var n,i=8*r-e-1,a=(1<<i)-1,o=a>>1,s=i-7,u=r-1,c=t[u--],f=127&c;for(c>>=7;s>0;f=256*f+t[u],u--,s-=8);for(n=f&(1<<-s)-1,f>>=-s,s+=e;s>0;n=256*n+t[u],u--,s-=8);if(0===f)f=1-o;else{if(f===a)return n?NaN:c?-x:x;n+=M(2,e),f-=o}return(c?-1:1)*n*M(2,f-e)}function F(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function G(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function V(t){return R(t,52,8)}function B(t){return R(t,23,4)}function W(t,e,r){v(t[m],e,{get:function(){return this[r]}})}function U(t,e,r,n){var i=p(+r);if(i+e>t[j])throw w(b);var a=t[I]._b,o=i+t[C],s=a.slice(o,o+e);return n?s:s.reverse()}function q(t,e,r,n,i,a){var o=p(+r);if(o+e>t[j])throw w(b);for(var s=t[I]._b,u=o+t[C],c=n(+i),f=0;f<e;f++)s[u+f]=c[a?f:e-f-1]}if(o.ABV){if(!c(function(){k(1)})||!c(function(){new k(-1)})||c(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var z,Y=(k=function(t){return f(this,k),new T(p(t))})[m]=T[m],X=d(T),H=0;X.length>H;)(z=X[H++])in k||s(k,z,T[z]);a||(Y.constructor=k)}var J=new S(new k(2)),Q=S[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||u(S[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[j]=e},S=function(t,e,r){f(this,S,"DataView"),f(t,k,"DataView");var n=t[j],i=l(e);if(i<0||i>n)throw w("Wrong offset!");if(i+(r=void 0===r?n-i:h(r))>n)throw w("Wrong length!");this[I]=t,this[C]=i,this[j]=r},i&&(W(k,"byteLength","_l"),W(S,"buffer","_b"),W(S,"byteLength","_l"),W(S,"byteOffset","_o")),u(S[m],{getInt8:function(t){return U(this,1,t)[0]<<24>>24},getUint8:function(t){return U(this,1,t)[0]},getInt16:function(t){var e=U(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=U(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return F(U(this,4,t,arguments[1]))},getUint32:function(t){return F(U(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return N(U(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return N(U(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){q(this,1,t,L,e)},setUint8:function(t,e){q(this,1,t,L,e)},setInt16:function(t,e){q(this,2,t,D,e,arguments[2])},setUint16:function(t,e){q(this,2,t,D,e,arguments[2])},setInt32:function(t,e){q(this,4,t,G,e,arguments[2])},setUint32:function(t,e){q(this,4,t,G,e,arguments[2])},setFloat32:function(t,e){q(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){q(this,8,t,V,e,arguments[2])}});y(k,"ArrayBuffer"),y(S,"DataView"),s(S[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=S},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(102)),i=l(r(105)),a=l(r(47)),o=l(r(70)),s=r(53),u=r(55);r(150);var c=l(r(107)),f=l(r(106));function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e,r,n,i,a,o){try{var s=t[a](o),u=s.value}catch(t){return void r(t)}s.done?e(u):Promise.resolve(u).then(n,i)}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this._constants=new Map,this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,l,y,m;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=t;this.chartSpecs=[];var o=n.default.chartPreProcessing(a.charts,r),s=v(o,2);if(a.charts=s[0],this.hasError=s[1],this.hasError)return a;for(var c=0;c<a.charts.length;c++){var f=void 0===a.charts[c].id?"chart"+c:a.charts[c].id,l=void 0===a.charts[c].type?n.default.CHART_URL:a.charts[c].type,h=new n.default(f,l,a.charts[c].source);this.chartSpecs.push(h)}return a.facet&&(this.facet=new i.default(a.facet.type,a.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError?a:(u.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart),u.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart),a)}},{key:"compareSpec",value:function(t){var e=!1;return(void 0!==this.currentSpec.constants&&JSON.stringify(t.constants)!==JSON.stringify(this.currentSpec.constants)||void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.marksWithSameDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear()),this.currentSpec=t,e}},{key:"checkAttrs",value:function(t,e,r){for(var n=Object.keys(e),i=!1,a=0,o=n.length;a<o;a++)if(!t.includes(n[a])){i=!0;var s=e[n[a]],u='"'+n[a]+'":';isNaN(Number(s))?"object"===d(s)?u+=JSON.stringify(s):u+='"'+s+'"':u+=""+s,r.info={type:"error",msg:'Illegal attribute name "'+n[a]+'".',errSpec:u.replace(/\s/g,"")};break}return i}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var i=0,s=t.charts.length;i<s&&!(r=this.checkAttrs(n.default.attrs,t.charts[i],e));i++){if(!t.charts[i].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}if(t.charts[i].source.indexOf(".dsvg")<0&&(!t.charts[i].start||!t.charts[i].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}}for(var u=0,c=t.animations.length;u<c&&!(r=this.checkAttrs(o.default.attrs,t.animations[u],e));u++){if(!t.animations[u].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[u]).replace(/\s/g,"")};break}if(!t.animations[u].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[u]).replace(/\s/g,"")};break}if(t.animations[u].reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.animations[u].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[u].reference.replace(/\s/g,"")+'"'};break}if(t.animations[u].align&&"object"===d(t.animations[u].align)){if(r=this.checkAttrs(o.default.alignAttrs,t.animations[u].align,e))break;if(void 0!==t.animations[u].align.type&&!Object.keys(o.default.alignTarget).includes(o.default.transAlign(t.animations[u].align.type))){r=!0,e.info={type:"error",msg:"The value of align has to be one of: element or object.",errSpec:'"type":"'+t.animations[u].align.type.replace(/\s/g,"")+'"'};break}}if(t.animations[u].offset&&"object"===d(t.animations[u].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].offset,e)))break;if(t.animations[u].grouping&&(r=this.checkGroupingSpec(t.animations[u].grouping,e)))break;for(var l=0,h=t.animations[u].effects.length;l<h&&!(r=this.checkAttrs(f.default.attrs,t.animations[u].effects[l],e));l++){if(!t.animations[u].effects[l].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[u].effects[l]).replace(/\s/g,"")};break}if(!Object.values(f.default.actionTypes).includes(t.animations[u].effects[l].type)){r=!0,e.info={type:"error",msg:'Invalid effect type "'+t.animations[u].effects[l].type+'".',errSpec:'"type":"'+t.animations[u].effects[l].type.replace(/\s/g,"")+'"'};break}if(t.animations[u].effects[l].offset&&"object"===d(t.animations[u].effects[l].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].effects[l].offset,e)))break;if(t.animations[u].effects[l].duration&&"object"===d(t.animations[u].effects[l].duration)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].effects[l].duration,e)))break;if(t.animations[u].effects[l].easing&&!Object.values(f.default.easingType).includes(t.animations[u].effects[l].easing)){r=!0,e.info={type:"error",msg:'Invalid easing type "'+t.animations[u].effects[l].easing+'".',errSpec:'"easing":"'+t.animations[u].effects[l].easing.replace(/\s/g,"")+'"'};break}}}return r}},{key:"checkGroupingSpec",value:function(t,e){if("number"==typeof t||"string"==typeof t){var r="number"==typeof t?'"grouping":'+t:'"grouping":"'+t.replace(/\s/g,"")+'"';return e.info={type:"error",msg:"Invalid grouping value.",errSpec:r},!0}if(this.checkAttrs(c.default.attrs,t,e))return!0;if(t.reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.reference)))return e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0;if(t.sort&&"object"===d(t.sort)){if(this.checkAttrs(c.default.sortAttrs,t.sort,e))return!0}else if("number"==typeof t.sort)return e.info={type:"error",msg:"Invalid sort value.",errSpec:'"sort":'+t.sort},!0;return!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(y=regeneratorRuntime.mark(function t(e){var r,i,l,p,v,g,y,m=this,b=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(r=b.length>1&&void 0!==b[1]?b[1]:{},JSON.stringify(r),this.hasError=!1,this.hasError){t.next=37;break}if(o.default.resetAll(),c.default.frames.clear(),c.default.framesMark.clear(),0!==e.charts.length){t.next=18;break}o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=37;break;case 18:return u.globalVar.jsMovin.setFrameRate(a.default.FRAME_RATE),i=this.compareSpec(e),t.next=22,this.preprocessCharts(e,i,r);case 22:if((l=t.sent).constants&&void 0!==l.constants&&(this.constants=l.constants),l.effectTmpls&&void 0!==l.effectTmpls&&f.default.assignActionTmpls(l.effectTmpls,r),console.log("effect tmpls: ",f.default.actionTmpls),this.animations=l.animations,!Array.isArray(this.animations)){t.next=37;break}v=function(t){var e=m.animations[t],i=document.createElement("div");document.body.appendChild(i),i.innerHTML=n.default.charts[e.chartIdx].outerHTML;var a=i.querySelectorAll(e.selector),u=[];if([].forEach.call(i.querySelectorAll(".mark"),function(t){u.push(t.getAttribute("id"));for(var e=t.getAttribute("class").split(" "),r="",n=0,i=e.length;n<i;n++)"mark"===e[n]&&(r=e[n+1]);o.default.markClass.set(t.getAttribute("id"),r)}),o.default.allMarks=[].concat(h(new Set([].concat(h(o.default.allMarks),u)))),0===a.length)return"number"==typeof e.selector?r.info={type:"error",msg:"The selector need to be a CSS selector",errSpec:'"selector":'+e.selector}:r.info={type:"error",msg:"The selector "+e.selector+" selects no marks",errSpec:'"selector":"'+e.selector.replace(/\s/g,"")+'"'},{v:void 0};e.selector=m.sortSelector(e.selector);for(var c=[],f=0;f<n.default.changedAttrs.length;f++)c.push(n.default.changedAttrs[f]);var l=void 0,d=[];a.length>0&&[].forEach.call(a,function(t){d.push(t.getAttribute("id"))});var v=e.chartIdx+"_"+e.selector;if("0_.mark"===v&&(v="0_#".concat(o.default.allMarks.join(", #"))),void 0!==o.default.animations.get(v)?(l=o.default.animations.get(v)).translate(e,c,!0,r):((l=new o.default).translate(e,c,!1,r),o.default.animations.set(v,l)),void 0===l.align&&void 0!==p&&(l.align={target:p.id,type:o.default.alignTarget.withObj}),m.constants.size>0&&l.replaceConstants(m.constants,r),a.length>0){var g=new Map;[].forEach.call(a,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id"),r=t.getAttribute("class");if(void 0===g.get(r)?g.set(r,0):g.set(r,g.get(r)+1),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var i=s.CanisUtil.toJSON(t),a=s.CanisUtil.discretizePath(i);if(a){if("lines"===a.type)for(var u=0;u<a.data.length;u++)i.attr["x"+(1+2*u)]=a.data[u][0][0],i.attr["y"+(1+2*u)]=a.data[u][0][1],i.attr["x"+(2+2*u)]=a.data[u][1][0],i.attr["y"+(2+2*u)]=a.data[u][1][1];else for(var c=Object.keys(a.data),f=0;f<c.length;f++){var l=c[f];"radius"===l?a.data[l].length>1?(i.attr.innerRadius=a.data[l][0].rx+1,i.attr.outterRadius=a.data[l][1].rx-1):(i.attr.innerRadius=0,i.attr.outterRadius=a.data[l][0].rx-1):i.attr[l]=a.data[l]}t=s.CanisUtil.toDOM(i)}}for(var p={},d=[].concat(h(t.attributes)),v=0;v<d.length;v++){var y=d[v];p[y.name]=t.getAttribute(y.name)}var m=document.getElementById(e);p.bbWidth=m.getBBox().width,p.bbHeight=m.getBBox().height,p.bbX=m.getBBox().x,p.bbY=m.getBBox().y,p.content=t.textContent,p.id=e;var b=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(b)&&(b=b[0]),b.clsIdx="a".concat(g.get(r)),void 0!==n.default.nonDataMarkDatum.get(e)&&(n.default.nonDataMarkDatum.get(e).clsIdx="a".concat(g.get(r))),p["data-datum"]=b,p.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(p["stroke-dasharray"]=document.getElementById(e).getTotalLength(),p["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var k=s.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==k&&k&&"pies"===k.type&&(p.cx=k.data.cx,p.cy=k.data.cy,p.startAngle=(k.data.clockwise?k.data.startAngle:k.data.endAngle)-1/(2*Math.PI),p.endAngle=(k.data.clockwise?k.data.endAngle:k.data.startAngle)+4*Math.PI+1/(2*Math.PI),k.data.radius.length>1?(p.innerRadius=k.data.radius[0].rx>k.data.radius[1].rx?k.data.radius[1].rx:k.data.radius[0].rx,p.outterRadius=k.data.radius[0].rx>k.data.radius[1].rx?k.data.radius[0].rx:k.data.radius[1].rx,p.outterRadius++):(p.innerRadius=0,p.outterRadius=k.data.radius[0].rx+1))}o.default.domMarks.set(e,p)}}})}l.calAniTime(d),o.default.animations.get(v).alignOnData=l.alignOnData,p=l,document.body.removeChild(i)},g=0;case 30:if(!(g<this.animations.length)){t.next=37;break}if("object"!==d(y=v(g))){t.next=34;break}return t.abrupt("return",y.v);case 34:g++,t.next=30;break;case 37:case"end":return t.stop()}},t,this)}),m=function(){var t=this,e=arguments;return new Promise(function(r,n){var i=y.apply(t,e);function a(t){p(i,r,n,a,o,"next",t)}function o(t){p(i,r,n,a,o,"throw",t)}a(void 0)})},function(t){return m.apply(this,arguments)})},{key:"sortSelector",value:function(t){var e=t.split(", ");return e.length>0?(e.sort(function(t,e){return parseInt(t.substring(5))-parseInt(e.substring(5))}),e.join(", ")):t}},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.default.renderAnimation(r),o.default.mapToLottieSpec();var n=u.globalVar.jsMovin.toJSON();return t.lottieJSON=n,r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"constants",set:function(t){var e=this;this._constants.clear(),t.forEach(function(t){e._constants.set(t.name,t.value)})},get:function(){return this._constants}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if((r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length)>1)for(var n=function(r){var n=s.CanisUtil.deepClone(t);n[0].reference=a.default.timingRef.previousEnd;var i=new Map,o=n.map(function(t){if(t.chartIdx=r,void 0!==t.id){var e="_ani_"+r+"_0";i.set(t.id,e)}return void 0!==t.align&&(void 0!==i.get(t.align.target)?t.align.target=i.get(t.align.target):console.warn("aligning with an id that does not exist!")),t});e.push.apply(e,h(o))},i=1;i<r-1;i++)n(i);this._animations=e},get:function(){return this._animations}}])&&g(e.prototype,r),l&&g(e,l),t}();y.lottieJSON="";var m=y;e.default=m,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=r(53),a=(n=r(105))&&n.__esModule?n:{default:n},o=r(55);function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=e,this.type=r,this.source=n}var e,r,n;return e=t,n=[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,i=0;i<t.length;i++){var a=t[i];if(void 0!==a.start&&void 0!==a.end){var o=parseInt(a.start),s=parseInt(a.end);if(s<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var u=a.source.split("/"),c=void 0===a.id?u[u.length-1]:a.id,f=o;f<=s;f++)r.push({id:c+f,source:a.source+f+".dsvg"})}else r.push(a)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var i=new Map;t.charts=[];for(var a=[],o=0,s=0,u=!1,c=0;c<e.length;c++)if(e[c].type===t.CHART_URL){var f=new XMLHttpRequest,l="file:"===document.location.protocol?0:200,h=void 0;if(f.open("GET",e[c].source,!1),f.overrideMimeType("text/html;charset=utf-8"),f.send(null),f.status===l){var p=document.createElement("div");p.innerHTML=f.responseText;var d=(h=p.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(d[2]),s=parseFloat(d[3]),t.charts.push(h),i.set(e[c].id,t.charts.length-1)}else 404===f.status&&(a.unshift(c),u=!0,n.info={type:"error",msg:"Can not find "+e[c].source+" ! Please check the url.",errSpec:'"source":"'+e[c].source.replace(/\s/g,"")+'"'})}else{var v=document.createElement("div");v.innerHTML=e[c].source;var g=v.children[0],y=g.getAttribute("viewBox").split(" ");o=parseFloat(y[2]),s=parseFloat(y[3]),t.charts.push(g),i.set(e[c].id,t.charts.length-1)}for(var m=0;m<a.length;m++)e.slice(a[m],1);return void 0!==r?t.facetViews(i,r):this.viewport.setViewport(o,s),u}},{key:"removeTransAndMerge",value:function(){for(var e=this,r=new Map,n=0;n<t.charts.length;n++)t.charts[n].setAttribute("trans","0,0"),t.removeTransitions(t.charts[n].children[0],r);Array.from(r).map(function(t){return t[1]}).forEach(function(t){t.forEach(function(r){e.marksWithSameDatum.set(r,t)})}),this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],i=0;i<r.views[0].frames.length;i++){for(var a=[],o=0;o<r.views.length;o++){var s=r.views[o].frames[i];void 0!==e.get(s)?a.push(t.charts[e.get(s)].cloneNode(!0)):console.warn("chart name "+s+" is undefined !")}a.length===r.views.length&&n.push(a)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],s=0,u=0,c=s,f=u,l=0;l<n.length;l++){var h=n[l];s=parseFloat(h[0].getAttribute("width")),u=parseFloat(h[0].getAttribute("height")),c=s,f=u;var p=h[0].getAttribute("viewBox").split(" "),d=parseFloat(p[2]),v=parseFloat(p[3]),g=i.CanisUtil.getTransformAttrs(h[0].children[0]);switch(h[0].children[0].setAttribute("transform","translate("+g.transNums[0]+","+g.transNums[1]+")"),e){case a.default.facetType.row:f*=h.length,h[0].setAttribute("height",u*h.length),h[0].setAttribute("viewBox","0 0 "+d+" "+u*h.length);break;case a.default.facetType.col:c*=h.length,h[0].setAttribute("width",s*h.length),h[0].setAttribute("viewBox","0 0 "+s*h.length+" "+v)}for(var y=function(t){var r=h[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,c=0;c<o.length;c++){var f=o[c],l=i.CanisUtil.getTransformAttrs(f);switch(e){case a.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(u+20)*t)+") scale("+l.scaleNum+")");break;case a.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(s+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}h[0].children[0].appendChild(f)}},m=0;m<h.length;m++)y(m);o.push(h[0])}t.charts=o,this.viewport.setViewport(c,f)}},{key:"mergeCharts",value:function(){for(var e=new Set,r=new Map,n=new Map,a=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],o={},s=0;s<a.length;s++)o[a[s]]=null;for(var u=function(i){var s=t.charts[i].querySelectorAll(".mark");s.length>0&&[].forEach.call(s,function(s){var u=s.getAttribute("id");e.add(u);for(var c={},f=0;f<a.length;f++)c[a[f]]="textContent"===a[f]?s.innerHTML:s.getAttribute(a[f]);void 0===r.get(u)&&r.set(u,new Array(t.charts.length).fill(o)),r.get(u)[i]=c,n.set(u,s.outerHTML)})},c=0;c<t.charts.length;c++)u(c);t.changedAttrs=[];var f=i.CanisUtil.deepClone(a);r.forEach(function(e,r){for(var n=0;n<f.length;n++){for(var i=!0,a=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){a=e[o];break}for(var s=0;s<e.length;s++)if(void 0!==e[s]&&e[s][f[n]]!==a[f[n]]){t.changedAttrs.push(f[n]),i=!1;break}i||f.splice(n,1)}});var l=new Map;for(t.changedAttrs.indexOf("d")>=0&&(l=i.CanisUtil.findDiffCmds(r)),e=Array.from(e),c=0;c<t.charts.length;c++)for(var h=0;h<e.length;h++)if(0===t.charts[c].querySelectorAll("#"+e[h]).length){var p=n.get(e[h]),d=document.createElement("div");d.innerHTML=p;for(var v=d.children[0],g={},y=0;y<t.changedAttrs.length;y++)if("y"===t.changedAttrs[y]&&t.changedAttrs.indexOf("height")>=0){var m=(v.getAttribute("y")?parseFloat(v.getAttribute("y")):0)+(v.getAttribute("height")?parseFloat(v.getAttribute("height")):0);v.setAttribute("y",m),g.y=m}else if("d"===t.changedAttrs[y]){var b=void 0;v.getAttribute("d")&&(b=i.CanisUtil.setPathDValue(v.getAttribute("d"),!0,0,0,l)),v.setAttribute("d",b),g.d=b}else"textContent"===t.changedAttrs[y]?(v.innerHTML="",g.textContent=""):"fill"===t.changedAttrs[y]||"stroke"===t.changedAttrs[y]?(void 0===v.getAttribute(t.changedAttrs[y])&&v.setAttribute(t.changedAttrs[y],"#FFFFFF"),g[t.changedAttrs[y]]=v.getAttribute(t.changedAttrs[y])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[y])?"x2"===t.changedAttrs[y]?(v.setAttribute("x2",parseFloat(v.getAttribute("x1"))),g.x2=parseFloat(v.getAttribute("x1"))):"y2"===t.changedAttrs[y]?(v.setAttribute("y2",parseFloat(v.getAttribute("y1"))),g.y2=parseFloat(v.getAttribute("y1"))):g[t.changedAttrs[y]]=parseFloat(v.getAttribute(t.changedAttrs[y])):(v.setAttribute(t.changedAttrs[y],0),g[t.changedAttrs[y]]=0);p='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+v.outerHTML+"</svg>";var k=(new DOMParser).parseFromString(p,"image/svg+xml").lastChild.children[0];t.charts[c].querySelector("#chartContent").appendChild(k),r.get(e[h])[c]=g}t.dataTrans=new Map;for(var S=0;S<e.length;S++){for(var A=r.get(e[S]),w=[],x=0;x<A.length;x++){for(var T={},_=0;_<t.changedAttrs.length;_++)["width","height","r"].includes(t.changedAttrs[_])?T[t.changedAttrs[_]]=100*A[x][t.changedAttrs[_]]/A[0][t.changedAttrs[_]]:T[t.changedAttrs[_]]=A[x][t.changedAttrs[_]];w.push(T)}t.dataTrans.set(e[S],w),t.charts[0].querySelector("#"+e[S]).setAttribute("data-transition",JSON.stringify({dataTrans:w},null,"\t"))}return t.charts[0]}},{key:"getBBoxes",value:function(){var t=document.getElementById("visChart").querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e,r){void 0!==e.style.fill&&e.style.fill&&(void 0!==e.getAttribute("fill")&&e.getAttribute("fill")||e.setAttribute("fill",e.style.fill),e.style.fill=null),void 0!==e.style.stroke&&e.style.stroke&&(void 0!==e.getAttribute("stroke")&&e.getAttribute("stroke")||e.setAttribute("stroke",e.style.stroke),e.style.stroke=null),void 0!==e.style.strokeWidth&&e.style.strokeWidth&&(void 0!==e.getAttribute("stroke-width")&&e.getAttribute("stroke-width")||e.setAttribute("stroke-width",e.style.strokeWidth),e.style.strokeWidth=null),"none"===e.getAttribute("stroke")&&e.setAttribute("stroke-width",0);var n=e.getAttribute("transform"),a=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var o=e.getAttribute("data-datum"),s=JSON.parse(o);Array.isArray(s)&&(s=s[0]);for(var u=e.getAttribute("class").split(" "),c="",f=0,l=u.length;f<l;f++)if("mark"===u[f]){c=u[f+1];break}s.mShape=c;var h=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(h=!0)});var p=e.getAttribute("id");if(h)this.nonDataMarkDatum.set(p,s);else{this.dataMarkDatum.set(p,s);var d={};Object.keys(s).forEach(function(t){0!==t.indexOf("_")&&(d[t]=s[t])}),d.mShape="";var v=JSON.stringify(d);void 0===r.get(v)&&r.set(v,[]),r.get(v).push(p)}}if(e.classList.contains("axis")||e.classList.contains("legend")){var g=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(g)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),g=g[0]),e.classList.contains("axis"))void 0===this.chartUnderstanding[g.position]&&(this.chartUnderstanding[g.position]=[]),this.chartUnderstanding[g.position].push("position");else if(e.classList.contains("legend"))for(var y in g)void 0===this.chartUnderstanding[g[y]]&&(this.chartUnderstanding[g[y]]=[]),this.chartUnderstanding[g[y]].push(y)}if(n){n=(n=n.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var m="",b="",k=0;k<n.length;k++)n[k].indexOf("translate")>=0?b=n[k]:n[k].indexOf("scale")>=0&&(m=n[k]);var S=b.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",m),"g"===e.tagName?e.setAttribute("trans",parseFloat(S[0])+parseFloat(a[0])+","+(parseFloat(S[1])+parseFloat(a[1]))):i.CanisUtil.transShape(e,parseFloat(S[0])+parseFloat(a[0]),parseFloat(S[1])+parseFloat(a[1]))}else"g"===e.tagName?e.setAttribute("trans",a.join(",")):i.CanisUtil.transShape(e,parseFloat(a[0]),parseFloat(a[1]));if(e.children.length>0)for(var A=0;A<e.children.length;A++)t.removeTransitions(e.children[A],r)}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}],(r=null)&&s(e.prototype,r),n&&s(e,n),t}();u.CHART_URL="url",u.CHART_CONTENT="content",u.charts=[],u.attrs=["id","source","start","end"],u.changedAttrs=[],u.viewport=new i.Viewport,u.dataTrans=new Map,u.svgChart,u.chartUnderstanding={mShape:["shape"]},u.dataMarkDatum=new Map,u.marksWithSameDatum=new Map,u.nonDataMarkDatum=new Map;var c=u;e.default=c,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,i;return e=t,i=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),i&&n(e,i),t}();e.EasingFactory=i},function(t,e,r){var n=r(147).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var i in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)i in t&&(t[i]+=t.relative?t[n[i]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,i;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.warn('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),i=t.range[0].match(e),a=t.range[1].match(e);if(r===n){t.frames=[];for(var o=i;o<=a;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.warn("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var i=0;i<e.length;i++)if(e[i].frames.length<r)for(var a=e[i].frames[e[i].frames.length-1],o=r-e[i].frames.length;o>0;)e[i].frames.push(a),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),i&&n(e,i),t}();i.facetType={row:"row",col:"column"};var a=i;e.default=a,t.exports=e.default},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_GlobalVar=__webpack_require__(55),_jsmovin=__webpack_require__(54);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ActionSpec=function(_TimingSpec){function ActionSpec(){var t;return _classCallCheck(this,ActionSpec),(t=_possibleConstructorReturn(this,(ActionSpec.__proto__||Object.getPrototypeOf(ActionSpec)).call(this))).chartIdx=0,t._extend="",t._type=ActionSpec.actionTypes.appear,t.animationType="",t._easing=ActionSpec.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t.oriActionType,t}return _inherits(ActionSpec,_TimingSpec),_createClass(ActionSpec,[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?_jsmovin.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.offset,this.duration=t.duration,this.easing=t.easing,this.oriActionType=t.oriActionType,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"replaceDurationConst",value:function replaceDurationConst(constants){var _this3=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.duration?void 0===constants.get(this.duration)?0===this.duration.indexOf("calc")?(this.duration=this.duration.substring(0,this.duration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.includes(e)&&("number"==typeof t?_this3.duration=_this3.duration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+_this3.duration.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.duration,constants)?this.duration=eval(this.duration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration)?this.duration=constants.get(this.duration):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:this.duration&&"object"===_typeof(this.duration)&&"string"==typeof this.duration.minDuration&&(void 0===constants.get(this.duration.minDuration)?0===this.duration.minDuration.indexOf("calc")?(this.duration.minDuration=this.duration.minDuration.substring(0,this.duration.minDuration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.minDuration.includes(e)&&("number"==typeof t?_this3.duration.minDuration=_this3.duration.minDuration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+_this3.duration.minDuration.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.duration.minDuration,constants)?this.duration.minDuration=eval(this.duration.minDuration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration.minDuration)?this.duration.minDuration=constants.get(this.duration.minDuration):status.info={type:"error",msg:"MinDuration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(ActionSpec.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(ActionSpec.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){"number"==typeof t?this._duration=Math.floor(t/(1e3/_TimingSpec2.default.FRAME_RATE))*(1e3/_TimingSpec2.default.FRAME_RATE):"string"!=typeof t&&"object"!==_typeof(t)||(this._duration=t)},get:function(){return this._duration}}],[{key:"assignActionTmpls",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.actionTmpls.clear(),t.forEach(function(t){t.name&&void 0!==t.name||(t.name=""),e.actionTmpls.set(t.name,t)}),this.actionTmpls.forEach(function(t,n){var i=t.extend;if(i&&void 0!==i){var a=e.actionTmpls.get(i);void 0!==a?(Object.keys(a).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=a[e])}),delete t.extend,e.actionTmpls.set(n,t)):r.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+i+'"'}}})}},{key:"replaceActionTmpls",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t.extend&&void 0!==t.extend){var r=this.actionTmpls.get(t.extend);return void 0!==r?(Object.keys(r).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=r[e])}),delete t.extend,t):(e.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+t.extend+'"'},t)}return t}},{key:"transToVisualAttrAction",value:function(t,e,r,n){arguments.length>4&&void 0!==arguments[4]&&arguments[4];console.log("action tmpls: ",this.actionTmpls,t),t=this.replaceActionTmpls(t),console.log("replaced action: ",t);for(var i=[],a=function(a){var o=r[a],s=[],u=[];n.forEach(function(t,r){if(e+1<t.length)if("d"===o||"textContent"===o||"fill"===o||"stroke"===o){var n=[r,t[e][o]?t[e][o]:"d"===o?"m0,0":t[e][o]],i=[r,t[e+1][o]?t[e+1][o]:"d"===o?"m0,0":t[e+1][o]];if("d"===o){var a=document.createElementNS("http://www.w3.org/2000/svg","path"),c=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttributeNS(null,"d",t[e][o]?t[e][o]:"m0,0"),c.setAttributeNS(null,"d",t[e+1][o]?t[e+1][o]:"m0,0");for(var f=a.getTotalLength()/300,l=c.getTotalLength()/300,h=[],p=[],d=0;d<300;d++){var v=a.getPointAtLength(f*d),g=c.getPointAtLength(l*d);h.push([v.x,v.y]),p.push([g.x,g.y])}n.push(h),i.push(p)}s.push(n),u.push(i)}else s.push([r,parseFloat(t[e][o])]),u.push([r,parseFloat(t[e+1][o])])});var c={chartIdx:t.chartIdx,reference:_TimingSpec2.default.timingRef.previousStart,offset:0,duration:t.type===ActionSpec.actionTypes.transition?t.duration:0,type:ActionSpec.actionTargets.mark,oriActionType:ActionSpec.actionTypes.custom,animationType:ActionSpec.targetAnimationType.custom,attribute:[{attrName:o,from:s,to:u}]};i.push(c)},o=0;o<r.length;o++)a(o);if(t.type!==ActionSpec.actionTypes.transition){var s={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?_TimingSpec2.default.FRAME_RATE:t.duration,type:ActionSpec.actionTargets.mask,oriActionType:t.type};switch(t.type){case ActionSpec.actionTypes.appear:s.duration=1e3/_TimingSpec2.default.FRAME_RATE,s.animationType=ActionSpec.targetAnimationType.fade,s.type=ActionSpec.actionTargets.mark,s.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.disappear:s.duration=1e3/_TimingSpec2.default.FRAME_RATE,s.animationType=ActionSpec.targetAnimationType.fade,s.type=ActionSpec.actionTargets.mark,s.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.fade:s.animationType=ActionSpec.targetAnimationType.fade,s.type=ActionSpec.actionTargets.mark,s.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.fadeOut:s.animationType=ActionSpec.targetAnimationType.fade,s.type=ActionSpec.actionTargets.mark,s.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.grow:s.type=ActionSpec.actionTargets.mark,s.animationType=ActionSpec.targetAnimationType.grow,s.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.degrow:s.type=ActionSpec.actionTargets.mark,s.animationType=ActionSpec.targetAnimationType.grow,s.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wipeBottom:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wipeOutFromTop:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeTop:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromBottom:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wipeLeft:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromRight:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeRight:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeOutFromLeft:s.animationType=ActionSpec.targetAnimationType.wipe,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.circle:s.animationType=ActionSpec.targetAnimationType.circle,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.circleOut:s.animationType=ActionSpec.targetAnimationType.circle,s.maskType=_jsmovin.MaskType.Alpha,s.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wheel:s.animationType=ActionSpec.targetAnimationType.wheel,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wheelOut:s.animationType=ActionSpec.targetAnimationType.wheel,s.maskType=_jsmovin.MaskType.InvertAlpha,s.attribute=[{attrName:"trimEnd",from:0,to:1}]}i.push(s)}return i}},{key:"calActionDuration",value:function(t,e,r){for(var n=0,i=-1e5,a=0,o=0,s=!1,u=function(e){var u=void 0,c=new Map;u=t[e].calOffsetTime(a,o,0,r),e>0&&t[e-1].animationType===ActionSpec.targetAnimationType.mistake&&u.forEach(function(r,n){u.set(n,r-t[e-1].offset)});var f=1e6,l=-1e5;t[e].offsetStart=new Map,u.forEach(function(r,a){var o=0;"object"===_typeof(t[e].duration)?(s=!0,o=r):"number"==typeof t[e].duration&&(o=r+t[e].duration),c.set(a,o),t[e].offsetStart.set(a,r),r<f&&(f=r),o>l&&(l=o),r<n&&(n=r),o>i&&(i=o)}),a=f,o=l},c=0;c<t.length;c++)u(c);var f=i-n,l=new Map,h=new Map;return s?(e.forEach(function(t,e){t.forEach(function(t,e){(void 0===h.get(e)||t[0]<h.get(e))&&h.set(e,t[0])})}),e.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=h.get(e);r+=t[1]*t[0]/n}),l.set(e,f+r)})):e.forEach(function(t,e){l.set(e,f)}),[l,h,t]}},{key:"transToLottieAction",value:function(t){switch(t){case ActionSpec.easingType.easeLinear:return _jsmovin.EasingFactory.linear();case ActionSpec.easingType.easeInQuad:return _jsmovin.EasingFactory.easeInQuad();case ActionSpec.easingType.easeOutQuad:return _jsmovin.EasingFactory.easeOutQuad();case ActionSpec.easingType.easeInOutQuad:return _jsmovin.EasingFactory.easeInOutQuad();case ActionSpec.easingType.easeInCubic:return _jsmovin.EasingFactory.easeInCubic();case ActionSpec.easingType.easeOutCubic:return _jsmovin.EasingFactory.easeOutCubic();case ActionSpec.easingType.easeInOutCubic:return _jsmovin.EasingFactory.easeInOutCubic()}}}]),ActionSpec}(_TimingSpec2.default);ActionSpec.actionTmpls=new Map,ActionSpec.attrs=["type","offset","reference","easing","duration"],ActionSpec.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},ActionSpec.actionTargets={mark:"mark",mask:"mask"},ActionSpec.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",grow:"grow",custom:"custom",mistake:"mistake"},ActionSpec.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var _default=ActionSpec;exports.default=_default,module.exports=exports.default},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_Util=__webpack_require__(53);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var GroupingSpec=function(_TimingSpec){function GroupingSpec(){var t;return _classCallCheck(this,GroupingSpec),(t=_possibleConstructorReturn(this,(GroupingSpec.__proto__||Object.getPrototypeOf(GroupingSpec)).call(this)))._groupBy="id",t._reference=_TimingSpec2.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}return _inherits(GroupingSpec,_TimingSpec),_createClass(GroupingSpec,[{key:"replaceDelayConst",value:function replaceDelayConst(constants){var _this2=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.delay&&(void 0===constants.get(this.delay)?0===this.delay.indexOf("calc")?(this.delay=this.delay.substring(0,this.delay.length-1).substring(5),constants.forEach(function(t,e,r){_this2.delay.includes(e)&&("number"==typeof t?_this2.delay=_this2.delay.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+_this2.delay.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.delay,constants)?this.delay=eval(this.delay):status.info={type:"error",msg:"Wrong equation.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.delay)?this.delay=constants.get(this.delay):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}),void 0!==this.grouping&&this.grouping.replaceDelayConst(constants,status)}},{key:"initGrouping",value:function(t){this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new GroupingSpec,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new GroupingSpec,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,e,r,n,i){return GroupingSpec.frames.clear(),GroupingSpec.framesMark.clear(),0===Object.keys(r).length?(r.groupRef="root",r.id=GroupingSpec.nodeId,GroupingSpec.frames.set(GroupingSpec.nodeId,!0),GroupingSpec.nodeId++,r.children=[],r.marks=t,r.timingRef=void 0===n?_TimingSpec2.default.timingRef.previousStart:n,r.delay=0,this.generateTree(r,e)):this.updateTree(r,e),this.getMarkOrderAndLeaves(r,i)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,i=this.delay;if(void 0!==this.grouping){var a=!1;if(void 0!==t.children[0]&&(a=t.children[0].groupRef===r),a){for(var o,s=new Map,u=0;u<t.children.length|(o=t.children[u]);u++)this.grouping.updateTree(o,e),s.set(o.refValue,o),o.timingRef=n,o.delay=i;this.sortNodes(this.sort,t,s,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,e){for(var r,n=this.groupBy,i=this.reference,a=this.delay,o=new Map,s=0;s<t.marks.length|(r=t.marks[s]);s++){var u=e.get(r)["data-datum"],c=void 0;if(void 0!==e.get(r)[n])c=e.get(r)[n];else{if(void 0!==e.get(r)[n]||void 0===u[n])return void console.warn("error: grouping by an unknown attribute");c=u[n]}if(void 0!==o.get(c))o.get(c).marks.push(r);else{var f={};f.id=GroupingSpec.nodeId,GroupingSpec.nodeId++,f.groupRef=n,"id"===f.groupRef&&(f.definedById=this.definedById),f.refValue=c,f.timingRef=i,f.delay=a,f.children=[],f.marks=[r],o.set(c,f)}}if(this.sortNodes(this.sort,t,o,e),void 0!==this.grouping)for(var l,h=0;h<t.children.length|(l=t.children[h]);h++)this.grouping.generateTree(l,e)}},{key:"sortNodes",value:function(t,e,r,n){switch(e.children=[],_typeof(t.order)){case"object":for(var i,a=0;a<t.order.length|(i=t.order[a]);a++){if(!isNaN(Number(i))){var o=Number(i);void 0!==r.get(o)&&(e.children.push(r.get(o)),0)}void 0!==r.get(i)&&(e.children.push(r.get(i)),0)}break;case"string":var s=!0;if(r.forEach(function(t,e){t.marks.length>1&&(s=!1)}),void 0!==t.field&&s){var u=t.field,c=[].concat(_toConsumableArray(r)),f=t.order;c.sort(function(t,e){var r=t[1].marks[0],i=e[1].marks[0],a="",o="",s=n.get(r)["data-datum"],c=n.get(i)["data-datum"];return void 0!==n.get(r)[u]&&"undefined"!==n.get(i)[u]?(a=n.get(r)[u],o=n.get(i)[u]):void 0===n.get(r)[u]&&void 0!==s[u]&&void 0===n.get(i)[u]&&void 0!==c[u]&&(a=s[u],o=c[u]),isNaN(parseFloat(a))||(a=parseFloat(a)),isNaN(parseFloat(o))||(o=parseFloat(o)),f===GroupingSpec.orderTypes.ascending?a>=o?1:-1:f===GroupingSpec.orderTypes.descending?o>=a?1:-1:f===GroupingSpec.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var l,h=0;h<c.length|(l=c[h]);h++)e.children.push(l[1])}else{var p=[].concat(_toConsumableArray(r));t.order===GroupingSpec.orderTypes.ascending?p.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===GroupingSpec.orderTypes.descending?p.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===GroupingSpec.orderTypes.random&&p.sort(function(t,e){return Math.random()>=.5?1:-1});for(var d,v=0;v<p.length|(d=p[v]);v++)e.children.push(d[1])}break;default:r.forEach(function(t,r){e.children.push(t),0})}}},{key:"appendFrame",value:function(t,e,r,n){!GroupingSpec.frames.get(t)||0!==r&&r!==n-1?GroupingSpec.frames.set(e,!1):GroupingSpec.frames.set(e,!0)}},{key:"getMarkOrderAndLeaves",value:function(t,e){var r=[],n=[];if(null!=t){var i=[];for(t.parentGroupRef=[],t.parentGroupRefValue=[],i.unshift(t);0!=i.length;){var a=i.shift(),o=a.children;if(o.length<=0)(a.definedById||!a.definedById&&1===a.parentGroupRef.length)&&(e&&(a.children=[],a.parentGroupRef=[a.parentGroupRef[0]],a.parentGroupRefValue=[a.parentGroupRefValue[0]],a.groupRef="id",a.refValue=a.marks[0]),n.push(a)),r=[].concat(_toConsumableArray(r),_toConsumableArray(a.marks));else{"id"!==a.children[0].groupRef||"root"===a.groupRef||a.children[0].definedById||(e&&(a.children=[],a.parentGroupRef=[a.parentGroupRef[0]],a.parentGroupRefValue=[a.parentGroupRefValue[0]],a.groupRef="id",a.refValue=a.marks[0]),n.push(a));for(var s=0;s<o.length;s++)o[s].parentGroupRef=[].concat(_toConsumableArray(a.parentGroupRef),[a.groupRef]),o[s].parentGroupRefValue=[].concat(_toConsumableArray(a.parentGroupRefValue),[a.refValue]),i.push(o[s])}}}return[r,n]}},{key:"calTimeWithTree",value:function(t,e,r,n){if(t.children.length>0)for(var i=0;i<t.children.length;i++)i>0?this.calTimeWithTree(t.children[i],t.children[i-1].start,t.children[i-1].end,n):this.calTimeWithTree(t.children[i],-1,-1,n);switch(t.timingRef){case _TimingSpec2.default.timingRef.previousStart:t.start=e+t.delay;break;case _TimingSpec2.default.timingRef.previousEnd:t.start=r+t.delay;break;case _TimingSpec2.default.timingRef.absolute:t.start=t.delay;break;default:t.start=e+t.delay}-1===e&&(t.start=0),t.end=0;for(var a=0;a<t.marks.length;a++)n.get(t.marks[a]).startTime+=t.start,n.get(t.marks[a]).startTime+n.get(t.marks[a]).totalDuration>t.end&&(t.end=n.get(t.marks[a]).startTime+n.get(t.marks[a]).totalDuration);if(1===t.marks.length){var o=t.marks[0];GroupingSpec.frames.get(t.id)?GroupingSpec.framesMark.set(o,!0):void 0===GroupingSpec.framesMark.get(o)&&GroupingSpec.framesMark.set(o,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=_TimingSpec2.default.transRef(t);Object.keys(_TimingSpec2.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){"number"==typeof t?t>=1e3/_TimingSpec2.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/_TimingSpec2.default.FRAME_RATE:"string"==typeof t&&(this._delay=t)},get:function(){return this._delay}}]),GroupingSpec}(_TimingSpec2.default);GroupingSpec.attrs=["groupBy","reference","delay","sort","grouping"],GroupingSpec.sortAttrs=["order","field"],GroupingSpec.orderTypes={ascending:"ascending",descending:"descending",random:"random"},GroupingSpec.nodeId=0,GroupingSpec.frames=new Map,GroupingSpec.framesMark=new Map;var _default=GroupingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(74)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),i=r(15),a=r(56)(!1),o=r(76)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),u=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;e.length>u;)n(s,r=e[u++])&&(~a(c,r)||c.push(r));return c}},function(t,e,r){var n=r(8),i=r(1),a=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,u=0;s>u;)n.f(t,r=o[u++],e[r]);return t}},function(t,e,r){var n=r(15),i=r(37).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(7),i=r(34),a=r(57),o=r(50),s=r(9),u=r(49),c=Object.assign;t.exports=!c||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n})?function(t,e){for(var r=s(t),c=arguments.length,f=1,l=a.f,h=o.f;c>f;)for(var p,d=u(arguments[f++]),v=l?i(d).concat(l(d)):i(d),g=v.length,y=0;g>y;)p=v[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:c},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),i=r(4),a=r(116),o=[].slice,s={},u=function(t,e,r){if(!(e in s)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),s=function(){var n=r.concat(o.call(arguments));return this instanceof s?u(e,n.length,n):a(e,n,t)};return i(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,i=r(45).trim,a=r(80),o=/^[-+]?0[xX]/;t.exports=8!==n(a+"08")||22!==n(a+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,i=r(45).trim;t.exports=1/n(r(80)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(83),i=Math.pow,a=i(2,-52),o=i(2,-23),s=i(2,127)*(2-o),u=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),c=n(t);return i<u?c*(i/u/o+1/a-1/a)*u*o:(r=(e=(1+o/a)*i)-(e-i))>s||r!=r?c*(1/0):c*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var a=t.return;throw void 0!==a&&n(a.call(t)),e}}},function(t,e,r){var n=r(10),i=r(9),a=r(49),o=r(6);t.exports=function(t,e,r,s,u){n(e);var c=i(t),f=a(c),l=o(c.length),h=u?l-1:0,p=u?-1:1;if(r<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,u?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,c));return s}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=a(r.length),s=i(t,o),u=i(e,o),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?o:i(c,o))-u,o-s),l=1;for(u<s&&s<u+f&&(l=-1,u+=f-1,s+=f-1);f-- >0;)u in r?r[s]=r[u]:delete r[s],s+=l,u+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(95);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(51)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),i=r(4),a=r(99);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(65)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(i(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,i=r(36),a=r(41),o=r(19),s=r(39),u=r(40),c=r(85),f=r(126),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),v=h?"_s":"size",g=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,c){var f=t(function(t,n){s(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=n&&u(n,r,t[c],t)});return a(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var r=d(this,e),n=g(r,t);if(n){var i=n.n,a=n.p;delete r._i[n.i],n.r=!0,a&&(a.n=i),i&&(i.p=a),r._f==n&&(r._f=i),r._l==n&&(r._l=a),r[v]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,r){var n,i,a=g(t,e);return a?a.v=r:(t._l=a={i:i=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=a),n&&(n.n=a),t[v]++,"F"!==i&&(t._i[i]=a)),t},getEntry:g,setStrong:function(t,e,r){c(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(65)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,i=r(2),a=r(26)(0),o=r(12),s=r(30),u=r(113),c=r(135),f=r(4),l=r(42),h=r(42),p=!i.ActiveXObject&&"ActiveXObject"in i,d=s.getWeak,v=Object.isExtensible,g=c.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(65)("WeakMap",y,m,c,!0,!0);h&&p&&(u((n=c.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,a(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,i){if(f(e)&&!v(e)){this._f||(this._f=new n);var a=this._f[t](e,i);return"set"==t?this:a}return r.call(this,e,i)})}))},function(t,e,r){"use strict";var n=r(41),i=r(30).getWeak,a=r(1),o=r(4),s=r(39),u=r(40),c=r(26),f=r(14),l=r(42),h=c(5),p=c(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,a){var c=t(function(t,n){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&u(n,r,t[a],t)});return n(c.prototype,{delete:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).has(t):r&&f(r,this._i)}}),c},def:function(t,e,r){var n=i(a(e),!0);return!0===n?v(t).set(e,r):n[t._i]=r,t},ufstore:v}},function(t,e,r){var n=r(21),i=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),i=r(57),a=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(58),i=r(4),a=r(6),o=r(19),s=r(5)("isConcatSpreadable");t.exports=function t(e,r,u,c,f,l,h,p){for(var d,v,g=f,y=0,m=!!h&&o(h,p,3);y<c;){if(y in u){if(d=m?m(u[y],y,r):u[y],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:n(d)),v&&l>0)g=t(e,r,d,a(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}y++}return g}},function(t,e,r){var n=r(6),i=r(82),a=r(24);t.exports=function(t,e,r,o){var s=String(a(t)),u=s.length,c=void 0===r?" ":String(r),f=n(e);if(f<=u||""==c)return s;var l=f-u,h=i.call(c,Math.ceil(l/c.length));return h.length>l&&(h=h.slice(0,l)),o?h+s:s+h}},function(t,e,r){var n=r(7),i=r(34),a=r(15),o=r(50).f;t.exports=function(t){return function(e){for(var r,s=a(e),u=i(s),c=u.length,f=0,l=[];c>f;)r=u[f++],n&&!o.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}}},function(t,e,r){var n=r(44),i=r(142);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,i){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),i=r.n(n),a=r(70),o=r.n(a),s=r(101),u=r.n(s);window.canis={canisObj:{},frameRate:i.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new u.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return u.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,i=r(103),a=r(146),o=r(73),s=(n=r(72))&&n.__esModule?n:{default:n},u=r(71);function c(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function v(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var g=function(){function t(e){h(this,t),v(this,"root",void 0),v(this,"anchor",void 0),v(this,"position",void 0),v(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,i=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],u=t[e].k.filter(function(t){return t.t==i});if(u.length)r=u[0];else{r={t:i,s:this.getDefaultProperty(e)};var c=t[e].k.reduce(function(t,e){return e.t<i?t+1:t},0);t[e].k.splice(c,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=a:r.s=!s||a instanceof Array?a:[a]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){v(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var i=this.root.shapes[0].it;i.splice(i.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,i;this.timeRange[t]=1,this.updateTimeRange(),e instanceof u.PathMaker&&(e.uniform(),e=e.path);var a=c(this.commonPropertyMapping(t),3);if(r=a[0],n=a[1],i=a[2],!n||void 0===i)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==i&&(this.convertToStaticProperty(r,n),i>=0?r[n].k[i]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,a,s){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),s||(s=i.EasingFactory.linear()),n instanceof u.PathMaker||a instanceof u.PathMaker){if([n,a].forEach(function(t){return t instanceof u.PathMaker&&t.uniform()}),n instanceof u.PathMaker&&a instanceof u.PathMaker){var f=n.path.v.length-1,l=a.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:a,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),a.upsample(Math.round(d/l))}}var v=c([n,a].map(function(t){return t instanceof u.PathMaker?t.path:t}),2);n=v[0],a=v[1]}var g,y,m,b=!0,k=c(this.commonPropertyMapping(t),3);if(g=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var S=(g=this.root.t).d.k[0].s,A=JSON.parse(JSON.stringify(S)),w=JSON.parse(JSON.stringify(S));A.t=n,w.t=a,n=A,a=w,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,a,s),new Error("Not a valid key.")}g&&y&&void 0!==m&&(this.convertToAnimatableProperty(g,y),this.addKeyframe(g,y,m,e,n,s,b),this.addKeyframe(g,y,m,r,a,i.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=g;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,a.render)(t)};return new g(r)}},{key:"rect",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("rect",[r,n])]};return new g(i)}},{key:"ellipse",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("ellipse",[r,n])]};return new g(i)}},{key:"ref",value:function(t){return new g({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,i=this,u=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:u),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,s.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(i.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=u[0]+u[2]+1,h.h=u[1]+u[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var v=f;v.ty=4,v.ks=this.generateTransform(u),v.shapes=(0,a.render)(t)}break;case 2:var y=f,m=c((0,a.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,a.render)(t);break;case 5:var S=f,A=(0,o.getBaselineHeight)(t),w=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];S.ks.p.k=[u[0]+u[2]*w,u[1]+u[3]-A,0],S.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var x=c((0,a.renderText)(t,r),2),T=x[0],_=x[1];S.t=T,r.list.filter(function(t){return t.fName==_.fName}).length||r.list.push(_)}return new g(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=u,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new i.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),i=r.fontFamily.split(",")[0].trim(),s=r.fontStyle,u=r.fontWeight,c=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,a.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==i&&t.fStyle==s&&t.fWeight==u});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:c}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:i,fWeight:"".concat(u),fStyle:s,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,a.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var i=t.width.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),s=o.getContext("2d");o.width=3*i.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,s.drawImage(t,0,0,o.width,o.height);var u=o.toDataURL();if(e){var c=e.filter(function(t){return t.p==u});c.length&&(r=c[0].id)}var f={h:n.valueInSpecifiedUnits,w:i.valueInSpecifiedUnits,id:r,p:u,e:1};return[r,f]};var n,i=r(71),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(73);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=u(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var i=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var i=0,a=0,s=100;if(r&&n){var u=(0,o.calculateBaseTransform)(r,n),c=n.getBBox(),f=r.getBBox();i=u.e+f.x-c.x,a=u.f+f.y-c.y,s=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[i,a]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:s},sk:{k:0},sa:{k:0}})}(r.it,i,t,e)};if(t instanceof SVGCircleElement){var a=t.r.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var u=a.valueInSpecifiedUnits,c=new i.PathMaker;c.moveTo(u,0),c.arcTo(u,u,0,1,0,u,2*u),c.arcTo(u,u,0,1,0,u,0),c.closePath(),n(c)}else if(t instanceof SVGEllipseElement){var f=s(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new i.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=s(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),v=d[0],g=d[1],y=d[2],m=d[3],b=Math.min(v,g),k=Math.min(y,m),S=new i.PathMaker;S.moveTo(v-b,y-k),S.lineTo(g-b,m-k),n(S)}else if(t instanceof SVGPathElement){var A=t.getAttribute("d")||"",w=new i.PathMaker(A);n(w)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var x=t.points;if(x.length){var T=Array.prototype.slice.call(x),_=T.reduce(function(t,e){return Math.min(t,e.x)},0),M=T.reduce(function(t,e){return Math.min(t,e.y)},0),E=new i.PathMaker;E.moveTo(x[0].x-_,x[0].y-M),T.forEach(function(t,e){e<=0||E.lineTo(t.x-_,t.y-M)}),t instanceof SVGPolygonElement&&E.closePath(),n(E)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var O=s(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),P=O[0],I=O[1],j=new i.PathMaker;j.moveTo(0,0),j.lineTo(P,0),j.lineTo(P,I),j.lineTo(0,I),j.closePath(),n(j)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,i){this.message=t,this.expected=e,this.found=r,this.location=i,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+i(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?a(t.parts[e][0])+"-"+a(t.parts[e][1]):a(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function i(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function a(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,i,a=new Array(t.length);for(e=0;e<t.length;e++)a[e]=(i=t[e],r[i.type](i));if(a.sort(),a.length>0){for(e=1,n=1;e<a.length;e++)a[e-1]!==a[e]&&(a[n]=a[e],n++);a.length=n}switch(a.length){case 1:return a[0];case 2:return a[0]+" or "+a[1];default:return a.slice(0,-1).join(", ")+", or "+a[a.length-1]}}(t)+" but "+function(t){return t?'"'+i(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,i={},a={svg_path:gt},o=gt,s=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},u=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,i=e.length;n<i;n++)r[n+1]=e[n][1];return r}(t,e)},c=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Dt(t,[e]);return r&&(n=n.concat(Dt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Dt("Z")},v=/^[Ll]/,g=lt(["L","l"],!1,!1),y=function(t,e){return Dt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Dt(t,e.map(function(t){return{x:t}}))},S=/^[Vv]/,A=lt(["V","v"],!1,!1),w=function(t,e){return Dt(t,e.map(function(t){return{y:t}}))},x=/^[Cc]/,T=lt(["C","c"],!1,!1),_=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},M=/^[Ss]/,E=lt(["S","s"],!1,!1),O=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},P=/^[Qq]/,I=lt(["Q","q"],!1,!1),j=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},C=/^[Tt]/,R=lt(["T","t"],!1,!1),N=/^[Aa]/,F=lt(["A","a"],!1,!1),L=function(t,e,r,n,i,a){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:i,x:a.x,y:a.y}},D=function(t,e){return{x:t,y:e}},G=function(t){return 1*t},V=function(t){return 1*t.join("")},B=/^[01]/,W=lt(["0","1"],!1,!1),U=function(t){return"1"==t},q=function(){return""},z=",",Y=ft(",",!1),X=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),$=/^[+\-]/,K=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,it=lt([" ","\t","\n","\r"],!1,!1),at=0,ot=[{line:1,column:1}],st=0,ut=[],ct=0;if("startRule"in e){if(!(e.startRule in a))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=a[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){at<st||(at>st&&(st=at,ut=[]),ut.push(t))}function vt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function gt(){var t,e,r,n,a;for(t=at,e=[],r=Nt();r!==i;)e.push(r),r=Nt();if(e!==i)if((r=function(){var t,e,r,n,a,o;if(t=at,(e=yt())!==i){for(r=[],n=at,a=[],o=Nt();o!==i;)a.push(o),o=Nt();for(a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;){for(r.push(n),n=at,a=[],o=Nt();o!==i;)a.push(o),o=Nt();a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i)}r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())===i&&(r=null),r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i?(t,t=e=s(r)):(at=t,t=i)}else at=t,t=i;else at=t,t=i;return t}function yt(){var e,r,n,a,o,s;if(e=at,(r=function(){var e,r,n,a,o,s,u;e=at,c.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(f));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=Tt())!==i?(o=at,(s=Ot())===i&&(s=null),s!==i&&(u=bt())!==i?o=s=[s,u]:(at=o,o=i),o===i&&(o=null),o!==i?(e,r=l(r,a,o),e=r):(at=e,e=i)):(at=e,e=i)}else at=e,e=i;return e}())!==i){for(n=[],a=at,o=[],s=Nt();s!==i;)o.push(s),s=Nt();for(o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i);a!==i;){for(n.push(a),a=at,o=[],s=Nt();s!==i;)o.push(s),s=Nt();o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i)}n!==i?(e,e=r=u(r,n)):(at=e,e=i)}else at=e,e=i;return e}function mt(){var e;return(e=function(){var e,r;e=at,h.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(p));r!==i&&(e,r=d());return e=r}())===i&&(e=function(){var e,r,n,a;e=at,v.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(g));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=bt())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,m.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(b));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=kt())!==i?(e,r=k(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,S.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(A));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=kt())!==i?(e,r=w(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,x.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(T));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=St())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,M.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(E));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=At())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,P.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(I));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=wt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,C.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(R));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,N.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(F));if(r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=xt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}()),e}function bt(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=u(e,r)):(at=t,t=i)}else at=t,t=i;return t}function kt(){var t,e,r,n,a,o;if(t=at,(e=Mt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=u(e,r)):(at=t,t=i)}else at=t,t=i;return t}function St(){var t,e,r,n,a,o;return t=at,(e=Tt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=Tt())!==i?((a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?(t,t=e=_(e,n,o)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function At(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=O(e,n)):(at=t,t=i)):(at=t,t=i),t}function wt(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=j(e,n)):(at=t,t=i)):(at=t,t=i),t}function xt(){var t,e,r,n,a,o,s,u,c,f,l;return t=at,(e=_t())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=_t())!==i?((a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i&&Ot()!==i&&(s=Et())!==i?((u=Ot())===i&&(u=null),u!==i&&(c=Et())!==i?((f=Ot())===i&&(f=null),f!==i&&(l=Tt())!==i?(t,t=e=L(e,n,o,s,c,l)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function Tt(){var t,e,r,n;return t=at,(e=Mt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=Mt())!==i?(t,t=e=D(e,n)):(at=t,t=i)):(at=t,t=i),t}function _t(){var t,e;return t=at,(e=It())===i&&(e=Rt()),e!==i&&(t,e=G(e)),t=e}function Mt(){var t,e,r,n;return t=at,e=at,(r=Ct())===i&&(r=null),r!==i&&(n=It())!==i?e=r=[r,n]:(at=e,e=i),e===i&&(e=at,(r=Ct())===i&&(r=null),r!==i&&(n=Rt())!==i?e=r=[r,n]:(at=e,e=i)),e!==i&&(t,e=V(e)),t=e}function Et(){var e,r;return e=at,B.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(W)),r!==i&&(e,r=U(r)),e=r}function Ot(){var t,e,r,n,a;if(t=at,e=[],(r=Nt())!==i)for(;r!==i;)e.push(r),r=Nt();else e=i;if(e!==i)if((r=Pt())===i&&(r=null),r!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i?t=e=[e,r,n]:(at=t,t=i)}else at=t,t=i;else at=t,t=i;if(t===i){if(t=at,e=at,(r=Pt())!==i){for(n=[],a=Nt();a!==i;)n.push(a),a=Nt();n!==i?e=r=[r,n]:(at=e,e=i)}else at=e,e=i;e!==i&&(t,e=q()),t=e}return t}function Pt(){var e;return 44===t.charCodeAt(at)?(e=z,at++):(e=i,0===ct&&dt(Y)),e}function It(){var e,r,n,a;return e=at,r=at,(n=function(){var e,r,n,a,o;e=at,r=at,(n=Rt())===i&&(n=null);n!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i&&(o=Rt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i);r===i&&(r=at,(n=Rt())!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i));r!==i&&(e,r=X(r));return e=r}())!==i?((a=jt())===i&&(a=null),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i),r===i&&(r=at,(n=Rt())!==i&&(a=jt())!==i?r=n=[n,a]:(at=r,r=i)),r!==i&&(e,r=X(r)),e=r}function jt(){var e,r,n,a,o;return e=at,r=at,Q.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(Z)),n!==i?((a=Ct())===i&&(a=null),a!==i&&(o=Rt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i),r!==i&&(e,r=X(r)),e=r}function Ct(){var e;return $.test(t.charAt(at))?(e=t.charAt(at),at++):(e=i,0===ct&&dt(K)),e}function Rt(){var e,r,n;if(e=at,r=[],tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et)),n!==i)for(;n!==i;)r.push(n),tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et));else r=i;return r!==i&&(e,r=rt(r)),e=r}function Nt(){var e,r;return e=at,nt.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(it)),r!==i&&(e,r=q()),e=r}var Ft={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Lt in Ft)Ft[Lt.toUpperCase()]=Ft[Lt];function Dt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Ft[t]};for(var i in t==t.toLowerCase()&&(n.relative=!0),e[r])n[i]=e[r][i];e[r]=n}return e}if((r=o())!==i&&at===t.length)return r;throw r!==i&&at<t.length&&dt({type:"end"}),vt(ut,st<t.length?t.charAt(st):null,st<t.length?pt(st,st+1):pt(st,st))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,i=r;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(94),r(257),r(127),r(258),r(128),r(259),r(260),r(261),r(262),r(263),r(131),r(133),r(134),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(7),o=r(0),s=r(12),u=r(30).KEY,c=r(3),f=r(48),l=r(43),h=r(33),p=r(5),d=r(109),v=r(75),g=r(155),y=r(58),m=r(1),b=r(4),k=r(9),S=r(15),A=r(23),w=r(32),x=r(36),T=r(112),_=r(16),M=r(57),E=r(8),O=r(34),P=_.f,I=E.f,j=T.f,C=n.Symbol,R=n.JSON,N=R&&R.stringify,F=p("_hidden"),L=p("toPrimitive"),D={}.propertyIsEnumerable,G=f("symbol-registry"),V=f("symbols"),B=f("op-symbols"),W=Object.prototype,U="function"==typeof C&&!!M.f,q=n.QObject,z=!q||!q.prototype||!q.prototype.findChild,Y=a&&c(function(){return 7!=x(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=P(W,e);n&&delete W[e],I(t,e,r),n&&t!==W&&I(W,e,n)}:I,X=function(t){var e=V[t]=x(C.prototype);return e._k=t,e},H=U&&"symbol"==typeof C.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof C},J=function(t,e,r){return t===W&&J(B,e,r),m(t),e=A(e,!0),m(r),i(V,e)?(r.enumerable?(i(t,F)&&t[F][e]&&(t[F][e]=!1),r=x(r,{enumerable:w(0,!1)})):(i(t,F)||I(t,F,w(1,{})),t[F][e]=!0),Y(t,e,r)):I(t,e,r)},Q=function(t,e){m(t);for(var r,n=g(e=S(e)),i=0,a=n.length;a>i;)J(t,r=n[i++],e[r]);return t},Z=function(t){var e=D.call(this,t=A(t,!0));return!(this===W&&i(V,t)&&!i(B,t))&&(!(e||!i(this,t)||!i(V,t)||i(this,F)&&this[F][t])||e)},$=function(t,e){if(t=S(t),e=A(e,!0),t!==W||!i(V,e)||i(B,e)){var r=P(t,e);return!r||!i(V,e)||i(t,F)&&t[F][e]||(r.enumerable=!0),r}},K=function(t){for(var e,r=j(S(t)),n=[],a=0;r.length>a;)i(V,e=r[a++])||e==F||e==u||n.push(e);return n},tt=function(t){for(var e,r=t===W,n=j(r?B:S(t)),a=[],o=0;n.length>o;)!i(V,e=n[o++])||r&&!i(W,e)||a.push(V[e]);return a};U||(s((C=function(){if(this instanceof C)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===W&&e.call(B,r),i(this,F)&&i(this[F],t)&&(this[F][t]=!1),Y(this,t,w(1,r))};return a&&z&&Y(W,t,{configurable:!0,set:e}),X(t)}).prototype,"toString",function(){return this._k}),_.f=$,E.f=J,r(37).f=T.f=K,r(50).f=Z,M.f=tt,a&&!r(29)&&s(W,"propertyIsEnumerable",Z,!0),d.f=function(t){return X(p(t))}),o(o.G+o.W+o.F*!U,{Symbol:C});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=O(p.store),it=0;nt.length>it;)v(nt[it++]);o(o.S+o.F*!U,"Symbol",{for:function(t){return i(G,t+="")?G[t]:G[t]=C(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in G)if(G[e]===t)return e},useSetter:function(){z=!0},useSimple:function(){z=!1}}),o(o.S+o.F*!U,"Object",{create:function(t,e){return void 0===e?x(t):Q(x(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:$,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var at=c(function(){M.f(1)});o(o.S+o.F*at,"Object",{getOwnPropertySymbols:function(t){return M.f(k(t))}}),R&&o(o.S+o.F*(!U||c(function(){var t=C();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,N.apply(R,n)}}),C.prototype[L]||r(11)(C.prototype,L,C.prototype.valueOf),l(C,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(48)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),i=r(57),a=r(50);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),u=a.f,c=0;s.length>c;)u.call(t,o=s[c++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(111)})},function(t,e,r){var n=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return i(n(t),e)}})},function(t,e,r){var n=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(n(t))}})},function(t,e,r){var n=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(112).f})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(114)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(79).set})},function(t,e,r){"use strict";var n=r(44),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(115)})},function(t,e,r){var n=r(8).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||r(7)&&n(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),i=r(17),a=r(5)("hasInstance"),o=Function.prototype;a in o||r(8).f(o,a,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),i=r(117);n(n.G+n.F*(parseInt!=i),{parseInt:i})},function(t,e,r){var n=r(0),i=r(118);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(20),o=r(81),s=r(23),u=r(3),c=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,v=p.prototype,g="Number"==a(r(36)(v)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,a=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var o,u=e.slice(2),c=0,f=u.length;c<f;c++)if((o=u.charCodeAt(c))<48||o>i)return NaN;return parseInt(u,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(g?u(function(){v.valueOf.call(r)}):"Number"!=a(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;k.length>S;S++)i(d,b=k[S])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),i=r(21),a=r(119),o=r(82),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*c[r],c[r]=n%1e7,n=u(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=c[e],c[e]=u(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var r=String(c[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,r,n,s,u=a(this,f),c=i(t),v="",g="0";if(c<0||c>20)throw RangeError(f);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(u*d(2,69,1))-69)<0?u*d(2,-e,1):u/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=c;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),g=p()}else l(0,r),l(1<<-e,0),g=p()+o.call("0",c);return g=c>0?v+((s=g.length)<=c?"0."+o.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},function(t,e,r){"use strict";var n=r(0),i=r(3),a=r(119),o=1..toPrecision;n(n.P+n.F*(i(function(){return"1"!==o.call(1,void 0)})||!i(function(){o.call({})})),"Number",{toPrecision:function(t){var e=a(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),i=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),i=r(120),a=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&a(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),i=r(118);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,r){var n=r(0),i=r(117);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,r){var n=r(0),i=r(121),a=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+a(t-1)*a(t+1))}})},function(t,e,r){var n=r(0),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),i=r(83);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,r){var n=r(0),i=r(84);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(122)})},function(t,e,r){var n=r(0),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,a=0,o=0,s=arguments.length,u=0;o<s;)u<(r=i(arguments[o++]))?(a=a*(n=u/r)*n+1,u=r):a+=r>0?(n=r/u)*n:r;return u===1/0?1/0:u*Math.sqrt(a)}})},function(t,e,r){var n=r(0),i=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n;return 0|i*a+((65535&r>>>16)*a+i*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(121)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(83)})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(a(t-1)-a(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(a(t)+a(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),i=r(35),a=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?a(e):a(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),i=r(15),a=r(6);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=a(e.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(e[s++])),s<n&&o.push(String(arguments[s]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(59)(!0);r(85)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),i=r(59)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".endsWith;n(n.P+n.F*r(88)("endsWith"),"String",{endsWith:function(t){var e=a(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),s=void 0===r?n:Math.min(i(r),n),u=String(t);return o?o.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,r){"use strict";var n=r(0),i=r(87);n(n.P+n.F*r(88)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(82)})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".startsWith;n(n.P+n.F*r(88)("startsWith"),"String",{startsWith:function(t){var e=a(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),r=a(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),i=r(232);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,r){"use strict";var n=r(3),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-5e13-1))})||!n(function(){a.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:a},function(t,e,r){var n=Date.prototype,i=n.toString,a=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=a.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),i=Date.prototype;n in i||r(11)(i,n,r(235))},function(t,e,r){"use strict";var n=r(1),i=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(58)})},function(t,e,r){"use strict";var n=r(19),i=r(0),a=r(9),o=r(123),s=r(89),u=r(6),c=r(90),f=r(91);i(i.S+i.F*!r(61)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,i,l,h=a(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(h);if(g&&(v=n(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(r=new p(e=u(h.length));e>y;y++)c(r,y,g?v(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)c(r,y,g?o(l,v,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),i=r(90);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=[].join;n(n.P+n.F*(r(49)!=Object||!r(22)(a)),"Array",{join:function(t){return a.call(i(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),i=r(78),a=r(20),o=r(35),s=r(6),u=[].slice;n(n.P+n.F*r(3)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var r=s(this.length),n=a(this);if(e=void 0===e?r:e,"Array"==n)return u.call(this,t,e);for(var i=o(t,r),c=o(e,r),f=s(c-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(i+h):this[i+h];return l}})},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(9),o=r(3),s=[].sort,u=[1,2,3];n(n.P+n.F*(o(function(){u.sort(void 0)})||!o(function(){u.sort(null)})||!r(22)(s)),"Array",{sort:function(t){return void 0===t?s.call(a(this)):s.call(a(this),i(t))}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(0),a=r(22)([].forEach,!0);n(n.P+n.F*!a,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,r){var n=r(4),i=r(58),a=r(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),i=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(56)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(a)),"Array",{indexOf:function(t){return o?a.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=r(21),o=r(6),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(u||!r(22)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,a(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(125)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(93)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),i=r(26)(5),a=!0;"find"in[]&&Array(1).find(function(){a=!1}),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),i=r(26)(6),a="findIndex",o=!0;a in[]&&Array(1)[a](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(a)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),i=r(81),a=r(8).f,o=r(37).f,s=r(60),u=r(51),c=n.RegExp,f=c,l=c.prototype,h=/a/g,p=/a/g,d=new c(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,c(h)!=h||c(p)==p||"/a/i"!=c(h,"i")}))){c=function(t,e){var r=this instanceof c,n=s(t),a=void 0===e;return!r&&n&&t.constructor===c&&a?t:i(d?new f(n&&!a?t.source:t,e):f((n=t instanceof c)?t.source:t,n&&a?u.call(t):e),r?this:l,c)};for(var v=function(t){t in c||a(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=o(f),y=0;g.length>y;)v(g[y++]);l.constructor=c,c.prototype=l,r(12)(n,"RegExp",c)}r(38)("RegExp")},function(t,e,r){"use strict";r(128);var n=r(1),i=r(51),a=r(7),o=/./.toString,s=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?s(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!a&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=o.name&&s(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),i=r(6),a=r(96),o=r(62);r(63)("match",1,function(t,e,r,s){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var u=n(t),c=String(this);if(!u.global)return o(u,c);var f=u.unicode;u.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(u,c));){var d=String(l[0]);h[p]=d,""===d&&(u.lastIndex=a(c,i(u.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),i=r(9),a=r(6),o=r(21),s=r(96),u=r(62),c=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(63)("replace",2,function(t,e,r,d){return[function(n,i){var a=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,a,i):r.call(String(a),n,i)},function(t,e){var i=d(r,t,this,e);if(i.done)return i.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=u(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=s(h,a(l.lastIndex),y))}for(var k,S="",A=0,w=0;w<m.length;w++){b=m[w];for(var x=String(b[0]),T=c(f(o(b.index),h.length),0),_=[],M=1;M<b.length;M++)_.push(void 0===(k=b[M])?k:String(k));var E=b.groups;if(p){var O=[x].concat(_,T,h);void 0!==E&&O.push(E);var P=String(e.apply(void 0,O))}else P=v(x,h,T,_,E,e);T>=A&&(S+=h.slice(A,T)+P,A=T+x.length)}return S+h.slice(A)}];function v(t,e,n,a,o,s){var u=n+t.length,c=a.length,f=p;return void 0!==o&&(o=i(o),f=h),r.call(s,f,function(r,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(u);case"<":s=o[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>c){var h=l(f/10);return 0===h?r:h<=c?void 0===a[h-1]?i.charAt(1):a[h-1]+i.charAt(1):r}s=a[f-1]}return void 0===s?"":s})}})},function(t,e,r){"use strict";var n=r(1),i=r(114),a=r(62);r(63)("search",1,function(t,e,r,o){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var s=n(t),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var f=a(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(60),i=r(1),a=r(52),o=r(96),s=r(6),u=r(62),c=r(95),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(63)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var a,o,s,u=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(a=c.call(d,i))&&!((o=d.lastIndex)>l&&(u.push(i.slice(l,a.index)),a.length>1&&a.index<i.length&&h.apply(u,a.slice(1)),s=a[0].length,l=o,u.length>=p));)d.lastIndex===a.index&&d.lastIndex++;return l===i.length?!s&&d.test("")||u.push(""):u.push(i.slice(l)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,i,n):d.call(String(i),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var c=i(t),h=String(this),v=a(c,RegExp),g=c.unicode,y=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(p?"y":"g"),m=new v(p?c:"^(?:"+c.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===u(m,h)?[h]:[];for(var k=0,S=0,A=[];S<h.length;){m.lastIndex=p?S:0;var w,x=u(m,p?h:h.slice(S));if(null===x||(w=l(s(m.lastIndex+(p?0:S)),h.length))===k)S=o(h,S,g);else{if(A.push(h.slice(k,S)),A.length===b)return A;for(var T=1;T<=x.length-1;T++)if(A.push(x[T]),A.length===b)return A;S=k=w}}return A.push(h.slice(k)),A}]})},function(t,e,r){"use strict";var n,i,a,o,s=r(29),u=r(2),c=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),v=r(40),g=r(52),y=r(97).set,m=r(98)(),b=r(99),k=r(129),S=r(64),A=r(130),w=u.TypeError,x=u.process,T=x&&x.versions,_=T&&T.v8||"",M=u.Promise,E="process"==f(x),O=function(){},P=i=b.f,I=!!function(){try{var t=M.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(O,O)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==_.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),j=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},C=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,i=1==t._s,a=0,o=function(e){var r,a,o,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,f=e.domain;try{s?(i||(2==t._h&&F(t),t._h=1),!0===s?r=n:(f&&f.enter(),r=s(n),f&&(f.exit(),o=!0)),r===e.promise?c(w("Promise-chain cycle")):(a=j(r))?a.call(r,u,c):u(r)):c(n)}catch(t){f&&!o&&f.exit(),c(t)}};r.length>a;)o(r[a++]);t._c=[],t._n=!1,e&&!t._h&&R(t)})}},R=function(t){y.call(u,function(){var e,r,n,i=t._v,a=N(t);if(a&&(e=k(function(){E?x.emit("unhandledRejection",i,t):(r=u.onunhandledrejection)?r({promise:t,reason:i}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",i)}),t._h=E||N(t)?2:1),t._a=void 0,a&&e.e)throw e.v})},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){y.call(u,function(){var e;E?x.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),C(e,!0))},D=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw w("Promise can't be resolved itself");(e=j(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,c(D,n,1),c(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,C(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};I||(M=function(t){d(this,M,"Promise","_h"),p(t),n.call(this);try{t(c(D,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(M.prototype,{then:function(t,e){var r=P(g(this,M));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=E?x.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&C(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new n;this.promise=t,this.resolve=c(D,t,1),this.reject=c(L,t,1)},b.f=P=function(t){return t===M||t===o?new a(t):i(t)}),l(l.G+l.W+l.F*!I,{Promise:M}),r(43)(M,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!I,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!I),"Promise",{resolve:function(t){return A(s&&this===o?M:this,t)}}),l(l.S+l.F*!(I&&r(61)(function(t){M.all(t).catch(O)})),"Promise",{all:function(t){var e=this,r=P(e),n=r.resolve,i=r.reject,a=k(function(){var r=[],a=0,o=1;v(t,!1,function(t){var s=a++,u=!1;r.push(void 0),o++,e.resolve(t).then(function(t){u||(u=!0,r[s]=t,--o||n(r))},i)}),--o||n(r)});return a.e&&i(a.v),r.promise},race:function(t){var e=this,r=P(e),n=r.reject,i=k(function(){v(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return i.e&&n(i.v),r.promise}})},function(t,e,r){"use strict";var n=r(135),i=r(42);r(65)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),i=r(66),a=r(100),o=r(1),s=r(35),u=r(6),c=r(4),f=r(2).ArrayBuffer,l=r(52),h=a.ArrayBuffer,p=a.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,g=i.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&g in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(o(this),t);for(var r=o(this).byteLength,n=s(t,r),i=s(void 0===e?r:e,r),a=new(l(this,h))(u(i-n)),c=new p(this),f=new p(a),d=0;n<i;)f.setUint8(d++,c.getUint8(n++));return a}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(66).ABV,{DataView:r(100).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),i=r(10),a=r(1),o=(r(2).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=i(t),u=a(r);return o?o(n,e,u):s.call(n,e,u)}})},function(t,e,r){var n=r(0),i=r(36),a=r(10),o=r(1),s=r(4),u=r(3),c=r(115),f=(r(2).Reflect||{}).construct,l=u(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!u(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){a(t),o(e);var r=arguments.length<3?t:a(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var u=r.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,r){var n=r(8),i=r(0),a=r(1),o=r(23);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){a(t),e=o(e,!0),a(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),i=r(16).f,a=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(a(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),i=r(1),a=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(86)(a,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new a(t)}})},function(t,e,r){var n=r(16),i=r(17),a=r(14),o=r(0),s=r(4),u=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,c,f=arguments.length<3?e:arguments[2];return u(e)===f?e[r]:(o=n.f(e,r))?a(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:s(c=i(e))?t(c,r,f):void 0}})},function(t,e,r){var n=r(16),i=r(0),a=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(a(t),e)}})},function(t,e,r){var n=r(0),i=r(17),a=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(a(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),i=r(1),a=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!a||a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(137)})},function(t,e,r){var n=r(0),i=r(1),a=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return a&&a(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),i=r(16),a=r(17),o=r(14),s=r(0),u=r(32),c=r(1),f=r(4);s(s.S,"Reflect",{set:function t(e,r,s){var l,h,p=arguments.length<4?e:arguments[3],d=i.f(c(e),r);if(!d){if(f(h=a(e)))return t(h,r,s,p);d=u(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,n.f(p,r,l)}else n.f(p,r,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,r){var n=r(0),i=r(79);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),i=r(56)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(10),u=r(92);n(n.P,"Array",{flatMap:function(t){var e,r,n=a(this);return s(t),e=o(n.length),r=u(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(21),u=r(92);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=a(this),r=o(e.length),n=u(e,0);return i(n,e,e,r,0,void 0===t?1:s(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),i=r(59)(!0);n(n.P,"String",{at:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(64),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(64),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),i=r(24),a=r(6),o=r(60),s=r(51),u=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};r(86)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(i(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in u?String(t.flags):s.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=a(t.lastIndex),new c(n,e)}})},function(t,e,r){r(75)("asyncIterator")},function(t,e,r){r(75)("observable")},function(t,e,r){var n=r(0),i=r(137),a=r(15),o=r(16),s=r(90);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),u=o.f,c=i(n),f={},l=0;c.length>l;)void 0!==(r=u(n,e=c[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(0),i=r(140)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},function(t,e,r){var n=r(0),i=r(140)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(67),"Object",{__defineGetter__:function(t,e){o.f(i(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(67),"Object",{__defineSetter__:function(t,e){o.f(i(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(67),"Object",{__lookupGetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(67),"Object",{__lookupSetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(141)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(141)("Set")})},function(t,e,r){r(68)("Map")},function(t,e,r){r(68)("Set")},function(t,e,r){r(68)("WeakMap")},function(t,e,r){r(68)("WeakSet")},function(t,e,r){r(69)("Map")},function(t,e,r){r(69)("Set")},function(t,e,r){r(69)("WeakMap")},function(t,e,r){r(69)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),i=r(20);n(n.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),i=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*i}})},function(t,e,r){var n=r(0),i=r(143),a=r(122);n(n.S,"Math",{fscale:function(t,e,r,n,o){return a(i(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)+(n>>>0)+((i&a|(i|a)&~(i+a>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)-(n>>>0)-((~i&a|~(i^a)&i-a>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>16,s=n>>16,u=(o*a>>>0)+(i*a>>>16);return o*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),i=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*i}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(143)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>>16,s=n>>>16,u=(o*a>>>0)+(i*a>>>16);return o*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),i=r(18),a=r(2),o=r(52),s=r(130);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,i.Promise||a.Promise),r="function"==typeof t;return this.then(r?function(r){return s(e,t()).then(function(){return r})}:t,r?function(r){return s(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),i=r(99),a=r(129);n(n.S,"Promise",{try:function(t){var e=i.f(this),r=a(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,i(r),a(n))}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.map,s=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:a(arguments[2]),n=o(i(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var u=s.get(e);return u.delete(r),!!u.size||s.delete(e)}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.get,u=n.key,c=function(t,e,r){if(o(t,e,r))return s(t,e,r);var n=a(e);return null!==n?c(t,n,r):void 0};n.exp({getMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,r){var n=r(133),i=r(142),a=r(28),o=r(1),s=r(17),u=a.keys,c=a.key,f=function(t,e){var r=u(t,e),a=s(t);if(null===a)return r;var o=f(a,e);return o.length?r.length?i(new n(r.concat(o))):o:r};a.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return a(i(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.key,u=function(t,e,r){if(o(t,e,r))return!0;var n=a(e);return null!==n&&u(t,n,r)};n.exp({hasMetadata:function(t,e){return u(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(10),o=n.key,s=n.set;n.exp({metadata:function(t,e){return function(r,n){s(t,e,(void 0!==n?i:a)(r),o(n))}}})},function(t,e,r){var n=r(0),i=r(98)(),a=r(2).process,o="process"==r(20)(a);n(n.G,{asap:function(t){var e=o&&a.domain;i(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),i=r(2),a=r(18),o=r(98)(),s=r(5)("observable"),u=r(10),c=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,v=function(t){return null==t?void 0:u(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},b=function(t,e){c(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:u(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=v(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=v(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=v(r.complete);t=n?n.call(r,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var S=function(t){f(this,S,"Observable","_f")._f=u(t)};l(S.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(a.Promise||i.Promise)(function(r,n){u(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),i.unsubscribe()}},error:n,complete:r})})}}),l(S,{from:function(t){var e="function"==typeof this?this:S,r=v(c(t)[s]);if(r){var n=c(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(S.prototype,s,function(){return this}),n(n.G,{Observable:S}),r(38)("Observable")},function(t,e,r){var n=r(2),i=r(0),a=r(64),o=[].slice,s=/MSIE .\./.test(a),u=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*s,{setTimeout:u(n.setTimeout),setInterval:u(n.setInterval)})},function(t,e,r){var n=r(0),i=r(97);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,r){for(var n=r(94),i=r(34),a=r(12),o=r(2),s=r(11),u=r(46),c=r(5),f=c("iterator"),l=c("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,y=d[v],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||s(k,f,h),k[l]||s(k,l,y),u[y]=h,m))for(g in n)k[g]||a(k,g,n[g],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(I([])));m&&m!==n&&i.call(m,o)&&(g=m);var b=x.prototype=A.prototype=Object.create(g);w.prototype=b.constructor=x,x.constructor=w,x[u]=w.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===w||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},T(_.prototype),_.prototype[s]=function(){return this},f.AsyncIterator=_,f.async=function(t,e,r,n){var i=new _(k(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},T(b),b[u]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=I,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var u=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;O(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:I(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),v}}}function k(t,e,r,n){var i=e&&e.prototype instanceof A?e:A,a=Object.create(i.prototype),o=new P(n||[]);return a._invoke=function(t,e,r){var n=l;return function(i,a){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw a;return j()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=M(o,r);if(s){if(s===v)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=S(t,e,r);if("normal"===u.type){if(n=r.done?d:h,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=d,r.method="throw",r.arg=u.arg)}}}(t,r,o),a}function S(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function A(){}function w(){}function x(){}function T(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(t){var e;this._invoke=function(r,n){function a(){return new Promise(function(e,a){!function e(r,n,a,o){var s=S(t[r],t,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,a,o)},function(t){e("throw",t,a,o)}):Promise.resolve(c).then(function(t){u.value=t,a(u)},o)}o(s.arg)}(r,n,e,a)})}return e=e?e.then(a,a):a()}}function M(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,M(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=S(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function I(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,a=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:j}}function j(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),i=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0M6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL1RpbWluZ1NwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvQzovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvdXRpbC9VdGlsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvanNtb3Zpbi9iaW4vanNtb3Zpbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9DOi93b3Jrc3BhY2UvZ2l0aHViL2NhbmlzLWNvbXBpbGVyL3NyYy91dGlsL0dsb2JhbFZhci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9DOi93b3Jrc3BhY2UvZ2l0aHViL2NhbmlzLWNvbXBpbGVyL3NyYy9BbmltYXRpb25TcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvanNtb3Zpbi9iaW4vcGF0aC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0M6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL0NhbmlzU3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9DOi93b3Jrc3BhY2UvZ2l0aHViL2NhbmlzLWNvbXBpbGVyL3NyYy9DaGFydFNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9lYXNpbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9zdmctcGF0aC1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvQzovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvRmFjZXRTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0M6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL0FjdGlvblNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvQzovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvR3JvdXBpbmdTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9sYXllci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3N2Zy1wYXRoLXBhcnNlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJzbGljZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3QiLCJkZWYiLCJzdGF0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJUaW1pbmdTcGVjIiwiX29mZnNldCIsIl9yZWZlcmVuY2UiLCJ0aW1pbmdSZWYiLCJwcmV2aW91c1N0YXJ0IiwiY29uc3RhbnRzIiwic3RhdHVzIiwic3Vic3RyaW5nIiwiaW5mbyIsIm1zZyIsImVyclNwZWMiLCJDYW5pc1V0aWwiLCJjaGVja0VxdWF0aW9uIiwiZXZhbCIsIm1pbk9mZnNldCIsImRvbU1hcmtzIiwiaXRlbXNTdGFydCIsIm1pbkF0dHJWYWx1ZSIsImF0dHJzIiwibWFya0lkIiwicGFyc2VGbG9hdCIsImZpZWxkIiwib2Zmc2V0VmFsdWUiLCJsYXN0U3RhcnQiLCJsYXN0RW5kIiwiYWxsSXRlbXNTdGFydCIsInNpemUiLCJpdGVtU3RhcnQiLCJyZWZlcmVuY2UiLCJwcmV2aW91c0VuZCIsImFic29sdXRlIiwib2Zmc2V0UmVmIiwidG1wT2Zmc2V0UmVmU3RyIiwidHJhbnNSZWYiLCJvZnN0IiwiRlJBTUVfUkFURSIsInJlZlN0ciIsImRhdGFCaW5kQXR0cnMiLCJjb3B5cmlnaHQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiRCIsImFycjEiLCJhcnIyIiwiaXRlbSIsInN0YWNrIiwiY2hhckF0IiwicG9wIiwiYXJyYXkiLCJzdHJpbmdhcnIiLCJvYmoiLCJvYmpUeXBlIiwiaXNBcnJheSIsImRlZXBDbG9uZSIsInRpbWUiLCJjdXJyZW50VGltZVMiLCJwYXJzZUludCIsImN1cnJlbnRUaW1lTVMiLCJjb2xvciIsImNvbG9yTmFtZXMiLCJ0bXBTdHIiLCJzdWJzdHIiLCJyZ2IiLCJIRVgyUkdCIiwiaGV4IiwiZyIsImNvbG9yMlJHQiIsIm5vZGUiLCJub2RlVHlwZSIsInRhZ05hbWUiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsImF0dHJpYnV0ZXMiLCJhdHRyIiwiSlNPTiIsInBhcnNlIiwiY3JlYXRlRWxlbWVudE5TIiwiYXR0clZhbHVlIiwic3RyaW5naWZ5Iiwic2V0QXR0cmlidXRlTlMiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpc2NyZXRpemVEIiwiZmlsbENvbG9yIiwicmVzdWx0R3JvdXAiLCJyZWciLCJncm91cCIsIngiLCJjb21tYW5kIiwicGFyYW1ldGVycyIsImNvbnZlcnRDb2xvciIsImxpbmVzIiwicHJldiIsInZhbGlkIiwiZmlyc3RQb2ludCIsInNlY29uZFBvaW50IiwiY2lyY2xlcyIsInRtcCIsInN2Z0FyY1RvQ2VudGVyUGFyYW0iLCJjeCIsImN5IiwicngiLCJyeSIsInJvdGF0ZSIsImFicyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNsb2Nrd2lzZSIsInJhZGl1cyIsInV4IiwidXkiLCJ2eCIsInZ5IiwiZG90IiwibW9kIiwic3FydCIsInJhZCIsImFjb3MiLCJ4MSIsInkxIiwicGhpIiwiZkEiLCJmUyIsIngyIiwieTIiLCJkZWx0YUFuZ2xlIiwiUEl4MiIsIlBJIiwic19waGkiLCJzaW4iLCJjX3BoaSIsImNvcyIsImhkX3giLCJoZF95IiwiaHNfeCIsImhzX3kiLCJ4MV8iLCJ5MV8iLCJsYW1iZGEiLCJyeHJ5Iiwicnh5MV8iLCJyeXgxXyIsInN1bV9vZl9zcSIsImNvZSIsImN4XyIsImN5XyIsInhjcjEiLCJ4Y3IyIiwieWNyMSIsInljcjIiLCJyYWRpYW4iLCJzdHIiLCJmTW9kZSIsInRNb2RlIiwibXIiLCJzdGFydHNXaXRoIiwibWF0Y2giLCJwYWRTdGFydCIsImNlbnRlclgiLCJjZW50ZXJZIiwiYW5nbGVJblJhZGlhbnMiLCJ5IiwiaW5uZXJSYWRpdXMiLCJvdXR0ZXJSYWRpdXMiLCJsYXJnZUFyY0ZsYWciLCJzdGFydDEiLCJwb2xhclRvQ2FydGVzaWFuIiwiZW5kMSIsInN0YXJ0MiIsImVuZDIiLCJpc1JpbmciLCJkb21Ob2RlIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ0bXBEaXYiLCJmaXJzdENoaWxkIiwidHgiLCJ0eSIsImhhc1Bvc2kiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZXN1bHRDbWQiLCJzZXRQYXRoRFZhbHVlIiwidG1wUGF0aCIsInBhdGhTdGVwTGVuIiwiZ2V0VG90YWxMZW5ndGgiLCJkaXNjcml0UGF0aCIsInRtcFBudCIsImdldFBvaW50QXRMZW5ndGgiLCJwYXRoRGF0YVdpdGhUeXBlIiwicGF0aERhdGEiLCJwYXRoRGF0YVNlcmllcyIsInBhcnNlU1ZHIiwicGF0aE1ha2VyIiwicGF0aERhdGFJdGVtIiwiY29kZSIsIm1vdmVUbyIsImxpbmVUbyIsImxpbmVUb1JlbGF0aXZlIiwiaG9yaXpvbnRhbFRvIiwiaG9yaXpvbnRhbFRvUmVsYXRpdmUiLCJ2ZXJ0aWNhbFRvIiwidmVydGljYWxUb1JlbGF0aXZlIiwiY3ViaWNCZXppZXJDdXJ2ZVRvIiwiY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvIiwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlIiwiYXJjVG8iLCJ4QXhpc1JvdGF0aW9uIiwibGFyZ2VBcmMiLCJzd2VlcCIsImFyY1RvUmVsYXRpdmUiLCJjbG9zZVBhdGgiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9zaU9mZnNldCIsImdldFBhdGhPZmZzZXQiLCJwbSIsInVuaWZvcm0iLCJyZXNldCIsImRpZmZDbWRzIiwiY21kUmVnRXhwIiwiY21kcyIsImZpcnN0Q21kTmFtZSIsInJlc2V0WCIsInJlc2V0WSIsImZpcnN0Q21kVmFsdWVzIiwiY21kTmFtZSIsImNtZFZhbHVlIiwiY2FsTnVtVHJhbnMiLCJudW1zIiwibmkiLCJudW1zMiIsImFudW1zIiwiYW51bXMyIiwiY3VycmVudENtZElkeCIsInJlc2V0VmFsIiwidFZhbCIsImRpZmZDbWRJZHhzIiwiZmxhZyIsImoiLCJjbWRJZHgiLCJzdGFydEQiLCJlbmREIiwicmF0aW8iLCJzdGFydERpc0QiLCJlbmREaXNEIiwiZnJvbVN0YXJ0QW5nbGUiLCJmcm9tRW5kQW5nbGUiLCJ0b1N0YXJ0QW5nbGUiLCJ0b0VuZEFuZ2xlIiwiaW50ZXJwb2xhdGVGbiIsInZhbGlkQW5nbGUiLCJtaW5pbWFsQW5nbGUiLCJpbnRlcnBvbGF0ZSIsIm1hcmtTdGF0dXMiLCJzdGF0dXNBcnIiLCJ0bXBEUmVjb3JkZXIiLCJjb21wYXJlRCIsImRBcnIiLCJmaXJzdEQiLCJmaXJzdERDbWRzIiwidG1wRCIsInRtcERDbWRzIiwiZGlmZkF0dHJJZHhzIiwiZmlyc3REQ21kVmFsdWVzIiwidG1wRENtZFZhbHVlIiwiZmlyc3REQ21kVmFsdWUiLCJ0bXBEQ21kVmFsdWVzIiwiaGFzRmxhZyIsIlNldCIsImRvbSIsInRyIiwic2NhbGVTdHIiLCJ0cmFuc1N0ciIsInRyYW5zUG9zaVN0ciIsInNjYWxlTnVtU3RyIiwidHJhbnNOdW1zIiwic2NhbGVOdW0iLCJwcm9wTmFtZSIsIlZpZXdwb3J0IiwiY2hhcnRXaWR0aCIsImNoYXJ0SGVpZ2h0IiwiaCIsIkFzc2V0VGVtcGxhdGUiLCJ2aXN1YWxQcm9wcyIsImFuaW1hdGVQcm9wcyIsImJvdW5kaW5nQm94IiwianNNb3ZpbkxheWVySWR4IiwiY2FuZGlkYXRlQXQiLCJhdCIsImNvbXBhcmVWaXN1YWxQcm9wcyIsInAyIiwic2FmZVByb3BzIiwiZGlmZmVyZW50S2V5cyIsImsiLCJyZW1vdmVOdW1SZWdFeHAiLCJfbGF5ZXIiLCJMYXllckZhY3RvcnkiLCJfZWFzaW5nIiwiRWFzaW5nRmFjdG9yeSIsIl9wYXRoIiwiUGF0aE1ha2VyIiwiTWFza1R5cGUiLCJfdiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiSlNNb3ZpbiIsImZwcyIsIndpZHRoIiwiaGVpZ2h0IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJmciIsImRkZCIsImxheWVycyIsImFzc2V0cyIsImZvbnRzIiwiaXAiLCJvcCIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRvbUxheWVyT3JBc3NldElkIiwibGF5ZXIiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJoaWVyYXJjaHkiLCJyZWYiLCJzcGxpY2UiLCJtYXNrT3JEb20iLCJsYXllclJlZk9ySW5kZXgiLCJsYXllclJlZiIsImxheWVySW5kZXgiLCJtYXNrTGF5ZXIiLCJtYXNrVHlwZSIsIkFscGhhIiwiSlNNb3ZpbkxheWVyIiwidHQiLCJsYXllclJlZnMiLCJfdGhpcyIsImlubmVySW5kZXgiLCJtYXNrIiwibGF5ZXJXcmFwcGVyIiwicmVmSWQiLCJtYXhUaW1lIiwidG9KU09OIiwiZ2xvYmFsVmFyIiwianNNb3ZpbiIsIm1hcmtMYXllcnMiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsIk1BVENIIiwiaXNSZWdFeHAiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJBbmltYXRpb24iLCJfaWQiLCJjaGFydElkeCIsInNlbGVjdG9yIiwiX2FsaWduIiwiYWxpZ25UYXJnZXQiLCJncm91cGluZyIsImFjdGlvbnMiLCJhbmltYXRpb25TdGFydFRpbWUiLCJhbmltYXRpb25FbmRUaW1lIiwibGVhdmVzIiwiYWxsTWFya3NUaGlzQW5pIiwibWFya3NJbk9yZGVyIiwiYW5pc0FsaWduZWQiLCJhbGlnbk9uRGF0YSIsImFsbE1hcmtBbmkiLCJ3aG9sZUVuZFRpbWUiLCJzdGFydFRpbWUiLCJ0b3RhbER1cmF0aW9uIiwiYWN0aW9uQXR0cnMiLCJkdXJhdGlvbiIsImF0dHJOYW1lIiwidG1wQWN0aW9uU3BlYyIsInRhcmdldE1hcmsiLCJnZXRFbGVtZW50QnlJZCIsImFjdGlvblRhcmdldHMiLCJtYXJrIiwic3RhcnRGcmFtZSIsImVuZEZyYW1lIiwiYW5pbWF0aW9uVHlwZSIsInRhcmdldEFuaW1hdGlvblR5cGUiLCJjdXN0b20iLCJ0bXBCYm94IiwiZ2V0Qm91bmRpbmdCb3giLCJzZXRTdGF0aWNQcm9wZXJ0eSIsImxvdHRpZUNoYW5uZWxzIiwidHJhbnNsYXRlVG9Mb3R0aWVDaGFubmVsIiwidG8iLCJmcm9tVmFsdWUiLCJ0b1ZhbHVlIiwibGMiLCJmcm9tUG9zaSIsInRvUG9zaSIsInRyYW5zRFRvTG90dGllU3BlYyIsInNldEFuaW1hdGFibGVQcm9wZXJ0eSIsInRyYW5zVG9Mb3R0aWVBY3Rpb24iLCJlYXNpbmciLCJ0b0xvdHRpZVJHQkEiLCJmaW5hbFN0YXR1cyIsIndpcGUiLCJtb3ZlIiwiYXBwZWFyIiwiY2lyY2xlIiwiZWxsaXBzZSIsIndoZWVsIiwicGF0aE9mZnNldCIsInRtcE9mZnNldFgiLCJ0bXBPZmZzZXRZIiwidG1wU3RhcnRBbmdsZSIsInRtcEVuZEFuZ2xlIiwiYWRkTWFzayIsImFsaWduU3RyIiwid2l0aEVsZSIsIndpdGhPYmoiLCJmcmFtZVRpbWUiLCJhbmltYXRpb25zIiwiYW5pSWR4IiwicmVwbGFjZU9mZnNldENvbnN0IiwicmVwbGFjZURlbGF5Q29uc3QiLCJyZXBsYWNlRHVyYXRpb25Db25zdCIsImFuaW1hdGlvbkpzb24iLCJ1c2VkQ2hhbmdlZEF0dHJzIiwidXBkYXRpbmciLCJhbGlnbiIsImluaXRHcm91cGluZyIsImVmZmVjdHMiLCJhY3Rpb25Kc29uIiwidmlzQXR0ckFjdGlvbkpzb24iLCJ2aXNBdHRyQWN0aW9uSnNvbkFyciIsInRyYW5zVG9WaXN1YWxBdHRyQWN0aW9uIiwiZGF0YVRyYW5zIiwidG1wQWN0aW9uIiwiaW5pdEFjdGlvbiIsIm1hcmtJZHMiLCJsYXN0QW5pbWF0aW9uIiwiYWxpZ25pbmciLCJfZ3JvdXBpbmciLCJkdXJhdGlvbkF0dHJWYWx1ZXMiLCJhY3Rpb24iLCJ0bXBBdHRyVmFsdWVzIiwiZGF0dW0iLCJtaW5EdXJhdGlvbiIsImNhbEFjdGlvbkR1cmF0aW9uIiwiYWN0aW9uc0R1cmF0aW9ucyIsIm1pblZhbHVlRWFjaEF0dHIiLCJwcm9jZXNzZWRBY3Rpb25zIiwidG1wTWFya3NJbk9yZGVyIiwibGVhdmVzT2ZBbmltYXRpb24iLCJhcnJhbmdlT3JkZXIiLCJjaGlsZHJlbiIsIm1hcmtBbmkiLCJ2QXR0ciIsInRtcE9iaiIsInZpc3VhbEF0dHJzIiwicG93IiwidGltZURpZmYiLCJjYWxUaW1lQXNFbGUiLCJjYWxUaW1lQXNPYmoiLCJ1cGRhdGVBbmlTdGFydEFuZEVuZFRpbWUiLCJjaGVja1ZhbGlkUHJvcCIsImZyYW1lVGltZVBvaW50Iiwib2Zmc2V0U3RhcnQiLCJjdXJyZW50U3RhcnRUaW1lIiwiY3VycmVudEVuZFRpbWUiLCJ0bXBFbmRUaW1lIiwibWFya3NJbkxlYWYiLCJtYXJrcyIsImxlYWZTdGFydCIsImxlYWZFbmQiLCJtSWQiLCJ0bXBNQW5pIiwibGVhZk1hcHBpbmciLCJsZWFmSWR4IiwibWFya3NTYW1lRGF0dW0iLCJtYXJrc1dpdGhTYW1lRGF0dW0iLCJ0bXBMIiwiYXJySXNDb250YWluZWQiLCJsZWFmTnVtIiwib2ZzdFRpbWUiLCJjdXJyZW50TGVhZkxhc3RBbmkiLCJsYXN0bGVhZkN1cnJlbnRBbmkiLCJjdXJyZW50TGVhZkN1cnJlbnRBbmkiLCJhbGlnblRvSWQiLCJhbGlnbldpdGhJZCIsImNhbE9mc3RUaW1lRm9yTGFzdEFuaSIsImFsaWduVG8iLCJhbGlnbldpdGhMZWF2ZXMiLCJ0bXBBbmlJZCIsInVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmciLCJjYWxBbmlPZmZzZXQiLCJsZWFmIiwibGVhZlRvQWxpZ24iLCJ0bXBPZnN0VGltZSIsIm1TdGFydFRpbWUiLCJtRHVyYXRpb24iLCJtRW5kVGltZSIsImFsaWduV2l0aEFuaUlkIiwia2VlcFVwZGF0aW5nIiwiYWxpZ25XaXRoIiwiYWxpZ25XaXRoSWRzIiwidG1wQW5pIiwiY3VycmVudExlYWZMYXN0QW5pU3RhcnQiLCJ0bXBMZWFmU3RhcnQiLCJhbmlJZCIsImN1cnJlbnRsZWFmQWxpZ25lZEFuaSIsImFuaUFsaWduZWQiLCJ0bXBMZWFmIiwibGVuMiIsImNhbFRpbWVXaXRoVHJlZSIsInRtcEFsbFN0YXJ0IiwiY2FsRUxlT2Zmc2V0VGltZSIsImNhbE9mZnNldFRpbWUiLCJhbmlPYmoiLCJGSVJTVF9BTklfSUQiLCJhbGlnbkF0dHJzIiwibWFya0NsYXNzIiwiYWxsTWFya3MiLCJfc3ZnUGF0aFBhcnNlciIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJJbmZpbml0eSIsImFuZ2xlIiwibGFyZ2VfYXJjX2ZsYWciLCJzd2VlcF9mbGFnIiwicmVjdXJzaXZlIiwieHkiLCJfMTIwIiwiZjEiLCJmMiIsInJ4MiIsInJ5MiIsImFzaW4iLCJkZiIsImYyb2xkIiwieDJvbGQiLCJ5Mm9sZCIsImEyYyIsImMxIiwiczEiLCJjMiIsInMyIiwidGFuIiwiaHgiLCJoeSIsIm0xIiwibTIiLCJtMyIsIm00IiwibmV3cmVzIiwiaWkiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwicDAiLCJwMyIsIm11bHRpIiwiX2xlbiIsIm9yZGVyMCIsIl9rZXkiLCJvcmRlcjEiLCJjYWxjdWxhdGVIaWdobHlPcmRlciIsIm9yZGVyMiIsIm9yZGVyMyIsInBhdGhSZWFkeSIsInBhdGhTdGFydCIsInBhdGhDaGFpbiIsInBhdGgiLCJ1cGRhdGVYWSIsImMxeCIsImMxeSIsImMyeCIsImMyeSIsImNhbGN1bGF0ZUJlemllck1pbk1heCIsInN3ZWVwRmxhZyIsImNTZXJpZXMiLCJpb3ZMaXN0IiwicGF0aFJlZiIsIl90aGlzMiIsIm1vdmVUb1JlbGF0aXZlIiwiX3RoaXMzIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY29weVBhdGgiLCJvQXJyYXkiLCJpQXJyYXkiLCJ4QXJyYXkiLCJ5QXJyYXkiLCJzdGVwUmF0aW8iLCJ4U3BsaXRBcnJheSIsImNhbGN1bGF0ZUJlemllclNwbGl0IiwieVNwbGl0QXJyYXkiLCJfcDB4IiwiX3AxeCIsInNoaWZ0IiwiX3AzeCIsIl9wMngiLCJfcDB5IiwiX3AxeSIsIl9wM3kiLCJfcDJ5IiwicDB4IiwicDF4IiwicDN4IiwicDJ4IiwicDB5IiwicDF5IiwicDN5IiwicDJ5Iiwicm5nIiwiYnl0ZXNUb1V1aWQiLCJvcHRpb25zIiwiYnVmIiwicm5kcyIsImNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0iLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwibXVsdGlwbHkiLCJncmVhdGVzdENvbW1vbkRpdmlzb3IiLCJzdmdSb290IiwicGFyZW50RWxlbWVudCIsImJhc2VCb3giLCJyZWZCQm94IiwiZ2V0QkJveCIsImdldExlYWZOb2RlcyIsIm1hc3RlciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZWxlbSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZE5vZGVzIiwiZ2V0QmFzZWxpbmVIZWlnaHQiLCJnZXRDb250ZXh0IiwiZm9udFNldHRpbmdzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZvbnQiLCJtZWFzdXJlVGV4dCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsImVuY29kZUxpbmVDYXAiLCJlbmNvZGVMaW5lSm9pbiIsImVuY29kZVRleHRBbmNob3IiLCJsZWFzdENvbW1vbk11bHRpcGxlIiwiaXMiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJzaWduIiwiJGV4cG0xIiwiZXhwbTEiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsInNlYXJjaFN0cmluZyIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwib3JpZ2luYWwiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiUHJvbWlzZSIsImlzTm9kZSIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJzdGFuZGFsb25lIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidG9nZ2xlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIkNhbmlzU3BlYyIsImN1cnJlbnRTcGVjIiwiY2FuaXNPYmoiLCJfY29uc3RhbnRzIiwiY2hhcnRTcGVjcyIsImZhY2V0IiwiX2FuaW1hdGlvbnMiLCJoYXNFcnJvciIsInNwZWMiLCJkaWZmQ2hhcnQiLCJjaGFydFByZVByb2Nlc3NpbmciLCJjaGFydHMiLCJjaGFydE5hbWUiLCJjaGFydFR5cGUiLCJDSEFSVF9VUkwiLCJ0bXBDaGFydCIsInZpZXdzIiwibG9hZENoYXJ0cyIsInNldFZpZXdwb3J0Iiwidmlld3BvcnQiLCJyZW1vdmVUcmFuc0FuZE1lcmdlIiwic3ZnQ2hhcnQiLCJjbGVhckxheWVycyIsImFkZExvdHRpZU1hcmtMYXllcnMiLCJkYXRhTWFya0RhdHVtIiwibm9uRGF0YU1hcmtEYXR1bSIsImNoYXJ0VW5kZXJzdGFuZGluZyIsIm1TaGFwZSIsImFjdGlvblRtcGxzIiwibGVnYWxBdHRycyIsInRtcFZhbHVlIiwiZXJyU3BlY1N0ciIsImNoZWNrQXR0cnMiLCJ0cmFuc0FsaWduIiwiY2hlY2tHcm91cGluZ1NwZWMiLCJhY3Rpb25UeXBlcyIsImVhc2luZ1R5cGUiLCJncm91cGluZ1NwZWMiLCJlcnJTdHIiLCJzb3J0QXR0cnMiLCJyZXNldEFsbCIsImZyYW1lcyIsImZyYW1lc01hcmsiLCJzZXRGcmFtZVJhdGUiLCJjb21wYXJlU3BlYyIsInByZXByb2Nlc3NDaGFydHMiLCJlZmZlY3RUbXBscyIsImFzc2lnbkFjdGlvblRtcGxzIiwidG1wQ29udGFpbmVyIiwiYm9keSIsIm91dGVySFRNTCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0bXBBbGxNYXJrcyIsInRtIiwibUNsYXNzIiwibWFya1R5cGUiLCJzb3J0U2VsZWN0b3IiLCJjaGFuZ2VkQXR0cnMiLCJhbmltYXRpb24iLCJhbmlLZXkiLCJ0cmFuc2xhdGUiLCJyZXBsYWNlQ29uc3RhbnRzIiwiaWR4Rm9yRWFjaENscyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibWFya0NscyIsIm1hcmtKU09OIiwidHJhbnNmb3JtZWRBdHRycyIsImRpc2NyZXRpemVQYXRoIiwidGZBdHRyc0RhdGFLZXlzIiwidEF0dHIiLCJ0b0RPTSIsInRtcERvbUF0dHJPYmoiLCJhdHRyQXJyIiwibWFya0RvbSIsInRleHRDb250ZW50IiwiZGF0YURhdHVtQXR0clZhbHVlIiwiY2xzSWR4IiwiZGlzY0QiLCJjYWxBbmlUaW1lIiwic2VsZWN0b3JCbG9ja3MiLCJjYWxsYmFjayIsInJlbmRlckFuaW1hdGlvbiIsIm1hcFRvTG90dGllU3BlYyIsImxvdHRpZUpTT04iLCJjb25BcnIiLCJhbmlKc29uIiwiaWR4QW5pSnNvbiIsImNoYXJ0TnVtIiwidG1wQW5pSnNvbiIsImlkTWFwcGluZyIsInRtcElkeEFuaUpzb24iLCJuZXdJZCIsIndhcm4iLCJDaGFydFNwZWMiLCJpbnB1dFNwZWNzIiwiaW5wdXRTcGVjIiwic3RhcnRJZHgiLCJlbmRJZHgiLCJ0bXBCbG9ja3MiLCJuYW1lQ2hhcnRzIiwibnVsbENoYXJ0cyIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9rU3RhdHVzIiwibG9jYXRpb24iLCJwcm90b2NvbCIsInN2Z0NvbnRlbnQiLCJvdmVycmlkZU1pbWVUeXBlIiwic2VuZCIsInJlc3BvbnNlVGV4dCIsInZpZXdCb3hOdW1zIiwidW5zaGlmdCIsImZhY2V0Vmlld3MiLCJkYXR1bU1hcmtNYXBwaW5nIiwicmVtb3ZlVHJhbnNpdGlvbnMiLCJtQXJyIiwibWVyZ2VDaGFydHMiLCJjaGFydHNUb0NvbWJpbmUiLCJ0bXBSZWNvcmRlciIsImNsb25lTm9kZSIsImNvbWJpbmVDaGFydHMiLCJmYWNldFR5cGUiLCJmYWNldE51bSIsInJlc3VsdENoYXJ0cyIsIm9yaVdpZHRoIiwib3JpSGVpZ2h0Iiwid2lkdGhBZnRlckZhY2V0IiwiaGVpZ2h0QWZ0ZXJGYWNldCIsInRtcENoYXJ0cyIsInZpZXdCb3hXIiwidmlld0JveEgiLCJjaGFydFRyYW5zRm9ybSIsImdldFRyYW5zZm9ybUF0dHJzIiwicm93IiwiY29sIiwidG1wTWFya3MiLCJpZE51bSIsImFkZCIsImNoYXJ0Q2hpbGRyZW4iLCJ0bXBEb20iLCJ0cmFuc2Zvcm1BdHRycyIsIm1hcmtUZW1wbGV0ZXMiLCJhdHRyTmFtZXMiLCJudWxsU3RhdHVzIiwic3RhdHVzT2JqIiwiYXR0ck5hbWVzQ29weSIsImNvbXBhcmVTdGF0dXMiLCJmaW5kRGlmZkNtZHMiLCJtYXJrU3RyIiwidGFyZ2V0VmFsdWUiLCJyZXN1bHREIiwic3ZnTWFyayIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImxhc3RDaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhVHJhbnNBcnIiLCJzaSIsInRtcFN0YXR1cyIsImJCb3hlcyIsImJCb3giLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInBhcmVudFRyYW5zIiwicGFyZW50Tm9kZSIsImRhdGFEYXR1bUF0dHJWYWx1ZVN0ciIsImJsb2NrcyIsInNoYXBlTmFtZSIsImlzTm9uRGF0YU1hcmsiLCJ0bXBJZCIsInB1cmVEYXR1bSIsInB1cmVEYXR1bVN0ciIsInRtcERhdGFEYXR1bSIsInBvc2l0aW9uIiwidHJhbnNTaGFwZSIsImFkZExheWVyIiwiQ0hBUlRfQ09OVEVOVCIsInBhcnNlckZ1bmN0aW9uIiwibWFrZUFic29sdXRlIiwiY29tbWFuZHMiLCJzdWJwYXRoU3RhcnQiLCJwcmV2Q21kIiwiY21kIiwieDAiLCJ5MCIsInJlbGF0aXZlIiwidG9VcHBlckNhc2UiLCJGYWNldFNwZWMiLCJfdHlwZSIsIl92aWV3cyIsImZyYW1lVmlld3MiLCJyYW5nZSIsInJlZ2VuZCIsInJhbmdlU3RhcnROYW1lIiwicmFuZ2VFbmROYW1lIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwibWF4TGVuIiwibGFzdEl0ZW0iLCJudW1EaWZmIiwiQWN0aW9uU3BlYyIsIl9leHRlbmQiLCJlYXNlTGluZWFyIiwiX2R1cmF0aW9uIiwib3JpQWN0aW9uVHlwZSIsInRtcEF0dHIiLCJ0cCIsImFsZXJ0IiwiZXMiLCJkcnRuIiwiYWN0aW9uVG1wbEpzb24iLCJjdXJyZW50VG1wbCIsImN1cnJlbnROYW1lIiwiZXh0ZW5kTmFtZSIsImV4dGVuZCIsImV4dGVuZFRtcGwiLCJyZXBsYWNlQWN0aW9uVG1wbHMiLCJhY3Rpb25Kc29uQXJyIiwiY2hhbmdlZEF0dHIiLCJmcm9tQXJyIiwidG9BcnIiLCJ0cmFuc0FyciIsInRtcEZyb21JdGVtIiwidG1wVG9JdGVtIiwidG1wRnJvbVBhdGgiLCJ0bXBUb1BhdGgiLCJmcm9tUGF0aFN0ZXBMZW4iLCJ0b1BhdGhTdGVwTGVuIiwiZnJvbURpc2NyaXRQYXRoIiwidG9EaXNjcml0UGF0aCIsInRtcEZyb21QbnQiLCJ0bXBUb1BudCIsInByZU9iaiIsInRyYW5zaXRpb24iLCJmYWRlIiwiZGlzYXBwZWFyIiwiZmFkZU91dCIsImdyb3ciLCJkZWdyb3ciLCJ3aXBlQm90dG9tIiwiSW52ZXJ0QWxwaGEiLCJ3aXBlT3V0RnJvbVRvcCIsIndpcGVUb3AiLCJ3aXBlT3V0RnJvbUJvdHRvbSIsIndpcGVMZWZ0Iiwid2lwZU91dEZyb21SaWdodCIsIndpcGVSaWdodCIsIndpcGVPdXRGcm9tTGVmdCIsImNpcmNsZU91dCIsIndoZWVsT3V0IiwiYWN0aW9uQXJyIiwid2hvbGVTdGFydCIsIndob2xlRW5kIiwiZHVyYXRpb25XaXRoQXR0ciIsInRtcFN0YXJ0TWFwIiwidG1wRW5kTWFwIiwibWlzdGFrZSIsInRtcFN0YXJ0IiwibWluVG1wU3RhcnQiLCJtYXhUbXBFbmQiLCJ0bXBFbmQiLCJ0bXBSZXN1bHREdXJhdGlvbiIsInJlc3VsdER1cmF0aW9ucyIsInRtcEV4dHJhRHVyYXRpb24iLCJlYXNpbmdOYW1lIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJ6b29tIiwiZWFzZU91dEJvdW5jZSIsIkdyb3VwaW5nU3BlYyIsIl9ncm91cEJ5IiwiX2RlbGF5IiwiZGVmaW5lZEJ5SWQiLCJkZWxheSIsImdyb3VwaW5nSnNvbiIsImdyb3VwQnkiLCJvcmRlciIsImV4cHIiLCJncm91cFJlZiIsIm5vZGVJZCIsImdlbmVyYXRlVHJlZSIsInVwZGF0ZVRyZWUiLCJnZXRNYXJrT3JkZXJBbmRMZWF2ZXMiLCJncm91cEJ5UmVmIiwic2FtZUdyb3VwaW5nIiwidG1wTm9kZSIsIm5vZGVzVGhpc0xldmVsIiwicmVmVmFsdWUiLCJzb3J0Tm9kZXMiLCJzcGVjU29ydCIsInJlZlZhbHVlTnVtIiwiYXBwZW5kTnVtIiwiaGFzU2luZ2xlTWFyayIsIm9yZGVyUmVmIiwibm9kZXNUaGlzTGV2ZWxBcnIiLCJvcmRlclR5cGUiLCJtYXJrSWQxIiwibWFya0lkMiIsIm9yZGVyUmVmVmFsdWUxIiwib3JkZXJSZWZWYWx1ZTIiLCJkYXR1bTEiLCJkYXR1bTIiLCJvcmRlclR5cGVzIiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsInBhcmVudElkIiwibm9kZUlkeCIsIm5vZGVzTnVtIiwib3JkZXJlZE1hcmtzIiwicGFyZW50R3JvdXBSZWYiLCJwYXJlbnRHcm91cFJlZlZhbHVlIiwibGFzdEdyb3VwU3RhcnQiLCJsYXN0R3JvdXBFbmQiLCJ0bXBNYXJrSWQiLCJnYiIsInRtcFJlZlN0ciIsImRseSIsIm5hbWVzIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QUyIsIiRhc3NpZ24iLCJhc3NpZ24iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwicGFydEFyZ3MiLCJib3VuZCIsInVuIiwiJHBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsImluYyIsImZvcmNlZCIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCIkV2Vha01hcCIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsImNhbmlzIiwiZnJhbWVSYXRlIiwicmVuZGVyU3BlYyIsImluaXQiLCJyZW5kZXIiLCJleHBvcnRKU09OIiwiX3JlbmRlciIsIl9oZWxwZXIiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9lIiwiX3MiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwic3ltIiwiX2NyZWF0ZUNsYXNzIiwiYW5jaG9yIiwidHJhbnNmb3JtIiwiZ2V0RGVmYXVsdFByb3BlcnR5Iiwic3RhdGljVmFsdWUiLCJyZWFkeVRvU2V0IiwiaWR4Iiwid3JhcCIsImV4aXN0S2V5ZnJhbWUiLCJwcmV2aW91c0tleWZyYW1lQ291bnQiLCJzaGFwZXMiLCJzaGFwZSIsImZpbmRQcm9wZXJ0eUNvbmZpZyIsImhhc1RyYW5zZm9ybSIsImNvbmZpZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfb2JqZWN0U3ByZWFkIiwiZ3JvdXBTaGFwZXMiLCJiYXNlIiwia3MiLCJmaW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZyIsInRpbWVSYW5nZSIsInVwZGF0ZVRpbWVSYW5nZSIsIl90aGlzJGNvbW1vblByb3BlcnR5TTIiLCJjb21tb25Qcm9wZXJ0eU1hcHBpbmciLCJkb2MiLCJjb252ZXJ0VG9TdGF0aWNQcm9wZXJ0eSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsInN0YXJ0TGluZUNvdW50IiwiZW5kTGluZUNvdW50IiwibmVlZENvcHkiLCJuZWVkTGVuZ3RoIiwiY29tbW9uTXVsdGlwbGUiLCJ1cHNhbXBsZSIsIl9tYXAyIiwiX3RoaXMkY29tbW9uUHJvcGVydHlNNCIsInRleHRQcm9wIiwidG1wU3RhcnRWYWx1ZSIsInRtcEVuZFZhbHVlIiwiY29udmVydFRvQW5pbWF0YWJsZVByb3BlcnR5IiwiYWRkS2V5ZnJhbWUiLCJjb29yZGluYXRlIiwicmVjdCIsInNyIiwiYW8iLCJnZW5lcmF0ZVRyYW5zZm9ybSIsInN0IiwiYm0iLCJ0b3AiLCJyZW5kZXJQbGFpbkdseXBoIiwiYXNzZXRMaXN0IiwiZm9udExpc3QiLCJkb21UeXBlIiwiU1ZHVGV4dEVsZW1lbnQiLCJTVkdJbWFnZUVsZW1lbnQiLCJTVkdHRWxlbWVudCIsImRvbUxlYXZlcyIsInByZWNvbXBMYXllciIsInByZUNvbXBBc3NldCIsInByZUNvbXBSZWZJZCIsIl9zaGFwZUxheWVyIiwiaW1hZ2VMYXllciIsIl9yZW5kZXJJbWFnZTIiLCJyZW5kZXJJbWFnZSIsImltYWdlUmVmSWQiLCJpbWFnZUFzc2V0IiwidGV4dExheWVyIiwiYmFzZUxpbmVIZWlnaHQiLCJ0ZXh0QW5jaG9yV2VpZ2h0IiwidGV4dEFuY2hvciIsImZpbGxPcGFjaXR5IiwiX3JlbmRlclRleHQyIiwicmVuZGVyVGV4dCIsInRleHREYXRhIiwiZk5hbWUiLCJoZCIsImxqIiwic2siLCJzYSIsImNvbXB1dGVkU3R5bGUiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJmb250U3R5bGUiLCJmb250V2VpZ2h0IiwiZm9udENvbG9yIiwiZm9udE5hbWUiLCJmb250RXhpc3QiLCJmRmFtaWx5IiwiZlN0eWxlIiwiZldlaWdodCIsImxzIiwiZmMiLCJmb250RGVmIiwiZG9tSGVpZ2h0VmFsIiwiYmFzZVZhbCIsImNvbnZlcnRUb1NwZWNpZmllZFVuaXRzIiwiU1ZHTGVuZ3RoIiwiU1ZHX0xFTkdUSFRZUEVfUFgiLCJkb21XaWR0aFZhbCIsImNhbnZhcyIsInZhbHVlSW5TcGVjaWZpZWRVbml0cyIsImRyYXdJbWFnZSIsImRhdGFVcmwiLCJ0b0RhdGFVUkwiLCJhc3NldEV4aXN0IiwiYXNzZXQiLCJiYXNlRG9tIiwiaXRlbXMiLCJyZW5kZXJHcm91cCIsInBvc3RBY3Rpb25zIiwibm0iLCJzdHlsZXMiLCJyYXciLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwicG9zWCIsInBvc1kiLCJvcGFjaXR5IiwiYmFzZVRyYW5zZm9ybSIsImJhc2VCQm94IiwiYWRkVmlzdWFsRW5jb2RpbmdzIiwiU1ZHQ2lyY2xlRWxlbWVudCIsInN2Z0xlbmd0aCIsIlNWR0VsbGlwc2VFbGVtZW50IiwiX21hcEtleSRtYXAyIiwiX3BhdGhNYWtlciIsIlNWR0xpbmVFbGVtZW50IiwiX21hcEtleSRtYXA0IiwiX3BhdGhNYWtlcjIiLCJTVkdQYXRoRWxlbWVudCIsIl9wYXRoTWFrZXIzIiwiU1ZHUG9seWdvbkVsZW1lbnQiLCJTVkdQb2x5bGluZUVsZW1lbnQiLCJwb2ludHMiLCJpdGVyYWJsZVBvaW50cyIsIl9vZmZzZXRYIiwiX29mZnNldFkiLCJfcGF0aE1ha2VyNCIsIlNWR1JlY3RFbGVtZW50IiwiX21hcEtleTIkbWFwMiIsIl9wYXRoTWFrZXI1IiwicmVuZGVyR2x5cGgiLCJwZWckU3ludGF4RXJyb3IiLCJtZXNzYWdlIiwiZXhwZWN0ZWQiLCJmb3VuZCIsImNhcHR1cmVTdGFja1RyYWNlIiwiY2hpbGQiLCJjdG9yIiwicGVnJHN1YmNsYXNzIiwiYnVpbGRNZXNzYWdlIiwiREVTQ1JJQkVfRVhQRUNUQVRJT05fRk5TIiwibGl0ZXJhbCIsImV4cGVjdGF0aW9uIiwibGl0ZXJhbEVzY2FwZSIsInRleHQiLCJlc2NhcGVkUGFydHMiLCJwYXJ0cyIsImNsYXNzRXNjYXBlIiwiaW52ZXJ0ZWQiLCJhbnkiLCJvdGhlciIsImRlc2NyaXB0aW9uIiwiY2giLCJkZXNjcmlwdGlvbnMiLCJkZXNjcmliZUV4cGVjdGVkIiwiZGVzY3JpYmVGb3VuZCIsIlN5bnRheEVycm9yIiwiaW5wdXQiLCJwZWckcmVzdWx0IiwicGVnJEZBSUxFRCIsInBlZyRzdGFydFJ1bGVGdW5jdGlvbnMiLCJzdmdfcGF0aCIsInBlZyRwYXJzZXN2Z19wYXRoIiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9uIiwicGVnJGMwIiwiZmlyc3QiLCJwZWckYzEiLCJtb3JlIiwibWVyZ2UiLCJwZWckYzIiLCJwZWckYzMiLCJwZWckY2xhc3NFeHBlY3RhdGlvbiIsInBlZyRjNCIsInBlZyRjNSIsInBlZyRjNiIsInBlZyRjNyIsInBlZyRjOCIsInBlZyRjOSIsInBlZyRjMTAiLCJwZWckYzExIiwicGVnJGMxMiIsInBlZyRjMTMiLCJwZWckYzE0IiwicGVnJGMxNSIsInBlZyRjMTYiLCJwZWckYzE3IiwicGVnJGMxOCIsInBlZyRjMTkiLCJwZWckYzIwIiwicGVnJGMyMSIsInBlZyRjMjIiLCJwZWckYzIzIiwicGVnJGMyNCIsInBlZyRjMjUiLCJwZWckYzI2IiwicGVnJGMyNyIsInBlZyRjMjgiLCJwZWckYzI5IiwicGVnJGMzMCIsInhyb3QiLCJsYXJnZSIsInBlZyRjMzEiLCJwZWckYzMyIiwicGVnJGMzMyIsInBlZyRjMzQiLCJwZWckYzM1IiwicGVnJGMzNiIsImJpdCIsInBlZyRjMzciLCJwZWckYzM4IiwicGVnJGMzOSIsInBlZyRsaXRlcmFsRXhwZWN0YXRpb24iLCJwZWckYzQwIiwicGVnJGM0MSIsInBlZyRjNDIiLCJwZWckYzQzIiwicGVnJGM0NCIsInBlZyRjNDUiLCJwZWckYzQ2IiwicGVnJGM0NyIsInBlZyRjNDgiLCJwZWckYzQ5IiwiZGlnaXRzIiwicGVnJGM1MCIsInBlZyRjNTEiLCJwZWckY3VyclBvcyIsInBlZyRwb3NEZXRhaWxzQ2FjaGUiLCJsaW5lIiwiY29sdW1uIiwicGVnJG1heEZhaWxQb3MiLCJwZWckbWF4RmFpbEV4cGVjdGVkIiwicGVnJHNpbGVudEZhaWxzIiwic3RhcnRSdWxlIiwicGVnJGNvbXB1dGVQb3NEZXRhaWxzIiwiZGV0YWlscyIsInBlZyRjb21wdXRlTG9jYXRpb24iLCJzdGFydFBvcyIsInN0YXJ0UG9zRGV0YWlscyIsImVuZFBvc0RldGFpbHMiLCJwZWckZmFpbCIsInBlZyRidWlsZFN0cnVjdHVyZWRFcnJvciIsInMwIiwiczMiLCJzNCIsInBlZyRwYXJzZXdzcCIsInM1IiwicGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXAiLCJwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cHMiLCJzNiIsInBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpciIsInBlZyRwYXJzZWNvbW1hX3dzcCIsInBlZyRwYXJzZWxpbmV0b19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZW1vdmV0byIsInBlZyRwYXJzZWRyYXd0b19jb21tYW5kIiwicGVnJHBhcnNlY2xvc2VwYXRoIiwicGVnJHBhcnNlbGluZXRvIiwicGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSIsInBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvIiwicGVnJHBhcnNldmVydGljYWxfbGluZXRvIiwicGVnJHBhcnNlY3VydmV0b19hcmd1bWVudCIsInBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2VjdXJ2ZXRvIiwicGVnJHBhcnNlc21vb3RoX2N1cnZldG9fYXJndW1lbnQiLCJwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvIiwicGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50IiwicGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvIiwicGVnJHBhcnNlc21vb3RoX3F1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8iLCJwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCIsInBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlZWxsaXB0aWNhbF9hcmMiLCJwZWckcGFyc2VudW1iZXIiLCJzNyIsInM4IiwiczkiLCJzMTAiLCJzMTEiLCJwZWckcGFyc2Vub25uZWdhdGl2ZV9udW1iZXIiLCJwZWckcGFyc2VmbGFnIiwicGVnJHBhcnNlZmxvYXRpbmdfcG9pbnRfY29uc3RhbnQiLCJwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSIsInBlZyRwYXJzZXNpZ24iLCJwZWckcGFyc2Vjb21tYSIsInBlZyRwYXJzZWZyYWN0aW9uYWxfY29uc3RhbnQiLCJwZWckcGFyc2VleHBvbmVudCIsInEiLCJ6IiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJybmRzOCIsImJ5dGVUb0hleCIsImJ0aCIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwicGFkRW5kIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX2lzRmluaXRlIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInVybCIsIkRhdGUiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiZW1wdHkiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsImNoYWluIiwiX2MiLCJvayIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsImZsYXR0ZW4iLCJkZXB0aEFyZyIsIiRwYWQiLCJXRUJLSVRfQlVHIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJnZXREZXNjIiwiJHZhbHVlcyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlJBRF9QRVJfREVHIiwiZGVncmVlcyIsInJhZGlhbnMiLCJmc2NhbGUiLCJpYWRkaCIsIiR4MCIsIiR5MCIsImlzdWJoIiwiaW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwidW11bGgiLCJzaWduYml0Iiwib25GaW5hbGx5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiYXNhcCIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJPYnNlcnZhYmxlIiwiTVNJRSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiQ29udGV4dCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInVud3JhcHBlZCIsInJldHVybiIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIs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LENBQUMsaUJBQWtCLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxPQUFRLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxnQkFBaUIsV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLGNBQWUsV0FBWSxDQUFDLGlCQUFrQixXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsZUFBZ0IsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsZ0JBQWlCLFdBQVksQ0FBQyxnQkFBaUIsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsZ0JBQWlCLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxlQUFnQixXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsdUJBQXdCLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxjQUFl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TyxDQUFDLENBQUMsQ0FBQyxLQUFPLENBQUMsT0FBUyxDQUFDLENBQUMsTUFBUSxDQUFDLE9BRXZDLENBQ0RNLElBQUssZ0JBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxNQUFRLENBQUMsQ0FBQyxLQUFPLENBQUMsU0FFdEMsQ0FDRE0sSUFBSyxhQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxLQUFPLENBQUMsT0FBUyxDQUFDLENBQUMsS0FBTyxDQUFDLFNBRXRDLENBQ0RNLElBQUssY0FDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxDQUFDLE1BQVEsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxTQUVyQyxDQUNETSxJQUFLLGdCQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsTUFBUSxDQUFDLENBQUMsTUFBUSxDQUFDLFVBRXZDLENBQ0RNLElBQUssY0FDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxDQUFDLE9BQVMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxTQUV2QyxDQUNETSxJQUFLLGVBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxNQUFRLENBQUMsQ0FBQyxNQUFRLENBQUMsT0FFdkMsQ0FDRE0sSUFBSyxpQkFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsTUFBUSxDQUFDLE9BQVMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxPQUV4QyxDQUNETSxJQUFLLGNBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxNQUFRLENBQUMsQ0FBQyxNQUFRLENBQUMsU0FFdkMsQ0FDRE0sSUFBSyxlQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsTUFBUSxDQUFDLENBQUMsS0FBTyxDQUFDLE9BRXRDLENBQ0RNLElBQUssaUJBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFD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LEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLElBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNS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LEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTThvRSxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRWgzRSxNQUFPc0MsRUFBVzZMLE1BQU0sSUFoZ0JwQyxDQThzQkMsV0FBYyxPQUFPdEosS0FBckIsSUFBa0N0QyxTQUFTLGNBQVRBLEssZ0JDcnRCcEMsRUFBUSxLQUNSL0QsRUFBT0QsUUFBVSxFQUFRLElBQXVCa1ksT0FBT21oRSxRLGdCQ0F2RCxJQUFJeDJFLEVBQVUsRUFBUSxHQUNsQnkyRSxFQUFNLEVBQVEsSUFBUixDQUF1QixzQkFBdUIsUUFFeER6MkUsRUFBUUEsRUFBUVcsRUFBRyxTQUFVLENBQUU2MUUsT0FBUSxTQUFnQmgxRSxHQUFNLE9BQU9pMUUsRUFBSWoxRSxPLGNDSnhFcEUsRUFBT0QsUUFBVSxTQUFVdTVFLEVBQVF6eUUsR0FDakMsSUFBSTIzRCxFQUFXMzNELElBQVk1RixPQUFPNEYsR0FBVyxTQUFVMHlFLEdBQ3JELE9BQU8xeUUsRUFBUTB5RSxJQUNiMXlFLEVBQ0osT0FBTyxTQUFVekMsR0FDZixPQUFPZ0MsT0FBT2hDLEdBQUl5QyxRQUFReXlFLEVBQVE5YSIsImZpbGUiOiJjYW5pc190b29sa2l0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiY2FuaXNfdG9vbGtpdFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJjYW5pc190b29sa2l0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImNhbmlzX3Rvb2xraXRcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNDQpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuOScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJjbGFzcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX29mZnNldCA9IDA7Ly9kZWZhdWx0IG9mZmZzZXQgaXMgMFxyXG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZSA9IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ7Ly9kZWZhdWx0IG9mZnNldCByZWZlcmVuY2UgaXMgJ3ByZXZpb3VzX3N0YXJ0J1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKiBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgc2V0IHJlZmVyZW5jZShvZmZzZXRSZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9mZnNldFJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IHRtcE9mZnNldFJlZlN0ciA9IFRpbWluZ1NwZWMudHJhbnNSZWYob2Zmc2V0UmVmKTtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyh0bXBPZmZzZXRSZWZTdHIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSBvZmZzZXRSZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlZmVyZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBvZmZzZXQob2ZzdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2ZzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZnN0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gTWF0aC5mbG9vcihvZnN0IC8gKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpKSAqICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2ZzdCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9mc3QgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZnN0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgb2Zmc2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vZmZzZXQ7XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgcmVwbGFjZU9mZnNldENvbnN0KGNvbnN0YW50cywgc3RhdHVzID0ge30pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2Zmc2V0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdCBpcyBhbiBlcXVhdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0LmluZGV4T2YoXCJjYWxjXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLm9mZnNldC5zdWJzdHJpbmcoMCwgdGhpcy5vZmZzZXQubGVuZ3RoIC0gMSkuc3Vic3RyaW5nKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50cy5mb3JFYWNoKCh2YWx1ZSwga2V5LCBtYXApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0LmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLm9mZnNldC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZ20nKSwgJycgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdPZmZzZXQgbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJvZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrRXF1YXRpb24odGhpcy5vZmZzZXQsIGNvbnN0YW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBldmFsKHRoaXMub2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgZXF1YXRpb24uJywgZXJyU3BlYzogJ1wib2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJvZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnT2Zmc2V0IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wib2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vZmZzZXQgJiYgdHlwZW9mIHRoaXMub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub2Zmc2V0Lm1pbk9mZnNldCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldC5taW5PZmZzZXQpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXQgaXMgYW4gZXF1YXRpb25cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXQubWluT2Zmc2V0LmluZGV4T2YoXCJjYWxjXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Lm1pbk9mZnNldCA9IHRoaXMub2Zmc2V0Lm1pbk9mZnNldC5zdWJzdHJpbmcoMCwgdGhpcy5vZmZzZXQubWluT2Zmc2V0Lmxlbmd0aCAtIDEpLnN1YnN0cmluZyg1KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLmZvckVhY2goKHZhbHVlLCBrZXksIG1hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0Lm1pbk9mZnNldC5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQubWluT2Zmc2V0ID0gdGhpcy5vZmZzZXQubWluT2Zmc2V0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnbScpLCAnJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnTWluT2Zmc2V0IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wibWluT2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQubWluT2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrRXF1YXRpb24odGhpcy5vZmZzZXQubWluT2Zmc2V0LCBjb25zdGFudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5taW5PZmZzZXQgPSBldmFsKHRoaXMub2Zmc2V0Lm1pbk9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgZXF1YXRpb24uJywgZXJyU3BlYzogJ1wibWluT2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQubWluT2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgcmVmZXJlbmNlIG9mIHRoZSBjb25zdGFudCB2YXJpYWJsZXMuJywgZXJyU3BlYzogJ1wibWluT2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQubWluT2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsvL3JlcGxhY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQubWluT2Zmc2V0KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQubWluT2Zmc2V0ID0gY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldC5taW5PZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdNaW5PZmZzZXQgbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJtaW5PZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FsRUxlT2Zmc2V0VGltZShkb21NYXJrcykge1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBsZXQgaXRlbXNTdGFydCA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgLy9pZiB0aGUgb2Zmc2V0IGlzIGFuIG9iamVjdCwgZmluZCB0aGUgbWluIHZhbHVlIG9mIHRoZSBmaWVsZCBpbiBvZmZzZXRcclxuICAgICAgICBsZXQgbWluQXR0clZhbHVlID0gMTAwMDAwMDtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBkb21NYXJrcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRycywgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWluQXR0clZhbHVlID4gcGFyc2VGbG9hdChhdHRyc1snZGF0YS1kYXR1bSddW3RoYXQub2Zmc2V0LmZpZWxkXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5BdHRyVmFsdWUgPSBwYXJzZUZsb2F0KGF0dHJzWydkYXRhLWRhdHVtJ11bdGhhdC5vZmZzZXQuZmllbGRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvbU1hcmtzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgbGV0IG9mZnNldFZhbHVlID0gMDtcclxuICAgICAgICAgICAgLy9qdWRnZSB0aGUgdHlwZSBvZiBvZmZzZXQ6IG51bWJlciBvciBvYmplY3RcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Lm9mZnNldCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldFZhbHVlID0gdGhhdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoYXQub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSB0aGF0Lm9mZnNldC5taW5PZmZzZXQgKiBwYXJzZUZsb2F0KGF0dHJzWydkYXRhLWRhdHVtJ11bdGhhdC5vZmZzZXQuZmllbGRdKSAvIG1pbkF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIG9mZnNldFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN3aXRjaCAodGhhdC5yZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgLy8gICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgLy8gICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIGxhc3RTdGFydCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzRW5kOlxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgbGFzdEVuZCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgb2Zmc2V0VmFsdWUgKyBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgLy8gICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBsYXN0U3RhcnQgKyBvZmZzZXRWYWx1ZSAtIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gaXRlbXNTdGFydDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFkZCBvZmZzZXQgc3RhcnQgdGltZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RTdGFydCA6IHN0YXJ0IHRpbWUgb2YgdGhlIGxhc3QgaXRlbVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RFbmQgOiBlbmQgdGltZSBvZiB0aGUgbGFzdCBpdGVtXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWxsSXRlbXNTdGFydCA6IHN0YXJ0IHRpbWUgb2YgYWxsIHRoZSBpdGVtcyBcclxuICAgICAqIEBwYXJhbSB7TWFwfSBkb21NYXJrcyA6IGtleTogbWFya0lkLCB2YWx1ZTogYXR0cnNcclxuICAgICAqL1xyXG4gICAgY2FsT2Zmc2V0VGltZShsYXN0U3RhcnQsIGxhc3RFbmQsIGFsbEl0ZW1zU3RhcnQgPSAwLCBkb21NYXJrcyA9IG5ldyBNYXAoKSkge1xyXG4gICAgICAgIGlmIChkb21NYXJrcy5zaXplID09PSAwKSB7Ly9jb21wdXRpbmcgYWN0aW9uIG9mZnNldCB0aW1lLCByZXR1cm4gYSBudW1iZXJcclxuICAgICAgICAgICAgbGV0IGl0ZW1TdGFydCA9IDA7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5yZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgICAgICAgICBpdGVtU3RhcnQgPSBsYXN0U3RhcnQgKyB0aGlzLm9mZnNldCAtIGFsbEl0ZW1zU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzRW5kOlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TdGFydCA9IGxhc3RFbmQgKyB0aGlzLm9mZnNldCAtIGFsbEl0ZW1zU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TdGFydCA9IHRoaXMub2Zmc2V0ICsgYWxsSXRlbXNTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0YXJ0ID0gbGFzdFN0YXJ0ICsgdGhpcy5vZmZzZXQgLSBhbGxJdGVtc1N0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtU3RhcnQ7XHJcbiAgICAgICAgfSBlbHNlIHsvL2NvbXB1dGluZyBhbmltYXRpb24gb2Zmc2V0IHRpbWUsIHJldHVybiBhIG1hcFxyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGxldCBpdGVtc1N0YXJ0ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICAgICAgLy9pZiB0aGUgb2Zmc2V0IGlzIGFuIG9iamVjdCwgZmluZCB0aGUgbWluIHZhbHVlIG9mIHRoZSBmaWVsZCBpbiBvZmZzZXRcclxuICAgICAgICAgICAgbGV0IG1pbkF0dHJWYWx1ZSA9IDEwMDAwMDA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBkb21NYXJrcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRycywgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbkF0dHJWYWx1ZSA+IHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkF0dHJWYWx1ZSA9IHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvbU1hcmtzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBvZmZzZXRWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAvL2p1ZGdlIHRoZSB0eXBlIG9mIG9mZnNldDogbnVtYmVyIG9yIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0Lm9mZnNldCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHRoYXQub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhhdC5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSB0aGF0Lm9mZnNldC5taW5PZmZzZXQgKiBwYXJzZUZsb2F0KGF0dHJzWydkYXRhLWRhdHVtJ11bdGhhdC5vZmZzZXQuZmllbGRdKSAvIG1pbkF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoYXQucmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIGxhc3RTdGFydCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgbGFzdEVuZCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgb2Zmc2V0VmFsdWUgKyBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBsYXN0U3RhcnQgKyBvZmZzZXRWYWx1ZSAtIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXNTdGFydDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc1JlZihyZWZTdHIpIHtcclxuICAgICAgICBzd2l0Y2ggKHJlZlN0cikge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3ByZXZpb3VzU3RhcnQnO1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMudGltaW5nUmVmLnByZXZpb3VzRW5kOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdwcmV2aW91c0VuZCc7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Fic29sdXRlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblRpbWluZ1NwZWMuRlJBTUVfUkFURSA9IDIwO1xyXG5UaW1pbmdTcGVjLnRpbWluZ1JlZiA9IHtcclxuICAgIHByZXZpb3VzU3RhcnQ6ICdzdGFydCB3aXRoIHByZXZpb3VzJyxcclxuICAgIHByZXZpb3VzRW5kOiAnc3RhcnQgYWZ0ZXIgcHJldmlvdXMnLFxyXG4gICAgYWJzb2x1dGU6ICdhYnNvbHV0ZSdcclxufTtcclxuVGltaW5nU3BlYy5kYXRhQmluZEF0dHJzID0gWydmaWVsZCcsICdtaW5PZmZzZXQnLCAnbWluRHVyYXRpb24nXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRpbWluZ1NwZWM7IiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsImltcG9ydCB7IFBhdGhNYWtlciB9IGZyb20gJ2pzbW92aW4nO1xyXG5pbXBvcnQgeyBwYXJzZVNWRyB9IGZyb20gJ3N2Zy1wYXRoLXBhcnNlcidcclxuXHJcbmV4cG9ydCBjbGFzcyBDYW5pc1V0aWwge1xyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrIHdoZXRoZXIgYXJyMiBpcyBjb250YWluZWQgaW4gYXJyMVxyXG4gICAgICogQHBhcmFtIHsqfSBhcnIxIFxyXG4gICAgICogQHBhcmFtIHsqfSBhcnIyIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYXJySXNDb250YWluZWQoYXJyMSwgYXJyMikge1xyXG4gICAgICAgIGlmIChhcnIyLmxlbmd0aCA+IGFycjEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyMi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIWFycjEuaW5jbHVkZXMoYXJyMltpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNoZWNrRXF1YXRpb24oc3RyaW5nLCBjb25zdGFudHMpIHtcclxuICAgICAgICAvLyDliZTpmaTnqbrnmb3nrKZcclxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvXFxzL2csICcnKTtcclxuXHJcbiAgICAgICAgLy8g6ZSZ6K+v5oOF5Ya177yM56m65a2X56ym5LiyXHJcbiAgICAgICAgaWYgKFwiXCIgPT09IHN0cmluZykge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXltcXHhcXMO3XFwrXFwtXFwqXFwvXS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJiBhbXA7IHF1b3Q7IOi/kOeul+espuW8gOWktCAmIGFtcDsgcXVvdDspO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+mUmeivr+aDheWGte+8jOi/kOeul+espue7k+WwvlxyXG4gICAgICAgIGlmICgvW1xceFxcw7dcXCtcXC1cXCpcXC9dJC8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJiBhbXA7IHF1b3Q7IOi/kOeul+espue7k+WwviAmIGFtcDsgcXVvdDspO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIwo5ZCO6Z2i5piv6L+Q566X56ym5oiW6ICFKVxyXG4gICAgICAgIGlmICgvXFwoW1xceFxcw7dcXCtcXC1cXCpcXC9dLy50ZXN0KHN0cmluZykpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcigmIGFtcDsgcXVvdDsgKOWQjumdouaYr+i/kOeul+espuaIluiAhSkgJiBhbXA7IHF1b3Q7KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIzov5DnrpfnrKbov57nu61cclxuICAgICAgICBpZiAoL1tcXHhcXMO3XFwrXFwtXFwqXFwvXXsyLH0vLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDnqbrmi6zlj7dcclxuICAgICAgICBpZiAoL1xcKFxcKS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jOaLrOWPt+S4jemFjeWvuVxyXG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpdGVtOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBzdHJpbmcuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICBpZiAoJygnID09PSBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKCcoJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJyknID09PSBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgwICE9PSBzdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6ZSZ6K+v5oOF5Ya177yMKOWQjumdouaYr+i/kOeul+espiBcclxuICAgICAgICBpZiAoL1xcKFtcXHhcXMO3XFwrXFwtXFwqXFwvXS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jCnliY3pnaLmmK/ov5DnrpfnrKZcclxuICAgICAgICBpZiAoL1tcXHhcXMO3XFwrXFwtXFwqXFwvXVxcKS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jCjliY3pnaLkuI3mmK/ov5DnrpfnrKZcclxuICAgICAgICBpZiAoL1tcXHhcXMO3XFwrXFwtXFwqXFwvXVxcKC8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jCnlkI7pnaLkuI3mmK/ov5DnrpfnrKZcclxuICAgICAgICBpZiAoL1xcKVtcXHhcXMO3XFwrXFwtXFwqXFwvXS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jOWPmOmHj+ayoeacieadpeiHquKAnOW+hemAieWFrOW8j+WPmOmHj+KAnVxyXG4gICAgICAgIHZhciB0bXBTdHIgPSBzdHJpbmcucmVwbGFjZSgvW1xcKFxcKVxceFxcw7dcXCtcXC1cXCpcXC9dezEsfS9nLCAnYCcpO1xyXG4gICAgICAgIHZhciBhcnJheSA9IHRtcFN0ci5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaXRlbSA9IGFycmF5W2ldO1xyXG4gICAgICAgICAgICBpZiAoL1tBLVpdL2kudGVzdChpdGVtKSAmJiAndW5kZWZpbmVkJyA9PSB0eXBlb2YgKGNvbnN0YW50cy5nZXQoaXRlbSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHN0cmluZ2FyciA9IHN0cmluZy5zcGxpdCgnLCcpO1xyXG4gICAgICAgIC8vIGxldCBvYmphcnIgPSBPYmplY3Qua2V5cyhvYmopO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzdHJpbmdhcnIubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldChzdHJpbmdhcnJbaW5kZXhdKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdHJpbmdhcnJbaW5kZXggKyAxXSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nYXJyW2luZGV4ICsgMV0gIT09ICcrJyAmJiBzdHJpbmdhcnJbaW5kZXggKyAxXSAhPT0gJy4nICYmIHN0cmluZ2FycltpbmRleCArIDFdICE9PSAnLScgJiYgc3RyaW5nYXJyW2luZGV4ICsgMV0gIT09ICd4JyAmJiBzdHJpbmdhcnJbaW5kZXggKyAxXSAhPT0gJ8O3JyAmJiBzdHJpbmdhcnJbaW5kZXggKyAxXSAhPT0gJygnICYmIHN0cmluZ2FycltpbmRleCArIDFdICE9PSAnKScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkZWVwQ2xvbmUob2JqKSB7XHJcbiAgICAgICAgaWYgKCFvYmogfHwgdHJ1ZSA9PSBvYmopIC8vdGhpcyBhbHNvIGhhbmRsZXMgYm9vbGVhbiBhcyB0cnVlIGFuZCBmYWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIHZhciBvYmpUeXBlID0gdHlwZW9mIChvYmopO1xyXG4gICAgICAgIGlmIChcIm51bWJlclwiID09IG9ialR5cGUgfHwgXCJzdHJpbmdcIiA9PSBvYmpUeXBlKSAvLyBhZGQgeW91ciBpbW11dGFibGVzIGhlcmVcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTtcclxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoua2V5cygpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gb2JqLmtleXMoKVtpXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCB0aGlzLmRlZXBDbG9uZShvYmouZ2V0KGtleSkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKVxyXG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpXHJcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IHRoaXMuZGVlcENsb25lKG9ialtrZXldKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRUaW1lKHRpbWUpIHtcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVTID0gcGFyc2VJbnQodGltZSAvIDEwMDApO1xyXG4gICAgICAgIGxldCBjdXJyZW50VGltZU1TID0gcGFyc2VJbnQodGltZSAlIDEwMDAgLyAxMCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lU1N0ciA9IGN1cnJlbnRUaW1lUyA8IDEwID8gJzAnICsgY3VycmVudFRpbWVTIDogJycgKyBjdXJyZW50VGltZVM7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lTVNTdHIgPSBjdXJyZW50VGltZU1TIDwgMTAgPyAnMCcgKyBjdXJyZW50VGltZU1TIDogJycgKyBjdXJyZW50VGltZU1TO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50VGltZVNTdHIgKyAnOicgKyBjdXJyZW50VGltZU1TU3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb2xvcjJSR0IoY29sb3IpIHtcclxuICAgICAgICBpZiAoY29sb3IpIHtcclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuZnJvbSh0aGlzLmNvbG9yTmFtZXMua2V5cygpKS5pbmNsdWRlcyhjb2xvcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jb2xvck5hbWVzLmdldChjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKC9cXHMvZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoY29sb3IuaW5kZXhPZigncmdiJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFN0ciA9IGNvbG9yLnN1YnN0cihjb2xvci5pbmRleE9mKCcoJykgKyAxKTtcclxuICAgICAgICAgICAgICAgIHRtcFN0ciA9IHRtcFN0ci5zdWJzdHJpbmcoMCwgdG1wU3RyLmluZGV4T2YoJyknKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmdiID0gdG1wU3RyLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmdiLmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJnYlszXSA9IDI1NTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbcGFyc2VJbnQocmdiWzBdKSwgcGFyc2VJbnQocmdiWzFdKSwgcGFyc2VJbnQocmdiWzJdKSwgcGFyc2VJbnQocmdiWzNdKV07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3IuaW5kZXhPZignIycpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkhFWDJSR0IoY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEhFWDJSR0IoaGV4KSB7XHJcbiAgICAgICAgaWYgKGhleC5jaGFyQXQoMCkgPT09ICcjJykge1xyXG4gICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGhleC5sZW5ndGggPCAyKSB8fCAoaGV4Lmxlbmd0aCA+IDYpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IGhleC5zcGxpdCgnJyksXHJcbiAgICAgICAgICAgIHIsXHJcbiAgICAgICAgICAgIGcsXHJcbiAgICAgICAgICAgIGIsXHJcbiAgICAgICAgICAgIGEgPSAyNTU7XHJcblxyXG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHIgPSBwYXJzZUludCh2YWx1ZXNbMF0udG9TdHJpbmcoKSArIHZhbHVlc1sxXS50b1N0cmluZygpLCAxNik7XHJcbiAgICAgICAgICAgIGcgPSByO1xyXG4gICAgICAgICAgICBiID0gcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICAgICAgciA9IHBhcnNlSW50KHZhbHVlc1swXS50b1N0cmluZygpICsgdmFsdWVzWzBdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgZyA9IHBhcnNlSW50KHZhbHVlc1sxXS50b1N0cmluZygpICsgdmFsdWVzWzFdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbHVlc1syXS50b1N0cmluZygpICsgdmFsdWVzWzJdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDYpIHtcclxuICAgICAgICAgICAgciA9IHBhcnNlSW50KHZhbHVlc1swXS50b1N0cmluZygpICsgdmFsdWVzWzFdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgZyA9IHBhcnNlSW50KHZhbHVlc1syXS50b1N0cmluZygpICsgdmFsdWVzWzNdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbHVlc1s0XS50b1N0cmluZygpICsgdmFsdWVzWzVdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbciwgZywgYiwgYV07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvTG90dGllUkdCQShjb2xvcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yMlJHQihjb2xvcikubWFwKChjKSA9PiBjIC8gMjU1KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9KU09OKG5vZGUpIHtcclxuICAgICAgICBub2RlID0gbm9kZSB8fCB0aGlzO1xyXG4gICAgICAgIGxldCBvYmogPSB7XHJcbiAgICAgICAgICAgIG5vZGVUeXBlOiBub2RlLm5vZGVUeXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAobm9kZS50YWdOYW1lKSB7XHJcbiAgICAgICAgICAgIG9iai50YWdOYW1lID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoubm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5vZGUubm9kZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9iai5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICBvYmouYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYXR0cjsgaSA8IGF0dHJzLmxlbmd0aCB8IChhdHRyID0gYXR0cnNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG9iai5hdHRyW2F0dHIubm9kZU5hbWVdID0gYXR0ci5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyB0b0RPTShvYmopIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlLCBub2RlVHlwZSA9IG9iai5ub2RlVHlwZTtcclxuICAgICAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTogLy9FTEVNRU5UX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgb2JqLnRhZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBvYmouYXR0ciB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBhdHRyOyBpIDwgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoIHwgKGF0dHIgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKVtpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyVmFsdWUgPSB0eXBlb2YgYXR0cmlidXRlc1thdHRyXSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeShhdHRyaWJ1dGVzW2F0dHJdLCBudWxsLCAwKSA6IGF0dHJpYnV0ZXNbYXR0cl07XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBhdHRyLCBhdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzogLy9URVhUX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvYmoubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDg6IC8vQ09NTUVOVF9OT0RFXHJcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChvYmoubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDk6IC8vRE9DVU1FTlRfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxMDogLy9ET0NVTUVOVF9UWVBFX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudFR5cGUob2JqLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDExOiAvL0RPQ1VNRU5UX0ZSQUdNRU5UX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iaiBBIHBhcnNlZCBzdmcganNvbiBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkaXNjcmV0aXplUGF0aChvYmopIHtcclxuICAgICAgICAvLyBub3JtYWxpemUgYXR0cmlidXRlc1xyXG4gICAgICAgIGlmIChvYmoudGFnTmFtZSAhPT0gJ3BhdGgnKSByZXR1cm4gbnVsbFxyXG4gICAgICAgIGxldCBhdHRyID0gb2JqLmF0dHIgfHwge31cclxuICAgICAgICBpZiAoIWF0dHIuZCkgcmV0dXJuIG51bGxcclxuICAgICAgICByZXR1cm4gdGhpcy5kaXNjcmV0aXplRChhdHRyLmQsIGF0dHIuZmlsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRpc2NyZXRpemVEKGQsIGZpbGxDb2xvcikge1xyXG4gICAgICAgIGxldCByZXN1bHRHcm91cCA9IFtdLFxyXG4gICAgICAgICAgICByZWcgPSAvW01tTGxIaFZ2WnpDY1NzUXFUdEFhXVteTW1MbEhoVnZaekNjU3NRcVR0QWFdKi9naSxcclxuICAgICAgICAgICAgZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgd2hpbGUgKChncm91cCA9IHJlZy5leGVjKGQpKSkge1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gcmVzdWx0R3JvdXAucmVkdWNlKChwLCBjKSA9PiBwICsgYy5sZW5ndGgsIDApO1xyXG4gICAgICAgICAgICByZXN1bHRHcm91cC5wdXNoKGQuc2xpY2Uob2Zmc2V0LCBncm91cC5pbmRleCkpO1xyXG4gICAgICAgICAgICByZXN1bHRHcm91cC5wdXNoKGdyb3VwWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdEdyb3VwXHJcbiAgICAgICAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IHguc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IHhcclxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMSlcclxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoL1sgLF0vKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIobiA9PiBuLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKG4gPT4gcGFyc2VGbG9hdChuKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZCA/IHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgIH0gOiBudWxsO1xyXG4gICAgICAgICAgICB9KS5maWx0ZXIoeCA9PiB4KVxyXG4gICAgICAgIC8vIHBvbHlsaW5lIHN0eWxlIHBhdGhcclxuICAgICAgICBpZiAocmVzdWx0LmV2ZXJ5KHggPT4gJ01tTGxIaFZ2Jy5pbmNsdWRlcyh4LmNvbW1hbmQpKSAmJiAhQ2FuaXNVdGlsLmNvbnZlcnRDb2xvcihmaWxsQ29sb3IpKSB7XHJcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IFtdXHJcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbFxyXG4gICAgICAgICAgICBsZXQgdmFsaWQgPSB0cnVlXHJcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICBpZiAoeC5jb21tYW5kID09PSAnTScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0geC5wYXJhbWV0ZXJzLnNsaWNlKC0yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2KSByZXR1cm4gdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgaWYgKHguY29tbWFuZCA9PT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHByZXYubWFwKCh2LCBpKSA9PiB2ICsgeC5wYXJhbWV0ZXJzW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0UG9pbnQgPSBwcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50ID0geC5jb21tYW5kID09PSB4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA/IHByZXYuc2xpY2UoKSA6IFswLCAwXVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHNlY29uZFBvaW50Lm1hcCgodiwgaSkgPT4gdiArIHgucGFyYW1ldGVyc1tpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnRbMF0gKz0geC5wYXJhbWV0ZXJzWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50WzFdID0gZmlyc3RQb2ludFsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludFsxXSArPSB4LnBhcmFtZXRlcnNbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnRbMF0gPSBmaXJzdFBvaW50WzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKFtmaXJzdFBvaW50LCBzZWNvbmRQb2ludF0pXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHNlY29uZFBvaW50XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaWYgKHZhbGlkKSByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVzJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmVzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcGllIHN0eWxlIHBhdGhcclxuICAgICAgICBpZiAocmVzdWx0LmV2ZXJ5KHggPT4gJ01tTGxBYVp6Jy5pbmNsdWRlcyh4LmNvbW1hbmQpKSAmJiByZXN1bHQuZmlsdGVyKHggPT4geC5jb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09ICdhJykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBjaXJjbGVzID0gW11cclxuICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsXHJcbiAgICAgICAgICAgIGxldCB2YWxpZCA9IHRydWVcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm5cclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHgucGFyYW1ldGVycy5zbGljZSgtMilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghcHJldikgcmV0dXJuIHZhbGlkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ3onKSByZXR1cm5cclxuICAgICAgICAgICAgICAgIGxldCBmaXJzdFBvaW50ID0gcHJldixcclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHguY29tbWFuZC50b0xvd2VyQ2FzZSgpID09PSB4LmNvbW1hbmQgPyBwcmV2LnNsaWNlKCkgOiBbMCwgMF1cclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgPSBzZWNvbmRQb2ludC5tYXAoKHYsIGkpID0+IHYgKyB4LnBhcmFtZXRlcnNbaV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHNlY29uZFBvaW50Lm1hcCgodiwgaSkgPT4gdiArIHgucGFyYW1ldGVyc1tpICsgNV0pXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wID0gQ2FuaXNVdGlsLnN2Z0FyY1RvQ2VudGVyUGFyYW0uYXBwbHkobnVsbCwgZmlyc3RQb2ludC5jb25jYXQoeC5wYXJhbWV0ZXJzLnNsaWNlKDAsIDUpKS5jb25jYXQoc2Vjb25kUG9pbnQpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odG1wLmN4KSAmJiAhaXNOYU4odG1wLmN5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRtcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcng6IHgucGFyYW1ldGVyc1swXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnk6IHgucGFyYW1ldGVyc1sxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlOiB4LnBhcmFtZXRlcnNbMl1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJldiA9IHNlY29uZFBvaW50XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmIChjaXJjbGVzLmxlbmd0aCA8PSAwIHx8ICFjaXJjbGVzLmV2ZXJ5KHggPT4gWydjeCcsICdjeSddLnJlZHVjZSgocCwgYykgPT4gcCArIE1hdGguYWJzKHhbY10gLSBjaXJjbGVzWzBdW2NdKSwgMCkgPCAxZS0xKSkgdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gY2lyY2xlcy5yZWR1Y2UoKHAsIGMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXApIHJldHVybiBjXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMucnggKyBjLnJ5ID4gcC5yeCArIHAucnkpIHJldHVybiBjXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBcclxuICAgICAgICAgICAgICAgIH0sIG51bGwpXHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0clJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGllcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjeDogYy5jeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3k6IGMuY3ksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGMuc3RhcnRBbmdsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGMuZW5kQW5nbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb2Nrd2lzZTogYy5jbG9ja3dpc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogY2lyY2xlcy5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ4OiB4LnJ4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ5OiB4LnJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZTogeC5yb3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0clJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvdGhlciB1bmhhbmRsZWQgc3R5bGUgcGF0aFxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJhZGlhbih1eCwgdXksIHZ4LCB2eSkge1xyXG4gICAgICAgIHZhciBkb3QgPSB1eCAqIHZ4ICsgdXkgKiB2eTtcclxuICAgICAgICB2YXIgbW9kID0gTWF0aC5zcXJ0KCh1eCAqIHV4ICsgdXkgKiB1eSkgKiAodnggKiB2eCArIHZ5ICogdnkpKTtcclxuICAgICAgICB2YXIgcmFkID0gTWF0aC5hY29zKGRvdCAvIG1vZCk7XHJcbiAgICAgICAgaWYgKHV4ICogdnkgLSB1eSAqIHZ4IDwgMC4wKSB7XHJcbiAgICAgICAgICAgIHJhZCA9IC1yYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHN2Z0FyY1RvQ2VudGVyUGFyYW0oeDEsIHkxLCByeCwgcnksIHBoaSwgZkEsIGZTLCB4MiwgeTIpIHtcclxuICAgICAgICB2YXIgY3gsIGN5LCBzdGFydEFuZ2xlLCBkZWx0YUFuZ2xlLCBlbmRBbmdsZTtcclxuICAgICAgICB2YXIgUEl4MiA9IE1hdGguUEkgKiAyLjA7XHJcblxyXG4gICAgICAgIGlmIChyeCA8IDApIHtcclxuICAgICAgICAgICAgcnggPSAtcng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyeSA8IDApIHtcclxuICAgICAgICAgICAgcnkgPSAtcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIChyeCA9PSAwLjAgfHwgcnkgPT0gMC4wKSB7IC8vIGludmFsaWQgYXJndW1lbnRzXHJcbiAgICAgICAgLy8gICAgIHRocm93IEVycm9yKCdyeCBhbmQgcnkgY2FuIG5vdCBiZSAwJyk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB2YXIgc19waGkgPSBNYXRoLnNpbihwaGkpO1xyXG4gICAgICAgIHZhciBjX3BoaSA9IE1hdGguY29zKHBoaSk7XHJcbiAgICAgICAgdmFyIGhkX3ggPSAoeDEgLSB4MikgLyAyLjA7IC8vIGhhbGYgZGlmZiBvZiB4XHJcbiAgICAgICAgdmFyIGhkX3kgPSAoeTEgLSB5MikgLyAyLjA7IC8vIGhhbGYgZGlmZiBvZiB5XHJcbiAgICAgICAgdmFyIGhzX3ggPSAoeDEgKyB4MikgLyAyLjA7IC8vIGhhbGYgc3VtIG9mIHhcclxuICAgICAgICB2YXIgaHNfeSA9ICh5MSArIHkyKSAvIDIuMDsgLy8gaGFsZiBzdW0gb2YgeVxyXG5cclxuICAgICAgICAvLyBGNi41LjFcclxuICAgICAgICB2YXIgeDFfID0gY19waGkgKiBoZF94ICsgc19waGkgKiBoZF95O1xyXG4gICAgICAgIHZhciB5MV8gPSBjX3BoaSAqIGhkX3kgLSBzX3BoaSAqIGhkX3g7XHJcblxyXG4gICAgICAgIC8vIEYuNi42IENvcnJlY3Rpb24gb2Ygb3V0LW9mLXJhbmdlIHJhZGlpXHJcbiAgICAgICAgLy8gICBTdGVwIDM6IEVuc3VyZSByYWRpaSBhcmUgbGFyZ2UgZW5vdWdoXHJcbiAgICAgICAgdmFyIGxhbWJkYSA9ICh4MV8gKiB4MV8pIC8gKHJ4ICogcngpICsgKHkxXyAqIHkxXykgLyAocnkgKiByeSk7XHJcbiAgICAgICAgaWYgKGxhbWJkYSA+IDEpIHtcclxuICAgICAgICAgICAgcnggPSByeCAqIE1hdGguc3FydChsYW1iZGEpO1xyXG4gICAgICAgICAgICByeSA9IHJ5ICogTWF0aC5zcXJ0KGxhbWJkYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcnhyeSA9IHJ4ICogcnk7XHJcbiAgICAgICAgdmFyIHJ4eTFfID0gcnggKiB5MV87XHJcbiAgICAgICAgdmFyIHJ5eDFfID0gcnkgKiB4MV87XHJcbiAgICAgICAgdmFyIHN1bV9vZl9zcSA9IHJ4eTFfICogcnh5MV8gKyByeXgxXyAqIHJ5eDFfOyAvLyBzdW0gb2Ygc3F1YXJlXHJcbiAgICAgICAgLy8gaWYgKCFzdW1fb2Zfc3EpIHtcclxuICAgICAgICAvLyAgICAgdGhyb3cgRXJyb3IoJ3N0YXJ0IHBvaW50IGNhbiBub3QgYmUgc2FtZSBhcyBlbmQgcG9pbnQnKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgdmFyIGNvZSA9IE1hdGguc3FydChNYXRoLmFicygocnhyeSAqIHJ4cnkgLSBzdW1fb2Zfc3EpIC8gc3VtX29mX3NxKSk7XHJcbiAgICAgICAgaWYgKGZBID09IGZTKSB7XHJcbiAgICAgICAgICAgIGNvZSA9IC1jb2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGNi41LjJcclxuICAgICAgICB2YXIgY3hfID0gY29lICogcnh5MV8gLyByeTtcclxuICAgICAgICB2YXIgY3lfID0gLWNvZSAqIHJ5eDFfIC8gcng7XHJcblxyXG4gICAgICAgIC8vIEY2LjUuM1xyXG4gICAgICAgIGN4ID0gY19waGkgKiBjeF8gLSBzX3BoaSAqIGN5XyArIGhzX3g7XHJcbiAgICAgICAgY3kgPSBzX3BoaSAqIGN4XyArIGNfcGhpICogY3lfICsgaHNfeTtcclxuXHJcbiAgICAgICAgdmFyIHhjcjEgPSAoeDFfIC0gY3hfKSAvIHJ4O1xyXG4gICAgICAgIHZhciB4Y3IyID0gKHgxXyArIGN4XykgLyByeDtcclxuICAgICAgICB2YXIgeWNyMSA9ICh5MV8gLSBjeV8pIC8gcnk7XHJcbiAgICAgICAgdmFyIHljcjIgPSAoeTFfICsgY3lfKSAvIHJ5O1xyXG5cclxuICAgICAgICAvLyBGNi41LjVcclxuICAgICAgICBzdGFydEFuZ2xlID0gQ2FuaXNVdGlsLnJhZGlhbigxLjAsIDAuMCwgeGNyMSwgeWNyMSk7XHJcblxyXG4gICAgICAgIC8vIEY2LjUuNlxyXG4gICAgICAgIGRlbHRhQW5nbGUgPSBDYW5pc1V0aWwucmFkaWFuKHhjcjEsIHljcjEsIC14Y3IyLCAteWNyMik7XHJcbiAgICAgICAgd2hpbGUgKGRlbHRhQW5nbGUgPiBQSXgyKSB7XHJcbiAgICAgICAgICAgIGRlbHRhQW5nbGUgLT0gUEl4MjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGRlbHRhQW5nbGUgPCAwLjApIHtcclxuICAgICAgICAgICAgZGVsdGFBbmdsZSArPSBQSXgyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZlMgPT0gZmFsc2UgfHwgZlMgPT0gMCkge1xyXG4gICAgICAgICAgICBkZWx0YUFuZ2xlIC09IFBJeDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGRlbHRhQW5nbGU7XHJcbiAgICAgICAgd2hpbGUgKGVuZEFuZ2xlID4gUEl4Mikge1xyXG4gICAgICAgICAgICBlbmRBbmdsZSAtPSBQSXgyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoZW5kQW5nbGUgPCAwLjApIHtcclxuICAgICAgICAgICAgZW5kQW5nbGUgKz0gUEl4MjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvdXRwdXRPYmogPSB7XHJcbiAgICAgICAgICAgIC8qIGN4LCBjeSwgc3RhcnRBbmdsZSwgZGVsdGFBbmdsZSAqL1xyXG4gICAgICAgICAgICBjeCxcclxuICAgICAgICAgICAgY3ksXHJcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUsXHJcbiAgICAgICAgICAgIGRlbHRhQW5nbGUsXHJcbiAgICAgICAgICAgIGVuZEFuZ2xlLFxyXG4gICAgICAgICAgICBjbG9ja3dpc2U6IChmUyA9PSB0cnVlIHx8IGZTID09IDEpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0T2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb252ZXJ0Q29sb3Ioc3RyLCBmTW9kZSwgdE1vZGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHJldHVybiBzdHJcclxuICAgICAgICBpZiAoc3RyID09PSAnbm9uZScpIHJldHVybiBudWxsXHJcbiAgICAgICAgc3RyID0gc3RyLnRyaW0oKVxyXG4gICAgICAgIGxldCBtciA9IG51bGxcclxuICAgICAgICBpZiAodE1vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0TW9kZSA9IGZNb2RlXHJcbiAgICAgICAgICAgIGlmIChzdHIuc3RhcnRzV2l0aCgnIycpKSB7XHJcbiAgICAgICAgICAgICAgICBmTW9kZSA9ICdoZXgnXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyLnN0YXJ0c1dpdGgoJ3JnYicpKSB7XHJcbiAgICAgICAgICAgICAgICBmTW9kZSA9ICdyZ2InXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXNzdW1lIHVzZXIgaW5wdXQgaXMgdmFsaWRcclxuICAgICAgICBzd2l0Y2ggKGZNb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JnYic6XHJcbiAgICAgICAgICAgICAgICBtciA9IHN0ci5zcGxpdCgnKCcpWzFdLnNwbGl0KCcsJykubWFwKHggPT4gcGFyc2VGbG9hdCh4KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ2hleCc6XHJcbiAgICAgICAgICAgICAgICBtciA9IHN0ci5zbGljZSgxKS5tYXRjaCgvLnsxLDJ9L2cpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSlcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJcclxuICAgICAgICB9XHJcbiAgICAgICAgbXIgPSBtci5zbGljZSgwLCAzKVxyXG4gICAgICAgIHN3aXRjaCAodE1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaGV4JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnIycgKyBtci5tYXAoeCA9PiB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKVxyXG4gICAgICAgICAgICBjYXNlICdyZ2InOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGByZ2IoJHttci5qb2luKCcsJyl9KWBcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBvbGFyVG9DYXJ0ZXNpYW4oY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBhbmdsZUluUmFkaWFucykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IE1hdGgucm91bmQoKGNlbnRlclggKyAocmFkaXVzICogTWF0aC5jb3MoYW5nbGVJblJhZGlhbnMpKSkgKiAxMDApIC8gMTAwLFxyXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKChjZW50ZXJZICsgKHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlSW5SYWRpYW5zKSkpICogMTAwKSAvIDEwMFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBhcmMoeCwgeSwgaW5uZXJSYWRpdXMsIG91dHRlclJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICAgICAgICBzdGFydEFuZ2xlID0gc3RhcnRBbmdsZSA8IDAgPyBzdGFydEFuZ2xlICsgMiAqIE1hdGguUEkgOiBzdGFydEFuZ2xlO1xyXG4gICAgICAgIGVuZEFuZ2xlID0gZW5kQW5nbGUgPCAwIHx8IHN0YXJ0QW5nbGUgPiBlbmRBbmdsZSA/IGVuZEFuZ2xlICsgMiAqIE1hdGguUEkgOiBlbmRBbmdsZTtcclxuXHJcbiAgICAgICAgLy90byBnZW5lcmF0ZSBjb3ZlciwgbWFrZSB0aGUgY292ZXIgYSBsaXR0bGUgYmlnZ2VyXHJcbiAgICAgICAgaW5uZXJSYWRpdXMgPSBpbm5lclJhZGl1cyA9PT0gMCA/IDAgOiBpbm5lclJhZGl1cyAtIDE7XHJcbiAgICAgICAgb3V0dGVyUmFkaXVzICs9IDE7XHJcblxyXG4gICAgICAgIGxldCBsYXJnZUFyY0ZsYWcgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSA/IDAgOiAxO1xyXG5cclxuICAgICAgICBsZXQgc3RhcnQxID0gQ2FuaXNVdGlsLnBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgb3V0dGVyUmFkaXVzLCBlbmRBbmdsZSk7XHJcbiAgICAgICAgbGV0IGVuZDEgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBvdXR0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUpO1xyXG4gICAgICAgIGxldCBzdGFydDIgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUpO1xyXG4gICAgICAgIGxldCBlbmQyID0gQ2FuaXNVdGlsLnBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgaW5uZXJSYWRpdXMsIHN0YXJ0QW5nbGUpO1xyXG5cclxuICAgICAgICBsZXQgaXNSaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHN0YXJ0MS54ID09PSBlbmQxLnggJiYgc3RhcnQxLnkgPT09IGVuZDEueSkgey8vdGhpcyBpcyBhIHJpbmdcclxuICAgICAgICAgICAgZW5kMS55IC09IDE7XHJcbiAgICAgICAgICAgIGVuZDIueSAtPSAxO1xyXG4gICAgICAgICAgICBpc1JpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGQ7XHJcbiAgICAgICAgaWYgKCFpc1JpbmcpIHtcclxuICAgICAgICAgICAgZCA9IFtcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgc3RhcnQxLngsIHN0YXJ0MS55LFxyXG4gICAgICAgICAgICAgICAgXCJBXCIgKyBvdXR0ZXJSYWRpdXMsIG91dHRlclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAwLCBlbmQxLngsIGVuZDEueSxcclxuICAgICAgICAgICAgICAgIFwiTFwiICsgZW5kMi54LCBlbmQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAxLCBzdGFydDIueCwgc3RhcnQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkxcIiArIHN0YXJ0MS54LCBzdGFydDEueSArIFwiWlwiXHJcbiAgICAgICAgICAgIF0uam9pbihcIixcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZCA9IFtcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgc3RhcnQxLngsIHN0YXJ0MS55LFxyXG4gICAgICAgICAgICAgICAgXCJBXCIgKyBvdXR0ZXJSYWRpdXMsIG91dHRlclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAxLCBlbmQxLngsIGVuZDEueSxcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgZW5kMi54LCBlbmQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAwLCBzdGFydDIueCwgc3RhcnQyLnkgKyBcIlpcIlxyXG4gICAgICAgICAgICBdLmpvaW4oXCIsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogdHVybiBhIGRvbSBub2RlIHRvIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtET019IGRvbU5vZGUgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkb21Ob2RlVG9TdHJpbmcoZG9tTm9kZSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGRvbU5vZGUpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHR1cm4gYSBzdHJpbmcgdG8gZG9tIG5vZGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzdHJUb0RvbU5vZGUoc3RyKSB7XHJcbiAgICAgICAgbGV0IHRtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRtcERpdi5pbm5lckhUTUwgPSBzdHIudHJpbSgpO1xyXG4gICAgICAgIGxldCBkb20gPSB0bXBEaXYuZmlyc3RDaGlsZDtcclxuICAgICAgICByZXR1cm4gZG9tO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc1NoYXBlKHQsIHR4LCB0eSkge1xyXG4gICAgICAgIGlmICh0LnRhZ05hbWUgIT09ICdwYXRoJykge1xyXG4gICAgICAgICAgICBsZXQgaGFzUG9zaSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCB0LmdldEF0dHJpYnV0ZSgneScpKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNQb3NpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd4JywgdC5nZXRBdHRyaWJ1dGUoJ3gnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3gnKSkgKyB0eCA6IHR4KTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd5JywgdC5nZXRBdHRyaWJ1dGUoJ3knKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3knKSkgKyB0eSA6IHR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ3gxJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3kxJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3gyJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3kyJykpIHtcclxuICAgICAgICAgICAgICAgIGhhc1Bvc2kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gxJywgdC5nZXRBdHRyaWJ1dGUoJ3gxJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd4MScpKSArIHR4IDogdHgpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gyJywgdC5nZXRBdHRyaWJ1dGUoJ3gyJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd4MicpKSArIHR4IDogdHgpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3kxJywgdC5nZXRBdHRyaWJ1dGUoJ3kxJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd5MScpKSArIHR5IDogdHkpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3kyJywgdC5nZXRBdHRyaWJ1dGUoJ3kyJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd5MicpKSArIHR5IDogdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgnY3gnKSB8fCB0LmdldEF0dHJpYnV0ZSgnY3knKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzUG9zaSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3gnLCB0LmdldEF0dHJpYnV0ZSgnY3gnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ2N4JykpICsgdHggOiB0eCk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3knLCB0LmdldEF0dHJpYnV0ZSgnY3knKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ2N5JykpICsgdHkgOiB0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFoYXNQb3NpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC50YWdOYW1lID09PSAnY2lyY2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdjeCcsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3knLCB0eSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd4JywgdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd5JywgdHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHQuZ2V0QXR0cmlidXRlKCdkJykpIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRDbWQgPSBDYW5pc1V0aWwuc2V0UGF0aERWYWx1ZSh0LmdldEF0dHJpYnV0ZSgnZCcpLCBmYWxzZSwgdHgsIHR5KTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdkJywgcmVzdWx0Q21kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc3BsaXRQYXRoKGQpIHtcclxuICAgICAgICBsZXQgdG1wUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG4gICAgICAgIHRtcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCBkKTtcclxuICAgICAgICBsZXQgdG1wUGF0aExlbiA9IHRtcFBhdGguZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICBsZXQgc3RlcE51bSA9IDMwMCwgcGF0aFN0ZXBMZW4gPSB0bXBQYXRoTGVuIC8gc3RlcE51bTtcclxuICAgICAgICBsZXQgZGlzY3JpdFBhdGggPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBOdW07IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wUG50ID0gdG1wUGF0aC5nZXRQb2ludEF0TGVuZ3RoKHBhdGhTdGVwTGVuICogaSk7XHJcbiAgICAgICAgICAgIGkgPT09IDAgPyBkaXNjcml0UGF0aCArPSAnTScgKyB0bXBQbnQueCArICcsJyArIHRtcFBudC55IDogZGlzY3JpdFBhdGggKz0gJ0wnICsgdG1wUG50LnggKyAnLCcgKyB0bXBQbnQueVxyXG4gICAgICAgIH1cclxuICAgICAgICBkaXNjcml0UGF0aCArPSAnWic7XHJcbiAgICAgICAgcmV0dXJuIGRpc2NyaXRQYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQYXRoT2Zmc2V0KGQpIHtcclxuICAgICAgICBjb25zdCBwYXRoRGF0YSA9IGRcclxuICAgICAgICBjb25zdCBwYXRoRGF0YVNlcmllcyA9IHBhcnNlU1ZHKHBhdGhEYXRhKVxyXG4gICAgICAgIGNvbnN0IHBhdGhNYWtlciA9IG5ldyBQYXRoTWFrZXIoKVxyXG4gICAgICAgIGxldCBwYXRoRGF0YVdpdGhUeXBlO1xyXG4gICAgICAgIHBhdGhEYXRhU2VyaWVzLmZvckVhY2gocGF0aERhdGFJdGVtID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChwYXRoRGF0YUl0ZW0uY29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5tb3ZlVG8ocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIubGluZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmhvcml6b250YWxUbyhwYXRoRGF0YVdpdGhUeXBlLngpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuaG9yaXpvbnRhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdWJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnZlcnRpY2FsVG8ocGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICd2JzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnZlcnRpY2FsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuY3ViaWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnF1YWRyYXRpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIucXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmFyY1RvKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmFyY1RvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAneic6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihwYXRoRGF0YUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgdGhpcyBwYXRoIGNvbW1hbmQuJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIFtwYXRoTWFrZXIub2Zmc2V0WCwgcGF0aE1ha2VyLm9mZnNldFldO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc0RUb0xvdHRpZVNwZWMoZCkge1xyXG4gICAgICAgIGxldCBwb3NpT2Zmc2V0ID0gdGhpcy5nZXRQYXRoT2Zmc2V0KGQpO1xyXG4gICAgICAgIGxldCBwbSA9IG5ldyBQYXRoTWFrZXIoZCk7XHJcbiAgICAgICAgcG0udW5pZm9ybSgpO1xyXG4gICAgICAgIHJldHVybiBbcG9zaU9mZnNldCwgcG1dO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXRQYXRoRFZhbHVlKGQsIHJlc2V0LCB0eCA9IDAsIHR5ID0gMCwgZGlmZkNtZHMgPSBuZXcgTWFwKCkpIHtcclxuICAgICAgICBkID0gZC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGxldCBjbWRSZWdFeHAgPSBuZXcgUmVnRXhwKC9bbU1sTGhIdlZjQ3NTcVF0VGFBelpdW15tTWxMaEh2VmNDc1NxUXRUYUF6Wl0qL2cpO1xyXG4gICAgICAgIGxldCByZXN1bHRDbWQgPSAnJztcclxuICAgICAgICBsZXQgY21kcyA9IGQubWF0Y2goY21kUmVnRXhwKTtcclxuICAgICAgICBpZiAoY21kcykge1xyXG4gICAgICAgICAgICAvL2dldCB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG1vdmUgY21kIGlmIHRoZXJlIGlzIG9uZVxyXG4gICAgICAgICAgICBsZXQgZmlyc3RDbWROYW1lID0gY21kc1swXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgIGxldCByZXNldFggPSAnMCcsIHJlc2V0WSA9ICcwJztcclxuICAgICAgICAgICAgaWYgKGZpcnN0Q21kTmFtZSA9PT0gJ20nIHx8IGZpcnN0Q21kTmFtZSA9PT0gJ00nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RDbWRWYWx1ZXMgPSBjbWRzWzBdLnN1YnN0cmluZygxKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRYID0gZmlyc3RDbWRWYWx1ZXNbMF07XHJcbiAgICAgICAgICAgICAgICByZXNldFkgPSBmaXJzdENtZFZhbHVlc1sxXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY21kTmFtZSA9IGNtZHNbaV0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNtZFZhbHVlID0gY21kc1tpXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gY21kTmFtZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY21kTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGNtZFZhbHVlLCByZXNldCwgcmVzZXRYLCB0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGNtZFZhbHVlLCByZXNldCwgJzAnLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCByZXNldFksIHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCAnMCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bXMgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgbnVtcy5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSAlIDIgPT09IDApIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIG51bXNbbmldLCByZXNldCwgcmVzZXRYLCB0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgbnVtc1tuaV0sIHJlc2V0LCByZXNldFksIHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSAhPT0gbnVtcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdxJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bXMyID0gY21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbmkgPSAwOyBuaSA8IG51bXMyLmxlbmd0aDsgbmkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBudW1zMltuaV0sIHJlc2V0LCAnMCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5pICE9PSBudW1zMi5sZW5ndGggLSAxICYmIG51bXMyW25pXSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW51bXMgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgYW51bXMubGVuZ3RoOyBuaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmkgPT09IGFudW1zLmxlbmd0aCAtIDIpIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGFudW1zW25pXSwgcmVzZXQsIHBhcnNlRmxvYXQocmVzZXRYKSArIDEsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuaSA9PT0gYW51bXMubGVuZ3RoIC0gMSkgey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXNbbmldLCByZXNldCwgcGFyc2VGbG9hdChyZXNldFkpICsgMSwgdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gYW51bXNbbmldICsgJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW51bXMyID0gY21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbmkgPSAwOyBuaSA8IGFudW1zMi5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSA9PT0gYW51bXMyLmxlbmd0aCAtIDIpIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGFudW1zMltuaV0sIHJlc2V0LCAnMScsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5pID09PSBhbnVtczIubGVuZ3RoIC0gMSkgey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXMyW25pXSwgcmVzZXQsICcxJywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSBhbnVtczJbbmldICsgJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZC5jaGFyQXQoZC5sZW5ndGggLSAxKSA9PT0gJ3onIHx8IGQuY2hhckF0KGQubGVuZ3RoIC0gMSkgPT09ICdaJykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9ICdaJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Q21kO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBjdXJyZW50Q21kSWR4LCBjbWROYW1lLCBjbWRWYWx1ZSwgcmVzZXQsIHJlc2V0VmFsLCB0VmFsKSB7XHJcbiAgICAgICAgY21kTmFtZSA9IGNtZE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWZmQ21kcy5nZXQoY21kTmFtZSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZkNtZElkeHMgPSBkaWZmQ21kcy5nZXQoY21kTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkaWZmQ21kSWR4cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWZmQ21kSWR4c1tqXS5jbWRJZHggPT09IGN1cnJlbnRDbWRJZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IHJlc2V0VmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGNtZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGNtZFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNtZFZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAocGFyc2VGbG9hdChjbWRWYWx1ZSkgKyB0VmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Q21kO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZG9pbmcgdHJhbnNpdGlvbiB3aXRoIHBhdGhcclxuICAgICAqIEBwYXJhbSB7Kn0gc3RhcnREIFxyXG4gICAgICogQHBhcmFtIHsqfSBlbmREIFxyXG4gICAgICogQHBhcmFtIHsqfSByYXRpbyBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbFRyYW5zRChzdGFydEQsIGVuZEQsIHJhdGlvLCBzdGFydERpc0QsIGVuZERpc0QpIHtcclxuICAgICAgICBzdGFydEQgPSBzdGFydEQucmVwbGFjZSgvKD88PVxcZClcXHMoPz1bbU1sTGhIdlZjQ3NTcVF0VGFBelpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttTWxMaEh2VmNDc1NxUXRUYUFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICBlbmREID0gZW5kRC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGxldCByZXN1bHRDbWQgPSAnJztcclxuICAgICAgICBpZiAocmF0aW8gPT09IDApIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kID0gc3RhcnREO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmF0aW8gPT09IDEpIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kID0gZW5kRDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3RhcnREaXNELmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gKGkgPT09IDAgPyAnTScgOiAnTCcpICsgKChlbmREaXNEW2ldWzBdIC0gc3RhcnREaXNEW2ldWzBdKSAqIHJhdGlvICsgc3RhcnREaXNEW2ldWzBdKSArICcsJyArICgoZW5kRGlzRFtpXVsxXSAtIHN0YXJ0RGlzRFtpXVsxXSkgKiByYXRpbyArIHN0YXJ0RGlzRFtpXVsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGFydEQuY2hhckF0KHN0YXJ0RC5sZW5ndGggLSAxKSA9PT0gJ3onIHx8IHN0YXJ0RC5jaGFyQXQoc3RhcnRELmxlbmd0aCAtIDEpID09PSAnWicpIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kICs9ICdaJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdENtZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogc3RhcnRBbmdsZSBzaG91bGQgc21hbGxlciB0aGFuIGVuZEFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbVN0YXJ0QW5nbGUgc3RhcnQgc3RhdGUgb2Ygc3RhcnQgYW5nbGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tRW5kQW5nbGUgc3RhcnQgc3RhdGUgb2YgZW5kIGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9TdGFydEFuZ2xlIGVuZCBzdGF0ZSBvZiBzdGFydCBhbmdsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvRW5kQW5nbGUgZW5kIHN0YXRlIG9mIGVuZCBhbmdsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGlvIDAtMSBmbG9hdCBudW1iZXJcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb248bnVtYmVyLG51bWJlcixudW1iZXI+fSBpbnRlcnBvbGF0ZUZuIGN1c3RvbWl6ZSBpbnRlcnBvbGF0ZSBmdW5jdGlvbiwgaW5wdXQgaXMgKHN0YXJ0LCBlbmQsIHJhdGlvKSwgZGVmYXVsdCBpcyBsaW5lYXJcclxuICAgICAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBbc3RhcnRBbmdsZSwgZW5kQW5nbGVdIG9mIGdpdmVuIHJhdGlvXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhcmNUcmFuc2l0aW9uKGZyb21TdGFydEFuZ2xlLCBmcm9tRW5kQW5nbGUsIHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSwgcmF0aW8sIGludGVycG9sYXRlRm4pIHtcclxuICAgICAgICBsZXQgdmFsaWRBbmdsZSA9IChzLCBlKSA9PiBlIDwgcyA/ICgoKSA9PiB7IHRocm93ICdzdGFydEFuZ2xlIHNob3VsZCBzbWFsbGVyIHRoYW4gZW5kQW5nbGUnIH0pKCkgOiBudWxsXHJcbiAgICAgICAgdmFsaWRBbmdsZShmcm9tU3RhcnRBbmdsZSwgZnJvbUVuZEFuZ2xlKVxyXG4gICAgICAgIHZhbGlkQW5nbGUodG9TdGFydEFuZ2xlLCB0b0VuZEFuZ2xlKVxyXG4gICAgICAgIGxldCBtaW5pbWFsQW5nbGUgPSAocywgZSkgPT4gZSAtIE1hdGguUEkgKiAyICogTWF0aC5mbG9vcigoZSAtIHMpIC8gTWF0aC5QSSAvIDIpXHJcbiAgICAgICAgLy8gdW5pZm9ybSBhbmdsZSBkb21haW4gd2l0aGluIDIqUElcclxuICAgICAgICBmcm9tRW5kQW5nbGUgPSBtaW5pbWFsQW5nbGUoZnJvbVN0YXJ0QW5nbGUsIGZyb21FbmRBbmdsZSlcclxuICAgICAgICB0b1N0YXJ0QW5nbGUgPSBtaW5pbWFsQW5nbGUoZnJvbVN0YXJ0QW5nbGUsIHRvU3RhcnRBbmdsZSlcclxuICAgICAgICB0b0VuZEFuZ2xlID0gbWluaW1hbEFuZ2xlKHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSlcclxuICAgICAgICAvLyBmaW5kIHRoZSBjbG9lc3QgZG9tYWluXHJcbiAgICAgICAgdG9TdGFydEFuZ2xlIC09IE1hdGguYWJzKHRvU3RhcnRBbmdsZSAtIGZyb21TdGFydEFuZ2xlKSArIE1hdGguYWJzKHRvRW5kQW5nbGUgLSBmcm9tRW5kQW5nbGUpIDwgMiAqIE1hdGguUEkgPyAwIDogTWF0aC5QSSAqIDJcclxuICAgICAgICB0b0VuZEFuZ2xlID0gbWluaW1hbEFuZ2xlKHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSlcclxuICAgICAgICBsZXQgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZUZuIHx8ICgocywgZSwgcikgPT4gciAqIChlIC0gcykgKyBzKVxyXG4gICAgICAgIHJldHVybiBbaW50ZXJwb2xhdGUoZnJvbVN0YXJ0QW5nbGUsIHRvU3RhcnRBbmdsZSwgcmF0aW8pLCBpbnRlcnBvbGF0ZShmcm9tRW5kQW5nbGUsIHRvRW5kQW5nbGUsIHJhdGlvKV1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmluZERpZmZDbWRzKG1hcmtTdGF0dXMpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIG1hcmtTdGF0dXMuZm9yRWFjaCgoc3RhdHVzQXJyLCBtYXJrSWQpID0+IHtcclxuICAgICAgICAgICAgbGV0IHRtcERSZWNvcmRlciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXR1c0Fyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0dXNBcnJbaV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRFJlY29yZGVyLnB1c2goIXN0YXR1c0FycltpXS5kID8gJ20wLDAnIDogc3RhdHVzQXJyW2ldLmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0bXBEUmVjb3JkZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgQ2FuaXNVdGlsLmNvbXBhcmVEKHRtcERSZWNvcmRlciwgcmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29tcGFyZUQoZEFyciwgcmVzdWx0KSB7XHJcbiAgICAgICAgbGV0IGNtZFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1ttbGh2Y3NxdGFdW15tbGh2Y3NxdGF6XSovZyk7XHJcbiAgICAgICAgbGV0IGZpcnN0RCA9IGRBcnJbMF07XHJcbiAgICAgICAgZmlyc3REID0gZmlyc3RELnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgZmlyc3REID0gZmlyc3RELnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21saHZjc3F0YXpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttbGh2Y3NxdGFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICBsZXQgZmlyc3REQ21kcyA9IGZpcnN0RC5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZEFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wRCA9IGRBcnJbaV07XHJcbiAgICAgICAgICAgIHRtcEQgPSB0bXBELnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIHRtcEQgPSB0bXBELnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21saHZjc3F0YXpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttbGh2Y3NxdGFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICAgICAgbGV0IHRtcERDbWRzID0gdG1wRC5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpcnN0RENtZHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG1wRENtZHNbal0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNtZE5hbWUgPSBmaXJzdERDbWRzW2pdLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5nZXQoY21kTmFtZSkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoY21kTmFtZSwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmNtZElkeCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmRpZmZBdHRySWR4cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdERDbWRWYWx1ZSA9IGZpcnN0RENtZHNbal0uc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdERDbWRWYWx1ZXMgPSBmaXJzdERDbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgZmlyc3REQ21kVmFsdWVzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kaWZmQXR0cklkeHMucHVzaChtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdldChjbWROYW1lKS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbWROYW1lID0gdG1wRENtZHNbal0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBEQ21kVmFsdWUgPSB0bXBEQ21kc1tqXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpcnN0RENtZFZhbHVlID0gZmlyc3REQ21kc1tqXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRtcERDbWRWYWx1ZSAhPT0gZmlyc3REQ21kVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQuZ2V0KGNtZE5hbWUpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChjbWROYW1lLCBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY21kSWR4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRpZmZBdHRySWR4cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRENtZFZhbHVlcyA9IHRtcERDbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3REQ21kVmFsdWVzID0gZmlyc3REQ21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCB0bXBEQ21kVmFsdWVzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihwYXJzZUZsb2F0KHRtcERDbWRWYWx1ZXNbbV0pICogMTAwMCkgIT09IE1hdGguZmxvb3IocGFyc2VGbG9hdChmaXJzdERDbWRWYWx1ZXNbbV0pICogMTAwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGlmZkF0dHJJZHhzLnB1c2gobSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIGhhdmUgYWxyZWFkeSBhZGRlZCB0aGlzIGNtZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IHJlc3VsdC5nZXQoY21kTmFtZSkubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZ2V0KGNtZE5hbWUpW21dLmNtZElkeCA9PT0gb2JqLmNtZElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5nZXQoY21kTmFtZSlbbV0uZGlmZkF0dHJJZHhzID0gWy4uLm5ldyBTZXQoWy4uLnJlc3VsdC5nZXQoY21kTmFtZSlbbV0uZGlmZkF0dHJJZHhzLCAuLi5vYmouZGlmZkF0dHJJZHhzXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdldChjbWROYW1lKS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRUcmFuc2Zvcm1BdHRycyhkb20pIHtcclxuICAgICAgICBsZXQgdHIgPSBkb20uZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcclxuICAgICAgICBpZiAodHIpIHtcclxuICAgICAgICAgICAgdHIgPSB0ci5yZXBsYWNlKC90cmFuc2xhdGV8c2NhbGV8cm90YXRlfFxccy9nLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0gPT09ICcgJyA/ICcnIDogJ0AnICsgbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgvKF5AKil8KEAqJCkvZywgJycpLnNwbGl0KCdAJyk7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZVN0ciA9ICcnLCB0cmFuc1N0ciA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJbaV0uaW5kZXhPZigndHJhbnNsYXRlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyW2ldLmluZGV4T2YoJ3NjYWxlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRyYW5zUG9zaVN0ciA9IFsnMCcsICcwJ10sIHNjYWxlTnVtU3RyID0gJzEnO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNTdHIgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc1Bvc2lTdHIgPSB0cmFuc1N0ci5yZXBsYWNlKC90cmFuc2xhdGVcXCh8IHxcXCkvZywgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNjYWxlU3RyICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVOdW1TdHIgPSBzY2FsZVN0ci5yZXBsYWNlKC9zY2FsZVxcKHwgfFxcKS9nLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgdHJhbnNOdW1zOiBbcGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMF0pLCBwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clsxXSldLCBzY2FsZU51bTogcGFyc2VGbG9hdChzY2FsZU51bVN0cikgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHJhbnNOdW1zOiBbMC4wLCAwLjBdLCBzY2FsZU51bTogMS4wIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjaGVjayBpZiB0aGUgaW5wdXQgcHJvcCBpcyBhIHZhbGlkIHByb3BlcnR5IG9mIHRoZSBpbnB1dCB0YWdcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFnTmFtZSBcclxuICAgICAqIEBwYXJhbSB7Kn0gcHJvcE5hbWUgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjaGVja1ZhbGlkUHJvcCh0YWdOYW1lLCBwcm9wTmFtZSkge1xyXG4gICAgICAgIHN3aXRjaCAodGFnTmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlICdjaXJjbGUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICdjeCcsICdjeScsICdyJywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnZWxsaXBzZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ2N4JywgJ2N5JywgJ3J4JywgJ3J5JywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdocmVmJywgJ3hsaW5rOmhyZWYnLCAncHJlc2VydmVBc3BlY3RSYXRpbyddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnbGluZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ3gxJywgJ3gyJywgJ3kxJywgJ3kyJywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAncGF0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ2QnLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdwb2x5Z29uJzpcclxuICAgICAgICAgICAgY2FzZSAncG9seWxpbmUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICdwb2ludHMnLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdyZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ29wYWNpdHknLCAneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdyeCcsICdyeScsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ2ZpbGwnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICd4JywgJ3knLCAnZHgnLCAnZHknLCAndGV4dENvbnRlbnQnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2sgaWYgYSBzdHJpbmcgY29udGFpbnMgaHRtbCB0YWdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNoZWNrSFRNTChzdHIpIHtcclxuICAgICAgICB2YXIgcmVnID0gLzxbXj5dKz4vZztcclxuICAgICAgICByZXR1cm4gcmVnLnRlc3Qoc3RyKTtcclxuICAgIH1cclxufVxyXG5cclxuQ2FuaXNVdGlsLmNvbG9yTmFtZXMgPSBuZXcgTWFwKFtbJ2FsaWNlYmx1ZScsICcjZjBmOGZmJ10sIFsnYW50aXF1ZXdoaXRlJywgJyNmYWViZDcnXSwgWydhcXVhJywgJyMwMGZmZmYnXSwgWydhcXVhbWFyaW5lJywgJyM3ZmZmZDQnXSwgWydhenVyZScsICcjZjBmZmZmJ10sIFsnYmVpZ2UnLCAnI2Y1ZjVkYyddLCBbJ2Jpc3F1ZScsICcjZmZlNGM0J10sIFsnYmxhY2snLCAnIzAwMDAwMCddLCBbJ2JsYW5jaGVkYWxtb25kJywgJyNmZmViY2QnXSwgWydibHVlJywgJyMwMDAwZmYnXSwgWydibHVldmlvbGV0JywgJyM4YTJiZTInXSwgWydicm93bicsICcjYTUyYTJhJ10sIFsnYnVybHl3b29kJywgJyNkZWI4ODcnXSwgWydjYWRldGJsdWUnLCAnIzVmOWVhMCddLCBbJ2NoYXJ0cmV1c2UnLCAnIzdmZmYwMCddLCBbJ2Nob2NvbGF0ZScsICcjZDI2OTFlJ10sIFsnY29yYWwnLCAnI2ZmN2Y1MCddLCBbJ2Nvcm5mbG93ZXJibHVlJywgJyM2NDk1ZWQnXSwgWydjb3Juc2lsaycsICcjZmZmOGRjJ10sIFsnY3JpbXNvbicsICcjZGMxNDNjJ10sIFsnY3lhbicsICcjMDBmZmZmJ10sIFsnZGFya2JsdWUnLCAnIzAwMDA4YiddLCBbJ2RhcmtjeWFuJywgJyMwMDhiOGInXSwgWydkYXJrZ29sZGVucm9kJywgJyNiODg2MGInXSwgWydkYXJrZ3JheScsICcjYTlhOWE5J10sIFsnZGFya2dyZXknLCAnI2E5YTlhOSddLCBbJ2RhcmtncmVlbicsICcjMDA2NDAwJ10sIFsnZGFya2toYWtpJywgJyNiZGI3NmInXSwgWydkYXJrbWFnZW50YScsICcjOGIwMDhiJ10sIFsnZGFya29saXZlZ3JlZW4nLCAnIzU1NmIyZiddLCBbJ2RhcmtvcmFuZ2UnLCAnI2ZmOGMwMCddLCBbJ2RhcmtvcmNoaWQnLCAnIzk5MzJjYyddLCBbJ2RhcmtyZWQnLCAnIzhiMDAwMCddLCBbJ2RhcmtzYWxtb24nLCAnI2U5OTY3YSddLCBbJ2RhcmtzZWFncmVlbicsICcjOGZiYzhmJ10sIFsnZGFya3NsYXRlYmx1ZScsICcjNDgzZDhiJ10sIFsnZGFya3NsYXRlZ3JheScsICcjMmY0ZjRmJ10sIFsnZGFya3NsYXRlZ3JleScsICcjMmY0ZjRmJ10sIFsnZGFya3R1cnF1b2lzZScsICcjMDBjZWQxJ10sIFsnZGFya3Zpb2xldCcsICcjOTQwMGQzJ10sIFsnZGVlcHBpbmsnLCAnI2ZmMTQ5MyddLCBbJ2RlZXBza3libHVlJywgJyMwMGJmZmYnXSwgWydkaW1ncmF5JywgJyM2OTY5NjknXSwgWydkaW1ncmV5JywgJyM2OTY5NjknXSwgWydkb2RnZXJibHVlJywgJyMxZTkwZmYnXSwgWydmaXJlYnJpY2snLCAnI2IyMjIyMiddLCBbJ2Zsb3JhbHdoaXRlJywgJyNmZmZhZjAnXSwgWydmb3Jlc3RncmVlbicsICcjMjI4YjIyJ10sIFsnZnVjaHNpYScsICcjZmYwMGZmJ10sIFsnZ2FpbnNib3JvJywgJyNkY2RjZGMnXSwgWydnaG9zdHdoaXRlJywgJyNmOGY4ZmYnXSwgWydnb2xkJywgJyNmZmQ3MDAnXSwgWydnb2xkZW5yb2QnLCAnI2RhYTUyMCddLCBbJ2dyYXknLCAnIzgwODA4MCddLCBbJ2dyZXknLCAnIzgwODA4MCddLCBbJ2dyZWVuJywgJyMwMDgwMDAnXSwgWydncmVlbnllbGxvdycsICcjYWRmZjJmJ10sIFsnaG9uZXlkZXcnLCAnI2YwZmZmMCddLCBbJ2hvdHBpbmsnLCAnI2ZmNjliNCddLCBbJ2luZGlhbnJlZCAnLCAnI2NkNWM1YyddLCBbJ2luZGlnbyAgJywgJyM0YjAwODInXSwgWydpdm9yeScsICcjZmZmZmYwJ10sIFsna2hha2knLCAnI2YwZTY4YyddLCBbJ2xhdmVuZGVyJywgJyNlNmU2ZmEnXSwgWydsYXZlbmRlcmJsdXNoJywgJyNmZmYwZjUnXSwgWydsYXduZ3JlZW4nLCAnIzdjZmMwMCddLCBbJ2xlbW9uY2hpZmZvbicsICcjZmZmYWNkJ10sIFsnbGlnaHRibHVlJywgJyNhZGQ4ZTYnXSwgWydsaWdodGNvcmFsJywgJyNmMDgwODAnXSwgWydsaWdodGN5YW4nLCAnI2UwZmZmZiddLCBbJ2xpZ2h0Z29sZGVucm9keWVsbG93JywgJyNmYWZhZDInXSwgWydsaWdodGdyYXknLCAnI2QzZDNkMyddLCBbJ2xpZ2h0Z3JleScsICcjZDNkM2QzJ10sIFsnbGlnaHRncmVlbicsICcjOTBlZTkwJ10sIFsnbGlnaHRwaW5rJywgJyNmZmI2YzEnXSwgWydsaWdodHNhbG1vbicsICcjZmZhMDdhJ10sIFsnbGlnaHRzZWFncmVlbicsICcjMjBiMmFhJ10sIFsnbGlnaHRza3libHVlJywgJyM4N2NlZmEnXSwgWydsaWdodHNsYXRlZ3JheScsICcjNzc4ODk5J10sIFsnbGlnaHRzbGF0ZWdyZXknLCAnIzc3ODg5OSddLCBbJ2xpZ2h0c3RlZWxibHVlJywgJyNiMGM0ZGUnXSwgWydsaWdodHllbGxvdycsICcjZmZmZmUwJ10sIFsnbGltZScsICcjMDBmZjAwJ10sIFsnbGltZWdyZWVuJywgJyMzMmNkMzInXSwgWydsaW5lbicsICcjZmFmMGU2J10sIFsnbWFnZW50YScsICcjZmYwMGZmJ10sIFsnbWFyb29uJywgJyM4MDAwMDAnXSwgWydtZWRpdW1hcXVhbWFyaW5lJywgJyM2NmNkYWEnXSwgWydtZWRpdW1ibHVlJywgJyMwMDAwY2QnXSwgWydtZWRpdW1vcmNoaWQnLCAnI2JhNTVkMyddLCBbJ21lZGl1bXB1cnBsZScsICcjOTM3MGRiJ10sIFsnbWVkaXVtc2VhZ3JlZW4nLCAnIzNjYjM3MSddLCBbJ21lZGl1bXNsYXRlYmx1ZScsICcjN2I2OGVlJ10sIFsnbWVkaXVtc3ByaW5nZ3JlZW4nLCAnIzAwZmE5YSddLCBbJ21lZGl1bXR1cnF1b2lzZScsICcjNDhkMWNjJ10sIFsnbWVkaXVtdmlvbGV0cmVkJywgJyNjNzE1ODUnXSwgWydtaWRuaWdodGJsdWUnLCAnIzE5MTk3MCddLCBbJ21pbnRjcmVhbScsICcjZjVmZmZhJ10sIFsnbWlzdHlyb3NlJywgJyNmZmU0ZTEnXSwgWydtb2NjYXNpbicsICcjZmZlNGI1J10sIFsnbmF2YWpvd2hpdGUnLCAnI2ZmZGVhZCddLCBbJ25hdnknLCAnIzAwMDA4MCddLCBbJ29sZGxhY2UnLCAnI2ZkZjVlNiddLCBbJ29saXZlJywgJyM4MDgwMDAnXSwgWydvbGl2ZWRyYWInLCAnIzZiOGUyMyddLCBbJ29yYW5nZScsICcjZmZhNTAwJ10sIFsnb3JhbmdlcmVkJywgJyNmZjQ1MDAnXSwgWydvcmNoaWQnLCAnI2RhNzBkNiddLCBbJ3BhbGVnb2xkZW5yb2QnLCAnI2VlZThhYSddLCBbJ3BhbGVncmVlbicsICcjOThmYjk4J10sIFsncGFsZXR1cnF1b2lzZScsICcjYWZlZWVlJ10sIFsncGFsZXZpb2xldHJlZCcsICcjZGI3MDkzJ10sIFsncGFwYXlhd2hpcCcsICcjZmZlZmQ1J10sIFsncGVhY2hwdWZmJywgJyNmZmRhYjknXSwgWydwZXJ1JywgJyNjZDg1M2YnXSwgWydwaW5rJywgJyNmZmMwY2InXSwgWydwbHVtJywgJyNkZGEwZGQnXSwgWydwb3dkZXJibHVlJywgJyNiMGUwZTYnXSwgWydwdXJwbGUnLCAnIzgwMDA4MCddLCBbJ3JlYmVjY2FwdXJwbGUnLCAnIzY2MzM5OSddLCBbJ3JlZCcsICcjZmYwMDAwJ10sIFsncm9zeWJyb3duJywgJyNiYzhmOGYnXSwgWydyb3lhbGJsdWUnLCAnIzQxNjllMSddLCBbJ3NhZGRsZWJyb3duJywgJyM4YjQ1MTMnXSwgWydzYWxtb24nLCAnI2ZhODA3MiddLCBbJ3NhbmR5YnJvd24nLCAnI2Y0YTQ2MCddLCBbJ3NlYWdyZWVuJywgJyMyZThiNTcnXSwgWydzZWFzaGVsbCcsICcjZmZmNWVlJ10sIFsnc2llbm5hJywgJyNhMDUyMmQnXSwgWydzaWx2ZXInLCAnI2MwYzBjMCddLCBbJ3NreWJsdWUnLCAnIzg3Y2VlYiddLCBbJ3NsYXRlYmx1ZScsICcjNmE1YWNkJ10sIFsnc2xhdGVncmF5JywgJyM3MDgwOTAnXSwgWydzbGF0ZWdyZXknLCAnIzcwODA5MCddLCBbJ3Nub3cnLCAnI2ZmZmFmYSddLCBbJ3NwcmluZ2dyZWVuJywgJyMwMGZmN2YnXSwgWydzdGVlbGJsdWUnLCAnIzQ2ODJiNCddLCBbJ3RhbicsICcjZDJiNDhjJ10sIFsndGVhbCcsICcjMDA4MDgwJ10sIFsndGhpc3RsZScsICcjZDhiZmQ4J10sIFsndG9tYXRvJywgJyNmZjYzNDcnXSwgWyd0dXJxdW9pc2UnLCAnIzQwZTBkMCddLCBbJ3Zpb2xldCcsICcjZWU4MmVlJ10sIFsnd2hlYXQnLCAnI2Y1ZGViMyddLCBbJ3doaXRlJywgJyNmZmZmZmYnXSwgWyd3aGl0ZXNtb2tlJywgJyNmNWY1ZjUnXSwgWyd5ZWxsb3cnLCAnI2ZmZmYwMCddLCBbJ3llbGxvd2dyZWVuJywgJyM5YWNkMzInXV0pXHJcblxyXG5leHBvcnQgY2xhc3MgVmlld3BvcnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFydFdpZHRoID0gMDtcclxuICAgICAgICB0aGlzLmNoYXJ0SGVpZ2h0ID0gMDtcclxuICAgIH1cclxuICAgIHNldFZpZXdwb3J0KHcsIGgpIHtcclxuICAgICAgICB0aGlzLmNoYXJ0V2lkdGggPSB3O1xyXG4gICAgICAgIHRoaXMuY2hhcnRIZWlnaHQgPSBoO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXNzZXRUZW1wbGF0ZSB7XHJcbiAgICBjb25zdHJ1Y29yKHRhZ05hbWUsIHZpc3VhbFByb3BzLCBhbmltYXRlUHJvcHMsIGJvdW5kaW5nQm94LCBqc01vdmluTGF5ZXJJZHgpIHtcclxuICAgICAgICAvL3VzZSB0byBjb21wYXJlXHJcbiAgICAgICAgdGhpcy50YWdOYW1lID0gdGFnTmFtZTtcclxuICAgICAgICB0aGlzLnZpc3VhbFByb3BzID0gdmlzdWFsUHJvcHM7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlUHJvcHMgPSBhbmltYXRlUHJvcHM7XHJcbiAgICAgICAgLy91c2UgdG8gY2FsY3VsYXRlIG9mZnNldHMgYW5kIHJlZmVyZW5jZVxyXG4gICAgICAgIHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveDtcclxuICAgICAgICB0aGlzLmpzTW92aW5MYXllcklkeCA9IGpzTW92aW5MYXllcklkeDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbXBhcmUgdGhlIG5ldyBhc3NldCB0ZW1wbGF0ZSB3aXRoIHRoZSBleGlzdGluZyB0ZW1wYWx0ZSBcclxuICAgICAqIEBwYXJhbSB7Kn0gY2FuZGlkYXRlQXQgOiBjYW5kaWRhdGUgYXNzZXQgdGVtcGxhdGVcclxuICAgICAqIEBwYXJhbSB7Kn0gYXQgOiBhc3NldCB0ZW1wbGF0ZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29tcGFyZVRlbXBsYXRlKGNhbmRpZGF0ZUF0LCBhdCkge1xyXG4gICAgICAgIGlmIChjYW5kaWRhdGVBdC50YWdOYW1lICE9PSBhdC50YWdOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBhcmVWaXN1YWxQcm9wcyhjYW5kaWRhdGVBdC52aXN1YWxQcm9wcywgYXQudmlzdWFsUHJvcHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbXBhcmVWaXN1YWxQcm9wcyhwMSwgcDIpIHtcclxuICAgICAgICBjb25zdCBzYWZlUHJvcHMgPSBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnLCAncicsICdvcGFjaXR5JywgJ2QnXVxyXG4gICAgICAgIGNvbnN0IGFsbEtleXMgPSBbLi4uT2JqZWN0LmtleXMocDEpLCAuLi5PYmplY3Qua2V5cyhwMildO1xyXG4gICAgICAgIGNvbnN0IGRpZmZlcmVudEtleXMgPSBhbGxLZXlzLmZpbHRlcigoaykgPT4ge1xyXG4gICAgICAgICAgICB0eXBlb2YgcDFba10gPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBwMltrXSA9PT0gJ3VuZGVmaW5lZCcgfHwgcDFba10gIT09IHAyW2tdO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChkaWZmZXJlbnRLZXlzLmluY2x1ZGVzKCdkJykpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVtb3ZlTnVtUmVnRXhwID0gbmV3IFJlZ0V4cCgvWzAtOVxcLixcXHNdL2cpO1xyXG4gICAgICAgICAgICByZXR1cm4gcDFbJ2QnXS5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpID09PSBwMlsnZCddLnJlcGxhY2UocmVtb3ZlTnVtUmVnRXhwLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGlmZmVyZW50S2V5cy5ldmVyeSgoaykgPT4gc2FmZVByb3BzLmluZGV4T2YoaykgPj0gMCk7XHJcbiAgICB9XHJcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMYXllckZhY3RvcnlcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX2xheWVyLkxheWVyRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFYXNpbmdGYWN0b3J5XCIsIHtcclxuICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgcmV0dXJuIF9lYXNpbmcuRWFzaW5nRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXRoTWFrZXJcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX3BhdGguUGF0aE1ha2VyO1xyXG4gIH1cclxufSk7XHJcbmV4cG9ydHMuTWFza1R5cGUgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcclxuXHJcbnZhciBfbGF5ZXIgPSByZXF1aXJlKFwiLi9sYXllclwiKTtcclxuXHJcbnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInV1aWQvdjRcIikpO1xyXG5cclxudmFyIF9lYXNpbmcgPSByZXF1aXJlKFwiLi9lYXNpbmdcIik7XHJcblxyXG52YXIgX3BhdGggPSByZXF1aXJlKFwiLi9wYXRoXCIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XHJcblxyXG52YXIgSlNNb3ZpbiA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB2aWV3cG9ydCAocHgpXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbigpIHtcclxuICAgIHZhciBmcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDMwO1xyXG4gICAgdmFyIHdpZHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA4MDA7XHJcbiAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA2MDA7XHJcblxyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW4pO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RcIiwgdm9pZCAwKTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSB7XHJcbiAgICAgIGZyOiBmcHMsXHJcbiAgICAgIHc6IHdpZHRoLFxyXG4gICAgICBoOiBoZWlnaHQsXHJcbiAgICAgIGRkZDogMCxcclxuICAgICAgbGF5ZXJzOiBbXSxcclxuICAgICAgYXNzZXRzOiBbXSxcclxuICAgICAgZm9udHM6IHtcclxuICAgICAgICBsaXN0OiBbXVxyXG4gICAgICB9LFxyXG4gICAgICBpcDogMCxcclxuICAgICAgb3A6IDBcclxuICAgIH07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICovXHJcblxyXG5cclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbiwgW3tcclxuICAgIGtleTogXCJzZXRGcmFtZVJhdGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGcmFtZVJhdGUoZnBzKSB7XHJcbiAgICAgIHRoaXMucm9vdC5mciA9IGZwcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgaGVpZ2h0IG9mIHZpZXdwb3J0IChweClcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2V0Vmlld3BvcnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaWV3cG9ydCh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMucm9vdC53ID0gd2lkdGg7XHJcbiAgICAgIHRoaXMucm9vdC5oID0gaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgYSBzaW1wbGUgZ3JhcGhpY2FsIGxheWVyXHJcbiAgICAgKiBAcGFyYW0gZG9tTGF5ZXJPckFzc2V0SWQgYSBTVkcgZWxlbWVudCBET00gb3IgSlNNb3ZpbkxheWVyIG9yIGFzc2V0IElEIG5lZWRzIHRvIGJlIGluc2VydGVkXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZExheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGF5ZXIoZG9tTGF5ZXJPckFzc2V0SWQpIHtcclxuICAgICAgdmFyIGxheWVyO1xyXG5cclxuICAgICAgaWYgKGRvbUxheWVyT3JBc3NldElkIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LmhpZXJhcmNoeShkb21MYXllck9yQXNzZXRJZCwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9tTGF5ZXJPckFzc2V0SWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LnJlZihkb21MYXllck9yQXNzZXRJZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXIgPSBkb21MYXllck9yQXNzZXRJZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UoMCwgMCwgbGF5ZXIucm9vdCk7XHJcbiAgICAgIHJldHVybiBsYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG1hc2tPckRvbSBhIFNWRyBlbGVtZW50IERPTSBvciBKU01vdmluTGF5ZXIgdG8gYmUgdGhlIG1hc2tcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gYmUgdGhlIG1hc2tlZCBsYXllclxyXG4gICAgICogQHBhcmFtIG1hc2tUeXBlIHdoaWNoIHR5cGUgb2YgbWFzayB0byB1c2UsIHVzZSBgTWFza1R5cGUuKmAgdG8gc3BlY2lmeVxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJhZGRNYXNrXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTWFzayhtYXNrT3JEb20sIGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbWFza1R5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICAgIGxheWVyUmVmLnJvb3QudHQgPSBtYXNrVHlwZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsYXllckluZGV4ID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIHRoaXMucm9vdC5sYXllcnNbbGF5ZXJJbmRleF0udHQgPSBtYXNrVHlwZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVySW5kZXggPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBsYXllciBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBKU01vdmluLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbWFza0xheWVyO1xyXG5cclxuICAgICAgaWYgKG1hc2tPckRvbSBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xyXG4gICAgICAgIG1hc2tMYXllciA9IF9sYXllci5MYXllckZhY3RvcnkuaGllcmFyY2h5KG1hc2tPckRvbSwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtYXNrTGF5ZXIgPSBtYXNrT3JEb207XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDAsIG1hc2tMYXllci5yb290KTtcclxuICAgICAgcmV0dXJuIG1hc2tMYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGxheWVyUmVmcyBhIHNldCBvZiBsYXllcnMgdG8gYmUgcGFja2VkIGFzIGFuIGFzc2V0XHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1ha2VBc3NldFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VBc3NldChsYXllclJlZnMpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIGxheWVyUmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIGlmIChsYXllci5yb290LnR0ID09IDEpIHtcclxuICAgICAgICAgIHZhciBsYXllckluZGV4ID0gX3RoaXMucm9vdC5sYXllcnMuaW5kZXhPZihsYXllci5yb290KTtcclxuXHJcbiAgICAgICAgICBpZiAobGF5ZXJJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1hc2sgPSBfdGhpcy5yb290LmxheWVyc1tsYXllckluZGV4IC0gMV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5uZXJJbmRleCA9PSAwIHx8IGxheWVyUmVmc1tpbm5lckluZGV4IC0gMV0ucm9vdCAhPSBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgbGF5ZXJSZWZzLnNwbGljZShpbm5lckluZGV4LCAwLCBuZXcgX2xheWVyLkpTTW92aW5MYXllcihtYXNrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMgPSBsYXllclJlZnMubWFwKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBsYXllcjogbGF5ZXIsXHJcbiAgICAgICAgICBpbm5lckluZGV4OiBpbm5lckluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBhSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGEubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHZhciBiSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGIubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhSW5kZXggLSBiSW5kZXggfHwgYS5pbm5lckluZGV4IC0gYi5pbm5lckluZGV4O1xyXG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKGxheWVyV3JhcHBlcikge1xyXG4gICAgICAgIHJldHVybiBsYXllcldyYXBwZXIubGF5ZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICB2YXIgbGF5ZXJJbmRleCA9IF90aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIGlmIChsYXllckluZGV4ID4gMCkge1xyXG4gICAgICAgICAgX3RoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGF5ZXIucm9vdC5vcCA9IDllOTtcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciByZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgIHRoaXMucm9vdC5hc3NldHMucHVzaCh7XHJcbiAgICAgICAgaWQ6IHJlZklkLFxyXG4gICAgICAgIGxheWVyczogbGF5ZXJSZWZzLm1hcChmdW5jdGlvbiAobGF5ZXJSZWYpIHtcclxuICAgICAgICAgIHJldHVybiBsYXllclJlZi5yb290O1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVmSWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZUxheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGF5ZXIobGF5ZXJSZWZPckluZGV4KSB7XHJcbiAgICAgIHZhciBsYXllclJlZjtcclxuICAgICAgdmFyIGxheWVySW5kZXg7XHJcblxyXG4gICAgICBpZiAobGF5ZXJSZWZPckluZGV4IGluc3RhbmNlb2YgX2xheWVyLkpTTW92aW5MYXllcikge1xyXG4gICAgICAgIGxheWVyUmVmID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIGxheWVySW5kZXggPSB0aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXJSZWYucm9vdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXJJbmRleCA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbWFzayBvciBtYXNrZWQgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZU1hc2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVNYXNrKGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxheWVySW5kZXggPSBsYXllclJlZk9ySW5kZXg7XHJcbiAgICAgICAgbGF5ZXJSZWYgPSBuZXcgX2xheWVyLkpTTW92aW5MYXllcih0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXhdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVyUmVmLnJvb3QudHQpIHtcclxuICAgICAgICBsYXllclJlZi5yb290LnR0ID0gMDtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzLnNwbGljZShsYXllckluZGV4IC0gMSwgMSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb290LmxheWVyc1tsYXllckluZGV4ICsgMV0udHQpIHtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXggKyAxXS50dCA9IDA7XHJcbiAgICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgbGF5ZXIgaXMgbm90IGEgbWFzayBvciBhIG1hc2tlZCBsYXllci4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjbGVhciBhbGwgbGF5ZXJzXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNsZWFyTGF5ZXJzXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJMYXllcnMoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhbGwgbGF5ZXJzIGVuZCBhdCBzYW1lIHRpbWVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidW5pZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm0oKSB7XHJcbiAgICAgIHZhciBtYXhUaW1lID0gdGhpcy5yb290LmxheWVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIHYpIHtcclxuICAgICAgICByZXR1cm4gcCA8IHYub3AgPyB2Lm9wIDogcDtcclxuICAgICAgfSwgMCk7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IG1heFRpbWU7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICByZXR1cm4gbGF5ZXIub3AgPSBtYXhUaW1lO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZXhwb3J0IExvdHRpZSBhcyBKYXZhU2NyaXB0IE9iamVjdCBcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidG9PYmplY3RcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b09iamVjdCgpIHtcclxuICAgICAgdGhpcy51bmlmb3JtKCk7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMudG9KU09OKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBleHBvcnQgTG90dGllIGFzIEpTT04gdGV4dFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ0b0pTT05cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XHJcbiAgICAgIHRoaXMudW5pZm9ybSgpO1xyXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yb290KTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluO1xyXG59KCk7XHJcblxyXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEpTTW92aW47XHJcbnZhciBNYXNrVHlwZTtcclxuZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlO1xyXG5cclxuKGZ1bmN0aW9uIChNYXNrVHlwZSkge1xyXG4gIE1hc2tUeXBlW01hc2tUeXBlW1wiQWxwaGFcIl0gPSAxXSA9IFwiQWxwaGFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEFscGhhXCJdID0gMl0gPSBcIkludmVydEFscGhhXCI7XHJcbiAgTWFza1R5cGVbTWFza1R5cGVbXCJMdW1hXCJdID0gM10gPSBcIkx1bWFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEx1bWFcIl0gPSA0XSA9IFwiSW52ZXJ0THVtYVwiO1xyXG59KShNYXNrVHlwZSB8fCAoZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlxYzIxdmRtbHVMblJ6SWwwc0ltNWhiV1Z6SWpwYklrcFRUVzkyYVc0aUxDSm1jSE1pTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSW5KdmIzUWlMQ0ptY2lJc0luY2lMQ0pvSWl3aVpHUmtJaXdpYkdGNVpYSnpJaXdpWVhOelpYUnpJaXdpWm05dWRITWlMQ0pzYVhOMElpd2lhWEFpTENKdmNDSXNJbVJ2YlV4aGVXVnlUM0pCYzNObGRFbGtJaXdpYkdGNVpYSWlMQ0pUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFpTENKTVlYbGxja1poWTNSdmNua2lMQ0pvYVdWeVlYSmphSGtpTENKeVpXWWlMQ0p6Y0d4cFkyVWlMQ0p0WVhOclQzSkViMjBpTENKc1lYbGxjbEpsWms5eVNXNWtaWGdpTENKdFlYTnJWSGx3WlNJc0lrMWhjMnRVZVhCbElpd2lRV3h3YUdFaUxDSnNZWGxsY2xKbFppSXNJbXhoZVdWeVNXNWtaWGdpTENKS1UwMXZkbWx1VEdGNVpYSWlMQ0pwYm1SbGVFOW1JaXdpZEhRaUxDSkZjbkp2Y2lJc0ltMWhjMnRNWVhsbGNpSXNJbXhoZVdWeVVtVm1jeUlzSW1admNrVmhZMmdpTENKcGJtNWxja2x1WkdWNElpd2liV0Z6YXlJc0ltMWhjQ0lzSW5OdmNuUWlMQ0poSWl3aVlpSXNJbUZKYm1SbGVDSXNJbUpKYm1SbGVDSXNJbXhoZVdWeVYzSmhjSEJsY2lJc0luSmxaa2xrSWl3aWNIVnphQ0lzSW1sa0lpd2liV0Y0VkdsdFpTSXNJbkpsWkhWalpTSXNJbkFpTENKMklpd2lkVzVwWm05eWJTSXNJa3BUVDA0aUxDSndZWEp6WlNJc0luUnZTbE5QVGlJc0luTjBjbWx1WjJsbWVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVOQk96dEJRVU5CT3p0QlFUQk5RVHM3UVVGRFFUczdPenM3T3pzN096czdPMGxCZWsxeFFrRXNUenM3TzBGQlIycENPenM3T3p0QlFVdEJMSEZDUVVGNVJUdEJRVUZCTEZGQlFUZEVReXhIUVVFMlJDeDFSVUZCTDBNc1JVRkJLME03UVVGQlFTeFJRVUV6UTBNc1MwRkJNa01zZFVWQlFUTkNMRWRCUVRKQ08wRkJRVUVzVVVGQmRFSkRMRTFCUVhOQ0xIVkZRVUZNTEVkQlFVczdPMEZCUVVFN08wRkJRVUU3TzBGQlEzSkZMRk5CUVV0RExFbEJRVXdzUjBGQldUdEJRVU5TUXl4TlFVRkJRU3hGUVVGRkxFVkJRVVZLTEVkQlJFazdRVUZGVWtzc1RVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TFFVWkxPMEZCUjFKTExFMUJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRklTenRCUVVsU1N5eE5RVUZCUVN4SFFVRkhMRVZCUVVVc1EwRktSenRCUVV0U1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk1RVHRCUVUxU1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk9RVHRCUVU5U1F5eE5RVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRTRU1zVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUkVnc1QwRlFRenRCUVZWU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVc1EwRldTVHRCUVZkU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVN1FVRllTU3hMUVVGYU8wRkJZVWc3UVVGRlJEczdPenM3T3p0cFEwRkhZV0lzUnl4RlFVRmhPMEZCUTNSQ0xGZEJRVXRITEVsQlFVd3NRMEZCVlVNc1JVRkJWaXhIUVVGbFNpeEhRVUZtTzBGQlEwZzdRVUZGUkRzN096czdPenRuUTBGSldVTXNTeXhGUVVGbFF5eE5MRVZCUVdkQ08wRkJRM1pETEZkQlFVdERMRWxCUVV3c1EwRkJWVVVzUTBGQlZpeEhRVUZqU2l4TFFVRmtPMEZCUTBFc1YwRkJTMFVzU1VGQlRDeERRVUZWUnl4RFFVRldMRWRCUVdOS0xFMUJRV1E3UVVGRFNEdEJRVVZFT3pzN096czdPelpDUVVsVFdTeHBRaXhGUVVGclJqdEJRVU4yUml4VlFVRkpReXhMUVVGS096dEJRVU5CTEZWQlFVbEVMR2xDUVVGcFFpeFpRVUZaUlN4clFrRkJha01zUlVGQmNVUTdRVUZEYWtSRUxGRkJRVUZCTEV0QlFVc3NSMEZCUjBVc2IwSkJRV0ZETEZOQlFXSXNRMEZCZFVKS0xHbENRVUYyUWl4RlFVRXdReXhMUVVGTFdDeEpRVUZNTEVOQlFWVk5MRTFCUVhCRUxFVkJRVFpFTEV0QlFVdE9MRWxCUVV3c1EwRkJWVThzUzBGQmRrVXNRMEZCVWp0QlFVTklMRTlCUmtRc1RVRkZUeXhKUVVGSkxFOUJRVkZKTEdsQ1FVRlNMRXRCUVN0Q0xGRkJRVzVETEVWQlFUWkRPMEZCUTJoRVF5eFJRVUZCUVN4TFFVRkxMRWRCUVVkRkxHOUNRVUZoUlN4SFFVRmlMRU5CUVdsQ1RDeHBRa0ZCYWtJc1EwRkJVanRCUVVOSUxFOUJSazBzVFVGSFJqdEJRVU5FUXl4UlFVRkJRU3hMUVVGTExFZEJRVWRFTEdsQ1FVRlNPMEZCUTBnN08wRkJRMFFzVjBGQlMxZ3NTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDV1N4TlFVRnNRaXhEUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhEUVVFMVFpeEZRVUVyUWt3c1MwRkJTeXhEUVVGRFdpeEpRVUZ5UXp0QlFVTkJMR0ZCUVU5WkxFdEJRVkE3UVVGRFNEdEJRVVZFT3pzN096czdPenMwUWtGTFVVMHNVeXhGUVVFNFEwTXNaU3hGUVVFMlJUdEJRVUZCTEZWQlFYSkRReXhSUVVGeFF5eDFSVUZCYUVKRExGRkJRVkVzUTBGQlEwTXNTMEZCVHp0QlFVTXZTQ3hWUVVGSlF5eFJRVUZLTzBGQlEwRXNWVUZCU1VNc1ZVRkJTanM3UVVGRFFTeFZRVUZKVEN4bFFVRmxMRmxCUVZsTkxHMUNRVUV2UWl4RlFVRTJRenRCUVVONlEwWXNVVUZCUVVFc1VVRkJVU3hIUVVGSFNpeGxRVUZZTzBGQlEwRkxMRkZCUVVGQkxGVkJRVlVzUjBGQlJ5eExRVUZMZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENjVUlzVDBGQmJFSXNRMEZCTUVKSUxGRkJRVkVzUTBGQlEzWkNMRWxCUVc1RExFTkJRV0k3UVVGRFFYVkNMRkZCUVVGQkxGRkJRVkVzUTBGQlEzWkNMRWxCUVZRc1EwRkJZekpDTEVWQlFXUXNSMEZCYlVKUUxGRkJRVzVDTzBGQlEwZ3NUMEZLUkN4TlFVbFBPMEZCUTBoSkxGRkJRVUZCTEZWQlFWVXNSMEZCUjB3c1pVRkJZanRCUVVOQkxHRkJRVXR1UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnRRaXhWUVVGc1FpeEZRVUU0UWtjc1JVRkJPVUlzUjBGQmJVTlFMRkZCUVc1RE8wRkJRMGc3TzBGQlEwUXNWVUZCU1Vrc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMRGhEUVVGV0xFTkJRVTQ3UVVGRFNEczdRVUZEUkN4VlFVRkpReXhUUVVGS096dEJRVU5CTEZWQlFVbFlMRk5CUVZNc1dVRkJXVXdzYTBKQlFYcENMRVZCUVRaRE8wRkJRM3BEWjBJc1VVRkJRVUVzVTBGQlV5eEhRVUZIWml4dlFrRkJZVU1zVTBGQllpeERRVUYxUWtjc1UwRkJka0lzUlVGQmEwTXNTMEZCUzJ4Q0xFbEJRVXdzUTBGQlZVMHNUVUZCTlVNc1JVRkJjVVFzUzBGQlMwNHNTVUZCVEN4RFFVRlZUeXhMUVVFdlJDeERRVUZhTzBGQlEwZ3NUMEZHUkN4TlFVVlBPMEZCUTBoelFpeFJRVUZCUVN4VFFVRlRMRWRCUVVkWUxGTkJRVm83UVVGRFNEczdRVUZEUkN4WFFVRkxiRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q1dTeE5RVUZzUWl4RFFVRjVRazhzVlVGQmVrSXNSVUZCY1VNc1EwRkJja01zUlVGQmQwTkxMRk5CUVZNc1EwRkJRemRDTEVsQlFXeEVPMEZCUTBFc1lVRkJUelpDTEZOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN09FSkJSMVZETEZNc1JVRkJkME03UVVGQlFUczdRVUZET1VOQkxFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZEYmtJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVOeVF5eFpRVUZKY0VJc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWY3lRaXhGUVVGWUxFbEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM0JDTEdOQlFVMUlMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeGpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHZENRVUZOVXl4SlFVRkpMRWRCUVVjc1MwRkJTU3hEUVVGRGFrTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVOQlFXSTdPMEZCUTBFc1owSkJRVWxSTEZWQlFWVXNTVUZCU1N4RFFVRmtMRWxCUVcxQ1JpeFRRVUZUTEVOQlFVTkZMRlZCUVZVc1IwRkJSeXhEUVVGa0xFTkJRVlFzUTBGQk1FSm9ReXhKUVVFeFFpeEpRVUZyUTJsRExFbEJRWHBFTEVWQlFTdEVPMEZCUXpORVNDeGpRVUZCUVN4VFFVRlRMRU5CUVVOaUxFMUJRVllzUTBGQmFVSmxMRlZCUVdwQ0xFVkJRVFpDTEVOQlFUZENMRVZCUVdkRExFbEJRVWxRTEcxQ1FVRktMRU5CUVdsQ1VTeEpRVUZxUWl4RFFVRm9RenRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEU5QlZrUTdRVUZYUVVnc1RVRkJRVUVzVTBGQlV5eEhRVUZIUVN4VFFVRlRMRU5CUVVOSkxFZEJRVllzUTBGQll5eFZRVUZEZEVJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVNM1F5eGxRVUZQTzBGQlEwaHdRaXhWUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUkVjN1FVRkZTRzlDTEZWQlFVRkJMRlZCUVZVc1JVRkJWa0U3UVVGR1J5eFRRVUZRTzBGQlNVZ3NUMEZNVnl4RlFVdFVSeXhKUVV4VExFTkJTMG9zVlVGQlEwTXNRMEZCUkN4RlFVRkpReXhEUVVGS0xFVkJRVlU3UVVGRFpDeFpRVUZOUXl4TlFVRk5MRWRCUVVjc1MwRkJTU3hEUVVGRGRFTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDY1VJc1QwRkJiRUlzUTBGQk1FSlZMRU5CUVVNc1EwRkJRM2hDTEV0QlFVWXNRMEZCVVZvc1NVRkJiRU1zUTBGQlpqczdRVUZEUVN4WlFVRk5kVU1zVFVGQlRTeEhRVUZITEV0QlFVa3NRMEZCUTNaRExFbEJRVXdzUTBGQlZVc3NUVUZCVml4RFFVRnJRbkZDTEU5QlFXeENMRU5CUVRCQ1Z5eERRVUZETEVOQlFVTjZRaXhMUVVGR0xFTkJRVkZhTEVsQlFXeERMRU5CUVdZN08wRkJRMEVzWlVGQlVYTkRMRTFCUVUwc1IwRkJSME1zVFVGQlZpeEpRVUZ6UWtnc1EwRkJReXhEUVVGRFNpeFZRVUZHTEVkQlFXVkxMRU5CUVVNc1EwRkJRMHdzVlVGQk9VTTdRVUZEU0N4UFFWUlhMRVZCVTFSRkxFZEJWRk1zUTBGVFRDeFZRVUZCVFN4WlFVRlpPMEZCUVVFc1pVRkJTVUVzV1VGQldTeERRVUZETlVJc1MwRkJha0k3UVVGQlFTeFBRVlJRTEVOQlFWbzdRVUZWUVd0Q0xFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZCYmtJc1MwRkJTeXhGUVVGSk8wRkJRM1pDTEZsQlFVMVpMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeFpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xGVkJRVUVzUzBGQlNTeERRVUZEZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENXU3hOUVVGc1FpeERRVUY1UWs4c1ZVRkJla0lzUlVGQmNVTXNRMEZCY2tNN1FVRkRTRHM3UVVGRFJGb3NVVUZCUVVFc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWZFZMRVZCUVZnc1IwRkJaMElzUjBGQmFFSTdRVUZEU0N4UFFVNUVPMEZCVDBFc1ZVRkJUU3RDTEV0QlFVc3NSMEZCUnl4dlFrRkJaRHRCUVVOQkxGZEJRVXQ2UXl4SlFVRk1MRU5CUVZWTkxFMUJRVllzUTBGQmEwSnZReXhKUVVGc1FpeERRVUYxUWp0QlFVTnVRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZSaXhMUVVSbE8wRkJSVzVDY0VNc1VVRkJRVUVzVFVGQlRTeEZRVUZGZVVJc1UwRkJVeXhEUVVGRFNTeEhRVUZXTEVOQlFXTXNWVUZCUVZnc1VVRkJVVHRCUVVGQkxHbENRVUZKUVN4UlFVRlJMRU5CUVVOMlFpeEpRVUZpTzBGQlFVRXNVMEZCZEVJN1FVRkdWeXhQUVVGMlFqdEJRVWxCTEdGQlFVOTVReXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3TzJkRFFVZFpkRUlzWlN4RlFVRjNRenRCUVVOb1JDeFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5JT3p0QlFVTkVMRmRCUVV0dVFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUY2UWl4RlFVRnhReXhEUVVGeVF6dEJRVU5JTzBGQlJVUTdPenM3T3pzclFrRkhWMHdzWlN4RlFVRjNRenRCUVVNdlF5eFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5CU1N4UlFVRkJRU3hSUVVGUkxFZEJRVWNzU1VGQlNVVXNiVUpCUVVvc1EwRkJhVUlzUzBGQlMzcENMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUW0xQ0xGVkJRV3hDTEVOQlFXcENMRU5CUVZnN1FVRkRTRHM3UVVGRFJDeFZRVUZKUkN4UlFVRlJMRU5CUVVOMlFpeEpRVUZVTEVOQlFXTXlRaXhGUVVGc1FpeEZRVUZ6UWp0QlFVTnNRa29zVVVGQlFVRXNVVUZCVVN4RFFVRkRka0lzU1VGQlZDeERRVUZqTWtJc1JVRkJaQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJMR0ZCUVVzelFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUZWTEVkQlFVY3NRMEZCZEVNc1JVRkJlVU1zUTBGQmVrTTdRVUZEU0N4UFFVaEVMRTFCUjA4c1NVRkJTU3hMUVVGTGVFSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGMFF5eEZRVUV3UXp0QlFVTTNReXhoUVVGTE0wSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGc1F5eEhRVUYxUXl4RFFVRjJRenRCUVVOQkxHRkJRVXN6UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSlpMRTFCUVd4Q0xFTkJRWGxDVHl4VlFVRjZRaXhGUVVGeFF5eERRVUZ5UXp0QlFVTklMRTlCU0Uwc1RVRkhRVHRCUVVOSUxHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMR3RFUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LTzBGQlJVUTdPenM3T3p0clEwRkhZenRCUVVOV0xGZEJRVXMxUWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUjBGQmJVSXNSVUZCYmtJN1FVRkRTRHRCUVVWRU96czdPenM3T0VKQlIxVTdRVUZEVGl4VlFVRkpkVU1zVDBGQlR5eEhRVUZITEV0QlFVczFReXhKUVVGTUxFTkJRVlZMTEUxQlFWWXNRMEZCYTBKM1F5eE5RVUZzUWl4RFFVRjVRaXhWUVVGRFF5eERRVUZFTEVWQlFVbERMRU5CUVVvN1FVRkJRU3hsUVVGVlJDeERRVUZETEVkQlFVZERMRU5CUVVNc1EwRkJRM0pETEVWQlFVNHNSMEZCV1hGRExFTkJRVU1zUTBGQlEzSkRMRVZCUVdRc1IwRkJiMEp2UXl4RFFVRTVRanRCUVVGQkxFOUJRWHBDTEVWQlFUQkVMRU5CUVRGRUxFTkJRV1E3UVVGRFFTeFhRVUZMT1VNc1NVRkJUQ3hEUVVGVlZTeEZRVUZXTEVkQlFXVnJReXhQUVVGbU8wRkJRMEVzVjBGQlN6VkRMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUWpCQ0xFOUJRV3hDTEVOQlFUQkNMRlZCUVVGdVFpeExRVUZMTzBGQlFVRXNaVUZCU1VFc1MwRkJTeXhEUVVGRFJpeEZRVUZPTEVkQlFWZHJReXhQUVVGbU8wRkJRVUVzVDBGQkwwSTdRVUZEU0R0QlFVVkVPenM3T3pzN0swSkJSMWM3UVVGRFVDeFhRVUZMU1N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZjc1MwRkJTME1zVFVGQlRDeEZRVUZZTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN05rSkJSMU03UVVGRFRDeFhRVUZMU0N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUnl4VFFVRk1MRU5CUVdVc1MwRkJTM0JFTEVsQlFYQkNMRU5CUVZBN1FVRkRTRHM3T3pzN096dEpRVTFQY1VJc1VUczdPMWRCUVVGQkxGRTdRVUZCUVVFc1JVRkJRVUVzVVN4RFFVRkJRU3hSTzBGQlFVRkJMRVZCUVVGQkxGRXNRMEZCUVVFc1VUdEJRVUZCUVN4RlFVRkJRU3hSTEVOQlFVRkJMRkU3UVVGQlFVRXNSVUZCUVVFc1VTeERRVUZCUVN4Uk8wZEJRVUZCTEZFc2QwSkJRVUZCTEZFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QkJibWx0WVhScGIyNHNJRk5vWVhCbFRHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNCY0lpNHZZVzVwYldGMGFXOXVYQ0k3WEc1cGJYQnZjblFnZXlCS1UwMXZkbWx1VEdGNVpYSXNJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1cGJYQnZjblFnZFhWcFpDQm1jbTl0SUNkMWRXbGtMM1kwSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nU2xOTmIzWnBiaUI3WEc0Z0lDQWdjSEpwZG1GMFpTQnliMjkwT2lCQmJtbHRZWFJwYjI0N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1puQnpJRzUxYldKbGNpQnZaaUJtY21GdFpYTWdjR1Z5SUhObFkyOXVaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjNhV1IwYUNCM2FXUjBhQ0J2WmlCMmFXVjNjRzl5ZENBb2NIZ3BYRzRnSUNBZ0lDb2dRSEJoY21GdElHaGxhV2RvZENCb1pXbG5hSFFnYjJZZ2RtbGxkM0J2Y25RZ0tIQjRLVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1p3Y3pvZ2JuVnRZbVZ5SUQwZ016QXNJSGRwWkhSb09pQnVkVzFpWlhJZ1BTQTRNREFzSUdobGFXZG9kRG9nYm5WdFltVnlJRDBnTmpBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5T2lCbWNITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM09pQjNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2c2SUdobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeWN6b2dXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjM05sZEhNNklGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBPaUJiWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCbWNITWdiblZ0WW1WeUlHOW1JR1p5WVcxbGN5QndaWElnYzJWamIyNWtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBSbkpoYldWU1lYUmxLR1p3Y3pvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNW1jaUE5SUdad2MxeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCM2FXUjBhQ0IzYVdSMGFDQnZaaUIyYVdWM2NHOXlkQ0FvY0hncFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdobGFXZG9kQ0JvWldsbmFIUWdiMllnZG1sbGQzQnZjblFnS0hCNEtWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGWnBaWGR3YjNKMEtIZHBaSFJvT2lCdWRXMWlaWElzSUdobGFXZG9kRG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEM1M0lEMGdkMmxrZEdoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MExtZ2dQU0JvWldsbmFIUmNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmhaR1FnWVNCemFXMXdiR1VnWjNKaGNHaHBZMkZzSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHUnZiVXhoZVdWeVQzSkJjM05sZEVsa0lHRWdVMVpISUdWc1pXMWxiblFnUkU5TklHOXlJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQmhjM05sZENCSlJDQnVaV1ZrY3lCMGJ5QmlaU0JwYm5ObGNuUmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRXhoZVdWeUtHUnZiVXhoZVdWeVQzSkJjM05sZEVsa09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUWdmQ0JLVTAxdmRtbHVUR0Y1WlhJZ2ZDQlNaV1psY21WdVkyVkpSQ2s2SUVwVFRXOTJhVzVNWVhsbGNpQjdYRzRnSUNBZ0lDQWdJR3hsZENCc1lYbGxjam9nU2xOTmIzWnBia3hoZVdWeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FnYVc1emRHRnVZMlZ2WmlCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlJRDBnVEdGNVpYSkdZV04wYjNKNUxtaHBaWEpoY21Ob2VTaGtiMjFNWVhsbGNrOXlRWE56WlhSSlpDd2dkR2hwY3k1eWIyOTBMbUZ6YzJWMGN5RXNJSFJvYVhNdWNtOXZkQzVtYjI1MGN5RXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JQ2hrYjIxTVlYbGxjazl5UVhOelpYUkpaQ2tnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjaUE5SUV4aGVXVnlSbUZqZEc5eWVTNXlaV1lvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2lBOUlHUnZiVXhoZVdWeVQzSkJjM05sZEVsa1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtEQXNJREFzSUd4aGVXVnlMbkp2YjNRcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1lYbGxjbHh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRZWE5yVDNKRWIyMGdZU0JUVmtjZ1pXeGxiV1Z1ZENCRVQwMGdiM0lnU2xOTmIzWnBia3hoZVdWeUlIUnZJR0psSUhSb1pTQnRZWE5yWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnNZWGxsY2lCMGJ5QmlaU0IwYUdVZ2JXRnphMlZrSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWhjMnRVZVhCbElIZG9hV05vSUhSNWNHVWdiMllnYldGemF5QjBieUIxYzJVc0lIVnpaU0JnVFdGemExUjVjR1V1S21BZ2RHOGdjM0JsWTJsbWVWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGa1pFMWhjMnNvYldGemEwOXlSRzl0T2lCS1UwMXZkbWx1VEdGNVpYSWdmQ0JUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFzSUd4aGVXVnlVbVZtVDNKSmJtUmxlRG9nYm5WdFltVnlJSHdnU2xOTmIzWnBia3hoZVdWeUxDQnRZWE5yVkhsd1pUb2dUV0Z6YTFSNWNHVWdQU0JOWVhOclZIbHdaUzVCYkhCb1lTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpTWldZNklFcFRUVzkyYVc1TVlYbGxjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpKYm1SbGVEb2diblZ0WW1WeVhHNGdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNsSmxaazl5U1c1a1pYZ2dhVzV6ZEdGdVkyVnZaaUJLVTAxdmRtbHVUR0Y1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlVbVZtSUQwZ2JHRjVaWEpTWldaUGNrbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnZEdocGN5NXliMjkwTG14aGVXVnljeUV1YVc1a1pYaFBaaWhzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1l1Y205dmRDNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVZ0c1lYbGxja2x1WkdWNFhTNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3hoZVdWeVNXNWtaWGdnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBkcGRtVnVJR3hoZVdWeUlHbHpJRzV2ZENCaElHMWxiV0psY2lCdlppQjBhR2x6SUVwVFRXOTJhVzR1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnYldGemEweGhlV1Z5T2lCS1UwMXZkbWx1VEdGNVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0cxaGMydFBja1J2YlNCcGJuTjBZVzVqWlc5bUlGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRnphMHhoZVdWeUlEMGdUR0Y1WlhKR1lXTjBiM0o1TG1ocFpYSmhjbU5vZVNodFlYTnJUM0pFYjIwc0lIUm9hWE11Y205dmRDNWhjM05sZEhNaExDQjBhR2x6TG5KdmIzUXVabTl1ZEhNaEtWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGemEweGhlV1Z5SUQwZ2JXRnphMDl5Ukc5dFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREFzSUcxaGMydE1ZWGxsY2k1eWIyOTBLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0Z6YTB4aGVXVnlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHeGhlV1Z5VW1WbWN5QmhJSE5sZENCdlppQnNZWGxsY25NZ2RHOGdZbVVnY0dGamEyVmtJR0Z6SUdGdUlHRnpjMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiV0ZyWlVGemMyVjBLR3hoZVdWeVVtVm1jem9nU2xOTmIzWnBia3hoZVdWeVcxMHBPaUJTWldabGNtVnVZMlZKUkNCN1hHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5NW1iM0pGWVdOb0tDaHNZWGxsY2l3Z2FXNXVaWEpKYm1SbGVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlMbkp2YjNRdWRIUWdQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlTVzVrWlhnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGMyc2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJVnRzWVhsbGNrbHVaR1Y0SUMwZ01WMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVibVZ5U1c1a1pYZ2dQVDBnTUNCOGZDQnNZWGxsY2xKbFpuTmJhVzV1WlhKSmJtUmxlQ0F0SURGZExuSnZiM1FnSVQwZ2JXRnpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG5Od2JHbGpaU2hwYm01bGNrbHVaR1Y0TENBd0xDQnVaWGNnU2xOTmIzWnBia3hoZVdWeUtHMWhjMnNnWVhNZ1UyaGhjR1ZNWVhsbGNpa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5QTlJR3hoZVdWeVVtVm1jeTV0WVhBb0tHeGhlV1Z5TENCcGJtNWxja2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhlV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWJtVnlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrdWMyOXlkQ2dvWVN3Z1lpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lVbHVaR1Y0SUQwZ2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lFdWFXNWtaWGhQWmloaExteGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpU1c1a1pYZ2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJUzVwYm1SbGVFOW1LR0l1YkdGNVpYSXVjbTl2ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9ZVWx1WkdWNElDMGdZa2x1WkdWNEtTQjhmQ0FvWVM1cGJtNWxja2x1WkdWNElDMGdZaTVwYm01bGNrbHVaR1Y0S1Z4dUlDQWdJQ0FnSUNCOUtTNXRZWEFvYkdGNVpYSlhjbUZ3Y0dWeUlEMCtJR3hoZVdWeVYzSmhjSEJsY2k1c1lYbGxjaWxjYmlBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG1admNrVmhZMmdvYkdGNVpYSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEpKYm1SbGVDQTlJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbWx1WkdWNFQyWW9iR0Y1WlhJdWNtOXZkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNrbHVaR1Y0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbk53YkdsalpTaHNZWGxsY2tsdVpHVjRMQ0F4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEl1Y205dmRDNXZjQ0E5SURsbE9WeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaV1pKWkNBOUlIVjFhV1FvS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdVlYTnpaWFJ6SVM1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ5WldaSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnljem9nYkdGNVpYSlNaV1p6TG0xaGNDaHNZWGxsY2xKbFppQTlQaUJzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZtU1dSY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGNVpYSlNaV1pQY2tsdVpHVjRJR0VnU2xOTmIzWnBia3hoZVdWeUlHOXlJR2x1WkdWNElHOW1JR3hoZVdWeUlIUnZJSEpsYlc5MlpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaVXhoZVdWeUtHeGhlV1Z5VW1WbVQzSkpibVJsZURvZ2JuVnRZbVZ5SUh3Z1NsTk5iM1pwYmt4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2xKbFpqb2dTbE5OYjNacGJreGhlV1Z5WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2tsdVpHVjRPaUJ1ZFcxaVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0d4aGVXVnlVbVZtVDNKSmJtUmxlQ0JwYm5OMFlXNWpaVzltSUVwVFRXOTJhVzVNWVhsbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEpTWldZZ1BTQnNZWGxsY2xKbFprOXlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeVNXNWtaWGdnUFNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVM1cGJtUmxlRTltS0d4aGVXVnlVbVZtTG5KdmIzUXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxja2x1WkdWNElEMGdiR0Y1WlhKU1pXWlBja2x1WkdWNFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREVwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnRZWE5ySUc5eUlHMWhjMnRsWkNCc1lYbGxjaUIwYnlCeVpXMXZkbVZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzF2ZG1WTllYTnJLR3hoZVdWeVVtVm1UM0pKYm1SbGVEb2diblZ0WW1WeUlId2dTbE5OYjNacGJreGhlV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNsSmxaam9nU2xOTmIzWnBia3hoZVdWeVhHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNrbHVaR1Y0T2lCdWRXMWlaWEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhlV1Z5VW1WbVQzSkpibVJsZUNCcGJuTjBZVzVqWlc5bUlFcFRUVzkyYVc1TVlYbGxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWWdQU0JzWVhsbGNsSmxaazl5U1c1a1pYaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5VW1WbUxuSnZiM1FwWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjbEpsWmlBOUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lGYmJHRjVaWEpKYm1SbGVGMGdZWE1nVTJoaGNHVk1ZWGxsY2lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYkdGNVpYSlNaV1l1Y205dmRDNTBkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWXVjbTl2ZEM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNElDMGdNU3dnTVNsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5KdmIzUXViR0Y1WlhKeklWdHNZWGxsY2tsdVpHVjRJQ3NnTVYwdWRIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaFcyeGhlV1Z5U1c1a1pYZ2dLeUF4WFM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNExDQXhLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdhVzV3ZFhRZ2JHRjVaWElnYVhNZ2JtOTBJR0VnYldGemF5QnZjaUJoSUcxaGMydGxaQ0JzWVhsbGNpNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTJ4bFlYSWdZV3hzSUd4aGVXVnljMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNaV0Z5VEdGNVpYSnpLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SUQwZ1cxMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnRZV3RsSUdGc2JDQnNZWGxsY25NZ1pXNWtJR0YwSUhOaGJXVWdkR2x0WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1YVdadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWGhVYVcxbElEMGdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjbVZrZFdObEtDaHdMQ0IyS1NBOVBpQndJRHdnZGk1dmNDRWdQeUIyTG05d0lTQTZJSEFzSURBcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXZjQ0E5SUcxaGVGUnBiV1ZjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwTG14aGVXVnljeUV1Wm05eVJXRmphQ2hzWVhsbGNpQTlQaUJzWVhsbGNpNXZjQ0E5SUcxaGVGUnBiV1VwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWlhod2IzSjBJRXh2ZEhScFpTQmhjeUJLWVhaaFUyTnlhWEIwSUU5aWFtVmpkQ0JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBiMDlpYW1WamRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9kR2hwY3k1MGIwcFRUMDRvS1NsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCbGVIQnZjblFnVEc5MGRHbGxJR0Z6SUVwVFQwNGdkR1Y0ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1YzNSeWFXNW5hV1o1S0hSb2FYTXVjbTl2ZENsY2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1bGVIQnZjblFnZXlCRllYTnBibWRHWVdOMGIzSjVJSDBnWm5KdmJTQW5MaTlsWVhOcGJtY25YRzVsZUhCdmNuUWdleUJRWVhSb1RXRnJaWElnZlNCbWNtOXRJQ2N1TDNCaGRHZ25YRzVsZUhCdmNuUWdaVzUxYlNCTllYTnJWSGx3WlNCN1hHNGdJQ0FnUVd4d2FHRWdQU0F4TEZ4dUlDQWdJRWx1ZG1WeWRFRnNjR2hoSUQwZ01peGNiaUFnSUNCTWRXMWhJRDBnTXl4Y2JpQWdJQ0JKYm5abGNuUk1kVzFoSUQwZ05GeHVmU0pkZlE9PSIsIi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmJ1bmRsZS5qcyc7XHJcbi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmpzJztcclxuaW1wb3J0IEpTTW92aW4gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5leHBvcnQgbGV0IGdsb2JhbFZhciA9IHtcclxuICAgIGpzTW92aW46IG5ldyBKU01vdmluKCksXHJcbiAgICBtYXJrTGF5ZXJzOiBuZXcgTWFwKClcclxuICAgIC8vIGFzc2V0czogXHJcbn07IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJpbXBvcnQgQ2hhcnRTcGVjIGZyb20gJy4vQ2hhcnRTcGVjLmpzJztcclxuaW1wb3J0IEFjdGlvblNwZWMgZnJvbSAnLi9BY3Rpb25TcGVjLmpzJztcclxuaW1wb3J0IEdyb3VwaW5nU3BlYyBmcm9tICcuL0dyb3VwaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCB7IENhbmlzVXRpbCB9IGZyb20gJy4vdXRpbC9VdGlsLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcbmltcG9ydCB7IGdldEJvdW5kaW5nQm94IH0gZnJvbSAnanNtb3Zpbi9iaW4vaGVscGVyJztcclxuaW1wb3J0IHsgTGF5ZXJGYWN0b3J5IH0gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5jbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5faWQ7XHJcbiAgICAgICAgdGhpcy5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2FsaWduID0gQW5pbWF0aW9uLmFsaWduVGFyZ2V0Lm9iamVjdDtcclxuICAgICAgICB0aGlzLmdyb3VwaW5nID0gbmV3IEdyb3VwaW5nU3BlYygpO1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAvL3NhdmUgYWxsIGRvbSBhdHRycyBvZiB0aGUgbWFya3Mgc2VsZWN0ZWQgaW4gdGhpcyBhbmltYXRpb25cclxuICAgICAgICAvLyBBbmltYXRpb24uZG9tTWFya3MgPSBuZXcgTWFwKCk7Ly9rZXk6IG1hcmtJZCwgdmFsdWU6IGRvbSBhdHRyc1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhcnRUaW1lID0gMTAwMDAwMDtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkVuZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHt9O1xyXG4gICAgICAgIHRoaXMubGVhdmVzID0gW107XHJcbiAgICAgICAgdGhpcy5hbGxNYXJrc1RoaXNBbmkgPSBbXTtcclxuICAgICAgICB0aGlzLm1hcmtzSW5PcmRlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuYW5pc0FsaWduZWQgPSBbXTtcclxuICAgICAgICB0aGlzLmFsaWduT25EYXRhID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgaWQoaWQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2lkID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICAgICAgfSBlbHNlIHsvL2FkZCBkZWZhdWx0IGlkXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pZCA9ICdhbmknICsgQW5pbWF0aW9uLmFuaUlkeDtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmlJZHgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbmltYXRpb24gJyArIHRoaXMuX2lkICsgJyBhbHJlYWR5IGhhcyBhbiBpZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgYWxpZ24oYWxpZ24pIHtcclxuICAgICAgICBpZiAodHlwZW9mIGFsaWduICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYWxpZ24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FsaWduID0gYWxpZ247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhbGlnbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWxpZ247XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgcmVwbGFjZUNvbnN0YW50cyhjb25zdGFudHMsIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgLy9yZXBsYWNlIGNvbnN0YW50cyBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgdGhpcy5yZXBsYWNlT2Zmc2V0Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG5cclxuICAgICAgICAvL3JlcGxhY2UgY29uc3RhbnRzIGluIGdyb3VwaW5nIHRpbWluZ1xyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnJlcGxhY2VEZWxheUNvbnN0KGNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcmVwbGFjZSBjb25zdGFudHMgaW4gYWN0aW9uIHRpbWluZ1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucy5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICAgICAgICBhLnJlcGxhY2VPZmZzZXRDb25zdChjb25zdGFudHMsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIGEucmVwbGFjZUR1cmF0aW9uQ29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0cmFuc2xhdGUgZnJvbSBqc29uIG9iamVjdCB0byBBbmltYXRpb24gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0pTT04gb2JqfSBhbmltYXRpb25Kc29uIFxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUoYW5pbWF0aW9uSnNvbiwgdXNlZENoYW5nZWRBdHRycywgdXBkYXRpbmcsIHN0YXR1cz17fSkge1xyXG4gICAgICAgIHRoaXMuY2hhcnRJZHggPSBhbmltYXRpb25Kc29uLmNoYXJ0SWR4O1xyXG4gICAgICAgIGlmICghdXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IGFuaW1hdGlvbkpzb24uc2VsZWN0b3I7Ly9pbml0IHNlbGVjdG9yXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaWQgPSBhbmltYXRpb25Kc29uLmlkO1xyXG4gICAgICAgIHRoaXMucmVmZXJlbmNlID0gYW5pbWF0aW9uSnNvbi5yZWZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBhbmltYXRpb25Kc29uLm9mZnNldDtcclxuICAgICAgICB0aGlzLmFsaWduID0gYW5pbWF0aW9uSnNvbi5hbGlnbjtcclxuICAgICAgICBpZiAodHlwZW9mIGFuaW1hdGlvbkpzb24uZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7Ly9pbml0IGdyb3VwaW5nXHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBpbmcuaW5pdEdyb3VwaW5nKGFuaW1hdGlvbkpzb24uZ3JvdXBpbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy90cmFuc2xhdGUgYWN0aW9uIHNwZWNzIGluIHRoZSBhbmltYXRpb24gSnNvblxyXG4gICAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uSnNvbi5lZmZlY3RzICE9PSAndW5kZWZpbmVkJykgey8vaW5pdCBhY3Rpb25zXHJcbiAgICAgICAgICAgIGlmICh1cGRhdGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGFjdGlvbkpzb247IGkgPCBhbmltYXRpb25Kc29uLmVmZmVjdHMubGVuZ3RoIHwgKGFjdGlvbkpzb24gPSBhbmltYXRpb25Kc29uLmVmZmVjdHNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbkpzb24uY2hhcnRJZHggPSBhbmltYXRpb25Kc29uLmNoYXJ0SWR4O1xyXG4gICAgICAgICAgICAgICAgbGV0IHZpc0F0dHJBY3Rpb25Kc29uQXJyID0gQWN0aW9uU3BlYy50cmFuc1RvVmlzdWFsQXR0ckFjdGlvbihhY3Rpb25Kc29uLCBhbmltYXRpb25Kc29uLmNoYXJ0SWR4LCB1c2VkQ2hhbmdlZEF0dHJzLCBDaGFydFNwZWMuZGF0YVRyYW5zLCBzdGF0dXMpOy8vdHJhbnNsYXRlIHRlbXBsYXRlcyB0byBuby10ZW1wbGF0ZXNcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0cmFuc2xhdGVkIHZpc3VhbCBhY3Rpb246ICcsIHZpc0F0dHJBY3Rpb25Kc29uQXJyKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCB2aXNBdHRyQWN0aW9uSnNvbjsgaiA8IHZpc0F0dHJBY3Rpb25Kc29uQXJyLmxlbmd0aCB8ICh2aXNBdHRyQWN0aW9uSnNvbiA9IHZpc0F0dHJBY3Rpb25Kc29uQXJyW2pdKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvbiA9IG5ldyBBY3Rpb25TcGVjKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uLmluaXRBY3Rpb24odmlzQXR0ckFjdGlvbkpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKHRtcEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsY3VsYXRlIHRpbWluZyBmb3IgZWFjaCBtYXJrO1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWFya0lkcyA6IGFycmF5IG9mIG1hcmsgaWRzXHJcbiAgICAgKiBAcGFyYW0ge0FuaW1hdGlvbn0gbGFzdEFuaW1hdGlvbiA6IGxhc3QgYW5pbWF0aW9uIGluIG9yZGVyIHRvIGNhbGN1bGF0ZSB0aW1lXHJcbiAgICAgKi9cclxuICAgIC8vIGNhbEFuaVRpbWUobWFya0lkcywgbGFzdEFuaW1hdGlvbikge1xyXG4gICAgY2FsQW5pVGltZShtYXJrSWRzKSB7XHJcbiAgICAgICAgbGV0IGxhc3RBbmltYXRpb24sIGFsaWduaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFsaWduICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBBbmltYXRpb24uYW5pbWF0aW9ucy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hbGlnbi50YXJnZXQgPT09IHZhbHVlLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdEFuaW1hdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFsaWduLnR5cGUgPT09IEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoRWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBpbmcgPSB2YWx1ZS5ncm91cGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5ncm91cGluZyA9IHZhbHVlLmdyb3VwaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbGFzdEFuaW1hdGlvbiAhPSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBsYXN0QW5pbWF0aW9uLmFuaXNBbGlnbmVkLnB1c2goYCR7dGhpcy5jaGFydElkeH1fJHt0aGlzLnNlbGVjdG9yfWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgZHVyYXRpb25zIG9mIHRoZSBhY3Rpb25zIGFyZSBzZXQgd2l0aCB0aGUgZGF0YSB2YXJpYWJsZXNcclxuICAgICAgICBsZXQgZHVyYXRpb25BdHRyVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBtYXJrSWQ7IGkgPCBtYXJrSWRzLmxlbmd0aCB8IChtYXJrSWQgPSBtYXJrSWRzW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBBdHRyVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgYWN0aW9uOyBqIDwgdGhpcy5hY3Rpb25zLmxlbmd0aCB8IChhY3Rpb24gPSB0aGlzLmFjdGlvbnNbal0pOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uLmR1cmF0aW9uID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQoZGF0dW1bYWN0aW9uLmR1cmF0aW9uLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkR1cmF0aW9uID0gdHlwZW9mIGFjdGlvbi5kdXJhdGlvbi5taW5EdXJhdGlvbiA9PSAndW5kZWZpbmVkJyA/IDMwMCA6IGFjdGlvbi5kdXJhdGlvbi5taW5EdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBdHRyVmFsdWVzLnNldChhY3Rpb24uZHVyYXRpb24uZmllbGQsIFt2YWx1ZSwgbWluRHVyYXRpb25dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkdXJhdGlvbkF0dHJWYWx1ZXMuc2V0KG1hcmtJZCwgdG1wQXR0clZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2FsY3VsYXRlIHRoZSBkdXJhdGlvbiBvZiBhbGwgYWN0aW9uc1xyXG4gICAgICAgIGxldCBbYWN0aW9uc0R1cmF0aW9ucywgbWluVmFsdWVFYWNoQXR0ciwgcHJvY2Vzc2VkQWN0aW9uc10gPSBBY3Rpb25TcGVjLmNhbEFjdGlvbkR1cmF0aW9uKHRoaXMuYWN0aW9ucywgZHVyYXRpb25BdHRyVmFsdWVzLCBBbmltYXRpb24uZG9tTWFya3MpO1xyXG4gICAgICAgIC8vY29uc3RydWN0IHRyZWUgd2hpbGUgb3JkZXIgdGhlIG1hcmtzIGFjY29yZGluZyB0byBcInNvcnRcIlxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjdXJyZW50IGdyb3VwaWc6ICcsIHRoaXMuZ3JvdXBpbmcpO1xyXG4gICAgICAgIGxldCB0bXBNYXJrc0luT3JkZXIgPSBbXSwgbGVhdmVzT2ZBbmltYXRpb24gPSBbXTtcclxuICAgICAgICBpZiAoYWxpZ25pbmcpIHtcclxuICAgICAgICAgICAgW3RtcE1hcmtzSW5PcmRlciwgbGVhdmVzT2ZBbmltYXRpb25dID0gdGhpcy5fZ3JvdXBpbmcuYXJyYW5nZU9yZGVyKG1hcmtJZHMsIEFuaW1hdGlvbi5kb21NYXJrcywgdGhpcy5yb290LCB0aGlzLnJlZmVyZW5jZSwgYWxpZ25pbmcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFt0bXBNYXJrc0luT3JkZXIsIGxlYXZlc09mQW5pbWF0aW9uXSA9IHRoaXMuZ3JvdXBpbmcuYXJyYW5nZU9yZGVyKG1hcmtJZHMsIEFuaW1hdGlvbi5kb21NYXJrcywgdGhpcy5yb290LCB0aGlzLnJlZmVyZW5jZSwgYWxpZ25pbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWxpZ25pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290LmNoaWxkcmVuID0gbGVhdmVzT2ZBbmltYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdhZnRlciBncm91cGluZzogJywgdGhpcy5ncm91cGluZyk7XHJcbiAgICAgICAgdGhpcy5tYXJrc0luT3JkZXIgPSB0bXBNYXJrc0luT3JkZXI7XHJcbiAgICAgICAgdGhpcy5sZWF2ZXMgPSBsZWF2ZXNPZkFuaW1hdGlvbjtcclxuXHJcbiAgICAgICAgbGV0IG1hcmtBbmkgPSBuZXcgTWFwKCk7Ly90aGUgdGltZSBzcGVjcyBhbmQgYWN0aW9uIHNwZWNzIG9mIGVhY2ggbWFyaywgZm9yIG5vdyB1c2luZyBNYXAsIGNoZWNrIGxhdGVyIHRvIHNlZSB3aGV0aGVyIGl0IGlzIHdvcnRoeSB0byBjaGFuZ2UgdG8gQXJyYXlcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbWFya0lkOyBpIDwgdGhpcy5tYXJrc0luT3JkZXIubGVuZ3RoIHwgKG1hcmtJZCA9IHRoaXMubWFya3NJbk9yZGVyW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vcmVjb3JkIHZpc3VhbCBzdGF0dXMgb2YgYWxsIG1hcmtzXHJcbiAgICAgICAgICAgIGxldCB0bXBPYmogPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIHZBdHRyOyBqIDwgQW5pbWF0aW9uLnZpc3VhbEF0dHJzLmxlbmd0aCB8ICh2QXR0ciA9IEFuaW1hdGlvbi52aXN1YWxBdHRyc1tqXSk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbdkF0dHJdID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodkF0dHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3BhY2l0eSc6Ly9naXZlIGRlZmF1bHQgb3BhY2l0eSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3aWR0aCc6Ly91c2UgdGhlIHdpZHRoIG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYldpZHRoJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVpZ2h0JzovL3VzZSB0aGUgaGVpZ2h0IG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYkhlaWdodCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOi8vdXNlIHRoZSBwb3NpdGlvbiB4IG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYlgnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5JzovL3VzZSB0aGUgcG9zaXRpb24geSBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJZJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3gnOi8vdXNlIHRoZSBjZW50ZXIgb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydjeCddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2N4J107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiWCddICsgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYldpZHRoJ10gLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N5JzovL3VzZSB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnY3knXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydjeSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYlknXSArIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJIZWlnaHQnXSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5uZXJSYWRpdXMnOi8vZ2l2ZSBkZWZhdWx0IGlubmVyIHJhZGl1cyAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnaW5uZXJSYWRpdXMnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydpbm5lclJhZGl1cyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ291dHRlclJhZGl1cyc6Ly91c2UgaGFsZiBvZiB0aGUgZGlhZ29uYWwgbGluZSBvZiB0aGUgYm91bmRpbmcgYm94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnb3V0dGVyUmFkaXVzJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnb3V0dGVyUmFkaXVzJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBNYXRoLnNxcnQoTWF0aC5wb3coQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYldpZHRoJ10gLyAyLCAyKSArIE1hdGgucG93KEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJIZWlnaHQnXSAvIDIsIDIpKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RhcnRBbmdsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnc3RhcnRBbmdsZSddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ3N0YXJ0QW5nbGUnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5kQW5nbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2VuZEFuZ2xlJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZW5kQW5nbGUnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IE1hdGguUEkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpW3ZBdHRyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5maW5hbFN0YXR1cy5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5maW5hbFN0YXR1cy5zZXQobWFya0lkLCBbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQW5pbWF0aW9uLmZpbmFsU3RhdHVzLmdldChtYXJrSWQpLnB1c2godG1wT2JqKTtcclxuXHJcbiAgICAgICAgICAgIG1hcmtBbmkuc2V0KG1hcmtJZCwge1xyXG4gICAgICAgICAgICAgICAgJ3N0YXJ0VGltZSc6IDAsIC8vc3RhcnQgdGltZSBvZiB0aGlzIG1hcmsgXHJcbiAgICAgICAgICAgICAgICAndG90YWxEdXJhdGlvbic6IGFjdGlvbnNEdXJhdGlvbnMuZ2V0KG1hcmtJZCksIC8vdG90YWwgZHVyYXRpb24gb2YgYWxsIHRoZSBhY3Rpb25zIG9mIHRoaXMgbWFya1xyXG4gICAgICAgICAgICAgICAgJ2FjdGlvbkF0dHJzJzogW10gLy9hY3Rpb24gYXR0cmlidXRlcyBvZiB0aGlzIG1hcmtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2FsY3VsYXRlIHRpbWUgYWNjb3JkaW5nIHRvIGdyb3VwaW5nXHJcbiAgICAgICAgbGV0IHRpbWVEaWZmID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmFsaWduLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5pbWF0aW9uLmFsaWduVGFyZ2V0LndpdGhFbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSB0aGlzLmNhbFRpbWVBc0VsZShtYXJrQW5pLCBsYXN0QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5pbWF0aW9uLmFsaWduVGFyZ2V0LndpdGhPYmo6XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZURpZmYgPSB0aGlzLmNhbFRpbWVBc09iaihtYXJrQW5pLCBsYXN0QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7Ly9maXJzdCBhbmltYXRpb24gdW5pdFxyXG4gICAgICAgICAgICB0aW1lRGlmZiA9IHRoaXMuY2FsVGltZUFzT2JqKG1hcmtBbmksIGxhc3RBbmltYXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWFya0FuaS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBPYmogPSB7ICdzdGFydFRpbWUnOiB2YWx1ZS5zdGFydFRpbWUgKyB0aW1lRGlmZi5nZXQobWFya0lkKSwgJ3RvdGFsRHVyYXRpb24nOiB2YWx1ZS50b3RhbER1cmF0aW9uLCAnYWN0aW9uQXR0cnMnOiBbXSB9O1xyXG4gICAgICAgICAgICB0aGF0LnVwZGF0ZUFuaVN0YXJ0QW5kRW5kVGltZSh0bXBPYmopO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYTsgaSA8IHByb2Nlc3NlZEFjdGlvbnMubGVuZ3RoIHwgKGEgPSBwcm9jZXNzZWRBY3Rpb25zW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQWN0aW9uU3BlYyA9IG5ldyBBY3Rpb25TcGVjKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGF0dHI7IGogPCBrZXlzLmxlbmd0aCB8IChhdHRyID0ga2V5c1tqXSk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWNbYXR0cl0gPSBhW2F0dHJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyID09PSAnX2R1cmF0aW9uJyAmJiB0eXBlb2YgYVthdHRyXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydkYXRhLWRhdHVtJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaW5BdHRyVmFsdWUgPSBtaW5WYWx1ZUVhY2hBdHRyLmdldChhW2F0dHJdLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uU3BlY1thdHRyXSA9IGFbYXR0cl0ubWluRHVyYXRpb24gKiBwYXJzZUZsb2F0KGRhdHVtW2FbYXR0cl0uZmllbGRdKSAvIG1pbkF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHIgPT09ICdvZmZzZXRTdGFydCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uU3BlY1thdHRyXSA9IGFbYXR0cl0uZ2V0KG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgYW5pbWF0aW9uIHR5cGUgaXMgY3VzdG9tIHRoZW4ganVkZ2UgaWYgdGhlIGF0dHJpYnV0ZSBpbiB0aGUgYWN0aW9uIGFib3V0IHRvIGFkZCBpcyBhIHZhbGlkIHByb3BlcnR5IG9mIHRoZSB0YXJnZXQgbWFya1xyXG4gICAgICAgICAgICAgICAgaWYgKHRtcEFjdGlvblNwZWMuYW5pbWF0aW9uVHlwZSA9PT0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmN1c3RvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tWYWxpZFByb3AoQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWyd0YWdOYW1lJ10sIHRtcEFjdGlvblNwZWMuYXR0cmlidXRlWzBdLmF0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmouYWN0aW9uQXR0cnMucHVzaCh0bXBBY3Rpb25TcGVjKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hY3Rpb25BdHRycy5wdXNoKHRtcEFjdGlvblNwZWMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtYXJrQW5pLnNldChtYXJrSWQsIHRtcE9iaik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgbWFya0FuaS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBzdGFydCB0aW1lIG9mIGFjdGlvbnNcclxuICAgICAgICAgICAgbGV0IGZyYW1lVGltZVBvaW50ID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5hY3Rpb25BdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuYWN0aW9uQXR0cnNbaV0uc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lICsgdmFsdWUuYWN0aW9uQXR0cnNbaV0ub2Zmc2V0U3RhcnQ7Ly9hYnNvbHV0ZSBzdGFydCB0aW1lXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUuYWN0aW9uQXR0cnNbaV0uc3RhcnRUaW1lICsgdmFsdWUuYWN0aW9uQXR0cnNbaV0uZHVyYXRpb24gPiBmcmFtZVRpbWVQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lVGltZVBvaW50ID0gdmFsdWUuYWN0aW9uQXR0cnNbaV0uc3RhcnRUaW1lICsgdmFsdWUuYWN0aW9uQXR0cnNbaV0uZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLnNldChtYXJrSWQsIHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHsvL21lcmdlIGFuaW1hdGlvbiBzcGVjcyBmb3IgdGhlIHNhbWUgbWFya1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRTdGFydFRpbWUgPSBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudEVuZFRpbWUgPSBjdXJyZW50U3RhcnRUaW1lICsgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLnN0YXJ0VGltZSA9IGN1cnJlbnRTdGFydFRpbWUgPCB2YWx1ZS5zdGFydFRpbWUgPyBjdXJyZW50U3RhcnRUaW1lIDogdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEVuZFRpbWUgPSB2YWx1ZS5zdGFydFRpbWUgKyB2YWx1ZS50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEVuZFRpbWUgPSBjdXJyZW50RW5kVGltZSA+IHRtcEVuZFRpbWUgPyBjdXJyZW50RW5kVGltZSA6IHRtcEVuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS50b3RhbER1cmF0aW9uID0gY3VycmVudEVuZFRpbWUgLSBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5hY3Rpb25BdHRycyA9IFsuLi5BbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5hY3Rpb25BdHRycywgLi4udmFsdWUuYWN0aW9uQXR0cnNdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjYWxUaW1lQXNFbGUobWFya0FuaSwgbGFzdEFuaW1hdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucm9vdC5hbGlnbiA9IHRoaXMuYWxpZ247XHJcbiAgICAgICAgLy9yZWNvcmQgdGhlIHN0YXJ0IHRpbWUgYW5kIGR1cmF0aW9uIG9mIHRoZSBsZWF2ZXMgaW4gbGFzdCBhbmltYXRpb25cclxuICAgICAgICBsYXN0QW5pbWF0aW9uLmxlYXZlcy5mb3JFYWNoKGwgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYXJrc0luTGVhZiA9IGwubWFya3M7XHJcbiAgICAgICAgICAgIGwubGVhZlN0YXJ0ID0gMTAwMDAwO1xyXG4gICAgICAgICAgICBsLmxlYWZFbmQgPSAwO1xyXG4gICAgICAgICAgICBtYXJrc0luTGVhZi5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0bXBNQW5pID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCk7XHJcbiAgICAgICAgICAgICAgICB0bXBNQW5pLnN0YXJ0VGltZSA8IGwubGVhZlN0YXJ0ID8gbC5sZWFmU3RhcnQgPSB0bXBNQW5pLnN0YXJ0VGltZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAodG1wTUFuaS5zdGFydFRpbWUgKyB0bXBNQW5pLnRvdGFsRHVyYXRpb24pID4gbC5sZWFmRW5kID8gbC5sZWFmRW5kID0gKHRtcE1Bbmkuc3RhcnRUaW1lICsgdG1wTUFuaS50b3RhbER1cmF0aW9uKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgY2FuIGFsaWduIGJhc2VkIG9uIGRhdGFcclxuICAgICAgICAvLyBsZXQgYWxpZ25PbkRhdGEgPSBmYWxzZTtcclxuICAgICAgICBsZXQgbGVhZk1hcHBpbmcgPSBuZXcgTWFwKCk7Ly9rZXk6IGxlYWYgaW5kZXggaW4gY3VycmVudCBhbmltYXRpb24sIHZhbHVlOiBpbmRleCBvZiB0aGUgY29ycmVzcG9uZGluZyBsZWFmIGluIGxhc3QgYW5pbWF0aW9uXHJcbiAgICAgICAgbGFzdEFuaW1hdGlvbi5sZWF2ZXMuZm9yRWFjaCgobCwgbGVhZklkeCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbWFya3NTYW1lRGF0dW0gPSBbXTtcclxuICAgICAgICAgICAgbC5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIENoYXJ0U3BlYy5tYXJrc1dpdGhTYW1lRGF0dW0uZ2V0KG1JZCkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya3NTYW1lRGF0dW0ucHVzaCguLi5DaGFydFNwZWMubWFya3NXaXRoU2FtZURhdHVtLmdldChtSWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgbWFya3NTYW1lRGF0dW0gPSBbLi4ubmV3IFNldChtYXJrc1NhbWVEYXR1bSldO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbWFya3Mgc2FtZSBkYXR1bTogJywgbWFya3NTYW1lRGF0dW0sIHRoYXQubGVhdmVzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoYXQubGVhdmVzLmxlbmd0aCwgdG1wTDsgaSA8IGxlbiB8ICh0bXBMID0gdGhhdC5sZWF2ZXNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGVhZk1hcHBpbmcuZ2V0KGkpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYWZNYXBwaW5nLnNldChpLCBbXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tpbmc6ICcsIG1hcmtzU2FtZURhdHVtLCB0bXBMLm1hcmtzKTtcclxuICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuYXJySXNDb250YWluZWQobWFya3NTYW1lRGF0dW0sIHRtcEwubWFya3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NvbnRhaW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYWZNYXBwaW5nLmdldChpKS5wdXNoKGxlYWZJZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYWxpZ25PbkRhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnd2hldGhlciBhbGlnbiBvbiBkYXRhOiAnLCB0aGlzLCB0aGlzLmFsaWduT25EYXRhLCB0aGlzLmxlYXZlcyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsaWduT25EYXRhKSB7Ly9hbGlnbiBvbmUgYWZ0ZXIgYW5vdGhlclxyXG4gICAgICAgICAgICBjb25zdCBsZWFmTnVtID0gdGhpcy5sZWF2ZXMubGVuZ3RoID4gbGFzdEFuaW1hdGlvbi5sZWF2ZXMubGVuZ3RoID8gdGhpcy5sZWF2ZXMubGVuZ3RoIDogbGFzdEFuaW1hdGlvbi5sZWF2ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgb2ZzdFRpbWUgPSAwOy8vcmVjb3JkIHRoZSB0aW1lIG9mZnNldCBmb3IgZWFjaCBsZWFmIG9mIHRoZSBsYXN0IFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlYWZOdW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRMZWFmTGFzdEFuaSA9IGxhc3RBbmltYXRpb24ubGVhdmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RsZWFmQ3VycmVudEFuaSA9IHRoaXMubGVhdmVzW2kgLSAxXTtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGVhZkN1cnJlbnRBbmkgPSB0aGlzLmxlYXZlc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCBhbGlnblRvSWQgPSAnJywgYWxpZ25XaXRoSWQgPSAnJztcclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRpbWlnIG9mIHRoZSBjdXJyZW50IGxlYWYgZnJvbSBjdXJyZW50IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkN1cnJlbnRBbmkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25XaXRoSWQgPSBjdXJyZW50TGVhZkN1cnJlbnRBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkxhc3RBbmkgPT09ICd1bmRlZmluZWQnKSB7Ly9jYW5ub3QgZmluZCB0aGUgY29ycmVzcG5kaW5nIGxlYWYgZnJvbSBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RsZWFmQ3VycmVudEFuaSAhPT0gJ3VuZGVmaW5lZCcpIHsvL2FsaWduIHdpdGggbGFzdCBsZWFmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbmQgc3RhcnQgYW5kIGVuZCBvZiBsYXN0IGxlYWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmU3RhcnQgPSAxMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZkVuZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bGVhZkN1cnJlbnRBbmkubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcE1BbmkgPSBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBNQW5pLnN0YXJ0VGltZSA8IGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmU3RhcnQgPyBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZlN0YXJ0ID0gdG1wTUFuaS5zdGFydFRpbWUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0bXBNQW5pLnN0YXJ0VGltZSArIHRtcE1BbmkudG90YWxEdXJhdGlvbikgPiBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZkVuZCA/IGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmRW5kID0gKHRtcE1Bbmkuc3RhcnRUaW1lICsgdG1wTUFuaS50b3RhbER1cmF0aW9uKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mc3RUaW1lID0gdGhpcy5jYWxPZnN0VGltZUZvckxhc3RBbmkoY3VycmVudExlYWZDdXJyZW50QW5pLCBsYXN0bGVhZkN1cnJlbnRBbmksIG1hcmtBbmkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsvL2FsaWduIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbGVhZiBmcm9tIGxhc3QgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmQ3VycmVudEFuaS5hbGlnblRvID0gY3VycmVudExlYWZMYXN0QW5pLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRMZWFmTGFzdEFuaS5hbGlnbldpdGhMZWF2ZXMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkxhc3RBbmkuYWxpZ25XaXRoTGVhdmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlcy5wdXNoKGN1cnJlbnRMZWFmQ3VycmVudEFuaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduVG9JZCA9IGN1cnJlbnRMZWFmTGFzdEFuaS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2ZzdFRpbWUgPSB0aGlzLmNhbE9mc3RUaW1lRm9yTGFzdEFuaShjdXJyZW50TGVhZkN1cnJlbnRBbmksIGN1cnJlbnRMZWFmTGFzdEFuaSwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvZnN0VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgdGltaW5nIG9mIHRoZSBjdXJyZW50IGxlYWYgZnJvbSBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gY29uc3QgdG1wQW5pSWQgPSBgJHt0aGlzLmNoYXJ0SWR4fV8jJHt0aGlzLm1hcmtzSW5PcmRlci5qb2luKCcsICMnKX1gO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wQW5pSWQgPSBgJHt0aGlzLmNoYXJ0SWR4fV8ke3RoaXMuc2VsZWN0b3J9YDtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGlnbiBvbiBub25kYXRhOiBhbmlJZCcsIHRtcEFuaUlkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTGFzdEFuaW1hdGlvblRpbWluZyhsYXN0QW5pbWF0aW9uLCBjdXJyZW50TGVhZkxhc3RBbmksIG9mc3RUaW1lLCBhbGlnblRvSWQsIGFsaWduV2l0aElkLCB0bXBBbmlJZCk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmcobGFzdEFuaW1hdGlvbiwgY3VycmVudExlYWZMYXN0QW5pLCBvZnN0VGltZSwgYWxpZ25Ub0lkLCBhbGlnbldpdGhJZCwgdGhpcy5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsZWFmTnVtID0gdGhpcy5sZWF2ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgb2ZzdFRpbWUgPSAwOy8vcmVjb3JkIHRoZSB0aW1lIG9mZnNldCBmb3IgZWFjaCBsZWFmIG9mIHRoZSBsYXN0IFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlYWZOdW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRMZWFmTGFzdEFuaSA9IGxhc3RBbmltYXRpb24ubGVhdmVzW2xlYWZNYXBwaW5nLmdldChpKVswXV07XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdGxlYWZDdXJyZW50QW5pID0gdGhpcy5sZWF2ZXNbaSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRMZWFmQ3VycmVudEFuaSA9IHRoaXMubGVhdmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsaWduIHJlYWxpb246ICcsIGN1cnJlbnRMZWFmQ3VycmVudEFuaSwgbGFzdGxlYWZDdXJyZW50QW5pLCBjdXJyZW50TGVhZkxhc3RBbmkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFsaWduVG9JZCA9ICcnLCBhbGlnbldpdGhJZCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgdGltaWcgb2YgdGhlIGN1cnJlbnQgbGVhZiBmcm9tIGN1cnJlbnQgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRMZWFmQ3VycmVudEFuaSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGlnbldpdGhJZCA9IGN1cnJlbnRMZWFmQ3VycmVudEFuaS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRMZWFmTGFzdEFuaSA9PT0gJ3VuZGVmaW5lZCcpIHsvL2Nhbm5vdCBmaW5kIHRoZSBjb3JyZXNwbmRpbmcgbGVhZiBmcm9tIGxhc3QgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFzdGxlYWZDdXJyZW50QW5pICE9PSAndW5kZWZpbmVkJykgey8vYWxpZ24gd2l0aCBsYXN0IGxlYWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZmluZCBzdGFydCBhbmQgZW5kIG9mIGxhc3QgbGVhZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZTdGFydCA9IDEwMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmRW5kID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsZWFmQ3VycmVudEFuaS5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wTUFuaSA9IG1hcmtBbmkuZ2V0KG1JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTUFuaS5zdGFydFRpbWUgPCBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZlN0YXJ0ID8gbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZTdGFydCA9IHRtcE1Bbmkuc3RhcnRUaW1lIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG1wTUFuaS5zdGFydFRpbWUgKyB0bXBNQW5pLnRvdGFsRHVyYXRpb24pID4gbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZFbmQgPyBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZkVuZCA9ICh0bXBNQW5pLnN0YXJ0VGltZSArIHRtcE1BbmkudG90YWxEdXJhdGlvbikgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZnN0VGltZSA9IHRoaXMuY2FsT2ZzdFRpbWVGb3JMYXN0QW5pKGN1cnJlbnRMZWFmQ3VycmVudEFuaSwgbGFzdGxlYWZDdXJyZW50QW5pLCBtYXJrQW5pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly9hbGlnbiB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGxlYWYgZnJvbSBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkN1cnJlbnRBbmkuYWxpZ25UbyA9IGN1cnJlbnRMZWFmTGFzdEFuaS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkxhc3RBbmkuYWxpZ25XaXRoTGVhdmVzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmTGFzdEFuaS5hbGlnbldpdGhMZWF2ZXMucHVzaChjdXJyZW50TGVhZkN1cnJlbnRBbmkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnblRvSWQgPSBjdXJyZW50TGVhZkxhc3RBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mc3RUaW1lID0gdGhpcy5jYWxPZnN0VGltZUZvckxhc3RBbmkoY3VycmVudExlYWZDdXJyZW50QW5pLCBjdXJyZW50TGVhZkxhc3RBbmksIG1hcmtBbmkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2ZzdFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRpbWluZyBvZiB0aGUgY3VycmVudCBsZWFmIGZyb20gbGFzdCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHRtcEFuaUlkID0gYCR7dGhpcy5jaGFydElkeH1fIyR7dGhpcy5tYXJrc0luT3JkZXIuam9pbignLCAjJyl9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcEFuaUlkID0gYCR7dGhpcy5jaGFydElkeH1fJHt0aGlzLnNlbGVjdG9yfWA7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxpZ24gb24gZGF0YTogYW5pSWQnLCB0bXBBbmlJZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmcobGFzdEFuaW1hdGlvbiwgY3VycmVudExlYWZMYXN0QW5pLCBvZnN0VGltZSwgYWxpZ25Ub0lkLCBhbGlnbldpdGhJZCwgdG1wQW5pSWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy51cGRhdGVMYXN0QW5pbWF0aW9uVGltaW5nKGxhc3RBbmltYXRpb24sIGN1cnJlbnRMZWFmTGFzdEFuaSwgb2ZzdFRpbWUsIGFsaWduVG9JZCwgYWxpZ25XaXRoSWQsIHRoaXMuaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jYWxBbmlPZmZzZXQobWFya0FuaSwgdW5kZWZpbmVkLCBBbmltYXRpb24uYWxpZ25UYXJnZXQud2l0aEVsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsT2ZzdFRpbWVGb3JMYXN0QW5pKGxlYWYsIGxlYWZUb0FsaWduLCBtYXJrQW5pKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NhbCBvZmZzZXQgdGltZTogJywgbGVhZiwgbGVhZlRvQWxpZ24pO1xyXG4gICAgICAgIGxldCB0bXBPZnN0VGltZSA9IDA7XHJcbiAgICAgICAgbGVhZi5zdGFydCA9IDEwMDAwMDA7XHJcbiAgICAgICAgbGVhZi5lbmQgPSAwO1xyXG4gICAgICAgIGxldCBtU3RhcnRUaW1lID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMucmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgICAgIG1TdGFydFRpbWUgPSBsZWFmVG9BbGlnbi5sZWFmU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBsZWFmLm1hcmtzLmZvckVhY2gobUlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtRHVyYXRpb24gPSBtYXJrQW5pLmdldChtSWQpLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgPSBtU3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lICsgbUR1cmF0aW9uIC0gbGVhZlRvQWxpZ24ubGVhZkVuZCA+IHRtcE9mc3RUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9mc3RUaW1lID0gbVN0YXJ0VGltZSArIG1EdXJhdGlvbiAtIGxlYWZUb0FsaWduLmxlYWZFbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lIDwgbGVhZi5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFmLnN0YXJ0ID0gbVN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1TdGFydFRpbWUgKyBtRHVyYXRpb24gPiBsZWFmLmVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFmLmVuZCA9IG1TdGFydFRpbWUgKyBtRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0bXBPZnN0VGltZTtcclxuICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c0VuZDpcclxuICAgICAgICAgICAgICAgIG1TdGFydFRpbWUgPSBsZWFmVG9BbGlnbi5sZWFmRW5kO1xyXG4gICAgICAgICAgICAgICAgbGVhZlRvQWxpZ24uYWxpZ25XaXRoTGVhdmVzLmZvckVhY2gobCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsLmxlYWZFbmQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsLmxlYWZFbmQgPiBtU3RhcnRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtU3RhcnRUaW1lID0gbC5sZWFmRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbC5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1FbmRUaW1lID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lICsgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobUVuZFRpbWUgPiBtU3RhcnRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1TdGFydFRpbWUgPSBtRW5kVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBsZWFmLm1hcmtzLmZvckVhY2gobUlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtRHVyYXRpb24gPSBtYXJrQW5pLmdldChtSWQpLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgPSBtU3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lICsgbUR1cmF0aW9uID4gdG1wT2ZzdFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2ZzdFRpbWUgPSBtRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lIDwgbGVhZi5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFmLnN0YXJ0ID0gbVN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1TdGFydFRpbWUgKyBtRHVyYXRpb24gPiBsZWFmLmVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFmLmVuZCA9IG1TdGFydFRpbWUgKyBtRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0bXBPZnN0VGltZTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGFzdEFuaW1hdGlvblRpbWluZyhsYXN0QW5pbWF0aW9uLCBjdXJyZW50TGVhZkxhc3RBbmksIG9mc3RUaW1lLCBhbGlnblRvSWQsIGFsaWduV2l0aElkLCBhbGlnbldpdGhBbmlJZCwga2VlcFVwZGF0aW5nID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIC8vIGxldCB0bXBBbGlnblRvSWQgPSAnJztcclxuICAgICAgICBpZiAoYWxpZ25Ub0lkICE9PSAnJykge1xyXG4gICAgICAgICAgICBsYXN0QW5pbWF0aW9uLmxlYXZlcy5mb3JFYWNoKGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGwuaWQgPT09IGFsaWduVG9JZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC5hbGlnbldpdGggPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuYWxpZ25XaXRoID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGwuYWxpZ25XaXRoLnB1c2goYWxpZ25XaXRoQW5pSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC5hbGlnbldpdGhJZHMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwuYWxpZ25XaXRoSWRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGwuYWxpZ25XaXRoSWRzLnB1c2goYWxpZ25XaXRoSWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRMZWFmTGFzdEFuaSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vZmluZCB0aGUgbGVhdmVzIGZyb20gbGFzdCBhbmltYXRpb24gd2l0aCB0aGUgc2FtZSBzdGFydCB0aW1lIGFzIGN1cnJlbnRMZWFmTGFzdEFuaVxyXG4gICAgICAgICAgICBsYXN0QW5pbWF0aW9uLmxlYXZlcy5mb3JFYWNoKGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0ID0gY3VycmVudExlYWZMYXN0QW5pLmxlYWZTdGFydDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudExlYWZMYXN0QW5pU3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZMYXN0QW5pU3RhcnQgPSAxMDAwMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkxhc3RBbmkubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lIDwgY3VycmVudExlYWZMYXN0QW5pU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0ID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC5sZWFmU3RhcnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwubGVhZlN0YXJ0ID4gY3VycmVudExlYWZMYXN0QW5pU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcExlYWZTdGFydCA9IDEwMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbC5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgKz0gb2ZzdFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lIDwgdG1wTGVhZlN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTGVhZlN0YXJ0ID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSArIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnRvdGFsRHVyYXRpb24gPiBsLmxlYWZFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLmxlYWZFbmQgPSBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgKyBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobC5sZWFmRW5kID4gbGFzdEFuaW1hdGlvbi5hbmltYXRpb25FbmRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5hbmltYXRpb25FbmRUaW1lID0gbC5sZWFmRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuYWN0aW9uQXR0cnMuZm9yRWFjaChhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnN0YXJ0VGltZSArPSBvZnN0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubGVhZlN0YXJ0ID0gdG1wTGVhZlN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbC5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgPiBjdXJyZW50TGVhZkxhc3RBbmlTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lICs9IG9mc3RUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSArIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnRvdGFsRHVyYXRpb24gPiBsYXN0QW5pbWF0aW9uLmFuaW1hdGlvbkVuZFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QW5pbWF0aW9uLmFuaW1hdGlvbkVuZFRpbWUgPSBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgKyBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuYWN0aW9uQXR0cnMuZm9yRWFjaChhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnN0YXJ0VGltZSArPSBvZnN0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIHRoZXJlIGFyZSBvdGhlciBhbmlzIGFsaWduZWQgdG8gdGhpcyBvbmVcclxuICAgICAgICAgICAgaWYgKGxhc3RBbmltYXRpb24uYW5pc0FsaWduZWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5hbmlzQWxpZ25lZC5mb3JFYWNoKGFuaUlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pSWQgIT09IGAke3RoYXQuY2hhcnRJZHh9XyR7dGhhdC5zZWxlY3Rvcn1gKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaUFsaWduZWQgPSBBbmltYXRpb24uYW5pbWF0aW9ucy5nZXQoYW5pSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudGxlYWZBbGlnbmVkQW5pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcExlYWYgPSBjdXJyZW50TGVhZkxhc3RBbmkuYWxpZ25XaXRoTGVhdmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSBhbmlBbGlnbmVkLmxlYXZlcy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wTGVhZi5pZCA9PT0gYW5pQWxpZ25lZC5sZWF2ZXNbal0uaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudGxlYWZBbGlnbmVkQW5pID0gdG1wTGVhZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50bGVhZkFsaWduZWRBbmkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51cGRhdGVMYXN0QW5pbWF0aW9uVGltaW5nKGFuaUFsaWduZWQsIGN1cnJlbnRsZWFmQWxpZ25lZEFuaSwgb2ZzdFRpbWUsICcnLCAnJywgJycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgbmVlZCB0byBrZWVwIHVwZGF0aW5nIFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RBbmltYXRpb24uYWxpZ24gIT09ICd1bmRlZmluZWQnICYmIGtlZXBVcGRhdGluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBbmltYXRpb24uYWxpZ24udHlwZSA9PT0gQW5pbWF0aW9uLmFsaWduVGFyZ2V0LndpdGhFbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wQW5pO1xyXG4gICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RBbmltYXRpb24uYWxpZ24udGFyZ2V0ID09PSB2YWx1ZS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQW5pID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlTGFzdEFuaW1hdGlvblRpbWluZyh0bXBBbmksIGN1cnJlbnRMZWFmTGFzdEFuaSwgb2ZzdFRpbWUsICcnLCAnJywgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhbFRpbWVBc09iaihtYXJrQW5pLCBsYXN0QW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cGluZy5jYWxUaW1lV2l0aFRyZWUodGhpcy5yb290LCAtMSwgLTEsIG1hcmtBbmkpO1xyXG4gICAgICAgIHRoaXMucm9vdC50aW1pbmdSZWYgPSB0aGlzLnJlZmVyZW5jZTtcclxuICAgICAgICB0aGlzLnJvb3Qub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5yb290LmFsaWduID0gdGhpcy5hbGlnbjtcclxuICAgICAgICB0aGlzLnJvb3QuYW5pSWQgPSB0aGlzLmlkO1xyXG4gICAgICAgIC8vdXBkYXRlIHRpbWUgYWNjb3JkaW5nIHRvIHRoZSB0aW1lIHNwZWMgb2YgYW5pbWF0aW9uXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsQW5pT2Zmc2V0KG1hcmtBbmksIGxhc3RBbmltYXRpb24sIEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoT2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxBbmlPZmZzZXQobWFya0FuaSwgbGFzdEFuaW1hdGlvbiwgdHlwZSkge1xyXG4gICAgICAgIGxldCB0bXBBbGxTdGFydCA9IDEwMDAwO1xyXG4gICAgICAgIG1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuc3RhcnRUaW1lIDwgdG1wQWxsU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIHRtcEFsbFN0YXJ0ID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZiAodHlwZSA9PT0gQW5pbWF0aW9uLmFsaWduVGFyZ2V0LndpdGhFbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsRUxlT2Zmc2V0VGltZShBbmltYXRpb24uZG9tTWFya3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgbGFzdEFuaW1hdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLmNhbE9mZnNldFRpbWUoMCwgMCwgdG1wQWxsU3RhcnQsIEFuaW1hdGlvbi5kb21NYXJrcykgOiB0aGlzLmNhbE9mZnNldFRpbWUobGFzdEFuaW1hdGlvbi5hbmltYXRpb25TdGFydFRpbWUsIGxhc3RBbmltYXRpb24uYW5pbWF0aW9uRW5kVGltZSwgdG1wQWxsU3RhcnQsIEFuaW1hdGlvbi5kb21NYXJrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFuaVN0YXJ0QW5kRW5kVGltZShhbmlPYmopIHtcclxuICAgICAgICBpZiAoYW5pT2JqLnN0YXJ0VGltZSA8IHRoaXMuYW5pbWF0aW9uU3RhcnRUaW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhcnRUaW1lID0gYW5pT2JqLnN0YXJ0VGltZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFuaU9iai5zdGFydFRpbWUgKyBhbmlPYmoudG90YWxEdXJhdGlvbiA+IHRoaXMuYW5pbWF0aW9uRW5kVGltZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkVuZFRpbWUgPSBhbmlPYmouc3RhcnRUaW1lICsgYW5pT2JqLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsY3VsYXRlIHRpbWluZyBmb3IgZWFjaCBhY3Rpb24gdGhlbiByZW5kZXIgYW5pbWF0aW9uIGJ5IHNsaWNpbmcgdGhlIGFjdGlvbiBzcGVjcyBpbnRvIGZyYW1lc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVuZGVyQW5pbWF0aW9uKHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYWxsTWFya0FuaS5mb3JFYWNoKCh2YWx1ZSwgbWFya0lkKSA9PiB7XHJcbiAgICAgICAgICAgIC8vcmVjb3JkIHRoZSBlbmQgdGltZSBvZiB0aGUgZW50aXJlIGFuaW1hdGlvbiwgYW5kIHJlY29yZCB0aGUgaW5pdCBzdGF0dXMgb2YgZWFjaCBtYXJrXHJcbiAgICAgICAgICAgIGlmICh0aGF0Lndob2xlRW5kVGltZSA8IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLnRvdGFsRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoYXQud2hvbGVFbmRUaW1lID0gdmFsdWUuc3RhcnRUaW1lICsgdmFsdWUudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgc3RhdHVzLmluZm8gPSAnVGhlIGR1cmF0aW9uIG9mIHRoZSBnZW5lcmF0ZWQgYW5pbWF0aW9uIGlzOiAnICsgdGhpcy53aG9sZUVuZFRpbWUgKyAnbXMnO1xyXG5cclxuICAgICAgICAvL3JlcGxhY2UgdGhlICd3aG9sZUVuZCcgcGxhY2UgaG9sZGVyIGluIGR1cmF0aW9uXHJcbiAgICAgICAgdGhpcy5hbGxNYXJrQW5pLmZvckVhY2goKHZhbHVlLCBhKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpdGVtOyBpIDwgdmFsdWUuYWN0aW9uQXR0cnMubGVuZ3RoIHwgKGl0ZW0gPSB2YWx1ZS5hY3Rpb25BdHRyc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZHVyYXRpb24gPT09ICd3aG9sZUVuZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmR1cmF0aW9uID0gdGhhdC53aG9sZUVuZFRpbWUgLSBpdGVtLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zbGF0ZVRvTG90dGllQ2hhbm5lbChhdHRyTmFtZSkge1xyXG4gICAgICAgIHN3aXRjaCAoYXR0ck5hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSAnb3BhY2l0eSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5J11cclxuICAgICAgICAgICAgY2FzZSAneCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2N4JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3gnXTtcclxuICAgICAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2N5JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3knXTtcclxuICAgICAgICAgICAgY2FzZSAncic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzY2FsZVgnLCAnc2NhbGVZJ107XHJcbiAgICAgICAgICAgIGNhc2UgJ3dpZHRoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3NjYWxlWCddO1xyXG4gICAgICAgICAgICBjYXNlICdoZWlnaHQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc2NhbGVZJ107XHJcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxyXG4gICAgICAgICAgICBjYXNlICd4MSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3gyJzpcclxuICAgICAgICAgICAgY2FzZSAneTEnOlxyXG4gICAgICAgICAgICBjYXNlICd5Mic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzaGFwZSddO1xyXG4gICAgICAgICAgICBjYXNlICd0ZXh0Q29udGVudCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd0ZXh0J107XHJcbiAgICAgICAgICAgIGNhc2UgJ2ZpbGwnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZmlsbENvbG9yJ107XHJcbiAgICAgICAgICAgIGNhc2UgJ3N0cm9rZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzdHJva2VDb2xvciddO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWFwVG9Mb3R0aWVTcGVjKCkge1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLmFsbE1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmFjdGlvbkF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQWN0aW9uU3BlYyA9IHZhbHVlLmFjdGlvbkF0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRtcEFjdGlvblNwZWMuZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldE1hcmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpOy8vVE9ETzogcGFzcyBkb20gaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0bXBBY3Rpb25TcGVjLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogY29uc2lkZXIgJ2N1c3RvbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0RnJhbWUgPSBNYXRoLmNlaWwodG1wQWN0aW9uU3BlYy5zdGFydFRpbWUgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kRnJhbWUgPSBNYXRoLmNlaWwoKHRtcEFjdGlvblNwZWMuc3RhcnRUaW1lICsgdG1wQWN0aW9uU3BlYy5kdXJhdGlvbikgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZS5mb3JFYWNoKChhdHRyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wQWN0aW9uU3BlYy5hbmltYXRpb25UeXBlID09PSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXQgYW5jaG9yIGZvciByIGFuZCB0ZXh0IHBvc2l0aW9uIGNoYW5naW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLmF0dHJOYW1lID09PSAncicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQmJveCA9IGdldEJvdW5kaW5nQm94KHRhcmdldE1hcmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRTdGF0aWNQcm9wZXJ0eSgnYW5jaG9yWCcsIHRtcEJib3hbMl0gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclknLCB0bXBCYm94WzNdIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpLnRhZ05hbWUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRTdGF0aWNQcm9wZXJ0eSgnYW5jaG9yWScsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFuc2xhdGUgdmlzdWFsIGNoYW5uZWxzIHRvIGxvdHRpZSBjaGFubmVsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb3R0aWVDaGFubmVscyA9IEFuaW1hdGlvbi50cmFuc2xhdGVUb0xvdHRpZUNoYW5uZWwoYXR0ci5hdHRyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0ci50bykpIHsvL2RvaW5nIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyb21WYWx1ZSA9IDAsIHRvVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF0dHIudG8ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLnRvW2pdWzBdID09PSBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tVmFsdWUgPSBhdHRyLmZyb21bal1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSA9IGF0dHIudG9bal1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdHRpZUNoYW5uZWxzLmZvckVhY2goKGxjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGMgPT09ICdzaGFwZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYW5zZm9ybSB0aGUgc3RhcnQgZCBhbmQgZW5kIGQgdG8gc2hhcGUgc3BlY2lmaWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcm9tUG9zaSA9IFswLCAwXSwgdG9Qb3NpID0gWzAsIDBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0cmFuc2xhdGluZyBkIHRvIGxvdHRpZSBzcGVjOiAnLCBmcm9tVmFsdWUsIHRvVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtmcm9tUG9zaSwgZnJvbVZhbHVlXSA9IENhbmlzVXRpbC50cmFuc0RUb0xvdHRpZVNwZWMoZnJvbVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdG9Qb3NpLCB0b1ZhbHVlXSA9IENhbmlzVXRpbC50cmFuc0RUb0xvdHRpZVNwZWModG9WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tUG9zaVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qb3NpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Qb3NpWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1Bvc2lbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYyA9PT0gJ2ZpbGxDb2xvcicgfHwgbGMgPT09ICdzdHJva2VDb2xvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbVZhbHVlICYmIHRvVmFsdWUgJiYgZnJvbVZhbHVlICE9PSAnbm9uZScgJiYgdG9WYWx1ZSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IENhbmlzVXRpbC50b0xvdHRpZVJHQkEoZnJvbVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSA9IENhbmlzVXRpbC50b0xvdHRpZVJHQkEodG9WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gdG9WYWx1ZSA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYyA9PT0gJ29wYWNpdHknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlICo9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1ZhbHVlICo9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdHRpZUNoYW5uZWxzLmZvckVhY2goKGxjKSA9PiB7Ly9UT0RPOiBkaWZmZXJlbmNlIGZyb20gYW5kIHRvIHN0cmF0ZWd5IHdpdGggcG9zaXRpb25zIGFuZCBjaGFubmVscyBsaWtlIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5tYXJrTGF5ZXJzLmdldChtYXJrSWQpLnNldEFuaW1hdGFibGVQcm9wZXJ0eShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZnJvbSAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnRvICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsvL2lmIG5vdCBjdXN0b20sIHRoZW4gYXR0ck5hbWUgaXMgYWxyZWFkeSBsb3R0aWUgY2hhbm5lbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuYXR0ck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmZyb20gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIudG8gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG1wQWN0aW9uU3BlYy50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFza0xheWVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBCYm94ID0gZ2V0Qm91bmRpbmdCb3godGFyZ2V0TWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnb3V0dGVyUmFkaXVzJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodG1wQWN0aW9uU3BlYy5hbmltYXRpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSByZWN0IG1hc2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5tb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuYXBwZWFyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllciA9IExheWVyRmFjdG9yeS5ib3VuZGluZ0JveCh0YXJnZXRNYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGNpcmNsZSBtYXNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jaXJjbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyID0gTGF5ZXJGYWN0b3J5LmVsbGlwc2UodG1wQmJveFswXSArIHRtcEJib3hbMl0sIHRtcEJib3hbMV0gKyB0bXBCYm94WzNdLCByLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclgnLCB0bXBCYm94WzJdIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdhbmNob3JZJywgdG1wQmJveFszXSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgY2lyY2xlIG1hc2sgd2l0aCB0aGljayBib3JkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndoZWVsOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb2luZyB0byBnZXQgcGF0aCBvZmZzZXQ6ICcsIGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoT2Zmc2V0ID0gQ2FuaXNVdGlsLmdldFBhdGhPZmZzZXQodGFyZ2V0TWFyay5nZXRBdHRyaWJ1dGUoJ2QnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcE9mZnNldFggPSB0aGF0LmZpbmFsU3RhdHVzLmdldChtYXJrSWQpW3RtcEFjdGlvblNwZWMuY2hhcnRJZHhdWydjeCddICsgdG1wQmJveFswXSAtIHBhdGhPZmZzZXRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcE9mZnNldFkgPSB0aGF0LmZpbmFsU3RhdHVzLmdldChtYXJrSWQpW3RtcEFjdGlvblNwZWMuY2hhcnRJZHhdWydjeSddICsgdG1wQmJveFsxXSAtIHBhdGhPZmZzZXRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyID0gTGF5ZXJGYWN0b3J5LmVsbGlwc2UodG1wT2Zmc2V0WCwgdG1wT2Zmc2V0WSwgciwgcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBTdGFydEFuZ2xlID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnc3RhcnRBbmdsZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBFbmRBbmdsZSA9IHRoYXQuZmluYWxTdGF0dXMuZ2V0KG1hcmtJZClbdG1wQWN0aW9uU3BlYy5jaGFydElkeF1bJ2VuZEFuZ2xlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCd0cmltT2Zmc2V0JywgLXRtcFN0YXJ0QW5nbGUgLyBNYXRoLlBJIC8gMiAqIDM2MCAtIDM2MCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWMuYXR0cmlidXRlWzBdLnRvID0gMSAtICgodG1wRW5kQW5nbGUgLSB0bXBTdGFydEFuZ2xlKSAlIChNYXRoLlBJICogMikpIC8gKE1hdGguUEkgKiAyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdzdHJva2VXaWR0aCcsIDIgKiByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIuc2V0U3RhdGljUHJvcGVydHkoJ2ZpbGxPcGFjaXR5JywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBwYXRoIG1hc2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRGcmFtZSA9IE1hdGguY2VpbCh0bXBBY3Rpb25TcGVjLnN0YXJ0VGltZSAvICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRGcmFtZSA9IE1hdGguY2VpbCgodG1wQWN0aW9uU3BlYy5zdGFydFRpbWUgKyB0bXBBY3Rpb25TcGVjLmR1cmF0aW9uKSAvICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWMuYXR0cmlidXRlLmZvckVhY2goKGF0dHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllci5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5hdHRyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZnJvbSAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnRvICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5qc01vdmluLmFkZE1hc2sobWFza0xheWVyLCBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKSwgdG1wQWN0aW9uU3BlYy5tYXNrVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigndW5rb253biBhY3Rpb25zIHRhcmdldDogJywgdG1wQWN0aW9uU3BlYy50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc0FsaWduKGFsaWduU3RyKSB7XHJcbiAgICAgICAgc3dpdGNoIChhbGlnblN0cikge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuYWxpZ25UYXJnZXQud2l0aEVsZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnd2l0aEVsZSc7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy5hbGlnblRhcmdldC53aXRoT2JqOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd3aXRoT2JqJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9pZiB0aGUgY2hhcnRzIGNoYW5nZWQsIHRoZW4gZG8gcmVzZXRcclxuICAgIHN0YXRpYyByZXNldEFsbCgpIHtcclxuICAgICAgICB0aGlzLndob2xlRW5kVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5hbGxNYXJrQW5pLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5mcmFtZVRpbWUuY2xlYXIoKTtcclxuICAgICAgICAvLyB0aGlzLmRvbU1hcmtzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbFN0YXR1cy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5jbGVhcigpO1xyXG4gICAgICAgIEFuaW1hdGlvbi5hbmlJZHggPSAwO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQW5pbWF0aW9uLkZJUlNUX0FOSV9JRCA9ICdhbmkwJztcclxuQW5pbWF0aW9uLmFuaUlkeCA9IDA7XHJcbkFuaW1hdGlvbi5hbGlnblRhcmdldCA9IHtcclxuICAgIHdpdGhFbGU6ICdlbGVtZW50JyxcclxuICAgIHdpdGhPYmo6ICdvYmplY3QnXHJcbn1cclxuQW5pbWF0aW9uLmFsaWduQXR0cnMgPSBbJ3RhcmdldCcsICd0eXBlJ107Ly9mb3IgZXJyb3IgY2hlY2tcclxuQW5pbWF0aW9uLnZpc3VhbEF0dHJzID0gWyd4JywgJ3knLCAnY3gnLCAnY3knLCAnaW5uZXJSYWRpdXMnLCAnb3V0dGVyUmFkaXVzJywgJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ29wYWNpdHknLCAnZmlsbCcsICdzdHJva2UnLCAnY29udGVudCcsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1kYXNob2Zmc2V0J107XHJcbkFuaW1hdGlvbi5kb21NYXJrcyA9IG5ldyBNYXAoKTtcclxuQW5pbWF0aW9uLm1hcmtDbGFzcyA9IG5ldyBNYXAoKTsvL2tleTogbWFya0lkLCB2YWx1ZTogY2xhc3NcclxuQW5pbWF0aW9uLmFsbE1hcmtzID0gW107XHJcbkFuaW1hdGlvbi5hdHRycyA9IFsnaWQnLCAnc2VsZWN0b3InLCAnZ3JvdXBpbmcnLCAnZWZmZWN0cycsICdvZmZzZXQnLCAncmVmZXJlbmNlJywgJ2FsaWduJ11cclxuQW5pbWF0aW9uLndob2xlRW5kVGltZSA9IDA7XHJcbkFuaW1hdGlvbi5mcmFtZVRpbWUgPSBuZXcgTWFwKCk7Ly9rZXk6IHRpbWUsIHZhbHVlOiB3aGV0aGVyIHRoaXMgdGltZSBwb2ludCBpcyBhIGtleWZyYW1lXHJcbkFuaW1hdGlvbi5hbmltYXRpb25zID0gbmV3IE1hcCgpOy8vcmVjb3JkIGFsbCBhbmltYXRpb25zLCBrZXk6LCB2YWx1ZTogYW5pbWF0aW9uIG9ialxyXG5BbmltYXRpb24uZmluYWxTdGF0dXMgPSBuZXcgTWFwKCk7Ly9yZWNvcmQgdGhlIGZpbmFsIHZpc3VhbCBzdGF0dXMgb2YgZWFjaCBtYXJrLCBlZzoga2V5Om1hcmsxLCB2YWx1ZToge29wYWNpdHk6IDEsIGhlaWdodDogMjI2fVxyXG5BbmltYXRpb24uYWxsTWFya0FuaSA9IG5ldyBNYXAoKTtcclxuLy8gQW5pbWF0aW9uLmVhc2VGdW5jcyA9IHtcclxuLy8gICAgIGVhc2VJblF1YWQ6IChwKSA9PiB7XHJcbi8vICAgICAgICAgcmV0dXJuIHAgKiBwO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VPdXRRdWFkOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiAtIHAgKiAocCAtIDIpO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VJbk91dFF1YWQ6IChwKSA9PiB7XHJcbi8vICAgICAgICAgaWYgKChwIC8gMikgPCAxKSByZXR1cm4gMSAvIDIgKiBwICogcDtcclxuLy8gICAgICAgICByZXR1cm4gLSAoKC0tcCkgKiAocCAtIDIpIC0gMSkgLyAyO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VJbkN1YmljOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiBwICogcCAqIHA7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgZWFzZU91dEN1YmljOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiAocCA9IHAgLSAxKSAqIHAgKiBwICsgMTtcclxuLy8gICAgIH0sXHJcbi8vICAgICBlYXNlSW5PdXRDdWJpYzogKHApID0+IHtcclxuLy8gICAgICAgICBpZiAoKHAgLz0gMC41KSA8IDEpIHJldHVybiBwICogcCAqIHAgLyAyO1xyXG4vLyAgICAgICAgIHJldHVybiAoKHAgLT0gMikgKiBwICogcCArIDIpIC8gMjtcclxuLy8gICAgIH0sXHJcbi8vICAgICBlYXNlT3V0Qm91bmNlOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIGxldCByYXRpbyA9IDA7XHJcbi8vICAgICAgICAgaWYgKHAgPCAoMSAvIDIuNzUpKSB7XHJcbi8vICAgICAgICAgICAgIHJhdGlvID0gNy41NjI1ICogcCAqIHA7XHJcbi8vICAgICAgICAgfSBlbHNlIGlmIChwIDwgKDIgLyAyLjc1KSkge1xyXG4vLyAgICAgICAgICAgICByYXRpbyA9IDcuNTYyNSAqIChwIC09ICgxLjUgLyAyLjc1KSkgKiBwICsgMC43NTtcclxuLy8gICAgICAgICB9IGVsc2UgaWYgKHAgPCAoMi41IC8gMi43NSkpIHtcclxuLy8gICAgICAgICAgICAgcmF0aW8gPSA3LjU2MjUgKiAocCAtPSAoMi4yNSAvIDIuNzUpKSAqIHAgKyAwLjkzNzU7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcmF0aW8gPSA3LjU2MjUgKiAocCAtPSAoMi42MjUgLyAyLjc1KSkgKiBwICsgMC45ODQzNzU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiByYXRpbztcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuUGF0aE1ha2VyID0gdm9pZCAwO1xyXG5cclxudmFyIF9zdmdQYXRoUGFyc2VyID0gcmVxdWlyZShcInN2Zy1wYXRoLXBhcnNlclwiKTtcclxuXHJcbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxyXG5cclxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cclxuXHJcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XHJcblxyXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XHJcblxyXG52YXIgUGF0aE1ha2VyID1cclxuLyojX19QVVJFX18qL1xyXG5mdW5jdGlvbiAoKSB7XHJcbiAgLy8gZm9yIGRpc2NvbnRpbnVvdXMgcGF0aHNcclxuICBmdW5jdGlvbiBQYXRoTWFrZXIocGF0aERhdGEpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXRoTWFrZXIpO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhdGhcIiwge1xyXG4gICAgICBjOiBmYWxzZSxcclxuICAgICAgaTogW10sXHJcbiAgICAgIG86IFtdLFxyXG4gICAgICB2OiBbXVxyXG4gICAgfSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY3VycmVudFhcIiwgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY3VycmVudFlcIiwgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib2Zmc2V0WFwiLCBJbmZpbml0eSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib2Zmc2V0WVwiLCBJbmZpbml0eSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGF0aFJlYWR5XCIsIGZhbHNlKTtcclxuXHJcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXRoU3RhcnRcIiwgWzAsIDBdKTtcclxuXHJcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXRoQ2hhaW5cIiwgW10pO1xyXG5cclxuICAgIGlmIChwYXRoRGF0YSkge1xyXG4gICAgICB0aGlzLnBhcnNlKHBhdGhEYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhQYXRoTWFrZXIsIFt7XHJcbiAgICBrZXk6IFwidXBkYXRlWFlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVYWSh4LCB5KSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFggPSB4O1xyXG4gICAgICB0aGlzLmN1cnJlbnRZID0geTtcclxuICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4odGhpcy5vZmZzZXRYLCB4KTtcclxuICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY2FsY3VsYXRlQmV6aWVyTWluTWF4XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQmV6aWVyTWluTWF4KHAwLCBwMSwgcDIsIHAzKSB7XHJcbiAgICAgIHZhciBhID0gMyAqIChwMyAtIDMgKiBwMiArIDMgKiBwMSAtIHAwKTtcclxuICAgICAgdmFyIGIgPSA2ICogKHAyIC0gMiAqIHAxICsgcDApO1xyXG4gICAgICB2YXIgYyA9IDMgKiAocDEgLSBwMCk7XHJcbiAgICAgIHZhciBtaW4gPSBJbmZpbml0eSxcclxuICAgICAgICAgIG1heCA9IC1JbmZpbml0eTtcclxuXHJcbiAgICAgIGlmIChiICogYiAtIDQgKiBhICogYyA+PSAwKSB7XHJcbiAgICAgICAgdmFyIHNxcnQgPSBNYXRoLnNxcnQoYiAqIGIgLSA0ICogYSAqIGMpO1xyXG4gICAgICAgIHZhciByb290cyA9IFsxLCAtMV0ubWFwKGZ1bmN0aW9uIChtdWx0aSkge1xyXG4gICAgICAgICAgcmV0dXJuIChtdWx0aSAqIHNxcnQgLSBiKSAvIDIgLyBhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvb3RzLmZvckVhY2goZnVuY3Rpb24gKHJvb3QpIHtcclxuICAgICAgICAgIGlmIChyb290ID4gMCAmJiByb290IDwgMSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLnBvdygxIC0gcm9vdCwgMykgKiBwMCArIDMgKiBNYXRoLnBvdygxIC0gcm9vdCwgMikgKiByb290ICogcDEgKyAzICogKDEgLSByb290KSAqIHJvb3QgKiByb290ICogcDIgKyBNYXRoLnBvdyhyb290LCAzKSAqIHAzO1xyXG4gICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHZhbHVlKTtcclxuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB2YWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcDAsIHAzKTtcclxuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBwMCwgcDMpO1xyXG4gICAgICByZXR1cm4gW21pbiwgbWF4XTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY2FsY3VsYXRlSGlnaGx5T3JkZXJcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVIaWdobHlPcmRlcihhcnIsIHJhdGlvKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuICAgICAgICBpZiAoaSA+PSBhLmxlbmd0aCAtIDEpIHJldHVybjtcclxuICAgICAgICByZXN1bHQucHVzaCh2ICogKDEgLSByYXRpbykgKyBhW2kgKyAxXSAqIHJhdGlvKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNhbGN1bGF0ZUJlemllclNwbGl0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQmV6aWVyU3BsaXQocmF0aW8pIHtcclxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9yZGVyMCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICAgICAgb3JkZXIwW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG9yZGVyMSA9IHRoaXMuY2FsY3VsYXRlSGlnaGx5T3JkZXIob3JkZXIwLCByYXRpbyk7XHJcbiAgICAgIHZhciBvcmRlcjIgPSB0aGlzLmNhbGN1bGF0ZUhpZ2hseU9yZGVyKG9yZGVyMSwgcmF0aW8pO1xyXG4gICAgICB2YXIgb3JkZXIzID0gdGhpcy5jYWxjdWxhdGVIaWdobHlPcmRlcihvcmRlcjIsIHJhdGlvKTtcclxuICAgICAgcmV0dXJuIFtvcmRlcjFbMF0sIG9yZGVyMlswXSwgb3JkZXIzWzBdLCBvcmRlcjJbMV0sIG9yZGVyMVsyXSwgb3JkZXIwWzNdXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwibW92ZVRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvKHgsIHkpIHtcclxuICAgICAgaWYgKCF0aGlzLnBhdGhSZWFkeSkge1xyXG4gICAgICAgIHRoaXMucGF0aC5jID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXRoLmkgPSBbWzAsIDBdXTtcclxuICAgICAgICB0aGlzLnBhdGgubyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGF0aC52ID0gW1t4LCB5XV07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WCA9IHg7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WSA9IHk7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRYID0geDtcclxuICAgICAgICB0aGlzLm9mZnNldFkgPSB5O1xyXG4gICAgICAgIHRoaXMucGF0aFJlYWR5ID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmxpbmVUby5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wYXRoU3RhcnQpKTtcclxuICAgICAgICB0aGlzLmxpbmVUbyh4LCB5KTtcclxuICAgICAgICB0aGlzLnBhdGhDaGFpbi5wdXNoKHRoaXMucGF0aFN0YXJ0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wYXRoU3RhcnQgPSBbeCwgeV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1vdmVUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvUmVsYXRpdmUoeCwgeSkge1xyXG4gICAgICB0aGlzLm1vdmVUbyh0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJsaW5lVG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lVG8oeCwgeSkge1xyXG4gICAgICB0aGlzLnBhdGguaS5wdXNoKFswLCAwXSk7XHJcbiAgICAgIHRoaXMucGF0aC5vLnB1c2goWzAsIDBdKTtcclxuICAgICAgdGhpcy5wYXRoLnYucHVzaChbeCwgeV0pO1xyXG4gICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJsaW5lVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVUb1JlbGF0aXZlKHgsIHkpIHtcclxuICAgICAgdGhpcy5saW5lVG8odGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiaG9yaXpvbnRhbFRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaG9yaXpvbnRhbFRvKHgpIHtcclxuICAgICAgdGhpcy5saW5lVG8oeCwgdGhpcy5jdXJyZW50WSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImhvcml6b250YWxUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaG9yaXpvbnRhbFRvUmVsYXRpdmUoeCkge1xyXG4gICAgICB0aGlzLmhvcml6b250YWxUbyh0aGlzLmN1cnJlbnRYICsgeCk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInZlcnRpY2FsVG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJ0aWNhbFRvKHkpIHtcclxuICAgICAgdGhpcy5saW5lVG8odGhpcy5jdXJyZW50WCwgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInZlcnRpY2FsVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZlcnRpY2FsVG9SZWxhdGl2ZSh5KSB7XHJcbiAgICAgIHRoaXMudmVydGljYWxUbyh0aGlzLmN1cnJlbnRZICsgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImN1YmljQmV6aWVyQ3VydmVUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGN1YmljQmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpIHtcclxuICAgICAgdGhpcy5wYXRoLmkucHVzaChbYzJ4IC0geCwgYzJ5IC0geV0pO1xyXG4gICAgICB0aGlzLnBhdGguby5wdXNoKFtjMXggLSB0aGlzLmN1cnJlbnRYLCBjMXkgLSB0aGlzLmN1cnJlbnRZXSk7XHJcbiAgICAgIHRoaXMucGF0aC52LnB1c2goW3gsIHldKTtcclxuICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW3RoaXMub2Zmc2V0WF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRYLCBjMXgsIGMyeCwgeCkpKSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgYzF5LCBjMnksIHkpKSkpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSkge1xyXG4gICAgICB0aGlzLmN1YmljQmV6aWVyQ3VydmVUbyh0aGlzLmN1cnJlbnRYICsgYzF4LCB0aGlzLmN1cnJlbnRZICsgYzF5LCB0aGlzLmN1cnJlbnRYICsgYzJ4LCB0aGlzLmN1cnJlbnRZICsgYzJ5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVhZHJhdGljQmV6aWVyQ3VydmVUbyhjeCwgY3ksIHgsIHkpIHtcclxuICAgICAgdGhpcy5wYXRoLmkucHVzaChbY3ggLSB4LCBjeSAtIHldKTtcclxuICAgICAgdGhpcy5wYXRoLm8ucHVzaChbY3ggLSB0aGlzLmN1cnJlbnRYLCBjeSAtIHRoaXMuY3VycmVudFldKTtcclxuICAgICAgdGhpcy5wYXRoLnYucHVzaChbeCwgeV0pO1xyXG4gICAgICB0aGlzLm9mZnNldFggPSBNYXRoLm1pbi5hcHBseShNYXRoLCBbdGhpcy5vZmZzZXRYXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFgsIGN4LCBjeCwgeCkpKSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgY3ksIGN5LCB5KSkpKTtcclxuICAgICAgdGhpcy51cGRhdGVYWSh4LCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKGN4LCBjeSwgeCwgeSkge1xyXG4gICAgICB0aGlzLnF1YWRyYXRpY0JlemllckN1cnZlVG8odGhpcy5jdXJyZW50WCArIGN4LCB0aGlzLmN1cnJlbnRZICsgY3ksIHRoaXMuY3VycmVudFggKyB4LCB0aGlzLmN1cnJlbnRZICsgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFyY1RvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXJjVG8ocngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgeCwgeSkge1xyXG4gICAgICB2YXIgY1NlcmllcyA9IFBhdGhNYWtlci5hMmModGhpcy5jdXJyZW50WCwgdGhpcy5jdXJyZW50WSwgcngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgeCwgeSk7XHJcblxyXG4gICAgICB3aGlsZSAoY1Nlcmllcy5sZW5ndGggPj0gNikge1xyXG4gICAgICAgIHZhciBpb3ZMaXN0ID0gY1Nlcmllcy5zcGxpY2UoMCwgNik7XHJcbiAgICAgICAgdGhpcy5wYXRoLmkucHVzaChbaW92TGlzdFsyXSAtIGlvdkxpc3RbNF0sIGlvdkxpc3RbM10gLSBpb3ZMaXN0WzVdXSk7XHJcbiAgICAgICAgdGhpcy5wYXRoLm8ucHVzaChbaW92TGlzdFswXSAtIHRoaXMuY3VycmVudFgsIGlvdkxpc3RbMV0gLSB0aGlzLmN1cnJlbnRZXSk7XHJcbiAgICAgICAgdGhpcy5wYXRoLnYucHVzaChbaW92TGlzdFs0XSwgaW92TGlzdFs1XV0pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WCwgaW92TGlzdFswXSwgaW92TGlzdFsyXSwgaW92TGlzdFs0XSkpKSk7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW3RoaXMub2Zmc2V0WV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBpb3ZMaXN0WzFdLCBpb3ZMaXN0WzNdLCBpb3ZMaXN0WzVdKSkpKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVhZKGlvdkxpc3RbNF0sIGlvdkxpc3RbNV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFyY1RvUmVsYXRpdmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcmNUb1JlbGF0aXZlKHJ4LCByeSwgeEF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcclxuICAgICAgdGhpcy5hcmNUbyhyeCwgcnksIHhBeGlzUm90YXRpb24sIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjbG9zZVBhdGhcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBhdGgoKSB7XHJcbiAgICAgIHRoaXMucGF0aC5jID0gdHJ1ZTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidW5pZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm0oKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAodGhpcy5wYXRoQ2hhaW4ubGVuZ3RoICYmICEodGhpcy5jdXJyZW50WCA9PSB0aGlzLnBhdGhTdGFydFswXSAmJiB0aGlzLmN1cnJlbnRZID09IHRoaXMucGF0aFN0YXJ0WzFdKSkge1xyXG4gICAgICAgIHRoaXMubGluZVRvLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnBhdGhTdGFydCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB3aGlsZSAodGhpcy5wYXRoQ2hhaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHBhdGhSZWYgPSB0aGlzLnBhdGhDaGFpbi5wb3AoKTtcclxuICAgICAgICB0aGlzLmxpbmVUby5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkocGF0aFJlZikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB3aGlsZSAodGhpcy5wYXRoLm8ubGVuZ3RoIDwgdGhpcy5wYXRoLmkubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoLm8ucHVzaChbMCwgMF0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnBhdGgudi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlWzBdIC09IF90aGlzLm9mZnNldFg7XHJcbiAgICAgICAgdmFsdWVbMV0gLT0gX3RoaXMub2Zmc2V0WTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WCA9IDA7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInBhcnNlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UocGF0aERhdGEpIHtcclxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XHJcblxyXG4gICAgICB2YXIgcGF0aERhdGFTZXJpZXMgPSAoMCwgX3N2Z1BhdGhQYXJzZXIucGFyc2VTVkcpKHBhdGhEYXRhKTtcclxuICAgICAgdmFyIHBhdGhEYXRhV2l0aFR5cGU7XHJcbiAgICAgIHBhdGhEYXRhU2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKHBhdGhEYXRhSXRlbSkge1xyXG4gICAgICAgIHN3aXRjaCAocGF0aERhdGFJdGVtLmNvZGUpIHtcclxuICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLm1vdmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5tb3ZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIubGluZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmxpbmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmhvcml6b250YWxUbyhwYXRoRGF0YVdpdGhUeXBlLngpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIuaG9yaXpvbnRhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnZlcnRpY2FsVG8ocGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnZlcnRpY2FsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIuY3ViaWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnF1YWRyYXRpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIucXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmFyY1RvKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmFyY1RvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICAgICAgX3RoaXMyLmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihwYXRoRGF0YUl0ZW0pO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciB0aGlzIHBhdGggY29tbWFuZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ1cHNhbXBsZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwc2FtcGxlKHJhdGlvKSB7XHJcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgLy8gdXNlIERlIENhc3RlbGphdSdzIGFsZ29yaXRobSB0byBkbyB0aGUgdXBzYW1wbGluZ1xyXG4gICAgICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlX0Nhc3RlbGphdSUyN3NfYWxnb3JpdGhtXHJcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyYXRpbykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB1cHNhbXBsaW5nIHJhdGlvIHNob3VsZCBiZSBhbiBpbnRlZ2VyLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVuaWZvcm0oKTtcclxuICAgICAgaWYgKHJhdGlvIDw9IDEpIHJldHVybjtcclxuICAgICAgdmFyIGNvcHlQYXRoID0ge1xyXG4gICAgICAgIGM6IHRoaXMucGF0aC5jLFxyXG4gICAgICAgIGk6IFtdLFxyXG4gICAgICAgIG86IFtdLFxyXG4gICAgICAgIHY6IFtdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMucGF0aC52LmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuICAgICAgICBpZiAoaSA8PSAwKSB7XHJcbiAgICAgICAgICBjb3B5UGF0aC52LnB1c2godik7XHJcbiAgICAgICAgICBjb3B5UGF0aC5pLnB1c2goX3RoaXMzLnBhdGguaVtpXSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb0FycmF5ID0gX3RoaXMzLnBhdGgubztcclxuICAgICAgICB2YXIgaUFycmF5ID0gX3RoaXMzLnBhdGguaTtcclxuICAgICAgICB2YXIgeEFycmF5ID0gW2FbaSAtIDFdWzBdLCBvQXJyYXlbaSAtIDFdWzBdICsgYVtpIC0gMV1bMF0sIGlBcnJheVtpXVswXSArIHZbMF0sIHZbMF1dO1xyXG4gICAgICAgIHZhciB5QXJyYXkgPSBbYVtpIC0gMV1bMV0sIG9BcnJheVtpIC0gMV1bMV0gKyBhW2kgLSAxXVsxXSwgaUFycmF5W2ldWzFdICsgdlsxXSwgdlsxXV07XHJcblxyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCByYXRpbzsgaW5kZXgrKykge1xyXG4gICAgICAgICAgdmFyIHN0ZXBSYXRpbyA9IDEgLyAocmF0aW8gLSBpbmRleCArIDEpO1xyXG5cclxuICAgICAgICAgIHZhciB4U3BsaXRBcnJheSA9IF90aGlzMy5jYWxjdWxhdGVCZXppZXJTcGxpdC5hcHBseShfdGhpczMsIFtzdGVwUmF0aW9dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoeEFycmF5KSkpO1xyXG5cclxuICAgICAgICAgIHZhciB5U3BsaXRBcnJheSA9IF90aGlzMy5jYWxjdWxhdGVCZXppZXJTcGxpdC5hcHBseShfdGhpczMsIFtzdGVwUmF0aW9dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoeUFycmF5KSkpO1xyXG5cclxuICAgICAgICAgIHZhciBfcDB4ID0geEFycmF5WzBdLFxyXG4gICAgICAgICAgICAgIF9wMXggPSB4U3BsaXRBcnJheS5zaGlmdCgpIC0gX3AweCxcclxuICAgICAgICAgICAgICBfcDN4ID0geFNwbGl0QXJyYXlbMV0sXHJcbiAgICAgICAgICAgICAgX3AyeCA9IHhTcGxpdEFycmF5LnNoaWZ0KCkgLSBfcDN4LFxyXG4gICAgICAgICAgICAgIF9wMHkgPSB5QXJyYXlbMF0sXHJcbiAgICAgICAgICAgICAgX3AxeSA9IHlTcGxpdEFycmF5LnNoaWZ0KCkgLSBfcDB5LFxyXG4gICAgICAgICAgICAgIF9wM3kgPSB5U3BsaXRBcnJheVsxXSxcclxuICAgICAgICAgICAgICBfcDJ5ID0geVNwbGl0QXJyYXkuc2hpZnQoKSAtIF9wM3k7XHJcblxyXG4gICAgICAgICAgY29weVBhdGguby5wdXNoKFtfcDF4LCBfcDF5XSk7XHJcbiAgICAgICAgICBjb3B5UGF0aC5pLnB1c2goW19wMngsIF9wMnldKTtcclxuICAgICAgICAgIGNvcHlQYXRoLnYucHVzaChbX3AzeCwgX3AzeV0pO1xyXG4gICAgICAgICAgeEFycmF5ID0geFNwbGl0QXJyYXk7XHJcbiAgICAgICAgICB5QXJyYXkgPSB5U3BsaXRBcnJheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwMHggPSB4QXJyYXkuc2hpZnQoKSxcclxuICAgICAgICAgICAgcDF4ID0geEFycmF5LnNoaWZ0KCkgLSBwMHgsXHJcbiAgICAgICAgICAgIHAzeCA9IHhBcnJheVsxXSxcclxuICAgICAgICAgICAgcDJ4ID0geEFycmF5LnNoaWZ0KCkgLSBwM3gsXHJcbiAgICAgICAgICAgIHAweSA9IHlBcnJheS5zaGlmdCgpLFxyXG4gICAgICAgICAgICBwMXkgPSB5QXJyYXkuc2hpZnQoKSAtIHAweSxcclxuICAgICAgICAgICAgcDN5ID0geUFycmF5WzFdLFxyXG4gICAgICAgICAgICBwMnkgPSB5QXJyYXkuc2hpZnQoKSAtIHAzeTtcclxuICAgICAgICBjb3B5UGF0aC5vLnB1c2goW3AxeCwgcDF5XSk7XHJcbiAgICAgICAgY29weVBhdGguaS5wdXNoKFtwMngsIHAyeV0pO1xyXG4gICAgICAgIGNvcHlQYXRoLnYucHVzaChbcDN4LCBwM3ldKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucGF0aCA9IGNvcHlQYXRoO1xyXG4gICAgICB0aGlzLnVuaWZvcm0oKTtcclxuICAgIH1cclxuICB9XSwgW3tcclxuICAgIGtleTogXCJhMmNcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBhMmMoeDEsIHkxLCByeCwgcnksIGFuZ2xlLCBsYXJnZV9hcmNfZmxhZywgc3dlZXBfZmxhZywgeDIsIHkyLCByZWN1cnNpdmUpIHtcclxuICAgICAgLy8gZm9yIG1vcmUgaW5mb3JtYXRpb24gb2Ygd2hlcmUgdGhpcyBNYXRoIGNhbWUgZnJvbSB2aXNpdDpcclxuICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXHJcbiAgICAgIHZhciBfMTIwID0gTWF0aC5QSSAqIDEyMCAvIDE4MCxcclxuICAgICAgICAgIHJhZCA9IE1hdGguUEkgLyAxODAgKiAoK2FuZ2xlIHx8IDApLFxyXG4gICAgICAgICAgcmVzID0gW10sXHJcbiAgICAgICAgICB4eSxcclxuICAgICAgICAgIHJvdGF0ZSA9IGZ1bmN0aW9uIHJvdGF0ZSh4LCB5LCByYWQpIHtcclxuICAgICAgICB2YXIgWCA9IHggKiBNYXRoLmNvcyhyYWQpIC0geSAqIE1hdGguc2luKHJhZCksXHJcbiAgICAgICAgICAgIFkgPSB4ICogTWF0aC5zaW4ocmFkKSArIHkgKiBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB4OiBYLFxyXG4gICAgICAgICAgeTogWVxyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoIXJ4IHx8ICFyeSkge1xyXG4gICAgICAgIHJldHVybiBbeDEsIHkxLCB4MiwgeTIsIHgyLCB5Ml07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghcmVjdXJzaXZlKSB7XHJcbiAgICAgICAgeHkgPSByb3RhdGUoeDEsIHkxLCAtcmFkKTtcclxuICAgICAgICB4MSA9IHh5Lng7XHJcbiAgICAgICAgeTEgPSB4eS55O1xyXG4gICAgICAgIHh5ID0gcm90YXRlKHgyLCB5MiwgLXJhZCk7XHJcbiAgICAgICAgeDIgPSB4eS54O1xyXG4gICAgICAgIHkyID0geHkueTtcclxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSxcclxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSxcclxuICAgICAgICAgICAgeCA9ICh4MSAtIHgyKSAvIDIsXHJcbiAgICAgICAgICAgIHkgPSAoeTEgLSB5MikgLyAyO1xyXG4gICAgICAgIHZhciBoID0geCAqIHggLyAocnggKiByeCkgKyB5ICogeSAvIChyeSAqIHJ5KTtcclxuXHJcbiAgICAgICAgaWYgKGggPiAxKSB7XHJcbiAgICAgICAgICBoID0gTWF0aC5zcXJ0KGgpO1xyXG4gICAgICAgICAgcnggPSBoICogcng7XHJcbiAgICAgICAgICByeSA9IGggKiByeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByeDIgPSByeCAqIHJ4LFxyXG4gICAgICAgICAgICByeTIgPSByeSAqIHJ5LFxyXG4gICAgICAgICAgICBrID0gKGxhcmdlX2FyY19mbGFnID09IHN3ZWVwX2ZsYWcgPyAtMSA6IDEpICogTWF0aC5zcXJ0KE1hdGguYWJzKChyeDIgKiByeTIgLSByeDIgKiB5ICogeSAtIHJ5MiAqIHggKiB4KSAvIChyeDIgKiB5ICogeSArIHJ5MiAqIHggKiB4KSkpLFxyXG4gICAgICAgICAgICBjeCA9IGsgKiByeCAqIHkgLyByeSArICh4MSArIHgyKSAvIDIsXHJcbiAgICAgICAgICAgIGN5ID0gayAqIC1yeSAqIHggLyByeCArICh5MSArIHkyKSAvIDIsXHJcbiAgICAgICAgICAgIGYxID0gTWF0aC5hc2luKCh5MSAtIGN5KSAvIHJ5KSxcclxuICAgICAgICAgICAgZjIgPSBNYXRoLmFzaW4oKHkyIC0gY3kpIC8gcnkpO1xyXG4gICAgICAgIGYxID0geDEgPCBjeCA/IE1hdGguUEkgLSBmMSA6IGYxO1xyXG4gICAgICAgIGYyID0geDIgPCBjeCA/IE1hdGguUEkgLSBmMiA6IGYyO1xyXG4gICAgICAgIGYxIDwgMCAmJiAoZjEgPSBNYXRoLlBJICogMiArIGYxKTtcclxuICAgICAgICBmMiA8IDAgJiYgKGYyID0gTWF0aC5QSSAqIDIgKyBmMik7XHJcblxyXG4gICAgICAgIGlmIChzd2VlcF9mbGFnICYmIGYxID4gZjIpIHtcclxuICAgICAgICAgIGYxID0gZjEgLSBNYXRoLlBJICogMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3dlZXBfZmxhZyAmJiBmMiA+IGYxKSB7XHJcbiAgICAgICAgICBmMiA9IGYyIC0gTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGYxID0gcmVjdXJzaXZlWzBdO1xyXG4gICAgICAgIGYyID0gcmVjdXJzaXZlWzFdO1xyXG4gICAgICAgIGN4ID0gcmVjdXJzaXZlWzJdO1xyXG4gICAgICAgIGN5ID0gcmVjdXJzaXZlWzNdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZGYgPSBmMiAtIGYxO1xyXG5cclxuICAgICAgaWYgKE1hdGguYWJzKGRmKSA+IF8xMjApIHtcclxuICAgICAgICB2YXIgZjJvbGQgPSBmMixcclxuICAgICAgICAgICAgeDJvbGQgPSB4MixcclxuICAgICAgICAgICAgeTJvbGQgPSB5MjtcclxuICAgICAgICBmMiA9IGYxICsgXzEyMCAqIChzd2VlcF9mbGFnICYmIGYyID4gZjEgPyAxIDogLTEpO1xyXG4gICAgICAgIHgyID0gY3ggKyByeCAqIE1hdGguY29zKGYyKTtcclxuICAgICAgICB5MiA9IGN5ICsgcnkgKiBNYXRoLnNpbihmMik7XHJcbiAgICAgICAgcmVzID0gdGhpcy5hMmMoeDIsIHkyLCByeCwgcnksIGFuZ2xlLCAwLCBzd2VlcF9mbGFnLCB4Mm9sZCwgeTJvbGQsIFtmMiwgZjJvbGQsIGN4LCBjeV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkZiA9IGYyIC0gZjE7XHJcbiAgICAgIHZhciBjMSA9IE1hdGguY29zKGYxKSxcclxuICAgICAgICAgIHMxID0gTWF0aC5zaW4oZjEpLFxyXG4gICAgICAgICAgYzIgPSBNYXRoLmNvcyhmMiksXHJcbiAgICAgICAgICBzMiA9IE1hdGguc2luKGYyKSxcclxuICAgICAgICAgIHQgPSBNYXRoLnRhbihkZiAvIDQpLFxyXG4gICAgICAgICAgaHggPSA0IC8gMyAqIHJ4ICogdCxcclxuICAgICAgICAgIGh5ID0gNCAvIDMgKiByeSAqIHQsXHJcbiAgICAgICAgICBtMSA9IFt4MSwgeTFdLFxyXG4gICAgICAgICAgbTIgPSBbeDEgKyBoeCAqIHMxLCB5MSAtIGh5ICogYzFdLFxyXG4gICAgICAgICAgbTMgPSBbeDIgKyBoeCAqIHMyLCB5MiAtIGh5ICogYzJdLFxyXG4gICAgICAgICAgbTQgPSBbeDIsIHkyXTtcclxuICAgICAgbTJbMF0gPSAyICogbTFbMF0gLSBtMlswXTtcclxuICAgICAgbTJbMV0gPSAyICogbTFbMV0gLSBtMlsxXTtcclxuXHJcbiAgICAgIGlmIChyZWN1cnNpdmUpIHtcclxuICAgICAgICByZXR1cm4gW20yLCBtMywgbTRdLmNvbmNhdChyZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyA9IFttMiwgbTMsIG00XS5jb25jYXQocmVzKS5qb2luKCkuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoeCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG5ld3JlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgbmV3cmVzW2ldID0gaSAlIDIgPyByb3RhdGUocmVzW2kgLSAxXSwgcmVzW2ldLCByYWQpLnkgOiByb3RhdGUocmVzW2ldLCByZXNbaSArIDFdLCByYWQpLng7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3cmVzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gUGF0aE1ha2VyO1xyXG59KCk7XHJcblxyXG5leHBvcnRzLlBhdGhNYWtlciA9IFBhdGhNYWtlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl3WVhSb0xuUnpJbDBzSW01aGJXVnpJanBiSWxCaGRHaE5ZV3RsY2lJc0luQmhkR2hFWVhSaElpd2lZeUlzSW1raUxDSnZJaXdpZGlJc0lrbHVabWx1YVhSNUlpd2ljR0Z5YzJVaUxDSjRJaXdpZVNJc0ltTjFjbkpsYm5SWUlpd2lZM1Z5Y21WdWRGa2lMQ0p2Wm1aelpYUllJaXdpVFdGMGFDSXNJbTFwYmlJc0ltOW1abk5sZEZraUxDSndNQ0lzSW5BeElpd2ljRElpTENKd015SXNJbUVpTENKaUlpd2liV0Y0SWl3aWMzRnlkQ0lzSW5KdmIzUnpJaXdpYldGd0lpd2liWFZzZEdraUxDSm1iM0pGWVdOb0lpd2ljbTl2ZENJc0luWmhiSFZsSWl3aWNHOTNJaXdpWVhKeUlpd2ljbUYwYVc4aUxDSnlaWE4xYkhRaUxDSnNaVzVuZEdnaUxDSndkWE5vSWl3aWIzSmtaWEl3SWl3aWIzSmtaWEl4SWl3aVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSWlMQ0p2Y21SbGNqSWlMQ0p2Y21SbGNqTWlMQ0p3WVhSb1VtVmhaSGtpTENKd1lYUm9JaXdpYkdsdVpWUnZJaXdpY0dGMGFGTjBZWEowSWl3aWNHRjBhRU5vWVdsdUlpd2liVzkyWlZSdklpd2lkWEJrWVhSbFdGa2lMQ0pvYjNKcGVtOXVkR0ZzVkc4aUxDSjJaWEowYVdOaGJGUnZJaXdpWXpGNElpd2lZekY1SWl3aVl6SjRJaXdpWXpKNUlpd2lZMkZzWTNWc1lYUmxRbVY2YVdWeVRXbHVUV0Y0SWl3aVkzVmlhV05DWlhwcFpYSkRkWEoyWlZSdklpd2lZM2dpTENKamVTSXNJbkYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsVkc4aUxDSnllQ0lzSW5KNUlpd2llRUY0YVhOU2IzUmhkR2x2YmlJc0lteGhjbWRsUVhKalJteGhaeUlzSW5OM1pXVndSbXhoWnlJc0ltTlRaWEpwWlhNaUxDSmhNbU1pTENKcGIzWk1hWE4wSWl3aWMzQnNhV05sSWl3aVlYSmpWRzhpTENKd1lYUm9VbVZtSWl3aWNHOXdJaXdpY0dGMGFFUmhkR0ZUWlhKcFpYTWlMQ0p3WVhSb1JHRjBZVmRwZEdoVWVYQmxJaXdpY0dGMGFFUmhkR0ZKZEdWdElpd2lZMjlrWlNJc0ltMXZkbVZVYjFKbGJHRjBhWFpsSWl3aWJHbHVaVlJ2VW1Wc1lYUnBkbVVpTENKb2IzSnBlbTl1ZEdGc1ZHOVNaV3hoZEdsMlpTSXNJblpsY25ScFkyRnNWRzlTWld4aGRHbDJaU0lzSW5neElpd2llVEVpTENKNE1pSXNJbmt5SWl3aVkzVmlhV05DWlhwcFpYSkRkWEoyWlZSdlVtVnNZWFJwZG1VaUxDSnhkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVlJ2VW1Wc1lYUnBkbVVpTENKc1lYSm5aVUZ5WXlJc0luTjNaV1Z3SWl3aVlYSmpWRzlTWld4aGRHbDJaU0lzSW1Oc2IzTmxVR0YwYUNJc0ltTnZibk52YkdVaUxDSmxjbkp2Y2lJc0lrVnljbTl5SWl3aVRuVnRZbVZ5SWl3aWFYTkpiblJsWjJWeUlpd2lkVzVwWm05eWJTSXNJbU52Y0hsUVlYUm9JaXdpYjBGeWNtRjVJaXdpYVVGeWNtRjVJaXdpZUVGeWNtRjVJaXdpZVVGeWNtRjVJaXdpYVc1a1pYZ2lMQ0p6ZEdWd1VtRjBhVzhpTENKNFUzQnNhWFJCY25KaGVTSXNJbU5oYkdOMWJHRjBaVUpsZW1sbGNsTndiR2wwSWl3aWVWTndiR2wwUVhKeVlYa2lMQ0p3TUhnaUxDSndNWGdpTENKemFHbG1kQ0lzSW5BemVDSXNJbkF5ZUNJc0luQXdlU0lzSW5BeGVTSXNJbkF6ZVNJc0luQXllU0lzSW1GdVoyeGxJaXdpYkdGeVoyVmZZWEpqWDJac1lXY2lMQ0p6ZDJWbGNGOW1iR0ZuSWl3aWNtVmpkWEp6YVhabElpd2lYekV5TUNJc0lsQkpJaXdpY21Ga0lpd2ljbVZ6SWl3aWVIa2lMQ0p5YjNSaGRHVWlMQ0pZSWl3aVkyOXpJaXdpYzJsdUlpd2lXU0lzSW1naUxDSnllRElpTENKeWVUSWlMQ0pySWl3aVlXSnpJaXdpWmpFaUxDSmhjMmx1SWl3aVpqSWlMQ0prWmlJc0ltWXliMnhrSWl3aWVESnZiR1FpTENKNU1tOXNaQ0lzSW1NeElpd2ljekVpTENKak1pSXNJbk15SWl3aWRDSXNJblJoYmlJc0ltaDRJaXdpYUhraUxDSnRNU0lzSW0weUlpd2liVE1pTENKdE5DSXNJbU52Ym1OaGRDSXNJbXB2YVc0aUxDSnpjR3hwZENJc0luQmhjbk5sUm14dllYUWlMQ0p1WlhkeVpYTWlMQ0pwYVNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3U1VGRllVRXNVenM3TzBGQllWUTdRVUZMUVN4eFFrRkJXVU1zVVVGQldpeEZRVUVyUWp0QlFVRkJPenRCUVVGQkxHdERRV3BDVWp0QlFVTnVRa01zVFVGQlFVRXNRMEZCUXl4RlFVRkZMRXRCUkdkQ08wRkJSVzVDUXl4TlFVRkJRU3hEUVVGRExFVkJRVVVzUlVGR1owSTdRVUZIYmtKRExFMUJRVUZCTEVOQlFVTXNSVUZCUlN4RlFVaG5RanRCUVVsdVFrTXNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJTbWRDTEV0QmFVSlJPenRCUVVGQkxITkRRVlpLTEVOQlZVazdPMEZCUVVFc2MwTkJWRW9zUTBGVFNUczdRVUZCUVN4eFEwRlNURU1zVVVGUlN6czdRVUZCUVN4eFEwRlFURUVzVVVGUFN6czdRVUZCUVN4MVEwRktXQ3hMUVVsWE96dEJRVUZCTEhWRFFVaFBMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUTBGSFVEczdRVUZCUVN4MVEwRkdVeXhGUVVWVU96dEJRVU16UWl4UlFVRkpUQ3hSUVVGS0xFVkJRV003UVVGRFZpeFhRVUZMVFN4TFFVRk1MRU5CUVZkT0xGRkJRVmc3UVVGRFNEdEJRVU5LT3pzN096WkNRVVZuUWs4c1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGJrTXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFrWXNRMEZCYUVJN1FVRkRRU3hYUVVGTFJ5eFJRVUZNTEVkQlFXZENSaXhEUVVGb1FqdEJRVU5CTEZkQlFVdEhMRTlCUVV3c1IwRkJaVU1zU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNc1MwRkJTMFlzVDBGQlpDeEZRVUYxUWtvc1EwRkJka0lzUTBGQlpqdEJRVU5CTEZkQlFVdFBMRTlCUVV3c1IwRkJaVVlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNc1MwRkJTME1zVDBGQlpDeEZRVUYxUWs0c1EwRkJka0lzUTBGQlpqdEJRVU5JT3pzN01FTkJSVFpDVHl4RkxFVkJRVmxETEVVc1JVRkJXVU1zUlN4RlFVRlpReXhGTEVWQlFUaENPMEZCUXpWR0xGVkJRVTFETEVOQlFVTXNSMEZCUnl4TFFVRkxSQ3hGUVVGRkxFZEJRVWNzU1VGQlNVUXNSVUZCVkN4SFFVRmpMRWxCUVVsRUxFVkJRV3hDTEVkQlFYVkNSQ3hGUVVFMVFpeERRVUZXTzBGQlEwRXNWVUZCVFVzc1EwRkJReXhIUVVGSExFdEJRVXRJTEVWQlFVVXNSMEZCUnl4SlFVRkpSQ3hGUVVGVUxFZEJRV05FTEVWQlFXNUNMRU5CUVZZN1FVRkRRU3hWUVVGTlpDeERRVUZETEVkQlFVY3NTMEZCUzJVc1JVRkJSU3hIUVVGSFJDeEZRVUZXTEVOQlFWWTdRVUZEUVN4VlFVRkpSaXhIUVVGSExFZEJRVWRTTEZGQlFWWTdRVUZCUVN4VlFVRnZRbWRDTEVkQlFVY3NSMEZCUnl4RFFVRkRhRUlzVVVGQk0wSTdPMEZCUTBFc1ZVRkJTV1VzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWRCUVZFc1NVRkJTVVFzUTBGQlNpeEhRVUZSYkVJc1EwRkJhRUlzU1VGQmNVSXNRMEZCZWtJc1JVRkJORUk3UVVGRGVFSXNXVUZCVFhGQ0xFbEJRVWtzUjBGQlIxWXNTVUZCU1N4RFFVRkRWU3hKUVVGTUxFTkJRVlZHTEVOQlFVTXNSMEZCUjBFc1EwRkJTaXhIUVVGUkxFbEJRVWxFTEVOQlFVb3NSMEZCVVd4Q0xFTkJRVEZDTEVOQlFXSTdRVUZEUVN4WlFVRk5jMElzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVNc1EwRkJUQ3hGUVVGUlF5eEhRVUZTTEVOQlFWa3NWVUZCUVVNc1MwRkJTenRCUVVGQkxHbENRVUZKTEVOQlFVTkJMRXRCUVVzc1IwRkJSMGdzU1VGQlVpeEhRVUZsUml4RFFVRm9RaXhKUVVGeFFpeERRVUZ5UWl4SFFVRjVRa1FzUTBGQk4wSTdRVUZCUVN4VFFVRnFRaXhEUVVGa08wRkJRMEZKTEZGQlFVRkJMRXRCUVVzc1EwRkJRMGNzVDBGQlRpeERRVUZqTEZWQlFVRkRMRWxCUVVrc1JVRkJTVHRCUVVOc1FpeGpRVUZKUVN4SlFVRkpMRWRCUVVjc1EwRkJVQ3hKUVVGWlFTeEpRVUZKTEVkQlFVY3NRMEZCZGtJc1JVRkJNRUk3UVVGRGRFSXNaMEpCUVUxRExFdEJRVXNzUjBGQlIyaENMRWxCUVVrc1EwRkJRMmxDTEVkQlFVd3NRMEZCVXl4SlFVRkpSaXhKUVVGaUxFVkJRVzFDTEVOQlFXNUNMRWxCUVhkQ1dpeEZRVUY0UWl4SFFVRTJRaXhKUVVGSlNDeEpRVUZKTEVOQlFVTnBRaXhIUVVGTUxFTkJRVk1zU1VGQlNVWXNTVUZCWWl4RlFVRnRRaXhEUVVGdVFpeERRVUZLTEVkQlFUUkNRU3hKUVVFMVFpeEhRVUZ0UTFnc1JVRkJhRVVzUjBGQmNVVXNTMEZCU3l4SlFVRkpWeXhKUVVGVUxFbEJRV2xDUVN4SlFVRnFRaXhIUVVGM1FrRXNTVUZCZUVJc1IwRkJLMEpXTEVWQlFYQkhMRWRCUVhsSFRDeEpRVUZKTEVOQlFVTnBRaXhIUVVGTUxFTkJRVk5HTEVsQlFWUXNSVUZCWlN4RFFVRm1MRWxCUVc5Q1ZDeEZRVUV6U1R0QlFVTkJUQ3haUVVGQlFTeEhRVUZITEVkQlFVZEVMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUUVN4SFFVRlVMRVZCUVdObExFdEJRV1FzUTBGQlRqdEJRVU5CVUN4WlFVRkJRU3hIUVVGSExFZEJRVWRVTEVsQlFVa3NRMEZCUTFNc1IwRkJUQ3hEUVVGVFFTeEhRVUZVTEVWQlFXTlBMRXRCUVdRc1EwRkJUanRCUVVOSU8wRkJRMG9zVTBGT1JEdEJRVTlJT3p0QlFVTkVaaXhOUVVGQlFTeEhRVUZITEVkQlFVZEVMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUUVN4SFFVRlVMRVZCUVdORkxFVkJRV1FzUlVGQmEwSkhMRVZCUVd4Q0xFTkJRVTQ3UVVGRFFVY3NUVUZCUVVFc1IwRkJSeXhIUVVGSFZDeEpRVUZKTEVOQlFVTlRMRWRCUVV3c1EwRkJVMEVzUjBGQlZDeEZRVUZqVGl4RlFVRmtMRVZCUVd0Q1J5eEZRVUZzUWl4RFFVRk9PMEZCUTBFc1lVRkJUeXhEUVVGRFRDeEhRVUZFTEVWQlFVMVJMRWRCUVU0c1EwRkJVRHRCUVVOSU96czdlVU5CUlRSQ1V5eEhMRVZCUVdWRExFc3NSVUZCZVVJN1FVRkRha1VzVlVGQlNVTXNUVUZCWjBJc1IwRkJSeXhGUVVGMlFqdEJRVU5CUml4TlFVRkJRU3hIUVVGSExFTkJRVU5LTEU5QlFVb3NRMEZCV1N4VlFVRkRkRUlzUTBGQlJDeEZRVUZKUml4RFFVRktMRVZCUVU5cFFpeERRVUZRTEVWQlFXRTdRVUZEY2tJc1dVRkJTV3BDTEVOQlFVTXNTVUZCU1dsQ0xFTkJRVU1zUTBGQlEyTXNUVUZCUml4SFFVRlhMRU5CUVhCQ0xFVkJRWFZDTzBGQlEzWkNSQ3hSUVVGQlFTeE5RVUZOTEVOQlFVTkZMRWxCUVZBc1EwRkJXVGxDTEVOQlFVTXNTVUZCU1N4SlFVRkpNa0lzUzBGQlVpeERRVUZFTEVkQlFXdENXaXhEUVVGRExFTkJRVU5xUWl4RFFVRkRMRWRCUVVjc1EwRkJUQ3hEUVVGRUxFZEJRVmMyUWl4TFFVRjZRenRCUVVOSUxFOUJTRVE3UVVGSlFTeGhRVUZQUXl4TlFVRlFPMEZCUTBnN096dDVRMEZGTkVKRUxFc3NSVUZCT0VNN1FVRkJRU3gzUTBGQk5VSkpMRTFCUVRSQ08wRkJRVFZDUVN4UlFVRkJRU3hOUVVFMFFqdEJRVUZCT3p0QlFVTjJSU3hWUVVGSlF5eE5RVUZOTEVkQlFVY3NTMEZCUzBNc2IwSkJRVXdzUTBGQk1FSkdMRTFCUVRGQ0xFVkJRV3REU2l4TFFVRnNReXhEUVVGaU8wRkJRMEVzVlVGQlNVOHNUVUZCVFN4SFFVRkhMRXRCUVV0RUxHOUNRVUZNTEVOQlFUQkNSQ3hOUVVFeFFpeEZRVUZyUTB3c1MwRkJiRU1zUTBGQllqdEJRVU5CTEZWQlFVbFJMRTFCUVUwc1IwRkJSeXhMUVVGTFJpeHZRa0ZCVEN4RFFVRXdRa01zVFVGQk1VSXNSVUZCYTBOUUxFdEJRV3hETEVOQlFXSTdRVUZEUVN4aFFVRlBMRU5CUVVOTExFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFWQXNSVUZCV1VVc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQmJFSXNSVUZCZFVKRExFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFUZENMRVZCUVd0RFJDeE5RVUZOTEVOQlFVTXNRMEZCUkN4RFFVRjRReXhGUVVFMlEwWXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJia1FzUlVGQmQwUkVMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVGxFTEVOQlFWQTdRVUZEU0RzN096SkNRVVZoTlVJc1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGFFTXNWVUZCU1N4RFFVRkRMRXRCUVV0blF5eFRRVUZXTEVWQlFYRkNPMEZCUTJwQ0xHRkJRVXRETEVsQlFVd3NRMEZCVlhoRExFTkJRVllzUjBGQll5eExRVUZrTzBGQlEwRXNZVUZCUzNkRExFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1IwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCUkN4RFFVRmtPMEZCUTBFc1lVRkJTM1ZETEVsQlFVd3NRMEZCVlhSRExFTkJRVllzUjBGQll5eEZRVUZrTzBGQlEwRXNZVUZCUzNORExFbEJRVXdzUTBGQlZYSkRMRU5CUVZZc1IwRkJZeXhEUVVGRExFTkJRVU5ITEVOQlFVUXNSVUZCU1VNc1EwRkJTaXhEUVVGRUxFTkJRV1E3UVVGRFFTeGhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeERRVUZvUWp0QlFVTkJMR0ZCUVV0SExGRkJRVXdzUjBGQlowSkdMRU5CUVdoQ08wRkJRMEVzWVVGQlMwY3NUMEZCVEN4SFFVRmxTaXhEUVVGbU8wRkJRMEVzWVVGQlMwOHNUMEZCVEN4SFFVRmxUaXhEUVVGbU8wRkJRMEVzWVVGQlMyZERMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEU0N4UFFWWkVMRTFCVlU4N1FVRkRTQ3hoUVVGTFJTeE5RVUZNTEdkRFFVRmxMRXRCUVV0RExGTkJRWEJDTzBGQlEwRXNZVUZCUzBRc1RVRkJUQ3hEUVVGWmJrTXNRMEZCV2l4RlFVRmxReXhEUVVGbU8wRkJRMEVzWVVGQlMyOURMRk5CUVV3c1EwRkJaVllzU1VGQlppeERRVUZ2UWl4TFFVRkxVeXhUUVVGNlFqdEJRVU5JT3p0QlFVTkVMRmRCUVV0QkxGTkJRVXdzUjBGQmFVSXNRMEZCUTNCRExFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRnFRanRCUVVOSU96czdiVU5CUTNGQ1JDeERMRVZCUVZkRExFTXNSVUZCVnp0QlFVTjRReXhYUVVGTGNVTXNUVUZCVEN4RFFVRlpMRXRCUVV0d1F5eFJRVUZNTEVkQlFXZENSaXhEUVVFMVFpeEZRVUVyUWl4TFFVRkxSeXhSUVVGTUxFZEJRV2RDUml4RFFVRXZRenRCUVVOSU96czdNa0pCUTJGRUxFTXNSVUZCVjBNc1F5eEZRVUZYTzBGQlEyaERMRmRCUVV0cFF5eEpRVUZNTEVOQlFWVjJReXhEUVVGV0xFTkJRV0ZuUXl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCYkVJN1FVRkRRU3hYUVVGTFR5eEpRVUZNTEVOQlFWVjBReXhEUVVGV0xFTkJRV0VyUWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCYkVJN1FVRkRRU3hYUVVGTFR5eEpRVUZNTEVOQlFWVnlReXhEUVVGV0xFTkJRV0U0UWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU16UWl4RFFVRkVMRVZCUVVsRExFTkJRVW9zUTBGQmJFSTdRVUZEUVN4WFFVRkxjME1zVVVGQlRDeERRVUZqZGtNc1EwRkJaQ3hGUVVGcFFrTXNRMEZCYWtJN1FVRkRTRHM3TzIxRFFVTnhRa1FzUXl4RlFVRlhReXhETEVWQlFWYzdRVUZEZUVNc1YwRkJTMnRETEUxQlFVd3NRMEZCV1N4TFFVRkxha01zVVVGQlRDeEhRVUZuUWtZc1EwRkJOVUlzUlVGQkswSXNTMEZCUzBjc1VVRkJUQ3hIUVVGblFrWXNRMEZCTDBNN1FVRkRTRHM3TzJsRFFVTnRRa1FzUXl4RlFVRlhPMEZCUXpOQ0xGZEJRVXR0UXl4TlFVRk1MRU5CUVZsdVF5eERRVUZhTEVWQlFXVXNTMEZCUzBjc1VVRkJjRUk3UVVGRFNEczdPM2xEUVVNeVFrZ3NReXhGUVVGWE8wRkJRMjVETEZkQlFVdDNReXhaUVVGTUxFTkJRV3RDTEV0QlFVdDBReXhSUVVGTUxFZEJRV2RDUml4RFFVRnNRenRCUVVOSU96czdLMEpCUTJsQ1F5eERMRVZCUVZjN1FVRkRla0lzVjBGQlMydERMRTFCUVV3c1EwRkJXU3hMUVVGTGFrTXNVVUZCYWtJc1JVRkJNa0pFTEVOQlFUTkNPMEZCUTBnN096dDFRMEZEZVVKQkxFTXNSVUZCVnp0QlFVTnFReXhYUVVGTGQwTXNWVUZCVEN4RFFVRm5RaXhMUVVGTGRFTXNVVUZCVEN4SFFVRm5Ra1lzUTBGQmFFTTdRVUZEU0RzN08zVkRRVVZIZVVNc1J5eEZRVU5CUXl4SExFVkJRMEZETEVjc1JVRkRRVU1zUnl4RlFVTkJOME1zUXl4RlFVTkJReXhETEVWQlEwWTdRVUZEUlN4WFFVRkxhVU1zU1VGQlRDeERRVUZWZGtNc1EwRkJWaXhEUVVGaFowTXNTVUZCWWl4RFFVRnJRaXhEUVVGRGFVSXNSMEZCUnl4SFFVRkhOVU1zUTBGQlVDeEZRVUZWTmtNc1IwRkJSeXhIUVVGSE5VTXNRMEZCYUVJc1EwRkJiRUk3UVVGRFFTeFhRVUZMYVVNc1NVRkJUQ3hEUVVGVmRFTXNRMEZCVml4RFFVRmhLMElzU1VGQllpeERRVUZyUWl4RFFVRkRaU3hIUVVGSExFZEJRVWNzUzBGQlMzaERMRkZCUVZvc1JVRkJjMEo1UXl4SFFVRkhMRWRCUVVjc1MwRkJTM2hETEZGQlFXcERMRU5CUVd4Q08wRkJRMEVzVjBGQlN5dENMRWxCUVV3c1EwRkJWWEpETEVOQlFWWXNRMEZCWVRoQ0xFbEJRV0lzUTBGQmEwSXNRMEZCUXpOQ0xFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRnNRanRCUVVOQkxGZEJRVXRITEU5QlFVd3NSMEZCWlVNc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEU5QlFVRkVMRWxCUVVrc1IwRkJTeXhMUVVGTFJDeFBRVUZXTERSQ1FVRnpRaXhMUVVGTE1FTXNjVUpCUVV3c1EwRkJNa0lzUzBGQlN6VkRMRkZCUVdoRExFVkJRVEJEZDBNc1IwRkJNVU1zUlVGQkswTkZMRWRCUVM5RExFVkJRVzlFTlVNc1EwRkJjRVFzUTBGQmRFSXNSMEZCYmtJN1FVRkRRU3hYUVVGTFR5eFBRVUZNTEVkQlFXVkdMRWxCUVVrc1EwRkJRME1zUjBGQlRDeFBRVUZCUkN4SlFVRkpMRWRCUVVzc1MwRkJTMFVzVDBGQlZpdzBRa0ZCYzBJc1MwRkJTM1ZETEhGQ1FVRk1MRU5CUVRKQ0xFdEJRVXN6UXl4UlFVRm9ReXhGUVVFd1EzZERMRWRCUVRGRExFVkJRU3REUlN4SFFVRXZReXhGUVVGdlJEVkRMRU5CUVhCRUxFTkJRWFJDTEVkQlFXNUNPMEZCUTBFc1YwRkJTM05ETEZGQlFVd3NRMEZCWTNaRExFTkJRV1FzUlVGQmFVSkRMRU5CUVdwQ08wRkJRMGc3T3pzclEwRkZSM2xETEVjc1JVRkRRVU1zUnl4RlFVTkJReXhITEVWQlEwRkRMRWNzUlVGRFFUZERMRU1zUlVGRFFVTXNReXhGUVVOR08wRkJRMFVzVjBGQlN6aERMR3RDUVVGTUxFTkJRWGRDTEV0QlFVczNReXhSUVVGTUxFZEJRV2RDZDBNc1IwRkJlRU1zUlVGQk5rTXNTMEZCUzNaRExGRkJRVXdzUjBGQlowSjNReXhIUVVFM1JDeEZRVUZyUlN4TFFVRkxla01zVVVGQlRDeEhRVUZuUWpCRExFZEJRV3hHTEVWQlFYVkdMRXRCUVV0NlF5eFJRVUZNTEVkQlFXZENNRU1zUjBGQmRrY3NSVUZCTkVjc1MwRkJTek5ETEZGQlFVd3NSMEZCWjBKR0xFTkJRVFZJTEVWQlFTdElMRXRCUVV0SExGRkJRVXdzUjBGQlowSkdMRU5CUVM5Sk8wRkJRMGc3T3pzeVEwRkROa0lyUXl4RkxFVkJRVmxETEVVc1JVRkJXV3BFTEVNc1JVRkJWME1zUXl4RlFVRlhPMEZCUTNoRkxGZEJRVXRwUXl4SlFVRk1MRU5CUVZWMlF5eERRVUZXTEVOQlFXRm5ReXhKUVVGaUxFTkJRV3RDTEVOQlFVTnhRaXhGUVVGRkxFZEJRVWRvUkN4RFFVRk9MRVZCUVZOcFJDeEZRVUZGTEVkQlFVZG9SQ3hEUVVGa0xFTkJRV3hDTzBGQlEwRXNWMEZCUzJsRExFbEJRVXdzUTBGQlZYUkRMRU5CUVZZc1EwRkJZU3RDTEVsQlFXSXNRMEZCYTBJc1EwRkJRM0ZDTEVWQlFVVXNSMEZCUnl4TFFVRkxPVU1zVVVGQldDeEZRVUZ4UWl0RExFVkJRVVVzUjBGQlJ5eExRVUZMT1VNc1VVRkJMMElzUTBGQmJFSTdRVUZEUVN4WFFVRkxLMElzU1VGQlRDeERRVUZWY2tNc1EwRkJWaXhEUVVGaE9FSXNTVUZCWWl4RFFVRnJRaXhEUVVGRE0wSXNRMEZCUkN4RlFVRkpReXhEUVVGS0xFTkJRV3hDTzBGQlEwRXNWMEZCUzBjc1QwRkJUQ3hIUVVGbFF5eEpRVUZKTEVOQlFVTkRMRWRCUVV3c1QwRkJRVVFzU1VGQlNTeEhRVUZMTEV0QlFVdEVMRTlCUVZZc05FSkJRWE5DTEV0QlFVc3dReXh4UWtGQlRDeERRVUV5UWl4TFFVRkxOVU1zVVVGQmFFTXNSVUZCTUVNNFF5eEZRVUV4UXl4RlFVRTRRMEVzUlVGQk9VTXNSVUZCYTBSb1JDeERRVUZzUkN4RFFVRjBRaXhIUVVGdVFqdEJRVU5CTEZkQlFVdFBMRTlCUVV3c1IwRkJaVVlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRTlCUVVGRUxFbEJRVWtzUjBGQlN5eExRVUZMUlN4UFFVRldMRFJDUVVGelFpeExRVUZMZFVNc2NVSkJRVXdzUTBGQk1rSXNTMEZCU3pORExGRkJRV2hETEVWQlFUQkRPRU1zUlVGQk1VTXNSVUZCT0VOQkxFVkJRVGxETEVWQlFXdEVhRVFzUTBGQmJFUXNRMEZCZEVJc1IwRkJia0k3UVVGRFFTeFhRVUZMYzBNc1VVRkJUQ3hEUVVGamRrTXNRMEZCWkN4RlFVRnBRa01zUTBGQmFrSTdRVUZEU0RzN08yMUVRVU54UXl0RExFVXNSVUZCV1VNc1JTeEZRVUZaYWtRc1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGFFWXNWMEZCUzJsRUxITkNRVUZNTEVOQlFUUkNMRXRCUVV0b1JDeFJRVUZNTEVkQlFXZENPRU1zUlVGQk5VTXNSVUZCWjBRc1MwRkJTemRETEZGQlFVd3NSMEZCWjBJNFF5eEZRVUZvUlN4RlFVRnZSU3hMUVVGTEwwTXNVVUZCVEN4SFFVRm5Ra1lzUTBGQmNFWXNSVUZCZFVZc1MwRkJTMGNzVVVGQlRDeEhRVUZuUWtZc1EwRkJka2M3UVVGRFNEczdPekJDUVVWSGEwUXNSU3hGUVVOQlF5eEZMRVZCUTBGRExHRXNSVUZEUVVNc1dTeEZRVU5CUXl4VExFVkJRMEYyUkN4RExFVkJRMEZETEVNc1JVRkRSanRCUVVORkxGVkJRVTExUkN4UFFVRlBMRWRCUVVkb1JTeFRRVUZUTEVOQlFVTnBSU3hIUVVGV0xFTkJRV01zUzBGQlMzWkVMRkZCUVc1Q0xFVkJRVFpDTEV0QlFVdERMRkZCUVd4RExFVkJRVFJEWjBRc1JVRkJOVU1zUlVGQlowUkRMRVZCUVdoRUxFVkJRVzlFUXl4aFFVRndSQ3hGUVVGdFJVTXNXVUZCYmtVc1JVRkJhVVpETEZOQlFXcEdMRVZCUVRSR2RrUXNRMEZCTlVZc1JVRkJLMFpETEVOQlFTOUdMRU5CUVdoQ096dEJRVU5CTEdGQlFVOTFSQ3hQUVVGUExFTkJRVU01UWl4TlFVRlNMRWxCUVd0Q0xFTkJRWHBDTEVWQlFUUkNPMEZCUTNoQ0xGbEJRVTFuUXl4UFFVRlBMRWRCUVVkR0xFOUJRVThzUTBGQlEwY3NUVUZCVWl4RFFVRmxMRU5CUVdZc1JVRkJhMElzUTBGQmJFSXNRMEZCYUVJN1FVRkRRU3hoUVVGTGVrSXNTVUZCVEN4RFFVRlZka01zUTBGQlZpeERRVUZoWjBNc1NVRkJZaXhEUVVGclFpeERRVUZESzBJc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEZRVUV3UWtFc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVFNVF5eERRVUZzUWp0QlFVTkJMR0ZCUVV0NFFpeEpRVUZNTEVOQlFWVjBReXhEUVVGV0xFTkJRV0VyUWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1yUWl4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGUUxFZEJRV0VzUzBGQlMzaEVMRkZCUVc1Q0xFVkJRVFpDZDBRc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoTEV0QlFVdDJSQ3hSUVVFdlF5eERRVUZzUWp0QlFVTkJMR0ZCUVVzclFpeEpRVUZNTEVOQlFWVnlReXhEUVVGV0xFTkJRV0U0UWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1yUWl4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGU0xFVkJRV0ZCTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVhCQ0xFTkJRV3hDTzBGQlEwRXNZVUZCUzNSRUxFOUJRVXdzUjBGQlpVTXNTVUZCU1N4RFFVRkRReXhIUVVGTUxFOUJRVUZFTEVsQlFVa3NSMEZCU3l4TFFVRkxSQ3hQUVVGV0xEUkNRVUZ6UWl4TFFVRkxNRU1zY1VKQlFVd3NRMEZCTWtJc1MwRkJTelZETEZGQlFXaERMRVZCUVRCRGQwUXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJha1FzUlVGQmMwUkJMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRVGRFTEVWQlFXdEZRU3hQUVVGUExFTkJRVU1zUTBGQlJDeERRVUY2UlN4RFFVRjBRaXhIUVVGdVFqdEJRVU5CTEdGQlFVdHVSQ3hQUVVGTUxFZEJRV1ZHTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hQUVVGQlJDeEpRVUZKTEVkQlFVc3NTMEZCUzBVc1QwRkJWaXcwUWtGQmMwSXNTMEZCUzNWRExIRkNRVUZNTEVOQlFUSkNMRXRCUVVzelF5eFJRVUZvUXl4RlFVRXdRM1ZFTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVdwRUxFVkJRWE5FUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVFM1JDeEZRVUZyUlVFc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQmVrVXNRMEZCZEVJc1IwRkJia0k3UVVGRFFTeGhRVUZMYmtJc1VVRkJUQ3hEUVVGamJVSXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJja0lzUlVGQk1FSkJMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRV3BETzBGQlEwZzdRVUZEU2pzN08ydERRVVZIVUN4RkxFVkJRMEZETEVVc1JVRkRRVU1zWVN4RlFVTkJReXhaTEVWQlEwRkRMRk1zUlVGRFFYWkVMRU1zUlVGRFFVTXNReXhGUVVOR08wRkJRMFVzVjBGQlN6SkVMRXRCUVV3c1EwRkJWMVFzUlVGQldDeEZRVUZsUXl4RlFVRm1MRVZCUVcxQ1F5eGhRVUZ1UWl4RlFVRnJRME1zV1VGQmJFTXNSVUZCWjBSRExGTkJRV2hFTEVWQlFUSkVMRXRCUVV0eVJDeFJRVUZNTEVkQlFXZENSaXhEUVVFelJTeEZRVUU0UlN4TFFVRkxSeXhSUVVGTUxFZEJRV2RDUml4RFFVRTVSanRCUVVOSU96czdaME5CSzBaclFqdEJRVU5tTEZkQlFVdHBReXhKUVVGTUxFTkJRVlY0UXl4RFFVRldMRWRCUVdNc1NVRkJaRHRCUVVOSU96czdPRUpCUldkQ08wRkJRVUU3TzBGQlEySXNWVUZCU1N4TFFVRkxNa01zVTBGQlRDeERRVUZsV0N4TlFVRm1MRWxCUVhsQ0xFVkJRVVVzUzBGQlMzaENMRkZCUVV3c1NVRkJhVUlzUzBGQlMydERMRk5CUVV3c1EwRkJaU3hEUVVGbUxFTkJRV3BDTEVsQlFYTkRMRXRCUVV0cVF5eFJRVUZNTEVsQlFXbENMRXRCUVV0cFF5eFRRVUZNTEVOQlFXVXNRMEZCWml4RFFVRjZSQ3hEUVVFM1FpeEZRVUV3Unp0QlFVTjBSeXhoUVVGTFJDeE5RVUZNTEdkRFFVRmxMRXRCUVV0RExGTkJRWEJDTzBGQlEwZzdPMEZCUTBRc1lVRkJUeXhMUVVGTFF5eFRRVUZNTEVOQlFXVllMRTFCUVhSQ0xFVkJRVGhDTzBGQlF6RkNMRmxCUVUxdFF5eFBRVUZQTEVkQlFVY3NTMEZCUzNoQ0xGTkJRVXdzUTBGQlpYbENMRWRCUVdZc1JVRkJhRUk3UVVGRFFTeGhRVUZMTTBJc1RVRkJUQ3huUTBGQlpUQkNMRTlCUVdZN1FVRkRTRHM3UVVGRFJDeGhRVUZQTEV0QlFVc3pRaXhKUVVGTUxFTkJRVlYwUXl4RFFVRldMRU5CUVdFNFFpeE5RVUZpTEVkQlFYTkNMRXRCUVV0UkxFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1EwRkJZU3RDTEUxQlFURkRPMEZCUTBrc1lVRkJTMUVzU1VGQlRDeERRVUZWZEVNc1EwRkJWaXhEUVVGaEswSXNTVUZCWWl4RFFVRnJRaXhEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVOQlFXeENPMEZCUkVvN08wRkJSVUVzVjBGQlMwOHNTVUZCVEN4RFFVRlZja01zUTBGQlZpeERRVUZoYzBJc1QwRkJZaXhEUVVGeFFpeFZRVUZCUlN4TFFVRkxMRVZCUVVrN1FVRkRNVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRVXdzU1VGQldTeExRVUZKTEVOQlFVTnFRaXhQUVVGcVFqdEJRVU5CYVVJc1VVRkJRVUVzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4SlFVRlpMRXRCUVVrc1EwRkJRMlFzVDBGQmFrSTdRVUZEU0N4UFFVaEVPMEZCU1VFc1YwRkJTMGdzVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4WFFVRkxSeXhQUVVGTUxFZEJRV1VzUTBGQlpqdEJRVU5JT3pzN01FSkJSVmxrTEZFc1JVRkJhMEk3UVVGQlFUczdRVUZETTBJc1ZVRkJUWE5GTEdOQlFXTXNSMEZCUnl3MlFrRkJVM1JGTEZGQlFWUXNRMEZCZGtJN1FVRkRRU3hWUVVGSmRVVXNaMEpCUVVvN1FVRkRRVVFzVFVGQlFVRXNZMEZCWXl4RFFVRkROVU1zVDBGQlppeERRVUYxUWl4VlFVRkJPRU1zV1VGQldTeEZRVUZKTzBGQlEyNURMR2RDUVVGUlFTeFpRVUZaTEVOQlFVTkRMRWxCUVhKQ08wRkJRMGtzWlVGQlN5eEhRVUZNTzBGQlEwbEdMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRek5DTEUxQlFVd3NRMEZCV1RCQ0xHZENRVUZuUWl4RFFVRkRhRVVzUTBGQk4wSXNSVUZCWjBOblJTeG5Ra0ZCWjBJc1EwRkJReTlFTEVOQlFXcEVPenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkpLMFFzV1VGQlFVRXNaMEpCUVdkQ0xFZEJRVWRETEZsQlFXNUNPenRCUVVOQkxGbEJRVUVzVFVGQlNTeERRVUZEUlN4alFVRk1MRU5CUVc5Q1NDeG5Ra0ZCWjBJc1EwRkJRMmhGTEVOQlFYSkRMRVZCUVhkRFowVXNaMEpCUVdkQ0xFTkJRVU12UkN4RFFVRjZSRHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlF6bENMRTFCUVV3c1EwRkJXVFpDTEdkQ1FVRm5RaXhEUVVGRGFFVXNRMEZCTjBJc1JVRkJaME5uUlN4blFrRkJaMElzUTBGQlF5OUVMRU5CUVdwRU96dEJRVU5CT3p0QlFVTktMR1ZCUVVzc1IwRkJURHRCUVVOSkswUXNXVUZCUVVFc1owSkJRV2RDTEVkQlFVZERMRmxCUVc1Q096dEJRVU5CTEZsQlFVRXNUVUZCU1N4RFFVRkRSeXhqUVVGTUxFTkJRVzlDU2l4blFrRkJaMElzUTBGQlEyaEZMRU5CUVhKRExFVkJRWGREWjBVc1owSkJRV2RDTEVOQlFVTXZSQ3hEUVVGNlJEczdRVUZEUVRzN1FVRkRTaXhsUVVGTExFZEJRVXc3UVVGRFNTdEVMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRM3BDTEZsQlFVd3NRMEZCYTBKM1FpeG5Ra0ZCWjBJc1EwRkJRMmhGTEVOQlFXNURPenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkpaMFVzV1VGQlFVRXNaMEpCUVdkQ0xFZEJRVWRETEZsQlFXNUNPenRCUVVOQkxGbEJRVUVzVFVGQlNTeERRVUZEU1N4dlFrRkJUQ3hEUVVFd1Frd3NaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRXpRenM3UVVGRFFUczdRVUZEU2l4bFFVRkxMRWRCUVV3N1FVRkRTV2RGTEZsQlFVRkJMR2RDUVVGblFpeEhRVUZIUXl4WlFVRnVRanM3UVVGRFFTeFpRVUZCTEUxQlFVa3NRMEZCUTNoQ0xGVkJRVXdzUTBGQlowSjFRaXhuUWtGQlowSXNRMEZCUXk5RUxFTkJRV3BET3p0QlFVTkJPenRCUVVOS0xHVkJRVXNzUjBGQlREdEJRVU5KSzBRc1dVRkJRVUVzWjBKQlFXZENMRWRCUVVkRExGbEJRVzVDT3p0QlFVTkJMRmxCUVVFc1RVRkJTU3hEUVVGRFN5eHJRa0ZCVEN4RFFVRjNRazRzWjBKQlFXZENMRU5CUVVNdlJDeERRVUY2UXpzN1FVRkRRVHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlEyeENMR3RDUVVGTUxFTkJRWGRDYVVJc1owSkJRV2RDTEVOQlFVTlBMRVZCUVhwRExFVkJRVFpEVUN4blFrRkJaMElzUTBGQlExRXNSVUZCT1VRc1JVRkJhMFZTTEdkQ1FVRm5RaXhEUVVGRFV5eEZRVUZ1Uml4RlFVRjFSbFFzWjBKQlFXZENMRU5CUVVOVkxFVkJRWGhITEVWQlFUUkhWaXhuUWtGQlowSXNRMEZCUTJoRkxFTkJRVGRJTEVWQlFXZEpaMFVzWjBKQlFXZENMRU5CUVVNdlJDeERRVUZxU2pzN1FVRkRRVHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlExVXNNRUpCUVV3c1EwRkJaME5ZTEdkQ1FVRm5RaXhEUVVGRFR5eEZRVUZxUkN4RlFVRnhSRkFzWjBKQlFXZENMRU5CUVVOUkxFVkJRWFJGTEVWQlFUQkZVaXhuUWtGQlowSXNRMEZCUTFNc1JVRkJNMFlzUlVGQkswWlVMR2RDUVVGblFpeERRVUZEVlN4RlFVRm9TQ3hGUVVGdlNGWXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRnlTU3hGUVVGM1NXZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJla283TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVObUxITkNRVUZNTEVOQlFUUkNZeXhuUWtGQlowSXNRMEZCUTA4c1JVRkJOME1zUlVGQmFVUlFMR2RDUVVGblFpeERRVUZEVVN4RlFVRnNSU3hGUVVGelJWSXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRjJSaXhGUVVFd1JtZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJNMGM3TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVOWExEaENRVUZNTEVOQlFXOURXaXhuUWtGQlowSXNRMEZCUTA4c1JVRkJja1FzUlVGQmVVUlFMR2RDUVVGblFpeERRVUZEVVN4RlFVRXhSU3hGUVVFNFJWSXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRXZSaXhGUVVGclIyZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJia2c3TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVOTUxFdEJRVXdzUTBGQlYwa3NaMEpCUVdkQ0xFTkJRVU5pTEVWQlFUVkNMRVZCUVdkRFlTeG5Ra0ZCWjBJc1EwRkJRMW9zUlVGQmFrUXNSVUZCY1VSWkxHZENRVUZuUWl4RFFVRkRXQ3hoUVVGMFJTeEZRVUZ4Uml4RFFVRkRMRU5CUVVOWExHZENRVUZuUWl4RFFVRkRZU3hSUVVGNFJ5eEZRVUZyU0N4RFFVRkRMRU5CUVVOaUxHZENRVUZuUWl4RFFVRkRZeXhMUVVGeVNTeEZRVUUwU1dRc1owSkJRV2RDTEVOQlFVTm9SU3hEUVVFM1NpeEZRVUZuUzJkRkxHZENRVUZuUWl4RFFVRkRMMFFzUTBGQmFrdzdPMEZCUTBFN08wRkJRMG9zWlVGQlN5eEhRVUZNTzBGQlEwa3JSQ3haUVVGQlFTeG5Ra0ZCWjBJc1IwRkJSME1zV1VGQmJrSTdPMEZCUTBFc1dVRkJRU3hOUVVGSkxFTkJRVU5qTEdGQlFVd3NRMEZCYlVKbUxHZENRVUZuUWl4RFFVRkRZaXhGUVVGd1F5eEZRVUYzUTJFc1owSkJRV2RDTEVOQlFVTmFMRVZCUVhwRUxFVkJRVFpFV1N4blFrRkJaMElzUTBGQlExZ3NZVUZCT1VVc1JVRkJOa1lzUTBGQlF5eERRVUZEVnl4blFrRkJaMElzUTBGQlEyRXNVVUZCYUVnc1JVRkJNRWdzUTBGQlF5eERRVUZEWWl4blFrRkJaMElzUTBGQlEyTXNTMEZCTjBrc1JVRkJiMHBrTEdkQ1FVRm5RaXhEUVVGRGFFVXNRMEZCY2tzc1JVRkJkMHRuUlN4blFrRkJaMElzUTBGQlF5OUVMRU5CUVhwTU96dEJRVU5CT3p0QlFVTktMR1ZCUVVzc1IwRkJURHRCUVVOQkxHVkJRVXNzUjBGQlREdEJRVU5KTEZsQlFVRXNUVUZCU1N4RFFVRkRLMFVzVTBGQlREczdRVUZEUVRzN1FVRkRTanRCUVVOSlF5eFpRVUZCUVN4UFFVRlBMRU5CUVVORExFdEJRVklzUTBGQlkycENMRmxCUVdRN1FVRkRRU3hyUWtGQlRTeEpRVUZKYTBJc1MwRkJTaXhEUVVGVkxHZEVRVUZXTEVOQlFVNDdRVUU1UkZJN1FVRm5SVWdzVDBGcVJVUTdRVUZyUlVnN096czJRa0ZGWlRORUxFc3NSVUZCWlR0QlFVRkJPenRCUVVNelFqdEJRVU5CTzBGQlJVRXNWVUZCU1N4RFFVRkRORVFzVFVGQlRTeERRVUZEUXl4VFFVRlFMRU5CUVdsQ04wUXNTMEZCYWtJc1EwRkJUQ3hGUVVFNFFqdEJRVU14UWl4alFVRk5MRWxCUVVreVJDeExRVUZLTEVOQlFWVXNORU5CUVZZc1EwRkJUanRCUVVOSU96dEJRVU5FTEZkQlFVdEhMRTlCUVV3N1FVRkRRU3hWUVVGSk9VUXNTMEZCU3l4SlFVRkpMRU5CUVdJc1JVRkJaMEk3UVVGRGFFSXNWVUZCVFN0RUxGRkJRV2xDTEVkQlFVYzdRVUZEZEVJM1JpeFJRVUZCUVN4RFFVRkRMRVZCUVVVc1MwRkJTM2RETEVsQlFVd3NRMEZCVlhoRExFTkJSRk03UVVGRmRFSkRMRkZCUVVGQkxFTkJRVU1zUlVGQlJTeEZRVVp0UWp0QlFVZDBRa01zVVVGQlFVRXNRMEZCUXl4RlFVRkZMRVZCU0cxQ08wRkJTWFJDUXl4UlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGS2JVSXNUMEZCTVVJN1FVRk5RU3hYUVVGTGNVTXNTVUZCVEN4RFFVRlZja01zUTBGQlZpeERRVUZoYzBJc1QwRkJZaXhEUVVGeFFpeFZRVUZEZEVJc1EwRkJSQ3hGUVVGSlJpeERRVUZLTEVWQlFVOXBRaXhEUVVGUUxFVkJRV0U3UVVGRE9VSXNXVUZCU1dwQ0xFTkJRVU1zU1VGQlNTeERRVUZVTEVWQlFWazdRVUZEVWpSR0xGVkJRVUZCTEZGQlFWRXNRMEZCUXpGR0xFTkJRVlFzUTBGQldUaENMRWxCUVZvc1EwRkJhVUk1UWl4RFFVRnFRanRCUVVOQk1FWXNWVUZCUVVFc1VVRkJVU3hEUVVGRE5VWXNRMEZCVkN4RFFVRlpaME1zU1VGQldpeERRVUZwUWl4TlFVRkpMRU5CUVVOUExFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1EwRkJZVUVzUTBGQllpeERRVUZxUWp0QlFVTkJPMEZCUTBnN08wRkJRMFFzV1VGQlRUWkdMRTFCUVUwc1IwRkJSeXhOUVVGSkxFTkJRVU4wUkN4SlFVRk1MRU5CUVZWMFF5eERRVUY2UWp0QlFVTkJMRmxCUVUwMlJpeE5RVUZOTEVkQlFVY3NUVUZCU1N4RFFVRkRka1FzU1VGQlRDeERRVUZWZGtNc1EwRkJla0k3UVVGRFFTeFpRVUZKSzBZc1RVRkJUU3hIUVVGSExFTkJRVU01UlN4RFFVRkRMRU5CUVVOcVFpeERRVUZETEVkQlFVY3NRMEZCVEN4RFFVRkVMRU5CUVZNc1EwRkJWQ3hEUVVGRUxFVkJRV00yUml4TlFVRk5MRU5CUVVNM1JpeERRVUZETEVkQlFVY3NRMEZCVEN4RFFVRk9MRU5CUVdNc1EwRkJaQ3hKUVVGdFFtbENMRU5CUVVNc1EwRkJRMnBDTEVOQlFVTXNSMEZCUnl4RFFVRk1MRU5CUVVRc1EwRkJVeXhEUVVGVUxFTkJRV3BETEVWQlFUaERPRVlzVFVGQlRTeERRVUZET1VZc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZpeEpRVUZsUlN4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVFNVJDeEZRVUZ0UlVFc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQmNFVXNRMEZCWWp0QlFVTkJMRmxCUVVrNFJpeE5RVUZOTEVkQlFVY3NRMEZCUXk5RkxFTkJRVU1zUTBGQlEycENMRU5CUVVNc1IwRkJSeXhEUVVGTUxFTkJRVVFzUTBGQlV5eERRVUZVTEVOQlFVUXNSVUZCWXpaR0xFMUJRVTBzUTBGQlF6ZEdMRU5CUVVNc1IwRkJSeXhEUVVGTUxFTkJRVTRzUTBGQll5eERRVUZrTEVsQlFXMUNhVUlzUTBGQlF5eERRVUZEYWtJc1EwRkJReXhIUVVGSExFTkJRVXdzUTBGQlJDeERRVUZUTEVOQlFWUXNRMEZCYWtNc1JVRkJPRU00Uml4TlFVRk5MRU5CUVVNNVJpeERRVUZFTEVOQlFVNHNRMEZCVlN4RFFVRldMRWxCUVdWRkxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFUbEVMRVZCUVcxRlFTeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRndSU3hEUVVGaU96dEJRVU5CTEdGQlFVc3NTVUZCU1N0R0xFdEJRVXNzUjBGQlJ5eERRVUZxUWl4RlFVRnZRa0VzUzBGQlN5eEhRVUZIY0VVc1MwRkJOVUlzUlVGQmJVTnZSU3hMUVVGTExFVkJRWGhETEVWQlFUUkRPMEZCUTNoRExHTkJRVTFETEZOQlFWTXNSMEZCUnl4TFFVRkxja1VzUzBGQlN5eEhRVUZIYjBVc1MwRkJVaXhIUVVGblFpeERRVUZ5UWl4RFFVRnNRanM3UVVGRFFTeGpRVUZOUlN4WFFVRlhMRWRCUVVjc1RVRkJTU3hEUVVGRFF5eHZRa0ZCVEN4UFFVRkJMRTFCUVVrc1IwRkJjMEpHTEZOQlFYUkNMRFJDUVVGdlEwZ3NUVUZCY0VNc1IwRkJlRUk3TzBGQlEwRXNZMEZCVFUwc1YwRkJWeXhIUVVGSExFMUJRVWtzUTBGQlEwUXNiMEpCUVV3c1QwRkJRU3hOUVVGSkxFZEJRWE5DUml4VFFVRjBRaXcwUWtGQmIwTkdMRTFCUVhCRExFZEJRWGhDT3p0QlFVTkJMR05CUVUxTkxFbEJRVWNzUjBGQlIxQXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJiRUk3UVVGQlFTeGpRVUYxUWxFc1NVRkJSeXhIUVVGSFNpeFhRVUZYTEVOQlFVTkxMRXRCUVZvc1MwRkJkVUpHTEVsQlFYQkVPMEZCUVVFc1kwRkJlVVJITEVsQlFVY3NSMEZCUjA0c1YwRkJWeXhEUVVGRExFTkJRVVFzUTBGQk1VVTdRVUZCUVN4alFVRXJSVThzU1VGQlJ5eEhRVUZIVUN4WFFVRlhMRU5CUVVOTExFdEJRVm9zUzBGQmRVSkRMRWxCUVRWSE8wRkJRVUVzWTBGRFNVVXNTVUZCUnl4SFFVRkhXQ3hOUVVGTkxFTkJRVU1zUTBGQlJDeERRVVJvUWp0QlFVRkJMR05CUTNGQ1dTeEpRVUZITEVkQlFVZFFMRmRCUVZjc1EwRkJRMGNzUzBGQldpeExRVUYxUWtjc1NVRkViRVE3UVVGQlFTeGpRVU4xUkVVc1NVRkJSeXhIUVVGSFVpeFhRVUZYTEVOQlFVTXNRMEZCUkN4RFFVUjRSVHRCUVVGQkxHTkJRelpGVXl4SlFVRkhMRWRCUVVkVUxGZEJRVmNzUTBGQlEwY3NTMEZCV2l4TFFVRjFRa3NzU1VGRU1VYzdPMEZCUlVGcVFpeFZRVUZCUVN4UlFVRlJMRU5CUVVNelJpeERRVUZVTEVOQlFWa3JRaXhKUVVGYUxFTkJRV2xDTEVOQlFVTjFSU3hKUVVGRUxFVkJRVTFMTEVsQlFVNHNRMEZCYWtJN1FVRkRRV2hDTEZWQlFVRkJMRkZCUVZFc1EwRkJRelZHTEVOQlFWUXNRMEZCV1dkRExFbEJRVm9zUTBGQmFVSXNRMEZCUXpCRkxFbEJRVVFzUlVGQlRVa3NTVUZCVGl4RFFVRnFRanRCUVVOQmJFSXNWVUZCUVVFc1VVRkJVU3hEUVVGRE1VWXNRMEZCVkN4RFFVRlpPRUlzU1VGQldpeERRVUZwUWl4RFFVRkRlVVVzU1VGQlJDeEZRVUZOU1N4SlFVRk9MRU5CUVdwQ08wRkJRMEZrTEZWQlFVRkJMRTFCUVUwc1IwRkJSMGtzVjBGQlZEdEJRVU5CU0N4VlFVRkJRU3hOUVVGTkxFZEJRVWRMTEZkQlFWUTdRVUZEU0RzN1FVRkRSQ3haUVVGTlF5eEhRVUZITEVkQlFVZFFMRTFCUVUwc1EwRkJRMU1zUzBGQlVDeEZRVUZhTzBGQlFVRXNXVUZCTmtKRUxFZEJRVWNzUjBGQlIxSXNUVUZCVFN4RFFVRkRVeXhMUVVGUUxFdEJRV3RDUml4SFFVRnlSRHRCUVVGQkxGbEJRVEJFUnl4SFFVRkhMRWRCUVVkV0xFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFYUkZPMEZCUVVFc1dVRkJNa1ZYTEVkQlFVY3NSMEZCUjFnc1RVRkJUU3hEUVVGRFV5eExRVUZRTEV0QlFXdENReXhIUVVGdVJ6dEJRVUZCTEZsQlEwbEZMRWRCUVVjc1IwRkJSMWdzVFVGQlRTeERRVUZEVVN4TFFVRlFMRVZCUkZZN1FVRkJRU3haUVVNeVFra3NSMEZCUnl4SFFVRkhXaXhOUVVGTkxFTkJRVU5STEV0QlFWQXNTMEZCYTBKSExFZEJSRzVFTzBGQlFVRXNXVUZEZDBSRkxFZEJRVWNzUjBGQlIySXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkVjRVU3UVVGQlFTeFpRVU41UldNc1IwRkJSeXhIUVVGSFpDeE5RVUZOTEVOQlFVTlJMRXRCUVZBc1MwRkJhMEpMTEVkQlJHcEhPMEZCUlVGcVFpeFJRVUZCUVN4UlFVRlJMRU5CUVVNelJpeERRVUZVTEVOQlFWa3JRaXhKUVVGYUxFTkJRV2xDTEVOQlFVTjFSU3hIUVVGRUxFVkJRVTFMTEVkQlFVNHNRMEZCYWtJN1FVRkRRV2hDTEZGQlFVRkJMRkZCUVZFc1EwRkJRelZHTEVOQlFWUXNRMEZCV1dkRExFbEJRVm9zUTBGQmFVSXNRMEZCUXpCRkxFZEJRVVFzUlVGQlRVa3NSMEZCVGl4RFFVRnFRanRCUVVOQmJFSXNVVUZCUVVFc1VVRkJVU3hEUVVGRE1VWXNRMEZCVkN4RFFVRlpPRUlzU1VGQldpeERRVUZwUWl4RFFVRkRlVVVzUjBGQlJDeEZRVUZOU1N4SFFVRk9MRU5CUVdwQ08wRkJRMGdzVDBFelFrUTdRVUUwUWtFc1YwRkJTM1JGTEVsQlFVd3NSMEZCV1hGRUxGRkJRVm83UVVGRFFTeFhRVUZMUkN4UFFVRk1PMEZCUTBnN096dDNRa0YyVDJ0Q1ppeEZMRVZCUVZsRExFVXNSVUZCV1hKQ0xFVXNSVUZCV1VNc1JTeEZRVUZaYzBRc1N5eEZRVUZsUXl4akxFVkJRWGRDUXl4VkxFVkJRVzlDYmtNc1JTeEZRVUZaUXl4RkxFVkJRVmx0UXl4VExFVkJRVFpETzBGQlF5OU1PMEZCUTBFN1FVRkRRU3hWUVVGSlF5eEpRVUZKTEVkQlFVZDZSeXhKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZVc1IwRkJWaXhIUVVGblFpeEhRVUV6UWp0QlFVRkJMRlZCUTBsRExFZEJRVWNzUjBGQlJ6TkhMRWxCUVVrc1EwRkJRekJITEVWQlFVd3NSMEZCVlN4SFFVRldMRWxCUVdsQ0xFTkJRVU5NTEV0QlFVUXNTVUZCVlN4RFFVRXpRaXhEUVVSV08wRkJRVUVzVlVGRlNVOHNSMEZCWVN4SFFVRkhMRVZCUm5CQ08wRkJRVUVzVlVGSFNVTXNSVUZJU2p0QlFVRkJMRlZCU1VsRExFMUJRVTBzUjBGQlJ5eFRRVUZVUVN4TlFVRlRMRU5CUVVOdVNDeERRVUZFTEVWQlFWbERMRU5CUVZvc1JVRkJkVUlyUnl4SFFVRjJRaXhGUVVGMVF6dEJRVU0xUXl4WlFVRkpTU3hEUVVGRExFZEJRVWR3U0N4RFFVRkRMRWRCUVVkTExFbEJRVWtzUTBGQlEyZElMRWRCUVV3c1EwRkJVMHdzUjBGQlZDeERRVUZLTEVkQlFXOUNMMGNzUTBGQlF5eEhRVUZIU1N4SlFVRkpMRU5CUVVOcFNDeEhRVUZNTEVOQlFWTk9MRWRCUVZRc1EwRkJhRU03UVVGQlFTeFpRVU5KVHl4RFFVRkRMRWRCUVVkMlNDeERRVUZETEVkQlFVZExMRWxCUVVrc1EwRkJRMmxJTEVkQlFVd3NRMEZCVTA0c1IwRkJWQ3hEUVVGS0xFZEJRVzlDTDBjc1EwRkJReXhIUVVGSFNTeEpRVUZKTEVOQlFVTm5TQ3hIUVVGTUxFTkJRVk5NTEVkQlFWUXNRMEZFYUVNN1FVRkZRU3hsUVVGUE8wRkJRVVZvU0N4VlFVRkJRU3hEUVVGRExFVkJRVVZ2U0N4RFFVRk1PMEZCUVZGdVNDeFZRVUZCUVN4RFFVRkRMRVZCUVVWelNEdEJRVUZZTEZOQlFWQTdRVUZEU0N4UFFWSk1PenRCUVZOQkxGVkJRVWtzUTBGQlEzQkZMRVZCUVVRc1NVRkJUeXhEUVVGRFF5eEZRVUZhTEVWQlFXZENPMEZCUTFvc1pVRkJUeXhEUVVGRGJVSXNSVUZCUkN4RlFVRkxReXhGUVVGTUxFVkJRVk5ETEVWQlFWUXNSVUZCWVVNc1JVRkJZaXhGUVVGcFFrUXNSVUZCYWtJc1JVRkJjVUpETEVWQlFYSkNMRU5CUVZBN1FVRkRTRHM3UVVGRFJDeFZRVUZKTEVOQlFVTnRReXhUUVVGTUxFVkJRV2RDTzBGQlExcExMRkZCUVVGQkxFVkJRVVVzUjBGQlIwTXNUVUZCVFN4RFFVRkROVU1zUlVGQlJDeEZRVUZMUXl4RlFVRk1MRVZCUVZNc1EwRkJRM2RETEVkQlFWWXNRMEZCV0R0QlFVTkJla01zVVVGQlFVRXNSVUZCUlN4SFFVRkhNa01zUlVGQlJTeERRVUZEYkVnc1EwRkJVanRCUVVOQmQwVXNVVUZCUVVFc1JVRkJSU3hIUVVGSE1FTXNSVUZCUlN4RFFVRkRha2dzUTBGQlVqdEJRVU5CYVVnc1VVRkJRVUVzUlVGQlJTeEhRVUZIUXl4TlFVRk5MRU5CUVVNeFF5eEZRVUZFTEVWQlFVdERMRVZCUVV3c1JVRkJVeXhEUVVGRGMwTXNSMEZCVml4RFFVRllPMEZCUTBGMlF5eFJRVUZCUVN4RlFVRkZMRWRCUVVkNVF5eEZRVUZGTEVOQlFVTnNTQ3hEUVVGU08wRkJRMEV3UlN4UlFVRkJRU3hGUVVGRkxFZEJRVWQzUXl4RlFVRkZMRU5CUVVOcVNDeERRVUZTTzBGQlEwRXNXVUZCU1c5SUxFZEJRVWNzUjBGQlIyaElMRWxCUVVrc1EwRkJRMmRJTEVkQlFVd3NRMEZCVTJoSUxFbEJRVWtzUTBGQlF6QkhMRVZCUVV3c1IwRkJWU3hIUVVGV0xFZEJRV2RDVEN4TFFVRjZRaXhEUVVGV08wRkJRVUVzV1VGRFNWa3NSMEZCUnl4SFFVRkhha2dzU1VGQlNTeERRVUZEYVVnc1IwRkJUQ3hEUVVGVGFrZ3NTVUZCU1N4RFFVRkRNRWNzUlVGQlRDeEhRVUZWTEVkQlFWWXNSMEZCWjBKTUxFdEJRWHBDTEVOQlJGWTdRVUZCUVN4WlFVVkpNVWNzUTBGQlF5eEhRVUZITEVOQlFVTjFSU3hGUVVGRkxFZEJRVWRGTEVWQlFVNHNTVUZCV1N4RFFVWndRanRCUVVGQkxGbEJSMGw0UlN4RFFVRkRMRWRCUVVjc1EwRkJRM1ZGTEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhKUVVGWkxFTkJTSEJDTzBGQlNVRXNXVUZCU1RoRExFTkJRVU1zUjBGQlIzaElMRU5CUVVNc1IwRkJSMEVzUTBGQlNpeEpRVUZUYlVRc1JVRkJSU3hIUVVGSFFTeEZRVUZrTEVsQlFXOUNiRVFzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWxCUVZOdFJDeEZRVUZGTEVkQlFVZEJMRVZCUVdRc1EwRkJOVUk3TzBGQlEwRXNXVUZCU1c5RkxFTkJRVU1zUjBGQlJ5eERRVUZTTEVWQlFWYzdRVUZEVUVFc1ZVRkJRVUVzUTBGQlF5eEhRVUZIYmtnc1NVRkJTU3hEUVVGRFZTeEpRVUZNTEVOQlFWVjVSeXhEUVVGV0xFTkJRVW83UVVGRFFYSkZMRlZCUVVGQkxFVkJRVVVzUjBGQlIzRkZMRU5CUVVNc1IwRkJSM0pGTEVWQlFWUTdRVUZEUVVNc1ZVRkJRVUVzUlVGQlJTeEhRVUZIYjBVc1EwRkJReXhIUVVGSGNFVXNSVUZCVkR0QlFVTklPenRCUVVORUxGbEJRVWx4UlN4SFFVRkhMRWRCUVVkMFJTeEZRVUZGTEVkQlFVZEJMRVZCUVdZN1FVRkJRU3haUVVOSmRVVXNSMEZCUnl4SFFVRkhkRVVzUlVGQlJTeEhRVUZIUVN4RlFVUm1PMEZCUVVFc1dVRkZTWFZGTEVOQlFVTXNSMEZCUnl4RFFVRkRhRUlzWTBGQll5eEpRVUZKUXl4VlFVRnNRaXhIUVVFclFpeERRVUZETEVOQlFXaERMRWRCUVc5RExFTkJRWEpETEVsQlEwRjJSeXhKUVVGSkxFTkJRVU5WTEVsQlFVd3NRMEZCVlZZc1NVRkJTU3hEUVVGRGRVZ3NSMEZCVEN4RFFVRlRMRU5CUVVOSUxFZEJRVWNzUjBGQlIwTXNSMEZCVGl4SFFVRlpSQ3hIUVVGSExFZEJRVWQ0U0N4RFFVRk9MRWRCUVZWQkxFTkJRWFJDTEVkQlFUQkNlVWdzUjBGQlJ5eEhRVUZITVVnc1EwRkJUaXhIUVVGVlFTeERRVUZ5UXl4TFFVRXlRM2xJTEVkQlFVY3NSMEZCUjNoSUxFTkJRVTRzUjBGQlZVRXNRMEZCVml4SFFVRmplVWdzUjBGQlJ5eEhRVUZITVVnc1EwRkJUaXhIUVVGVlFTeERRVUZ1UlN4RFFVRlVMRU5CUVZZc1EwRklVanRCUVVGQkxGbEJTVWxuUkN4RlFVRkZMRWRCUVVjeVJTeERRVUZETEVkQlFVZDRSU3hGUVVGS0xFZEJRVk5zUkN4RFFVRlVMRWRCUVdGdFJDeEZRVUZpTEVkQlFXdENMRU5CUVVOdFFpeEZRVUZGTEVkQlFVZEZMRVZCUVU0c1NVRkJXU3hEUVVwMlF6dEJRVUZCTEZsQlMwbDRRaXhGUVVGRkxFZEJRVWN3UlN4RFFVRkRMRWRCUVVjc1EwRkJRM1pGTEVWQlFVd3NSMEZCVlhCRUxFTkJRVllzUjBGQlkyMUVMRVZCUVdRc1IwRkJiVUlzUTBGQlEzRkNMRVZCUVVVc1IwRkJSMFVzUlVGQlRpeEpRVUZaTEVOQlRIaERPMEZCUVVFc1dVRk5TVzFFTEVWQlFVVXNSMEZCUjNoSUxFbEJRVWtzUTBGQlEzbElMRWxCUVV3c1EwRkJWU3hEUVVGRGRFUXNSVUZCUlN4SFFVRkhka0lzUlVGQlRpeEpRVUZaUnl4RlFVRjBRaXhEUVU1VU8wRkJRVUVzV1VGUFNUSkZMRVZCUVVVc1IwRkJSekZJTEVsQlFVa3NRMEZCUTNsSUxFbEJRVXdzUTBGQlZTeERRVUZEY0VRc1JVRkJSU3hIUVVGSGVrSXNSVUZCVGl4SlFVRlpSeXhGUVVGMFFpeERRVkJVTzBGQlUwRjVSU3hSUVVGQlFTeEZRVUZGTEVkQlFVZDBSQ3hGUVVGRkxFZEJRVWQyUWl4RlFVRk1MRWRCUVZVelF5eEpRVUZKTEVOQlFVTXdSeXhGUVVGTUxFZEJRVlZqTEVWQlFYQkNMRWRCUVhsQ1FTeEZRVUU1UWp0QlFVTkJSU3hSUVVGQlFTeEZRVUZGTEVkQlFVZDBSQ3hGUVVGRkxFZEJRVWQ2UWl4RlFVRk1MRWRCUVZVelF5eEpRVUZKTEVOQlFVTXdSeXhGUVVGTUxFZEJRVlZuUWl4RlFVRndRaXhIUVVGNVFrRXNSVUZCT1VJN1FVRkRRVVlzVVVGQlFVRXNSVUZCUlN4SFFVRkhMRU5CUVV3c1MwRkJWMEVzUlVGQlJTeEhRVUZIZUVnc1NVRkJTU3hEUVVGRE1FY3NSVUZCVEN4SFFVRlZMRU5CUVZZc1IwRkJZMk1zUlVGQk9VSTdRVUZEUVVVc1VVRkJRVUVzUlVGQlJTeEhRVUZITEVOQlFVd3NTMEZCVjBFc1JVRkJSU3hIUVVGSE1VZ3NTVUZCU1N4RFFVRkRNRWNzUlVGQlRDeEhRVUZWTEVOQlFWWXNSMEZCWTJkQ0xFVkJRVGxDT3p0QlFVTkJMRmxCUVVsdVFpeFZRVUZWTEVsQlFVbHBRaXhGUVVGRkxFZEJRVWRGTEVWQlFYWkNMRVZCUVRKQ08wRkJRM1pDUml4VlFVRkJRU3hGUVVGRkxFZEJRVWRCTEVWQlFVVXNSMEZCUjNoSUxFbEJRVWtzUTBGQlF6QkhMRVZCUVV3c1IwRkJWU3hEUVVGd1FqdEJRVU5JT3p0QlFVTkVMRmxCUVVrc1EwRkJRMGdzVlVGQlJDeEpRVUZsYlVJc1JVRkJSU3hIUVVGSFJpeEZRVUY0UWl4RlFVRTBRanRCUVVONFFrVXNWVUZCUVVFc1JVRkJSU3hIUVVGSFFTeEZRVUZGTEVkQlFVY3hTQ3hKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZVc1EwRkJjRUk3UVVGRFNEdEJRVU5LTEU5QmNFTkVMRTFCYjBOUE8wRkJRMGhqTEZGQlFVRkJMRVZCUVVVc1IwRkJSMmhDTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRV3RDTEZGQlFVRkJMRVZCUVVVc1IwRkJSMnhDTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRVGRFTEZGQlFVRkJMRVZCUVVVc1IwRkJSelpFTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRVFZFTEZGQlFVRkJMRVZCUVVVc1IwRkJSelJFTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRTRHM3UVVGRFJDeFZRVUZKYlVJc1JVRkJSU3hIUVVGSFJDeEZRVUZGTEVkQlFVZEdMRVZCUVdRN08wRkJRMEVzVlVGQlNYaElMRWxCUVVrc1EwRkJRM1ZJTEVkQlFVd3NRMEZCVTBrc1JVRkJWQ3hKUVVGbGJFSXNTVUZCYmtJc1JVRkJlVUk3UVVGRGNrSXNXVUZCU1cxQ0xFdEJRVXNzUjBGQlIwWXNSVUZCV2p0QlFVRkJMRmxCUTBsSExFdEJRVXNzUjBGQlIzcEVMRVZCUkZvN1FVRkJRU3haUVVWSk1FUXNTMEZCU3l4SFFVRkhla1FzUlVGR1dqdEJRVWRCY1VRc1VVRkJRVUVzUlVGQlJTeEhRVUZIUml4RlFVRkZMRWRCUVVkbUxFbEJRVWtzU1VGQlNVWXNWVUZCVlN4SlFVRkpiVUlzUlVGQlJTeEhRVUZIUml4RlFVRnVRaXhIUVVGM1FpeERRVUY0UWl4SFFVRTBRaXhEUVVGRExFTkJRV3BETEVOQlFXUTdRVUZEUVhCRUxGRkJRVUZCTEVWQlFVVXNSMEZCUjNwQ0xFVkJRVVVzUjBGQlIwY3NSVUZCUlN4SFFVRkhPVU1zU1VGQlNTeERRVUZEWjBnc1IwRkJUQ3hEUVVGVFZTeEZRVUZVTEVOQlFXWTdRVUZEUVhKRUxGRkJRVUZCTEVWQlFVVXNSMEZCUjNwQ0xFVkJRVVVzUjBGQlIwY3NSVUZCUlN4SFFVRkhMME1zU1VGQlNTeERRVUZEYVVnc1IwRkJUQ3hEUVVGVFV5eEZRVUZVTEVOQlFXWTdRVUZEUVdRc1VVRkJRVUVzUjBGQlJ5eEhRVUZITEV0QlFVdDRSQ3hIUVVGTUxFTkJRVk5uUWl4RlFVRlVMRVZCUVdGRExFVkJRV0lzUlVGQmFVSjJRaXhGUVVGcVFpeEZRVUZ4UWtNc1JVRkJja0lzUlVGQmVVSnpSQ3hMUVVGNlFpeEZRVUZuUXl4RFFVRm9ReXhGUVVGdFEwVXNWVUZCYmtNc1JVRkJLME56UWl4TFFVRXZReXhGUVVGelJFTXNTMEZCZEVRc1JVRkJOa1FzUTBGQlEwb3NSVUZCUkN4RlFVRkxSU3hMUVVGTUxFVkJRVmxxUml4RlFVRmFMRVZCUVdkQ1F5eEZRVUZvUWl4RFFVRTNSQ3hEUVVGT08wRkJRMGc3TzBGQlEwUXJSU3hOUVVGQlFTeEZRVUZGTEVkQlFVZEVMRVZCUVVVc1IwRkJSMFlzUlVGQlZqdEJRVU5CTEZWQlFVbFBMRVZCUVVVc1IwRkJSeTlJTEVsQlFVa3NRMEZCUTJkSUxFZEJRVXdzUTBGQlUxRXNSVUZCVkN4RFFVRlVPMEZCUVVFc1ZVRkRTVkVzUlVGQlJTeEhRVUZIYUVrc1NVRkJTU3hEUVVGRGFVZ3NSMEZCVEN4RFFVRlRUeXhGUVVGVUxFTkJSRlE3UVVGQlFTeFZRVVZKVXl4RlFVRkZMRWRCUVVkcVNTeEpRVUZKTEVOQlFVTm5TQ3hIUVVGTUxFTkJRVk5WTEVWQlFWUXNRMEZHVkR0QlFVRkJMRlZCUjBsUkxFVkJRVVVzUjBGQlIyeEpMRWxCUVVrc1EwRkJRMmxJTEVkQlFVd3NRMEZCVTFNc1JVRkJWQ3hEUVVoVU8wRkJRVUVzVlVGSlNWTXNRMEZCUXl4SFFVRkhia2tzU1VGQlNTeERRVUZEYjBrc1IwRkJUQ3hEUVVGVFZDeEZRVUZGTEVkQlFVY3NRMEZCWkN4RFFVcFNPMEZCUVVFc1ZVRkxTVlVzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCU2l4SFFVRlJka1lzUlVGQlVpeEhRVUZoY1VZc1EwRk1kRUk3UVVGQlFTeFZRVTFKUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGS0xFZEJRVkYyUml4RlFVRlNMRWRCUVdGdlJpeERRVTUwUWp0QlFVRkJMRlZCVDBsSkxFVkJRVVVzUjBGQlJ5eERRVUZEY2tVc1JVRkJSQ3hGUVVGTFF5eEZRVUZNTEVOQlVGUTdRVUZCUVN4VlFWRkpjVVVzUlVGQlJTeEhRVUZITEVOQlFVTjBSU3hGUVVGRkxFZEJRVWR0UlN4RlFVRkZMRWRCUVVkTUxFVkJRVmdzUlVGQlpUZEVMRVZCUVVVc1IwRkJSMjFGTEVWQlFVVXNSMEZCUjFBc1JVRkJla0lzUTBGU1ZEdEJRVUZCTEZWQlUwbFZMRVZCUVVVc1IwRkJSeXhEUVVGRGNrVXNSVUZCUlN4SFFVRkhhVVVzUlVGQlJTeEhRVUZIU0N4RlFVRllMRVZCUVdVM1JDeEZRVUZGTEVkQlFVZHBSU3hGUVVGRkxFZEJRVWRNTEVWQlFYcENMRU5CVkZRN1FVRkJRU3hWUVZWSlV5eEZRVUZGTEVkQlFVY3NRMEZCUTNSRkxFVkJRVVFzUlVGQlMwTXNSVUZCVEN4RFFWWlVPMEZCVjBGdFJTeE5RVUZCUVN4RlFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGR0xFZEJRVkVzU1VGQlNVUXNSVUZCUlN4RFFVRkRMRU5CUVVRc1EwRkJUaXhIUVVGWlF5eEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRjBRanRCUVVOQlFTeE5RVUZCUVN4RlFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGR0xFZEJRVkVzU1VGQlNVUXNSVUZCUlN4RFFVRkRMRU5CUVVRc1EwRkJUaXhIUVVGWlF5eEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRjBRanM3UVVGRFFTeFZRVUZKYUVNc1UwRkJTaXhGUVVGbE8wRkJRMWdzWlVGQlR5eERRVUZEWjBNc1JVRkJSQ3hGUVVGTFF5eEZRVUZNTEVWQlFWTkRMRVZCUVZRc1JVRkJZVU1zVFVGQllpeERRVUZ2UWk5Q0xFZEJRWEJDTEVOQlFWQTdRVUZEU0N4UFFVWkVMRTFCUlU4N1FVRkRTRUVzVVVGQlFVRXNSMEZCUnl4SFFVRkhMRU5CUVVNMFFpeEZRVUZFTEVWQlFVdERMRVZCUVV3c1JVRkJVME1zUlVGQlZDeEZRVUZoUXl4TlFVRmlMRU5CUVc5Q0wwSXNSMEZCY0VJc1JVRkJlVUpuUXl4SlFVRjZRaXhIUVVGblEwTXNTMEZCYUVNc1EwRkJjME1zUjBGQmRFTXNSVUZCTWtOcVNTeEhRVUV6UXl4RFFVRXJReXhWUVVGQmFrSXNRMEZCUXp0QlFVRkJMR2xDUVVGSmJVb3NWVUZCVlN4RFFVRkRia29zUTBGQlJDeERRVUZrTzBGQlFVRXNVMEZCYUVRc1EwRkJUanRCUVVOQkxGbEJRVWx2U2l4TlFVRk5MRWRCUVVjc1JVRkJZanM3UVVGRFFTeGhRVUZMTEVsQlFVbDZTaXhEUVVGRExFZEJRVWNzUTBGQlVpeEZRVUZYTUVvc1JVRkJSU3hIUVVGSGNFTXNSMEZCUnl4RFFVRkRka1lzVFVGQmVrSXNSVUZCYVVNdlFpeERRVUZETEVkQlFVY3dTaXhGUVVGeVF5eEZRVUY1UXpGS0xFTkJRVU1zUlVGQk1VTXNSVUZCT0VNN1FVRkRNVU41U2l4VlFVRkJRU3hOUVVGTkxFTkJRVU42U2l4RFFVRkVMRU5CUVU0c1IwRkJXVUVzUTBGQlF5eEhRVUZITEVOQlFVb3NSMEZCVVhkSUxFMUJRVTBzUTBGQlEwWXNSMEZCUnl4RFFVRkRkRWdzUTBGQlF5eEhRVUZITEVOQlFVd3NRMEZCU2l4RlFVRmhjMGdzUjBGQlJ5eERRVUZEZEVnc1EwRkJSQ3hEUVVGb1FpeEZRVUZ4UW5GSUxFZEJRWEpDTEVOQlFVNHNRMEZCWjBNdlJ5eERRVUY0UXl4SFFVRTBRMnRJTEUxQlFVMHNRMEZCUTBZc1IwRkJSeXhEUVVGRGRFZ3NRMEZCUkN4RFFVRktMRVZCUVZOelNDeEhRVUZITEVOQlFVTjBTQ3hEUVVGRExFZEJRVWNzUTBGQlRDeERRVUZhTEVWQlFYRkNjVWdzUjBGQmNrSXNRMEZCVGl4RFFVRm5RMmhJTEVOQlFYaEdPMEZCUTBnN08wRkJRMFFzWlVGQlQyOUtMRTFCUVZBN1FVRkRTRHRCUVVOS0lpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dVR0YwYUVSbFppQjlJR1p5YjIwZ0p5NHZZVzVwYldGMGFXOXVKMXh1YVcxd2IzSjBJSHNnY0dGeWMyVlRWa2NzSUUxdmRtVlViME52YlcxaGJtUXNJRXhwYm1WVWIwTnZiVzFoYm1Rc0lFaHZjbWw2YjI1MFlXeE1hVzVsVkc5RGIyMXRZVzVrTENCV1pYSjBhV05oYkV4cGJtVlViME52YlcxaGJtUXNJRU4xY25abFZHOURiMjF0WVc1a0xDQlJkV0ZrY21GMGFXTkRkWEoyWlZSdlEyOXRiV0Z1WkN3Z1JXeHNhWEIwYVdOaGJFRnlZME52YlcxaGJtUWdmU0JtY205dElDZHpkbWN0Y0dGMGFDMXdZWEp6WlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VHRjBhRTFoYTJWeUlIdGNiaUFnSUNCd2RXSnNhV01nY0dGMGFEb2dVR0YwYUVSbFppQTlJSHRjYmlBZ0lDQWdJQ0FnWXpvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdrNklGdGRMRnh1SUNBZ0lDQWdJQ0J2T2lCYlhTeGNiaUFnSUNBZ0lDQWdkam9nVzExY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY0hKcGRtRjBaU0JqZFhKeVpXNTBXRG9nYm5WdFltVnlJRDBnTUR0Y2JpQWdJQ0J3Y21sMllYUmxJR04xY25KbGJuUlpPaUJ1ZFcxaVpYSWdQU0F3TzF4dUlDQWdJSEJ5YVhaaGRHVWdiMlptYzJWMFdEb2diblZ0WW1WeUlEMGdTVzVtYVc1cGRIazdYRzRnSUNBZ2NISnBkbUYwWlNCdlptWnpaWFJaT2lCdWRXMWlaWElnUFNCSmJtWnBibWwwZVR0Y2JseHVJQ0FnSUM4dklHWnZjaUJrYVhOamIyNTBhVzUxYjNWeklIQmhkR2h6WEc0Z0lDQWdjSEpwZG1GMFpTQndZWFJvVW1WaFpIa2dQU0JtWVd4elpWeHVJQ0FnSUhCeWFYWmhkR1VnY0dGMGFGTjBZWEowT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkSUQwZ1d6QXNJREJkWEc0Z0lDQWdjSEpwZG1GMFpTQndZWFJvUTJoaGFXNDZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMWJYU0E5SUZ0ZFhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdZWFJvUkdGMFlUODZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRjBhRVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5YzJVb2NHRjBhRVJoZEdFcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCd2NtbDJZWFJsSUhWd1pHRjBaVmhaS0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZnZ1BTQjRYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZrZ1BTQjVYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwV0NBOUlFMWhkR2d1YldsdUtIUm9hWE11YjJabWMyVjBXQ3dnZUNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQjVLVnh1SUNBZ0lIMWNibHh1SUNBZ0lIQnlhWFpoZEdVZ1kyRnNZM1ZzWVhSbFFtVjZhV1Z5VFdsdVRXRjRLSEF3T2lCdWRXMWlaWElzSUhBeE9pQnVkVzFpWlhJc0lIQXlPaUJ1ZFcxaVpYSXNJSEF6T2lCdWRXMWlaWElwT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVNBOUlETWdLaUFvY0RNZ0xTQXpJQ29nY0RJZ0t5QXpJQ29nY0RFZ0xTQndNQ2xjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZaUE5SURZZ0tpQW9jRElnTFNBeUlDb2djREVnS3lCd01DbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1l5QTlJRE1nS2lBb2NERWdMU0J3TUNsY2JpQWdJQ0FnSUNBZ2JHVjBJRzFwYmlBOUlFbHVabWx1YVhSNUxDQnRZWGdnUFNBdFNXNW1hVzVwZEhsY2JpQWdJQ0FnSUNBZ2FXWWdLR0lnS2lCaUlDMGdOQ0FxSUdFZ0tpQmpJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE54Y25RZ1BTQk5ZWFJvTG5OeGNuUW9ZaUFxSUdJZ0xTQTBJQ29nWVNBcUlHTXBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5YjI5MGN5QTlJRnN4TENBdE1WMHViV0Z3S0cxMWJIUnBJRDArSUNodGRXeDBhU0FxSUhOeGNuUWdMU0JpS1NBdklESWdMeUJoS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbTl2ZEhNdVptOXlSV0ZqYUNoeWIyOTBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbTl2ZENBK0lEQWdKaVlnY205dmRDQThJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCTllYUm9MbkJ2ZHlneElDMGdjbTl2ZEN3Z015a2dLaUJ3TUNBcklETWdLaUJOWVhSb0xuQnZkeWd4SUMwZ2NtOXZkQ3dnTWlrZ0tpQnliMjkwSUNvZ2NERWdLeUF6SUNvZ0tERWdMU0J5YjI5MEtTQXFJSEp2YjNRZ0tpQnliMjkwSUNvZ2NESWdLeUJOWVhSb0xuQnZkeWh5YjI5MExDQXpLU0FxSUhBelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmlBOUlFMWhkR2d1YldsdUtHMXBiaXdnZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVDQTlJRTFoZEdndWJXRjRLRzFoZUN3Z2RtRnNkV1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdGFXNGdQU0JOWVhSb0xtMXBiaWh0YVc0c0lIQXdMQ0J3TXlsY2JpQWdJQ0FnSUNBZ2JXRjRJRDBnVFdGMGFDNXRZWGdvYldGNExDQndNQ3dnY0RNcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmJXbHVMQ0J0WVhoZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hKcGRtRjBaU0JqWVd4amRXeGhkR1ZJYVdkb2JIbFBjbVJsY2loaGNuSTZJRzUxYldKbGNsdGRMQ0J5WVhScGJ6b2diblZ0WW1WeUtUb2diblZ0WW1WeVcxMGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnpkV3gwT2lCdWRXMWlaWEpiWFNBOUlGdGRYRzRnSUNBZ0lDQWdJR0Z5Y2k1bWIzSkZZV05vS0NoMkxDQnBMQ0JoS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0ErUFNCaExteGxibWQwYUNBdElERXBJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2RpQXFJQ2d4SUMwZ2NtRjBhVzhwSUNzZ1lWdHBJQ3NnTVYwZ0tpQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEZ4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdZMkZzWTNWc1lYUmxRbVY2YVdWeVUzQnNhWFFvY21GMGFXODZJRzUxYldKbGNpd2dMaTR1YjNKa1pYSXdPaUJ1ZFcxaVpYSmJYU2s2SUc1MWJXSmxjbHRkSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU1TQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJd0xDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU1pQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJeExDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU15QTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJeUxDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0dmNtUmxjakZiTUYwc0lHOXlaR1Z5TWxzd1hTd2diM0prWlhJeld6QmRMQ0J2Y21SbGNqSmJNVjBzSUc5eVpHVnlNVnN5WFN3Z2IzSmtaWEl3V3pOZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhCMVlteHBZeUJ0YjNabFZHOG9lRG9nYm5WdFltVnlMQ0I1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuQmhkR2hTWldGa2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtTWdQU0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG1rZ1BTQmJXekFzSURCZFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG04Z1BTQmJYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xuWWdQU0JiVzNnc0lIbGRYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBXQ0E5SUhoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZrZ1BTQjVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRGZ2dQU0I0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkRmtnUFNCNVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2hTWldGa2VTQTlJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJHbHVaVlJ2S0M0dUxuUm9hWE11Y0dGMGFGTjBZWEowS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c2FXNWxWRzhvZUN3Z2VTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUVOb1lXbHVMbkIxYzJnb2RHaHBjeTV3WVhSb1UzUmhjblFwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb1UzUmhjblFnUFNCYmVDd2dlVjFjYmlBZ0lDQjlYRzRnSUNBZ2NIVmliR2xqSUcxdmRtVlViMUpsYkdGMGFYWmxLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MlpWUnZLSFJvYVhNdVkzVnljbVZ1ZEZnZ0t5QjRMQ0IwYUdsekxtTjFjbkpsYm5SWklDc2dlU2xjYmlBZ0lDQjlYRzRnSUNBZ2NIVmliR2xqSUd4cGJtVlVieWg0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ3VhU0V1Y0hWemFDaGJNQ3dnTUYwcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFDNXZJUzV3ZFhOb0tGc3dMQ0F3WFNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xuWWhMbkIxYzJnb1czZ3NJSGxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWaFpLSGdzSUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5QnNhVzVsVkc5U1pXeGhkR2wyWlNoNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnloMGFHbHpMbU4xY25KbGJuUllJQ3NnZUN3Z2RHaHBjeTVqZFhKeVpXNTBXU0FySUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5Qm9iM0pwZW05dWRHRnNWRzhvZURvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsdVpWUnZLSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJvYjNKcGVtOXVkR0ZzVkc5U1pXeGhkR2wyWlNoNE9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b2IzSnBlbTl1ZEdGc1ZHOG9kR2hwY3k1amRYSnlaVzUwV0NBcklIZ3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUIyWlhKMGFXTmhiRlJ2S0hrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVlVieWgwYUdsekxtTjFjbkpsYm5SWUxDQjVLVnh1SUNBZ0lIMWNiaUFnSUNCd2RXSnNhV01nZG1WeWRHbGpZV3hVYjFKbGJHRjBhWFpsS0hrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5abGNuUnBZMkZzVkc4b2RHaHBjeTVqZFhKeVpXNTBXU0FySUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5QmpkV0pwWTBKbGVtbGxja04xY25abFZHOG9YRzRnSUNBZ0lDQWdJR014ZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCak1YazZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdZeko0T2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUdNeWVUb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1YVNFdWNIVnphQ2hiWXpKNElDMGdlQ3dnWXpKNUlDMGdlVjBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUM1dklTNXdkWE5vS0Z0ak1YZ2dMU0IwYUdsekxtTjFjbkpsYm5SWUxDQmpNWGtnTFNCMGFHbHpMbU4xY25KbGJuUlpYU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG5ZaExuQjFjMmdvVzNnc0lIbGRLVnh1SUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZnZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG05bVpuTmxkRmdzSUM0dUxuUm9hWE11WTJGc1kzVnNZWFJsUW1WNmFXVnlUV2x1VFdGNEtIUm9hWE11WTNWeWNtVnVkRmdzSUdNeGVDd2dZeko0TENCNEtTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1dlptWnpaWFJaSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTV2Wm1aelpYUlpMQ0F1TGk1MGFHbHpMbU5oYkdOMWJHRjBaVUpsZW1sbGNrMXBiazFoZUNoMGFHbHpMbU4xY25KbGJuUlpMQ0JqTVhrc0lHTXllU3dnZVNrcFhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxXRmtvZUN3Z2VTbGNiaUFnSUNCOVhHNGdJQ0FnY0hWaWJHbGpJR04xWW1salFtVjZhV1Z5UTNWeWRtVlViMUpsYkdGMGFYWmxLRnh1SUNBZ0lDQWdJQ0JqTVhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ1l6RjVPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJR015ZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCak1uazZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkV0pwWTBKbGVtbGxja04xY25abFZHOG9kR2hwY3k1amRYSnlaVzUwV0NBcklHTXhlQ3dnZEdocGN5NWpkWEp5Wlc1MFdTQXJJR014ZVN3Z2RHaHBjeTVqZFhKeVpXNTBXQ0FySUdNeWVDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklHTXllU3dnZEdocGN5NWpkWEp5Wlc1MFdDQXJJSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa2dLeUI1S1Z4dUlDQWdJSDFjYmlBZ0lDQndkV0pzYVdNZ2NYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVlVieWhqZURvZ2JuVnRZbVZ5TENCamVUb2diblZ0WW1WeUxDQjRPaUJ1ZFcxaVpYSXNJSGs2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWFTRXVjSFZ6YUNoYlkzZ2dMU0I0TENCamVTQXRJSGxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWJ5RXVjSFZ6YUNoYlkzZ2dMU0IwYUdsekxtTjFjbkpsYm5SWUxDQmplU0F0SUhSb2FYTXVZM1Z5Y21WdWRGbGRLVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1ZGlFdWNIVnphQ2hiZUN3Z2VWMHBYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwV0NBOUlFMWhkR2d1YldsdUtIUm9hWE11YjJabWMyVjBXQ3dnTGk0dWRHaHBjeTVqWVd4amRXeGhkR1ZDWlhwcFpYSk5hVzVOWVhnb2RHaHBjeTVqZFhKeVpXNTBXQ3dnWTNnc0lHTjRMQ0I0S1NsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQXVMaTUwYUdsekxtTmhiR04xYkdGMFpVSmxlbWxsY2sxcGJrMWhlQ2gwYUdsekxtTjFjbkpsYm5SWkxDQmplU3dnWTNrc0lIa3BLVnh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlZoWktIZ3NJSGtwWEc0Z0lDQWdmVnh1SUNBZ0lIQjFZbXhwWXlCeGRXRmtjbUYwYVdOQ1pYcHBaWEpEZFhKMlpWUnZVbVZzWVhScGRtVW9ZM2c2SUc1MWJXSmxjaXdnWTNrNklHNTFiV0psY2l3Z2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXhkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVlJ2S0hSb2FYTXVZM1Z5Y21WdWRGZ2dLeUJqZUN3Z2RHaHBjeTVqZFhKeVpXNTBXU0FySUdONUxDQjBhR2x6TG1OMWNuSmxiblJZSUNzZ2VDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklIa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJoY21OVWJ5aGNiaUFnSUNBZ0lDQWdjbmc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnY25rNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VFRjRhWE5TYjNSaGRHbHZiam9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JzWVhKblpVRnlZMFpzWVdjNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2MzZGxaWEJHYkdGbk9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTlRaWEpwWlhNZ1BTQlFZWFJvVFdGclpYSXVZVEpqS0hSb2FYTXVZM1Z5Y21WdWRGZ3NJSFJvYVhNdVkzVnljbVZ1ZEZrc0lISjRMQ0J5ZVN3Z2VFRjRhWE5TYjNSaGRHbHZiaXdnYkdGeVoyVkJjbU5HYkdGbkxDQnpkMlZsY0Vac1lXY3NJSGdzSUhrcElHRnpJRzUxYldKbGNsdGRYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGpVMlZ5YVdWekxteGxibWQwYUNBK1BTQTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGIzWk1hWE4wSUQwZ1kxTmxjbWxsY3k1emNHeHBZMlVvTUN3Z05pbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUM1cElTNXdkWE5vS0Z0cGIzWk1hWE4wV3pKZElDMGdhVzkyVEdsemRGczBYU3dnYVc5MlRHbHpkRnN6WFNBdElHbHZka3hwYzNSYk5WMWRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtOGhMbkIxYzJnb1cybHZka3hwYzNSYk1GMGdMU0IwYUdsekxtTjFjbkpsYm5SWUxDQnBiM1pNYVhOMFd6RmRJQzBnZEdocGN5NWpkWEp5Wlc1MFdWMHBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWRpRXVjSFZ6YUNoYmFXOTJUR2x6ZEZzMFhTd2dhVzkyVEdsemRGczFYVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkRmdnUFNCTllYUm9MbTFwYmloMGFHbHpMbTltWm5ObGRGZ3NJQzR1TG5Sb2FYTXVZMkZzWTNWc1lYUmxRbVY2YVdWeVRXbHVUV0Y0S0hSb2FYTXVZM1Z5Y21WdWRGZ3NJR2x2ZGt4cGMzUmJNRjBzSUdsdmRreHBjM1JiTWwwc0lHbHZka3hwYzNSYk5GMHBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQXVMaTUwYUdsekxtTmhiR04xYkdGMFpVSmxlbWxsY2sxcGJrMWhlQ2gwYUdsekxtTjFjbkpsYm5SWkxDQnBiM1pNYVhOMFd6RmRMQ0JwYjNaTWFYTjBXek5kTENCcGIzWk1hWE4wV3pWZEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFdGa29hVzkyVEdsemRGczBYU3dnYVc5MlRHbHpkRnMxWFNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J3ZFdKc2FXTWdZWEpqVkc5U1pXeGhkR2wyWlNoY2JpQWdJQ0FnSUNBZ2NuZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdjbms2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZUVGNGFYTlNiM1JoZEdsdmJqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQnNZWEpuWlVGeVkwWnNZV2M2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnYzNkbFpYQkdiR0ZuT2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VUb2diblZ0WW1WeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhKalZHOG9jbmdzSUhKNUxDQjRRWGhwYzFKdmRHRjBhVzl1TENCc1lYSm5aVUZ5WTBac1lXY3NJSE4zWldWd1JteGhaeXdnZEdocGN5NWpkWEp5Wlc1MFdDQXJJSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa2dLeUI1S1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdjM1JoZEdsaklHRXlZeWg0TVRvZ2JuVnRZbVZ5TENCNU1Ub2diblZ0WW1WeUxDQnllRG9nYm5WdFltVnlMQ0J5ZVRvZ2JuVnRZbVZ5TENCaGJtZHNaVG9nYm5WdFltVnlMQ0JzWVhKblpWOWhjbU5mWm14aFp6b2diblZ0WW1WeUxDQnpkMlZsY0Y5bWJHRm5PaUJ1ZFcxaVpYSXNJSGd5T2lCdWRXMWlaWElzSUhreU9pQnVkVzFpWlhJc0lISmxZM1Z5YzJsMlpUODZJRzUxYldKbGNsdGRLVG9nYm5WdFltVnlXMTBnZkNCdWRXMWlaWEpiWFZ0ZElIdGNiaUFnSUNBZ0lDQWdMeThnWm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0Z2IyWWdkMmhsY21VZ2RHaHBjeUJOWVhSb0lHTmhiV1VnWm5KdmJTQjJhWE5wZERwY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2VTFaSE1URXZhVzF3Ykc1dmRHVXVhSFJ0YkNOQmNtTkpiWEJzWlcxbGJuUmhkR2x2Yms1dmRHVnpYRzRnSUNBZ0lDQWdJSFpoY2lCZk1USXdJRDBnVFdGMGFDNVFTU0FxSURFeU1DQXZJREU0TUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpoWkNBOUlFMWhkR2d1VUVrZ0x5QXhPREFnS2lBb0syRnVaMnhsSUh4OElEQXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpPaUJ1ZFcxaVpYSmJYU0E5SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZUhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVWdQU0FvZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJc0lISmhaRG9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRmdnUFNCNElDb2dUV0YwYUM1amIzTW9jbUZrS1NBdElIa2dLaUJOWVhSb0xuTnBiaWh5WVdRcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JaSUQwZ2VDQXFJRTFoZEdndWMybHVLSEpoWkNrZ0t5QjVJQ29nVFdGMGFDNWpiM01vY21Ga0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QjRPaUJZTENCNU9pQlpJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYSjRJSHg4SUNGeWVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0NE1Td2dlVEVzSUhneUxDQjVNaXdnZURJc0lIa3lYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9JWEpsWTNWeWMybDJaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlSGtnUFNCeWIzUmhkR1VvZURFc0lIa3hMQ0F0Y21Ga0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhneElEMGdlSGt1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGt4SUQwZ2VIa3VlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaDVJRDBnY205MFlYUmxLSGd5TENCNU1pd2dMWEpoWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0TWlBOUlIaDVMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVNaUE5SUhoNUxuazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMjl6SUQwZ1RXRjBhQzVqYjNNb1RXRjBhQzVRU1NBdklERTRNQ0FxSUdGdVoyeGxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVc0Z1BTQk5ZWFJvTG5OcGJpaE5ZWFJvTGxCSklDOGdNVGd3SUNvZ1lXNW5iR1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQW9lREVnTFNCNE1pa2dMeUF5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQW9lVEVnTFNCNU1pa2dMeUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdnZ1BTQjRJQ29nZUNBdklDaHllQ0FxSUhKNEtTQXJJSGtnS2lCNUlDOGdLSEo1SUNvZ2Nua3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhQ0E5SUUxaGRHZ3VjM0Z5ZENob0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnllQ0E5SUdnZ0tpQnllRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZVNBOUlHZ2dLaUJ5ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5ZURJZ1BTQnllQ0FxSUhKNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjVNaUE5SUhKNUlDb2djbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDaHNZWEpuWlY5aGNtTmZabXhoWnlBOVBTQnpkMlZsY0Y5bWJHRm5JRDhnTFRFZ09pQXhLU0FxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2d1YzNGeWRDaE5ZWFJvTG1GaWN5Z29jbmd5SUNvZ2Nua3lJQzBnY25neUlDb2dlU0FxSUhrZ0xTQnllVElnS2lCNElDb2dlQ2tnTHlBb2NuZ3lJQ29nZVNBcUlIa2dLeUJ5ZVRJZ0tpQjRJQ29nZUNrcEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmplQ0E5SUdzZ0tpQnllQ0FxSUhrZ0x5QnllU0FySUNoNE1TQXJJSGd5S1NBdklESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM2tnUFNCcklDb2dMWEo1SUNvZ2VDQXZJSEo0SUNzZ0tIa3hJQ3NnZVRJcElDOGdNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTVNBOUlFMWhkR2d1WVhOcGJpZ29lVEVnTFNCamVTa2dMeUJ5ZVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pqSWdQU0JOWVhSb0xtRnphVzRvS0hreUlDMGdZM2twSUM4Z2Nua3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1NU0E5SUhneElEd2dZM2dnUHlCTllYUm9MbEJKSUMwZ1pqRWdPaUJtTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1l5SUQwZ2VESWdQQ0JqZUNBL0lFMWhkR2d1VUVrZ0xTQm1NaUE2SUdZeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWmpFZ1BDQXdJQ1ltSUNobU1TQTlJRTFoZEdndVVFa2dLaUF5SUNzZ1pqRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pqSWdQQ0F3SUNZbUlDaG1NaUE5SUUxaGRHZ3VVRWtnS2lBeUlDc2daaklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOM1pXVndYMlpzWVdjZ0ppWWdaakVnUGlCbU1pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1l4SUQwZ1pqRWdMU0JOWVhSb0xsQkpJQ29nTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzNkbFpYQmZabXhoWnlBbUppQm1NaUErSUdZeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaklnUFNCbU1pQXRJRTFoZEdndVVFa2dLaUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pqRWdQU0J5WldOMWNuTnBkbVZiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtTWlBOUlISmxZM1Z5YzJsMlpWc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjRJRDBnY21WamRYSnphWFpsV3pKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNrZ1BTQnlaV04xY25OcGRtVmJNMTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR1JtSUQwZ1pqSWdMU0JtTVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLR1JtS1NBK0lGOHhNakFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbU1tOXNaQ0E5SUdZeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3liMnhrSUQwZ2VESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVEp2YkdRZ1BTQjVNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWXlJRDBnWmpFZ0t5QmZNVEl3SUNvZ0tITjNaV1Z3WDJac1lXY2dKaVlnWmpJZ1BpQm1NU0EvSURFZ09pQXRNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRNaUE5SUdONElDc2djbmdnS2lCTllYUm9MbU52Y3lobU1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNU1pQTlJR041SUNzZ2Nua2dLaUJOWVhSb0xuTnBiaWhtTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQjBhR2x6TG1FeVl5aDRNaXdnZVRJc0lISjRMQ0J5ZVN3Z1lXNW5iR1VzSURBc0lITjNaV1Z3WDJac1lXY3NJSGd5YjJ4a0xDQjVNbTlzWkN3Z1cyWXlMQ0JtTW05c1pDd2dZM2dzSUdONVhTa2dZWE1nYm5WdFltVnlXMTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHWWdQU0JtTWlBdElHWXhPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1l6RWdQU0JOWVhSb0xtTnZjeWhtTVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6TVNBOUlFMWhkR2d1YzJsdUtHWXhLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTXlJRDBnVFdGMGFDNWpiM01vWmpJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY3pJZ1BTQk5ZWFJvTG5OcGJpaG1NaWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBJRDBnVFdGMGFDNTBZVzRvWkdZZ0x5QTBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaDRJRDBnTkNBdklETWdLaUJ5ZUNBcUlIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VTQTlJRFFnTHlBeklDb2djbmtnS2lCMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlRFZ1BTQmJlREVzSUhreFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcweUlEMGdXM2d4SUNzZ2FIZ2dLaUJ6TVN3Z2VURWdMU0JvZVNBcUlHTXhYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMHpJRDBnVzNneUlDc2dhSGdnS2lCek1pd2dlVElnTFNCb2VTQXFJR015WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzAwSUQwZ1czZ3lMQ0I1TWwwN1hHNGdJQ0FnSUNBZ0lHMHlXekJkSUQwZ01pQXFJRzB4V3pCZElDMGdiVEpiTUYwN1hHNGdJQ0FnSUNBZ0lHMHlXekZkSUQwZ01pQXFJRzB4V3pGZElDMGdiVEpiTVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldOMWNuTnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJiVElzSUcwekxDQnRORjB1WTI5dVkyRjBLSEpsY3lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQmJiVElzSUcwekxDQnRORjB1WTI5dVkyRjBLSEpsY3lrdWFtOXBiaWdwTG5Od2JHbDBLRndpTEZ3aUtTNXRZWEFvZUNBOVBpQndZWEp6WlVac2IyRjBLSGdwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVpYZHlaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYVNBOUlISmxjeTVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNjbVZ6VzJsZElEMGdhU0FsSURJZ1B5QnliM1JoZEdVb2NtVnpXMmtnTFNBeFhTd2djbVZ6VzJsZExDQnlZV1FwTG5rZ09pQnliM1JoZEdVb2NtVnpXMmxkTENCeVpYTmJhU0FySURGZExDQnlZV1FwTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNjbVZ6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hWaWJHbGpJR05zYjNObFVHRjBhQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtTWdQU0IwY25WbFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hWaWJHbGpJSFZ1YVdadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CaGRHaERhR0ZwYmk1c1pXNW5kR2dnSmlZZ0lTaDBhR2x6TG1OMWNuSmxiblJZSUQwOUlIUm9hWE11Y0dGMGFGTjBZWEowV3pCZElDWW1JSFJvYVhNdVkzVnljbVZ1ZEZrZ1BUMGdkR2hwY3k1d1lYUm9VM1JoY25SYk1WMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVlVieWd1TGk1MGFHbHpMbkJoZEdoVGRHRnlkQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NXdZWFJvUTJoaGFXNHViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3WVhSb1VtVm1JRDBnZEdocGN5NXdZWFJvUTJoaGFXNHVjRzl3S0NraFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnlndUxpNXdZWFJvVW1WbUtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaDBhR2x6TG5CaGRHZ3VieUV1YkdWdVozUm9JRHdnZEdocGN5NXdZWFJvTG1raExteGxibWQwYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHRjBhQzV2SVM1d2RYTm9LRnN3TENBd1hTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MblloTG1admNrVmhZMmdvZG1Gc2RXVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWYk1GMGdMVDBnZEdocGN5NXZabVp6WlhSWVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpWc3hYU0F0UFNCMGFHbHpMbTltWm5ObGRGbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXZabVp6WlhSWUlEMGdNRnh1SUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZrZ1BTQXdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NIVmliR2xqSUhCaGNuTmxLSEJoZEdoRVlYUmhPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjR0YwYUVSaGRHRlRaWEpwWlhNZ1BTQndZWEp6WlZOV1J5aHdZWFJvUkdGMFlTbGNiaUFnSUNBZ0lDQWdiR1YwSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1U3WEc0Z0lDQWdJQ0FnSUhCaGRHaEVZWFJoVTJWeWFXVnpMbVp2Y2tWaFkyZ29jR0YwYUVSaGRHRkpkR1Z0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvY0dGMGFFUmhkR0ZKZEdWdExtTnZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2ROSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5Qk5iM1psVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MlpWUnZLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlQ3dnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjBuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvUkdGMFlWZHBkR2hVZVhCbElEMGdjR0YwYUVSaGRHRkpkR1Z0SUdGeklFMXZkbVZVYjBOdmJXMWhibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNabFZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZE1KenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCTWFXNWxWRzlEYjIxdFlXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViR2x1WlZSdktIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVDd2djR0YwYUVSaGRHRlhhWFJvVkhsd1pTNTVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9SR0YwWVZkcGRHaFVlWEJsSUQwZ2NHRjBhRVJoZEdGSmRHVnRJR0Z6SUV4cGJtVlViME52YlcxaGJtUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5nc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkSUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaU0E5SUhCaGRHaEVZWFJoU1hSbGJTQmhjeUJJYjNKcGVtOXVkR0ZzVEdsdVpWUnZRMjl0YldGdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaHZjbWw2YjI1MFlXeFVieWh3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5hQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVZ1BTQndZWFJvUkdGMFlVbDBaVzBnWVhNZ1NHOXlhWHB2Ym5SaGJFeHBibVZVYjBOdmJXMWhibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYjNKcGVtOXVkR0ZzVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5ncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuVmljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVWdQU0J3WVhSb1JHRjBZVWwwWlcwZ1lYTWdWbVZ5ZEdsallXeE1hVzVsVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRHbGpZV3hVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5rcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZGljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVWdQU0J3WVhSb1JHRjBZVWwwWlcwZ1lYTWdWbVZ5ZEdsallXeE1hVzVsVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRHbGpZV3hVYjFKbGJHRjBhWFpsS0hCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RESnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QkRkWEoyWlZSdlEyOXRiV0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OMVltbGpRbVY2YVdWeVEzVnlkbVZVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmd5TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5reUxDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCRGRYSjJaVlJ2UTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xWW1salFtVjZhV1Z5UTNWeWRtVlViMUpsYkdGMGFYWmxLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlREVzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVRFc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVESXNJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlVElzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUN3Z2NHRjBhRVJoZEdGWGFYUm9WSGx3WlM1NUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjFFbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxJRDBnY0dGMGFFUmhkR0ZKZEdWdElHRnpJRkYxWVdSeVlYUnBZME4xY25abFZHOURiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVlVieWh3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmd4TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5reExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHhKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCUmRXRmtjbUYwYVdORGRYSjJaVlJ2UTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RCSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QkZiR3hwY0hScFkyRnNRWEpqUTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZ5WTFSdktIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWNuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVjbmtzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUVGNGFYTlNiM1JoZEdsdmJpd2dmbjV3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbXhoY21kbFFYSmpMQ0IrZm5CaGRHaEVZWFJoVjJsMGFGUjVjR1V1YzNkbFpYQXNJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlQ3dnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMkVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvUkdGMFlWZHBkR2hVZVhCbElEMGdjR0YwYUVSaGRHRkpkR1Z0SUdGeklFVnNiR2x3ZEdsallXeEJjbU5EYjIxdFlXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWEpqVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5KNExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuSjVMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmhCZUdselVtOTBZWFJwYjI0c0lINStjR0YwYUVSaGRHRlhhWFJvVkhsd1pTNXNZWEpuWlVGeVl5d2dmbjV3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbk4zWldWd0xDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGFKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZDZKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYkc5elpWQmhkR2dvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvY0dGMGFFUmhkR0ZKZEdWdEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDV2SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1p2ZFc1a0lHWnZjaUIwYUdseklIQmhkR2dnWTI5dGJXRnVaQzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEIxWW14cFl5QjFjSE5oYlhCc1pTaHlZWFJwYnpvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSFZ6WlNCRVpTQkRZWE4wWld4cVlYVW5jeUJoYkdkdmNtbDBhRzBnZEc4Z1pHOGdkR2hsSUhWd2MyRnRjR3hwYm1kY2JpQWdJQ0FnSUNBZ0x5OGdVbVZtWlhKbGJtTmxPaUJvZEhSd2N6b3ZMMlZ1TG5kcGEybHdaV1JwWVM1dmNtY3ZkMmxyYVM5RVpWOURZWE4wWld4cVlYVWxNamR6WDJGc1oyOXlhWFJvYlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh5WVhScGJ5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZHaGxJSFZ3YzJGdGNHeHBibWNnY21GMGFXOGdjMmh2ZFd4a0lHSmxJR0Z1SUdsdWRHVm5aWEl1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5WdWFXWnZjbTBvS1Z4dUlDQWdJQ0FnSUNCcFppQW9jbUYwYVc4Z1BEMGdNU2tnY21WMGRYSnVYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZjSGxRWVhSb09pQlFZWFJvUkdWbUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1l6b2dkR2hwY3k1d1lYUm9MbU1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBPaUJiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzg2SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZGpvZ1cxMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1ZGlFdVptOXlSV0ZqYUNnb2Rpd2dhU3dnWVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUEQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0hsUVlYUm9MblloTG5CMWMyZ29kaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzVwSVM1d2RYTm9LSFJvYVhNdWNHRjBhQzVwSVZ0cFhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5QmNuSmhlU0E5SUhSb2FYTXVjR0YwYUM1dklWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhVUZ5Y21GNUlEMGdkR2hwY3k1d1lYUm9MbWtoWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUVGeWNtRjVJRDBnVzJGYmFTQXRJREZkV3pCZExDQnZRWEp5WVhsYmFTQXRJREZkV3pCZElDc2dZVnRwSUMwZ01WMWJNRjBzSUdsQmNuSmhlVnRwWFZzd1hTQXJJSFpiTUYwc0lIWmJNRjFkWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVVGeWNtRjVJRDBnVzJGYmFTQXRJREZkV3pGZExDQnZRWEp5WVhsYmFTQXRJREZkV3pGZElDc2dZVnRwSUMwZ01WMWJNVjBzSUdsQmNuSmhlVnRwWFZzeFhTQXJJSFpiTVYwc0lIWmJNVjFkWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNBOUlERTdJR2x1WkdWNElEd2djbUYwYVc4N0lHbHVaR1Y0S3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHVndVbUYwYVc4Z1BTQXhJQzhnS0hKaGRHbHZJQzBnYVc1a1pYZ2dLeUF4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGhUY0d4cGRFRnljbUY1SUQwZ2RHaHBjeTVqWVd4amRXeGhkR1ZDWlhwcFpYSlRjR3hwZENoemRHVndVbUYwYVc4c0lDNHVMbmhCY25KaGVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCNVUzQnNhWFJCY25KaGVTQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFFtVjZhV1Z5VTNCc2FYUW9jM1JsY0ZKaGRHbHZMQ0F1TGk1NVFYSnlZWGtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjREI0SUQwZ2VFRnljbUY1V3pCZExDQndNWGdnUFNCNFUzQnNhWFJCY25KaGVTNXphR2xtZENncElTQXRJSEF3ZUN3Z2NETjRJRDBnZUZOd2JHbDBRWEp5WVhsYk1WMHNJSEF5ZUNBOUlIaFRjR3hwZEVGeWNtRjVMbk5vYVdaMEtDa2hJQzBnY0RONExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TUhrZ1BTQjVRWEp5WVhsYk1GMHNJSEF4ZVNBOUlIbFRjR3hwZEVGeWNtRjVMbk5vYVdaMEtDa2hJQzBnY0RCNUxDQndNM2tnUFNCNVUzQnNhWFJCY25KaGVWc3hYU3dnY0RKNUlEMGdlVk53YkdsMFFYSnlZWGt1YzJocFpuUW9LU0VnTFNCd00zbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiM0I1VUdGMGFDNXZJUzV3ZFhOb0tGdHdNWGdzSUhBeGVWMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVZCaGRHZ3VhU0V1Y0hWemFDaGJjREo0TENCd01ubGRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0hsUVlYUm9MblloTG5CMWMyZ29XM0F6ZUN3Z2NETjVYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0UVhKeVlYa2dQU0I0VTNCc2FYUkJjbkpoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhsQmNuSmhlU0E5SUhsVGNHeHBkRUZ5Y21GNVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd01IZ2dQU0I0UVhKeVlYa3VjMmhwWm5Rb0tTRXNJSEF4ZUNBOUlIaEJjbkpoZVM1emFHbG1kQ2dwSVNBdElIQXdlQ3dnY0RONElEMGdlRUZ5Y21GNVd6RmRMQ0J3TW5nZ1BTQjRRWEp5WVhrdWMyaHBablFvS1NFZ0xTQndNM2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0RCNUlEMGdlVUZ5Y21GNUxuTm9hV1owS0NraExDQndNWGtnUFNCNVFYSnlZWGt1YzJocFpuUW9LU0VnTFNCd01Ia3NJSEF6ZVNBOUlIbEJjbkpoZVZzeFhTd2djREo1SUQwZ2VVRnljbUY1TG5Ob2FXWjBLQ2toSUMwZ2NETjVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVVR0YwYUM1dklTNXdkWE5vS0Z0d01YZ3NJSEF4ZVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzVwSVM1d2RYTm9LRnR3TW5nc0lIQXllVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1VUdGMGFDNTJJUzV3ZFhOb0tGdHdNM2dzSUhBemVWMHBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUNBOUlHTnZjSGxRWVhSb1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1cFptOXliU2dwWEc0Z0lDQWdmVnh1WEc1OUlsMTkiLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5jYWxjdWxhdGVCYXNlVHJhbnNmb3JtID0gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybTtcclxuZXhwb3J0cy5nZXRCb3VuZGluZ0JveCA9IGdldEJvdW5kaW5nQm94O1xyXG5leHBvcnRzLmdldExlYWZOb2RlcyA9IGdldExlYWZOb2RlcztcclxuZXhwb3J0cy5nZXRCYXNlbGluZUhlaWdodCA9IGdldEJhc2VsaW5lSGVpZ2h0O1xyXG5leHBvcnRzLmVuY29kZUxpbmVDYXAgPSBlbmNvZGVMaW5lQ2FwO1xyXG5leHBvcnRzLmVuY29kZUxpbmVKb2luID0gZW5jb2RlTGluZUpvaW47XHJcbmV4cG9ydHMuZW5jb2RlVGV4dEFuY2hvciA9IGVuY29kZVRleHRBbmNob3I7XHJcbmV4cG9ydHMuZ3JlYXRlc3RDb21tb25EaXZpc29yID0gZ3JlYXRlc3RDb21tb25EaXZpc29yO1xyXG5leHBvcnRzLmxlYXN0Q29tbW9uTXVsdGlwbGUgPSBsZWFzdENvbW1vbk11bHRpcGxlO1xyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybShkb20sIHJvb3QpIHtcclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGFncmVqcy9kYWdyZS1kMy9pc3N1ZXMvMjAyXHJcbiAgcmV0dXJuIHJvb3QuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpLm11bHRpcGx5KGRvbS5nZXRTY3JlZW5DVE0oKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJvdW5kaW5nQm94KGRvbSkge1xyXG4gIHZhciBzdmdSb290ID0gZG9tO1xyXG5cclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgaWYgKHN2Z1Jvb3QucGFyZW50RWxlbWVudCBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xyXG4gICAgICBzdmdSb290ID0gc3ZnUm9vdC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgYmFzZUJveCA9IGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0oZG9tLCBzdmdSb290KTtcclxuICB2YXIgcmVmQkJveCA9IGRvbS5nZXRCQm94KCk7XHJcbiAgdmFyIGNvb3JkaW5hdGUgPSBbYmFzZUJveC5lICsgcmVmQkJveC54LCBiYXNlQm94LmYgKyByZWZCQm94LnksIHJlZkJCb3gud2lkdGggKyAxLCByZWZCQm94LmhlaWdodCArIDFdO1xyXG4gIHJldHVybiBjb29yZGluYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRMZWFmTm9kZXMobWFzdGVyKSB7XHJcbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIyODkzOTEvaG93LXRvLWNyZWF0ZS1hbi1hcnJheS1vZi1sZWFmLW5vZGVzLW9mLWFuLWh0bWwtZG9tLXVzaW5nLWphdmFzY3JpcHRcclxuICB2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtYXN0ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLCAwKTtcclxuICB2YXIgbGVhZk5vZGVzID0gbm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICBpZiAoZWxlbS5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgLy8gc2VlIGlmIGFueSBvZiB0aGUgY2hpbGQgbm9kZXMgYXJlIGVsZW1lbnRzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAvLyB0aGVyZSBpcyBhIGNoaWxkIGVsZW1lbnQsIHNvIHJldHVybiBmYWxzZSB0byBub3QgaW5jbHVkZVxyXG4gICAgICAgICAgLy8gdGhpcyBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0pO1xyXG4gIHJldHVybiBsZWFmTm9kZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJhc2VsaW5lSGVpZ2h0KGRvbSkge1xyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvbSk7XHJcbiAgdmFyIGZvbnRTZXR0aW5ncyA9IGNvbXB1dGVkU3R5bGUuZm9udDtcclxuICBjdHguZm9udCA9IGZvbnRTZXR0aW5ncztcclxuICB2YXIgdGV4dE1ldHJpeCA9IGN0eC5tZWFzdXJlVGV4dCgneXBmZ2rilognKTtcclxuICByZXR1cm4gdGV4dE1ldHJpeC5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQgfHwgMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlTGluZUNhcCh0eXBlKSB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdzcXVhcmUnOlxyXG4gICAgICByZXR1cm4gMztcclxuXHJcbiAgICBjYXNlICdidXR0JzpcclxuICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIDI7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVMaW5lSm9pbih0eXBlKSB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdtaXRlcic6XHJcbiAgICAgIHJldHVybiAxO1xyXG5cclxuICAgIGNhc2UgJ2JldmVsJzpcclxuICAgICAgcmV0dXJuIDM7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIDI7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVUZXh0QW5jaG9yKHR5cGUpIHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgJ21pZGRsZSc6XHJcbiAgICAgIHJldHVybiAyO1xyXG5cclxuICAgIGNhc2UgJ2VuZCc6XHJcbiAgICAgIHJldHVybiAxO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ3JlYXRlc3RDb21tb25EaXZpc29yKHgsIHkpIHtcclxuICB4ID0gTWF0aC5hYnMoeCk7XHJcbiAgeSA9IE1hdGguYWJzKHkpO1xyXG5cclxuICB3aGlsZSAoeSkge1xyXG4gICAgdmFyIHQgPSB5O1xyXG4gICAgeSA9IHggJSB5O1xyXG4gICAgeCA9IHQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geDtcclxufVxyXG5cclxuZnVuY3Rpb24gbGVhc3RDb21tb25NdWx0aXBsZSh4LCB5KSB7XHJcbiAgcmV0dXJuICF4IHx8ICF5ID8gMCA6IE1hdGguYWJzKHggKiB5IC8gZ3JlYXRlc3RDb21tb25EaXZpc29yKHgsIHkpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OW9aV3h3WlhJdWRITWlYU3dpYm1GdFpYTWlPbHNpWTJGc1kzVnNZWFJsUW1GelpWUnlZVzV6Wm05eWJTSXNJbVJ2YlNJc0luSnZiM1FpTENKblpYUlRZM0psWlc1RFZFMGlMQ0pwYm5abGNuTmxJaXdpYlhWc2RHbHdiSGtpTENKblpYUkNiM1Z1WkdsdVowSnZlQ0lzSW5OMloxSnZiM1FpTENKd1lYSmxiblJGYkdWdFpXNTBJaXdpVTFaSFIzSmhjR2hwWTNORmJHVnRaVzUwSWl3aVltRnpaVUp2ZUNJc0luSmxaa0pDYjNnaUxDSm5aWFJDUW05NElpd2lZMjl2Y21ScGJtRjBaU0lzSW1VaUxDSjRJaXdpWmlJc0lua2lMQ0ozYVdSMGFDSXNJbWhsYVdkb2RDSXNJbWRsZEV4bFlXWk9iMlJsY3lJc0ltMWhjM1JsY2lJc0ltNXZaR1Z6SWl3aVFYSnlZWGtpTENKd2NtOTBiM1I1Y0dVaUxDSnpiR2xqWlNJc0ltTmhiR3dpTENKblpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTSXNJbXhsWVdaT2IyUmxjeUlzSW1acGJIUmxjaUlzSW1Wc1pXMGlMQ0pvWVhORGFHbHNaRTV2WkdWeklpd2lhU0lzSW1Ob2FXeGtUbTlrWlhNaUxDSnNaVzVuZEdnaUxDSnViMlJsVkhsd1pTSXNJbWRsZEVKaGMyVnNhVzVsU0dWcFoyaDBJaXdpWTJGdWRtRnpJaXdpWkc5amRXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWTNSNElpd2laMlYwUTI5dWRHVjRkQ0lzSW1OdmJYQjFkR1ZrVTNSNWJHVWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpWm05dWRGTmxkSFJwYm1keklpd2labTl1ZENJc0luUmxlSFJOWlhSeWFYZ2lMQ0p0WldGemRYSmxWR1Y0ZENJc0ltRmpkSFZoYkVKdmRXNWthVzVuUW05NFJHVnpZMlZ1ZENJc0ltVnVZMjlrWlV4cGJtVkRZWEFpTENKMGVYQmxJaXdpWlc1amIyUmxUR2x1WlVwdmFXNGlMQ0psYm1OdlpHVlVaWGgwUVc1amFHOXlJaXdpWjNKbFlYUmxjM1JEYjIxdGIyNUVhWFpwYzI5eUlpd2lUV0YwYUNJc0ltRmljeUlzSW5RaUxDSnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3UVVGQlR5eFRRVUZUUVN4elFrRkJWQ3hEUVVGblEwTXNSMEZCYUVNc1JVRkJlVVJETEVsQlFYcEVMRVZCUVcxR08wRkJRM1JHTzBGQlJVRXNVMEZCVDBFc1NVRkJTU3hEUVVGRFF5eFpRVUZNTEVkQlFYRkNReXhQUVVGeVFpeEhRVUVyUWtNc1VVRkJMMElzUTBGQmQwTktMRWRCUVVjc1EwRkJRMFVzV1VGQlNpeEZRVUY0UXl4RFFVRlFPMEZCUTBnN08wRkJSVTBzVTBGQlUwY3NZMEZCVkN4RFFVRjNRa3dzUjBGQmVFSXNSVUZCYVVRN1FVRkRjRVFzVFVGQlNVMHNUMEZCTWtJc1IwRkJSMDRzUjBGQmJFTTdPMEZCUTBFc1UwRkJUeXhKUVVGUUxFVkJRV0U3UVVGRFZDeFJRVUZKVFN4UFFVRlBMRU5CUVVORExHRkJRVklzV1VGQmFVTkRMR3RDUVVGeVF5eEZRVUY1UkR0QlFVTnlSRVlzVFVGQlFVRXNUMEZCVHl4SFFVRkhRU3hQUVVGUExFTkJRVU5ETEdGQlFXeENPMEZCUTBnc1MwRkdSQ3hOUVVWUE8wRkJRMGc3UVVGRFNEdEJRVU5LT3p0QlFVTkVMRTFCUVUxRkxFOUJRVThzUjBGQlIxWXNjMEpCUVhOQ0xFTkJRVU5ETEVkQlFVUXNSVUZCVFUwc1QwRkJUaXhEUVVGMFF6dEJRVU5CTEUxQlFVMUpMRTlCUVU4c1IwRkJSMVlzUjBGQlJ5eERRVUZEVnl4UFFVRktMRVZCUVdoQ08wRkJRMEVzVFVGQlRVTXNWVUZCTkVNc1IwRkJSeXhEUVVGRFNDeFBRVUZQTEVOQlFVTkpMRU5CUVZJc1IwRkJXVWdzVDBGQlR5eERRVUZEU1N4RFFVRnlRaXhGUVVGM1Frd3NUMEZCVHl4RFFVRkRUU3hEUVVGU0xFZEJRVmxNTEU5QlFVOHNRMEZCUTAwc1EwRkJOVU1zUlVGQkswTk9MRTlCUVU4c1EwRkJRMDhzUzBGQlVpeEhRVUZuUWl4RFFVRXZSQ3hGUVVGclJWQXNUMEZCVHl4RFFVRkRVU3hOUVVGU0xFZEJRV2xDTEVOQlFXNUdMRU5CUVhKRU8wRkJRMEVzVTBGQlQwNHNWVUZCVUR0QlFVTklPenRCUVVWTkxGTkJRVk5QTEZsQlFWUXNRMEZCYzBKRExFMUJRWFJDTEVWQlFYZEZPMEZCUXpORk8wRkJSVUVzVFVGQlNVTXNTMEZCU3l4SFFVRkhReXhMUVVGTExFTkJRVU5ETEZOQlFVNHNRMEZCWjBKRExFdEJRV2hDTEVOQlFYTkNReXhKUVVGMFFpeERRVUV5UWt3c1RVRkJUU3hEUVVGRFRTeHZRa0ZCVUN4RFFVRTBRaXhIUVVFMVFpeERRVUV6UWl4RlFVRTJSQ3hEUVVFM1JDeERRVUZhTzBGQlEwRXNUVUZCU1VNc1UwRkJVeXhIUVVGSFRpeExRVUZMTEVOQlFVTlBMRTFCUVU0c1EwRkJZU3hWUVVGVlF5eEpRVUZXTEVWQlFXZENPMEZCUTNwRExGRkJRVWxCTEVsQlFVa3NRMEZCUTBNc1lVRkJUQ3hGUVVGS0xFVkJRVEJDTzBGQlEzUkNPMEZCUTBFc1YwRkJTeXhKUVVGSlF5eERRVUZETEVkQlFVY3NRMEZCWWl4RlFVRm5Ra0VzUTBGQlF5eEhRVUZIUml4SlFVRkpMRU5CUVVOSExGVkJRVXdzUTBGQlowSkRMRTFCUVhCRExFVkJRVFJEUml4RFFVRkRMRVZCUVRkRExFVkJRV2xFTzBGQlF6ZERMRmxCUVVsR0xFbEJRVWtzUTBGQlEwY3NWVUZCVEN4RFFVRm5Ra1FzUTBGQmFFSXNSVUZCYlVKSExGRkJRVzVDTEVsQlFTdENMRU5CUVc1RExFVkJRWE5ETzBGQlEyeERPMEZCUTBFN1FVRkRRU3hwUWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktPenRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVkQldtVXNRMEZCYUVJN1FVRmhRU3hUUVVGUFVDeFRRVUZRTzBGQlEwZzdPMEZCUlUwc1UwRkJVMUVzYVVKQlFWUXNRMEZCTWtKdVF5eEhRVUV6UWl4RlFVRm5SRHRCUVVOdVJDeE5RVUZOYjBNc1RVRkJUU3hIUVVGSFF5eFJRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCWmp0QlFVTkJMRTFCUVUxRExFZEJRVWNzUjBGQlIwZ3NUVUZCVFN4RFFVRkRTU3hWUVVGUUxFTkJRV3RDTEVsQlFXeENMRU5CUVZvN1FVRkRRU3hOUVVGTlF5eGhRVUZoTEVkQlFVZERMR2RDUVVGblFpeERRVUZETVVNc1IwRkJSQ3hEUVVGMFF6dEJRVU5CTEUxQlFVMHlReXhaUVVGWkxFZEJRVWRHTEdGQlFXRXNRMEZCUTBjc1NVRkJia003UVVGRlFVd3NSVUZCUVVFc1IwRkJSeXhEUVVGRFN5eEpRVUZLTEVkQlFWZEVMRmxCUVZnN1FVRkRRU3hOUVVGTlJTeFZRVUZWTEVkQlFVZE9MRWRCUVVjc1EwRkJRMDhzVjBGQlNpeERRVUZuUWl4UlFVRm9RaXhEUVVGdVFqdEJRVU5CTEZOQlFVOUVMRlZCUVZVc1EwRkJRMFVzZDBKQlFWZ3NTVUZCZFVNc1EwRkJPVU03UVVGRFNEczdRVUZGVFN4VFFVRlRReXhoUVVGVUxFTkJRWFZDUXl4SlFVRjJRaXhGUVVGeFJEdEJRVU40UkN4VlFVRlJRU3hKUVVGU08wRkJRMGtzVTBGQlN5eFJRVUZNTzBGQlEwa3NZVUZCVHl4RFFVRlFPenRCUVVOS0xGTkJRVXNzVFVGQlREdEJRVU5KTEdGQlFVOHNRMEZCVURzN1FVRkRTanRCUVVOSkxHRkJRVThzUTBGQlVEdEJRVTVTTzBGQlVVZzdPMEZCUlUwc1UwRkJVME1zWTBGQlZDeERRVUYzUWtRc1NVRkJlRUlzUlVGQmMwUTdRVUZEZWtRc1ZVRkJVVUVzU1VGQlVqdEJRVU5KTEZOQlFVc3NUMEZCVER0QlFVTkpMR0ZCUVU4c1EwRkJVRHM3UVVGRFNpeFRRVUZMTEU5QlFVdzdRVUZEU1N4aFFVRlBMRU5CUVZBN08wRkJRMG83UVVGRFNTeGhRVUZQTEVOQlFWQTdRVUZPVWp0QlFWRklPenRCUVVWTkxGTkJRVk5GTEdkQ1FVRlVMRU5CUVRCQ1JpeEpRVUV4UWl4RlFVRjNSRHRCUVVNelJDeFZRVUZSUVN4SlFVRlNPMEZCUTBrc1UwRkJTeXhSUVVGTU8wRkJRMGtzWVVGQlR5eERRVUZRT3p0QlFVTktMRk5CUVVzc1MwRkJURHRCUVVOSkxHRkJRVThzUTBGQlVEczdRVUZEU2p0QlFVTkpMR0ZCUVU4c1EwRkJVRHRCUVU1U08wRkJVVWc3TzBGQlJVMHNVMEZCVTBjc2NVSkJRVlFzUTBGQkswSjBReXhEUVVFdlFpeEZRVUV3UTBVc1EwRkJNVU1zUlVGQk5rUTdRVUZEYUVWR0xFVkJRVUZCTEVOQlFVTXNSMEZCUjNWRExFbEJRVWtzUTBGQlEwTXNSMEZCVEN4RFFVRlRlRU1zUTBGQlZDeERRVUZLTzBGQlEwRkZMRVZCUVVGQkxFTkJRVU1zUjBGQlIzRkRMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUZEVNc1EwRkJWQ3hEUVVGS096dEJRVU5CTEZOQlFVOUJMRU5CUVZBc1JVRkJWVHRCUVVOT0xGRkJRVWwxUXl4RFFVRkRMRWRCUVVkMlF5eERRVUZTTzBGQlEwRkJMRWxCUVVGQkxFTkJRVU1zUjBGQlIwWXNRMEZCUXl4SFFVRkhSU3hEUVVGU08wRkJRMEZHTEVsQlFVRkJMRU5CUVVNc1IwRkJSM2xETEVOQlFVbzdRVUZEU0RzN1FVRkRSQ3hUUVVGUGVrTXNRMEZCVUR0QlFVTklPenRCUVVWTkxGTkJRVk13UXl4dFFrRkJWQ3hEUVVFMlFqRkRMRU5CUVRkQ0xFVkJRWGREUlN4RFFVRjRReXhGUVVFeVJEdEJRVU01UkN4VFFVRlJMRU5CUVVOR0xFTkJRVVFzU1VGQlRTeERRVUZEUlN4RFFVRlNMRWRCUVdFc1EwRkJZaXhIUVVGcFFuRkRMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZWZUVNc1EwRkJReXhIUVVGSFJTeERRVUZNTEVkQlFWVnZReXh4UWtGQmNVSXNRMEZCUTNSRExFTkJRVVFzUlVGQlNVVXNRMEZCU2l4RFFVRjRReXhEUVVGNFFqdEJRVU5JSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMG9aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lISnZiM1E2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUM4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWtZV2R5WldwekwyUmhaM0psTFdRekwybHpjM1ZsY3k4eU1ESmNibHh1SUNBZ0lISmxkSFZ5YmlCeWIyOTBMbWRsZEZOamNtVmxia05VVFNncElTNXBiblpsY25ObEtDa3ViWFZzZEdsd2JIa29aRzl0TG1kbGRGTmpjbVZsYmtOVVRTZ3BJU2xjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRUp2ZFc1a2FXNW5RbTk0S0dSdmJUb2dVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBLU0I3WEc0Z0lDQWdiR1YwSUhOMloxSnZiM1E2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENBOUlHUnZiVnh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkbWRTYjI5MExuQmhjbVZ1ZEVWc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMloxSnZiM1FnUFNCemRtZFNiMjkwTG5CaGNtVnVkRVZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWW1GelpVSnZlQ0E5SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMG9aRzl0TENCemRtZFNiMjkwS1Z4dUlDQWdJR052Ym5OMElISmxaa0pDYjNnZ1BTQmtiMjB1WjJWMFFrSnZlQ2dwWEc0Z0lDQWdZMjl1YzNRZ1kyOXZjbVJwYm1GMFpUb2dXMjUxYldKbGNpd2diblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2wwZ1BTQmJZbUZ6WlVKdmVDNWxJQ3NnY21WbVFrSnZlQzU0TENCaVlYTmxRbTk0TG1ZZ0t5QnlaV1pDUW05NExua3NJSEpsWmtKQ2IzZ3VkMmxrZEdnZ0t5QXhMQ0J5WldaQ1FtOTRMbWhsYVdkb2RDQXJJREZkWEc0Z0lDQWdjbVYwZFhKdUlHTnZiM0prYVc1aGRHVmNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFeGxZV1pPYjJSbGN5aHRZWE4wWlhJNklGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDazZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkRnRkSUh0Y2JpQWdJQ0F2THlCb2RIUndjem92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4eU1qSTRPVE01TVM5b2IzY3RkRzh0WTNKbFlYUmxMV0Z1TFdGeWNtRjVMVzltTFd4bFlXWXRibTlrWlhNdGIyWXRZVzR0YUhSdGJDMWtiMjB0ZFhOcGJtY3RhbUYyWVhOamNtbHdkRnh1WEc0Z0lDQWdkbUZ5SUc1dlpHVnpJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvYldGemRHVnlMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0Z3aUtsd2lLU3dnTUNrN1hHNGdJQ0FnZG1GeUlHeGxZV1pPYjJSbGN5QTlJRzV2WkdWekxtWnBiSFJsY2lobWRXNWpkR2x2YmlBb1pXeGxiU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aV3hsYlM1b1lYTkRhR2xzWkU1dlpHVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObFpTQnBaaUJoYm5rZ2IyWWdkR2hsSUdOb2FXeGtJRzV2WkdWeklHRnlaU0JsYkdWdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmxiR1Z0TG1Ob2FXeGtUbTlrWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXeGxiUzVqYUdsc1pFNXZaR1Z6VzJsZExtNXZaR1ZVZVhCbElEMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdobGNtVWdhWE1nWVNCamFHbHNaQ0JsYkdWdFpXNTBMQ0J6YnlCeVpYUjFjbTRnWm1Gc2MyVWdkRzhnYm05MElHbHVZMngxWkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdocGN5QndZWEpsYm5RZ1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUJzWldGbVRtOWtaWE03WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJDWVhObGJHbHVaVWhsYVdkb2RDaGtiMjA2SUZOV1IxUmxlSFJGYkdWdFpXNTBLU0I3WEc0Z0lDQWdZMjl1YzNRZ1kyRnVkbUZ6SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWTJGdWRtRnpKeWxjYmlBZ0lDQmpiMjV6ZENCamRIZ2dQU0JqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2duTW1RbktTRmNiaUFnSUNCamIyNXpkQ0JqYjIxd2RYUmxaRk4wZVd4bElEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGtiMjBwWEc0Z0lDQWdZMjl1YzNRZ1ptOXVkRk5sZEhScGJtZHpJRDBnWTI5dGNIVjBaV1JUZEhsc1pTNW1iMjUwWEc1Y2JpQWdJQ0JqZEhndVptOXVkQ0E5SUdadmJuUlRaWFIwYVc1bmMxeHVJQ0FnSUdOdmJuTjBJSFJsZUhSTlpYUnlhWGdnUFNCamRIZ3ViV1ZoYzNWeVpWUmxlSFFvSjNsd1ptZHE0cGFJSnlsY2JpQWdJQ0J5WlhSMWNtNGdkR1Y0ZEUxbGRISnBlQzVoWTNSMVlXeENiM1Z1WkdsdVowSnZlRVJsYzJObGJuUWdmSHdnTUZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaVzVqYjJSbFRHbHVaVU5oY0NoMGVYQmxQem9nYzNSeWFXNW5JSHdnYm5Wc2JDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM054ZFdGeVpTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RpZFhSMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF4WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01seHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1Z1WTI5a1pVeHBibVZLYjJsdUtIUjVjR1UvT2lCemRISnBibWNnZkNCdWRXeHNLVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYldsMFpYSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURGY2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWW1WMlpXd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUROY2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXlYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlc1amIyUmxWR1Y0ZEVGdVkyaHZjaWgwZVhCbFB6b2djM1J5YVc1bklId2diblZzYkNrNklHNTFiV0psY2lCN1hHNGdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyMXBaR1JzWlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNbHh1SUNBZ0lDQWdJQ0JqWVhObElDZGxibVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERmNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ozSmxZWFJsYzNSRGIyMXRiMjVFYVhacGMyOXlLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0I0SUQwZ1RXRjBhQzVoWW5Nb2VDazdYRzRnSUNBZ2VTQTlJRTFoZEdndVlXSnpLSGtwTzF4dUlDQWdJSGRvYVd4bElDaDVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBJRDBnZVR0Y2JpQWdJQ0FnSUNBZ2VTQTlJSGdnSlNCNU8xeHVJQ0FnSUNBZ0lDQjRJRDBnZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIZzdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCc1pXRnpkRU52YlcxdmJrMTFiSFJwY0d4bEtIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnlaWFIxY200Z0tDRjRJSHg4SUNGNUtTQS9JREFnT2lCTllYUm9MbUZpY3lnb2VDQXFJSGtwSUM4Z1ozSmxZWFJsYzNSRGIyMXRiMjVFYVhacGMyOXlLSGdzSUhrcEtUdGNibjBpWFgwPSIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsImltcG9ydCBDaGFydFNwZWMgZnJvbSAnLi9DaGFydFNwZWMuanMnO1xyXG5pbXBvcnQgRmFjZXRTcGVjIGZyb20gJy4vRmFjZXRTcGVjLmpzJztcclxuaW1wb3J0IFRpbWluZ1NwZWMgZnJvbSAnLi9UaW1pbmdTcGVjLmpzJztcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiLi9BbmltYXRpb25TcGVjLmpzXCI7XHJcbmltcG9ydCB7IENhbmlzVXRpbCB9IGZyb20gJy4vdXRpbC9VdGlsLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5pbXBvcnQgR3JvdXBpbmdTcGVjIGZyb20gJy4vR3JvdXBpbmdTcGVjLmpzJztcclxuaW1wb3J0IEFjdGlvblNwZWMgZnJvbSAnLi9BY3Rpb25TcGVjLmpzJztcclxuXHJcbmNsYXNzIENhbmlzU3BlYyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTcGVjID0ge307XHJcbiAgICAgICAgdGhpcy5jYW5pc09iaiA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvLyB0aGlzLl9hY3Rpb25UbXBscyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmNoYXJ0U3BlY3M7XHJcbiAgICAgICAgdGhpcy5mYWNldDtcclxuICAgICAgICB0aGlzLl9hbmltYXRpb25zO1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aDtcclxuICAgICAgICB0aGlzLmNoYXJ0SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY29uc3RhbnRzKGNvbkFycikge1xyXG4gICAgICAgIHRoaXMuX2NvbnN0YW50cy5jbGVhcigpO1xyXG4gICAgICAgIGNvbkFyci5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9jb25zdGFudHMuc2V0KGMubmFtZSwgYy52YWx1ZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29uc3RhbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25zdGFudHM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0IGFjdGlvblRtcGxzKGFjdGlvbkFycikge1xyXG4gICAgLy8gICAgIHRoaXMuX2FjdGlvblRtcGxzLmNsZWFyKCk7XHJcbiAgICAvLyAgICAgYWN0aW9uQXJyLmZvckVhY2goYSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmKCFhLm5hbWUgfHwgdHlwZW9mIGEubmFtZSA9PT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgLy8gICAgICAgICAgICAgYS5uYW1lID0gJyc7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgdGhpcy5fYWN0aW9uVG1wbHMuc2V0KGEubmFtZSwgYSk7XHJcbiAgICAvLyAgICAgfSlcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBnZXQgYWN0aW9uVG1wbHMoKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2FjdGlvblRtcGxzO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHNldCBhbmltYXRpb25zKGFuaUpzb24pIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnYXNzaWduaW5nIGFuaW1hdGlvbnM6ICcsIHRoaXMuY2hhcnRTcGVjcywgYW5pSnNvbik7XHJcbiAgICAgICAgbGV0IGlkeEFuaUpzb24gPSBhbmlKc29uLm1hcCh0bXBBbmkgPT4ge1xyXG4gICAgICAgICAgICB0bXBBbmkuY2hhcnRJZHggPSAwXHJcbiAgICAgICAgICAgIHJldHVybiB0bXBBbmk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGNoYXJ0TnVtID0gMDsvL251bWJlciBvZiBjaGFydHNcclxuICAgICAgICBpZiAodGhpcy5mYWNldCkge1xyXG4gICAgICAgICAgICBjaGFydE51bSA9IHRoaXMuZmFjZXQudmlld3NbMF0uZnJhbWVzLmxlbmd0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFydE51bSA9IHRoaXMuY2hhcnRTcGVjcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFydE51bSA+IDEpIHsvL21vcmUgdGhhbiAxIGlucHV0IGNoYXJ0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb2luZyB0byBjbG9uZSBhbmltYXRpb25zOiAnLCBjaGFydE51bSwgYW5pSnNvbik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2hhcnROdW0gLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBbmlKc29uID0gQ2FuaXNVdGlsLmRlZXBDbG9uZShhbmlKc29uKTtcclxuICAgICAgICAgICAgICAgIHRtcEFuaUpzb25bMF0ucmVmZXJlbmNlID0gVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ7XHJcbiAgICAgICAgICAgICAgICAvL3JlY29yZCBhbmltYXRpb24gaWQgYW5kIHJlcGxhY2UgaXQgaW4gYWxpZ24gcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBbmlJZHggPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkTWFwcGluZyA9IG5ldyBNYXAoKTsgLy9rZXk6IHByZXZpb3VzIGFuaW1hdGlvbiBpZCwgdmFsdWU6IG5ldyBhbmltYXRpb24gaWRcclxuICAgICAgICAgICAgICAgIGxldCB0bXBJZHhBbmlKc29uID0gdG1wQW5pSnNvbi5tYXAodG1wQW5pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBbmkuY2hhcnRJZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG1wQW5pLmlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJZCA9ICdfYW5pXycgKyBpICsgJ18nICsgdG1wQW5pSWR4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZE1hcHBpbmcuc2V0KHRtcEFuaS5pZCwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcEFuaS5hbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpZE1hcHBpbmcuZ2V0KHRtcEFuaS5hbGlnbi50YXJnZXQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQW5pLmFsaWduLnRhcmdldCA9IGlkTWFwcGluZy5nZXQodG1wQW5pLmFsaWduLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FsaWduaW5nIHdpdGggYW4gaWQgdGhhdCBkb2VzIG5vdCBleGlzdCEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wQW5pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlkeEFuaUpzb24ucHVzaCguLi50bXBJZHhBbmlKc29uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hbmltYXRpb25zID0gaWR4QW5pSnNvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYW5pbWF0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBwcmVwcm9jZXNzQ2hhcnRzKHNwZWMsIGRpZmZDaGFydCwgc3RhdHVzID0ge30pIHtcclxuICAgICAgICAvLyBjb25zb2xlLnRpbWUoJ3ByZXBlb2Nlc3MgY2hhcnRzJyk7XHJcbiAgICAgICAgbGV0IGNhbmlzT2JqID0gc3BlYztcclxuXHJcbiAgICAgICAgLy8gaWYgKGRpZmZDaGFydCkgey8vdXNpbmcgZGlmZmVyZW50IGNoYXJ0LCBwcm9jZXNzaW5nIGNoYXJ0c1xyXG4gICAgICAgIHRoaXMuY2hhcnRTcGVjcyA9IFtdO1xyXG4gICAgICAgIFtjYW5pc09iai5jaGFydHMsIHRoaXMuaGFzRXJyb3JdID0gQ2hhcnRTcGVjLmNoYXJ0UHJlUHJvY2Vzc2luZyhjYW5pc09iai5jaGFydHMsIHN0YXR1cyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHJldHVybiBjYW5pc09iajtcclxuICAgICAgICAvL2RlYWwgd2l0aCBpbnB1dCBjaGFydHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbmlzT2JqLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFydE5hbWUgPSB0eXBlb2YgY2FuaXNPYmouY2hhcnRzW2ldLmlkID09PSAndW5kZWZpbmVkJyA/ICdjaGFydCcgKyBpIDogY2FuaXNPYmouY2hhcnRzW2ldLmlkO1xyXG4gICAgICAgICAgICBjb25zdCBjaGFydFR5cGUgPSB0eXBlb2YgY2FuaXNPYmouY2hhcnRzW2ldLnR5cGUgPT09ICd1bmRlZmluZWQnID8gQ2hhcnRTcGVjLkNIQVJUX1VSTCA6IGNhbmlzT2JqLmNoYXJ0c1tpXS50eXBlO1xyXG4gICAgICAgICAgICBjb25zdCB0bXBDaGFydCA9IG5ldyBDaGFydFNwZWMoY2hhcnROYW1lLCBjaGFydFR5cGUsIGNhbmlzT2JqLmNoYXJ0c1tpXS5zb3VyY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0U3BlY3MucHVzaCh0bXBDaGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vaW5pdCBmYWNldFxyXG4gICAgICAgIGlmIChjYW5pc09iai5mYWNldCkge1xyXG4gICAgICAgICAgICB0aGlzLmZhY2V0ID0gbmV3IEZhY2V0U3BlYyhjYW5pc09iai5mYWNldC50eXBlLCBjYW5pc09iai5mYWNldC52aWV3cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBDaGFydFNwZWMubG9hZENoYXJ0cyh0aGlzLmNoYXJ0U3BlY3MsIHRoaXMuZmFjZXQsIHN0YXR1cyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHJldHVybiBjYW5pc09iajtcclxuXHJcbiAgICAgICAgLy9zZXQgdmlld3BvcnQgZm9yIGpzbW92aW5cclxuICAgICAgICBnbG9iYWxWYXIuanNNb3Zpbi5zZXRWaWV3cG9ydChDaGFydFNwZWMudmlld3BvcnQuY2hhcnRXaWR0aCwgQ2hhcnRTcGVjLnZpZXdwb3J0LmNoYXJ0SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgQ2hhcnRTcGVjLnJlbW92ZVRyYW5zQW5kTWVyZ2UoKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5hcHBlbmRDaGlsZChDaGFydFNwZWMuc3ZnQ2hhcnQpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBnbG9iYWxWYXIuanNNb3Zpbi5jbGVhckxheWVycygpO1xyXG4gICAgICAgIENoYXJ0U3BlYy5hZGRMb3R0aWVNYXJrTGF5ZXJzKENoYXJ0U3BlYy5zdmdDaGFydCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUudGltZUVuZCgncHJlcGVvY2VzcyBjaGFydHMnKTtcclxuICAgICAgICByZXR1cm4gY2FuaXNPYmo7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVNwZWMoc3BlYykge1xyXG4gICAgICAgIGxldCBkaWZmQ2hhcnQgPSBmYWxzZTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY29tcGFyaW5nOiAnLCB0aGlzLmN1cnJlbnRTcGVjLmNoYXJ0cywgc3BlYy5jaGFyc3QpO1xyXG4gICAgICAgIGlmICgodHlwZW9mIHRoaXMuY3VycmVudFNwZWMuY29uc3RhbnRzICE9PSAndW5kZWZpbmVkJyAmJiBKU09OLnN0cmluZ2lmeShzcGVjLmNvbnN0YW50cykgIT09IEpTT04uc3RyaW5naWZ5KHRoaXMuY3VycmVudFNwZWMuY29uc3RhbnRzKSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmNoYXJ0cyAhPT0gJ3VuZGVmaW5lZCcgJiYgSlNPTi5zdHJpbmdpZnkoc3BlYy5jaGFydHMpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLmN1cnJlbnRTcGVjLmNoYXJ0cykpIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmNoYXJ0cyA9PT0gJ3VuZGVmaW5lZCcgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBzcGVjLmZhY2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5mYWNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgSlNPTi5zdHJpbmdpZnkoc3BlYy5mYWNldCkgIT09IEpTT04uc3RyaW5naWZ5KHRoaXMuY3VycmVudFNwZWMuZmFjZXQpKSB8fFxyXG4gICAgICAgICAgICAoKHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmZhY2V0ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygc3BlYy5mYWNldCA9PT0gJ3VuZGVmaW5lZCcpICYmICEodHlwZW9mIHRoaXMuY3VycmVudFNwZWMuZmFjZXQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzcGVjLmZhY2V0ID09PSAndW5kZWZpbmVkJykpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGRpZmZDaGFydCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaWZmQ2hhcnQpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoYXJ0cyBhcmUgZGlmZmVyZW50Jyk7XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbi5kb21NYXJrcy5jbGVhcigpO1xyXG4gICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya3MgPSBbXTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLmRhdGFNYXJrRGF0dW0uY2xlYXIoKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLm1hcmtzV2l0aFNhbWVEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICBDaGFydFNwZWMubm9uRGF0YU1hcmtEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRVbmRlcnN0YW5kaW5nID0geyBtU2hhcGU6IFsnc2hhcGUnXSB9O1xyXG4gICAgICAgICAgICBBbmltYXRpb24uYW5pbWF0aW9ucy5jbGVhcigpO1xyXG4gICAgICAgICAgICBBbmltYXRpb24ubWFya0NsYXNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIEFjdGlvblNwZWMuYWN0aW9uVG1wbHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3BlYyA9IHNwZWM7XHJcbiAgICAgICAgcmV0dXJuIGRpZmZDaGFydDtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0F0dHJzKGxlZ2FsQXR0cnMsIG9iaiwgc3RhdHVzKSB7XHJcbiAgICAgICAgY29uc3QgYXR0cnMgPSBPYmplY3Qua2V5cyhvYmopO1xyXG4gICAgICAgIGxldCBoYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4yID0gYXR0cnMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XHJcbiAgICAgICAgICAgIGlmICghbGVnYWxBdHRycy5pbmNsdWRlcyhhdHRyc1tqXSkpIHtcclxuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcFZhbHVlID0gb2JqW2F0dHJzW2pdXTtcclxuICAgICAgICAgICAgICAgIGxldCBlcnJTcGVjU3RyID0gJ1wiJyArIGF0dHJzW2pdICsgJ1wiOic7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKE51bWJlcih0bXBWYWx1ZSkpKSB7Ly90aGUgdmFsdWUgaXMgYSBudW1iZXJcclxuICAgICAgICAgICAgICAgICAgICBlcnJTcGVjU3RyICs9ICcnICsgdG1wVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0bXBWYWx1ZSA9PT0gJ29iamVjdCcpIHsvL3RoZSB2YWx1ZSBpcyBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgIGVyclNwZWNTdHIgKz0gSlNPTi5zdHJpbmdpZnkodG1wVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsvL3RoZSB2YWx1ZSBpcyBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICBlcnJTcGVjU3RyICs9ICdcIicgKyB0bXBWYWx1ZSArICdcIic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnSWxsZWdhbCBhdHRyaWJ1dGUgbmFtZSBcIicgKyBhdHRyc1tqXSArICdcIi4nLCBlcnJTcGVjOiBlcnJTcGVjU3RyLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXNFcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrIHRoZSB2YWxpZGF0eSBvZiB0aGUgc3BlY1xyXG4gICAgICogQHBhcmFtIHsqfSBzcGVjIFxyXG4gICAgICovXHJcbiAgICBjaGVja1NwZWMoc3BlYywgc3RhdHVzKSB7XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgLy9jaGVjayBjaGFydHNcclxuICAgICAgICBpZiAoc3BlYy5jaGFydHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZXJlIGFyZSBubyBpbnB1dCBjaGFydHMuJywgZXJyU3BlYzogJ1wiY2hhcnRzXCI6W10nIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2hlY2sgY2hhcnQgc291cmNlXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNwZWMuY2hhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgZm9yIHdyb25nIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoQ2hhcnRTcGVjLmF0dHJzLCBzcGVjLmNoYXJ0c1tpXSwgc3RhdHVzKTtcclxuICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzcGVjLmNoYXJ0c1tpXS5zb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyBjaGFydCBzb3VyY2UgZm91bmQgaW4gY2hhcnQgaXRlbS4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShzcGVjLmNoYXJ0c1tpXSkucmVwbGFjZSgvXFxzL2csICcnKSB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VTdHIgPSBzcGVjLmNoYXJ0c1tpXS5zb3VyY2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlU3RyLmluZGV4T2YoJy5kc3ZnJykgPCAwICYmICEoc3BlYy5jaGFydHNbaV0uc3RhcnQgJiYgc3BlYy5jaGFydHNbaV0uZW5kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnTm8gcmFuZ2Ugc3BlY2lmaWNhdGlvbiBmb3VuZCBmb3IgaW5wdXQgY2hhcnQgaW5kZXggLicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuY2hhcnRzW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaGVjayBhbmltYXRpb25cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3BlYy5hbmltYXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgZm9yIHdyb25nIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoQW5pbWF0aW9uLmF0dHJzLCBzcGVjLmFuaW1hdGlvbnNbaV0sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghc3BlYy5hbmltYXRpb25zW2ldLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnTm8gc2VsZWN0b3IgZm91bmQgaW4gYW5pbWF0aW9uIHVuaXQuJywgZXJyU3BlYzogSlNPTi5zdHJpbmdpZnkoc3BlYy5hbmltYXRpb25zW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHMpIHtcclxuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyBlZmZlY3RzIGZvdW5kIGluIGFuaW1hdGlvbiB1bml0LicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuYW5pbWF0aW9uc1tpXSkucmVwbGFjZSgvXFxzL2csICcnKSB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5yZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyhUaW1pbmdTcGVjLnRyYW5zUmVmKHNwZWMuYW5pbWF0aW9uc1tpXS5yZWZlcmVuY2UpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdUaGUgdmFsdWUgb2YgdGhlIHJlZmVyZW5jZSBoYXMgdG8gYmUgb25lIG9mOiBzdGFydCB3aXRoIHByZXZpb3VzIG9yIHN0YXJ0IGFmdGVyIHByZXZpb3VzLicsIGVyclNwZWM6ICdcInJlZmVyZW5jZVwiOlwiJyArIHNwZWMuYW5pbWF0aW9uc1tpXS5yZWZlcmVuY2UucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gLy9jaGVjayBhbGlnblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbikge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGlmICghT2JqZWN0LmtleXMoQW5pbWF0aW9uLmFsaWduVGFyZ2V0KS5pbmNsdWRlcyhBbmltYXRpb24udHJhbnNBbGlnbihzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24pKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdUaGUgdmFsdWUgb2YgYWxpZ24gaGFzIHRvIGJlIG9uZSBvZjogZWxlbWVudCBvciBvYmplY3QuJywgZXJyU3BlYzogJ1wiYWxpZ25cIjpcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBhbGlnblxyXG4gICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbiAmJiB0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLmFsaWduID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKEFuaW1hdGlvbi5hbGlnbkF0dHJzLCBzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGFsaWduIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbi50eXBlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKEFuaW1hdGlvbi5hbGlnblRhcmdldCkuaW5jbHVkZXMoQW5pbWF0aW9uLnRyYW5zQWxpZ24oc3BlYy5hbmltYXRpb25zW2ldLmFsaWduLnR5cGUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiBhbGlnbiBoYXMgdG8gYmUgb25lIG9mOiBlbGVtZW50IG9yIG9iamVjdC4nLCBlcnJTcGVjOiAnXCJ0eXBlXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLmFsaWduLnR5cGUucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBvZmZzZXQgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLm9mZnNldCAmJiB0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLm9mZnNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhUaW1pbmdTcGVjLmRhdGFCaW5kQXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXS5vZmZzZXQsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgZ3JvdXBpbmdcclxuICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0uZ3JvdXBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tHcm91cGluZ1NwZWMoc3BlYy5hbmltYXRpb25zW2ldLmdyb3VwaW5nLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGVmZmVjdHNcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4yID0gc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKEFjdGlvblNwZWMuYXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyBlZmZlY3QgdHlwZSBmb3VuZCBpbiBlZmZlY3QgaXRlbS4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXSkucmVwbGFjZSgvXFxzL2csICcnKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFPYmplY3QudmFsdWVzKEFjdGlvblNwZWMuYWN0aW9uVHlwZXMpLmluY2x1ZGVzKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgZWZmZWN0IHR5cGUgXCInICsgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0udHlwZSArICdcIi4nLCBlcnJTcGVjOiAnXCJ0eXBlXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0udHlwZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLm9mZnNldCAmJiB0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0ub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhUaW1pbmdTcGVjLmRhdGFCaW5kQXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLm9mZnNldCwgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZHVyYXRpb24gJiYgdHlwZW9mIHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmR1cmF0aW9uID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhUaW1pbmdTcGVjLmRhdGFCaW5kQXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmR1cmF0aW9uLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5lYXNpbmcgJiYgIU9iamVjdC52YWx1ZXMoQWN0aW9uU3BlYy5lYXNpbmdUeXBlKS5pbmNsdWRlcyhzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5lYXNpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgZWFzaW5nIHR5cGUgXCInICsgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZWFzaW5nICsgJ1wiLicsIGVyclNwZWM6ICdcImVhc2luZ1wiOlwiJyArIHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmVhc2luZy5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrR3JvdXBpbmdTcGVjKGdyb3VwaW5nU3BlYywgc3RhdHVzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBncm91cGluZ1NwZWMgPT09ICdudW1iZXInIHx8IHR5cGVvZiBncm91cGluZ1NwZWMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVyclN0ciA9IHR5cGVvZiBncm91cGluZ1NwZWMgPT09ICdudW1iZXInID8gJ1wiZ3JvdXBpbmdcIjonICsgZ3JvdXBpbmdTcGVjIDogJ1wiZ3JvdXBpbmdcIjpcIicgKyBncm91cGluZ1NwZWMucmVwbGFjZSgvXFxzL2csICcnKSArICdcIic7XHJcbiAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdJbnZhbGlkIGdyb3VwaW5nIHZhbHVlLicsIGVyclNwZWM6IGVyclN0ciB9O1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2hlY2sgZm9yIHdyb25nIGF0dHJpYnV0ZXNcclxuICAgICAgICBsZXQgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoR3JvdXBpbmdTcGVjLmF0dHJzLCBncm91cGluZ1NwZWMsIHN0YXR1cyk7XHJcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGdyb3VwaW5nU3BlYy5yZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhUaW1pbmdTcGVjLnRpbWluZ1JlZikuaW5jbHVkZXMoVGltaW5nU3BlYy50cmFuc1JlZihncm91cGluZ1NwZWMucmVmZXJlbmNlKSkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdUaGUgdmFsdWUgb2YgdGhlIHJlZmVyZW5jZSBoYXMgdG8gYmUgb25lIG9mOiBzdGFydCB3aXRoIHByZXZpb3VzIG9yIHN0YXJ0IGFmdGVyIHByZXZpb3VzLicsIGVyclNwZWM6ICdcInJlZmVyZW5jZVwiOlwiJyArIGdyb3VwaW5nU3BlYy5yZWZlcmVuY2UucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChncm91cGluZ1NwZWMuc29ydCAmJiB0eXBlb2YgZ3JvdXBpbmdTcGVjLnNvcnQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGxldCBzb3J0SGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoR3JvdXBpbmdTcGVjLnNvcnRBdHRycywgZ3JvdXBpbmdTcGVjLnNvcnQsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIGlmIChzb3J0SGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZ3JvdXBpbmdTcGVjLnNvcnQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdJbnZhbGlkIHNvcnQgdmFsdWUuJywgZXJyU3BlYzogJ1wic29ydFwiOicgKyBncm91cGluZ1NwZWMuc29ydCB9O1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdyb3VwaW5nU3BlYy5ncm91cGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja0dyb3VwaW5nU3BlYyhncm91cGluZ1NwZWMuZ3JvdXBpbmcsIHN0YXR1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0KHNwZWMsIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHN0YXR1cykgIT09ICd7fScpIHtcclxuICAgICAgICAgICAgdGhpcy5oYXNFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmhhc0Vycm9yID0gdGhpcy5jaGVja1NwZWMoc3BlYywgc3RhdHVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgQW5pbWF0aW9uLnJlc2V0QWxsKCk7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgaWYgKHNwZWMuY2hhcnRzLmxlbmd0aCA9PT0gMCkgey8vbm8gY2hhcnRzIHNwZWNpZmllZFxyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmRvbU1hcmtzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5kYXRhTWFya0RhdHVtLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMubm9uRGF0YU1hcmtEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0VW5kZXJzdGFuZGluZyA9IHsgbVNoYXBlOiBbJ3NoYXBlJ10gfTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24ubWFya0NsYXNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLmFjdGlvblRtcGxzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vc2V0IGZyYW1lcmF0ZSBmb3IganNtb3ZpblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uc2V0RnJhbWVSYXRlKFRpbWluZ1NwZWMuRlJBTUVfUkFURSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZkNoYXJ0ID0gdGhpcy5jb21wYXJlU3BlYyhzcGVjKTtcclxuICAgICAgICAgICAgICAgIGxldCBjYW5pc09iaiA9IGF3YWl0IHRoaXMucHJlcHJvY2Vzc0NoYXJ0cyhzcGVjLCBkaWZmQ2hhcnQsIHN0YXR1cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pbml0IHVzZXIgZGVmaW5lZCB2YXJpYWJsZXNcclxuICAgICAgICAgICAgICAgIGlmIChjYW5pc09iai5jb25zdGFudHMgJiYgdHlwZW9mIGNhbmlzT2JqLmNvbnN0YW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0YW50cyA9IGNhbmlzT2JqLmNvbnN0YW50cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjYW5pc09iai5lZmZlY3RUbXBscyAmJiB0eXBlb2YgY2FuaXNPYmouZWZmZWN0VG1wbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQWN0aW9uU3BlYy5hc3NpZ25BY3Rpb25UbXBscyhjYW5pc09iai5lZmZlY3RUbXBscywgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZmZlY3QgdG1wbHM6ICcsIEFjdGlvblNwZWMuYWN0aW9uVG1wbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZGVhbCB3aXRoIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IGNhbmlzT2JqLmFuaW1hdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmFuaW1hdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RBbmltYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYW5pSWR4ID0gMDsgYW5pSWR4IDwgdGhpcy5hbmltYXRpb25zLmxlbmd0aDsgYW5pSWR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaW1hdGlvbkpzb24gPSB0aGlzLmFuaW1hdGlvbnNbYW5pSWR4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUudGltZSgndXNpbmcgZG9tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXNlIHRoZSBzZWxlY3RvciBpbiBhbmltYXRpb24gdG8gc2VsZWN0IG1hcmtzIGFuZCByZWNvcmQgZG9tIGF0dHJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUudGltZSgncXVlcnkgZG9tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0bXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBDb250YWluZXIuaW5uZXJIVE1MID0gQ2hhcnRTcGVjLmNoYXJ0c1thbmltYXRpb25Kc29uLmNoYXJ0SWR4XS5vdXRlckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrcyA9IHRtcENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGFuaW1hdGlvbkpzb24uc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wQWxsTWFya3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHRtcENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcubWFyaycpLCBmdW5jdGlvbiAodG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFsbE1hcmtzLnB1c2godG0uZ2V0QXR0cmlidXRlKCdpZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtQ2xhc3MgPSB0bS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrVHlwZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG1DbGFzcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtQ2xhc3NbaV0gPT09ICdtYXJrJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrVHlwZSA9IG1DbGFzc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLm1hcmtDbGFzcy5zZXQodG0uZ2V0QXR0cmlidXRlKCdpZCcpLCBtYXJrVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrcyA9IFsuLi5uZXcgU2V0KFsuLi5BbmltYXRpb24uYWxsTWFya3MsIC4uLnRtcEFsbE1hcmtzXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFuaW1hdGlvbkpzb24uc2VsZWN0b3IgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSBzZWxlY3RvciBuZWVkIHRvIGJlIGEgQ1NTIHNlbGVjdG9yJywgZXJyU3BlYzogJ1wic2VsZWN0b3JcIjonICsgYW5pbWF0aW9uSnNvbi5zZWxlY3RvciB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnVGhlIHNlbGVjdG9yICcgKyBhbmltYXRpb25Kc29uLnNlbGVjdG9yICsgJyBzZWxlY3RzIG5vIG1hcmtzJywgZXJyU3BlYzogJ1wic2VsZWN0b3JcIjpcIicgKyBhbmltYXRpb25Kc29uLnNlbGVjdG9yLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKCdxdWVyeSBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uSnNvbi5zZWxlY3RvciA9IHRoaXMuc29ydFNlbGVjdG9yKGFuaW1hdGlvbkpzb24uc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVzZWRDaGFuZ2VkQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkQ2hhbmdlZEF0dHJzLnB1c2goQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgYW5pbWF0aW9uIGlzIGV4aXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiByZW1vdmUgbm9uIGV4aXN0ZWQgYW5pbWF0aW9ucyBpbiB0aGUgY3VycmVudCBzcGVjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobWFya3MsIGZ1bmN0aW9uIChtYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0lkcy5wdXNoKG1hcmsuZ2V0QXR0cmlidXRlKCdpZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaUtleSA9IGFuaW1hdGlvbkpzb24uY2hhcnRJZHggKyAnXycgKyBhbmltYXRpb25Kc29uLnNlbGVjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pS2V5ID09PSAnMF8ubWFyaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaUtleSA9IGAwXyMke0FuaW1hdGlvbi5hbGxNYXJrcy5qb2luKCcsICMnKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmFuaW1hdGlvbnMuZ2V0KGFuaUtleSkgIT09ICd1bmRlZmluZWQnKSB7Ly9hbHJlYWR5IGhhdmUgdGhpcyBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IEFuaW1hdGlvbi5hbmltYXRpb25zLmdldChhbmlLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRyYW5zbGF0ZShhbmltYXRpb25Kc29uLCB1c2VkQ2hhbmdlZEF0dHJzLCB0cnVlLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRyYW5zbGF0ZShhbmltYXRpb25Kc29uLCB1c2VkQ2hhbmdlZEF0dHJzLCBmYWxzZSwgc3RhdHVzKTsvL3RyYW5zbGF0ZSBmcm9tIGpzb24gb2JqIHRvIEFuaW1hdGlvbiBvYmpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLnNldChhbmlLZXksIGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hdXRvIGZpbGwgYWxpZ24gcHJvcGVydHkgZm9yIGFuaW1hdGlvbnMgZXhjZXB0IHRoZSBmaXJzdCBvbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbmltYXRpb24uYWxpZ24gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsYXN0QW5pbWF0aW9uICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmFsaWduID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogbGFzdEFuaW1hdGlvbi5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBbmltYXRpb24uYWxpZ25UYXJnZXQud2l0aE9ialxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVwbGFjZSBjb250YW50IHZhcmlhYmxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25zdGFudHMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5yZXBsYWNlQ29uc3RhbnRzKHRoaXMuY29uc3RhbnRzLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLnRpbWVFbmQoJ3VzaW5nIGRvbScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbWFya0lkcyA9IFtdOy8vcmVjb3JkIGFsbCBpZHMgb2Ygc2VsZWN0ZWQgbWFya3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkeEZvckVhY2hDbHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobWFya3MsIGZ1bmN0aW9uIChtYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYXJrJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJZCA9IG1hcmsuZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0NscyA9IG1hcmsuZ2V0QXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlkeEZvckVhY2hDbHMuZ2V0KG1hcmtDbHMpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4Rm9yRWFjaENscy5zZXQobWFya0NscywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHhGb3JFYWNoQ2xzLnNldChtYXJrQ2xzLCBpZHhGb3JFYWNoQ2xzLmdldChtYXJrQ2xzKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hcmtJZHMucHVzaChtYXJrSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvY2VzcyBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay50YWdOYW1lID09PSAncGF0aCcpIHsvL2NvbnNpZGVyIHRoZSBsaW5rYWdlIHNoYXBlIGxhdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtKU09OID0gQ2FuaXNVdGlsLnRvSlNPTihtYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRBdHRycyA9IENhbmlzVXRpbC5kaXNjcmV0aXplUGF0aChtYXJrSlNPTik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzLnR5cGUgPT09ICdsaW5lcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmb3JtZWRBdHRycy5kYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneCcgKyAoMSArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneScgKyAoMSArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneCcgKyAoMiArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMV1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneScgKyAoMiArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGZBdHRyc0RhdGFLZXlzID0gT2JqZWN0LmtleXModHJhbnNmb3JtZWRBdHRycy5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRmQXR0cnNEYXRhS2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0QXR0ciA9IHRmQXR0cnNEYXRhS2V5c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodEF0dHIgPT09ICdyYWRpdXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIuaW5uZXJSYWRpdXMgPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdWzBdLnJ4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIub3V0dGVyUmFkaXVzID0gdHJhbnNmb3JtZWRBdHRycy5kYXRhW3RBdHRyXVsxXS5yeCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyLmlubmVyUmFkaXVzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIub3V0dGVyUmFkaXVzID0gdHJhbnNmb3JtZWRBdHRycy5kYXRhW3RBdHRyXVswXS5yeCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyW3RBdHRyXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVt0QXR0cl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsgPSBDYW5pc1V0aWwudG9ET00obWFya0pTT04pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRG9tQXR0ck9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJBcnIgPSBbLi4ubWFyay5hdHRyaWJ1dGVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0ckFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyTmFtZSA9IGF0dHJBcnJbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialthdHRyTmFtZS5uYW1lXSA9IG1hcmsuZ2V0QXR0cmlidXRlKGF0dHJOYW1lLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtEb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnYmJXaWR0aCddID0gbWFya0RvbS5nZXRCQm94KCkud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYkhlaWdodCddID0gbWFya0RvbS5nZXRCQm94KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnYmJYJ10gPSBtYXJrRG9tLmdldEJCb3goKS54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnYmJZJ10gPSBtYXJrRG9tLmdldEJCb3goKS55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnY29udGVudCddID0gbWFyay50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2lkJ10gPSBtYXJrSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YURhdHVtQXR0clZhbHVlID0gSlNPTi5wYXJzZShtYXJrLmdldEF0dHJpYnV0ZSgnZGF0YS1kYXR1bScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFEYXR1bUF0dHJWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhRGF0dW1BdHRyVmFsdWUgPSBkYXRhRGF0dW1BdHRyVmFsdWVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhRGF0dW1BdHRyVmFsdWUuY2xzSWR4ID0gYGEke2lkeEZvckVhY2hDbHMuZ2V0KG1hcmtDbHMpfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIENoYXJ0U3BlYy5ub25EYXRhTWFya0RhdHVtLmdldChtYXJrSWQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5ub25EYXRhTWFya0RhdHVtLmdldChtYXJrSWQpLmNsc0lkeCA9IGBhJHtpZHhGb3JFYWNoQ2xzLmdldChtYXJrQ2xzKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnZGF0YS1kYXR1bSddID0gZGF0YURhdHVtQXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FuaXNTcGVjLm1hcmtEYXRhLnNldChtYXJrSWQsIGRhdGFEYXR1bUF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWyd0YWdOYW1lJ10gPSBtYXJrLnRhZ05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay50YWdOYW1lID09PSAncGF0aCcgfHwgbWFyay50YWdOYW1lID09PSAnbGluZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydzdHJva2UtZGFzaGFycmF5J10gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpLmdldFRvdGFsTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnc3Ryb2tlLWRhc2hvZmZzZXQnXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcmtJZCkuZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay50YWdOYW1lID09PSAncGF0aCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpc2NEID0gQ2FuaXNVdGlsLmRpc2NyZXRpemVEKG1hcmsuZ2V0QXR0cmlidXRlKCdkJyksICcjMDAwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGlzY0QgIT09ICd1bmRlZmluZWQnICYmIGRpc2NEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzY0QudHlwZSA9PT0gJ3BpZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnY3gnXSA9IGRpc2NELmRhdGEuY3g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnY3knXSA9IGRpc2NELmRhdGEuY3k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnc3RhcnRBbmdsZSddID0gKGRpc2NELmRhdGEuY2xvY2t3aXNlID8gZGlzY0QuZGF0YS5zdGFydEFuZ2xlIDogZGlzY0QuZGF0YS5lbmRBbmdsZSkgLSAxIC8gKE1hdGguUEkgKiAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydlbmRBbmdsZSddID0gKCFkaXNjRC5kYXRhLmNsb2Nrd2lzZSA/IGRpc2NELmRhdGEuc3RhcnRBbmdsZSA6IGRpc2NELmRhdGEuZW5kQW5nbGUpICsgTWF0aC5QSSAqIDQgKyAxIC8gKE1hdGguUEkgKiAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzY0QuZGF0YS5yYWRpdXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydpbm5lclJhZGl1cyddID0gZGlzY0QuZGF0YS5yYWRpdXNbMF0ucnggPiBkaXNjRC5kYXRhLnJhZGl1c1sxXS5yeCA/IGRpc2NELmRhdGEucmFkaXVzWzFdLnJ4IDogZGlzY0QuZGF0YS5yYWRpdXNbMF0ucng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ291dHRlclJhZGl1cyddID0gZGlzY0QuZGF0YS5yYWRpdXNbMF0ucnggPiBkaXNjRC5kYXRhLnJhZGl1c1sxXS5yeCA/IGRpc2NELmRhdGEucmFkaXVzWzBdLnJ4IDogZGlzY0QuZGF0YS5yYWRpdXNbMV0ucng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ291dHRlclJhZGl1cyddKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnaW5uZXJSYWRpdXMnXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ291dHRlclJhZGl1cyddID0gZGlzY0QuZGF0YS5yYWRpdXNbMF0ucnggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5kb21NYXJrcy5zZXQobWFya0lkLCB0bXBEb21BdHRyT2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FmdGVyJywgQW5pbWF0aW9uLmRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmltYXRpb24uY2FsQW5pVGltZShtYXJrSWRzLCBsYXN0QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNhbEFuaVRpbWUobWFya0lkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmdldChhbmlLZXkpLmFsaWduT25EYXRhID0gYW5pbWF0aW9uLmFsaWduT25EYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0QW5pbWF0aW9uID0gYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRtcENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0ZXN0IG1hcmtzIGluIG9yZGVyIGluIHRoZSBlbmQ6ICcsIGFuaW1hdGlvbi5tYXJrc0luT3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgc29ydFNlbGVjdG9yKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0b3JCbG9ja3MgPSBzZWxlY3Rvci5zcGxpdCgnLCAnKTsvL3Nob3VsZCBiZSBpbiB0aGUgZm9ybSAjbWFyazEgI21hcmsyIC4uLlxyXG4gICAgICAgIGlmIChzZWxlY3RvckJsb2Nrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdiZWZvcmUgc29ydCBzZWxlY3RvcjogJywgc2VsZWN0b3JCbG9ja3MpO1xyXG4gICAgICAgICAgICBzZWxlY3RvckJsb2Nrcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1BID0gcGFyc2VJbnQoYS5zdWJzdHJpbmcoNSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtQiA9IHBhcnNlSW50KGIuc3Vic3RyaW5nKDUpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudW1BIC0gbnVtQjtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FmdGVyIHNvcnQgc2VlbGN0b3InLCBzZWxlY3RvckJsb2Nrcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RvckJsb2Nrcy5qb2luKCcsICcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKGNhbGxiYWNrLCBzdGF0dXMgPSB7fSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUudGltZSgncmVuZGVyaW5nJyk7XHJcbiAgICAgICAgQW5pbWF0aW9uLnJlbmRlckFuaW1hdGlvbihzdGF0dXMpO1xyXG4gICAgICAgIC8vIEFuaW1hdGlvbi5maW5kS2V5ZnJhbWVzKCk7XHJcbiAgICAgICAgLy9tYXAgYW5pbWF0aW9uIGtleWZyYW1lcyB0byBsb3R0aWUgc3BlY1xyXG4gICAgICAgIEFuaW1hdGlvbi5tYXBUb0xvdHRpZVNwZWMoKTtcclxuXHJcbiAgICAgICAgLy9leHBvcnQgbG90dGllIEpTT05cclxuICAgICAgICBsZXQgbG90dGllSlNPTiA9IGdsb2JhbFZhci5qc01vdmluLnRvSlNPTigpO1xyXG4gICAgICAgIENhbmlzU3BlYy5sb3R0aWVKU09OID0gbG90dGllSlNPTjtcclxuICAgICAgICAvLyBjb25zb2xlLnRpbWVFbmQoJ3JlbmRlcmluZycpO1xyXG4gICAgICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSAnRG9uZSByZW5kZXJpbmcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb3R0aWVKU09OKTtcclxuICAgIH1cclxufVxyXG5cclxuQ2FuaXNTcGVjLmxvdHRpZUpTT04gPSAnJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhbmlzU3BlYzsiLCJpbXBvcnQgeyBDYW5pc1V0aWwsIFZpZXdwb3J0IH0gZnJvbSBcIi4vdXRpbC9VdGlsXCI7XHJcbmltcG9ydCBGYWNldFNwZWMgZnJvbSBcIi4vRmFjZXRTcGVjXCI7XHJcbmltcG9ydCB7IGdsb2JhbFZhciB9IGZyb20gJy4vdXRpbC9HbG9iYWxWYXIuanMnO1xyXG5cclxuY2xhc3MgQ2hhcnRTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlLCBzb3VyY2UpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2hhcnRQcmVQcm9jZXNzaW5nKGNoYXJ0U3BlY3MsIHN0YXR1cykge1xyXG4gICAgICAgIGxldCBpbnB1dFNwZWNzID0gW107XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydFNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFNwZWMgPSBjaGFydFNwZWNzW2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0U3BlYy5zdGFydCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGlucHV0U3BlYy5lbmQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRJZHggPSBwYXJzZUludChpbnB1dFNwZWMuc3RhcnQpLCBlbmRJZHggPSBwYXJzZUludChpbnB1dFNwZWMuZW5kKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmRJZHggPCBzdGFydElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3Jvbmcgc3RhcnQgYW5kIGVuZCBjaGFydCBpbmRleC4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShpbnB1dFNwZWNzKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBCbG9ja3MgPSBpbnB1dFNwZWMuc291cmNlLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0TmFtZSA9IHR5cGVvZiBpbnB1dFNwZWMuaWQgPT09ICd1bmRlZmluZWQnID8gdG1wQmxvY2tzW3RtcEJsb2Nrcy5sZW5ndGggLSAxXSA6IGlucHV0U3BlYy5pZDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gc3RhcnRJZHg7IGogPD0gZW5kSWR4OyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTcGVjcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogY2hhcnROYW1lICsgaixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic291cmNlXCI6IGlucHV0U3BlYy5zb3VyY2UgKyBqICsgJy5kc3ZnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3BlY3MucHVzaChpbnB1dFNwZWMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbaW5wdXRTcGVjcywgaGFzRXJyb3JdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsb2FkQ2hhcnRzKGNoYXJ0U3BlY3MsIGZhY2V0LCBzdGF0dXMpIHtcclxuICAgICAgICBsZXQgbmFtZUNoYXJ0cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBDaGFydFNwZWMuY2hhcnRzID0gW107XHJcbiAgICAgICAgbGV0IG51bGxDaGFydHMgPSBbXTtcclxuICAgICAgICBsZXQgZGVmYXVsdFdpZHRoID0gMDtcclxuICAgICAgICBsZXQgZGVmYXVsdEhlaWdodCA9IDA7XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydFNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFydFNwZWNzW2ldLnR5cGUgPT09IENoYXJ0U3BlYy5DSEFSVF9VUkwpIHsvL2xvYWQgY2hhcnQgd2l0aCB1cmxcclxuICAgICAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuICAgICAgICAgICAgICAgICAgICBva1N0YXR1cyA9IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID09PSBcImZpbGU6XCIgPyAwIDogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN2Z0NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgY2hhcnRTcGVjc1tpXS5zb3VyY2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9odG1sO2NoYXJzZXQ9dXRmLThcIik7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2VuZChudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSBva1N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBEaXYuaW5uZXJIVE1MID0geGhyLnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBzdmdDb250ZW50ID0gdG1wRGl2LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2aWV3Qm94TnVtcyA9IHN2Z0NvbnRlbnQuZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0V2lkdGggPSBwYXJzZUZsb2F0KHZpZXdCb3hOdW1zWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SGVpZ2h0ID0gcGFyc2VGbG9hdCh2aWV3Qm94TnVtc1szXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0cy5wdXNoKHN2Z0NvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVDaGFydHMuc2V0KGNoYXJ0U3BlY3NbaV0uaWQsIENoYXJ0U3BlYy5jaGFydHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG51bGxDaGFydHMudW5zaGlmdChpKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1wic291cmNlXCI6JyArIGNoYXJ0U3BlY3NbaV0uc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnQ2FuIG5vdCBmaW5kICcgKyBjaGFydFNwZWNzW2ldLnNvdXJjZSArICcgISBQbGVhc2UgY2hlY2sgdGhlIHVybC4nLCBlcnJTcGVjOiAnXCJzb3VyY2VcIjpcIicgKyBjaGFydFNwZWNzW2ldLnNvdXJjZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rlc3QgY2hhcnQgc291cmNlOiAnLCBjaGFydFNwZWNzW2ldLCBjaGFydFNwZWNzW2ldLnNvdXJjZSwgdHlwZW9mIGNoYXJ0U3BlY3NbaV0uc291cmNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgdG1wRGl2LmlubmVySFRNTCA9IGNoYXJ0U3BlY3NbaV0uc291cmNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnQ29udGVudCA9IHRtcERpdi5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgIGxldCB2aWV3Qm94TnVtcyA9IHN2Z0NvbnRlbnQuZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRXaWR0aCA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdEhlaWdodCA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbM10pO1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0cy5wdXNoKHN2Z0NvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgbmFtZUNoYXJ0cy5zZXQoY2hhcnRTcGVjc1tpXS5pZCwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yZW1vdmUgdGhlIGVtcHR5IGNoYXJ0cyBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bGxDaGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY2hhcnRTcGVjcy5zbGljZShudWxsQ2hhcnRzW2ldLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZ2VuZXJhdGUgY2hhcnQgZmFjZXRzXHJcbiAgICAgICAgdHlwZW9mIGZhY2V0ICE9PSAndW5kZWZpbmVkJyA/IENoYXJ0U3BlYy5mYWNldFZpZXdzKG5hbWVDaGFydHMsIGZhY2V0KSA6IHRoaXMudmlld3BvcnQuc2V0Vmlld3BvcnQoZGVmYXVsdFdpZHRoLCBkZWZhdWx0SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVUcmFuc0FuZE1lcmdlKCkge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGRhdHVtTWFya01hcHBpbmcgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIENoYXJ0U3BlYy5jaGFydHNbaV0uc2V0QXR0cmlidXRlKCd0cmFucycsICcwLDAnKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLnJlbW92ZVRyYW5zaXRpb25zKENoYXJ0U3BlYy5jaGFydHNbaV0uY2hpbGRyZW5bMF0sIGRhdHVtTWFya01hcHBpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXR1bU1hcmtBcnIgPSBBcnJheS5mcm9tKGRhdHVtTWFya01hcHBpbmcpLm1hcChpdGVtID0+IGl0ZW1bMV0pO1xyXG4gICAgICAgIGRhdHVtTWFya0Fyci5mb3JFYWNoKG1BcnIgPT4ge1xyXG4gICAgICAgICAgICBtQXJyLmZvckVhY2gobUlkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoYXQubWFya3NXaXRoU2FtZURhdHVtLnNldChtSWQsIG1BcnIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5zdmdDaGFydCA9IENoYXJ0U3BlYy5tZXJnZUNoYXJ0cygpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtZXJnZWQgY2hhcnQ6ICcsIHRoaXMuc3ZnQ2hhcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmYWNldFZpZXdzKG5hbWVDaGFydHMsIGZhY2V0KSB7XHJcbiAgICAgICAgaWYgKGZhY2V0LnZpZXdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGNoYXJ0c1RvQ29tYmluZSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2V0LnZpZXdzWzBdLmZyYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFJlY29yZGVyID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZhY2V0LnZpZXdzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0TmFtZSA9IGZhY2V0LnZpZXdzW2pdLmZyYW1lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWVDaGFydHMuZ2V0KGNoYXJ0TmFtZSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJlY29yZGVyLnB1c2goQ2hhcnRTcGVjLmNoYXJ0c1tuYW1lQ2hhcnRzLmdldChjaGFydE5hbWUpXS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2hhcnQgbmFtZSAnICsgY2hhcnROYW1lICsgJyBpcyB1bmRlZmluZWQgIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0bXBSZWNvcmRlci5sZW5ndGggPT09IGZhY2V0LnZpZXdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0c1RvQ29tYmluZS5wdXNoKHRtcFJlY29yZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDaGFydFNwZWMuY29tYmluZUNoYXJ0cyhmYWNldC50eXBlLCBmYWNldC52aWV3cy5sZW5ndGgsIGNoYXJ0c1RvQ29tYmluZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb21iaW5lQ2hhcnRzKGZhY2V0VHlwZSwgZmFjZXROdW0sIGNoYXJ0c1RvQ29tYmluZSkge1xyXG4gICAgICAgIGxldCByZXN1bHRDaGFydHMgPSBbXSxcclxuICAgICAgICAgICAgY2hhcnRNYXJnaW4gPSAyMCxcclxuICAgICAgICAgICAgb3JpV2lkdGggPSAwLCBvcmlIZWlnaHQgPSAwLFxyXG4gICAgICAgICAgICB3aWR0aEFmdGVyRmFjZXQgPSBvcmlXaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0QWZ0ZXJGYWNldCA9IG9yaUhlaWdodDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0c1RvQ29tYmluZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wQ2hhcnRzID0gY2hhcnRzVG9Db21iaW5lW2ldO1xyXG4gICAgICAgICAgICBvcmlXaWR0aCA9IHBhcnNlRmxvYXQodG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcbiAgICAgICAgICAgIG9yaUhlaWdodCA9IHBhcnNlRmxvYXQodG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpO1xyXG4gICAgICAgICAgICB3aWR0aEFmdGVyRmFjZXQgPSBvcmlXaWR0aDtcclxuICAgICAgICAgICAgaGVpZ2h0QWZ0ZXJGYWNldCA9IG9yaUhlaWdodDtcclxuICAgICAgICAgICAgbGV0IHZpZXdCb3hOdW1zID0gdG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGxldCB2aWV3Qm94VyA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbMl0pO1xyXG4gICAgICAgICAgICBsZXQgdmlld0JveEggPSBwYXJzZUZsb2F0KHZpZXdCb3hOdW1zWzNdKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjaGFydFRyYW5zRm9ybSA9IENhbmlzVXRpbC5nZXRUcmFuc2Zvcm1BdHRycyh0bXBDaGFydHNbMF0uY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICB0bXBDaGFydHNbMF0uY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBjaGFydFRyYW5zRm9ybS50cmFuc051bXNbMF0gKyAnLCcgKyBjaGFydFRyYW5zRm9ybS50cmFuc051bXNbMV0gKyAnKScpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZhY2V0VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGYWNldFNwZWMuZmFjZXRUeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRBZnRlckZhY2V0ICo9IHRtcENoYXJ0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgb3JpSGVpZ2h0ICogdG1wQ2hhcnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgJyArIHZpZXdCb3hXICsgJyAnICsgb3JpSGVpZ2h0ICogdG1wQ2hhcnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZhY2V0U3BlYy5mYWNldFR5cGUuY29sOlxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoQWZ0ZXJGYWNldCAqPSB0bXBDaGFydHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcENoYXJ0c1swXS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgb3JpV2lkdGggKiB0bXBDaGFydHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBDaGFydHNbMF0uc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgb3JpV2lkdGggKiB0bXBDaGFydHMubGVuZ3RoICsgJyAnICsgdmlld0JveEgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRtcENoYXJ0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcENoYXJ0ID0gdG1wQ2hhcnRzW2pdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcE1hcmtzID0gdG1wQ2hhcnQucXVlcnlTZWxlY3RvckFsbCgnLm1hcmsnKTtcclxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0bXBNYXJrcywgKG0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWROdW0gPSBwYXJzZUludChtLmdldEF0dHJpYnV0ZSgnaWQnKS5zdWJzdHJpbmcoNCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG0uc2V0QXR0cmlidXRlKCdpZCcsICdtYXJrJyArIChpZE51bSArIGogKiAxMDAwMDApKTtcclxuICAgICAgICAgICAgICAgICAgICBtLmNsYXNzTGlzdC5hZGQoJ2ZhY2V0JyArIGopO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChqID4gMCkgey8vcHV0IHRoZSBtYXJrcyBpbiB0aGUgZm9sbG93aW5nIGNoYXJ0cyB0byB0aGUgMXN0IGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0Q29udGVudEcgPSB0bXBDaGFydC5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDaGlsZHJlbiA9IGNoYXJ0Q29udGVudEcuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBjaGFydENoaWxkcmVuLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBEb20gPSBjaGFydENoaWxkcmVuW21dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtQXR0cnMgPSBDYW5pc1V0aWwuZ2V0VHJhbnNmb3JtQXR0cnModG1wRG9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmYWNldFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmFjZXRTcGVjLmZhY2V0VHlwZS5yb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgdHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzBdICsgJywnICsgKHRyYW5zZm9ybUF0dHJzLnRyYW5zTnVtc1sxXSArIChvcmlIZWlnaHQgKyBjaGFydE1hcmdpbikgKiBqKSArICcpICcgKyAnc2NhbGUoJyArIHRyYW5zZm9ybUF0dHJzLnNjYWxlTnVtICsgJyknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmFjZXRTcGVjLmZhY2V0VHlwZS5jb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKHRyYW5zZm9ybUF0dHJzLnRyYW5zTnVtc1swXSArIChvcmlXaWR0aCArIGNoYXJ0TWFyZ2luKSAqIGopICsgJywnICsgdHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzFdICsgJykgJyArICdzY2FsZSgnICsgdHJhbnNmb3JtQXR0cnMuc2NhbGVOdW0gKyAnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcENoYXJ0c1swXS5jaGlsZHJlblswXS5hcHBlbmRDaGlsZCh0bXBEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHRDaGFydHMucHVzaCh0bXBDaGFydHNbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBDaGFydFNwZWMuY2hhcnRzID0gcmVzdWx0Q2hhcnRzO1xyXG4gICAgICAgIHRoaXMudmlld3BvcnQuc2V0Vmlld3BvcnQod2lkdGhBZnRlckZhY2V0LCBoZWlnaHRBZnRlckZhY2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWVyZ2VDaGFydHMoKSB7XHJcbiAgICAgICAgbGV0IGFsbE1hcmtzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGxldCBtYXJrU3RhdHVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGxldCBtYXJrVGVtcGxldGVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGxldCBhdHRyTmFtZXMgPSBbJ3gnLCAneScsICdjeCcsICdjeScsICd4MScsICd5MScsICd4MicsICd5MicsICdkJywgJ3InLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3RleHRDb250ZW50JywgJ2ZpbGwnLCAnc3Ryb2tlJywgJ29wYWNpdHknXTtcclxuICAgICAgICBsZXQgbnVsbFN0YXR1cyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXR0ck5hbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIG51bGxTdGF0dXNbYXR0ck5hbWVzW2pdXSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjdXJyZW50IGNoYXJ0cyB0byBtZXJnZTogJywgQ2hhcnRTcGVjLmNoYXJ0cyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wQ2hhcnQgPSBDaGFydFNwZWMuY2hhcnRzW2ldO1xyXG4gICAgICAgICAgICBsZXQgbWFya3MgPSB0bXBDaGFydC5xdWVyeVNlbGVjdG9yQWxsKCcubWFyaycpO1xyXG4gICAgICAgICAgICBpZiAobWFya3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG1hcmtzLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWQgPSBtLmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsTWFya3MuYWRkKG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXR1c09iaiA9IHt9Oy8vc3RhdHVzIG9mIG9uZSBtYXJrIGluIGNoYXJ0IGlcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF0dHJOYW1lcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck5hbWVzW2pdID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbYXR0ck5hbWVzW2pdXSA9IG0uaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqW2F0dHJOYW1lc1tqXV0gPSBtLmdldEF0dHJpYnV0ZShhdHRyTmFtZXNbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFya1N0YXR1cy5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5zZXQobWFya0lkLCBuZXcgQXJyYXkoQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGgpLmZpbGwobnVsbFN0YXR1cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5nZXQobWFya0lkKVtpXSA9IHN0YXR1c09iajtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrVGVtcGxldGVzLnNldChtYXJrSWQsIG0ub3V0ZXJIVE1MKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtYXJrIHN0YXR1cyB1c2VkIHRvIGNoZWNrIGNoYW5nZWQgYXR0cnM6ICcsIG1hcmtTdGF0dXMpO1xyXG5cclxuICAgICAgICAvL2ZpbmQgdGhlIGNoYW5nZWQgYXR0cmlidXRlc1xyXG4gICAgICAgIENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ck5hbWVzQ29weSA9IENhbmlzVXRpbC5kZWVwQ2xvbmUoYXR0ck5hbWVzKTtcclxuICAgICAgICBtYXJrU3RhdHVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXR1c0FyciwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0ck5hbWVzQ29weS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBhcmVTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXR1c0Fyci5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdHVzQXJyW2pdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlU3RhdHVzID0gc3RhdHVzQXJyW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXR1c0Fyci5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdHVzQXJyW2pdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzQXJyW2pdW2F0dHJOYW1lc0NvcHlbaV1dICE9PSBjb21wYXJlU3RhdHVzW2F0dHJOYW1lc0NvcHlbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLnB1c2goYXR0ck5hbWVzQ29weVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lc0NvcHkuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy9maW5kIGRpZmZlcmVudCBjbWRzIGlmIHRoZXJlIGlzIGQgaW4gY2hhbmdlZEF0dHJzXHJcbiAgICAgICAgbGV0IGRpZmZDbWRzID0gbmV3IE1hcCgpOy8va2V5OmNtZCBuYW1lLCB2YWx1ZToge2NtZElkeCwgZGlmZkF0dHJJZHhzfVxyXG4gICAgICAgIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmluZGV4T2YoJ2QnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGRpZmZDbWRzID0gQ2FuaXNVdGlsLmZpbmREaWZmQ21kcyhtYXJrU3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZWQgYXR0cmlidXRlczogJywgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycyk7XHJcblxyXG4gICAgICAgIC8vYWRkIG1pc3NpbmcgbWFya3MgdG8gZWFjaCBjaGFydFxyXG4gICAgICAgIGFsbE1hcmtzID0gQXJyYXkuZnJvbShhbGxNYXJrcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWxsTWFya3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChDaGFydFNwZWMuY2hhcnRzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgYWxsTWFya3Nbal0pLmxlbmd0aCA9PT0gMCkgey8vY2hhcnQgaSBkb2VzIG5vdCBoYXZlIG1hcmsgalxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrU3RyID0gbWFya1RlbXBsZXRlcy5nZXQoYWxsTWFya3Nbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBEaXYuaW5uZXJIVE1MID0gbWFya1N0cjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWFyayA9IHRtcERpdi5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhdHVzT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgdGhlIGNoYW5nZWQgYXR0cmlidXRlcyB0byB0aGUgaW5pdCBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ3knICYmIENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMuaW5kZXhPZignaGVpZ2h0JykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtZID0gIW1hcmsuZ2V0QXR0cmlidXRlKCd5JykgPyAwIDogcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgneScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSGVpZ2h0ID0gIW1hcmsuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSA/IDAgOiBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0VmFsdWUgPSBtYXJrWSArIG1hcmtIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZSgneScsIHRhcmdldFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09iai55ID0gdGFyZ2V0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ2QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0RDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrLmdldEF0dHJpYnV0ZSgnZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0RCA9IENhbmlzVXRpbC5zZXRQYXRoRFZhbHVlKG1hcmsuZ2V0QXR0cmlidXRlKCdkJyksIHRydWUsIDAsIDAsIGRpZmZDbWRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKCdkJywgcmVzdWx0RCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmouZCA9IHJlc3VsdEQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ3RleHRDb250ZW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09iai50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICdmaWxsJyB8fCBDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAnc3Ryb2tlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXJrLmdldEF0dHJpYnV0ZShDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZShDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdLCAnI0ZGRkZGRicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gbWFyay5nZXRBdHRyaWJ1dGUoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWyd4JywgJ3knLCAnY3gnLCAnY3knLCAneDEnLCAneTEnLCAneDInLCAneTInXS5pbmNsdWRlcyhDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAneDInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKCd4MicsIHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ3gxJykpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqWyd4MiddID0gcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgneDEnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAneTInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKCd5MicsIHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ3kxJykpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqWyd5MiddID0gcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgneTEnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZShDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZShDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYXJrU3RyID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNTAwXCIgaGVpZ2h0PVwiNTAwXCI+JyArIG1hcmsub3V0ZXJIVE1MICsgJzwvc3ZnPic7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ZnTWFyayA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcobWFya1N0ciwgXCJpbWFnZS9zdmcreG1sXCIpLmxhc3RDaGlsZC5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzW2ldLnF1ZXJ5U2VsZWN0b3IoJyNjaGFydENvbnRlbnQnKS5hcHBlbmRDaGlsZChzdmdNYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrU3RhdHVzLmdldChhbGxNYXJrc1tqXSlbaV0gPSBzdGF0dXNPYmo7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hhbmdlZCBhdHRycyB0byByZWNvcmVkIGluIGRhdGEgdHJhbnM6ICcsIENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMpO1xyXG5cclxuICAgICAgICAvL3NldCBkYXRhLXRyYW5zIG9mIGNoYXJ0IDBcclxuICAgICAgICBDaGFydFNwZWMuZGF0YVRyYW5zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWxsTWFya3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IHN0YXR1c0FyciA9IG1hcmtTdGF0dXMuZ2V0KGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgbGV0IGRhdGFUcmFuc0FyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgc2kgPSAwOyBzaSA8IHN0YXR1c0Fyci5sZW5ndGg7IHNpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBTdGF0dXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICdyJ10uaW5jbHVkZXMoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wU3RhdHVzW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gMTAwICogc3RhdHVzQXJyW3NpXVtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSAvIHN0YXR1c0FyclswXVtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBTdGF0dXNbQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gPSBzdGF0dXNBcnJbc2ldW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRhdGFUcmFuc0Fyci5wdXNoKHRtcFN0YXR1cyk7Ly9tYXJrIHN0YXR1cyBpbiBjaGFydHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2NvcHkgdGhlIHN0YXR1cyBvZiB0aGUgMXN0IGNoYXJ0IGFzIHRoZSBpbml0IHN0YXR1c1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuZGF0YVRyYW5zLnNldChhbGxNYXJrc1tqXSwgZGF0YVRyYW5zQXJyKTtcclxuICAgICAgICAgICAgbGV0IG1hcmtEb20gPSBDaGFydFNwZWMuY2hhcnRzWzBdLnF1ZXJ5U2VsZWN0b3IoJyMnICsgYWxsTWFya3Nbal0pO1xyXG4gICAgICAgICAgICBtYXJrRG9tLnNldEF0dHJpYnV0ZSgnZGF0YS10cmFuc2l0aW9uJywgSlNPTi5zdHJpbmdpZnkoeyBcImRhdGFUcmFuc1wiOiBkYXRhVHJhbnNBcnIgfSwgbnVsbCwgJ1xcdCcpKVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbWVyZ2VkIG1hcms6ICcsIG1hcmtEb20pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIENoYXJ0U3BlYy5jaGFydHNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEJCb3hlcygpIHtcclxuICAgICAgICAvLyBsZXQgc3ZnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgbGV0IHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aXNDaGFydCcpO1xyXG4gICAgICAgIGxldCBtYXJrcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdbaWRePVwibWFya1wiXScpO1xyXG4gICAgICAgIGxldCBiQm94ZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgaWYgKG1hcmtzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG1hcmtzLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hcmtJZCA9IG0uZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBiQm94O1xyXG4gICAgICAgICAgICAgICAgaWYgKG0udGFnTmFtZSA9PT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYkJveCA9IG0uZ2V0QkJveCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJCb3gud2lkdGggKz0gMTA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJCb3ggPSBtLmdldEJCb3goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJCb3hlcy5zZXQobWFya0lkLCBiQm94KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJCb3hlcztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlVHJhbnNpdGlvbnModCwgZGF0dW1NYXJrTWFwcGluZykge1xyXG4gICAgICAgIC8vZXh0cmFjdCBmaWxsLCBzdHJva2UgYW5kIHN0cm9rZS13aWR0aCBvdXRcclxuICAgICAgICBpZiAodHlwZW9mIHQuc3R5bGUuZmlsbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdC5zdHlsZS5maWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdC5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXQuZ2V0QXR0cmlidXRlKCdmaWxsJykpIHtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdmaWxsJywgdC5zdHlsZS5maWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnN0eWxlLmZpbGwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHQuc3R5bGUuc3Ryb2tlICE9PSAndW5kZWZpbmVkJyAmJiB0LnN0eWxlLnN0cm9rZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQuZ2V0QXR0cmlidXRlKCdzdHJva2UnKSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXQuZ2V0QXR0cmlidXRlKCdzdHJva2UnKSkge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHQuc3R5bGUuc3Ryb2tlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnN0eWxlLnN0cm9rZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdC5zdHlsZS5zdHJva2VXaWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgdC5zdHlsZS5zdHJva2VXaWR0aCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQuZ2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnKSA9PT0gJ3VuZGVmaW5lZCcgfHwgIXQuZ2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnKSkge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHQuc3R5bGUuc3Ryb2tlV2lkdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc3R5bGUuc3Ryb2tlV2lkdGggPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ3N0cm9rZScpID09PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRyID0gdC5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpO1xyXG4gICAgICAgIGxldCBwYXJlbnRUcmFucyA9IHQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ3RyYW5zJykuc3BsaXQoJywnKTtcclxuICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmsnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhRGF0dW1BdHRyVmFsdWVTdHIgPSB0LmdldEF0dHJpYnV0ZSgnZGF0YS1kYXR1bScpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YURhdHVtQXR0clZhbHVlID0gSlNPTi5wYXJzZShkYXRhRGF0dW1BdHRyVmFsdWVTdHIpO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhRGF0dW1BdHRyVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhRGF0dW1BdHRyVmFsdWUgPSBkYXRhRGF0dW1BdHRyVmFsdWVbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9nZXQgbXNoYXBlIHVzaW5nIHRoZSB0eXBlIGluIGNsYXNzIGxpa2UgU2hhcGUxLCBTeW1ib2wxXHJcbiAgICAgICAgICAgIGNvbnN0IHRDbGFzcyA9IHQuZ2V0QXR0cmlidXRlKCdjbGFzcycpO1xyXG4gICAgICAgICAgICBjb25zdCBibG9ja3MgPSB0Q2xhc3Muc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgbGV0IHNoYXBlTmFtZSA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYmxvY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2tzW2ldID09PSAnbWFyaycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZU5hbWUgPSBibG9ja3NbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZVsnbVNoYXBlJ10gPSBzaGFwZU5hbWU7XHJcbiAgICAgICAgICAgIGxldCBpc05vbkRhdGFNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIEFycmF5LmZyb20odC5jbGFzc0xpc3QpLmZvckVhY2goKGMpID0+IHtcclxuICAgICAgICAgICAgICAgIGMgPSBjLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYy5pbmNsdWRlcygnYXhpcycpIHx8IGMuaW5jbHVkZXMoJ2xlZ2VuZCcpIHx8IGMuaW5jbHVkZXMoJ3RpdGxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc05vbkRhdGFNYXJrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgY29uc3QgdG1wSWQgPSB0LmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuICAgICAgICAgICAgaWYgKGlzTm9uRGF0YU1hcmspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9uRGF0YU1hcmtEYXR1bS5zZXQodG1wSWQsIGRhdGFEYXR1bUF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFNYXJrRGF0dW0uc2V0KHRtcElkLCBkYXRhRGF0dW1BdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHB1cmVEYXR1bSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YURhdHVtQXR0clZhbHVlKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdfJykgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHVyZURhdHVtW2tleV0gPSBkYXRhRGF0dW1BdHRyVmFsdWVba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgcHVyZURhdHVtLm1TaGFwZSA9ICcnOy8vaWdub3JlIHRoZSBkaWZmZXJlbmNlIG9mIHNoYXBlLCB0aGlzIGlzIGZvciBhbGlnbm1lbnRcclxuICAgICAgICAgICAgICAgIGxldCBwdXJlRGF0dW1TdHIgPSBKU09OLnN0cmluZ2lmeShwdXJlRGF0dW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXR1bU1hcmtNYXBwaW5nLmdldChwdXJlRGF0dW1TdHIpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdHVtTWFya01hcHBpbmcuc2V0KHB1cmVEYXR1bVN0ciwgW10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGF0dW1NYXJrTWFwcGluZy5nZXQocHVyZURhdHVtU3RyKS5wdXNoKHRtcElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdheGlzJykgfHwgdC5jbGFzc0xpc3QuY29udGFpbnMoJ2xlZ2VuZCcpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcERhdGFEYXR1bSA9IEpTT04ucGFyc2UodC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0dW0nKSk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRtcERhdGFEYXR1bSkpIHtcclxuICAgICAgICAgICAgICAgIHRtcERhdGFEYXR1bSA9IHRtcERhdGFEYXR1bVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ2F4aXMnKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNoYXJ0VW5kZXJzdGFuZGluZ1t0bXBEYXRhRGF0dW0ucG9zaXRpb25dID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bS5wb3NpdGlvbl0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bS5wb3NpdGlvbl0ucHVzaCgncG9zaXRpb24nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0LmNsYXNzTGlzdC5jb250YWlucygnbGVnZW5kJykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYW5uZWwgaW4gdG1wRGF0YURhdHVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNoYXJ0VW5kZXJzdGFuZGluZ1t0bXBEYXRhRGF0dW1bY2hhbm5lbF1dID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0VW5kZXJzdGFuZGluZ1t0bXBEYXRhRGF0dW1bY2hhbm5lbF1dID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bVtjaGFubmVsXV0ucHVzaChjaGFubmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRyKSB7XHJcbiAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgvdHJhbnNsYXRlfHNjYWxlfHJvdGF0ZXxcXHMvZywgKG0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtID09PSAnICcgPyAnJyA6ICdAJyArIG07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0ciA9IHRyLnJlcGxhY2UoLyheQCopfChAKiQpL2csICcnKS5zcGxpdCgnQCcpO1xyXG4gICAgICAgICAgICBsZXQgc2NhbGVTdHIgPSAnJywgdHJhbnNTdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyW2ldLmluZGV4T2YoJ3RyYW5zbGF0ZScpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc1N0ciA9IHRyW2ldO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cltpXS5pbmRleE9mKCdzY2FsZScpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZVN0ciA9IHRyW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0cmFuc1Bvc2lTdHIgPSB0cmFuc1N0ci5yZXBsYWNlKC90cmFuc2xhdGVcXCh8IHxcXCkvZywgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBzY2FsZVN0cik7XHJcbiAgICAgICAgICAgIGlmICh0LnRhZ05hbWUgPT09ICdnJykge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zJywgKHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzBdKSArIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMF0pKSArICcsJyArIChwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clsxXSkgKyBwYXJzZUZsb2F0KHBhcmVudFRyYW5zWzFdKSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgQ2FuaXNVdGlsLnRyYW5zU2hhcGUodCwgcGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMF0pICsgcGFyc2VGbG9hdChwYXJlbnRUcmFuc1swXSksIHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzFdKSArIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0LnRhZ05hbWUgPT09ICdnJykge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zJywgcGFyZW50VHJhbnMuam9pbignLCcpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIENhbmlzVXRpbC50cmFuc1NoYXBlKHQsIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMF0pLCBwYXJzZUZsb2F0KHBhcmVudFRyYW5zWzFdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5yZW1vdmVUcmFuc2l0aW9ucyh0LmNoaWxkcmVuW2ldLCBkYXR1bU1hcmtNYXBwaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYWRkTG90dGllTWFya0xheWVycyh0KSB7XHJcbiAgICAgICAgaWYgKHQudGFnTmFtZSAhPT0gJ2cnICYmIHQudGFnTmFtZSAhPT0gJ3N2ZycpIHtcclxuICAgICAgICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYXJrJykpIHtcclxuICAgICAgICAgICAgICAgIGdsb2JhbFZhci5tYXJrTGF5ZXJzLnNldCh0LmdldEF0dHJpYnV0ZSgnaWQnKSwgZ2xvYmFsVmFyLmpzTW92aW4uYWRkTGF5ZXIodCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uYWRkTGF5ZXIodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmFkZExvdHRpZU1hcmtMYXllcnModC5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQ2hhcnRTcGVjLkNIQVJUX1VSTCA9ICd1cmwnO1xyXG5DaGFydFNwZWMuQ0hBUlRfQ09OVEVOVCA9ICdjb250ZW50JztcclxuQ2hhcnRTcGVjLmNoYXJ0cyA9IFtdO1xyXG5DaGFydFNwZWMuYXR0cnMgPSBbJ2lkJywgJ3NvdXJjZScsICdzdGFydCcsICdlbmQnXTtcclxuQ2hhcnRTcGVjLmNoYW5nZWRBdHRycyA9IFtdO1xyXG5DaGFydFNwZWMudmlld3BvcnQgPSBuZXcgVmlld3BvcnQoKTtcclxuQ2hhcnRTcGVjLmRhdGFUcmFucyA9IG5ldyBNYXAoKTtcclxuQ2hhcnRTcGVjLnN2Z0NoYXJ0O1xyXG5DaGFydFNwZWMuY2hhcnRVbmRlcnN0YW5kaW5nID0geyBtU2hhcGU6IFsnc2hhcGUnXSB9O1xyXG5DaGFydFNwZWMuZGF0YU1hcmtEYXR1bSA9IG5ldyBNYXAoKTtcclxuQ2hhcnRTcGVjLm1hcmtzV2l0aFNhbWVEYXR1bSA9IG5ldyBNYXAoKTtcclxuQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0gPSBuZXcgTWFwKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaGFydFNwZWM7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5FYXNpbmdGYWN0b3J5ID0gdm9pZCAwO1xyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XHJcblxyXG4vLyBwYXJhbWV0ZXJzIGV4dHJhY3RlZCBmcm9tIGh0dHBzOi8vZWFzaW5ncy5uZXQvXHJcbnZhciBFYXNpbmdGYWN0b3J5ID1cclxuLyojX19QVVJFX18qL1xyXG5mdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gRWFzaW5nRmFjdG9yeSgpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFYXNpbmdGYWN0b3J5KTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhFYXNpbmdGYWN0b3J5LCBudWxsLCBbe1xyXG4gICAga2V5OiBcImxpbmVhclwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVhcigpIHtcclxuICAgICAgcmV0dXJuIFtbWzFdLCBbMV1dLCBbWzBdLCBbMF1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluU2luZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJblNpbmUoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjQ3XSwgWzBdXSwgW1swLjc0NV0sIFswLjcxNV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFNpbmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0U2luZSgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMzldLCBbMC41NzVdXSwgW1swLjU2NV0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRTaW5lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0U2luZSgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuNDQ1XSwgWzAuMDVdXSwgW1swLjU1XSwgWzAuOTVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1YWRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5RdWFkKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC41NV0sIFswLjA4NV1dLCBbWzAuNjhdLCBbMC41M11dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1YWRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0UXVhZCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMjVdLCBbMC40Nl1dLCBbWzAuNDVdLCBbMC45NF1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0UXVhZFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjQ1NV0sIFswLjAzXV0sIFtbMC41MTVdLCBbMC45NTVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbkN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluQ3ViaWMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjU1XSwgWzAuMDU1XV0sIFtbMC42NzVdLCBbMC4xOV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dEN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dEN1YmljKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4yMTVdLCBbMC42MV1dLCBbWzAuMzU1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dEN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0Q3ViaWMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjY0NV0sIFswLjA0NV1dLCBbWzAuMzU1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1YXJ0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluUXVhcnQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjg5NV0sIFswLjAzXV0sIFtbMC42ODVdLCBbMC4yMl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1YXJ0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFF1YXJ0KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4xNjVdLCBbMC44NF1dLCBbWzAuNDRdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0UXVhcnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuNzddLCBbMF1dLCBbWzAuMTc1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1aW50XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluUXVpbnQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjc1NV0sIFswLjA1XV0sIFtbMC44NTVdLCBbMC4wNl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1aW50XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFF1aW50KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4yM10sIFsxXV0sIFtbMC4zMl0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRRdWludFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dFF1aW50KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC44Nl0sIFswXV0sIFtbMC4wN10sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5FeHBvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluRXhwbygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuOTVdLCBbMC4wNV1dLCBbWzAuNzk1XSwgWzAuMDM1XV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlT3V0RXhwb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRFeHBvKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4xOV0sIFsxXV0sIFtbMC4yMl0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRFeHBvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0RXhwbygpIHtcclxuICAgICAgcmV0dXJuIFtbWzFdLCBbMF1dLCBbWzBdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluQ2lyY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkNpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjZdLCBbMC4wNF1dLCBbWzAuOThdLCBbMC4zMzVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRDaXJjXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dENpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjA3NV0sIFswLjgyXV0sIFtbMC4xNjVdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0Q2lyY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dENpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjc4NV0sIFswLjEzNV1dLCBbWzAuMTVdLCBbMC44Nl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluQmFja1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkJhY2soKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjZdLCBbLTAuMjhdXSwgW1swLjczNV0sIFswLjA0NV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dEJhY2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0QmFjaygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMTc1XSwgWzAuODg1XV0sIFtbMC4zMl0sIFsxLjI3NV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0QmFja1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dEJhY2soKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjY4XSwgWy0wLjU1XV0sIFtbMC4yNjVdLCBbMS41NV1dXTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBFYXNpbmdGYWN0b3J5O1xyXG59KCk7XHJcblxyXG5leHBvcnRzLkVhc2luZ0ZhY3RvcnkgPSBFYXNpbmdGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWxZWE5wYm1jdWRITWlYU3dpYm1GdFpYTWlPbHNpUldGemFXNW5SbUZqZEc5eWVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096dEJRVUZCTzBsQlNXRkJMR0U3T3pzN096czdPenMyUWtGRGRVSTdRVUZETlVJc1lVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFVUXNSVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGRUxFVkJRV0VzUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCUkN4RlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRV0lzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGblFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhMUVVGRUxFTkJRVllzUTBGQmFFSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhMUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhKUVVGRUxFTkJRVlFzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhKUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZ0UWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eEpRVUZFTEVOQlFWUXNRMEZCYmtJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eExRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnhRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUVZZc1EwRkJja0lzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRm5RaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUVZZc1EwRkJhRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRm5RaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJhRUlzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdFFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhMUVVGRUxFTkJRVllzUTBGQmJrSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFVkJRVTBzUTBGQlF5eERRVUZFTEVOQlFVNHNRMEZCUkN4RlFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRUxFTkJRVVFzUlVGQlRTeERRVUZETEVOQlFVUXNRMEZCVGl4RFFVRmlMRU5CUVZBN1FVRkRTRHM3TzJsRFFVVnRRenRCUVVOb1F5eGhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVRc1EwRkJSQ3hGUVVGUkxFTkJRVU1zU1VGQlJDeERRVUZTTEVOQlFVUXNSVUZCYTBJc1EwRkJReXhEUVVGRExFbEJRVVFzUTBGQlJDeEZRVUZUTEVOQlFVTXNTMEZCUkN4RFFVRlVMRU5CUVd4Q0xFTkJRVkE3UVVGRFNEczdPMnREUVVWdlF6dEJRVU5xUXl4aFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVVFzUTBGQlJDeEZRVUZWTEVOQlFVTXNTVUZCUkN4RFFVRldMRU5CUVVRc1JVRkJiMElzUTBGQlF5eERRVUZETEV0QlFVUXNRMEZCUkN4RlFVRlZMRU5CUVVNc1EwRkJSQ3hEUVVGV0xFTkJRWEJDTEVOQlFWQTdRVUZEU0RzN08yOURRVVZ6UXp0QlFVTnVReXhoUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVUXNRMEZCUkN4RlFVRlZMRU5CUVVNc1MwRkJSQ3hEUVVGV0xFTkJRVVFzUlVGQmNVSXNRMEZCUXl4RFFVRkRMRWxCUVVRc1EwRkJSQ3hGUVVGVExFTkJRVU1zU1VGQlJDeERRVUZVTEVOQlFYSkNMRU5CUVZBN1FVRkRTRHM3TzJsRFFVVnRRenRCUVVOb1F5eGhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVRc1EwRkJSQ3hGUVVGUkxFTkJRVU1zUTBGQlF5eEpRVUZHTEVOQlFWSXNRMEZCUkN4RlFVRnRRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJia0lzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGeFFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhMUVVGRUxFTkJRVlFzUTBGQmNrSXNRMEZCVUR0QlFVTklPenM3YjBOQlJYTkRPMEZCUTI1RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlZDeERRVUZFTEVWQlFXOUNMRU5CUVVNc1EwRkJReXhMUVVGRUxFTkJRVVFzUlVGQlZTeERRVUZETEVsQlFVUXNRMEZCVml4RFFVRndRaXhEUVVGUU8wRkJRMGdpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QndZWEpoYldWMFpYSnpJR1Y0ZEhKaFkzUmxaQ0JtY205dElHaDBkSEJ6T2k4dlpXRnphVzVuY3k1dVpYUXZYRzVjYm1WNGNHOXlkQ0IwZVhCbElFVmhjMmx1WjBaMWJtTjBhVzl1SUQwZ2JuVnRZbVZ5VzExYlhWdGRYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkZZWE5wYm1kR1lXTjBiM0o1SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdiR2x1WldGeUtDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekZkTENCYk1WMWRMQ0JiV3pCZExDQmJNRjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1VGFXNWxLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU5EZGRMQ0JiTUYxZExDQmJXekF1TnpRMVhTd2dXekF1TnpFMVhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVlBkWFJUYVc1bEtDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TXpsZExDQmJNQzQxTnpWZFhTd2dXMXN3TGpVMk5WMHNJRnN4WFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrOTFkRk5wYm1Vb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQwTkRWZExDQmJNQzR3TlYxZExDQmJXekF1TlRWZExDQmJNQzQ1TlYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVJkV0ZrS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOVFZkTENCYk1DNHdPRFZkWFN3Z1cxc3dMalk0WFN3Z1d6QXVOVE5kWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRGRjFZV1FvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNHlOVjBzSUZzd0xqUTJYVjBzSUZ0Yk1DNDBOVjBzSUZzd0xqazBYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZKYms5MWRGRjFZV1FvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDBOVFZkTENCYk1DNHdNMTFkTENCYld6QXVOVEUxWFN3Z1d6QXVPVFUxWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrTjFZbWxqS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOVFZkTENCYk1DNHdOVFZkWFN3Z1cxc3dMalkzTlYwc0lGc3dMakU1WFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWUGRYUkRkV0pwWXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMakl4TlYwc0lGc3dMall4WFYwc0lGdGJNQzR6TlRWZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkRkV0pwWXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMalkwTlYwc0lGc3dMakEwTlYxZExDQmJXekF1TXpVMVhTd2dXekZkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlVsdVVYVmhjblFvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDRPVFZkTENCYk1DNHdNMTFkTENCYld6QXVOamcxWFN3Z1d6QXVNakpkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRGRjFZWEowS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVNVFkxWFN3Z1d6QXVPRFJkWFN3Z1cxc3dMalEwWFN3Z1d6RmRYVjFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ1pXRnpaVWx1VDNWMFVYVmhjblFvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDNOMTBzSUZzd1hWMHNJRnRiTUM0eE56VmRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVJkV2x1ZENncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMamMxTlYwc0lGc3dMakExWFYwc0lGdGJNQzQ0TlRWZExDQmJNQzR3TmwxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFQzVjBVWFZwYm5Rb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzR5TTEwc0lGc3hYVjBzSUZ0Yk1DNHpNbDBzSUZzeFhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpiazkxZEZGMWFXNTBLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU9EWmRMQ0JiTUYxZExDQmJXekF1TURkZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1RmVIQnZLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU9UVmRMQ0JiTUM0d05WMWRMQ0JiV3pBdU56azFYU3dnV3pBdU1ETTFYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZQZFhSRmVIQnZLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU1UbGRMQ0JiTVYxZExDQmJXekF1TWpKZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkZlSEJ2S0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6RmRMQ0JiTUYxZExDQmJXekJkTENCYk1WMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxTVzVEYVhKaktDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1Tmwwc0lGc3dMakEwWFYwc0lGdGJNQzQ1T0Ywc0lGc3dMak16TlYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFQzVjBRMmx5WXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMakEzTlYwc0lGc3dMamd5WFYwc0lGdGJNQzR4TmpWZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkRhWEpqS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOemcxWFN3Z1d6QXVNVE0xWFYwc0lGdGJNQzR4TlYwc0lGc3dMamcyWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrSmhZMnNvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDJYU3dnV3kwd0xqSTRYVjBzSUZ0Yk1DNDNNelZkTENCYk1DNHdORFZkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRFSmhZMnNvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNHhOelZkTENCYk1DNDRPRFZkWFN3Z1cxc3dMak15WFN3Z1d6RXVNamMxWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrOTFkRUpoWTJzb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQyT0Ywc0lGc3RNQzQxTlYxZExDQmJXekF1TWpZMVhTd2dXekV1TlRWZFhWMWNiaUFnSUNCOVhHNTlJbDE5IiwiLy8gdjEuMCBleHBvcnRlZCBqdXN0IHRoZSBwYXJzZXIgZnVuY3Rpb24uIFRvIG1haW50YWluIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LFxuLy8gd2UgZXhwb3J0IGFkZGl0aW9uYWwgbmFtZWQgZmVhdHVyZXMgYXMgcHJvcGVydGllcyBvZiB0aGF0IGZ1bmN0aW9uLlxudmFyIHBhcnNlckZ1bmN0aW9uID0gcmVxdWlyZSgnLi9wYXJzZXIuanMnKS5wYXJzZTtcbnBhcnNlckZ1bmN0aW9uLnBhcnNlU1ZHID0gcGFyc2VyRnVuY3Rpb247XG5wYXJzZXJGdW5jdGlvbi5tYWtlQWJzb2x1dGUgPSBtYWtlU1ZHUGF0aENvbW1hbmRzQWJzb2x1dGU7XG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlckZ1bmN0aW9uO1xuXG5mdW5jdGlvbiBtYWtlU1ZHUGF0aENvbW1hbmRzQWJzb2x1dGUoY29tbWFuZHMpIHtcblx0dmFyIHN1YnBhdGhTdGFydCwgcHJldkNtZD17eDowLHk6MH07XG5cdHZhciBhdHRyID0ge3g6J3gwJyx5Oid5MCcseDE6J3gwJyx5MToneTAnLHgyOid4MCcseTI6J3kwJ307XG5cdGNvbW1hbmRzLmZvckVhY2goZnVuY3Rpb24oY21kKSB7XG5cdFx0aWYgKGNtZC5jb21tYW5kPT09J21vdmV0bycpIHN1YnBhdGhTdGFydD1jbWQ7XG5cdFx0Y21kLngwPXByZXZDbWQueDsgY21kLnkwPXByZXZDbWQueTtcblx0XHRmb3IgKHZhciBhIGluIGF0dHIpIGlmIChhIGluIGNtZCkgY21kW2FdICs9IGNtZC5yZWxhdGl2ZSA/IGNtZFthdHRyW2FdXSA6IDA7XG5cdFx0aWYgKCEoJ3gnIGluIGNtZCkpIGNtZC54ID0gcHJldkNtZC54OyAvLyBWXG5cdFx0aWYgKCEoJ3knIGluIGNtZCkpIGNtZC55ID0gcHJldkNtZC55OyAvLyBYXG5cdFx0Y21kLnJlbGF0aXZlID0gZmFsc2U7XG5cdFx0Y21kLmNvZGUgPSBjbWQuY29kZS50b1VwcGVyQ2FzZSgpO1xuXHRcdGlmIChjbWQuY29tbWFuZD09J2Nsb3NlcGF0aCcpIHtcblx0XHRcdGNtZC54ID0gc3VicGF0aFN0YXJ0Lng7XG5cdFx0XHRjbWQueSA9IHN1YnBhdGhTdGFydC55O1xuXHRcdH1cblx0XHRwcmV2Q21kID0gY21kO1xuXHR9KTtcblx0cmV0dXJuIGNvbW1hbmRzO1xufVxuIiwiY2xhc3MgRmFjZXRTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHZpZXdzKSB7XHJcbiAgICAgICAgdGhpcy5fdHlwZTtcclxuICAgICAgICB0aGlzLl92aWV3cztcclxuICAgICAgICB0aGlzLnZpZXdzID0gdmlld3M7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdHlwZSh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoRmFjZXRTcGVjLmZhY2V0VHlwZSkuaW5jbHVkZXModHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd0aGUgZmFjZXQgdHlwZSBoYXMgdG8gYmUgb25lIG9mIFwicm93XCIgb3IgXCJjb2x1bW5cIiwgc2V0dGluZyB0byBkZWZhdWx0IHZhbHVlIFwiY29sdW1uXCIuJylcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSBGYWNldFNwZWMuZmFjZXRUeXBlLmNvbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmlld3Modmlld3MpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZpZXdzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvL3RyYW5zbGF0ZSBcInJhbmdlXCIgdG8gXCJmcmFtZXNcIlxyXG4gICAgICAgICAgICBsZXQgZnJhbWVWaWV3cyA9IHZpZXdzLm1hcCh2aWV3ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygdmlldy5yYW5nZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHJhbmdlIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZWdlbmQgPSBuZXcgUmVnRXhwKFwiXFxcXGQrJFwiKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlU3RhcnROYW1lID0gdmlldy5yYW5nZVswXS5yZXBsYWNlKHJlZ2VuZCwgJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVuZE5hbWUgPSB2aWV3LnJhbmdlWzFdLnJlcGxhY2UocmVnZW5kLCAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSB2aWV3LnJhbmdlWzBdLm1hdGNoKHJlZ2VuZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gdmlldy5yYW5nZVsxXS5tYXRjaChyZWdlbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0TmFtZSA9PT0gcmFuZ2VFbmROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuZnJhbWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSByYW5nZVN0YXJ0OyBpIDw9IHJhbmdlRW5kOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuZnJhbWVzLnB1c2gocmFuZ2VTdGFydE5hbWUgKyBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuZnJhbWVzID0gW3ZpZXcucmFuZ2VbMF0sIHZpZXcucmFuZ2VbMV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3JhbmdlIHN0YXJ0IGFuZCBlbmQgbWlzbWF0Y2gnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlldztcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vZmluZCB0aGUgbWF4IG51bWJlciBvZiBjaGFydHMgaW4gdmlld3NcclxuICAgICAgICAgICAgbGV0IG1heExlbiA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhbWVWaWV3cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyYW1lVmlld3NbaV0uZnJhbWVzLmxlbmd0aCA+IG1heExlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heExlbiA9IGZyYW1lVmlld3NbaV0uZnJhbWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lVmlld3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGggPCBtYXhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdEl0ZW0gPSBmcmFtZVZpZXdzW2ldLmZyYW1lc1tmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtRGlmZiA9IG1heExlbiAtIGZyYW1lVmlld3NbaV0uZnJhbWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobnVtRGlmZiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVWaWV3c1tpXS5mcmFtZXMucHVzaChsYXN0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bURpZmYtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdmlld3MgPSBmcmFtZVZpZXdzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmlld3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdzO1xyXG4gICAgfVxyXG59XHJcblxyXG5GYWNldFNwZWMuZmFjZXRUeXBlID0ge1xyXG4gICAgcm93OiAncm93JyxcclxuICAgIGNvbDogJ2NvbHVtbidcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmFjZXRTcGVjOyIsImltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCB7IGdsb2JhbFZhciB9IGZyb20gJy4vdXRpbC9HbG9iYWxWYXIuanMnO1xyXG5pbXBvcnQgeyBFYXNpbmdGYWN0b3J5LCBNYXNrVHlwZSB9IGZyb20gJ2pzbW92aW4nO1xyXG5cclxuY2xhc3MgQWN0aW9uU3BlYyBleHRlbmRzIFRpbWluZ1NwZWMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gMDtcclxuICAgICAgICB0aGlzLl9leHRlbmQgPSAnJztcclxuICAgICAgICB0aGlzLl90eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5hcHBlYXI7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25UeXBlID0gJyc7Ly9ub3Qgc2V0IGJ5IHRoZSB1c2VyXHJcbiAgICAgICAgdGhpcy5fZWFzaW5nID0gQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VMaW5lYXI7XHJcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lOy8vbm90IHNldCBieSB0aGUgdXNlclxyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gW107XHJcbiAgICAgICAgdGhpcy5vcmlBY3Rpb25UeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKiBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgLy8gc2V0IFxyXG4gICAgc2V0IHR5cGUodHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5hY3Rpb25UeXBlcykuaW5jbHVkZXModHApKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3R5cGVcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBlYXNpbmcoZXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5lYXNpbmdUeXBlKS5pbmNsdWRlcyhlcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2luZyA9IGVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ3RoZSBcXCdlYXNpbmdcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBlYXNpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vhc2luZztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZHVyYXRpb24oZHJ0bikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZHJ0biA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKGRydG4gLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpICogKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRydG4gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBkcnRuID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGRydG47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBkdXJhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0IGFjdGlvbiB1c2luZyBqc29uIG9ialxyXG4gICAgICogQHBhcmFtIHtKU09OIG9ian0gYWN0aW9uSnNvblxyXG4gICAgICovXHJcbiAgICBpbml0QWN0aW9uKGFjdGlvbkpzb24pIHtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gYWN0aW9uSnNvbi5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBhY3Rpb25Kc29uLnR5cGU7Ly9hY3Rpb24gdHlwZVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVHlwZSA9IGFjdGlvbkpzb24uYW5pbWF0aW9uVHlwZTsvL2FuaW1hdGlvbiB0eXBlXHJcbiAgICAgICAgdGhpcy5tYXNrVHlwZSA9IHR5cGVvZiBhY3Rpb25Kc29uLm1hc2tUeXBlID09PSAndW5kZWZpbmVkJyA/IE1hc2tUeXBlLkFscGhhIDogYWN0aW9uSnNvbi5tYXNrVHlwZTtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGFjdGlvbkpzb24ucmVmZXJlbmNlOy8vdGltaW5nU3BlYyByZWZlcmVuY2VcclxuICAgICAgICB0aGlzLm9mZnNldCA9IGFjdGlvbkpzb24ub2Zmc2V0Oy8vdGltaW5nU3BlYyBkZWxheVxyXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBhY3Rpb25Kc29uLmR1cmF0aW9uOy8vYWN0aW9uIGR1cmF0aW9uXHJcbiAgICAgICAgdGhpcy5lYXNpbmcgPSBhY3Rpb25Kc29uLmVhc2luZztcclxuICAgICAgICB0aGlzLm9yaUFjdGlvblR5cGUgPSBhY3Rpb25Kc29uLm9yaUFjdGlvblR5cGU7XHJcblxyXG4gICAgICAgIC8vYXR0cmlidXRlcyBvbmx5IHRha2UgZWZmZWN0IHdoZW4gdHlwZSBpcyBjdXN0b21cclxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbkpzb24uYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBhY3Rpb25Kc29uLmF0dHJpYnV0ZS5mb3JFYWNoKChhdHRyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQXR0ciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogYXR0ci5hdHRyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBhdHRyLmZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IGF0dHIudG9cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZS5wdXNoKHRtcEF0dHIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlRHVyYXRpb25Db25zdChjb25zdGFudHMsIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmR1cmF0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbikgPT09ICd1bmRlZmluZWQnKSB7Ly9jaGVjayBlcnJvciBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGl0IGlzIGFuIGVxdWF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kdXJhdGlvbi5pbmRleE9mKFwiY2FsY1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uLnN1YnN0cmluZygwLCB0aGlzLmR1cmF0aW9uLmxlbmd0aCAtIDEpLnN1YnN0cmluZyg1KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdGFudHMuZm9yRWFjaCgodmFsdWUsIGtleSwgbWFwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmR1cmF0aW9uLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24ucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2dtJyksICcnICsgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnRHVyYXRpb24gbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJkdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENhbmlzVXRpbC5jaGVja0VxdWF0aW9uKHRoaXMuZHVyYXRpb24sIGNvbnN0YW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGV2YWwodGhpcy5kdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1dyb25nIGVxdWF0aW9uLicsIGVyclNwZWM6ICdcImR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1dyb25nIHJlZmVyZW5jZSBvZiB0aGUgY29uc3RhbnQgdmFyaWFibGVzLicsIGVyclNwZWM6ICdcImR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24pID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnRHVyYXRpb24gbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJkdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kdXJhdGlvbiAmJiB0eXBlb2YgdGhpcy5kdXJhdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24pID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXQgaXMgYW4gZXF1YXRpb25cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbi5pbmRleE9mKFwiY2FsY1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbi5zdWJzdHJpbmcoMCwgdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbi5sZW5ndGggLSAxKS5zdWJzdHJpbmcoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0YW50cy5mb3JFYWNoKCh2YWx1ZSwga2V5LCBtYXApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbi5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZ20nKSwgJycgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0R1cmF0aW9uIG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wibWluRHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrRXF1YXRpb24odGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbiwgY29uc3RhbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbiA9IGV2YWwodGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgZXF1YXRpb24uJywgZXJyU3BlYzogJ1wibWluRHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgcmVmZXJlbmNlIG9mIHRoZSBjb25zdGFudCB2YXJpYWJsZXMuJywgZXJyU3BlYzogJ1wibWluRHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsvL3JlcGxhY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbikgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24gPSBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdNaW5EdXJhdGlvbiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgbnVtZXJpYyB0eXBlIGNvbnN0YW50LicsIGVyclNwZWM6ICdcIm1pbkR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXNzaWduQWN0aW9uVG1wbHMoYWN0aW9uVG1wbEpzb24sIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgLy9hc3NpZ24gQW5pbWF0aW9uIGFjdGlvbiB0ZW1wbGF0ZXNcclxuICAgICAgICB0aGlzLmFjdGlvblRtcGxzLmNsZWFyKCk7XHJcbiAgICAgICAgYWN0aW9uVG1wbEpzb24uZm9yRWFjaChhID0+IHtcclxuICAgICAgICAgICAgaWYgKCFhLm5hbWUgfHwgdHlwZW9mIGEubmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGEubmFtZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uVG1wbHMuc2V0KGEubmFtZSwgYSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvL3JlcGxhY2UgdGhlIHRlbXBsYXRlcyByZWZlcmVuY2UgaW5zaWRlIHRoZSB0ZW1wbGF0ZXNcclxuICAgICAgICB0aGlzLmFjdGlvblRtcGxzLmZvckVhY2goKGN1cnJlbnRUbXBsLCBjdXJyZW50TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmROYW1lID0gY3VycmVudFRtcGwuZXh0ZW5kO1xyXG4gICAgICAgICAgICBpZiAoZXh0ZW5kTmFtZSAmJiB0eXBlb2YgZXh0ZW5kTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVuZFRtcGwgPSB0aGlzLmFjdGlvblRtcGxzLmdldChleHRlbmROYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZW5kVG1wbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhleHRlbmRUbXBsKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoayAhPT0gJ25hbWUnICYmIHR5cGVvZiBjdXJyZW50VG1wbFtrXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUbXBsW2tdID0gZXh0ZW5kVG1wbFtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN1cnJlbnRUbXBsLmV4dGVuZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvblRtcGxzLnNldChjdXJyZW50TmFtZSwgY3VycmVudFRtcGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnY2Fubm90IGZpbmQgdGhlIGluaGVyaXRlZCB0ZW1wbGF0ZS4nLCBlcnJTcGVjOiAnXCJleHRlbmRcIjpcIicgKyBleHRlbmROYW1lICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVwbGFjZUFjdGlvblRtcGxzKGFjdGlvbkpzb24sIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgaWYgKGFjdGlvbkpzb24uZXh0ZW5kICYmIHR5cGVvZiBhY3Rpb25Kc29uLmV4dGVuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgY29uc3QgZXh0ZW5kVG1wbCA9IHRoaXMuYWN0aW9uVG1wbHMuZ2V0KGFjdGlvbkpzb24uZXh0ZW5kKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRlbmRUbXBsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZXh0ZW5kVG1wbCkuZm9yRWFjaChrID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoayAhPT0gJ25hbWUnICYmIHR5cGVvZiBhY3Rpb25Kc29uW2tdID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25Kc29uW2tdID0gZXh0ZW5kVG1wbFtrXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGFjdGlvbkpzb24uZXh0ZW5kO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbkpzb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnY2Fubm90IGZpbmQgdGhlIGluaGVyaXRlZCB0ZW1wbGF0ZS4nLCBlcnJTcGVjOiAnXCJleHRlbmRcIjpcIicgKyBhY3Rpb25Kc29uLmV4dGVuZCArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25Kc29uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY3Rpb25Kc29uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdHJhbnNsYXRlIHRlbXBsYXRlIGFuaW1hdGlvbnMgdG8gJ2N1c3RvbScgdHlwZSB3aXRoIHRoZSB0cmFuc2l0aW9uIG9uIHNvbWUgdmlzdWFsIGF0dHJpYnV0ZXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRyYW5zVG9WaXN1YWxBdHRyQWN0aW9uKGFjdGlvbkpzb24sIGNoYXJ0SWR4LCBjaGFuZ2VkQXR0cnMsIGRhdGFUcmFucywgc3RhdHVzID0ge30pIHtcclxuICAgICAgICAvL3JlcGFsY2UgYWN0aW9uIHRlbXBsYXRlcyBpZiB0aGVyZSBpcyBhbnlcclxuICAgICAgICBjb25zb2xlLmxvZygnYWN0aW9uIHRtcGxzOiAnLCB0aGlzLmFjdGlvblRtcGxzLCBhY3Rpb25Kc29uKTtcclxuICAgICAgICBhY3Rpb25Kc29uID0gdGhpcy5yZXBsYWNlQWN0aW9uVG1wbHMoYWN0aW9uSnNvbik7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3JlcGxhY2VkIGFjdGlvbjogJywgYWN0aW9uSnNvbik7XHJcblxyXG4gICAgICAgIC8vdHJhbnMgdG8gdmlzdWFsIGF0dHJzXHJcbiAgICAgICAgbGV0IGFjdGlvbkpzb25BcnIgPSBbXTtcclxuXHJcbiAgICAgICAgLy9nZW5lcmF0ZSBwcmUtcmVuZGVyIGFjdGlvbnNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYW5nZWRBdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY2hhbmdlZEF0dHIgPSBjaGFuZ2VkQXR0cnNbaV07XHJcbiAgICAgICAgICAgIGxldCBmcm9tQXJyID0gW10sIHRvQXJyID0gW107XHJcbiAgICAgICAgICAgIGRhdGFUcmFucy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc0FyciwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnRJZHggKyAxIDwgdHJhbnNBcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZWRBdHRyID09PSAnZCcgfHwgY2hhbmdlZEF0dHIgPT09ICd0ZXh0Q29udGVudCcgfHwgY2hhbmdlZEF0dHIgPT09ICdmaWxsJyB8fCBjaGFuZ2VkQXR0ciA9PT0gJ3N0cm9rZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21JdGVtID0gW21hcmtJZCwgIXRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0gPyAoY2hhbmdlZEF0dHIgPT09ICdkJyA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0pIDogdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb0l0ZW0gPSBbbWFya0lkLCAhdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0gPyAoY2hhbmdlZEF0dHIgPT09ICdkJyA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdKSA6IHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZWRBdHRyID09PSAnZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBGcm9tUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFRvUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRnJvbVBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAhdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVG9QYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgIXRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdID8gJ20wLDAnIDogdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21QYXRoTGVuID0gdG1wRnJvbVBhdGguZ2V0VG90YWxMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb1BhdGhMZW4gPSB0bXBUb1BhdGguZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGVwTnVtID0gMzAwLCBmcm9tUGF0aFN0ZXBMZW4gPSB0bXBGcm9tUGF0aExlbiAvIHN0ZXBOdW0sIHRvUGF0aFN0ZXBMZW4gPSB0bXBUb1BhdGhMZW4gLyBzdGVwTnVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyb21EaXNjcml0UGF0aCA9IFtdLCB0b0Rpc2NyaXRQYXRoID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBOdW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBGcm9tUG50ID0gdG1wRnJvbVBhdGguZ2V0UG9pbnRBdExlbmd0aChmcm9tUGF0aFN0ZXBMZW4gKiBpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVG9QbnQgPSB0bXBUb1BhdGguZ2V0UG9pbnRBdExlbmd0aCh0b1BhdGhTdGVwTGVuICogaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbURpc2NyaXRQYXRoLnB1c2goW3RtcEZyb21QbnQueCwgdG1wRnJvbVBudC55XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9EaXNjcml0UGF0aC5wdXNoKFt0bXBUb1BudC54LCB0bXBUb1BudC55XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBGcm9tSXRlbS5wdXNoKGZyb21EaXNjcml0UGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb0l0ZW0ucHVzaCh0b0Rpc2NyaXRQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tQXJyLnB1c2godG1wRnJvbUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0Fyci5wdXNoKHRtcFRvSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyci5wdXNoKFttYXJrSWQsIHBhcnNlRmxvYXQodHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9BcnIucHVzaChbbWFya0lkLCBwYXJzZUZsb2F0KHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgbGV0IHByZU9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGNoYXJ0SWR4OiBhY3Rpb25Kc29uLmNoYXJ0SWR4LFxyXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlOiBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0LFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGFjdGlvbkpzb24udHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy50cmFuc2l0aW9uID8gYWN0aW9uSnNvbi5kdXJhdGlvbiA6IDAsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyayxcclxuICAgICAgICAgICAgICAgIG9yaUFjdGlvblR5cGU6IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuY3VzdG9tLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVHlwZTogQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmN1c3RvbSxcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogW3tcclxuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogY2hhbmdlZEF0dHIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbUFycixcclxuICAgICAgICAgICAgICAgICAgICB0bzogdG9BcnJcclxuICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFjdGlvbkpzb25BcnIucHVzaChwcmVPYmopO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFjdGlvbkpzb24udHlwZSAhPT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBjaGFydElkeDogYWN0aW9uSnNvbi5jaGFydElkeCxcclxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogYWN0aW9uSnNvbi5yZWZlcmVuY2UsLy90aW1pbmdTcGVjIG9mZnNldCByZWZlcmVuY2VcclxuICAgICAgICAgICAgICAgIG9mZnNldDogYWN0aW9uSnNvbi5vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBlYXNpbmc6IGFjdGlvbkpzb24uZWFzaW5nLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHR5cGVvZiBhY3Rpb25Kc29uLmR1cmF0aW9uID09PSAndW5kZWZpbmVkJyA/IFRpbWluZ1NwZWMuRlJBTUVfUkFURSA6IGFjdGlvbkpzb24uZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFzayxcclxuICAgICAgICAgICAgICAgIG9yaUFjdGlvblR5cGU6IGFjdGlvbkpzb24udHlwZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBsZXQgdG1wT2JqMjtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uSnNvbi50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuYXBwZWFyOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5kdXJhdGlvbiA9IDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuZmFkZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoudHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnb3BhY2l0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZGlzYXBwZWFyOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5kdXJhdGlvbiA9IDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuZmFkZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoudHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnb3BhY2l0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZmFkZTpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnb3BhY2l0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZmFkZU91dDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnb3BhY2l0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZ3JvdzpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoudHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmdyb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAndHJpbUVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZGVncm93OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuZ3JvdztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICd0cmltRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlQm90dG9tOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlT3V0RnJvbVRvcDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkludmVydEFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZVRvcDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZU91dEZyb21Cb3R0b206XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVMZWZ0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlT3V0RnJvbVJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVPdXRGcm9tTGVmdDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkludmVydEFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuY2lyY2xlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmNpcmNsZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLmNpcmNsZU91dDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jaXJjbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2hlZWw6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2hlZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAndHJpbUVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2hlZWxPdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2hlZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAndHJpbUVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuY3VzdG9tOlxyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRtcE9iai5hdHRyaWJ1dGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBpZiAodHlwZW9mIGFjdGlvbkpzb24uYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGF0dHJOYW1lOiBhY3Rpb25Kc29uLmF0dHJpYnV0ZS5hdHRyTmFtZSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGZyb206IGFjdGlvbkpzb24uYXR0cmlidXRlLmZyb20sXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0bzogYWN0aW9uSnNvbi5hdHRyaWJ1dGUudG9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uSnNvbkFyci5wdXNoKHRtcE9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYWN0aW9uSnNvbkFycjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxjdWxhdGUgdGhlIHRvdGFsIGR1cmF0aW9uIG9mIGFsbCB0aGUgYWN0aW9uc1xyXG4gICAgICogQHBhcmFtIHtBcnJheTxBY3Rpb25TcGVjPn0gYWN0aW9uQXJyIFxyXG4gICAgICogQHBhcmFtIHtNYXB9IGR1cmF0aW9uQXR0clZhbHVlczoga2V5OiBkYXRhIGF0dHIgbmFtZSwgdmFsdWUgTWFwe2tleTogbWFya0lkLCB2YWx1ZTogYXR0ciB2YWx1ZX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbEFjdGlvbkR1cmF0aW9uKGFjdGlvbkFyciwgZHVyYXRpb25BdHRyVmFsdWVzLCBkb21NYXJrcykge1xyXG4gICAgICAgIGxldCB3aG9sZVN0YXJ0ID0gMCwgd2hvbGVFbmQgPSAtMTAwMDAwOy8vc3RhcnQgdGltZSBvZiB0aGUgZWFybGllc3QgYWN0aW9uIGFuZCBlbmQgdGltZSBvZiB0aGUgbGFzdHN0IGFjdGlvblxyXG4gICAgICAgIGxldCBsYXN0U3RhcnQgPSAwLCBsYXN0RW5kID0gMDtcclxuICAgICAgICBsZXQgZHVyYXRpb25XaXRoQXR0ciA9IGZhbHNlO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbkFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wU3RhcnRNYXAsIHRtcEVuZE1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgdG1wU3RhcnRNYXAgPSBhY3Rpb25BcnJbaV0uY2FsT2Zmc2V0VGltZShsYXN0U3RhcnQsIGxhc3RFbmQsIDAsIGRvbU1hcmtzKTsvL2NoYW5nZSB0byByZXR1bnIgdmFsdWUgb2YgTWFwXHJcblxyXG4gICAgICAgICAgICAvL2lnbm9yZSB0aGUgaW5mbHVlbmNlIG9mIHRoZSBhbmltYXRpb24gZm9yIHRoZSBib3VuZGFyeSBvZiB0aGUgbWFza1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25BcnJbaSAtIDFdLmFuaW1hdGlvblR5cGUgPT09IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5taXN0YWtlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wU3RhcnRNYXAuZm9yRWFjaChmdW5jdGlvbiAodG1wU3RhcnQsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBTdGFydE1hcC5zZXQobWFya0lkLCB0bXBTdGFydCAtIGFjdGlvbkFycltpIC0gMV0ub2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbWluVG1wU3RhcnQgPSAxMDAwMDAwLCBtYXhUbXBFbmQgPSAtMTAwMDAwO1xyXG4gICAgICAgICAgICBhY3Rpb25BcnJbaV0ub2Zmc2V0U3RhcnQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIHRtcFN0YXJ0TWFwLmZvckVhY2goZnVuY3Rpb24gKHRtcFN0YXJ0LCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBFbmQgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb25BcnJbaV0uZHVyYXRpb24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb25XaXRoQXR0ciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRW5kID0gdG1wU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb25BcnJbaV0uZHVyYXRpb24gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRW5kID0gdG1wU3RhcnQgKyBhY3Rpb25BcnJbaV0uZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0bXBFbmRNYXAuc2V0KG1hcmtJZCwgdG1wRW5kKTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbkFycltpXS5vZmZzZXRTdGFydC5zZXQobWFya0lkLCB0bXBTdGFydCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRtcFN0YXJ0IDwgbWluVG1wU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5UbXBTdGFydCA9IHRtcFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRtcEVuZCA+IG1heFRtcEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heFRtcEVuZCA9IHRtcEVuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0bXBTdGFydCA8IHdob2xlU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aG9sZVN0YXJ0ID0gdG1wU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wRW5kID4gd2hvbGVFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aG9sZUVuZCA9IHRtcEVuZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGxhc3RTdGFydCA9IG1pblRtcFN0YXJ0O1xyXG4gICAgICAgICAgICBsYXN0RW5kID0gbWF4VG1wRW5kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRtcFJlc3VsdER1cmF0aW9uID0gd2hvbGVFbmQgLSB3aG9sZVN0YXJ0O1xyXG4gICAgICAgIGxldCByZXN1bHREdXJhdGlvbnMgPSBuZXcgTWFwKCk7Ly9rZXk6IG1hcmtJZCwgdmFsdWU6IGR1cmFpdG9uIG9mIHRoaXMgbWFya1xyXG4gICAgICAgIGxldCBtaW5WYWx1ZUVhY2hBdHRyID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmIChkdXJhdGlvbldpdGhBdHRyKSB7Ly9hZGQgZHVyYXRpb24gd2l0aCB0aGUgYXR0cmlidXRlIHZhbHVlc1xyXG4gICAgICAgICAgICAvL2ZpbmQgdGhlIG1pbiB2YWx1ZSBmb3IgZWFjaCBhdHRyXHJcbiAgICAgICAgICAgIGR1cmF0aW9uQXR0clZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRycywgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyVmFsdWUsIGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtaW5WYWx1ZUVhY2hBdHRyLmdldChhdHRyTmFtZSkgPT09ICd1bmRlZmluZWQnIHx8IGF0dHJWYWx1ZVswXSA8IG1pblZhbHVlRWFjaEF0dHIuZ2V0KGF0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZUVhY2hBdHRyLnNldChhdHRyTmFtZSwgYXR0clZhbHVlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBkdXJhdGlvbkF0dHJWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cnMsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEV4dHJhRHVyYXRpb24gPSAwO1xyXG4gICAgICAgICAgICAgICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0clZhbHVlLCBhdHRyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW5BdHRyVmFsdWUgPSBtaW5WYWx1ZUVhY2hBdHRyLmdldChhdHRyTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRtcEV4dHJhRHVyYXRpb24gKz0gYXR0clZhbHVlWzFdICogYXR0clZhbHVlWzBdIC8gbWluQXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHJlc3VsdER1cmF0aW9ucy5zZXQobWFya0lkLCB0bXBSZXN1bHREdXJhdGlvbiArIHRtcEV4dHJhRHVyYXRpb24pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7Ly9kaXJlY3RseSBzZXQgdGhlIGR1cmF0aW9uIG9mIGVhY2ggbWFyayB3aXRoIHRtcFJlc3VsdER1cmF0aW9uXHJcbiAgICAgICAgICAgIGR1cmF0aW9uQXR0clZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHREdXJhdGlvbnMuc2V0KG1hcmtJZCwgdG1wUmVzdWx0RHVyYXRpb24pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3Jlc3VsdER1cmF0aW9ucywgbWluVmFsdWVFYWNoQXR0ciwgYWN0aW9uQXJyXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJhbnNUb0xvdHRpZUFjdGlvbihlYXNpbmdOYW1lKSB7XHJcbiAgICAgICAgc3dpdGNoIChlYXNpbmdOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VMaW5lYXI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nRmFjdG9yeS5saW5lYXIoKTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZUluUXVhZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VJblF1YWQoKTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZU91dFF1YWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nRmFjdG9yeS5lYXNlT3V0UXVhZCgpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlSW5PdXRRdWFkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluT3V0UXVhZCgpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlSW5DdWJpYzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VJbkN1YmljKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VPdXRDdWJpYzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VPdXRDdWJpYygpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlSW5PdXRDdWJpYzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VJbk91dEN1YmljKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5BY3Rpb25TcGVjLmFjdGlvblRtcGxzID0gbmV3IE1hcCgpOy8vcmVjb3JkIGFsbCBhY3Rpb24gdGVtcGxhdGVzLCBrZXk6IHRtcGxhdGUgbmFtZSwgdmFsdWU6IGFjdGlvbiBvYmpcclxuQWN0aW9uU3BlYy5hdHRycyA9IFsndHlwZScsICdvZmZzZXQnLCAncmVmZXJlbmNlJywgJ2Vhc2luZycsICdkdXJhdGlvbiddO1xyXG5cclxuQWN0aW9uU3BlYy5hY3Rpb25UeXBlcyA9IHtcclxuICAgIGZhZGU6ICdmYWRlJyxcclxuICAgIHdpcGVCb3R0b206ICd3aXBlIGJvdHRvbScsXHJcbiAgICB3aXBlVG9wOiAnd2lwZSB0b3AnLFxyXG4gICAgd2lwZUxlZnQ6ICd3aXBlIGxlZnQnLFxyXG4gICAgd2lwZVJpZ2h0OiAnd2lwZSByaWdodCcsXHJcbiAgICB3aGVlbDogJ3doZWVsJyxcclxuICAgIGFwcGVhcjogJ2FwcGVhcicsXHJcbiAgICBkaXNhcHBlYXI6ICdkaXNhcHBlYXInLFxyXG4gICAgY2lyY2xlOiAnY2lyY2xlJyxcclxuICAgIGdyb3c6ICdncm93JyxcclxuICAgIGN1c3RvbTogJ2N1c3RvbScsXHJcbiAgICBmYWRlT3V0OiAnZmFkZSBvdXQnLFxyXG4gICAgd2lwZU91dEZyb21MZWZ0OiAnd2lwZSBvdXQgZnJvbSBsZWZ0JyxcclxuICAgIHdpcGVPdXRGcm9tVG9wOiAnd2lwZSBvdXQgZnJvbSB0b3AnLFxyXG4gICAgd2lwZU91dEZyb21SaWdodDogJ3dpcGUgb3V0IGZyb20gcmlnaHQnLFxyXG4gICAgd2lwZU91dEZyb21Cb3R0b206ICd3aXBlIG91dCBmcm9tIGJvdHRvbScsXHJcbiAgICB3aGVlbE91dDogJ3doZWVsIG91dCcsXHJcbiAgICBjaXJjbGVPdXQ6ICdjaXJjbGUgb3V0JyxcclxuICAgIGRlZ3JvdzogJ2RlZ3JvdycsXHJcbiAgICB0cmFuc2l0aW9uOiAnbWFnaWMgbW92ZScsXHJcbiAgICB6b29tOiAnem9vbScsXHJcbiAgICBtYXJrOiAnbWFzaycsXHJcbiAgICBtYXNrOiAnbWFyaydcclxufVxyXG5cclxuQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzID0ge1xyXG4gICAgbWFyazogJ21hcmsnLFxyXG4gICAgbWFzazogJ21hc2snXHJcbn1cclxuXHJcbkFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZSA9IHtcclxuICAgIGZhZGU6ICdmYWRlJyxcclxuICAgIHdpcGU6ICd3aXBlJyxcclxuICAgIG1vdmU6ICdtb3ZlJyxcclxuICAgIHdoZWVsOiAnd2hlZWwnLFxyXG4gICAgY2lyY2xlOiAnY2lyY2xlJyxcclxuICAgIGFwcGVhcjogJ2FwcGVhcicsXHJcbiAgICBncm93OiAnZ3JvdycsXHJcbiAgICBjdXN0b206ICdjdXN0b20nLFxyXG4gICAgbWlzdGFrZTogJ21pc3Rha2UnXHJcbn1cclxuXHJcbkFjdGlvblNwZWMuZWFzaW5nVHlwZSA9IHtcclxuICAgIGVhc2VMaW5lYXI6ICdlYXNlTGluZWFyJyxcclxuICAgIGVhc2VJblF1YWQ6ICdlYXNlSW5RdWFkJyxcclxuICAgIGVhc2VPdXRRdWFkOiAnZWFzZU91dFF1YWQnLFxyXG4gICAgZWFzZUluT3V0UXVhZDogJ2Vhc2VJbk91dFF1YWQnLFxyXG4gICAgZWFzZUluQ3ViaWM6ICdlYXNlSW5DdWJpYycsXHJcbiAgICBlYXNlT3V0Q3ViaWM6ICdlYXNlT3V0Q3ViaWMnLFxyXG4gICAgZWFzZUluT3V0Q3ViaWM6ICdlYXNlSW5PdXRDdWJpYycsXHJcbiAgICBlYXNlT3V0Qm91bmNlOiAnZWFzZU91dEJvdW5jZSdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uU3BlYzsiLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMuanMnO1xyXG5pbXBvcnQgeyBDYW5pc1V0aWwgfSBmcm9tICcuL3V0aWwvVXRpbC5qcyc7XHJcblxyXG5jbGFzcyBHcm91cGluZ1NwZWMgZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBCeSA9ICdpZCc7IC8vb3B0aW9uYWxcclxuICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0O1xyXG4gICAgICAgIHRoaXMuX2RlbGF5ID0gMDtcclxuICAgICAgICB0aGlzLmRlZmluZWRCeUlkID0gZmFsc2U7Ly90cnVlIGRlZmluZWQgYnkgdXNlciwgZmFsc2U6IG5vdCBkZWZpbmVkIGJ5IHVzZXJcclxuICAgICAgICB0aGlzLnNvcnQgPSB7fTtcclxuICAgICAgICAvLyB0aGlzLnJvb3QgPSB7fTtcclxuICAgICAgICB0aGlzLmdyb3VwaW5nOy8vb3B0aW9uYWwsIGFub3RoZXIgR3JvdXBpbmdTcGVjIG9iamVjdCBpbmRpY2F0aW5nIG1vcmUgZ3JvdXBpbmdzXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgZ3JvdXBCeShnYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ2IgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB0aGlzLl9ncm91cEJ5ID0gZ2I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdyb3VwQnkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwQnk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJlZmVyZW5jZShyZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IHRtcFJlZlN0ciA9IFRpbWluZ1NwZWMudHJhbnNSZWYocmVmKTtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyh0bXBSZWZTdHIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSByZWY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3JlZmVyZW5jZVxcJyBvZiBUaW1pbmdTcGVjIGhhcyB0byBiZSBvbmUgb2YgXFwncHJldmlvdXNTdGFydFxcJywgXFwncHJldmlvdXNFbmRcXCcgb3IgXFwnYWJzb2x1dGVcXCcuICcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlZmVyZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZWxheShkbHkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRseSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgaWYgKGRseSA+PSAxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFIHx8IGRseSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsYXkgPSBkbHk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxheSA9IDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkbHkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGF5ID0gZGx5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVsYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xyXG4gICAgfVxyXG4gICAgLyoqKioqIGVuZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgcmVwbGFjZURlbGF5Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMgPSB7fSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kZWxheSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZGVsYXkpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdCBpcyBhbiBlcXVhdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVsYXkuaW5kZXhPZihcImNhbGNcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ID0gdGhpcy5kZWxheS5zdWJzdHJpbmcoMCwgdGhpcy5kZWxheS5sZW5ndGggLSAxKS5zdWJzdHJpbmcoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLmZvckVhY2goKHZhbHVlLCBrZXksIG1hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWxheS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXkgPSB0aGlzLmRlbGF5LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnbScpLCAnJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0RlbGF5IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wiZGVsYXlcIjpcIicgKyB0aGlzLmRlbGF5LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tFcXVhdGlvbih0aGlzLmRlbGF5LCBjb25zdGFudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBldmFsKHRoaXMuZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBlcXVhdGlvbi4nLCBlcnJTcGVjOiAnXCJkZWxheVwiOlwiJyArIHRoaXMuZGVsYXkucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJkZWxheVwiOlwiJyArIHRoaXMuZGVsYXkucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHsvL3JlcGxhY2VcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLmRlbGF5KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ID0gY29uc3RhbnRzLmdldCh0aGlzLmRlbGF5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0RlbGF5IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wiZGVsYXlcIjpcIicgKyB0aGlzLmRlbGF5LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnJlcGxhY2VEZWxheUNvbnN0KGNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0IG5lc3RlZCBncm91cGluZyBhbmQgYWN0aW9ucyB1c2luZyBqc29uIG9ialxyXG4gICAgICogQHBhcmFtIHtKU09OIG9ian0gZ3JvdXBpbmdKc29uIFxyXG4gICAgICovXHJcbiAgICBpbml0R3JvdXBpbmcoZ3JvdXBpbmdKc29uKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cEJ5ID0gZ3JvdXBpbmdKc29uLmdyb3VwQnk7XHJcbiAgICAgICAgaWYgKGdyb3VwaW5nSnNvbi5ncm91cEJ5ID09PSAnaWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lZEJ5SWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGdyb3VwaW5nSnNvbi5yZWZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy5kZWxheSA9IGdyb3VwaW5nSnNvbi5kZWxheTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBncm91cGluZ0pzb24uc29ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3J0LmZpZWxkID0gZ3JvdXBpbmdKc29uLnNvcnQuZmllbGQ7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydC5vcmRlciA9IGdyb3VwaW5nSnNvbi5zb3J0Lm9yZGVyO1xyXG4gICAgICAgICAgICB0aGlzLnNvcnQuZXhwciA9IGdyb3VwaW5nSnNvbi5zb3J0LmV4cHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyb3VwaW5nSnNvbi5ncm91cGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZyA9IG5ldyBHcm91cGluZ1NwZWMoKTtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5pbml0R3JvdXBpbmcoZ3JvdXBpbmdKc29uLmdyb3VwaW5nKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBncm91cGluZ0pzb24uZ3JvdXBpbmcgPT09ICd1bmRlZmluZWQnICYmIGdyb3VwaW5nSnNvbi5ncm91cEJ5ICE9PSAnaWQnKSB7XHJcbiAgICAgICAgICAgIC8vZGlkbm90IGdvcnVwaW5nIHRvIGlkLCBhZGQgZXh0cmEgZ3JvdXBpbmcgYnkgaWRcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZyA9IG5ldyBHcm91cGluZ1NwZWMoKTtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5ncm91cEJ5ID0gJ2lkJztcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5kZWZpbmVkQnlJZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlT3JkZXIobWFya0lkcywgZG9tTWFya3MsIHJvb3QsIHRpbWluZ1JlZiwgYWxpZ25pbmcpIHtcclxuICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzLmNsZWFyKCk7XHJcbiAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuY2xlYXIoKTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMocm9vdCkubGVuZ3RoID09PSAwKSB7Ly8gZ2VuZXJhdGUgbmV3IHRyZWVcclxuICAgICAgICAgICAgcm9vdC5ncm91cFJlZiA9ICdyb290JztcclxuICAgICAgICAgICAgcm9vdC5pZCA9IEdyb3VwaW5nU3BlYy5ub2RlSWQ7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuc2V0KEdyb3VwaW5nU3BlYy5ub2RlSWQsIHRydWUpO1xyXG4gICAgICAgICAgICBHcm91cGluZ1NwZWMubm9kZUlkKys7XHJcbiAgICAgICAgICAgIHJvb3QuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgcm9vdC5tYXJrcyA9IG1hcmtJZHM7XHJcbiAgICAgICAgICAgIHJvb3QudGltaW5nUmVmID0gdHlwZW9mIHRpbWluZ1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0IDogdGltaW5nUmVmO1xyXG4gICAgICAgICAgICByb290LmRlbGF5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVRyZWUocm9vdCwgZG9tTWFya3MpO1xyXG4gICAgICAgIH0gZWxzZSB7Ly8gdXBkYXRlIHRoZSBjdXJyZW50IHRyZWVcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUcmVlKHJvb3QsIGRvbU1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFya09yZGVyQW5kTGVhdmVzKHJvb3QsIGFsaWduaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVUcmVlKHQsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHRyZWUhJyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zdCBncm91cEJ5UmVmID0gdGhpcy5ncm91cEJ5O1xyXG4gICAgICAgICAgICBjb25zdCB0aW1pbmdSZWYgPSB0aGlzLnJlZmVyZW5jZTtcclxuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLmRlbGF5O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2FtZUdyb3VwaW5nID0gZmFsc2U7Ly93aGV0aGVyIHRoaXMgaXMgdGhlIHNhbWUgZ3JvdXBpbmdcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5jaGlsZHJlblswXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzYW1lR3JvdXBpbmcgPSB0LmNoaWxkcmVuWzBdLmdyb3VwUmVmID09PSBncm91cEJ5UmVmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzYW1lR3JvdXBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWwgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHRtcE5vZGU7IGkgPCB0LmNoaWxkcmVuLmxlbmd0aCB8ICh0bXBOb2RlID0gdC5jaGlsZHJlbltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnVwZGF0ZVRyZWUodG1wTm9kZSwgZG9tTWFya3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbC5zZXQodG1wTm9kZS5yZWZWYWx1ZSwgdG1wTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUudGltaW5nUmVmID0gdGltaW5nUmVmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmUtc29ydCB0aGUgY2hpbGRyZW4gb2YgdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydE5vZGVzKHRoaXMuc29ydCwgdCwgbm9kZXNUaGlzTGV2ZWwsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUcmVlKHQsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5ncm91cGluZyA9PT0gJ3VuZGVmaW5lZCcgJiYgdC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7Ly9ubyBtb3JlIGdyb3VwaW5nIGlzIGRlZmluZWQsIGJ1dCB0aGUgb3JpIHRyZWUgaGFzIGRlZXBlciBoaWVyYXJjaHlcclxuICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVRyZWUodCwgZG9tTWFya3MpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZ2VuZXJhdGluZyB0cmVlISEnKTtcclxuICAgICAgICBjb25zdCBncm91cEJ5UmVmID0gdGhpcy5ncm91cEJ5O1xyXG4gICAgICAgIGNvbnN0IHRpbWluZ1JlZiA9IHRoaXMucmVmZXJlbmNlO1xyXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5kZWxheTtcclxuICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWwgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG1hcmtJZDsgaSA8IHQubWFya3MubGVuZ3RoIHwgKG1hcmtJZCA9IHQubWFya3NbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGRhdHVtID0gZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2RhdGEtZGF0dW0nXTsvL2RhdHVtIHN0b3JlZCBpbiB0aGUgdGFnXHJcbiAgICAgICAgICAgIGxldCByZWZWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb21NYXJrcy5nZXQobWFya0lkKVtncm91cEJ5UmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHJlZlZhbHVlID0gZG9tTWFya3MuZ2V0KG1hcmtJZClbZ3JvdXBCeVJlZl07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQpW2dyb3VwQnlSZWZdID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGF0dW1bZ3JvdXBCeVJlZl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZWZWYWx1ZSA9IGRhdHVtW2dyb3VwQnlSZWZdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdlcnJvcjogZ3JvdXBpbmcgYnkgYW4gdW5rbm93biBhdHRyaWJ1dGUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKS5tYXJrcy5wdXNoKG1hcmtJZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouaWQgPSBHcm91cGluZ1NwZWMubm9kZUlkO1xyXG4gICAgICAgICAgICAgICAgR3JvdXBpbmdTcGVjLm5vZGVJZCsrO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmdyb3VwUmVmID0gZ3JvdXBCeVJlZjtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBPYmouZ3JvdXBSZWYgPT09ICdpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouZGVmaW5lZEJ5SWQgPSB0aGlzLmRlZmluZWRCeUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG1wT2JqLnJlZlZhbHVlID0gcmVmVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmoudGltaW5nUmVmID0gdGltaW5nUmVmO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRtcE9iai5tYXJrcyA9IFttYXJrSWRdO1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuc2V0KHJlZlZhbHVlLCB0bXBPYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vb3JkZXIgbm9kZXMgb2YgdGhpcyBsZXZlbCBhY2NvcmRpbmcgdG8gdGhlICdzb3J0JyBzcGVjXHJcbiAgICAgICAgdGhpcy5zb3J0Tm9kZXModGhpcy5zb3J0LCB0LCBub2Rlc1RoaXNMZXZlbCwgZG9tTWFya3MpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdub2RlcyB0aGlzIGxldmVsOiAnLCB0aGlzLnNvcnQsIG5vZGVzVGhpc0xldmVsLCB0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCB0bXBOb2RlOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGggfCAodG1wTm9kZSA9IHQuY2hpbGRyZW5baV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBpbmcuZ2VuZXJhdGVUcmVlKHRtcE5vZGUsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzb3J0Tm9kZXMoc3BlY1NvcnQsIHQsIG5vZGVzVGhpc0xldmVsLCBkb21NYXJrcykge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBzcGVjU29ydC5vcmRlcikge1xyXG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOi8vQXJyYXlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnZW5lcmF0aW5nIGNoaWxkcmVuOiAnLCB0LCBub2Rlc1RoaXNMZXZlbCwgc3BlY1NvcnQub3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFwcGVuZE51bSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgcmVmVmFsdWU7IGkgPCBzcGVjU29ydC5vcmRlci5sZW5ndGggfCAocmVmVmFsdWUgPSBzcGVjU29ydC5vcmRlcltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHJlZlZhbHVlKSkpIHsvLyB0aGlzIHJlZnZhbHVlIGlzIG5vdCBudW1iZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZlZhbHVlTnVtID0gTnVtYmVyKHJlZlZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWVOdW0pICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5wdXNoKG5vZGVzVGhpc0xldmVsLmdldChyZWZWYWx1ZU51bSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTnVtKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5wdXNoKG5vZGVzVGhpc0xldmVsLmdldChyZWZWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROdW0rKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzovLydhc2NlbmRpbmcnIHwgJ2Rlc2NlbmRpbmcnXHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgaGF2ZSBjb21lIHRvIHRoZSBsb3dlc3QgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGxldCBoYXNTaW5nbGVNYXJrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWFya3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNTaW5nbGVNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvL29ubHkgdGFrZSBlZmZlY3Qgd2hlbiBhIHNwZWNpZmljIGZpZWxkIGlzIHNwZWNpZmllZCBhbmQgYXJlIG9uIHRoZSBsb3dlc3QgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BlY1NvcnQuZmllbGQgIT09ICd1bmRlZmluZWQnICYmIGhhc1NpbmdsZU1hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJSZWYgPSBzcGVjU29ydC5maWVsZDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWxBcnIgPSBbLi4ubm9kZXNUaGlzTGV2ZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmRlclR5cGUgPSBzcGVjU29ydC5vcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbEFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWQxID0gYVsxXS5tYXJrc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJZDIgPSBiWzFdLm1hcmtzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJSZWZWYWx1ZTEgPSAnJywgb3JkZXJSZWZWYWx1ZTIgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtMSA9IGRvbU1hcmtzLmdldChtYXJrSWQxKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0dW0yID0gZG9tTWFya3MuZ2V0KG1hcmtJZDIpWydkYXRhLWRhdHVtJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9tTWFya3MuZ2V0KG1hcmtJZDIpW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gZG9tTWFya3MuZ2V0KG1hcmtJZDIpW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXSA9PT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBkYXR1bTFbb3JkZXJSZWZdICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQyKVtvcmRlclJlZl0gPT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgZGF0dW0yW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gZGF0dW0xW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gZGF0dW0yW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KG9yZGVyUmVmVmFsdWUxKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gcGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KG9yZGVyUmVmVmFsdWUyKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gcGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IEdyb3VwaW5nU3BlYy5vcmRlclR5cGVzLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyUmVmVmFsdWUxID49IG9yZGVyUmVmVmFsdWUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmRlclR5cGUgPT09IEdyb3VwaW5nU3BlYy5vcmRlclR5cGVzLmRlc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclJlZlZhbHVlMiA+PSBvcmRlclJlZlZhbHVlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3JkZXJUeXBlID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5yYW5kb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCB0bXBOb2RlOyBpIDwgbm9kZXNUaGlzTGV2ZWxBcnIubGVuZ3RoIHwgKHRtcE5vZGUgPSBub2Rlc1RoaXNMZXZlbEFycltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0LmFwcGVuZEZyYW1lKHQuaWQsIHRtcE5vZGUuaWQsIGksIG5vZGVzVGhpc0xldmVsQXJyLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4ucHVzaCh0bXBOb2RlWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBub2Rlc1RoaXNMZXZlbEFyciA9IFsuLi5ub2Rlc1RoaXNMZXZlbF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWNTb3J0Lm9yZGVyID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5hc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFbMF0gPj0gYlswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjU29ydC5vcmRlciA9PT0gR3JvdXBpbmdTcGVjLm9yZGVyVHlwZXMuZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbEFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYlswXSA+PSBhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNTb3J0Lm9yZGVyID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5yYW5kb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdG1wTm9kZTsgaSA8IG5vZGVzVGhpc0xldmVsQXJyLmxlbmd0aCB8ICh0bXBOb2RlID0gbm9kZXNUaGlzTGV2ZWxBcnJbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdC5hcHBlbmRGcmFtZSh0LmlkLCB0bXBOb2RlLmlkLCBpLCBub2Rlc1RoaXNMZXZlbEFyci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2godG1wTm9kZVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsLmZvckVhY2goZnVuY3Rpb24gKHRtcE5vZGUsIHJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4ucHVzaCh0bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0LmFwcGVuZEZyYW1lKHQuaWQsIHRtcE5vZGUuaWQsIGNvdW50LCBub2Rlc1RoaXNMZXZlbC5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXBwZW5kRnJhbWUocGFyZW50SWQsIG5vZGVJZCwgbm9kZUlkeCwgbm9kZXNOdW0pIHtcclxuICAgICAgICBpZiAoR3JvdXBpbmdTcGVjLmZyYW1lcy5nZXQocGFyZW50SWQpICYmIChub2RlSWR4ID09PSAwIHx8IG5vZGVJZHggPT09IG5vZGVzTnVtIC0gMSkpIHtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lcy5zZXQobm9kZUlkLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzLnNldChub2RlSWQsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgdGhlIGFuaW1hdGlvbiBvcmRlciBvZiBtYXJrc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyciBcclxuICAgICAqL1xyXG4gICAgZ2V0TWFya09yZGVyQW5kTGVhdmVzKHQsIGFsaWduaW5nKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2dldHRpbmcgbGVhdmVzOiAnLCB0KTtcclxuICAgICAgICBsZXQgb3JkZXJlZE1hcmtzID0gW10sIGxlYXZlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHF1ZXVlID0gW107XHJcbiAgICAgICAgICAgIHQucGFyZW50R3JvdXBSZWYgPSBbXTtcclxuICAgICAgICAgICAgdC5wYXJlbnRHcm91cFJlZlZhbHVlID0gW107XHJcbiAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQodCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2N1cnJlbnQgaXRlbTogJywgaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGVmaW5lZEJ5SWQgfHwgKCFpdGVtLmRlZmluZWRCeUlkICYmIGl0ZW0ucGFyZW50R3JvdXBSZWYubGVuZ3RoID09PSAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpZ25pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucGFyZW50R3JvdXBSZWYgPSBbaXRlbS5wYXJlbnRHcm91cFJlZlswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEdyb3VwUmVmVmFsdWUgPSBbaXRlbS5wYXJlbnRHcm91cFJlZlZhbHVlWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZ3JvdXBSZWYgPSAnaWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZWZWYWx1ZSA9IGl0ZW0ubWFya3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyZWRNYXJrcyA9IFsuLi5vcmRlcmVkTWFya3MsIC4uLml0ZW0ubWFya3NdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jaGlsZHJlblswXS5ncm91cFJlZiA9PT0gJ2lkJyAmJiBpdGVtLmdyb3VwUmVmICE9PSAncm9vdCcgJiYgIWl0ZW0uY2hpbGRyZW5bMF0uZGVmaW5lZEJ5SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsaWduaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEdyb3VwUmVmID0gW2l0ZW0ucGFyZW50R3JvdXBSZWZbMF1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5wYXJlbnRHcm91cFJlZlZhbHVlID0gW2l0ZW0ucGFyZW50R3JvdXBSZWZWYWx1ZVswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmdyb3VwUmVmID0gJ2lkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVmVmFsdWUgPSBpdGVtLm1hcmtzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLnBhcmVudEdyb3VwUmVmID0gWy4uLml0ZW0ucGFyZW50R3JvdXBSZWYsIGl0ZW0uZ3JvdXBSZWZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbltpXS5wYXJlbnRHcm91cFJlZlZhbHVlID0gWy4uLml0ZW0ucGFyZW50R3JvdXBSZWZWYWx1ZSwgaXRlbS5yZWZWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtvcmRlcmVkTWFya3MsIGxlYXZlc107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxjdWxhdGUgdGhlIHRpbWUgb2YgZWFjaCBtYXJrIGJhc2VkIG9uIHRoZSBncm91cGluZyBzdHJ1Y3R1cmVcclxuICAgICAqIEBwYXJhbSB7Kn0gdCBcclxuICAgICAqIEBwYXJhbSB7Kn0gbGFzdEdyb3VwU3RhcnQgXHJcbiAgICAgKiBAcGFyYW0geyp9IGxhc3RHcm91cEVuZCBcclxuICAgICAqIEBwYXJhbSB7Kn0gbWFya0FuaSBcclxuICAgICAqL1xyXG4gICAgY2FsVGltZVdpdGhUcmVlKHQsIGxhc3RHcm91cFN0YXJ0LCBsYXN0R3JvdXBFbmQsIG1hcmtBbmkpIHtcclxuICAgICAgICBpZiAodC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxUaW1lV2l0aFRyZWUodC5jaGlsZHJlbltpXSwgdC5jaGlsZHJlbltpIC0gMV0uc3RhcnQsIHQuY2hpbGRyZW5baSAtIDFdLmVuZCwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsVGltZVdpdGhUcmVlKHQuY2hpbGRyZW5baV0sIC0xLCAtMSwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoICh0LnRpbWluZ1JlZikge1xyXG4gICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gbGFzdEdyb3VwU3RhcnQgKyB0LmRlbGF5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gbGFzdEdyb3VwRW5kICsgdC5kZWxheTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAgICAgdC5zdGFydCA9IHQuZGVsYXk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHQuc3RhcnQgPSBsYXN0R3JvdXBTdGFydCArIHQuZGVsYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0R3JvdXBTdGFydCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdC5zdGFydCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHQuZW5kID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQubWFya3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFya0FuaS5nZXQodC5tYXJrc1tpXSkuc3RhcnRUaW1lICs9IHQuc3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS5zdGFydFRpbWUgKyBtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS50b3RhbER1cmF0aW9uID4gdC5lbmQpIHtcclxuICAgICAgICAgICAgICAgIHQuZW5kID0gbWFya0FuaS5nZXQodC5tYXJrc1tpXSkuc3RhcnRUaW1lICsgbWFya0FuaS5nZXQodC5tYXJrc1tpXSkudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHQubWFya3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcE1hcmtJZCA9IHQubWFya3NbMF07XHJcbiAgICAgICAgICAgIGlmIChHcm91cGluZ1NwZWMuZnJhbWVzLmdldCh0LmlkKSkge1xyXG4gICAgICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuc2V0KHRtcE1hcmtJZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrLmdldCh0bXBNYXJrSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrLnNldCh0bXBNYXJrSWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLmF0dHJzID0gWydncm91cEJ5JywgJ3JlZmVyZW5jZScsICdkZWxheScsICdzb3J0JywgJ2dyb3VwaW5nJ107XHJcbkdyb3VwaW5nU3BlYy5zb3J0QXR0cnMgPSBbJ29yZGVyJywgJ2ZpZWxkJ107XHJcbkdyb3VwaW5nU3BlYy5vcmRlclR5cGVzID0ge1xyXG4gICAgYXNjZW5kaW5nOiAnYXNjZW5kaW5nJyxcclxuICAgIGRlc2NlbmRpbmc6ICdkZXNjZW5kaW5nJyxcclxuICAgIHJhbmRvbTogJ3JhbmRvbSdcclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLm5vZGVJZCA9IDA7XHJcbkdyb3VwaW5nU3BlYy5mcmFtZXMgPSBuZXcgTWFwKCk7Ly9rZXk6IG5vZGVJZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyBpcyBhIGtleWZyYW1lXHJcbkdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrID0gbmV3IE1hcCgpOy8va2V5ZnJhbWU6IG1hcmtpZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyB0aW1lIHBvaW50IGlzIGEga2V5ZnJhbWVcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBHcm91cGluZ1NwZWM7IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMnO1xyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4vQW5pbWF0aW9uU3BlYyc7XHJcbmltcG9ydCBDYW5pc1NwZWMgZnJvbSAnLi9DYW5pc1NwZWMnO1xyXG5cclxud2luZG93LmNhbmlzID0ge1xyXG4gICAgY2FuaXNPYmo6IHt9LFxyXG4gICAgZnJhbWVSYXRlOiBUaW1pbmdTcGVjLkZSQU1FX1JBVEUsXHJcbiAgICBkdXJhdGlvbjogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb24ud2hvbGVFbmRUaW1lO1xyXG4gICAgfSxcclxuICAgIHJlbmRlclNwZWM6IChzcGVjLCBzdGF0dXMsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdjbGVhcicsIG1zZzogJ3JlbmRlcmluZy4uLicgfTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2FuaXMuY2FuaXNPYmopLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYW5pcy5jYW5pc09iaiA9IG5ldyBDYW5pc1NwZWMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLmluaXQoc3BlYywgc3RhdHVzKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjYW5pcy5jYW5pc09iai5oYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLnJlbmRlcihjYWxsYmFjaywgc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBbmltYXRpb24ucmVzZXRBbGwoKTtcclxuICAgIH0sXHJcbiAgICBleHBvcnRKU09OOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIENhbmlzU3BlYy5sb3R0aWVKU09OO1xyXG4gICAgfSxcclxuICAgIHRlc3Q6IGZ1bmN0aW9uIChzcGVjKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgYSB0ZXN0ISAnLCBzcGVjKTtcclxuICAgIH1cclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuTGF5ZXJGYWN0b3J5ID0gZXhwb3J0cy5KU01vdmluTGF5ZXIgPSB2b2lkIDA7XHJcblxyXG52YXIgX2Vhc2luZyA9IHJlcXVpcmUoXCIuL2Vhc2luZ1wiKTtcclxuXHJcbnZhciBfcmVuZGVyID0gcmVxdWlyZShcIi4vcmVuZGVyXCIpO1xyXG5cclxudmFyIF9oZWxwZXIgPSByZXF1aXJlKFwiLi9oZWxwZXJcIik7XHJcblxyXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1dWlkL3Y0XCIpKTtcclxuXHJcbnZhciBfcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxyXG5cclxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cclxuXHJcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XHJcblxyXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cclxuXHJcbnZhciBKU01vdmluTGF5ZXIgPVxyXG4vKiNfX1BVUkVfXyovXHJcbmZ1bmN0aW9uICgpIHtcclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbkxheWVyLCBbe1xyXG4gICAga2V5OiBcImdldERlZmF1bHRQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wZXJ0eShrZXkpIHtcclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICBjYXNlICdwJzpcclxuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGtleSA9PSAnYScgPyB0aGlzLmFuY2hvciA6IHRoaXMucG9zaXRpb24pKTtcclxuXHJcbiAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICByZXR1cm4gWzEwMCwgMTAwLCAxMDBdO1xyXG5cclxuICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgIHJldHVybiAxMDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RtJzpcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHM6IHtcclxuICAgICAgICAgICAgICBrOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGU6IHtcclxuICAgICAgICAgICAgICBrOiAxMDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbzoge1xyXG4gICAgICAgICAgICAgIGs6IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNvbnZlcnRUb1N0YXRpY1Byb3BlcnR5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRvU3RhdGljUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSkge1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHJhbnNmb3JtW2tleV0uYSA9PSAxKSB7XHJcbiAgICAgICAgdmFyIHN0YXRpY1ZhbHVlID0gdHJhbnNmb3JtW2tleV0ua1swXS5zO1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHN0YXRpY1ZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSB8fCAhdHJhbnNmb3JtW2tleV0uYSkge1xyXG4gICAgICAgIGlmIChrZXkgPT0gJ2EnKSB7XHJcbiAgICAgICAgICB0aGlzLmFuY2hvciA9IHRyYW5zZm9ybVtrZXldID8gdHJhbnNmb3JtW2tleV0uayA6IFswLCAwLCAwXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT0gJ3AnKSB7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdHJhbnNmb3JtW2tleV0gPyB0cmFuc2Zvcm1ba2V5XS5rIDogWzAsIDAsIDBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB7XHJcbiAgICAgICAgICBhOiAxLFxyXG4gICAgICAgICAgazogW11cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZEtleWZyYW1lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkS2V5ZnJhbWUodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgdmFyIGlkeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogLTE7XHJcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgZWFzaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB3cmFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB0cnVlO1xyXG4gICAgICB2YXIgZXhpc3RLZXlmcmFtZSA9IHRyYW5zZm9ybVtrZXldLmsuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHgudCA9PSB0aW1lO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHJlYWR5VG9TZXQ7XHJcblxyXG4gICAgICBpZiAoZXhpc3RLZXlmcmFtZS5sZW5ndGgpIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0gZXhpc3RLZXlmcmFtZVswXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0ge1xyXG4gICAgICAgICAgdDogdGltZSxcclxuICAgICAgICAgIHM6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBwcmV2aW91c0tleWZyYW1lQ291bnQgPSB0cmFuc2Zvcm1ba2V5XS5rLnJlZHVjZShmdW5jdGlvbiAocCwgeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHgudCA8IHRpbWUgPyBwICsgMSA6IHA7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0uay5zcGxpY2UocHJldmlvdXNLZXlmcmFtZUNvdW50LCAwLCByZWFkeVRvU2V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVhc2luZykge1xyXG4gICAgICAgIHJlYWR5VG9TZXQubyA9IHtcclxuICAgICAgICAgIHg6IGVhc2luZ1swXVswXSxcclxuICAgICAgICAgIHk6IGVhc2luZ1swXVsxXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZHlUb1NldC5pID0ge1xyXG4gICAgICAgICAgeDogZWFzaW5nWzFdWzBdLFxyXG4gICAgICAgICAgeTogZWFzaW5nWzFdWzFdXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkeCA+PSAwKSB7XHJcbiAgICAgICAgcmVhZHlUb1NldC5zW2lkeF0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0LnMgPSB3cmFwICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgPyBbdmFsdWVdIDogdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZmluZFByb3BlcnR5Q29uZmlnXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5yb290LnNoYXBlc1swXS5pdC5maW5kKGZ1bmN0aW9uIChzaGFwZSkge1xyXG4gICAgICAgIHJldHVybiBzaGFwZS50eSA9PSBrZXk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJmaW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZ1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICB2YXIgZmluZCA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKGtleSk7XHJcbiAgICAgIGlmIChmaW5kKSByZXR1cm4gZmluZDtcclxuICAgICAgdmFyIGhhc1RyYW5zZm9ybSA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKCd0cicpO1xyXG5cclxuICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe1xyXG4gICAgICAgIHR5OiBrZXlcclxuICAgICAgfSwgdGhpcy5nZXREZWZhdWx0UHJvcGVydHkoa2V5KSk7XHJcblxyXG4gICAgICBpZiAoaGFzVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwU2hhcGVzID0gdGhpcy5yb290LnNoYXBlc1swXS5pdDtcclxuICAgICAgICBncm91cFNoYXBlcy5zcGxpY2UoZ3JvdXBTaGFwZXMubGVuZ3RoIC0gMSwgMCwgY29uZmlnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJvb3Quc2hhcGVzWzBdLml0LnB1c2goY29uZmlnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY29tbW9uUHJvcGVydHlNYXBwaW5nXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSkge1xyXG4gICAgICB2YXIgYmFzZSwgaywgaW5kZXg7XHJcblxyXG4gICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgJ3NjYWxlWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdzJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzY2FsZVknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IDE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnYW5jaG9yWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdhJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdhbmNob3JZJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3Qua3M7XHJcbiAgICAgICAgICBrID0gJ2EnO1xyXG4gICAgICAgICAgaW5kZXggPSAxO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncCc7XHJcbiAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdwJztcclxuICAgICAgICAgIGluZGV4ID0gMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdyb3RhdGUnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncic7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ29wYWNpdHknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1TdGFydCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZygndG0nKTtcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1FbmQnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMuZmluZE9ySW5zZXJ0UHJvcGVydHlDb25maWcoJ3RtJyk7XHJcbiAgICAgICAgICBrID0gJ2UnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICd0cmltT2Zmc2V0JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKCd0bScpO1xyXG4gICAgICAgICAgayA9ICdvJztcclxuICAgICAgICAgIGluZGV4ID0gLTE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnZmlsbENvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnZmwnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZUNvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZVdpZHRoJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAndyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3NoYXBlJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc2gnKTtcclxuICAgICAgICAgIGsgPSAna3MnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdmaWxsT3BhY2l0eSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kUHJvcGVydHlDb25maWcoJ2ZsJyk7XHJcbiAgICAgICAgICBrID0gJ28nO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzdHJva2VPcGFjaXR5JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBbYmFzZSwgaywgaW5kZXhdO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ1cGRhdGVUaW1lUmFuZ2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUaW1lUmFuZ2UoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QudmFsdWVzKHRoaXMudGltZVJhbmdlKSkuY29uY2F0KFsxXSkpO1xyXG4gICAgfVxyXG4gIH1dKTtcclxuXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbkxheWVyKHJlZikge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW5MYXllcik7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdFwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFuY2hvclwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBvc2l0aW9uXCIsIHZvaWQgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidGltZVJhbmdlXCIsIHt9KTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSByZWY7XHJcbiAgICB0aGlzLmFuY2hvciA9IFswLCAwLCAwXTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMCwgMCwgMF07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBrZXkgdGhlIG5hbWUgb2YgcHJvcGVydHkgdG8gYmUgc2V0XHJcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBzZXRcclxuICAgKi9cclxuXHJcblxyXG4gIF9jcmVhdGVDbGFzcyhKU01vdmluTGF5ZXIsIFt7XHJcbiAgICBrZXk6IFwic2V0U3RhdGljUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGF0aWNQcm9wZXJ0eShrZXksIHZhbHVlKSB7XHJcbiAgICAgIHRoaXMudGltZVJhbmdlW2tleV0gPSAxO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgdmFsdWUudW5pZm9ybSgpO1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUucGF0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGJhc2UsIGssIGluZGV4O1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TSA9IHRoaXMuY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSk7XHJcblxyXG4gICAgICB2YXIgX3RoaXMkY29tbW9uUHJvcGVydHlNMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJGNvbW1vblByb3BlcnR5TSwgMyk7XHJcblxyXG4gICAgICBiYXNlID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlswXTtcclxuICAgICAgayA9IF90aGlzJGNvbW1vblByb3BlcnR5TTJbMV07XHJcbiAgICAgIGluZGV4ID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlsyXTtcclxuXHJcbiAgICAgIGlmICghayB8fCBpbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5yb290LnR5ID09IDUpIHtcclxuICAgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5yb290LnQuZDtcclxuICAgICAgICAgICAgICBkb2MuayA9IFtkb2Mua1swXV07XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0udCA9IDA7XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0ucy50ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9TdGF0aWNQcm9wZXJ0eShiYXNlLCBrKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkgYmFzZVtrXS5rW2luZGV4XSA9IHZhbHVlO2Vsc2UgYmFzZVtrXS5rID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ga2V5IHRoZSBuYW1lIG9mIHByb3BlcnR5IHRvIGJlIHNldFxyXG4gICAgICogQHBhcmFtIHN0YXJ0RnJhbWUgZnJhbWUgbnVtYmVyIHRvIHN0YXJ0IHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRGcmFtZSBmcmFtZSBudW1iZXIgdG8gZW5kIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIHZhbHVlIHRvIGJlIHNldCBpbiBzdGFydCBvZiBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSB2YWx1ZSB0byBiZSBzZXQgaW4gZW5kIG9mIGFuaW1hdGlvblxyXG4gICAgICogQHBhcmFtIGVhc2luZyBlYXNpbmcgZnVuY3Rpb24sIGRlZmF1bHQgaXMgbGluZWFyXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInNldEFuaW1hdGFibGVQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFuaW1hdGFibGVQcm9wZXJ0eShrZXksIHN0YXJ0RnJhbWUsIGVuZEZyYW1lLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZWFzaW5nKSB7XHJcbiAgICAgIGlmIChlbmRGcmFtZSA8PSBzdGFydEZyYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmQgZnJhbWUgc2hvdWxkIGJlIGxhcmdlciB0aGFuIHN0YXJ0IGZyYW1lLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRpbWVSYW5nZVtrZXldID0gTWF0aC5tYXgodGhpcy50aW1lUmFuZ2Vba2V5XSB8fCAwLCBlbmRGcmFtZSArIDEpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKCFlYXNpbmcpIHtcclxuICAgICAgICBlYXNpbmcgPSBfZWFzaW5nLkVhc2luZ0ZhY3RvcnkubGluZWFyKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGFydFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyIHx8IGVuZFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICByZXR1cm4gdiBpbnN0YW5jZW9mIF9wYXRoLlBhdGhNYWtlciAmJiB2LnVuaWZvcm0oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0VmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIgJiYgZW5kVmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIpIHtcclxuICAgICAgICAgIHZhciBzdGFydExpbmVDb3VudCA9IHN0YXJ0VmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICB2YXIgZW5kTGluZUNvdW50ID0gZW5kVmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgaWYgKCEoc3RhcnRMaW5lQ291bnQgPD0gMCAmJiBlbmRMaW5lQ291bnQgPD0gMCkpIHtcclxuICAgICAgICAgICAgaWYgKE1hdGgubWluKHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpIDw9IDAgJiYgTWF0aC5tYXgoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG5lZWRDb3B5ID0gc3RhcnRMaW5lQ291bnQgPD0gMCA/IHN0YXJ0VmFsdWUgOiBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICB2YXIgbmVlZExlbmd0aCA9IE1hdGgubWF4KHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpO1xyXG4gICAgICAgICAgICAgIFsnaScsICdvJywgJ3YnXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIG5lZWRDb3B5LnBhdGhba2V5XSA9IEFycmF5KG5lZWRMZW5ndGgpLmZpbGwobmVlZENvcHkucGF0aFtrZXldLmxlbmd0aCA/IG5lZWRDb3B5LnBhdGhba2V5XVswXSA6IFswLCAwXSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNvbW1vbk11bHRpcGxlID0gKDAsIF9oZWxwZXIubGVhc3RDb21tb25NdWx0aXBsZSkoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCk7XHJcbiAgICAgICAgICAgICAgc3RhcnRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gc3RhcnRMaW5lQ291bnQpKTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gZW5kTGluZUNvdW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfbWFwID0gW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5tYXAoZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgIHJldHVybiB2IGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyID8gdi5wYXRoIDogdjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XHJcblxyXG4gICAgICAgIHN0YXJ0VmFsdWUgPSBfbWFwMlswXTtcclxuICAgICAgICBlbmRWYWx1ZSA9IF9tYXAyWzFdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgIHdyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTMgPSB0aGlzLmNvbW1vblByb3BlcnR5TWFwcGluZyhrZXkpO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRjb21tb25Qcm9wZXJ0eU0zLCAzKTtcclxuXHJcbiAgICAgIGJhc2UgPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzBdO1xyXG4gICAgICBrID0gX3RoaXMkY29tbW9uUHJvcGVydHlNNFsxXTtcclxuICAgICAgaW5kZXggPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzJdO1xyXG5cclxuICAgICAgaWYgKCFrIHx8IGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QudHkgPT0gNSkge1xyXG4gICAgICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3QudDtcclxuICAgICAgICAgICAgICB2YXIgdGV4dFByb3AgPSBiYXNlLmQua1swXS5zO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBTdGFydFZhbHVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0ZXh0UHJvcCkpO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBFbmRWYWx1ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGV4dFByb3ApKTtcclxuICAgICAgICAgICAgICB0bXBTdGFydFZhbHVlLnQgPSBzdGFydFZhbHVlO1xyXG4gICAgICAgICAgICAgIHRtcEVuZFZhbHVlLnQgPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICBzdGFydFZhbHVlID0gdG1wU3RhcnRWYWx1ZTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IHRtcEVuZFZhbHVlO1xyXG4gICAgICAgICAgICAgIGsgPSAnZCc7XHJcbiAgICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICB3cmFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGVhc2luZyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkoYmFzZSwgayk7XHJcbiAgICAgICAgdGhpcy5hZGRLZXlmcmFtZShiYXNlLCBrLCBpbmRleCwgc3RhcnRGcmFtZSwgc3RhcnRWYWx1ZSwgZWFzaW5nLCB3cmFwKTtcclxuICAgICAgICB0aGlzLmFkZEtleWZyYW1lKGJhc2UsIGssIGluZGV4LCBlbmRGcmFtZSwgZW5kVmFsdWUsIF9lYXNpbmcuRWFzaW5nRmFjdG9yeS5saW5lYXIoKSwgd3JhcCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluTGF5ZXI7XHJcbn0oKTtcclxuXHJcbmV4cG9ydHMuSlNNb3ZpbkxheWVyID0gSlNNb3ZpbkxheWVyO1xyXG5cclxudmFyIExheWVyRmFjdG9yeSA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIExheWVyRmFjdG9yeSgpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXllckZhY3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKExheWVyRmFjdG9yeSwgbnVsbCwgW3tcclxuICAgIGtleTogXCJnZW5lcmF0ZVRyYW5zZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlVHJhbnNmb3JtKGNvb3JkaW5hdGUpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBvOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICByOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcDoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFtjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYToge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFswLCAwLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgczoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFsxMDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlIHRoZSBib3VuZGluZyBib3ggb2Ygc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZHMgdG8gY2FsY3VsYXRlIHRoZSBib3VuZGluZyBib3hcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiYm91bmRpbmdCb3hcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBib3VuZGluZ0JveChkb20pIHtcclxuICAgICAgdmFyIGJvdW5kaW5nQm94ID0gKDAsIF9oZWxwZXIuZ2V0Qm91bmRpbmdCb3gpKGRvbSkubWFwKGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIGkgPCAyID8gdiAtIDEgOiB2ICsgMTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlY3QuYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KGJvdW5kaW5nQm94KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSB0aGUgc2FtZSBzaGFwZSBvZiBzdmcgcGF0aFxyXG4gICAgICogQHBhcmFtIGRvbSBzdmcgcGF0aCBlbGVtZW50IHJlcHJlc2VudCB0aGUgc2hhcGVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2hhcGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGFwZShkb20pIHtcclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShjb29yZGluYXRlKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICBzaGFwZXM6ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIHJlY3RhbmdsZVxyXG4gICAgICogQHBhcmFtIGxlZnQgbGVmdCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gdG9wIHRvcCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgcmVjdFxyXG4gICAgICogQHBhcmFtIGhlaWdodCBoZWlnaHQgb2YgcmVjdFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJyZWN0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShbbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ3JlY3QnLCBbd2lkdGgsIGhlaWdodF0pXVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSBjeCB4IGNlbnRlciBvZiBlbGxpcHNlXHJcbiAgICAgKiBAcGFyYW0gY3kgeSBjZW50ZXIgb2YgZWxsaXBzZVxyXG4gICAgICogQHBhcmFtIHJ4IHggcmFkaXVzIG9mIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSByeSB5IHJhZGl1cyBvZiBlbGxpcHNlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVsbGlwc2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbGxpcHNlKGN4LCBjeSwgcngsIHJ5KSB7XHJcbiAgICAgIHZhciBsYXllciA9IHtcclxuICAgICAgICB0eTogNCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oW2N4IC0gcngsIGN5IC0gcnksIDIgKiByeCwgMiAqIHJ5XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ2VsbGlwc2UnLCBbcngsIHJ5XSldXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhIGxheWVyIGJ5IGFzc2V0IElEXHJcbiAgICAgKiBAcGFyYW0gaWQgYXNzZXQgcmVmZXJlbmNlIElEXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlZlwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZihpZCkge1xyXG4gICAgICB2YXIgbGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKHtcclxuICAgICAgICB0eTogMCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oWzAsIDAsIDAsIDBdKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICB3OiA5ZTksXHJcbiAgICAgICAgaDogOWU5LFxyXG4gICAgICAgIHJlZklkOiBpZFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGxheWVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBtYWtlIGEgY29tcGxleCBsYXllciBieSBhbiBhcmJpdHJhcnkgc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZCB0byBiZSBwYXJzZWRcclxuICAgICAqIEBwYXJhbSBhc3NldExpc3QgYSBsaXN0IGNvbnRhaW5zIGltYWdlL2xheWVyIGFzc2V0XHJcbiAgICAgKiBAcGFyYW0gZm9udExpc3QgYSBsaXN0IGNvbnRhaW5zIGZvbnQgYXNzZXRcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiaGllcmFyY2h5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGllcmFyY2h5KGRvbSwgYXNzZXRMaXN0LCBmb250TGlzdCkge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGRvbVR5cGU7XHJcblxyXG4gICAgICBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHVGV4dEVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gNTtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gMjtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xyXG4gICAgICAgIGRvbVR5cGUgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvbVR5cGUgPSA0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbGF5ZXIgPSB7XHJcbiAgICAgICAgdHk6IGRvbVR5cGUsXHJcbiAgICAgICAgZGRkOiAwLFxyXG4gICAgICAgIHNyOiAxLFxyXG4gICAgICAgIGFvOiAwLFxyXG4gICAgICAgIGtzOiB0aGlzLmdlbmVyYXRlVHJhbnNmb3JtKGRvbVR5cGUgPT0gMCA/IFswLCAwLCAwLCAwXSA6IGNvb3JkaW5hdGUpLFxyXG4gICAgICAgIGlwOiAwLFxyXG4gICAgICAgIG9wOiAxLFxyXG4gICAgICAgIHN0OiAwLFxyXG4gICAgICAgIGJtOiAwXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzd2l0Y2ggKGRvbVR5cGUpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICB2YXIgZG9tTGVhdmVzID0gKDAsIF9oZWxwZXIuZ2V0TGVhZk5vZGVzKShkb20pO1xyXG5cclxuICAgICAgICAgIGlmIChkb21MZWF2ZXMuZmlsdGVyKGZ1bmN0aW9uIChkb20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvbSBpbnN0YW5jZW9mIFNWR1RleHRFbGVtZW50IHx8IGRvbSBpbnN0YW5jZW9mIFNWR0ltYWdlRWxlbWVudDtcclxuICAgICAgICAgIH0pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcHJlY29tcExheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgICAgIHZhciBwcmVDb21wQXNzZXQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHByZUNvbXBSZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgICAgICAgIGRvbUxlYXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQgJiYgIShkIGluc3RhbmNlb2YgU1ZHR0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVDb21wQXNzZXQudW5zaGlmdChfdGhpcy5oaWVyYXJjaHkoZCwgYXNzZXRMaXN0LCBmb250TGlzdCkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByZUNvbXBBc3NldC5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgIGxheWVyLnJvb3Qub3AgPSA5ZTk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcmVjb21wTGF5ZXIudyA9IGNvb3JkaW5hdGVbMF0gKyBjb29yZGluYXRlWzJdICsgMTtcclxuICAgICAgICAgICAgcHJlY29tcExheWVyLmggPSBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSArIDE7XHJcbiAgICAgICAgICAgIHByZWNvbXBMYXllci5yZWZJZCA9IHByZUNvbXBSZWZJZDtcclxuICAgICAgICAgICAgYXNzZXRMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgIGlkOiBwcmVDb21wUmVmSWQsXHJcbiAgICAgICAgICAgICAgbGF5ZXJzOiBwcmVDb21wQXNzZXQubWFwKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxheWVyLnJvb3Q7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgX3NoYXBlTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgX3NoYXBlTGF5ZXIudHkgPSA0O1xyXG4gICAgICAgICAgICBfc2hhcGVMYXllci5rcyA9IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oY29vcmRpbmF0ZSk7XHJcbiAgICAgICAgICAgIF9zaGFwZUxheWVyLnNoYXBlcyA9ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgdmFyIGltYWdlTGF5ZXIgPSBsYXllcjtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlckltYWdlID0gKDAsIF9yZW5kZXIucmVuZGVySW1hZ2UpKGRvbSwgYXNzZXRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVySW1hZ2UyID0gX3NsaWNlZFRvQXJyYXkoX3JlbmRlckltYWdlLCAyKSxcclxuICAgICAgICAgICAgICBpbWFnZVJlZklkID0gX3JlbmRlckltYWdlMlswXSxcclxuICAgICAgICAgICAgICBpbWFnZUFzc2V0ID0gX3JlbmRlckltYWdlMlsxXTtcclxuXHJcbiAgICAgICAgICBpbWFnZUxheWVyLnJlZklkID0gaW1hZ2VSZWZJZDtcclxuICAgICAgICAgIGlmICghYXNzZXRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCA9PSBpbWFnZVJlZklkO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBhc3NldExpc3QucHVzaChpbWFnZUFzc2V0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICB2YXIgc2hhcGVMYXllciA9IGxheWVyO1xyXG4gICAgICAgICAgc2hhcGVMYXllci5zaGFwZXMgPSAoMCwgX3JlbmRlci5yZW5kZXIpKGRvbSk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgdmFyIHRleHRMYXllciA9IGxheWVyOyAvLyBtb3ZlIHRleHRMYXllcidzIHBvc2l0aW9uIHRvIHRleHQtYW5jaG9yLXJlbGF0ZWRcclxuXHJcbiAgICAgICAgICB2YXIgYmFzZUxpbmVIZWlnaHQgPSAoMCwgX2hlbHBlci5nZXRCYXNlbGluZUhlaWdodCkoZG9tKTtcclxuICAgICAgICAgIHZhciB0ZXh0QW5jaG9yID0gKDAsIF9oZWxwZXIuZW5jb2RlVGV4dEFuY2hvcikoZ2V0Q29tcHV0ZWRTdHlsZShkb20pLnRleHRBbmNob3IpO1xyXG4gICAgICAgICAgdmFyIHRleHRBbmNob3JXZWlnaHQgPSBbMCwgMSwgMC41XVt0ZXh0QW5jaG9yXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5wLmsgPSBbY29vcmRpbmF0ZVswXSArIGNvb3JkaW5hdGVbMl0gKiB0ZXh0QW5jaG9yV2VpZ2h0LCBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSAtIGJhc2VMaW5lSGVpZ2h0LCAwXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5vLmsgPSB+fihwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUoZG9tKS5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwKTtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlclRleHQgPSAoMCwgX3JlbmRlci5yZW5kZXJUZXh0KShkb20sIGZvbnRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVyVGV4dDIgPSBfc2xpY2VkVG9BcnJheShfcmVuZGVyVGV4dCwgMiksXHJcbiAgICAgICAgICAgICAgdGV4dERhdGEgPSBfcmVuZGVyVGV4dDJbMF0sXHJcbiAgICAgICAgICAgICAgZm9udCA9IF9yZW5kZXJUZXh0MlsxXTtcclxuXHJcbiAgICAgICAgICB0ZXh0TGF5ZXIudCA9IHRleHREYXRhO1xyXG4gICAgICAgICAgaWYgKCFmb250TGlzdC5saXN0LmZpbHRlcihmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZi5mTmFtZSA9PSBmb250LmZOYW1lO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBmb250TGlzdC5saXN0LnB1c2goZm9udCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG1vdmluTGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgICAgcmV0dXJuIG1vdmluTGF5ZXI7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gTGF5ZXJGYWN0b3J5O1xyXG59KCk7XHJcblxyXG5leHBvcnRzLkxheWVyRmFjdG9yeSA9IExheWVyRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlzWVhsbGNpNTBjeUpkTENKdVlXMWxjeUk2V3lKS1UwMXZkbWx1VEdGNVpYSWlMQ0pyWlhraUxDSktVMDlPSWl3aWNHRnljMlVpTENKemRISnBibWRwWm5raUxDSmhibU5vYjNJaUxDSndiM05wZEdsdmJpSXNJbk1pTENKcklpd2laU0lzSW04aUxDSjBjbUZ1YzJadmNtMGlMQ0poSWl3aVoyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUlpd2ljM1JoZEdsalZtRnNkV1VpTENKcFpIZ2lMQ0owYVcxbElpd2lkbUZzZFdVaUxDSmxZWE5wYm1jaUxDSjNjbUZ3SWl3aVpYaHBjM1JMWlhsbWNtRnRaU0lzSW1acGJIUmxjaUlzSW5naUxDSjBJaXdpY21WaFpIbFViMU5sZENJc0lteGxibWQwYUNJc0luQnlaWFpwYjNWelMyVjVabkpoYldWRGIzVnVkQ0lzSW5KbFpIVmpaU0lzSW5BaUxDSnpjR3hwWTJVaUxDSjVJaXdpYVNJc0lrRnljbUY1SWl3aWNtOXZkQ0lzSW5Ob1lYQmxjeUlzSW1sMElpd2labWx1WkNJc0luTm9ZWEJsSWl3aWRIa2lMQ0ptYVc1a1VISnZjR1Z5ZEhsRGIyNW1hV2NpTENKb1lYTlVjbUZ1YzJadmNtMGlMQ0pqYjI1bWFXY2lMQ0puY205MWNGTm9ZWEJsY3lJc0luQjFjMmdpTENKaVlYTmxJaXdpYVc1a1pYZ2lMQ0pyY3lJc0ltWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbklpd2liM0FpTENKTllYUm9JaXdpYldGNElpd2lUMkpxWldOMElpd2lkbUZzZFdWeklpd2lkR2x0WlZKaGJtZGxJaXdpY21WbUlpd2lkWEJrWVhSbFZHbHRaVkpoYm1kbElpd2lVR0YwYUUxaGEyVnlJaXdpZFc1cFptOXliU0lzSW5CaGRHZ2lMQ0pqYjIxdGIyNVFjbTl3WlhKMGVVMWhjSEJwYm1jaUxDSjFibVJsWm1sdVpXUWlMQ0prYjJNaUxDSmtJaXdpWTI5dWMyOXNaU0lzSW1WeWNtOXlJaXdpUlhKeWIzSWlMQ0pqYjI1MlpYSjBWRzlUZEdGMGFXTlFjbTl3WlhKMGVTSXNJbk4wWVhKMFJuSmhiV1VpTENKbGJtUkdjbUZ0WlNJc0luTjBZWEowVm1Gc2RXVWlMQ0psYm1SV1lXeDFaU0lzSWtWaGMybHVaMFpoWTNSdmNua2lMQ0pzYVc1bFlYSWlMQ0ptYjNKRllXTm9JaXdpZGlJc0luTjBZWEowVEdsdVpVTnZkVzUwSWl3aVpXNWtUR2x1WlVOdmRXNTBJaXdpYldsdUlpd2libVZsWkVOdmNIa2lMQ0p1WldWa1RHVnVaM1JvSWl3aVptbHNiQ0lzSW1OdmJXMXZiazExYkhScGNHeGxJaXdpZFhCellXMXdiR1VpTENKeWIzVnVaQ0lzSW0xaGNDSXNJblJsZUhSUWNtOXdJaXdpZEcxd1UzUmhjblJXWVd4MVpTSXNJblJ0Y0VWdVpGWmhiSFZsSWl3aVkyOXVkbVZ5ZEZSdlFXNXBiV0YwWVdKc1pWQnliM0JsY25SNUlpd2lZV1JrUzJWNVpuSmhiV1VpTENKTVlYbGxja1poWTNSdmNua2lMQ0pqYjI5eVpHbHVZWFJsSWl3aWNpSXNJbVJ2YlNJc0ltSnZkVzVrYVc1blFtOTRJaXdpY21WamRDSXNJbXhoZVdWeUlpd2laR1JrSWl3aWMzSWlMQ0poYnlJc0ltZGxibVZ5WVhSbFZISmhibk5tYjNKdElpd2lhWEFpTENKemRDSXNJbUp0SWl3aWJHVm1kQ0lzSW5SdmNDSXNJbmRwWkhSb0lpd2lhR1ZwWjJoMElpd2lZM2dpTENKamVTSXNJbko0SWl3aWNua2lMQ0pwWkNJc0luY2lMQ0pvSWl3aWNtVm1TV1FpTENKaGMzTmxkRXhwYzNRaUxDSm1iMjUwVEdsemRDSXNJbVJ2YlZSNWNHVWlMQ0pUVmtkVVpYaDBSV3hsYldWdWRDSXNJbE5XUjBsdFlXZGxSV3hsYldWdWRDSXNJbE5XUjBkRmJHVnRaVzUwSWl3aVpHOXRUR1ZoZG1Weklpd2ljSEpsWTI5dGNFeGhlV1Z5SWl3aWNISmxRMjl0Y0VGemMyVjBJaXdpY0hKbFEyOXRjRkpsWmtsa0lpd2lVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBJaXdpZFc1emFHbG1kQ0lzSW1ocFpYSmhjbU5vZVNJc0lteGhlV1Z5Y3lJc0luTm9ZWEJsVEdGNVpYSWlMQ0pwYldGblpVeGhlV1Z5SWl3aWFXMWhaMlZTWldaSlpDSXNJbWx0WVdkbFFYTnpaWFFpTENKMFpYaDBUR0Y1WlhJaUxDSmlZWE5sVEdsdVpVaGxhV2RvZENJc0luUmxlSFJCYm1Ob2IzSWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpZEdWNGRFRnVZMmh2Y2xkbGFXZG9kQ0lzSW5CaGNuTmxSbXh2WVhRaUxDSm1hV3hzVDNCaFkybDBlU0lzSW5SbGVIUkVZWFJoSWl3aVptOXVkQ0lzSW14cGMzUWlMQ0ptSWl3aVprNWhiV1VpTENKdGIzWnBia3hoZVdWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJTV0ZCTEZrN096czdPM1ZEUVV0clFrTXNSeXhGUVVGaE8wRkJRM0JETEdOQlFWRkJMRWRCUVZJN1FVRkRTU3hoUVVGTExFZEJRVXc3UVVGRFFTeGhRVUZMTEVkQlFVdzdRVUZEU1N4cFFrRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxTQ3hIUVVGSExFbEJRVWtzUjBGQlVDeEhRVUZoTEV0QlFVdEpMRTFCUVd4Q0xFZEJRVEpDTEV0QlFVdERMRkZCUVM5RExFTkJRVmdzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWRCUVV3N1FVRkRTU3hwUWtGQlR5eERRVUZETEVkQlFVUXNSVUZCVFN4SFFVRk9MRVZCUVZjc1IwRkJXQ3hEUVVGUU96dEJRVU5LTEdGQlFVc3NSMEZCVER0QlFVTkpMR2xDUVVGUExFZEJRVkE3TzBGQlEwb3NZVUZCU3l4SFFVRk1PMEZCUTBrc2FVSkJRVThzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWxCUVV3N1FVRkRTU3hwUWtGQlR6dEJRVU5JUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwTXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGRVFUdEJRVWxJUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwUXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGS1FUdEJRVTlJUlN4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwWXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW83UVVGUVFTeFhRVUZRT3p0QlFWZEtPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRWFpDVWp0QlFYbENTRHM3T3pSRFFVTXJRa2NzVXl4RlFVRm5RbFlzUnl4RlFVRmhPMEZCUTNwRUxGVkJRVWtzUTBGQlExVXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRV1FzUlVGQmNVSTdRVUZEYWtKVkxGRkJRVUZCTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFZEJRV2xDTzBGQlEySlhMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeERRVVJWTzBGQlJXSktMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeExRVUZMU3l4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJN1FVRkdWU3hUUVVGcVFqdEJRVWxJT3p0QlFVTkVMRlZCUVVsVkxGTkJRVk1zUTBGQlExWXNSMEZCUkN4RFFVRlVMRU5CUVdWWExFTkJRV1lzU1VGQmIwSXNRMEZCZUVJc1JVRkJNa0k3UVVGRGRrSXNXVUZCVFVVc1YwRkJWeXhIUVVGSFNDeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDUkN4RFFVRjRRenRCUVVOQlNTeFJRVUZCUVN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWp0QlFVTmlWeXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFVlR0QlFVVmlTaXhWUVVGQlFTeERRVUZETEVWQlFVVk5PMEZCUmxVc1UwRkJha0k3UVVGSlNEdEJRVU5LT3pzN1owUkJRMjFEU0N4VExFVkJRV2RDVml4SExFVkJRV0U3UVVGRE4wUXNWVUZCU1N4RFFVRkRWU3hUUVVGVExFTkJRVU5XTEVkQlFVUXNRMEZCVml4SlFVRnRRaXhEUVVGRFZTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFZ5eERRVUYyUXl4RlFVRXdRenRCUVVOMFF5eFpRVUZKV0N4SFFVRkhMRWxCUVVrc1IwRkJXQ3hGUVVGblFqdEJRVU5hTEdWQlFVdEpMRTFCUVV3c1IwRkJZMDBzVTBGQlV5eERRVUZEVml4SFFVRkVMRU5CUVZRc1IwRkJhVUpWTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFTkJRV1ZQTEVOQlFXaERMRWRCUVc5RExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFMRU5CUVd4RU8wRkJRMGc3TzBGQlEwUXNXVUZCU1ZBc1IwRkJSeXhKUVVGSkxFZEJRVmdzUlVGQlowSTdRVUZEV2l4bFFVRkxTeXhSUVVGTUxFZEJRV2RDU3l4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWxVc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJhRU1zUjBGQmIwTXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGQmNFUTdRVUZEU0RzN1FVRkRSRWNzVVVGQlFVRXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRVlFzUjBGQmFVSTdRVUZEWWxjc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlJGVTdRVUZGWWtvc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlJsVXNVMEZCYWtJN1FVRkpTRHRCUVVOS096czdaME5CUTIxQ1J5eFRMRVZCUVdkQ1ZpeEhMRVZCUVN0SE8wRkJRVUVzVlVGQmJFZGpMRWRCUVd0SExIVkZRVUZ3Uml4RFFVRkRMRU5CUVcxR08wRkJRVUVzVlVGQmFFWkRMRWxCUVdkR08wRkJRVUVzVlVGQmJFVkRMRXRCUVd0Rk8wRkJRVUVzVlVGQkwwTkRMRTFCUVN0RE8wRkJRVUVzVlVGQmRFSkRMRWxCUVhOQ0xIVkZRVUZPTEVsQlFVMDdRVUZETDBrc1ZVRkJUVU1zWVVGQllTeEhRVUZIVkN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeERRVUZsVHl4RFFVRm1MRU5CUVdsQ1lTeE5RVUZxUWl4RFFVRjNRaXhWUVVGRFF5eERRVUZFTzBGQlFVRXNaVUZCV1VFc1EwRkJReXhEUVVGRFF5eERRVUZHTEVsQlFVOVFMRWxCUVc1Q08wRkJRVUVzVDBGQmVFSXNRMEZCZEVJN1FVRkRRU3hWUVVGSlVTeFZRVUZLT3p0QlFVTkJMRlZCUVVsS0xHRkJRV0VzUTBGQlEwc3NUVUZCYkVJc1JVRkJNRUk3UVVGRGRFSkVMRkZCUVVGQkxGVkJRVlVzUjBGQlIwb3NZVUZCWVN4RFFVRkRMRU5CUVVRc1EwRkJNVUk3UVVGRFNDeFBRVVpFTEUxQlJVODdRVUZEU0Vrc1VVRkJRVUVzVlVGQlZTeEhRVUZITzBGQlExUkVMRlZCUVVGQkxFTkJRVU1zUlVGQlJWQXNTVUZFVFR0QlFVVlVWQ3hWUVVGQlFTeERRVUZETEVWQlFVVXNTMEZCUzAwc2EwSkJRVXdzUTBGQmQwSmFMRWRCUVhoQ08wRkJSazBzVTBGQllqdEJRVWxCTEZsQlFVMTVRaXh4UWtGQmNVSXNSMEZCUjJZc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJaaXhEUVVGcFFtMUNMRTFCUVdwQ0xFTkJRWGRDTEZWQlFVTkRMRU5CUVVRc1JVRkJXVTRzUTBGQldqdEJRVUZCTEdsQ1FVRjFRa0VzUTBGQlF5eERRVUZEUXl4RFFVRkdMRWRCUVUxUUxFbEJRVTRzUjBGQllWa3NRMEZCUXl4SFFVRkhMRU5CUVdwQ0xFZEJRWEZDUVN4RFFVRTFRenRCUVVGQkxGTkJRWGhDTEVWQlFYVkZMRU5CUVhaRkxFTkJRVGxDTzBGQlEwRnFRaXhSUVVGQlFTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENjVUlzVFVGQmFrSXNRMEZCZDBKSUxIRkNRVUY0UWl4RlFVRXJReXhEUVVFdlF5eEZRVUZyUkVZc1ZVRkJiRVE3UVVGRFNEczdRVUZEUkN4VlFVRkpUaXhOUVVGS0xFVkJRVms3UVVGRFVrMHNVVUZCUVVFc1ZVRkJWU3hEUVVGRFpDeERRVUZZTEVkQlFXVTdRVUZEV0Zrc1ZVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZpeERRVVJSTzBGQlJWaFpMRlZCUVVGQkxFTkJRVU1zUlVGQlJWb3NUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVkxFTkJRVlk3UVVGR1VTeFRRVUZtTzBGQlNVRk5MRkZCUVVGQkxGVkJRVlVzUTBGQlEwOHNRMEZCV0N4SFFVRmxPMEZCUTFoVUxGVkJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZWTEVOQlFWWXNRMEZFVVR0QlFVVllXU3hWUVVGQlFTeERRVUZETEVWQlFVVmFMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlZTeERRVUZXTzBGQlJsRXNVMEZCWmp0QlFVbElPenRCUVVORUxGVkJRVWxJTEVkQlFVY3NTVUZCU1N4RFFVRllMRVZCUVdNN1FVRkRWbE1zVVVGQlFVRXNWVUZCVlN4RFFVRkRha0lzUTBGQldDeERRVUZoVVN4SFFVRmlMRWxCUVc5Q1JTeExRVUZ3UWp0QlFVTklMRTlCUmtRc1RVRkZUenRCUVVOSVR5eFJRVUZCUVN4VlFVRlZMRU5CUVVOcVFpeERRVUZZTEVkQlFXVlpMRWxCUVVrc1NVRkJTU3hGUVVGRlJpeExRVUZMTEZsQlFWbGxMRXRCUVc1Q0xFTkJRVklzUjBGQmIwTXNRMEZCUTJZc1MwRkJSQ3hEUVVGd1F5eEhRVUU0UTBFc1MwRkJOMFE3UVVGRFNEdEJRVU5LT3pzN2RVTkJRekJDYUVJc1J5eEZRVUZoTzBGQlEzQkRMR0ZCUVZNc1MwRkJTMmRETEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhKRUxFTkJRWGxFUXl4SlFVRjZSQ3hEUVVFNFJDeFZRVUZCUXl4TFFVRkxPMEZCUVVFc1pVRkRkRVZCTEV0QlFVc3NRMEZCUTBNc1JVRkJUaXhKUVVGWmNrTXNSMEZFTUVRN1FVRkJRU3hQUVVGdVJTeERRVUZRTzBGQlIwZzdPenNyUTBGRGEwTkJMRWNzUlVGQllUdEJRVU0xUXl4VlFVRk5iVU1zU1VGQlNTeEhRVUZITEV0QlFVdEhMR3RDUVVGTUxFTkJRWGRDZEVNc1IwRkJlRUlzUTBGQllqdEJRVU5CTEZWQlFVbHRReXhKUVVGS0xFVkJRVlVzVDBGQlQwRXNTVUZCVUR0QlFVTldMRlZCUVUxSkxGbEJRVmtzUjBGQlJ5eExRVUZMUkN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRnlRanM3UVVGRFFTeFZRVUZOUlN4TlFVRk5PMEZCUTFKSUxGRkJRVUZCTEVWQlFVVXNSVUZCUlhKRE8wRkJSRWtzVTBGRlRDeExRVUZMV1N4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJc1EwRkdTeXhEUVVGYU96dEJRVWxCTEZWQlFVbDFReXhaUVVGS0xFVkJRV3RDTzBGQlEyUXNXVUZCVFVVc1YwRkJWeXhIUVVGTExFdEJRVXRVTEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhwRk8wRkJRMEZQTEZGQlFVRkJMRmRCUVZjc1EwRkJRMklzVFVGQldpeERRVUZ0UW1Fc1YwRkJWeXhEUVVGRGFrSXNUVUZCV2l4SFFVRnhRaXhEUVVGNFF5eEZRVUV5UXl4RFFVRXpReXhGUVVFNFEyZENMRTFCUVRsRE8wRkJRMGdzVDBGSVJDeE5RVWRQTzBGQlEwUXNZVUZCUzFJc1NVRkJUaXhEUVVFd1FrTXNUVUZCTVVJc1EwRkJhME1zUTBGQmJFTXNRMEZCUkN4RFFVRnhSRU1zUlVGQmNrUXNRMEZCZVVSUkxFbEJRWHBFTEVOQlFUaEVSaXhOUVVFNVJEdEJRVU5JT3p0QlFVTkVMR0ZCUVU5QkxFMUJRVkE3UVVGRFNEczdPekJEUVVNMlFuaERMRWNzUlVGQmFVVTdRVUZETTBZc1ZVRkJTVEpETEVsQlFVb3NSVUZCWlhCRExFTkJRV1lzUlVGQmMwTnhReXhMUVVGMFF6czdRVUZEUVN4alFVRlJOVU1zUjBGQlVqdEJRVU5KTEdGQlFVc3NVVUZCVER0QlFVTkpNa01zVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0WUxFbEJRVXdzUTBGQlZXRXNSVUZCYWtJN1FVRkRRWFJETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlVqdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1VVRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMWdzU1VGQlRDeERRVUZWWVN4RlFVRnFRanRCUVVOQmRFTXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZTTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhUUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFdDeEpRVUZNTEVOQlFWVmhMRVZCUVdwQ08wRkJRMEYwUXl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFWSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExGTkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRZTEVsQlFVd3NRMEZCVldFc1JVRkJha0k3UVVGRFFYUkRMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCVWp0QlFVTkJPenRCUVVOS0xHRkJRVXNzUjBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMxZ3NTVUZCVEN4RFFVRlZZU3hGUVVGcVFqdEJRVU5CZEVNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRlNPMEZCUTBFN08wRkJRMG9zWVVGQlN5eEhRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMV0N4SlFVRk1MRU5CUVZWaExFVkJRV3BDTzBGQlEwRjBReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVZJN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZGQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdFlMRWxCUVV3c1EwRkJWV0VzUlVGQmFrSTdRVUZEUVhSRExGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4VFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZoTEVWQlFXcENPMEZCUTBGMFF5eFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1YwRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMGNzTUVKQlFVd3NRMEZCWjBNc1NVRkJhRU1zUTBGQlVEdEJRVU5CZGtNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVZRN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZOQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdEhMREJDUVVGTUxFTkJRV2RETEVsQlFXaERMRU5CUVZBN1FVRkRRWFpETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZVTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhaUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFJ5d3dRa0ZCVEN4RFFVRm5ReXhKUVVGb1F5eERRVUZRTzBGQlEwRjJReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJWRHRCUVVOQk96dEJRVU5LTEdGQlFVc3NWMEZCVER0QlFVTkpSQ3hWUVVGQlFTeEpRVUZKTEVkQlFVY3NTMEZCUzB3c2EwSkJRVXdzUTBGQmQwSXNTVUZCZUVJc1EwRkJVRHRCUVVOQkwwSXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFWUTdRVUZEUVRzN1FVRkRTaXhoUVVGTExHRkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRNTEd0Q1FVRk1MRU5CUVhkQ0xFbEJRWGhDTEVOQlFWQTdRVUZEUVM5Q0xGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4aFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxUQ3hyUWtGQlRDeERRVUYzUWl4SlFVRjRRaXhEUVVGUU8wRkJRMEV2UWl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJPenRCUVVOS0xHRkJRVXNzVDBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMwd3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNRMEZCVUR0QlFVTkJMMElzVlVGQlFVRXNRMEZCUXl4SFFVRkhMRWxCUVVvN1FVRkRRWEZETEZWQlFVRkJMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVlE3UVVGRFFUczdRVUZEU2l4aFFVRkxMR0ZCUVV3N1FVRkRTVVFzVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0TUxHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFTkJRVkE3UVVGRFFTOUNMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRlVPMEZCUTBFN08wRkJRMG9zWVVGQlN5eGxRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMVEN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRlFPMEZCUTBFdlFpeFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CTzBGQmNrWlNPenRCUVhWR1FTeGhRVUZQTEVOQlFVTkVMRWxCUVVRc1JVRkJUM0JETEVOQlFWQXNSVUZCVlhGRExFdEJRVllzUTBGQlVEdEJRVU5JT3pzN2MwTkJRM2xDTzBGQlEzUkNMRmRCUVV0YUxFbEJRVXdzUTBGQlZXVXNSVUZCVml4SFFVRmxReXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NUMEZCUVVRc1NVRkJTU3h4UWtGQlVVVXNUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zUzBGQlMwTXNVMEZCYmtJc1EwRkJVaXhWUVVGMVF5eERRVUYyUXl4SFFVRnVRanRCUVVOSU96czdRVUZGUkN4M1FrRkJXVU1zUjBGQldpeEZRVUZ4UlR0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQkxIVkRRVEZOZEVJc1JVRXdUWE5DT3p0QlFVTnFSU3hUUVVGTGNrSXNTVUZCVEN4SFFVRlpjVUlzUjBGQldqdEJRVU5CTEZOQlFVdHFSQ3hOUVVGTUxFZEJRV01zUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJaRHRCUVVOQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNRMEZCYUVJN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN2MwTkJTMnRDVEN4SExFVkJRV3RDWjBJc1N5eEZRVUZaTzBGQlF6VkRMRmRCUVV0dlF5eFRRVUZNTEVOQlFXVndSQ3hIUVVGbUxFbEJRWE5DTEVOQlFYUkNPMEZCUTBFc1YwRkJTM05FTEdWQlFVdzdPMEZCUTBFc1ZVRkJTWFJETEV0QlFVc3NXVUZCV1hWRExHVkJRWEpDTEVWQlFXZERPMEZCUXpWQ2RrTXNVVUZCUVVFc1MwRkJTeXhEUVVGRGQwTXNUMEZCVGp0QlFVTkJlRU1zVVVGQlFVRXNTMEZCU3l4SFFVRkhRU3hMUVVGTExFTkJRVU41UXl4SlFVRmtPMEZCUTBnN08wRkJRMFFzVlVGQlNXUXNTVUZCU2l4RlFVRmxjRU1zUTBGQlppeEZRVUZ6UTNGRExFdEJRWFJET3p0QlFWQTBReXhyUTBGUmVrSXNTMEZCUzJNc2NVSkJRVXdzUTBGQk1rSXhSQ3hIUVVFelFpeERRVko1UWpzN1FVRkJRVHM3UVVGUk0wTXlReXhOUVVGQlFTeEpRVkl5UXp0QlFWRnlRM0JETEUxQlFVRkJMRU5CVW5GRE8wRkJVV3hEY1VNc1RVRkJRVUVzUzBGU2EwTTdPMEZCVXpWRExGVkJRVWtzUTBGQlEzSkRMRU5CUVVRc1NVRkJUWEZETEV0QlFVc3NTMEZCUzJVc1UwRkJjRUlzUlVGQkswSTdRVUZETTBJc1owSkJRVkV6UkN4SFFVRlNPMEZCUTBrc1pVRkJTeXhOUVVGTU8wRkJRMGtzWjBKQlFVa3NTMEZCUzJkRExFbEJRVXdzUTBGQlZVc3NSVUZCVml4SlFVRm5RaXhEUVVGd1FpeEZRVUYxUWp0QlFVTnVRaXhyUWtGQlRYVkNMRWRCUVVjc1IwRkJSeXhMUVVGTE5VSXNTVUZCVEN4RFFVRlZWaXhEUVVGV0xFTkJRV0YxUXl4RFFVRjZRanRCUVVOQlJDeGpRVUZCUVN4SFFVRkhMRU5CUVVOeVJDeERRVUZLTEVkQlFWRXNRMEZCUTNGRUxFZEJRVWNzUTBGQlEzSkVMRU5CUVVvc1EwRkJUeXhEUVVGUUxFTkJRVVFzUTBGQlVqdEJRVU5CY1VRc1kwRkJRVUVzUjBGQlJ5eERRVUZEY2tRc1EwRkJTaXhEUVVGTkxFTkJRVTRzUlVGQlUyVXNRMEZCVkN4SFFVRmhMRU5CUVdJN1FVRkRRWE5ETEdOQlFVRkJMRWRCUVVjc1EwRkJRM0pFTEVOQlFVb3NRMEZCVFN4RFFVRk9MRVZCUVZORUxFTkJRVlFzUTBGQldXZENMRU5CUVZvc1IwRkJaMEpPTEV0QlFXaENPMEZCUTBnN08wRkJRMFE3TzBGQlEwbzdRVUZEU1RoRExGbEJRVUZCTEU5QlFVOHNRMEZCUTBNc1MwRkJVaXhEUVVGakwwUXNSMEZCWkN4RlFVRnRRbWRDTEV0QlFXNUNPMEZCUTBFc2EwSkJRVTBzU1VGQlNXZEVMRXRCUVVvc1EwRkJWU3hyUWtGQlZpeERRVUZPTzBGQldGSTdRVUZoU0RzN1FVRkRSQ3hWUVVGSmNrSXNTVUZCU1N4SlFVRkpjRU1zUTBGQlVpeEpRVUZoY1VNc1MwRkJTeXhMUVVGTFpTeFRRVUV6UWl4RlFVRnpRenRCUVVOc1F5eGhRVUZMVFN4MVFrRkJUQ3hEUVVFMlFuUkNMRWxCUVRkQ0xFVkJRVzFEY0VNc1EwRkJia003UVVGRFFTeFpRVUZKY1VNc1MwRkJTeXhKUVVGSkxFTkJRV0lzUlVGRFNVUXNTVUZCU1N4RFFVRkRjRU1zUTBGQlJDeERRVUZLTEVOQlFWRkJMRU5CUVZJc1EwRkJWWEZETEV0QlFWWXNTVUZCYlVJMVFpeExRVUZ1UWl4RFFVUktMRXRCUjBreVFpeEpRVUZKTEVOQlFVTndReXhEUVVGRUxFTkJRVW9zUTBGQlVVRXNRMEZCVWl4SFFVRlpVeXhMUVVGYU8wRkJRMUE3UVVGRFNqdEJRVVZFT3pzN096czdPenM3T3pzN01FTkJVM05DYUVJc1J5eEZRVUZyUW10RkxGVXNSVUZCYjBKRExGRXNSVUZCYTBKRExGVXNSVUZCYVVKRExGRXNSVUZCWlhCRUxFMHNSVUZCZVVJN1FVRkRia2tzVlVGQlNXdEVMRkZCUVZFc1NVRkJTVVFzVlVGQmFFSXNSVUZCTkVJN1FVRkRlRUlzWTBGQlRTeEpRVUZKUml4TFFVRktMRU5CUVZVc09FTkJRVllzUTBGQlRqdEJRVU5JT3p0QlFVTkVMRmRCUVV0YUxGTkJRVXdzUTBGQlpYQkVMRWRCUVdZc1NVRkJjMEpuUkN4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlV5eExRVUZMUnl4VFFVRk1MRU5CUVdWd1JDeEhRVUZtTEV0QlFYVkNMRU5CUVdoRExFVkJRVzFEYlVVc1VVRkJVU3hIUVVGSExFTkJRVGxETEVOQlFYUkNPMEZCUTBFc1YwRkJTMklzWlVGQlREczdRVUZEUVN4VlFVRkpMRU5CUVVOeVF5eE5RVUZNTEVWQlFXRTdRVUZEVkVFc1VVRkJRVUVzVFVGQlRTeEhRVUZIY1VRc2MwSkJRV05ETEUxQlFXUXNSVUZCVkR0QlFVTklPenRCUVVORUxGVkJRVWxJTEZWQlFWVXNXVUZCV1dJc1pVRkJkRUlzU1VGQmJVTmpMRkZCUVZFc1dVRkJXV1FzWlVGQk0wUXNSVUZCYzBVN1FVRkRiRVVzVTBGQlEyRXNWVUZCUkN4RlFVRmhReXhSUVVGaUxFVkJRWFZDUnl4UFFVRjJRaXhEUVVFclFpeFZRVUZCUXl4RFFVRkRPMEZCUVVFc2FVSkJRVWxCTEVOQlFVTXNXVUZCV1d4Q0xHVkJRV0lzU1VGQk1FSnJRaXhEUVVGRExFTkJRVU5xUWl4UFFVRkdMRVZCUVRsQ08wRkJRVUVzVTBGQmFFTTdPMEZCUTBFc1dVRkJTVmtzVlVGQlZTeFpRVUZaWWl4bFFVRjBRaXhKUVVGdFEyTXNVVUZCVVN4WlFVRlpaQ3hsUVVFelJDeEZRVUZ6UlR0QlFVTnNSU3hqUVVGTmJVSXNZMEZCWXl4SFFVRkhUaXhWUVVGVkxFTkJRVU5ZTEVsQlFWZ3NRMEZCWjBKblFpeERRVUZvUWl4RFFVRnRRbXBFTEUxQlFXNUNMRWRCUVRSQ0xFTkJRVzVFTzBGQlEwRXNZMEZCVFcxRUxGbEJRVmtzUjBGQlIwNHNVVUZCVVN4RFFVRkRXaXhKUVVGVUxFTkJRV05uUWl4RFFVRmtMRU5CUVdsQ2FrUXNUVUZCYWtJc1IwRkJNRUlzUTBGQkwwTTdPMEZCUTBFc1kwRkJTU3hGUVVGRmEwUXNZMEZCWXl4SlFVRkpMRU5CUVd4Q0xFbEJRWFZDUXl4WlFVRlpMRWxCUVVrc1EwRkJla01zUTBGQlNpeEZRVUZwUkR0QlFVTTNReXhuUWtGQlNUTkNMRWxCUVVrc1EwRkJRelJDTEVkQlFVd3NRMEZCVTBZc1kwRkJWQ3hGUVVGNVFrTXNXVUZCZWtJc1MwRkJNRU1zUTBGQk1VTXNTVUZCSzBNelFpeEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVM2xDTEdOQlFWUXNSVUZCZVVKRExGbEJRWHBDTEVsQlFYbERMRU5CUVRWR0xFVkJRU3RHTzBGQlF6TkdMR3RDUVVGSlJTeFJRVUZSTEVkQlFVZElMR05CUVdNc1NVRkJTU3hEUVVGc1FpeEhRVUZ6UWs0c1ZVRkJkRUlzUjBGQmJVTkRMRkZCUVd4RU8wRkJRMEVzYTBKQlFVbFRMRlZCUVZVc1IwRkJSemxDTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVGVVSXNZMEZCVkN4RlFVRjVRa01zV1VGQmVrSXNRMEZCYWtJN1FVRkRRU3hsUVVGRExFZEJRVVFzUlVGQlRTeEhRVUZPTEVWQlFWY3NSMEZCV0N4RlFVRm5Ra2dzVDBGQmFFSXNRMEZCZDBJc1ZVRkJRWGhGTEVkQlFVY3NSVUZCU1R0QlFVTXpRalpGTEdkQ1FVRkJRU3hSUVVGUkxFTkJRVU53UWl4SlFVRlVMRU5CUVdONlJDeEhRVUZrTEVsQlFYRkNLMElzUzBGQlN5eERRVUZESzBNc1ZVRkJSQ3hEUVVGTUxFTkJRV3RDUXl4SlFVRnNRaXhEUVVGMVFrWXNVVUZCVVN4RFFVRkRjRUlzU1VGQlZDeERRVUZqZWtRc1IwRkJaQ3hGUVVGdFFuZENMRTFCUVc1Q0xFZEJRVFJDY1VRc1VVRkJVU3hEUVVGRGNFSXNTVUZCVkN4RFFVRmpla1FzUjBGQlpDeEZRVUZ0UWl4RFFVRnVRaXhEUVVFMVFpeEhRVUZ2UkN4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRVE5GTEVOQlFYSkNPMEZCUTBnc1pVRkdSRHRCUVVkSUxHRkJUa1FzVFVGTlR6dEJRVU5JTEd0Q1FVRk5aMFlzWTBGQll5eEhRVUZITEdsRFFVRnZRazRzWTBGQmNFSXNSVUZCYjBORExGbEJRWEJETEVOQlFYWkNPMEZCUTBGUUxHTkJRVUZCTEZWQlFWVXNRMEZCUTJFc1VVRkJXQ3hEUVVGdlFtcERMRWxCUVVrc1EwRkJRMnRETEV0QlFVd3NRMEZCVjBZc1kwRkJZeXhIUVVGSFRpeGpRVUUxUWl4RFFVRndRanRCUVVOQlRDeGpRVUZCUVN4UlFVRlJMRU5CUVVOWkxGRkJRVlFzUTBGQmEwSnFReXhKUVVGSkxFTkJRVU5yUXl4TFFVRk1MRU5CUVZkR0xHTkJRV01zUjBGQlIwd3NXVUZCTlVJc1EwRkJiRUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCYkVKcFJTeHRRa0Z0UW5wRExFTkJRVU5RTEZWQlFVUXNSVUZCWVVNc1VVRkJZaXhGUVVGMVFtTXNSMEZCZGtJc1EwRkJNa0lzVlVGQlFWWXNRMEZCUXp0QlFVRkJMR2xDUVVGSlFTeERRVUZETEZsQlFWbHNRaXhsUVVGaUxFZEJRWGxDYTBJc1EwRkJReXhEUVVGRGFFSXNTVUZCTTBJc1IwRkJhME5uUWl4RFFVRjBRenRCUVVGQkxGTkJRVFZDTEVOQmJrSjVRenM3UVVGQlFUczdRVUZ0UW1wRlRDeFJRVUZCUVN4VlFXNUNhVVU3UVVGdFFuSkVReXhSUVVGQlFTeFJRVzVDY1VRN1FVRnZRbkpGT3p0QlFVTkVMRlZCUVVreFFpeEpRVUZLTzBGQlFVRXNWVUZCWlhCRExFTkJRV1k3UVVGQlFTeFZRVUZ6UTNGRExFdEJRWFJETzBGQlFVRXNWVUZCYVVVeFFpeEpRVUZKTEVkQlFVY3NTVUZCZUVVN08wRkJPVUp0U1N4dFEwRXJRbWhJTEV0QlFVdDNReXh4UWtGQlRDeERRVUV5UWpGRUxFZEJRVE5DTEVOQkwwSm5TRHM3UVVGQlFUczdRVUVyUW14Sk1rTXNUVUZCUVVFc1NVRXZRbXRKTzBGQkswSTFTSEJETEUxQlFVRkJMRU5CTDBJMFNEdEJRU3RDZWtoeFF5eE5RVUZCUVN4TFFTOUNlVWc3TzBGQlowTnVTU3hWUVVGSkxFTkJRVU55UXl4RFFVRkVMRWxCUVUxeFF5eExRVUZMTEV0QlFVdGxMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6TkNMR2RDUVVGUk0wUXNSMEZCVWp0QlFVTkpMR1ZCUVVzc1RVRkJURHRCUVVOSkxHZENRVUZKTEV0QlFVdG5ReXhKUVVGTUxFTkJRVlZMTEVWQlFWWXNTVUZCWjBJc1EwRkJjRUlzUlVGQmRVSTdRVUZEYmtKTkxHTkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZXTEVOQlFXcENPMEZCUTBFc2EwSkJRVWs0UkN4UlFVRlJMRWRCUVVkNlF5eEpRVUZKTEVOQlFVTnJRaXhEUVVGTUxFTkJRVTkwUkN4RFFVRlFMRU5CUVZNc1EwRkJWQ3hGUVVGWlJDeERRVUV6UWp0QlFVTkJMR3RDUVVGSkswVXNZVUZCWVN4SFFVRkhjRVlzU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxhVVlzVVVGQlppeERRVUZZTEVOQlFYQkNPMEZCUTBFc2EwSkJRVWxGTEZkQlFWY3NSMEZCUjNKR0xFbEJRVWtzUTBGQlEwTXNTMEZCVEN4RFFVRlhSQ3hKUVVGSkxFTkJRVU5GTEZOQlFVd3NRMEZCWldsR0xGRkJRV1lzUTBGQldDeERRVUZzUWp0QlFVTkJReXhqUVVGQlFTeGhRVUZoTEVOQlFVTXZSQ3hEUVVGa0xFZEJRV3RDT0VNc1ZVRkJiRUk3UVVGRFFXdENMR05CUVVGQkxGZEJRVmNzUTBGQlEyaEZMRU5CUVZvc1IwRkJaMElyUXl4UlFVRm9RanRCUVVOQlJDeGpRVUZCUVN4VlFVRlZMRWRCUVVkcFFpeGhRVUZpTzBGQlEwRm9RaXhqUVVGQlFTeFJRVUZSTEVkQlFVZHBRaXhYUVVGWU8wRkJRMEV2UlN4alFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1kwRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJNVUlzWTBGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVZBN1FVRkRTRHM3UVVGRFJEczdRVUZEU2p0QlFVTkpORU1zV1VGQlFVRXNUMEZCVHl4RFFVRkRReXhMUVVGU0xFTkJRV012UkN4SFFVRmtMRVZCUVcxQ2EwVXNWVUZCYmtJc1JVRkJLMEpETEZGQlFTOUNMRVZCUVhsRFF5eFZRVUY2UXl4RlFVRnhSRU1zVVVGQmNrUXNSVUZCSzBSd1JDeE5RVUV2UkR0QlFVTkJMR3RDUVVGTkxFbEJRVWtyUXl4TFFVRktMRU5CUVZVc2EwSkJRVllzUTBGQlRqdEJRV3hDVWp0QlFXOUNTRHM3UVVGRFJDeFZRVUZKY2tJc1NVRkJTU3hKUVVGSmNFTXNRMEZCVWl4SlFVRmhjVU1zUzBGQlN5eExRVUZMWlN4VFFVRXpRaXhGUVVGelF6dEJRVU5zUXl4aFFVRkxORUlzTWtKQlFVd3NRMEZCYVVNMVF5eEpRVUZxUXl4RlFVRjFRM0JETEVOQlFYWkRPMEZCUTBFc1lVRkJTMmxHTEZkQlFVd3NRMEZCYVVJM1F5eEpRVUZxUWl4RlFVRjFRbkJETEVOQlFYWkNMRVZCUVRCQ2NVTXNTMEZCTVVJc1JVRkJhVU56UWl4VlFVRnFReXhGUVVFMlEwVXNWVUZCTjBNc1JVRkJlVVJ1UkN4TlFVRjZSQ3hGUVVGcFJVTXNTVUZCYWtVN1FVRkRRU3hoUVVGTGMwVXNWMEZCVEN4RFFVRnBRamRETEVsQlFXcENMRVZCUVhWQ2NFTXNRMEZCZGtJc1JVRkJNRUp4UXl4TFFVRXhRaXhGUVVGcFEzVkNMRkZCUVdwRExFVkJRVEpEUlN4UlFVRXpReXhGUVVGeFJFTXNjMEpCUVdORExFMUJRV1FzUlVGQmNrUXNSVUZCTmtWeVJDeEpRVUUzUlR0QlFVTklPMEZCUTBvN096czdPenM3TzBsQlIxRjFSU3haT3pzN096czdPenM3YzBOQlEzZENReXhWTEVWQlFXbERPMEZCUXpsRUxHRkJRVTg3UVVGRFNHcEdMRkZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUlN4VlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGRVNqdEJRVVZEU2l4VlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGR1NpeFRRVVJCTzBGQlMwaHZSaXhSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZEUTJoR0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVWktMRk5CVEVFN1FVRlRTRzlDTEZGQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORGFFSXNWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJSRW83UVVGRlEwb3NWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRME50Uml4VlFVRlZMRU5CUVVNc1EwRkJSQ3hEUVVSWUxFVkJSVU5CTEZWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUmxnc1JVRkhReXhEUVVoRU8wRkJSa29zVTBGVVFUdEJRV2xDU0M5RkxGRkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRRU3hWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFU2p0QlFVVkRTaXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZEUXl4RFFVUkVMRVZCUlVNc1EwRkdSQ3hGUVVkRExFTkJTRVE3UVVGR1NpeFRRV3BDUVR0QlFYbENTRVFzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBOTExGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVTkRMRWRCUkVRc1JVRkZReXhIUVVaRUxFVkJSME1zUjBGSVJEdEJRVVpLTzBGQmVrSkJMRTlCUVZBN1FVRnJRMGc3UVVGRlJEczdPenM3T3p0blEwRkpiVUp4Uml4SExFVkJRWGxDTzBGQlEzaERMRlZCUVUxRExGZEJRVmNzUjBGQlJ5dzBRa0ZCWlVRc1IwRkJaaXhGUVVGdlFsUXNSMEZCY0VJc1EwRkJkMElzVlVGQlExWXNRMEZCUkN4RlFVRkpNME1zUTBGQlNqdEJRVUZCTEdWQlFWVkJMRU5CUVVNc1IwRkJSeXhEUVVGS0xFZEJRVkV5UXl4RFFVRkRMRWRCUVVjc1EwRkJXaXhIUVVGblFrRXNRMEZCUXl4SFFVRkhMRU5CUVRsQ08wRkJRVUVzVDBGQmVFSXNRMEZCY0VJN1FVRkRRU3hoUVVGUExFdEJRVXR4UWl4SlFVRk1MR2REUVVGaFJDeFhRVUZpTEVWQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096QkNRVWxoUkN4SExFVkJRWEZDTzBGQlF6bENMRlZCUVUxR0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVMUhMRXRCUVdsQ0xFZEJRVWM3UVVGRGRFSXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZFYTBJN1FVRkZkRUl5UkN4UlFVRkJRU3hIUVVGSExFVkJRVVVzUTBGR2FVSTdRVUZIZEVKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVaHJRanRCUVVsMFFrTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTbXRDTzBGQlMzUkNja1FzVVVGQlFVRXNSVUZCUlN4RlFVRkZMRXRCUVV0elJDeHBRa0ZCVEN4RFFVRjFRbFFzVlVGQmRrSXNRMEZNYTBJN1FVRk5kRUpWTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVU1clFqdEJRVTkwUW5KRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFWQnJRanRCUVZGMFFuTkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkpyUWp0QlFWTjBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CVkd0Q08wRkJWWFJDY2tVc1VVRkJRVUVzVFVGQlRTeEZRVUZGTEc5Q1FVRlBNa1FzUjBGQlVEdEJRVlpqTEU5QlFURkNPMEZCWVVFc1lVRkJUeXhKUVVGSk4wWXNXVUZCU2l4RFFVRnBRbWRITEV0QlFXcENMRU5CUVZBN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN08zbENRVTlaVVN4SkxFVkJRV05ETEVjc1JVRkJZVU1zU3l4RlFVRmxReXhOTEVWQlFXZENPMEZCUTJ4RkxGVkJRVTFZTEV0QlFXbENMRWRCUVVjN1FVRkRkRUl4UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGRWEwSTdRVUZGZEVJeVJDeFJRVUZCUVN4SFFVRkhMRVZCUVVVc1EwRkdhVUk3UVVGSGRFSkRMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVWhyUWp0QlFVbDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU210Q08wRkJTM1JDY2tRc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEV0QlFVdHpSQ3hwUWtGQlRDeERRVUYxUWl4RFFVRkRTU3hKUVVGRUxFVkJRVTlETEVkQlFWQXNSVUZCV1VNc1MwRkJXaXhGUVVGdFFrTXNUVUZCYmtJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKT0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRTFCUVdwQ0xFVkJRWGxDTEVOQlFVTjNSU3hMUVVGRUxFVkJRVkZETEUxQlFWSXNRMEZCZWtJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpNMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096czdPelJDUVU5bFdTeEZMRVZCUVZsRExFVXNSVUZCV1VNc1JTeEZRVUZaUXl4RkxFVkJRVms3UVVGRE0wUXNWVUZCVFdZc1MwRkJhVUlzUjBGQlJ6dEJRVU4wUWpGRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVUnJRanRCUVVWMFFqSkVMRkZCUVVGQkxFZEJRVWNzUlVGQlJTeERRVVpwUWp0QlFVZDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU0d0Q08wRkJTWFJDUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGS2EwSTdRVUZMZEVKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1MwRkJTM05FTEdsQ1FVRk1MRU5CUVhWQ0xFTkJRVU5STEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhGUVVGVlJDeEZRVUZGTEVkQlFVZEZMRVZCUVdZc1JVRkJiVUlzU1VGQlNVUXNSVUZCZGtJc1JVRkJNa0lzU1VGQlNVTXNSVUZCTDBJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKV0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRk5CUVdwQ0xFVkJRVFJDTEVOQlFVTTBSU3hGUVVGRUxFVkJRVXRETEVWQlFVd3NRMEZCTlVJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpMMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN08zZENRVWxYWjBJc1JTeEZRVUZwUWp0QlFVTjRRaXhWUVVGTmFFSXNTMEZCU3l4SFFVRkhMRWxCUVVsb1J5eFpRVUZLTEVOQlFXbENPMEZCUXpOQ2MwTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJSSFZDTzBGQlJUTkNNa1FzVVVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUm5OQ08wRkJSek5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGSWRVSTdRVUZKTTBKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVcDFRanRCUVVzelFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeExRVUZMYzBRc2FVSkJRVXdzUTBGQmRVSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQlFYWkNMRU5CVEhWQ08wRkJUVE5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGT2RVSTdRVUZQTTBKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRlFkVUk3UVVGUk0wSnpSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZTZFVJN1FVRlRNMEpETEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZSMVFqdEJRVlV6UWxVc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVkQlZuZENPMEZCVnpOQ1F5eFJRVUZCUVN4RFFVRkRMRVZCUVVVc1IwRllkMEk3UVVGWk0wSkRMRkZCUVVGQkxFdEJRVXNzUlVGQlJVZzdRVUZhYjBJc1QwRkJha0lzUTBGQlpEdEJRV05CTEdGQlFVOW9RaXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3T3pzN096aENRVTFwUWtnc1J5eEZRVUY1UW5WQ0xGTXNSVUZCYlVKRExGRXNSVUZCYVVJN1FVRkJRVHM3UVVGRE1VVXNWVUZCVFRGQ0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVbDVRaXhQUVVGS096dEJRVU5CTEZWQlFVbDZRaXhIUVVGSExGbEJRVmt3UWl4alFVRnVRaXhGUVVGdFF6dEJRVU12UWtRc1VVRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFWWTdRVUZEU0N4UFFVWkVMRTFCUlU4c1NVRkJTWHBDTEVkQlFVY3NXVUZCV1RKQ0xHVkJRVzVDTEVWQlFXOURPMEZCUTNaRFJpeFJRVUZCUVN4UFFVRlBMRWRCUVVjc1EwRkJWanRCUVVOSUxFOUJSazBzVFVGRlFTeEpRVUZKZWtJc1IwRkJSeXhaUVVGWk5FSXNWMEZCYmtJc1JVRkJaME03UVVGRGJrTklMRkZCUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZXTzBGQlEwZ3NUMEZHVFN4TlFVVkJPMEZCUTBoQkxGRkJRVUZCTEU5QlFVOHNSMEZCUnl4RFFVRldPMEZCUTBnN08wRkJRMFFzVlVGQlRYUkNMRXRCUVhsRUxFZEJRVWM3UVVGRE9VUXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVm5SaXhQUVVRd1JEdEJRVVU1UkhKQ0xGRkJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVWjVSRHRCUVVjNVJFTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTREJFTzBGQlNUbEVReXhSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZLTUVRN1FVRkxPVVJ5UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUzBGQlMzTkVMR2xDUVVGTUxFTkJRWFZDYTBJc1QwRkJUeXhKUVVGSkxFTkJRVmdzUjBGQlpTeERRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRVZCUVU4c1EwRkJVQ3hGUVVGVkxFTkJRVllzUTBGQlppeEhRVUU0UWpOQ0xGVkJRWEpFTEVOQlREQkVPMEZCVFRsRVZTeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRk9NRVE3UVVGUE9VUnlSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZRTUVRN1FVRlJPVVJ6UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGU01FUTdRVUZUT1VSRExGRkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFWUXdSQ3hQUVVGc1JUczdRVUZYUVN4alFVRlJaU3hQUVVGU08wRkJRMGtzWVVGQlN5eERRVUZNTzBGQlEwa3NZMEZCVFVrc1UwRkJVeXhIUVVGSExEQkNRVUZoTjBJc1IwRkJZaXhEUVVGc1FqczdRVUZEUVN4alFVRkpOa0lzVTBGQlV5eERRVUZEY2tjc1RVRkJWaXhEUVVGcFFpeFZRVUZCZDBVc1IwRkJSenRCUVVGQkxHMUNRVUZKUVN4SFFVRkhMRmxCUVZrd1FpeGpRVUZtTEVsQlFXbERNVUlzUjBGQlJ5eFpRVUZaTWtJc1pVRkJjRVE3UVVGQlFTeFhRVUZ3UWl4RlFVRjVSaTlHTEUxQlFUZEdMRVZCUVhGSE8wRkJRMnBITEdkQ1FVRk5hMGNzV1VGQldTeEhRVUZITTBJc1MwRkJja0k3UVVGRFFTeG5Ra0ZCVFRSQ0xGbEJRVFJDTEVkQlFVY3NSVUZCY2tNN1FVRkRRU3huUWtGQlRVTXNXVUZCV1N4SFFVRkhMRzlDUVVGeVFqdEJRVU5CU0N4WlFVRkJRU3hUUVVGVExFTkJRVU5xUkN4UFFVRldMRU5CUVd0Q0xGVkJRVUZZTEVOQlFVTXNSVUZCU1R0QlFVTnVRaXhyUWtGQlNVRXNRMEZCUXl4WlFVRlpaMFVzYTBKQlFXSXNTVUZCYlVNc1JVRkJSV2hGTEVOQlFVTXNXVUZCV1RKRUxGZEJRV1lzUTBGQmRrTXNSVUZCYjBVN1FVRkRhRVZITEdkQ1FVRkJRU3haUVVGWkxFTkJRVU5ITEU5QlFXSXNRMEZCY1VJc1MwRkJTU3hEUVVGRFF5eFRRVUZNTEVOQlFXVnNSU3hEUVVGbUxFVkJRV3RDYzBRc1UwRkJiRUlzUlVGQk5rSkRMRkZCUVRkQ0xFTkJRWEpDTzBGQlEwZzdRVUZEU2l4aFFVcEVPMEZCUzBGUExGbEJRVUZCTEZsQlFWa3NRMEZCUTI1RUxFOUJRV0lzUTBGQmNVSXNWVUZCUVhWQ0xFdEJRVXNzUlVGQlNUdEJRVU14UWtFc1kwRkJRVUVzUzBGQlN5eERRVUZETDBRc1NVRkJUaXhEUVVGWFpTeEZRVUZZTEVkQlFXZENMRWRCUVdoQ08wRkJRMGdzWVVGR1JEdEJRVWRCTWtVc1dVRkJRVUVzV1VGQldTeERRVUZEVml4RFFVRmlMRWRCUVdsQ2RFSXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJWaXhIUVVGblFrRXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJNVUlzUjBGQlowTXNRMEZCYWtRN1FVRkRRV2RETEZsQlFVRkJMRmxCUVZrc1EwRkJRMVFzUTBGQllpeEhRVUZwUW5aQ0xGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNSMEZCWjBKQkxGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFURkNMRWRCUVdkRExFTkJRV3BFTzBGQlEwRm5ReXhaUVVGQlFTeFpRVUZaTEVOQlFVTlNMRXRCUVdJc1IwRkJjVUpWTEZsQlFYSkNPMEZCUTBGVUxGbEJRVUZCTEZOQlFWTXNRMEZCUTNwRkxFbEJRVllzUTBGQlpUdEJRVU5ZY1VVc1kwRkJRVUVzUlVGQlJTeEZRVUZGWVN4WlFVUlBPMEZCUlZoSkxHTkJRVUZCTEUxQlFVMHNSVUZCUlV3c1dVRkJXU3hEUVVGRGVFTXNSMEZCWWl4RFFVRnBRaXhWUVVGQldTeExRVUZMTzBGQlFVRXNkVUpCUVVsQkxFdEJRVXNzUTBGQlF5OUVMRWxCUVZZN1FVRkJRU3hsUVVGMFFqdEJRVVpITEdGQlFXWTdRVUZKU0N4WFFXNUNSQ3hOUVcxQ1R6dEJRVU5JTEdkQ1FVRk5hVWNzVjBGQlZTeEhRVUZIYkVNc1MwRkJia0k3UVVGRFFXdERMRmxCUVVGQkxGZEJRVlVzUTBGQlF6VkdMRVZCUVZnc1IwRkJaMElzUTBGQmFFSTdRVUZEUVRSR0xGbEJRVUZCTEZkQlFWVXNRMEZCUTNCR0xFVkJRVmdzUjBGQlowSXNTMEZCUzNORUxHbENRVUZNTEVOQlFYVkNWQ3hWUVVGMlFpeERRVUZvUWp0QlFVTkJkVU1zV1VGQlFVRXNWMEZCVlN4RFFVRkRhRWNzVFVGQldDeEhRVUZ2UWl4dlFrRkJUekpFTEVkQlFWQXNRMEZCY0VJN1FVRkRTRHM3UVVGRFJEczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTmMwTXNWVUZCVlN4SFFVRkhia01zUzBGQmJrSTdPMEZCUkVvc05rSkJSWEZETEhsQ1FVRlpTQ3hIUVVGYUxFVkJRVzlEZFVJc1UwRkJjRU1zUTBGR2NrTTdRVUZCUVR0QlFVRkJMR05CUlZkblFpeFZRVVpZTzBGQlFVRXNZMEZGZFVKRExGVkJSblpDT3p0QlFVZEpSaXhWUVVGQlFTeFZRVUZWTEVOQlFVTm9RaXhMUVVGWUxFZEJRVzFDYVVJc1ZVRkJia0k3UVVGRFFTeGpRVUZKTEVOQlFVTm9RaXhUUVVGVExFTkJRVU12Uml4TlFVRldMRU5CUVdsQ0xGVkJRVUZVTEVOQlFVTTdRVUZCUVN4dFFrRkJTVUVzUTBGQlF5eERRVUZEYjBjc1JVRkJSaXhKUVVGUmIwSXNWVUZCV2p0QlFVRkJMRmRCUVd4Q0xFVkJRVEJETTBjc1RVRkJMME1zUlVGRFNUSkdMRk5CUVZNc1EwRkJRM3BGTEVsQlFWWXNRMEZCWlRCR0xGVkJRV1k3UVVGRFNqczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTlNDeFZRVUZWTEVkQlFVZHNReXhMUVVGdVFqdEJRVU5CYTBNc1ZVRkJRVUVzVlVGQlZTeERRVUZEYUVjc1RVRkJXQ3hIUVVGdlFpeHZRa0ZCVHpKRUxFZEJRVkFzUTBGQmNFSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExFTkJRVXc3UVVGRFNTeGpRVUZOZVVNc1UwRkJVeXhIUVVGSGRFTXNTMEZCYkVJc1EwRkVTaXhEUVVkSk96dEJRVU5CTEdOQlFVMTFReXhqUVVGakxFZEJRVWNzSzBKQlFXdENNVU1zUjBGQmJFSXNRMEZCZGtJN1FVRkRRU3hqUVVGTk1rTXNWVUZCVlN4SFFVRkhMRGhDUVVGcFFrTXNaMEpCUVdkQ0xFTkJRVU0xUXl4SFFVRkVMRU5CUVdoQ0xFTkJRWE5DTWtNc1ZVRkJka01zUTBGQmJrSTdRVUZEUVN4alFVRk5SU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUjBGQlVDeEZRVUZaUml4VlFVRmFMRU5CUVhwQ08wRkJRMEZHTEZWQlFVRkJMRk5CUVZNc1EwRkJRM2hHTEVWQlFWWXNRMEZCWTJ4Q0xFTkJRV1FzUTBGQmFVSndRaXhEUVVGcVFpeEhRVUZ4UWl4RFFVRkRiVVlzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5Ra0VzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5RaXRETEdkQ1FVRnFReXhGUVVGdFJDOURMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUjBGQlowSkJMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVEZDTEVkQlFXZERORU1zWTBGQmJrWXNSVUZCYlVjc1EwRkJia2NzUTBGQmNrSTdRVUZEUVVRc1ZVRkJRVUVzVTBGQlV5eERRVUZEZUVZc1JVRkJWaXhEUVVGamNFTXNRMEZCWkN4RFFVRnBRa1lzUTBGQmFrSXNSMEZCY1VJc1EwRkJReXhGUVVGRmJVa3NWVUZCVlN4RFFVRkRSaXhuUWtGQlowSXNRMEZCUXpWRExFZEJRVVFzUTBGQmFFSXNRMEZCYzBJclF5eFhRVUYwUWl4SlFVRnhReXhIUVVGMFF5eERRVUZXTEVkQlFYVkVMRWRCUVhwRUxFTkJRWFJDT3p0QlFWSktMRFJDUVZVMlFpeDNRa0ZCVnk5RExFZEJRVmdzUlVGQmEwTjNRaXhSUVVGc1F5eERRVlkzUWp0QlFVRkJPMEZCUVVFc1kwRlZWM2RDTEZGQlZsZzdRVUZCUVN4alFWVnhRa01zU1VGV2NrSTdPMEZCVjBsU0xGVkJRVUZCTEZOQlFWTXNRMEZCUXk5SExFTkJRVllzUjBGQlkzTklMRkZCUVdRN1FVRkRRU3hqUVVGSkxFTkJRVU40UWl4UlFVRlJMRU5CUVVNd1FpeEpRVUZVTEVOQlFXVXhTQ3hOUVVGbUxFTkJRWE5DTEZWQlFVRXlTQ3hEUVVGRE8wRkJRVUVzYlVKQlFVbEJMRU5CUVVNc1EwRkJRME1zUzBGQlJpeEpRVUZYU0N4SlFVRkpMRU5CUVVOSExFdEJRWEJDTzBGQlFVRXNWMEZCZGtJc1JVRkJhMFI0U0N4TlFVRjJSQ3hGUVVOSk5FWXNVVUZCVVN4RFFVRkRNRUlzU1VGQlZDeERRVUZsY0Vjc1NVRkJaaXhEUVVGdlFtMUhMRWxCUVhCQ08wRkJRMG83UVVGMFJGSTdPMEZCZDBSQkxGVkJRVTFKTEZWQlFWVXNSMEZCUnl4SlFVRkpiRW9zV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFXNUNPMEZCUTBFc1lVRkJUMnRFTEZWQlFWQTdRVUZEU0NJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lGTm9ZWEJsVEdGNVpYSXNJRlJsZUhSTVlYbGxjaXdnU1cxaFoyVk1ZWGxsY2l3Z1ZISmhibk5tYjNKdExDQkJjM05sZEhNc0lFWnZiblJ6TENCSGNtOTFjRk5vWVhCbExDQlFjbVZEYjIxd1RHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNBbkxpOWhibWx0WVhScGIyNG5YRzVwYlhCdmNuUWdleUJGWVhOcGJtZEdkVzVqZEdsdmJpd2dSV0Z6YVc1blJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dlpXRnphVzVuSjF4dWFXMXdiM0owSUhzZ2NtVnVaR1Z5VkdWNGRDd2djbVZ1WkdWeUxDQnlaVzVrWlhKSmJXRm5aU3dnY21WdVpHVnlVR3hoYVc1SGJIbHdhQ0I5SUdaeWIyMGdKeTR2Y21WdVpHVnlKenRjYm1sdGNHOXlkQ0I3SUdkbGRFSnZkVzVrYVc1blFtOTRMQ0JuWlhSTVpXRm1UbTlrWlhNc0lHZGxkRUpoYzJWc2FXNWxTR1ZwWjJoMExDQmxibU52WkdWVVpYaDBRVzVqYUc5eUxDQnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxJSDBnWm5KdmJTQW5MaTlvWld4d1pYSW5YRzVwYlhCdmNuUWdkWFZwWkNCbWNtOXRJQ2QxZFdsa0wzWTBKenRjYm1sdGNHOXlkQ0I3SUZCaGRHaE5ZV3RsY2lCOUlHWnliMjBnSnk0dmNHRjBhQ2M3WEc1Y2JuUjVjR1VnVTJWMFlXSnNaVXRsZVhNZ1BTQmNJbk5qWVd4bFdGd2lJSHdnWENKelkyRnNaVmxjSWlCOElGd2lZVzVqYUc5eVdGd2lJSHdnWENKaGJtTm9iM0paWENJZ2ZDQmNJbmhjSWlCOElGd2llVndpSUh3Z1hDSnliM1JoZEdWY0lpQjhJRndpYjNCaFkybDBlVndpSUh3Z0ozTm9ZWEJsSnlCOElDZG1hV3hzUTI5c2IzSW5JSHdnSjNSeWFXMVRkR0Z5ZENjZ2ZDQW5kSEpwYlVWdVpDY2dmQ0FuZEhKcGJVOW1abk5sZENjZ2ZDQW5jM1J5YjJ0bFEyOXNiM0luSUh3Z0ozTjBjbTlyWlZkcFpIUm9KeUI4SUNkMFpYaDBKeUI4SUNkbWFXeHNUM0JoWTJsMGVTY2dmQ0FuYzNSeWIydGxUM0JoWTJsMGVTZGNibHh1Wlhod2IzSjBJR05zWVhOeklFcFRUVzkyYVc1TVlYbGxjaUI3WEc0Z0lDQWdjSFZpYkdsaklISmxZV1J2Ym14NUlISnZiM1E2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlPMXh1SUNBZ0lIQnlhWFpoZEdVZ1lXNWphRzl5T2lCdWRXMWlaWEpiWFZ4dUlDQWdJSEJ5YVhaaGRHVWdjRzl6YVhScGIyNDZJRzUxYldKbGNsdGRYRzRnSUNBZ2NISnBkbUYwWlNCMGFXMWxVbUZ1WjJVNklIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ2JuVnRZbVZ5SUgwZ1BTQjdmVnh1SUNBZ0lIQnlhWFpoZEdVZ1oyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUtHdGxlVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RoSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozQW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHdGxlU0E5UFNBbllTY2dQeUIwYUdsekxtRnVZMmh2Y2lBNklIUm9hWE11Y0c5emFYUnBiMjRwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmN5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGc3hNREFzSURFd01Dd2dNVEF3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJ5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERXdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY2ljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURCY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozUnRKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoMGNtRnVjMlp2Y20wNklHRnVlU3dnYTJWNU9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGNtRnVjMlp2Y20xYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRXMnRsZVYwZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQjBhR2x6TG1kbGRFUmxabUYxYkhSUWNtOXdaWEowZVNoclpYa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSeVlXNXpabTl5YlZ0clpYbGRMbUVnUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGRHbGpWbUZzZFdVZ1BTQjBjbUZ1YzJadmNtMWJhMlY1WFM1cld6QmRMbk5jYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJWdHJaWGxkSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ2MzUmhkR2xqVm1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J3Y21sMllYUmxJR052Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwY21GdWMyWnZjbTFiYTJWNVhTQjhmQ0FoZEhKaGJuTm1iM0p0VzJ0bGVWMHVZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQTlQU0FuWVNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GdVkyaHZjaUE5SUhSeVlXNXpabTl5YlZ0clpYbGRJRDhnZEhKaGJuTm1iM0p0VzJ0bGVWMHVheUE2SUZzd0xDQXdMQ0F3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3RsZVNBOVBTQW5jQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVJRDBnZEhKaGJuTm1iM0p0VzJ0bGVWMGdQeUIwY21GdWMyWnZjbTFiYTJWNVhTNXJJRG9nV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xYmEyVjVYU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaE9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3M2SUZ0ZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmhaR1JMWlhsbWNtRnRaU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNzSUdsa2VEb2diblZ0WW1WeUlEMGdMVEVzSUhScGJXVTZJRzUxYldKbGNpd2dkbUZzZFdVNklFRnljbUY1UEdGdWVUNHNJR1ZoYzJsdVp6ODZJRVZoYzJsdVowWjFibU4wYVc5dUxDQjNjbUZ3T2lCaWIyOXNaV0Z1SUQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsZUdsemRFdGxlV1p5WVcxbElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NW1hV3gwWlhJb0tIZzZJR0Z1ZVNrZ1BUNGdlQzUwSUQwOUlIUnBiV1VwSUdGeklHRnVlVnRkWEc0Z0lDQWdJQ0FnSUd4bGRDQnlaV0ZrZVZSdlUyVjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYaHBjM1JMWlhsbWNtRnRaUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUWdQU0JsZUdsemRFdGxlV1p5WVcxbFd6QmRYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtlVlJ2VTJWMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFE2SUhScGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjem9nZEdocGN5NW5aWFJFWldaaGRXeDBVSEp2Y0dWeWRIa29hMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NXlaV1IxWTJVb0tIQTZJRzUxYldKbGNpd2dlRG9nWVc1NUtTQTlQaUI0TG5RZ1BDQjBhVzFsSUQ4Z2NDQXJJREVnT2lCd0xDQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFcydGxlVjB1YXk1emNHeHBZMlVvY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MExDQXdMQ0J5WldGa2VWUnZVMlYwS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsWVhOcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUXVieUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQmxZWE5wYm1kYk1GMWJNRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ1pXRnphVzVuV3pCZFd6RmRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGa2VWUnZVMlYwTG1rZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRG9nWldGemFXNW5XekZkV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIazZJR1ZoYzJsdVoxc3hYVnN4WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHBaSGdnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaSGxVYjFObGRDNXpXMmxrZUYwZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkhsVWIxTmxkQzV6SUQwZ2QzSmhjQ0FtSmlBaEtIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUQ4Z1czWmhiSFZsWFNBNklIWmhiSFZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQm1hVzVrVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNnb2RHaHBjeTV5YjI5MElHRnpJRk5vWVhCbFRHRjVaWElwTG5Ob1lYQmxjeUZiTUYwZ1lYTWdSM0p2ZFhCVGFHRndaU2t1YVhRaExtWnBibVFvYzJoaGNHVWdQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsTG5SNUlEMDlJR3RsZVZ4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdabWx1WkU5eVNXNXpaWEowVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm1sdVpDQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktHdGxlU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBibVFwSUhKbGRIVnliaUJtYVc1a1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdoaGMxUnlZVzV6Wm05eWJTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBjaWNwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Ym1acFp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVPaUJyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1MGFHbHpMbWRsZEVSbFptRjFiSFJRY205d1pYSjBlU2hyWlhrcElHRnpJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTlVjbUZ1YzJadmNtMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdkeWIzVndVMmhoY0dWeklEMGdLQ2gwYUdsekxuSnZiM1FnWVhNZ1UyaGhjR1ZNWVhsbGNpa3VjMmhoY0dWeklWc3dYU0JoY3lCSGNtOTFjRk5vWVhCbEtTNXBkQ0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3VTJoaGNHVnpMbk53YkdsalpTaG5jbTkxY0ZOb1lYQmxjeTVzWlc1bmRHZ2dMU0F4TENBd0xDQmpiMjVtYVdjcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS0hSb2FYTXVjbTl2ZENCaGN5QlRhR0Z3WlV4aGVXVnlLUzV6YUdGd1pYTWhXekJkSUdGeklFZHliM1Z3VTJoaGNHVXBMbWwwSVM1d2RYTm9LR052Ym1acFp5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sblhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdZMjl0Ylc5dVVISnZjR1Z5ZEhsTllYQndhVzVuS0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1wT2lCYllXNTVMQ0J6ZEhKcGJtY2dmQ0IxYm1SbFptbHVaV1FzSUc1MWJXSmxjaUI4SUhWdVpHVm1hVzVsWkYwZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWW1GelpUb2dZVzU1TENCck9pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJR2x1WkdWNE9pQnVkVzFpWlhJZ2ZDQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTmpZV3hsV0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaU0E5SUhSb2FYTXVjbTl2ZEM1cmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzJOaGJHVlpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1eWIyOTBMbXR6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHpKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGhibU5vYjNKWUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkaEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkaGJtTm9iM0paSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RoSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q0SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R5YjNSaGRHVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVhM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0ozSW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHZjR0ZqYVhSNUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRISnBiVk4wWVhKMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTVtYVc1a1QzSkpibk5sY25SUWNtOXdaWEowZVVOdmJtWnBaeWduZEcwbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SUMweFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSeWFXMUZibVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaGMyVWdQU0IwYUdsekxtWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBiU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZGxKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kSEpwYlU5bVpuTmxkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRTl5U1c1elpYSjBVSEp2Y0dWeWRIbERiMjVtYVdjb0ozUnRKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyOG5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZG1hV3hzUTI5c2IzSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG1acGJtUlFjbTl3WlhKMGVVTnZibVpwWnlnblptd25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3NnUFNBbll5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlDMHhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTjBjbTlyWlVOdmJHOXlKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1bWFXNWtVSEp2Y0dWeWRIbERiMjVtYVdjb0ozTjBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyTW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHpkSEp2YTJWWGFXUjBhQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZDNKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jMmhoY0dVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlVnUFNCMGFHbHpMbVpwYm1SUWNtOXdaWEowZVVOdmJtWnBaeWduYzJnbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuYTNNblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdnUFNBdE1WeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkbWFXeHNUM0JoWTJsMGVTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlNBOUlIUm9hWE11Wm1sdVpGQnliM0JsY25SNVEyOXVabWxuS0NkbWJDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmMzUnliMnRsVDNCaFkybDBlU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHZKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJZbUZ6WlN3Z2F5d2dhVzVrWlhoZFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdkWEJrWVhSbFZHbHRaVkpoYm1kbEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1F1YjNBZ1BTQk5ZWFJvTG0xaGVDZ3VMaTVQWW1wbFkzUXVkbUZzZFdWektIUm9hWE11ZEdsdFpWSmhibWRsS1N3Z01TbGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHlaV1k2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZENBOUlISmxabHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnVZMmh2Y2lBOUlGc3dMQ0F3TENBd1hWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1SUQwZ1d6QXNJREFzSURCZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd0bGVTQjBhR1VnYm1GdFpTQnZaaUJ3Y205d1pYSjBlU0IwYnlCaVpTQnpaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ2RHaGxJSFpoYkhWbElIUnZJR0psSUhObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGTjBZWFJwWTFCeWIzQmxjblI1S0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1zSUhaaGJIVmxPaUJoYm5rcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxVbUZ1WjJWYmEyVjVYU0E5SURGY2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlVhVzFsVW1GdVoyVW9LVnh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMblZ1YVdadmNtMG9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzV3WVhSb1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUdKaGMyVTZJR0Z1ZVN3Z2F6b2djM1J5YVc1bklId2dkVzVrWldacGJtVmtMQ0JwYm1SbGVEb2diblZ0WW1WeUlId2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJRnRpWVhObExDQnJMQ0JwYm1SbGVGMGdQU0IwYUdsekxtTnZiVzF2YmxCeWIzQmxjblI1VFdGd2NHbHVaeWhyWlhrcFhHNGdJQ0FnSUNBZ0lHbG1JQ2doYXlCOGZDQnBibVJsZUNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1JsZUhRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5YjI5MExuUjVJRDA5SURVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSdll5QTlJSFJvYVhNdWNtOXZkQzUwSVM1a0lWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXNnUFNCYlpHOWpMbXNoV3pCZFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXRiTUYwdWRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WXk1cld6QmRMbk1oTG5RZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaHJaWGtzSUhaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dmRDQmhJSFpoYkdsa0lHdGxlUzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaGlZWE5sSUNZbUlHc2dKaVlnYVc1a1pYZ2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoaVlYTmxMQ0JyS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDQ5SURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVnRyWFM1clcybHVaR1Y0WFNBOUlIWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpWdHJYUzVySUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhrZ2RHaGxJRzVoYldVZ2IyWWdjSEp2Y0dWeWRIa2dkRzhnWW1VZ2MyVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZWEowUm5KaGJXVWdabkpoYldVZ2JuVnRZbVZ5SUhSdklITjBZWEowSUhSb1pTQmhibWx0WVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pXNWtSbkpoYldVZ1puSmhiV1VnYm5WdFltVnlJSFJ2SUdWdVpDQjBhR1VnWVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVhKMFZtRnNkV1VnZG1Gc2RXVWdkRzhnWW1VZ2MyVjBJR2x1SUhOMFlYSjBJRzltSUdGdWFXMWhkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsYm1SV1lXeDFaU0IyWVd4MVpTQjBieUJpWlNCelpYUWdhVzRnWlc1a0lHOW1JR0Z1YVcxaGRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxZWE5wYm1jZ1pXRnphVzVuSUdaMWJtTjBhVzl1TENCa1pXWmhkV3gwSUdseklHeHBibVZoY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVGdWFXMWhkR0ZpYkdWUWNtOXdaWEowZVNoclpYazZJRk5sZEdGaWJHVkxaWGx6TENCemRHRnlkRVp5WVcxbE9pQnVkVzFpWlhJc0lHVnVaRVp5WVcxbE9pQnVkVzFpWlhJc0lITjBZWEowVm1Gc2RXVTZJR0Z1ZVN3Z1pXNWtWbUZzZFdVNklHRnVlU3dnWldGemFXNW5Qem9nUldGemFXNW5SblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVaRVp5WVcxbElEdzlJSE4wWVhKMFJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SVzVrSUdaeVlXMWxJSE5vYjNWc1pDQmlaU0JzWVhKblpYSWdkR2hoYmlCemRHRnlkQ0JtY21GdFpTNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlZKaGJtZGxXMnRsZVYwZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5ScGJXVlNZVzVuWlZ0clpYbGRJSHg4SURBc0lHVnVaRVp5WVcxbElDc2dNU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWVWFXMWxVbUZ1WjJVb0tWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWaGMybHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV0Z6YVc1bklEMGdSV0Z6YVc1blJtRmpkRzl5ZVM1c2FXNWxZWElvS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGeWRGWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlIeDhJR1Z1WkZaaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGMGFFMWhhMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JiYzNSaGNuUldZV3gxWlN3Z1pXNWtWbUZzZFdWZExtWnZja1ZoWTJnb2RpQTlQaUIySUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlDWW1JSFl1ZFc1cFptOXliU2dwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYSjBWbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdKaVlnWlc1a1ZtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRnlkRXhwYm1WRGIzVnVkQ0E5SUhOMFlYSjBWbUZzZFdVdWNHRjBhQzUySVM1c1pXNW5kR2dnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlc1a1RHbHVaVU52ZFc1MElEMGdaVzVrVm1Gc2RXVXVjR0YwYUM1MklTNXNaVzVuZEdnZ0xTQXhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb2MzUmhjblJNYVc1bFEyOTFiblFnUEQwZ01DQW1KaUJsYm1STWFXNWxRMjkxYm5RZ1BEMGdNQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0UxaGRHZ3ViV2x1S0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcElEdzlJREFnSmlZZ1RXRjBhQzV0WVhnb2MzUmhjblJNYVc1bFEyOTFiblFzSUdWdVpFeHBibVZEYjNWdWRDa2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibVZsWkVOdmNIa2dQU0J6ZEdGeWRFeHBibVZEYjNWdWRDQThQU0F3SUQ4Z2MzUmhjblJXWVd4MVpTQTZJR1Z1WkZaaGJIVmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WbFpFeGxibWQwYUNBOUlFMWhkR2d1YldGNEtITjBZWEowVEdsdVpVTnZkVzUwTENCbGJtUk1hVzVsUTI5MWJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXeWRwSnl3Z0oyOG5MQ0FuZGlkZExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMGdQU0JCY25KaGVTaHVaV1ZrVEdWdVozUm9LUzVtYVd4c0tHNWxaV1JEYjNCNUxuQmhkR2hiYTJWNVhTNXNaVzVuZEdnZ1B5QnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMWJNRjBnT2lCYk1Dd2dNRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dGJXOXVUWFZzZEdsd2JHVWdQU0JzWldGemRFTnZiVzF2YmsxMWJIUnBjR3hsS0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbExuVndjMkZ0Y0d4bEtFMWhkR2d1Y205MWJtUW9ZMjl0Ylc5dVRYVnNkR2x3YkdVZ0x5QnpkR0Z5ZEV4cGJtVkRiM1Z1ZENrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlM1MWNITmhiWEJzWlNoTllYUm9Mbkp2ZFc1a0tHTnZiVzF2YmsxMWJIUnBjR3hsSUM4Z1pXNWtUR2x1WlVOdmRXNTBLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRnR6ZEdGeWRGWmhiSFZsTENCbGJtUldZV3gxWlYwZ1BTQmJjM1JoY25SV1lXeDFaU3dnWlc1a1ZtRnNkV1ZkTG0xaGNDaDJJRDArSUhZZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdQeUIyTG5CaGRHZ2dPaUIyS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0JpWVhObE9pQmhibmtzSUdzNklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDd2dhVzVrWlhnNklHNTFiV0psY2lCOElIVnVaR1ZtYVc1bFpDd2dkM0poY0NBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUZ0aVlYTmxMQ0JyTENCcGJtUmxlRjBnUFNCMGFHbHpMbU52YlcxdmJsQnliM0JsY25SNVRXRndjR2x1WnloclpYa3BYRzRnSUNBZ0lDQWdJR2xtSUNnaGF5QjhmQ0JwYm1SbGVDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSbGVIUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1eWIyOTBMblI1SUQwOUlEVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSbGVIUlFjbTl3SUQwZ1ltRnpaUzVrTG10Yk1GMHVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSdGNGTjBZWEowVm1Gc2RXVWdQU0JLVTA5T0xuQmhjbk5sS0VwVFQwNHVjM1J5YVc1bmFXWjVLSFJsZUhSUWNtOXdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGJYQkZibVJXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29kR1Y0ZEZCeWIzQXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3VTNSaGNuUldZV3gxWlM1MElEMGdjM1JoY25SV1lXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3Ulc1a1ZtRnNkV1V1ZENBOUlHVnVaRlpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbElEMGdkRzF3VTNSaGNuUldZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCMGJYQkZibVJXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0F0TVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKaGNDQTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR3RsZVN3Z2MzUmhjblJHY21GdFpTd2daVzVrUm5KaGJXVXNJSE4wWVhKMFZtRnNkV1VzSUdWdVpGWmhiSFZsTENCbFlYTnBibWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblRtOTBJR0VnZG1Gc2FXUWdhMlY1TGljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJVZ0ppWWdheUFtSmlCcGJtUmxlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2hpWVhObExDQnJLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSTFpYbG1jbUZ0WlNoaVlYTmxMQ0JyTENCcGJtUmxlQ3dnYzNSaGNuUkdjbUZ0WlN3Z2MzUmhjblJXWVd4MVpTd2daV0Z6YVc1bkxDQjNjbUZ3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUkxaWGxtY21GdFpTaGlZWE5sTENCckxDQnBibVJsZUN3Z1pXNWtSbkpoYldVc0lHVnVaRlpoYkhWbExDQkZZWE5wYm1kR1lXTjBiM0o1TG14cGJtVmhjaWdwTENCM2NtRndLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdGNVpYSkdZV04wYjNKNUlIdGNiaUFnSUNCd2NtbDJZWFJsSUhOMFlYUnBZeUJuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hqYjI5eVpHbHVZWFJsT2lCdWRXMWlaWEpiWFNrNklGUnlZVzV6Wm05eWJTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pGZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVRBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCamNtVmhkR1VnZEdobElHSnZkVzVrYVc1bklHSnZlQ0J2WmlCemRtY2daV3hsYldWdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUdWc1pXMWxiblFnYm1WbFpITWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQmliM1Z1WkdsdVp5QmliM2hjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1ltOTFibVJwYm1kQ2IzZ29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ltOTFibVJwYm1kQ2IzZ2dQU0JuWlhSQ2IzVnVaR2x1WjBKdmVDaGtiMjBwTG0xaGNDZ29kaXdnYVNrZ1BUNGdhU0E4SURJZ1B5QjJJQzBnTVNBNklIWWdLeUF4S1NCaGN5QmJiblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2l3Z2JuVnRZbVZ5WFZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaV04wS0M0dUxtSnZkVzVrYVc1blFtOTRLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQjBhR1VnYzJGdFpTQnphR0Z3WlNCdlppQnpkbWNnY0dGMGFGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUhCaGRHZ2daV3hsYldWdWRDQnlaWEJ5WlhObGJuUWdkR2hsSUhOb1lYQmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUhOb1lYQmxLR1J2YlRvZ1UxWkhVR0YwYUVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUnBibUYwWlNBOUlHZGxkRUp2ZFc1a2FXNW5RbTk0S0dSdmJTbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEk2SUZOb1lYQmxUR0Y1WlhJZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVUb2dOQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE55T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc4NklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcmN6b2dkR2hwY3k1blpXNWxjbUYwWlZSeVlXNXpabTl5YlNoamIyOXlaR2x1WVhSbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsd09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p0T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVnpPaUJ5Wlc1a1pYSW9aRzl0S1Z4dVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2JHRjVaWElwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTNKbFlYUmxJR0VnY21WamRHRnVaMnhsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hsWm5RZ2JHVm1kQ0J2WmlCeVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIUnZjQ0IwYjNBZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzYVdSMGFDQjNhV1IwYUNCdlppQnlaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2hsYVdkb2RDQm9aV2xuYUhRZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5QnlaV04wS0d4bFpuUTZJRzUxYldKbGNpd2dkRzl3T2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSXNJR2hsYVdkb2REb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGhlV1Z5T2lCVGFHRndaVXhoZVdWeUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIazZJRFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaR1E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y2pvZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdk9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EzTTZJSFJvYVhNdVoyVnVaWEpoZEdWVWNtRnVjMlp2Y20wb1cyeGxablFzSUhSdmNDd2dkMmxrZEdnc0lHaGxhV2RvZEYwcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTA2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pYTTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSlFiR0ZwYmtkc2VYQm9LQ2R5WldOMEp5d2dXM2RwWkhSb0xDQm9aV2xuYUhSZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbE5OYjNacGJreGhlV1Z5S0d4aGVXVnlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQmhJR1ZzYkdsd2MyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kzZ2dlQ0JqWlc1MFpYSWdiMllnWld4c2FYQnpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmplU0I1SUdObGJuUmxjaUJ2WmlCbGJHeHBjSE5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEo0SUhnZ2NtRmthWFZ6SUc5bUlHVnNiR2x3YzJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY25rZ2VTQnlZV1JwZFhNZ2IyWWdaV3hzYVhCelpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMFlYUnBZeUJsYkd4cGNITmxLR040T2lCdWRXMWlaWElzSUdONU9pQnVkVzFpWlhJc0lISjRPaUJ1ZFcxaVpYSXNJSEo1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGNVpYSTZJRk5vWVhCbFRHRjVaWElnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVRvZ05DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSa1pEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITnlPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzg2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyY3pvZ2RHaHBjeTVuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hiWTNnZ0xTQnllQ3dnWTNrZ0xTQnllU3dnTWlBcUlISjRMQ0F5SUNvZ2NubGRLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZERvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdE9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1Z6T2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5VUd4aGFXNUhiSGx3YUNnblpXeHNhWEJ6WlNjc0lGdHllQ3dnY25sZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSU