!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=144)}([function(t,e,r){var n=r(2),a=r(18),i=r(11),o=r(12),s=r(19),c=function(t,e,r){var u,f,l,h,p=t&c.F,d=t&c.G,g=t&c.S,v=t&c.P,y=t&c.B,m=d?n:g?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?a:a[e]||(a[e]={}),k=b.prototype||(b.prototype={});for(u in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[u])?m:r)[u],h=y&&f?s(l,n):v&&"function"==typeof l?s(Function.call,l):l,m&&o(m,u,l,t&c.U),b[u]!=l&&i(b,u,h),v&&k[u]!=l&&(k[u]=l)};n.core=a,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(49)("wks"),a=r(33),i=r(2).Symbol,o="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=o&&i[t]||(o?i:a)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),a=Math.min;t.exports=function(t){return t>0?a(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),a=r(108),i=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=i(e,!0),n(r),a)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),a=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),a=r(11),i=r(14),o=r(33)("src"),s=r(154),c=(""+s).split("toString");r(18).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,r,s){var u="function"==typeof r;u&&(i(r,"name")||a(r,"name",e)),t[e]!==r&&(u&&(i(r,o)||a(r,o,t[e]?""+t[e]:c.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:a(t,e,r):(delete t[e],a(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||s.call(this)})},function(t,e,r){var n=r(0),a=r(3),i=r(24),o=/"/g,s=function(t,e,r,n){var a=String(i(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),s+">"+a+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(s),n(n.P+n.F*a(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(50),a=r(24);t.exports=function(t){return n(a(t))}},function(t,e,r){var n=r(51),a=r(32),i=r(15),o=r(23),s=r(14),c=r(108),u=Object.getOwnPropertyDescriptor;e.f=r(7)?u:function(t,e){if(t=i(t),e=o(e,!0),c)try{return u(t,e)}catch(t){}if(s(t,e))return a(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),a=r(9),i=r(78)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=a(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,a){return t.call(e,r,n,a)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,a;if(e&&"function"==typeof(r=t.toString)&&!n(a=r.call(t)))return a;if("function"==typeof(r=t.valueOf)&&!n(a=r.call(t)))return a;if(!e&&"function"==typeof(r=t.toString)&&!n(a=r.call(t)))return a;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),a=r(18),i=r(3);t.exports=function(t,e){var r=(a.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*i(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),a=r(50),i=r(9),o=r(6),s=r(94);t.exports=function(t,e){var r=1==t,c=2==t,u=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var g,v,y=i(e),m=a(y),b=n(s,d,3),k=o(m.length),S=0,A=r?p(e,k):c?p(e,0):void 0;k>S;S++)if((h||S in m)&&(v=b(g=m[S],S,y),t))if(r)A[S]=v;else if(v)switch(t){case 3:return!0;case 5:return g;case 6:return S;case 2:A.push(g)}else if(f)return!1;return l?-1:u||f?f:A}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),a=r(2),i=r(3),o=r(0),s=r(67),c=r(102),u=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),g=r(6),v=r(136),y=r(35),m=r(23),b=r(14),k=r(44),S=r(4),A=r(9),x=r(91),T=r(36),w=r(17),_=r(37).f,M=r(93),E=r(33),O=r(5),C=r(26),F=r(57),P=r(53),I=r(96),j=r(46),N=r(62),R=r(38),L=r(95),D=r(125),V=r(8),G=r(16),B=V.f,Y=G.f,q=a.RangeError,X=a.TypeError,W=a.Uint8Array,z=Array.prototype,U=c.ArrayBuffer,H=c.DataView,J=C(0),Q=C(2),Z=C(3),$=C(4),K=C(5),tt=C(6),et=F(!0),rt=F(!1),nt=I.values,at=I.keys,it=I.entries,ot=z.lastIndexOf,st=z.reduce,ct=z.reduceRight,ut=z.join,ft=z.sort,lt=z.slice,ht=z.toString,pt=z.toLocaleString,dt=O("iterator"),gt=O("toStringTag"),vt=E("typed_constructor"),yt=E("def_constructor"),mt=s.CONSTR,bt=s.TYPED,kt=s.VIEW,St=C(1,function(t,e){return _t(P(t,t[yt]),e)}),At=i(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),xt=!!W&&!!W.prototype.set&&i(function(){new W(1).set({})}),Tt=function(t,e){var r=d(t);if(r<0||r%e)throw q("Wrong offset!");return r},wt=function(t){if(S(t)&&bt in t)return t;throw X(t+" is not a typed array!")},_t=function(t,e){if(!(S(t)&&vt in t))throw X("It is not a typed array constructor!");return new t(e)},Mt=function(t,e){return Et(P(t,t[yt]),e)},Et=function(t,e){for(var r=0,n=e.length,a=_t(t,n);n>r;)a[r]=e[r++];return a},Ot=function(t,e,r){B(t,e,{get:function(){return this._d[r]}})},Ct=function(t){var e,r,n,a,i,o,s=A(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=M(s);if(null!=h&&!x(h)){for(o=h.call(s),n=[],e=0;!(i=o.next()).done;e++)n.push(i.value);s=n}for(l&&c>2&&(f=u(f,arguments[2],2)),e=0,r=g(s.length),a=_t(this,r);r>e;e++)a[e]=l?f(s[e],e):s[e];return a},Ft=function(){for(var t=0,e=arguments.length,r=_t(this,e);e>t;)r[t]=arguments[t++];return r},Pt=!!W&&i(function(){pt.call(new W(1))}),It=function(){return pt.apply(Pt?lt.call(wt(this)):wt(this),arguments)},jt={copyWithin:function(t,e){return D.call(wt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(wt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(wt(this),arguments)},filter:function(t){return Mt(this,Q(wt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return K(wt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(wt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(wt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(wt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(wt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ut.apply(wt(this),arguments)},lastIndexOf:function(t){return ot.apply(wt(this),arguments)},map:function(t){return St(wt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(wt(this),arguments)},reduceRight:function(t){return ct.apply(wt(this),arguments)},reverse:function(){for(var t,e=wt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(wt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(wt(this),t)},subarray:function(t,e){var r=wt(this),n=r.length,a=y(t,n);return new(P(r,r[yt]))(r.buffer,r.byteOffset+a*r.BYTES_PER_ELEMENT,g((void 0===e?n:y(e,n))-a))}},Nt=function(t,e){return Mt(this,lt.call(wt(this),t,e))},Rt=function(t){wt(this);var e=Tt(arguments[1],1),r=this.length,n=A(t),a=g(n.length),i=0;if(a+e>r)throw q("Wrong length!");for(;i<a;)this[e+i]=n[i++]},Lt={entries:function(){return it.call(wt(this))},keys:function(){return at.call(wt(this))},values:function(){return nt.call(wt(this))}},Dt=function(t,e){return S(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Vt=function(t,e){return Dt(t,e=m(e,!0))?l(2,t[e]):Y(t,e)},Gt=function(t,e,r){return!(Dt(t,e=m(e,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?B(t,e,r):(t[e]=r.value,t)};mt||(G.f=Vt,V.f=Gt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Gt}),i(function(){ht.call({})})&&(ht=pt=function(){return ut.call(this)});var Bt=p({},jt);p(Bt,Lt),h(Bt,dt,Lt.values),p(Bt,{slice:Nt,set:Rt,constructor:function(){},toString:ht,toLocaleString:It}),Ot(Bt,"buffer","b"),Ot(Bt,"byteOffset","o"),Ot(Bt,"byteLength","l"),Ot(Bt,"length","e"),B(Bt,gt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,c){var u=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=a[u],y=d||{},m=d&&w(d),b=!d||!s.ABV,A={},x=d&&d.prototype,M=function(t,r){B(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,At)}(this,r)},set:function(t){return function(t,r,n){var a=t._d;c&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),a.v[p](r*e+a.o,n,At)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,a){f(t,d,u,"_d");var i,o,s,c,l=0,p=0;if(S(r)){if(!(r instanceof U||"ArrayBuffer"==(c=k(r))||"SharedArrayBuffer"==c))return bt in r?Et(d,r):Ct.call(d,r);i=r,p=Tt(n,e);var y=r.byteLength;if(void 0===a){if(y%e)throw q("Wrong length!");if((o=y-p)<0)throw q("Wrong length!")}else if((o=g(a)*e)+p>y)throw q("Wrong length!");s=o/e}else s=v(r),i=new U(o=s*e);for(h(t,"_d",{b:i,o:p,l:o,e:s,v:new H(i)});l<s;)M(t,l++)}),x=d.prototype=T(Bt),h(x,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&N(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,a){var i;return f(t,d,u),S(r)?r instanceof U||"ArrayBuffer"==(i=k(r))||"SharedArrayBuffer"==i?void 0!==a?new y(r,Tt(n,e),a):void 0!==n?new y(r,Tt(n,e)):new y(r):bt in r?Et(d,r):Ct.call(d,r):new y(v(r))}),J(m!==Function.prototype?_(y).concat(_(m)):_(y),function(t){t in d||h(d,t,y[t])}),d.prototype=x,n||(x.constructor=d));var E=x[dt],O=!!E&&("values"==E.name||null==E.name),C=Lt.values;h(d,vt,!0),h(x,bt,u),h(x,kt,!0),h(x,yt,d),(c?new d(1)[gt]==u:gt in x)||B(x,gt,{get:function(){return u}}),A[u]=d,o(o.G+o.W+o.F*(d!=y),A),o(o.S,u,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*i(function(){y.of.call(d,1)}),u,{from:Ct,of:Ft}),"BYTES_PER_ELEMENT"in x||h(x,"BYTES_PER_ELEMENT",e),o(o.P,u,jt),R(u),o(o.P+o.F*xt,u,{set:Rt}),o(o.P+o.F*!O,u,Lt),n||x.toString==ht||(x.toString=ht),o(o.P+o.F*i(function(){new d(1).slice()}),u,{slice:Nt}),o(o.P+o.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){x.toLocaleString.call([1,2])})),u,{toLocaleString:It}),j[u]=O?E:C,n||O||h(x,dt,C)}}else t.exports=function(){}},function(t,e,r){var n=r(131),a=r(0),i=r(49)("metadata"),o=i.store||(i.store=new(r(134))),s=function(t,e,r){var a=o.get(t);if(!a){if(!r)return;o.set(t,a=new n)}var i=a.get(e);if(!i){if(!r)return;a.set(e,i=new n)}return i};t.exports={store:o,map:s,has:function(t,e,r){var n=s(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=s(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){s(r,n,!0).set(t,e)},keys:function(t,e){var r=s(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){a(a.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),a=r(4),i=r(14),o=r(8).f,s=0,c=Object.isExtensible||function(){return!0},u=!r(3)(function(){return c(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!a(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,n)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!i(t,n)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return u&&l.NEED&&c(t)&&!i(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),a=Array.prototype;null==a[n]&&r(11)(a,n,{}),t.exports=function(t){a[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(110),a=r(79);t.exports=Object.keys||function(t){return n(t,a)}},function(t,e,r){var n=r(21),a=Math.max,i=Math.min;t.exports=function(t,e){return(t=n(t))<0?a(t+e,0):i(t,e)}},function(t,e,r){var n=r(1),a=r(111),i=r(79),o=r(78)("IE_PROTO"),s=function(){},c=function(){var t,e=r(76)("iframe"),n=i.length;for(e.style.display="none",r(80).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c.prototype[i[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=c(),void 0===e?r:a(r,e)}},function(t,e,r){var n=r(110),a=r(79).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,a)}},function(t,e,r){"use strict";var n=r(2),a=r(8),i=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];i&&e&&!e[o]&&a.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),a=r(123),i=r(91),o=r(1),s=r(6),c=r(93),u={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,g,v,y=h?function(){return t}:c(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(p=s(t.length);p>b;b++)if((v=e?m(o(d=t[b])[0],d[1]):m(t[b]))===u||v===f)return v}else for(g=y.call(t);!(d=g.next()).done;)if((v=a(g,m,d.value,e))===u||v===f)return v}).BREAK=u,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var a in e)n(t,a,e[a],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,a=r(14),i=r(5)("toStringTag");t.exports=function(t,e,r){t&&!a(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),a=r(5)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),a))?r:i?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),a=r(24),i=r(3),o=r(82),s="["+o+"]",c=RegExp("^"+s+s+"*"),u=RegExp(s+s+"*$"),f=function(t,e,r){var a={},s=i(function(){return!!o[t]()||"​"!="​"[t]()}),c=a[t]=s?e(l):o[t];r&&(a[r]=c),n(n.P+n.F*s,"String",a)},l=f.trim=function(t,e){return t=String(a(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(u,"")),t};t.exports=f},function(t,e){t.exports={}},function(module,exports,__webpack_require__){"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var TimingSpec=function(){function TimingSpec(){_classCallCheck(this,TimingSpec),this._offset=0,this._reference=TimingSpec.timingRef.previousStart}return _createClass(TimingSpec,[{key:"replaceOffsetConst",value:function replaceOffsetConst(constants){var _this=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.offset?void 0===constants.get(this.offset)?0===this.offset.indexOf("calc")?(this.offset=this.offset.substring(0,this.offset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.includes(e)&&("number"==typeof t?_this.offset=_this.offset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+_this.offset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset,constants)?this.offset=eval(this.offset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset)?this.offset=constants.get(this.offset):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:this.offset&&"object"===_typeof(this.offset)&&"string"==typeof this.offset.minOffset&&(void 0===constants.get(this.offset.minOffset)?0===this.offset.minOffset.indexOf("calc")?(this.offset.minOffset=this.offset.minOffset.substring(0,this.offset.minOffset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.minOffset.includes(e)&&("number"==typeof t?_this.offset.minOffset=_this.offset.minOffset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+_this.offset.minOffset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset.minOffset,constants)?this.offset.minOffset=eval(this.offset.minOffset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset.minOffset)?this.offset.minOffset=constants.get(this.offset.minOffset):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'})}},{key:"calELeOffsetTime",value:function(t){var e=this,r=new Map,n=1e6;return"object"===_typeof(this.offset)&&t.forEach(function(t,r){n>parseFloat(t["data-datum"][e.offset.field])&&(n=parseFloat(t["data-datum"][e.offset.field]))}),t.forEach(function(t,a){var i=0;"number"==typeof e.offset?i=e.offset:"object"===_typeof(e.offset)&&(i=e.offset.minOffset*parseFloat(t["data-datum"][e.offset.field])/n),r.set(a,i)}),r}},{key:"calOffsetTime",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===n.size){var a=0;switch(this.reference){case TimingSpec.timingRef.previousStart:a=t+this.offset-r;break;case TimingSpec.timingRef.previousEnd:a=e+this.offset-r;break;case TimingSpec.timingRef.absolute:a=this.offset+r;break;default:a=t+this.offset-r}return a}var i=this,o=new Map,s=1e6;return"object"===_typeof(this.offset)&&n.forEach(function(t,e){s>parseFloat(t["data-datum"][i.offset.field])&&(s=parseFloat(t["data-datum"][i.offset.field]))}),n.forEach(function(n,a){var c=0;switch("number"==typeof i.offset?c=i.offset:"object"===_typeof(i.offset)&&(c=i.offset.minOffset*parseFloat(n["data-datum"][i.offset.field])/s),i.reference){case TimingSpec.timingRef.previousStart:o.set(a,t+c-r);break;case TimingSpec.timingRef.previousEnd:o.set(a,e+c-r);break;case TimingSpec.timingRef.absolute:o.set(a,c+r);break;default:o.set(a,t+c-r)}}),o}},{key:"reference",set:function(t){if(void 0!==t){var e=TimingSpec.transRef(t);Object.keys(TimingSpec.timingRef).includes(e)&&(this._reference=t)}},get:function(){return this._reference}},{key:"offset",set:function(t){void 0!==t&&("number"==typeof t?this._offset=Math.floor(t/(1e3/TimingSpec.FRAME_RATE))*(1e3/TimingSpec.FRAME_RATE):"object"!==_typeof(t)&&"string"!=typeof t||(this._offset=t))},get:function(){return this._offset}}],[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}]),TimingSpec}();TimingSpec.FRAME_RATE=20,TimingSpec.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"},TimingSpec.dataBindAttrs=["field","minOffset","minDuration"];var _default=TimingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n=r(55),a=r(105),i=s(r(75)),o=s(r(54));function s(t){return t&&t.__esModule?t:{default:t}}function c(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(t,e,r){return e&&l(t.prototype,e),r&&l(t,r),t}var p=function(){function t(){f(this,t)}return h(t,null,[{key:"arrIsContained",value:function(t,e){if(e.length>t)return!1;for(var r=0,n=e.length;r<n;r++)if(!t.includes(e[r]))return!1;return!0}},{key:"checkEquation",value:function(t,e){if(t=t.replace(/\s/g,""),/^[\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]$/.test(t))return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]{2,}/.test(t))return!1;if(/\(\)/.test(t))return!1;for(var r,n=[],a=0;a<t.length;a++)if("("===(r=t.charAt(a)))n.push("(");else if(")"===r){if(!(n.length>0))return!1;n.pop()}if(0!==n.length)return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]\)/.test(t))return!1;if(/[\x\÷\+\-\*\/]\(/.test(t))return!1;if(/\)[\x\÷\+\-\*\/]/.test(t))return!1;for(var i,o=t.replace(/[\(\)\x\÷\+\-\*\/]{1,}/g,"`").split(","),s=0;s<o.length;s++)if(i=o[s],/[A-Z]/i.test(i)&&void 0===e.get(i))return!1;for(var c=t.split(","),u=0;u<c.length;u++)if(void 0!==e.get(c[u]))if(null==c[u+1]);else if("+"!==c[u+1]&&"."!==c[u+1]&&"-"!==c[u+1]&&"x"!==c[u+1]&&"÷"!==c[u+1]&&"("!==c[u+1]&&")"!==c[u+1])return!1;return!0}},{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=u(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var a=t.keys()[n];r.set(a,this.deepClone(t.get(a)))}}for(var i in t)t.hasOwnProperty(i)&&(r[i]=this.deepClone(t[i]));return r}},{key:"arrayIntersact",value:function(t,e){return t.filter(function(t){return e.includes(t)})}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,a=t.split("");if(2===t.length)r=e=parseInt(a[0].toString()+a[1].toString(),16),n=e;else if(3===t.length)e=parseInt(a[0].toString()+a[0].toString(),16),r=parseInt(a[1].toString()+a[1].toString(),16),n=parseInt(a[2].toString()+a[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(a[0].toString()+a[1].toString(),16),r=parseInt(a[2].toString()+a[3].toString(),16),n=parseInt(a[4].toString()+a[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,a=0;a<r.length|(n=r[a]);a++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"discretizePathToPnts",value:function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttributeNS(null,"d",t);for(var n=r.getTotalLength()/e,a=[],i=0;i<e;i++){var o=r.getPointAtLength(n*i);a.push([o.x,o.y])}return a}},{key:"checkDSameShape",value:function(t,e){var r=!1;if(void 0!==t&&void 0!==e){var n=[],a=[],i=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g);if("string"==typeof t?n=(t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(i):t instanceof Array&&(n=t),"string"==typeof e?a=(e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(i):e instanceof Array&&(a=e),r=n.length===a.length)for(var o=0;o<n.length;o++){if(n[o].substring(0,1)!==a[o].substring(0,1)){r=!1;break}}}else console.error("undefined d in checkDSameShape!");return r}},{key:"findDStartEnd",value:function(t){var e=0,r=0,n=0,a=0,i=0,o=0;if(t)for(var s=0;s<t.length;s++){var c=t[s].substring(0,1),u=t[s].substring(1).split(",");switch(c){case"M":case"m":e=parseFloat(u[0]),r=parseFloat(u[1]);break;case"L":case"T":i=parseFloat(u[0]),o=parseFloat(u[1]);break;case"l":case"t":n=parseFloat(u[0]),a=parseFloat(u[1]);break;case"H":i=parseFloat(u[0]);break;case"h":n=parseFloat(u[0]);break;case"V":o=parseFloat(u[0]);break;case"v":a=parseFloat(u[0]);break;case"C":i=parseFloat(u[4]),o=parseFloat(u[5]);break;case"c":n=parseFloat(u[4]),a=parseFloat(u[5]);break;case"S":case"Q":i=parseFloat(u[2]),o=parseFloat(u[3]);break;case"s":case"q":n=parseFloat(u[2]),a=parseFloat(u[3]);break;case"A":case"a":n=2*parseFloat(u[0]),a=2*parseFloat(u[1])}}else console.error("wrong d in findDStartEnd!");return{startX:e,startY:r,endX:i,endY:o,relativeEndX:n,relativeEndY:a}}},{key:"checkValidOffsetDCmd",value:function(t,e,r,n){return Math.abs(n-t)<1||Math.abs(r-t)<1||Math.abs(n-e-t)<1}},{key:"scale",value:function(t,e){return e.range[0]+(e.range[1]-e.range[0])*(t-e.domain[0])/(e.domain[1]-e.domain[0])}},{key:"toApproxNum",value:function(t){return parseFloat(parseFloat(t).toFixed(2))}},{key:"orderDCmdsCoords",value:function(t){for(var e=this,r=[],n=[],a=0;a<t.length;a++){var i=t[a].substring(0,1),o=t[a].substring(1),s=o.split(",");switch(i){case"M":case"m":case"L":case"l":case"T":case"t":n.push(this.toApproxNum(s[0])),r.push(this.toApproxNum(s[1]));break;case"S":case"Q":case"C":case"s":case"q":case"c":s.forEach(function(t,a){a%2==0?n.push(e.toApproxNum(t)):r.push(e.toApproxNum(t))});break;case"H":case"h":n.push(this.toApproxNum(o));break;case"V":case"v":r.push(this.toApproxNum(o));break;case"A":case"a":s.forEach(function(t,a){5===a?n.push(e.toApproxNum(t)):6===a&&r.push(e.toApproxNum(t))})}}return console.log("result coords: ",n,r,[].concat(c(new Set(r))),[].concat(c(new Set(r))).sort(),[].concat(c(new Set(r))).sort().reverse()),{xCoords:[].concat(c(new Set(n))).sort(function(t,e){return t-e}),yCoords:[].concat(c(new Set(r))).sort(function(t,e){return e-t})}}},{key:"rescaleSizeOneDirect",value:function(t,e,r,n){for(var a=this,i=[],o=function(o){var s=t[o].substring(0,1),c=t[o].substring(1),u=c.split(",");switch(s){case"M":case"m":case"L":case"l":case"T":case"t":var f=parseFloat(u[0]),l=parseFloat(u[1]),h=r.indexOf(a.toApproxNum(f)),p=r.indexOf(a.toApproxNum(l));"m"!==s&&"l"!==s&&"t"!==s||(h=0===r.indexOf(a.toApproxNum(f))?0:1,p=0===r.indexOf(a.toApproxNum(l))?0:1),console.log("y ratio is: ",p),"x"===e?f+=n*(h/(r.length-1)):"y"===e&&(l-=n*(p/(r.length-1))),i.push(s+f+","+l);break;case"S":case"Q":case"C":case"s":case"q":case"c":var d=s;u.forEach(function(t,i){var o=parseFloat(t),c=r.indexOf(a.toApproxNum(o));"s"!==s&&"q"!==s&&"c"!==s||(c=0===r.indexOf(a.toApproxNum(o))?0:1),i%2==0&&"x"===e?o+=n*(c/(r.length-1)):i%2==1&&"y"===e&&(o-=n*(c/(r.length-1))),d+=o+(i===u.length-1?"":",")}),i.push(d);break;case"H":case"h":if("x"===e){var g=parseFloat(c),v=r.indexOf(a.toApproxNum(g));"h"===s&&(v=0===r.indexOf(a.toApproxNum(g))?0:1),g+=n*(v/(r.length-1)),i.push(s+g)}break;case"V":case"v":if("y"===e){var y=parseFloat(c),m=r.indexOf(a.toApproxNum(y));"v"===s&&(m=0===r.indexOf(a.toApproxNum(y))?0:1),y-=n*(m/(r.length-1)),i.push(s+y)}break;case"A":case"a":var b=s;u.forEach(function(t,i){if(5===i&&"x"===e){var o=parseFloat(t),c=r.indexOf(a.toApproxNum(o));"a"===s&&(c=0===r.indexOf(a.toApproxNum(o))?0:1),o+=n*(c/(r.length-1)),b+=o+","}else if(6===i){var f=parseFloat(t),l=r.indexOf(a.toApproxNum(f));"a"===s&&(l=0===r.indexOf(a.toApproxNum(f))?0:1),f-=n*(l/(r.length-1)),b+=f}else if(0===i&&"x"===e){var h=parseFloat(u[5]),p=parseFloat(t),d=r.indexOf(a.toApproxNum(h));"a"===s&&(d=0===r.indexOf(a.toApproxNum(h))?0:1),p+=Math.abs(n*(d/(r.length-1)))/2,b+=p+","}else if(1===i&&"y"===e){var g=parseFloat(u[6]),v=parseFloat(t),y=r.indexOf(a.toApproxNum(g));"a"===s&&(y=0===r.indexOf(a.toApproxNum(g))?0:1),v+=Math.abs(n*(y/(r.length-1)))/2,b+=v+","}else b+=t+(i===u.length-1?"":",")}),i.push(b);break;case"Z":case"z":i.push(s)}},s=0;s<t.length;s++)o(s);return i}},{key:"rescalePathSize",value:function(t,e,r){var n=[],a=this.orderDCmdsCoords(t);switch(console.log("ori coords: ",a),e){case"x":Math.abs(a.xCoords[a.xCoords.length-1]-a.xCoords[0]);break;case"y":var i=r-Math.abs(a.yCoords[a.yCoords.length-1]-a.yCoords[0]);n=this.rescaleSizeOneDirect(t,"y",a.yCoords,i)}return n}},{key:"dTrans",value:function(t,e,r,n,a,s){var u,f=this,l=s.type,h=[!1,!1,!1,!1,!1];void 0!==s.mergeType&&(h=s.mergeType),h[0]=l===i.default.actionTypes.translateX||l===i.default.actionTypes.translateXY||h[0],h[1]=l===i.default.actionTypes.translateY||l===i.default.actionTypes.translateXY||h[1],h[2]=l===i.default.actionTypes.scaleX||l===i.default.actionTypes.scaleXY||h[2],h[3]=l===i.default.actionTypes.scaleY||l===i.default.actionTypes.scaleXY||h[3],h[4]=l===i.default.actionTypes.dataChange||h[4],(u=console).log.apply(u,["current mark status: "].concat(c(h),[o.default.charts[t].markDatum.get(e),o.default.charts[t].scales,o.default.charts[t].visualMappings]));o.default.charts[t-1].scales;var p=o.default.charts[t].scales,d=o.default.charts[t-1].markDatum.get(e),g=(o.default.charts[t].markDatum.get(e),o.default.charts[t].visualMappings),v=(g.get("x"),g.get("width"),[void 0!==g.get("y"),void 0!==g.get("height")]),y="";if(void 0!==r&&void 0!==n){r=r.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),n=n.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var m=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),b=r.match(m),k=n.match(m),S=this.checkDSameShape(b,k);console.log("same shape: ",S,b,k),S&&function(){var t;if(h[3])if(a[2]);else if(h[4]);else{var e=p.filter(function(t){return"y-scale"===t.name})[0];if(v[1]){var r=g.get("height"),n=d[r],i=f.scale(n,e);t=f.rescalePathSize(b,"y",i),console.log("data last chart and scale this chart: ",n,e,i,b.join(""),t.join(""))}}b=t;var o=f.findDStartEnd(b),c=f.findDStartEnd(k),u=h[0]?c.startX-o.startX:0,l=h[1]?c.startY-o.startY:0,m=h[0]?c.relativeEndX-o.relativeEndX:0,S=h[1]?c.relativeEndY-o.relativeEndY:0;if(console.log("diff XY: ",u,l,"diff relative XY: ",m,S),console.log("merge type: ",s.mergeType,h),b)for(var A=[],x=[],T=function(t){var e=b[t].substring(0,1),r=b[t].substring(1),n=k[t].substring(1);y+=e;var a=r.split(","),i=n.split(",");switch(e){case"M":case"m":case"L":case"T":var o=parseFloat(a[0])+u,s=parseFloat(a[1])+l,c=f.checkValidOffsetDCmd(o,0,parseFloat(a[0]),parseFloat(i[0])),h=f.checkValidOffsetDCmd(s,0,parseFloat(a[1]),parseFloat(i[1]));y+=(c?o:i[0])+","+(h?s:i[1]);break;case"l":case"t":var p=parseFloat(a[0])+m,d=parseFloat(a[1])+S,g=f.checkValidOffsetDCmd(p,diffScaleX,parseFloat(a[0]),parseFloat(i[0])),v=f.checkValidOffsetDCmd(d,diffScaleY,parseFloat(a[1]),parseFloat(i[1]));y+=(g?p:i[0])+","+(v?d:i[1]);break;case"S":case"Q":case"C":a.forEach(function(t,e){var r=0;r=e%2==0?parseFloat(t)+u:parseFloat(t)+l;var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));y+=(n?r:i[e])+(e===a.length-1?"":",")});break;case"s":case"q":case"c":var T="c"===e?3:2;a.forEach(function(t,e){var r=0;r=e%2==0?parseFloat(t)+(1+e/2)*m/T:parseFloat(t)+(1+Math.floor(e/2))*S/T;var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));y+=(n?r:i[e])+(e===a.length-1?"":",")});break;case"H":var w=parseFloat(r)+u,_=f.checkValidOffsetDCmd(w,0,parseFloat(r),parseFloat(n));y+=_?w:n;break;case"h":var M=parseFloat(r)+m,E=f.checkValidOffsetDCmd(M,0,parseFloat(r),parseFloat(n));y+=E?M:n;break;case"V":var O=parseFloat(r)+l,C=f.checkValidOffsetDCmd(O,0,parseFloat(r),parseFloat(n));y+=C?O:n;break;case"v":var F=parseFloat(r)+S,P=f.checkValidOffsetDCmd(F,0,parseFloat(r),parseFloat(n));y+=P?F:n;break;case"A":a.forEach(function(t,e){var r=0;r=5===e?parseFloat(t)+u:6===e?parseFloat(t)+l:parseFloat(t);var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));y+=(n?r:i[e])+(e===a.length-1?"":",")});break;case"a":a.forEach(function(t,e){var r=0;r=5===e?parseFloat(t)+m:6===e?parseFloat(t)+S:parseFloat(t);var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));y+=(n?r:i[e])+(e===a.length-1?"":",")});break;default:y+=r}if("z"===e.toLowerCase())return"break";A.push(e),x.push([])},w=0;w<b.length;w++){if("break"===T(w))break}}()}else console.error("undefined d in dTrans!");return y}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},a=0;a<Object.keys(n).length|(r=Object.keys(n)[a]);a++){var i="object"===u(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,i)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],a=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,i=void 0;i=a.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,i.index)),n.push(i[0])}var s=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(s.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var c=[],u=null,f=!0;if(s.forEach(function(t){if(f)if("M"!==t.command){if(!u)return f=!1;if("m"!==t.command){var e=u,r=t.command===t.command.toLowerCase()?u.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(c.push([e,r]),u=r):f=!1}else u=u.map(function(e,r){return e+t.parameters[r]})}else u=t.parameters.slice(-2)}),f)return{type:"lines",data:c}}if(s.every(function(t){return"MmLlAaZz".includes(t.command)})&&s.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(s.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var a=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(a.cx)||isNaN(a.cy)||l.push({...a,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var a=t*r+e*n,i=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(a/i);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,a,i,o,s,c,u){var f,l,h,p,d,g=2*Math.PI;n<0&&(n=-n),a<0&&(a=-a);var v=Math.sin(i),y=Math.cos(i),m=(e-c)/2,b=(r-u)/2,k=(e+c)/2,S=(r+u)/2,A=y*m+v*b,x=y*b-v*m,T=A*A/(n*n)+x*x/(a*a);T>1&&(n*=Math.sqrt(T),a*=Math.sqrt(T));var w=n*a,_=n*x,M=a*A,E=_*_+M*M,O=Math.sqrt(Math.abs((w*w-E)/E));o==s&&(O=-O);var C=O*_/a,F=-O*M/n;f=y*C-v*F+k,l=v*C+y*F+S;var P=(A-C)/n,I=(A+C)/n,j=(x-F)/a,N=(x+F)/a;for(h=t.radian(1,0,P,j),p=t.radian(P,j,-I,-N);p>g;)p-=g;for(;p<0;)p+=g;for(0!=s&&0!=s||(p-=g),d=h+p;d>g;)d-=g;for(;d<0;)d+=g;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==s||1==s}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,a,i,o){i=i<0?i+2*Math.PI:i,n=0===n?0:n-1,a+=1;var s=(o=o<0||i>o?o+2*Math.PI:o)-i<=Math.PI?0:1,c=t.polarToCartesian(e,r,a,o),u=t.polarToCartesian(e,r,a,i),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,i),h=!1;return c.x===u.x&&c.y===u.y&&(u.y-=1,l.y-=1,h=!0),h?["M"+c.x,c.y,"A"+a,a,0,s,1,u.x,u.y,"M"+l.x,l.y,"A"+n,n,0,s,0,f.x,f.y+"Z"].join(","):["M"+c.x,c.y,"A"+a,a,0,s,0,u.x,u.y,"L"+l.x,l.y,"A"+n,n,0,s,1,f.x,f.y,"L"+c.x,c.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var a=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(a=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(a=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(a=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),a||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var i=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",i)}e.setAttribute("transX",r),e.setAttribute("transY",n)}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",a=0;a<300;a++){var i=e.getPointAtLength(r*a);n+=0===a?"M"+i.x+","+i.y:"L"+i.x+","+i.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,i=(0,a.parseSVG)(r),o=new n.PathMaker;return i.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new n.PathMaker(t);return r.uniform(),[e,r]}},{key:"pathToShape",value:function(t){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var e=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),r=t.match(e);if(r){var n=this.pathIsRect(r);console.log("path is rect: ",n)}}},{key:"pathIsRect",value:function(t){var e=0,r=0;if("z"===t[t.length-1].toLowerCase()&&t.splice(t.length-1,1),4!==t.length)return[!1,e,r];for(var n=t[0].substring(1).split(","),a="",i={x:0,y:0},o=1;o<t.length;o++){var s=t[o].substring(0,1),c=t[o].substring(1);if("v"!==s.toLowerCase()||"h"!==a&&""!==a)if("h"!==s.toLowerCase()||"v"!==a&&""!==a){if("l"===s.toLowerCase()){var u=0,f=0;if("L"===s){var l=c.split(",");u=parseFloat(l[0])-parseFloat(n[0])-i.x,f=parseFloat(l[1])-parseFloat(n[1])-i.y}else{var h=c.split(",");u=parseFloat(h[0]),f=parseFloat(h[1])}if(0!==u&&0!==f)return[!1,e,r];if(0===u){if("h"!==a&&""!==a)return[!1,e,r];a="v",i.y+=f+i.y}else{if("v"!==a&&""!==a)return[!1,e,r];a="h",i.x+=u+i.x}e=u,r=f}}else a="h",i.x="H"===s?parseFloat(c):parseFloat(c)+i.x,e="H"===s?parseFloat(c)-parseFloat(n[1]):parseFloat(c);else a="v",i.y="V"===s?parseFloat(c):parseFloat(c)+i.y,r="V"===s?parseFloat(c)-parseFloat(n[1]):parseFloat(c)}return 0!==i.x||0!==i.y?[!1,e,r]:[!0,Math.abs(e),Math.abs(r)]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var i=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",s=t.match(i);if(s){var c=s[0].substring(0,1),u="0",f="0";if("m"===c||"M"===c){var l=s[0].substring(1).split(",");u=l[0],f=l[1]}for(var h=0;h<s.length;h++){var p=s[h].substring(0,1),d=s[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,a,h,p,d,e,u,r);break;case"h":o=this.calNumTrans(o,a,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,a,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,a,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var g=d.split(","),v=0;v<g.length;v++)o=v%2==0?this.calNumTrans(o,a,h,p,g[v],e,u,r):this.calNumTrans(o,a,h,p,g[v],e,f,n),v!==g.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,a,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,a,h,p,b[k],e,parseFloat(u)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,a,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var S=d.split(","),A=0;A<S.length;A++)A===S.length-2?(o=this.calNumTrans(o,a,h,p,S[A],e,"1",0),o+=" "):A===S.length-1?o=this.calNumTrans(o,a,h,p,S[A],e,"1",0):o+=S[A]+" "}}}return o}},{key:"calNumTrans",value:function(t,e,r,n,a,i,o,s){if(n=n.toLowerCase(),i)if(void 0!==e.get(n)){for(var c=e.get(n),u=!1,f=0;f<c.length;f++)if(c[f].cmdIdx===r){t+=o,u=!0;break}u||(t+=a)}else t+=a;else a.length>0&&(t+=parseFloat(a)+s);return t}},{key:"calTransD",value:function(t,e,r,n,a){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var i="";if(0===r)i=t;else if(1===r)i=e;else for(var o=0,s=n.length;o<s;o++)i+=(0===o?"M":"L")+((a[o][0]-n[o][0])*r+n[o][0])+","+((a[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(i+="Z"),i}},{key:"arcTransition",value:function(t,e,r,n,a,i){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var s=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=s(t,e),r=s(t,r),n=s(r,n),n=s(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var c=i||function(t,e,r){return r*(e-t)+t};return[c(t,r,a),c(e,n,a)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var a=[],i=0;i<e.length;i++)void 0!==e[i]&&a.push(e[i].d?e[i].d:"m0,0");a.length>0&&t.compareD(a,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],a=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),i=1;i<t.length;i++)for(var o=t[i],s=(o=(o=o.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),u=0;u<a.length;u++)if(void 0===s[u]){var f=a[u].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=u,l.diffAttrIdxs=[];for(var h=a[u].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=s[u].substring(0,1),g=s[u].substring(1),v=a[u].substring(1);if(g!==v){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=u,y.diffAttrIdxs=[];for(var m=g.split(","),b=v.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var S=!1,A=0;A<e.get(d).length;A++)if(e.get(d)[A].cmdIdx===y.cmdIdx){S=!0,e.get(d)[A].diffAttrIdxs=[].concat(c(new Set([].concat(c(e.get(d)[A].diffAttrIdxs),c(y.diffAttrIdxs)))));break}S||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",a=0;a<e.length;a++)e[a].indexOf("translate")>=0?n=e[a]:e[a].indexOf("scale")>=0&&(r=e[a]);var i=["0","0"],o="1";return""!==n&&(i=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(i[0]),parseFloat(i[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=p,p.basicShapes=new Map([["rect",["x","y","width","height","rx","ry"]],["circle",["cx","cy","r"]]]),p.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var d=function(){function t(){f(this,t),this.chartWidth=0,this.chartHeight=0}return h(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=d;var g=function(){function t(){f(this,t)}return h(t,[{key:"construcor",value:function(t,e,r,n,a){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=a}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(c(Object.keys(t)),c(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var a=new RegExp(/[0-9\.,\s]/g);return t.d.replace(a,"")===e.d.replace(a,"")}return n.every(function(t){return r.indexOf(t)>=0})}}]),t}();e.AssetTemplate=g},function(t,e,r){var n=r(18),a=r(2),i=a["__core-js_shared__"]||(a["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),a=r(10),i=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[i])?e:a(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,a=r(48),i=(n=r(106))&&n.__esModule?n:{default:n},o=r(56);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return e&&c(t.prototype,e),r&&c(t,r),t}var f=function(){function t(e,r,n){s(this,t),this.id=e,this.type=r,this.source=n}return u(t,null,[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,a=0;a<t.length;a++){var i=t[a];if(void 0!==i.start&&void 0!==i.end){var o=parseInt(i.start),s=parseInt(i.end);if(s<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var c=i.source.split("/"),u=void 0===i.id?c[c.length-1]:i.id,f=o;f<=s;f++)r.push({id:u+f,source:i.source+f+".dsvg"})}else r.push(i)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var a=new Map;t.charts=[];for(var i=[],o=0,s=0,c=!1,u=0;u<e.length;u++)if(e[u].type===t.CHART_URL){var f=new XMLHttpRequest,l="file:"===document.location.protocol?0:200,p=void 0;if(f.open("GET",e[u].source,!1),f.overrideMimeType("text/html;charset=utf-8"),f.send(null),f.status===l){var d=document.createElement("div");d.innerHTML=f.responseText;var g=(p=d.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(g[2]),s=parseFloat(g[3]),t.charts.push(new h(p)),a.set(e[u].id,t.charts.length-1)}else 404===f.status&&(i.unshift(u),c=!0,n.info={type:"error",msg:"Can not find "+e[u].source+" ! Please check the url.",errSpec:'"source":"'+e[u].source.replace(/\s/g,"")+'"'})}else{var v=document.createElement("div");v.innerHTML=e[u].source;var y=v.children[0],m=y.getAttribute("viewBox").split(" ");o=parseFloat(m[2]),s=parseFloat(m[3]),t.charts.push(new h(y)),a.set(e[u].id,t.charts.length-1)}for(var b=0;b<i.length;b++)e.slice(i[b],1);return void 0!==r?t.facetViews(a,r):this.viewport.setViewport(o,s),c}},{key:"removeTransAndMerge",value:function(){for(var e=this,r=new Map,n=0;n<t.charts.length;n++)t.charts[n].svgContent.setAttribute("trans","0,0"),t.removeTransitions(t.charts[n].svgContent.children[0],n,r);console.log("charts after remove transition and added encoding",t.charts[0],t.charts[0].svgContent),Array.from(r).map(function(t){return t[1]}).forEach(function(t){t.forEach(function(r){e.marksWithSameDatum.set(r,t)})}),this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],a=0;a<r.views[0].frames.length;a++){for(var i=[],o=0;o<r.views.length;o++){var s=r.views[o].frames[a];void 0!==e.get(s)?i.push(t.charts[e.get(s)].svgContent.cloneNode(!0)):console.warn("chart name "+s+" is undefined !")}i.length===r.views.length&&n.push(i)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],s=0,c=0,u=s,f=c,l=0;l<n.length;l++){var p=n[l];s=parseFloat(p[0].getAttribute("width")),c=parseFloat(p[0].getAttribute("height")),u=s,f=c;var d=p[0].getAttribute("viewBox").split(" "),g=parseFloat(d[2]),v=parseFloat(d[3]),y=a.CanisUtil.getTransformAttrs(p[0].children[0]);switch(p[0].children[0].setAttribute("transform","translate("+y.transNums[0]+","+y.transNums[1]+")"),e){case i.default.facetType.row:f*=p.length,p[0].setAttribute("height",c*p.length),p[0].setAttribute("viewBox","0 0 "+g+" "+c*p.length);break;case i.default.facetType.col:u*=p.length,p[0].setAttribute("width",s*p.length),p[0].setAttribute("viewBox","0 0 "+s*p.length+" "+v)}for(var m=function(t){var r=p[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,u=0;u<o.length;u++){var f=o[u],l=a.CanisUtil.getTransformAttrs(f);switch(e){case i.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(c+20)*t)+") scale("+l.scaleNum+")");break;case i.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(s+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}p[0].children[0].appendChild(f)}},b=0;b<p.length;b++)m(b);o.push(new h(p[0]))}t.charts=o,this.viewport.setViewport(u,f)}},{key:"mergeCharts",value:function(){for(var e=this,r=new Set,n=new Map,i=new Map,o=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],s={},c=0;c<o.length;c++)s[o[c]]=null;for(var u=function(a){e.markSetsDuringTrans[a]={enter:[],update:[],exit:[]};var c=t.charts[a].svgContent;console.log("tmpChart: ",c);var u=c.querySelectorAll(".mark");u.length>0&&[].forEach.call(u,function(e){var c=e.getAttribute("id");r.add(c);for(var u={},f=0;f<o.length;f++)u[o[f]]="textContent"===o[f]?e.innerHTML:e.getAttribute(o[f]);void 0===n.get(c)&&n.set(c,new Array(t.charts.length).fill(s)),n.get(c)[a]=u,i.set(c,e.outerHTML)})},f=0;f<this.charts.length;f++)u(f);t.changedAttrs=[];var l=a.CanisUtil.deepClone(o);n.forEach(function(e,r){for(var n=0;n<l.length;n++){for(var a=!0,i=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){i=e[o];break}for(var s=0;s<e.length;s++)if(void 0!==e[s]&&e[s][l[n]]!==i[l[n]]){t.changedAttrs.push(l[n]),a=!1;break}a||l.splice(n,1)}});var h=new Map;t.changedAttrs.indexOf("d")>=0&&(h=a.CanisUtil.findDiffCmds(n)),console.log("changed attributes: ",t.changedAttrs),r=Array.from(r);var p=new Map;for(f=0;f<t.charts.length;f++)for(var d=0;d<r.length;d++)if(void 0===p.get(r[d])&&p.set(r[d],!1),0===t.charts[f].svgContent.querySelectorAll("#"+r[d]).length){p.get(r[d])&&(this.markSetsDuringTrans[f].exit.push(r[d]),p.set(r[d],!1));var g=i.get(r[d]),v=document.createElement("div");v.innerHTML=g;for(var y=v.children[0],m={},b=0;b<t.changedAttrs.length;b++)if("y"===t.changedAttrs[b]&&t.changedAttrs.indexOf("height")>=0){var k=(y.getAttribute("y")?parseFloat(y.getAttribute("y")):0)+(y.getAttribute("height")?parseFloat(y.getAttribute("height")):0);y.setAttribute("y",k),m.y=k}else if("d"===t.changedAttrs[b]){var S=void 0;y.getAttribute("d")&&(S=a.CanisUtil.setPathDValue(y.getAttribute("d"),!0,0,0,h)),y.setAttribute("d",S),m.d=S}else"textContent"===t.changedAttrs[b]?(y.innerHTML="",m.textContent=""):"fill"===t.changedAttrs[b]||"stroke"===t.changedAttrs[b]?(void 0===y.getAttribute(t.changedAttrs[b])&&y.setAttribute(t.changedAttrs[b],"#FFFFFF"),m[t.changedAttrs[b]]=y.getAttribute(t.changedAttrs[b])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[b])?"x2"===t.changedAttrs[b]?(y.setAttribute("x2",parseFloat(y.getAttribute("x1"))),m.x2=parseFloat(y.getAttribute("x1"))):"y2"===t.changedAttrs[b]?(y.setAttribute("y2",parseFloat(y.getAttribute("y1"))),m.y2=parseFloat(y.getAttribute("y1"))):m[t.changedAttrs[b]]=parseFloat(y.getAttribute(t.changedAttrs[b])):(y.setAttribute(t.changedAttrs[b],0),m[t.changedAttrs[b]]=0);g='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+y.outerHTML+"</svg>";var A=(new DOMParser).parseFromString(g,"image/svg+xml").lastChild.children[0];t.charts[f].svgContent.querySelector("#chartContent").appendChild(A),n.get(r[d])[f]=m}else p.get(r[d])?this.markSetsDuringTrans[f].update.push(r[d]):(this.markSetsDuringTrans[f].enter.push(r[d]),p.set(r[d],!0));console.log("mark sets between charts: ",t.markSetsDuringTrans),t.dataTrans=new Map;for(var x=0;x<r.length;x++){for(var T=n.get(r[x]),w=[],_=0;_<T.length;_++){for(var M={},E=0;E<t.changedAttrs.length;E++)["width","height","r"].includes(t.changedAttrs[E])?M[t.changedAttrs[E]]=100*T[_][t.changedAttrs[E]]/T[0][t.changedAttrs[E]]:M[t.changedAttrs[E]]=T[_][t.changedAttrs[E]];w.push(M)}t.dataTrans.set(r[x],w),t.charts[0].svgContent.querySelector("#"+r[x]).setAttribute("data-transition",JSON.stringify({dataTrans:w},null,"\t"))}return console.log("chart 0: ",t.charts[0]),t.charts[0].svgContent}},{key:"getBBoxes",value:function(){var t=document.getElementById("visChart").querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e,r,n){void 0!==e.style.fill&&e.style.fill&&(void 0!==e.getAttribute("fill")&&e.getAttribute("fill")||e.setAttribute("fill",e.style.fill),e.style.fill=null),void 0!==e.style.stroke&&e.style.stroke&&(void 0!==e.getAttribute("stroke")&&e.getAttribute("stroke")||e.setAttribute("stroke",e.style.stroke),e.style.stroke=null),void 0!==e.style.strokeWidth&&e.style.strokeWidth&&(void 0!==e.getAttribute("stroke-width")&&e.getAttribute("stroke-width")||e.setAttribute("stroke-width",e.style.strokeWidth),e.style.strokeWidth=null),"none"===e.getAttribute("stroke")&&e.setAttribute("stroke-width",0);var i=e.getAttribute("transform"),o=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var s=e.getAttribute("data-datum"),c=JSON.parse(s);Array.isArray(c)&&(c=c[0]);for(var u=e.getAttribute("class").split(" "),f="",l=0,h=u.length;l<h;l++)if("mark"===u[l]){f=u[l+1];break}c.mShape=f;var p=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(p=!0)});var d=e.getAttribute("id");if(p)this.nonDataMarkDatum.set(d,c);else{this.dataMarkDatum.set(d,c),t.charts[r].addMarkDatum(d,c);var g={};Object.keys(c).forEach(function(t){0!==t.indexOf("_")&&(g[t]=c[t])}),g.mShape="";var v=JSON.stringify(g);void 0===n.get(v)&&n.set(v,[]),n.get(v).push(d)}}if(e.classList.contains("axis")||e.classList.contains("legend")){console.log("datum: ",e.getAttribute("data-datum"));var y=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(y)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),y=y[0]),e.classList.contains("axis"))void 0===this.chartUnderstanding[y.position]&&(this.chartUnderstanding[y.position]=[]),this.chartUnderstanding[y.position].push("position"),void 0!==y.encoding?t.charts[r].addEncoding(y.encoding):console.error("there is no axis encoding!");else if(e.classList.contains("legend"))for(var m in y)void 0===this.chartUnderstanding[y[m]]&&(this.chartUnderstanding[y[m]]=[]),this.chartUnderstanding[y[m]].push(m)}if(i){i=(i=i.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var b="",k="",S=0;S<i.length;S++)i[S].indexOf("translate")>=0?k=i[S]:i[S].indexOf("scale")>=0&&(b=i[S]);var A=k.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",b),"g"===e.tagName?e.setAttribute("trans",parseFloat(A[0])+parseFloat(o[0])+","+(parseFloat(A[1])+parseFloat(o[1]))):a.CanisUtil.transShape(e,parseFloat(A[0])+parseFloat(o[0]),parseFloat(A[1])+parseFloat(o[1]))}else"g"===e.tagName?e.setAttribute("trans",o.join(",")):a.CanisUtil.transShape(e,parseFloat(o[0]),parseFloat(o[1]));if(e.children.length>0)for(var x=0;x<e.children.length;x++)t.removeTransitions(e.children[x],r,n)}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}]),t}();f.CHART_URL="url",f.CHART_CONTENT="content",f.charts=[],f.attrs=["id","source","start","end"],f.changedAttrs=[],f.viewport=new a.Viewport,f.dataTrans=new Map,f.markSetsDuringTrans=[],f.svgChart,f.chartUnderstanding={mShape:["shape"]},f.dataMarkDatum=new Map,f.marksWithSameDatum=new Map,f.nonDataMarkDatum=new Map;var l=f;e.default=l;var h=function(){function t(e){s(this,t),this.svgContent=e,this.scales=[],this.visualMappings=new Map,this.markDatum=new Map}return u(t,[{key:"addMarkDatum",value:function(t,e){this.markDatum.set(t,e)}},{key:"addEncoding",value:function(t){this.addScales(t.scale),this.addVisualMapping(t.visualChannel,t.attribute)}},{key:"addScales",value:function(t){void 0!==t?this.scales.push(t):console.error("undefined scale")}},{key:"addVisualMapping",value:function(t,e){void 0!==t&&void 0!==e?this.visualMappings.set(t,e):console.error("undefined viusal mapping ",t,e)}}]),t}();t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return a.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return s.PathMaker}}),e.MaskType=e.default=void 0;var n,a=r(145),i=(n=r(73))&&n.__esModule?n:{default:n},o=r(104),s=r(72);function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?a.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?a.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,i,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.Alpha;if(e instanceof a.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return i=t instanceof SVGGraphicsElement?a.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,i.root),i}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var i=e.root.layers.indexOf(r.root);if(i>0){var o=e.root.layers[i-1];0!=n&&t[n-1].root==o||t.splice(n,0,new a.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,i.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof a.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof a.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new a.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&c(e.prototype,r),n&&c(e,n),t}();e.default=f,e.MaskType=u,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(u||(e.MaskType=u={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var a={jsMovin:new(((n=r(55))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=a},function(t,e,r){var n=r(15),a=r(6),i=r(35);t.exports=function(t){return function(e,r,o){var s,c=n(e),u=a(c.length),f=i(o,u);if(t&&r!=r){for(;u>f;)if((s=c[f++])!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),a=r(24);t.exports=function(t){return function(e,r){var i,o,s=String(a(e)),c=n(r),u=s.length;return c<0||c>=u?t?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?t?s.charAt(c):i:t?s.slice(c,c+2):o-56320+(i-55296<<10)+65536}}},function(t,e,r){var n=r(4),a=r(20),i=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==a(t))}},function(t,e,r){var n=r(5)("iterator"),a=!1;try{var i=[7][n]();i.return=function(){a=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!a)return!1;var r=!1;try{var i=[7],o=i[n]();o.next=function(){return{done:r=!0}},i[n]=function(){return o},t(i)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),a=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var i=r.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return a.call(t,e)}},function(t,e,r){"use strict";r(127);var n=r(12),a=r(11),i=r(3),o=r(24),s=r(5),c=r(97),u=s("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),p=!i(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!i(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[u]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var g=/./[h],v=r(o,h,""[t],function(t,e,r,n,a){return e.exec===c?p&&!a?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=v[0],m=v[1];n(String.prototype,t,y),a(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),a=r(0),i=r(12),o=r(41),s=r(30),c=r(40),u=r(39),f=r(4),l=r(3),h=r(62),p=r(43),d=r(83);t.exports=function(t,e,r,g,v,y){var m=n[t],b=m,k=v?"set":"add",S=b&&b.prototype,A={},x=function(t){var e=S[t];i(S,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||S.forEach&&!l(function(){(new b).entries().next()}))){var T=new b,w=T[k](y?{}:-0,1)!=T,_=l(function(){T.has(1)}),M=h(function(t){new b(t)}),E=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});M||((b=e(function(e,r){u(e,b,t);var n=d(new m,e,b);return null!=r&&c(r,v,n[k],n),n})).prototype=S,S.constructor=b),(_||E)&&(x("delete"),x("has"),v&&x("get")),(E||w)&&x(k),y&&S.clear&&delete S.clear}else b=g.getConstructor(e,t,v,k),o(b.prototype,r),s.NEED=!0;return p(b,t),A[t]=b,a(a.G+a.W+a.F*(b!=m),A),y||g.setStrong(b,t,v),b}},function(t,e,r){for(var n,a=r(2),i=r(11),o=r(33),s=o("typed_array"),c=o("view"),u=!(!a.ArrayBuffer||!a.DataView),f=u,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=a[h[l++]])?(i(n.prototype,s,!0),i(n.prototype,c,!0)):f=!1;t.exports={ABV:u,CONSTR:f,TYPED:s,VIEW:c}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),a=r(10),i=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,s,c=arguments[1];return a(this),(e=void 0!==c)&&a(c),null==t?new this:(r=[],e?(n=0,s=i(c,arguments[2],2),o(t,!1,function(t){r.push(s(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(54)),a=l(r(75)),i=l(r(107)),o=l(r(47)),s=r(48),c=r(56),u=r(74),f=r(55);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function v(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._id,t.chartIdx,t.selector,t._align=e.alignTarget.object,t.grouping=new i.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t.leaves=[],t.marksInOrder=[],t.anisAligned=[],t.alignOnData=!1,t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms",this.allMarkAni.forEach(function(t,r){for(var n,a=0;a<t.actionAttrs.length|(n=t.actionAttrs[a]);a++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)})}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;console.log("going to map to lottie spec: ",this.allMarkAni),this.allMarkAni.forEach(function(r,n){for(var i=function(i){var l=r.actionAttrs[i];if(l.duration>0){var h=document.getElementById(n);if(l.type===a.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),g=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===a.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,u.getBoundingBox)(h);c.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),c.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&c.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var i=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,v=0;v<t.to.length;v++)if(t.to[v][0]===n){o=t.from[v][1],f=t.to[v][1];break}i.forEach(function(t){if("shape"===t){var e,r,i=p(s.CanisUtil.transDToLottieSpec(o),2);e=i[0],o=i[1];var u=p(s.CanisUtil.transDToLottieSpec(f),2);r=u[0],f=u[1],c.globalVar.markLayers.get(n).setAnimatableProperty("x",d,g,e[0],r[0],a.default.transToLottieAction(l.easing)),c.globalVar.markLayers.get(n).setAnimatableProperty("y",d,g,e[1],r[1],a.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=s.CanisUtil.toLottieRGBA(o),f=s.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);c.globalVar.markLayers.get(n).setAnimatableProperty(t,d,g,o,f,a.default.transToLottieAction(l.easing))})}else i.forEach(function(e){c.globalVar.markLayers.get(n).setAnimatableProperty(e,d,g,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))})}else c.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,g,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))})}else if(l.type===a.default.actionTargets.mask){var v,y=(0,u.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case a.default.targetAnimationType.wipe:case a.default.targetAnimationType.move:case a.default.targetAnimationType.appear:v=f.LayerFactory.boundingBox(h);break;case a.default.targetAnimationType.circle:(v=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),v.setStaticProperty("anchorY",y[3]/2);break;case a.default.targetAnimationType.wheel:var b=s.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],S=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];v=f.LayerFactory.ellipse(k,S,m,m);var A=t.finalStatus.get(n)[l.chartIdx].startAngle,x=t.finalStatus.get(n)[l.chartIdx].endAngle;v.setStaticProperty("trimOffset",-A/Math.PI/2*360-90),l.attribute[0].to=1-(x-A)%(2*Math.PI)/(2*Math.PI),v.setStaticProperty("strokeWidth",2*m),v.setStaticProperty("fillOpacity",0)}var T=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),w=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){v.setAnimatableProperty(t.attrName,T,w,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))}),c.globalVar.jsMovin.addMask(v,c.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)i(l)})}},{key:"transAlign",value:function(t){switch(t){case this.alignTarget.withEle:return"withEle";case this.alignTarget.withObj:return"withObj"}}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.allMarkAniTrans.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear(),e.aniIdx=0}}],(l=[{key:"replaceConstants",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.replaceOffsetConst(t,e),"undefined"!==this.grouping&&this.grouping.replaceDelayConst(t,e),this.actions.forEach(function(r){r.replaceOffsetConst(t,e),r.replaceDurationConst(t,e)})}},{key:"translate",value:function(t,e,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.id=t.id,this.reference=t.reference,this.offset=t.offset,this.align=t.align,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var s,c=[[]],u=0;u<t.effects.length|(s=t.effects[u]);u++)s.reference===o.default.timingRef.previousStart||void 0===s.reference?c[c.length-1].push(u):c.push([u]);console.log("action index to merge: ",c);var f=[],l=[a.default.actionTypes.translateX,a.default.actionTypes.translateY,a.default.actionTypes.translateXY,a.default.actionTypes.scaleX,a.default.actionTypes.scaleY,a.default.actionTypes.scaleXY,a.default.actionTypes.dataChange];c.forEach(function(e){var r={},n=!1,i=0,o=[!1,!1,!1,!1,!1];e.forEach(function(e){var s=t.effects[e];l.includes(s.type)?(n=!0,i++,Object.keys(s).forEach(function(t){r[t]=s[t]}),o[0]=s.type===a.default.actionTypes.translateX||s.type===a.default.actionTypes.translateXY||o[0],o[1]=s.type===a.default.actionTypes.translateY||s.type===a.default.actionTypes.translateXY||o[1],o[2]=s.type===a.default.actionTypes.scaleX||s.type===a.default.actionTypes.scaleXY||o[2],o[3]=s.type===a.default.actionTypes.scaleY||s.type===a.default.actionTypes.scaleXY||o[3],o[4]=s.type===a.default.actionTypes.dataChange||o[4]):f.push(s)}),n&&(i>1&&(r.type=a.default.actionTypes.mergedTransition,r.mergeType=o),f.push(r))}),console.log("merged actions: ",f);for(var h,p=[!1,!1,!1],d=0;d<f.length|(h=f[d]);d++){h.type===a.default.actionTypes.scaleX||h.type===a.default.actionTypes.scaleXY?p[0]=!0:h.type===a.default.actionTypes.scaleY||h.type===a.default.actionTypes.scaleXY?p[1]=!0:h.type===a.default.actionTypes.dataChange?p[2]=!0:void 0!==h.mergeType&&(p[0]=p[0]||h.mergeType[2],p[1]=p[1]||h.mergeType[3],p[2]=p[2]||h.mergeType[4]),h.chartIdx=t.chartIdx;var g=a.default.transToVisualAttrAction(h,p,t.chartIdx,e,n,i);console.log("translated visual action: ",g);for(var v,y=0;y<g.length|(v=g[y]);y++){var m=new a.default;m.initAction(v),this.actions.push(m)}}}}},{key:"calAniTime",value:function(t){var r,n=this,i=!1;void 0!==this.align&&e.animations.forEach(function(t,a){n.align.target===t.id&&(r=t,n.align.type===e.alignTarget.withEle&&(i=!0,n._grouping=t.grouping))}),void 0!==r&&r.anisAligned.push("".concat(this.chartIdx,"_").concat(this.selector));for(var o,c=this,u=new Map,f=0;f<t.length|(o=t[f]);f++){for(var l,g=new Map,v=0;v<this.actions.length|(l=this.actions[v]);v++)if("object"===d(l.duration)){var y=e.domMarks.get(o)["data-datum"],m=parseFloat(y[l.duration.field]),b=void 0===l.duration.minDuration?300:l.duration.minDuration;g.set(l.duration.field,[m,b])}u.set(o,g)}var k=p(a.default.calActionDuration(this.actions,u,e.domMarks),3),S=k[0],A=k[1],x=k[2],T=[],w=[];if(i){var _=p(this._grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,i),2);T=_[0],w=_[1]}else{var M=p(this.grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,i),2);T=M[0],w=M[1]}i&&(this.root.children=w),this.marksInOrder=T,this.leaves=w;for(var E,O=new Map,C=0;C<this.marksInOrder.length|(E=this.marksInOrder[C]);C++){for(var F,P={},I=0;I<e.visualAttrs.length|(F=e.visualAttrs[I]);I++)if(void 0===e.domMarks.get(E)[F])switch(F){case"opacity":P[F]=1;break;case"width":P[F]=e.domMarks.get(E).bbWidth;break;case"height":P[F]=e.domMarks.get(E).bbHeight;break;case"x":P[F]=e.domMarks.get(E).bbX;break;case"y":P[F]=e.domMarks.get(E).bbY;break;case"cx":void 0!==e.domMarks.get(E).cx?P[F]=e.domMarks.get(E).cx:P[F]=e.domMarks.get(E).bbX+e.domMarks.get(E).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(E).cy?P[F]=e.domMarks.get(E).cy:P[F]=e.domMarks.get(E).bbY+e.domMarks.get(E).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(E).innerRadius?P[F]=e.domMarks.get(E).innerRadius:P[F]=0;break;case"outterRadius":void 0!==e.domMarks.get(E).outterRadius?P[F]=e.domMarks.get(E).outterRadius:P[F]=Math.sqrt(Math.pow(e.domMarks.get(E).bbWidth/2,2)+Math.pow(e.domMarks.get(E).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(E).startAngle?P[F]=e.domMarks.get(E).startAngle:P[F]=0;break;case"endAngle":void 0!==e.domMarks.get(E).endAngle?P[F]=e.domMarks.get(E).endAngle:P[F]=2*Math.PI}else P[F]=e.domMarks.get(E)[F];void 0===e.finalStatus.get(E)&&e.finalStatus.set(E,[]),e.finalStatus.get(E).push(P),O.set(E,{startTime:0,totalDuration:S.get(E),actionAttrs:[]})}var j=new Map;if(void 0!==this.align)switch(this.align.type){case e.alignTarget.withEle:j=this.calTimeAsEle(O,r);break;case e.alignTarget.withObj:j=this.calTimeAsObj(O,r)}else j=this.calTimeAsObj(O,r);O.forEach(function(t,r){var n={startTime:t.startTime+j.get(r),totalDuration:t.totalDuration,actionAttrs:[]};c.updateAniStartAndEndTime(n);for(var i,o=0;o<x.length|(i=x[o]);o++){for(var u,f=new a.default,l=Object.keys(i),h=0;h<l.length|(u=l[h]);h++)if(f[u]=i[u],"_duration"===u&&"object"===d(i[u])){var p=e.domMarks.get(r)["data-datum"],g=A.get(i[u].field);f[u]=i[u].minDuration*parseFloat(p[i[u].field])/g}else"offsetStart"===u&&(f[u]=i[u].get(r));f.animationType===a.default.targetAnimationType.custom?s.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}O.set(r,n)}),O.forEach(function(t,r){for(var n=0,a=0;a<t.actionAttrs.length;a++)t.actionAttrs[a].startTime=t.startTime+t.actionAttrs[a].offsetStart,t.actionAttrs[a].startTime+t.actionAttrs[a].duration>n&&(n=t.actionAttrs[a].startTime+t.actionAttrs[a].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var i=e.allMarkAni.get(r).startTime,o=i+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=i<t.startTime?i:t.startTime;var s=t.startTime+t.totalDuration;o=o>s?o:s,e.allMarkAni.get(r).totalDuration=o-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}})}},{key:"calTimeAsEle",value:function(t,r){var a=this,i=this;this.root.align=this.align,r.leaves.forEach(function(t){var r=t.marks;t.leafStart=1e5,t.leafEnd=0,r.forEach(function(r){var n=e.allMarkAni.get(r);n.startTime<t.leafStart&&(t.leafStart=n.startTime),n.startTime+n.totalDuration>t.leafEnd&&(t.leafEnd=n.startTime+n.totalDuration)})});var o=new Map;if(r.leaves.forEach(function(t,e){var r=[];t.marks.forEach(function(t){var e;void 0!==n.default.marksWithSameDatum.get(t)&&(e=r).push.apply(e,h(n.default.marksWithSameDatum.get(t)))}),r=[].concat(h(new Set(r)));for(var a,c=0,u=i.leaves.length;c<u|(a=i.leaves[c]);c++)void 0===o.get(c)&&o.set(c,[]),s.CanisUtil.arrIsContained(r,a.marks)&&(o.get(c).push(e),i.alignOnData=!0)}),this.alignOnData){var c=this.leaves.length,u=0,f=function(e){var n=r.leaves[o.get(e)[0]],i=a.leaves[e-1],s=a.leaves[e],c="",f="";void 0!==s?(f=s.id,void 0===n?void 0!==i&&(i.leafStart=1e5,i.leafEnd=0,i.marks.forEach(function(e){var r=t.get(e);r.startTime<i.leafStart&&(i.leafStart=r.startTime),r.startTime+r.totalDuration>i.leafEnd&&(i.leafEnd=r.startTime+r.totalDuration)}),u=a.calOfstTimeForLastAni(s,i,t)):(s.alignTo=n.id,void 0===n.alignWithLeaves&&(n.alignWithLeaves=[]),n.alignWithLeaves.push(s),c=n.id,u=a.calOfstTimeForLastAni(s,n,t))):u=0;var l="".concat(a.chartIdx,"_").concat(a.selector);a.updateLastAnimationTiming(r,n,u,c,f,l)};for(g=0;g<c;g++)f(g)}else for(var l=this.leaves.length>r.leaves.length?this.leaves.length:r.leaves.length,p=0,d=function(n){var i=r.leaves[n],o=a.leaves[n-1],s=a.leaves[n],c="",u="";void 0!==s?(u=s.id,void 0===i?void 0!==o&&(o.leafStart=1e5,o.leafEnd=0,o.marks.forEach(function(t){var r=e.allMarkAni.get(t);r.startTime<o.leafStart&&(o.leafStart=r.startTime),r.startTime+r.totalDuration>o.leafEnd&&(o.leafEnd=r.startTime+r.totalDuration)}),p=a.calOfstTimeForLastAni(s,o,t)):(s.alignTo=i.id,void 0===i.alignWithLeaves&&(i.alignWithLeaves=[]),i.alignWithLeaves.push(s),c=i.id,p=a.calOfstTimeForLastAni(s,i,t))):p=0;var f="".concat(a.chartIdx,"_").concat(a.selector);a.updateLastAnimationTiming(r,i,p,c,u,f)},g=0;g<l;g++)d(g);return this.calAniOffset(t,void 0,e.alignTarget.withEle)}},{key:"calOfstTimeForLastAni",value:function(t,r,n){var a=0;t.start=1e6,t.end=0;var i=0;switch(this.reference){case o.default.timingRef.previousStart:return i=r.leafStart,t.marks.forEach(function(e){var o=n.get(e).totalDuration;n.get(e).startTime=i,i+o-r.leafEnd>a&&(a=i+o-r.leafEnd),i<t.start&&(t.start=i),i+o>t.end&&(t.end=i+o)}),a;case o.default.timingRef.previousEnd:return i=r.leafEnd,r.alignWithLeaves.forEach(function(t){void 0!==t.leafEnd?t.leafEnd>i&&(i=t.leafEnd):t.marks.forEach(function(t){if(void 0!==e.allMarkAni.get(t)){var r=e.allMarkAni.get(t).startTime+e.allMarkAni.get(t).totalDuration;r>i&&(i=r)}})}),t.marks.forEach(function(e){var r=n.get(e).totalDuration;n.get(e).startTime=i,i+r>a&&(a=r),i<t.start&&(t.start=i),i+r>t.end&&(t.end=i+r)}),a}}},{key:"updateLastAnimationTiming",value:function(t,r,n,a,i,o){var s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6];if(""!==a&&t.leaves.forEach(function(t){t.id===a&&(void 0===t.alignWith&&(t.alignWith=[]),t.alignWith.push(o),void 0===t.alignWithIds&&(t.alignWithIds=[]),t.alignWithIds.push(i))}),void 0!==r){var c,u=this;t.leaves.forEach(function(a){var i=r.leafStart;if(void 0===i&&(i=1e7,r.marks.forEach(function(t){e.allMarkAni.get(t).startTime<i&&(i=e.allMarkAni.get(t).startTime)})),void 0!==a.leafStart){if(a.leafStart>i){var o=1e5;a.marks.forEach(function(r){e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime<o&&(o=e.allMarkAni.get(r).startTime),e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>a.leafEnd&&(a.leafEnd=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),a.leafEnd>t.animationEndTime&&(t.animationEndTime=a.leafEnd),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n})}),a.leafStart=o}}else a.marks.forEach(function(r){e.allMarkAni.get(r).startTime>i&&(e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>t.animationEndTime&&(t.animationEndTime=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n}))})}),t.anisAligned.length>0&&t.anisAligned.forEach(function(t){if(t!=="".concat(u.chartIdx,"_").concat(u.selector)){for(var a,i=e.animations.get(t),o=0,s=r.alignWithLeaves.length;o<s;o++){for(var c=r.alignWithLeaves[o],f=0,l=i.leaves.length;f<l;f++)if(c.id===i.leaves[f].id){a=c;break}if(void 0!==a)break}u.updateLastAnimationTiming(i,a,n,"","","",!1)}}),void 0!==t.align&&s&&t.align.type===e.alignTarget.withEle&&(e.animations.forEach(function(e,r){t.align.target===e.id&&(c=e)}),u.updateLastAnimationTiming(c,r,n,"","",""))}}},{key:"calTimeAsObj",value:function(t,r){return this.grouping.calTimeWithTree(this.root,-1,-1,t),this.root.timingRef=this.reference,this.root.offset=this.offset,this.root.align=this.align,this.root.aniId=this.id,this.calAniOffset(t,r,e.alignTarget.withObj)}},{key:"calAniOffset",value:function(t,r,n){var a=1e4;return t.forEach(function(t,e){t.startTime<a&&(a=t.startTime)}),n===e.alignTarget.withEle?this.calELeOffsetTime(e.domMarks):void 0===r?this.calOffsetTime(0,0,a,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,a,e.domMarks)}},{key:"updateAniStartAndEndTime",value:function(t){t.startTime<this.animationStartTime&&(this.animationStartTime=t.startTime),t.startTime+t.totalDuration>this.animationEndTime&&(this.animationEndTime=t.startTime+t.totalDuration)}},{key:"id",set:function(t){void 0===this._id&&(void 0!==t?this._id=t:(this._id="ani"+e.aniIdx,e.aniIdx++))},get:function(){return this._id}},{key:"align",set:function(t){void 0!==t&&"object"===d(t)&&(this._align=t)},get:function(){return this._align}}])&&g(r.prototype,l),m&&g(r,m),e}();m.FIRST_ANI_ID="ani0",m.aniIdx=0,m.alignTarget={withEle:"element",withObj:"object"},m.alignAttrs=["target","type"],m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.markClass=new Map,m.allMarks=[],m.attrs=["id","selector","grouping","effects","offset","reference","align"],m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map,m.allMarkAniTrans=new Map;var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(105);function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,s;return e=t,s=[{key:"a2c",value:function(t,e,r,n,a,i,o,s,c,u){var f,l=120*Math.PI/180,h=Math.PI/180*(+a||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,s,c,s,c];if(u)x=u[0],T=u[1],S=u[2],A=u[3];else{t=(f=d(t,e,-h)).x,e=f.y,s=(f=d(s,c,-h)).x,c=f.y,Math.cos(Math.PI/180*a),Math.sin(Math.PI/180*a);var g=(t-s)/2,v=(e-c)/2,y=g*g/(r*r)+v*v/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(i==o?-1:1)*Math.sqrt(Math.abs((m*b-m*v*v-b*g*g)/(m*v*v+b*g*g))),S=k*r*v/n+(t+s)/2,A=k*-n*g/r+(e+c)/2,x=Math.asin((e-A)/n),T=Math.asin((c-A)/n);x=t<S?Math.PI-x:x,T=s<S?Math.PI-T:T,x<0&&(x=2*Math.PI+x),T<0&&(T=2*Math.PI+T),o&&x>T&&(x-=2*Math.PI),!o&&T>x&&(T-=2*Math.PI)}var w=T-x;if(Math.abs(w)>l){var _=T,M=s,E=c;T=x+l*(o&&T>x?1:-1),s=S+r*Math.cos(T),c=A+n*Math.sin(T),p=this.a2c(s,c,r,n,a,0,o,M,E,[T,_,S,A])}w=T-x;var O=Math.cos(x),C=Math.sin(x),F=Math.cos(T),P=Math.sin(T),I=Math.tan(w/4),j=4/3*r*I,N=4/3*n*I,R=[t,e],L=[t+j*C,e-N*O],D=[s+j*P,c-N*F],V=[s,c];if(L[0]=2*R[0]-L[0],L[1]=2*R[1]-L[1],u)return[L,D,V].concat(p);for(var G=[],B=0,Y=(p=[L,D,V].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;B<Y;B++)G[B]=B%2?d(p[B-1],p[B],h).y:d(p[B],p[B+1],h).x;return G}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var a=3*(n-3*r+3*e-t),i=6*(r-2*e+t),o=3*(e-t),s=1/0,c=-1/0;if(i*i-4*a*o>=0){var u=Math.sqrt(i*i-4*a*o);[1,-1].map(function(t){return(t*u-i)/2/a}).forEach(function(a){if(a>0&&a<1){var i=Math.pow(1-a,3)*t+3*Math.pow(1-a,2)*a*e+3*(1-a)*a*a*r+Math.pow(a,3)*n;s=Math.min(s,i),c=Math.max(c,i)}})}return s=Math.min(s,t,n),c=Math.max(c,t,n),[s,c]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,a){n>=a.length-1||r.push(t*(1-e)+a[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var a=this.calculateHighlyOrder(r,t),i=this.calculateHighlyOrder(a,t),o=this.calculateHighlyOrder(i,t);return[a[0],i[0],o[0],i[1],a[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,a(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,i,o){this.path.i.push([r-i,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([i,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,t,r,i)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(i,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,a,i){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+a,this.currentY+i)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,i,o,s,c){for(var u=t.a2c(this.currentX,this.currentY,e,r,n,i,o,s,c);u.length>=6;){var f=u.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,a,i,o){this.arcTo(t,e,r,n,a,this.currentX+i,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,a(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,a(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,i,o){if(i<=0)return r.v.push(n),void r.i.push(e.path.i[i]);for(var s=e.path.o,c=e.path.i,u=[o[i-1][0],s[i-1][0]+o[i-1][0],c[i][0]+n[0],n[0]],f=[o[i-1][1],s[i-1][1]+o[i-1][1],c[i][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(a(u))),d=e.calculateBezierSplit.apply(e,[h].concat(a(f))),g=u[0],v=p.shift()-g,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,S=d[1],A=d.shift()-S;r.o.push([v,k]),r.i.push([m,A]),r.v.push([y,S]),u=p,f=d}var x=u.shift(),T=u.shift()-x,w=u[1],_=u.shift()-w,M=f.shift(),E=f.shift()-M,O=f[1],C=f.shift()-O;r.o.push([T,E]),r.i.push([_,C]),r.v.push([w,O])}),this.path=r,this.uniform()}}}])&&i(e.prototype,r),s&&i(e,s),t}();e.PathMaker=s},function(t,e,r){var n=r(148),a=r(149);t.exports=function(t,e,r){var i=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var s=0;s<16;++s)e[i+s]=o[s];return e||a(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function a(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),a=t.getBBox();return[r.e+a.x,r.f+a.y,a.width+1,a.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=a,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/a(t,e)):0}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_ChartSpec=_interopRequireDefault(__webpack_require__(54)),_GlobalVar=__webpack_require__(56),_jsmovin=__webpack_require__(55),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ActionSpec=function(_TimingSpec){function ActionSpec(){var t;return _classCallCheck(this,ActionSpec),(t=_possibleConstructorReturn(this,(ActionSpec.__proto__||Object.getPrototypeOf(ActionSpec)).call(this))).chartIdx=0,t._extend="",t._type=ActionSpec.actionTypes.appear,t.animationType="",t._easing=ActionSpec.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t.oriActionType,t}return _inherits(ActionSpec,_TimingSpec),_createClass(ActionSpec,[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?_jsmovin.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.delay,this.duration=t.duration,this.easing=t.easing,this.oriActionType=t.oriActionType,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"replaceDurationConst",value:function replaceDurationConst(constants){var _this3=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.duration?void 0===constants.get(this.duration)?0===this.duration.indexOf("calc")?(this.duration=this.duration.substring(0,this.duration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.includes(e)&&("number"==typeof t?_this3.duration=_this3.duration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+_this3.duration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration,constants)?this.duration=eval(this.duration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration)?this.duration=constants.get(this.duration):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:this.duration&&"object"===_typeof(this.duration)&&"string"==typeof this.duration.minDuration&&(void 0===constants.get(this.duration.minDuration)?0===this.duration.minDuration.indexOf("calc")?(this.duration.minDuration=this.duration.minDuration.substring(0,this.duration.minDuration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.minDuration.includes(e)&&("number"==typeof t?_this3.duration.minDuration=_this3.duration.minDuration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+_this3.duration.minDuration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration.minDuration,constants)?this.duration.minDuration=eval(this.duration.minDuration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration.minDuration)?this.duration.minDuration=constants.get(this.duration.minDuration):status.info={type:"error",msg:"MinDuration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(ActionSpec.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(ActionSpec.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){"number"==typeof t?this._duration=Math.floor(t/(1e3/_TimingSpec2.default.FRAME_RATE))*(1e3/_TimingSpec2.default.FRAME_RATE):"string"!=typeof t&&"object"!==_typeof(t)||(this._duration=t)},get:function(){return this._duration}}],[{key:"assignActionTmpls",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.actionTmpls.clear(),t.forEach(function(t){t.name&&void 0!==t.name||(t.name=""),e.actionTmpls.set(t.name,t)}),this.actionTmpls.forEach(function(t,n){var a=t.extend;if(a&&void 0!==a){var i=e.actionTmpls.get(a);void 0!==i?(Object.keys(i).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=i[e])}),delete t.extend,e.actionTmpls.set(n,t)):r.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+a+'"'}}})}},{key:"replaceActionTmpls",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t.extend&&void 0!==t.extend){var r=this.actionTmpls.get(t.extend);return void 0!==r?(Object.keys(r).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=r[e])}),delete t.extend,t):(e.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+t.extend+'"'},t)}return t}},{key:"transToVisualAttrAction",value:function(t,e,r,n,a){arguments.length>5&&void 0!==arguments[5]&&arguments[5];console.log("going to change action into visual attribute changes: ",t,e,r,a);var i=[];if((t=this.replaceActionTmpls(t)).type!==ActionSpec.actionTypes.transition){var o={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?_TimingSpec2.default.FRAME_RATE:t.duration,type:ActionSpec.actionTargets.mask,oriActionType:t.type};switch(t.type){case ActionSpec.actionTypes.appear:o.duration=1e3/_TimingSpec2.default.FRAME_RATE,o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.disappear:o.duration=1e3/_TimingSpec2.default.FRAME_RATE,o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.fade:o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.fadeOut:o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.grow:o.type=ActionSpec.actionTargets.mark,o.animationType=ActionSpec.targetAnimationType.grow,o.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.degrow:o.type=ActionSpec.actionTargets.mark,o.animationType=ActionSpec.targetAnimationType.grow,o.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wipeBottom:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleY",from:.5,to:0}];break;case ActionSpec.actionTypes.wipeOutFromTop:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeTop:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromBottom:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wipeLeft:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromRight:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeRight:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeOutFromLeft:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.circle:o.animationType=ActionSpec.targetAnimationType.circle,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.circleOut:o.animationType=ActionSpec.targetAnimationType.circle,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wheel:o.animationType=ActionSpec.targetAnimationType.wheel,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wheelOut:o.animationType=ActionSpec.targetAnimationType.wheel,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.translateX:case ActionSpec.actionTypes.translateY:case ActionSpec.actionTypes.translateXY:case ActionSpec.actionTypes.scaleX:case ActionSpec.actionTypes.scaleY:case ActionSpec.actionTypes.scaleXY:case ActionSpec.actionTypes.dataChange:case ActionSpec.actionTypes.mergedTransition:console.log("test transition: ",_ChartSpec.default.dataTrans,r),o.animationType=ActionSpec.targetAnimationType.custom,o.type=ActionSpec.actionTargets.mark;var s=[],c=[];_ChartSpec.default.dataTrans.forEach(function(n,i){if(r<n.length&&a.includes(i)){var o=n[r-1].d,u=n[r].d;console.log("calculating dtrans: ",i);var f=_Util.CanisUtil.dTrans(r,i,o,u,e,t);"mark1"===i&&(console.log("trans from",o),console.log("trans to",u),console.log("transed",f)),s.push([i,o]),c.push([i,f]),n[r-1].d=f,_ChartSpec.default.dataTrans.set(i,n)}}),console.log("translated ",_ChartSpec.default.dataTrans),o.attribute=[{attrName:"d",from:s,to:c}]}i.push(o)}return console.log("action json in attributes: ",i),i}},{key:"calActionDuration",value:function(t,e,r){for(var n=0,a=-1e5,i=0,o=0,s=!1,c=function(e){var c=void 0,u=new Map;c=t[e].calOffsetTime(i,o,0,r),e>0&&t[e-1].animationType===ActionSpec.targetAnimationType.mistake&&c.forEach(function(r,n){c.set(n,r-t[e-1].offset)});var f=1e6,l=-1e5;t[e].offsetStart=new Map,c.forEach(function(r,i){var o=0;"object"===_typeof(t[e].duration)?(s=!0,o=r):"number"==typeof t[e].duration&&(o=r+t[e].duration),u.set(i,o),t[e].offsetStart.set(i,r),r<f&&(f=r),o>l&&(l=o),r<n&&(n=r),o>a&&(a=o)}),i=f,o=l},u=0;u<t.length;u++)c(u);var f=a-n,l=new Map,h=new Map;return s?(e.forEach(function(t,e){t.forEach(function(t,e){(void 0===h.get(e)||t[0]<h.get(e))&&h.set(e,t[0])})}),e.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=h.get(e);r+=t[1]*t[0]/n}),l.set(e,f+r)})):e.forEach(function(t,e){l.set(e,f)}),[l,h,t]}},{key:"transToLottieAction",value:function(t){switch(t){case ActionSpec.easingType.easeLinear:return _jsmovin.EasingFactory.linear();case ActionSpec.easingType.easeInQuad:return _jsmovin.EasingFactory.easeInQuad();case ActionSpec.easingType.easeOutQuad:return _jsmovin.EasingFactory.easeOutQuad();case ActionSpec.easingType.easeInOutQuad:return _jsmovin.EasingFactory.easeInOutQuad();case ActionSpec.easingType.easeInCubic:return _jsmovin.EasingFactory.easeInCubic();case ActionSpec.easingType.easeOutCubic:return _jsmovin.EasingFactory.easeOutCubic();case ActionSpec.easingType.easeInOutCubic:return _jsmovin.EasingFactory.easeInOutCubic()}}}]),ActionSpec}(_TimingSpec2.default);ActionSpec.actionTmpls=new Map,ActionSpec.attrs=["extend","type","offset","reference","easing","duration"],ActionSpec.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",test:"test",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",translateX:"translate X",translateY:"translate Y",translateXY:"translate XY",scaleX:"scale X",scaleY:"scale Y",scaleXY:"scale XY",dataChange:"data change",text:"text",mergedTransition:"merge transition",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},ActionSpec.actionTargets={mark:"mark",mask:"mask"},ActionSpec.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",test:"test",grow:"grow",custom:"custom",mistake:"mistake"},ActionSpec.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var _default=ActionSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){var n=r(4),a=r(2).document,i=n(a)&&n(a.createElement);t.exports=function(t){return i?a.createElement(t):{}}},function(t,e,r){var n=r(2),a=r(18),i=r(29),o=r(109),s=r(8).f;t.exports=function(t){var e=a.Symbol||(a.Symbol=i?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(49)("keys"),a=r(33);t.exports=function(t){return n[t]||(n[t]=a(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),a=r(1),i=function(t,e){if(a(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return i(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:i}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),a=r(81).set;t.exports=function(t,e,r){var i,o=e.constructor;return o!==r&&"function"==typeof o&&(i=o.prototype)!==r.prototype&&n(i)&&a&&a(t,i),t}},function(t,e,r){"use strict";var n=r(21),a=r(24);t.exports=function(t){var e=String(a(this)),r="",i=n(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),a=r(0),i=r(12),o=r(11),s=r(46),c=r(88),u=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,g,v,y){c(r,e,d);var m,b,k,S=function(t){if(!h&&t in w)return w[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},A=e+" Iterator",x="values"==g,T=!1,w=t.prototype,_=w[l]||w["@@iterator"]||g&&w[g],M=_||S(g),E=g?x?S("entries"):M:void 0,O="Array"==e&&w.entries||_;if(O&&(k=f(O.call(new t)))!==Object.prototype&&k.next&&(u(k,A,!0),n||"function"==typeof k[l]||o(k,l,p)),x&&_&&"values"!==_.name&&(T=!0,M=function(){return _.call(this)}),n&&!y||!h&&!T&&w[l]||o(w,l,M),s[e]=M,s[A]=p,g)if(m={values:x?M:S("values"),keys:v?M:S("keys"),entries:E},y)for(b in m)b in w||i(w,b,m[b]);else a(a.P+a.F*(h||T),e,m);return m}},function(t,e,r){"use strict";var n=r(36),a=r(32),i=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:a(1,r)}),i(t,e+" Iterator")}},function(t,e,r){var n=r(61),a=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(a(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),a=r(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||i[a]===t)}},function(t,e,r){"use strict";var n=r(8),a=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,a(0,r)):t[e]=r}},function(t,e,r){var n=r(44),a=r(5)("iterator"),i=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[a]||t["@@iterator"]||i[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),a=r(35),i=r(6);t.exports=function(t){for(var e=n(this),r=i(e.length),o=arguments.length,s=a(o>1?arguments[1]:void 0,r),c=o>2?arguments[2]:void 0,u=void 0===c?r:a(c,r);u>s;)e[s++]=t;return e}},function(t,e,r){"use strict";var n=r(31),a=r(126),i=r(46),o=r(15);t.exports=r(87)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,a(1)):a(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,a,i=r(52),o=RegExp.prototype.exec,s=String.prototype.replace,c=o,u=(n=/a/,a=/b*/g,o.call(n,"a"),o.call(a,"a"),0!==n.lastIndex||0!==a.lastIndex),f=void 0!==/()??/.exec("")[1];(u||f)&&(c=function(t){var e,r,n,a,c=this;return f&&(r=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(e=c.lastIndex),n=o.call(c,t),u&&n&&(c.lastIndex=c.global?n.index+n[0].length:e),f&&n&&n.length>1&&s.call(n[0],r,function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(n[a]=void 0)}),n}),t.exports=c},function(t,e,r){"use strict";var n=r(60)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,a,i,o=r(19),s=r(116),c=r(80),u=r(76),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,g=f.Dispatch,v=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++v]=function(){s("function"==typeof t?t:Function(t),e)},n(v),v},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:g&&g.now?n=function(t){g.now(o(m,t,1))}:d?(i=(a=new d).port2,a.port1.onmessage=b,n=o(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in u("script")?function(t){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),a=r(99).set,i=n.MutationObserver||n.WebKitMutationObserver,o=n.process,s=n.Promise,c="process"==r(20)(o);t.exports=function(){var t,e,r,u=function(){var n,a;for(c&&(n=o.domain)&&n.exit();t;){a=t.fn,t=t.next;try{a()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(c)r=function(){o.nextTick(u)};else if(!i||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);r=function(){f.then(u)}}else r=function(){a.call(n,u)};else{var l=!0,h=document.createTextNode("");new i(u).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var a={fn:n,next:void 0};e&&(e.next=a),t||(t=a,r()),e=a}}},function(t,e,r){"use strict";var n=r(10);function a(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new a(t)}},function(t,e,r){"use strict";var n=r(2),a=r(7),i=r(29),o=r(67),s=r(11),c=r(41),u=r(3),f=r(39),l=r(21),h=r(6),p=r(136),d=r(37).f,g=r(8).f,v=r(95),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,S=n.DataView,A=n.Math,x=n.RangeError,T=n.Infinity,w=k,_=A.abs,M=A.pow,E=A.floor,O=A.log,C=A.LN2,F=a?"_b":"buffer",P=a?"_l":"byteLength",I=a?"_o":"byteOffset";function j(t,e,r){var n,a,i,o=new Array(r),s=8*r-e-1,c=(1<<s)-1,u=c>>1,f=23===e?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=_(t))!=t||t===T?(a=t!=t?1:0,n=c):(n=E(O(t)/C),t*(i=M(2,-n))<1&&(n--,i*=2),(t+=n+u>=1?f/i:f*M(2,1-u))*i>=2&&(n++,i/=2),n+u>=c?(a=0,n=c):n+u>=1?(a=(t*i-1)*M(2,e),n+=u):(a=t*M(2,u-1)*M(2,e),n=0));e>=8;o[l++]=255&a,a/=256,e-=8);for(n=n<<e|a,s+=e;s>0;o[l++]=255&n,n/=256,s-=8);return o[--l]|=128*h,o}function N(t,e,r){var n,a=8*r-e-1,i=(1<<a)-1,o=i>>1,s=a-7,c=r-1,u=t[c--],f=127&u;for(u>>=7;s>0;f=256*f+t[c],c--,s-=8);for(n=f&(1<<-s)-1,f>>=-s,s+=e;s>0;n=256*n+t[c],c--,s-=8);if(0===f)f=1-o;else{if(f===i)return n?NaN:u?-T:T;n+=M(2,e),f-=o}return(u?-1:1)*n*M(2,f-e)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function G(t){return j(t,52,8)}function B(t){return j(t,23,4)}function Y(t,e,r){g(t[m],e,{get:function(){return this[r]}})}function q(t,e,r,n){var a=p(+r);if(a+e>t[P])throw x(b);var i=t[F]._b,o=a+t[I],s=i.slice(o,o+e);return n?s:s.reverse()}function X(t,e,r,n,a,i){var o=p(+r);if(o+e>t[P])throw x(b);for(var s=t[F]._b,c=o+t[I],u=n(+a),f=0;f<e;f++)s[c+f]=u[i?f:e-f-1]}if(o.ABV){if(!u(function(){k(1)})||!u(function(){new k(-1)})||u(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var W,z=(k=function(t){return f(this,k),new w(p(t))})[m]=w[m],U=d(w),H=0;U.length>H;)(W=U[H++])in k||s(k,W,w[W]);i||(z.constructor=k)}var J=new S(new k(2)),Q=S[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||c(S[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=v.call(new Array(e),0),this[P]=e},S=function(t,e,r){f(this,S,"DataView"),f(t,k,"DataView");var n=t[P],a=l(e);if(a<0||a>n)throw x("Wrong offset!");if(a+(r=void 0===r?n-a:h(r))>n)throw x("Wrong length!");this[F]=t,this[I]=a,this[P]=r},a&&(Y(k,"byteLength","_l"),Y(S,"buffer","_b"),Y(S,"byteLength","_l"),Y(S,"byteOffset","_o")),c(S[m],{getInt8:function(t){return q(this,1,t)[0]<<24>>24},getUint8:function(t){return q(this,1,t)[0]},getInt16:function(t){var e=q(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=q(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return R(q(this,4,t,arguments[1]))},getUint32:function(t){return R(q(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return N(q(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return N(q(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){X(this,1,t,L,e)},setUint8:function(t,e){X(this,1,t,L,e)},setInt16:function(t,e){X(this,2,t,D,e,arguments[2])},setUint16:function(t,e){X(this,2,t,D,e,arguments[2])},setInt32:function(t,e){X(this,4,t,V,e,arguments[2])},setUint32:function(t,e){X(this,4,t,V,e,arguments[2])},setFloat32:function(t,e){X(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){X(this,8,t,G,e,arguments[2])}});y(k,"ArrayBuffer"),y(S,"DataView"),s(S[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=S},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(54)),a=l(r(106)),i=l(r(47)),o=l(r(71)),s=r(48),c=r(56);r(150);var u=l(r(107)),f=l(r(75));function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e,r,n,a,i,o){try{var s=t[i](o),c=s.value}catch(t){return void r(t)}s.done?e(c):Promise.resolve(c).then(n,a)}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this._constants=new Map,this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,l,y,m;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=t;this.chartSpecs=[];var o=n.default.chartPreProcessing(i.charts,r),s=g(o,2);if(i.charts=s[0],this.hasError=s[1],this.hasError)return i;for(var u=0;u<i.charts.length;u++){var f=void 0===i.charts[u].id?"chart"+u:i.charts[u].id,l=void 0===i.charts[u].type?n.default.CHART_URL:i.charts[u].type,h=new n.default(f,l,i.charts[u].source);this.chartSpecs.push(h)}if(i.facet&&(this.facet=new a.default(i.facet.type,i.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError)return i;c.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart),c.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart);var p=[];return i.animations.forEach(function(t){if(void 0!==t.elements){var e=void 0===t.id?t.selector:t.id;Object.keys(t.elements).forEach(function(r){if(void 0!==t.elements[r]){var n={id:e.concat(".",r,".effects[",0,"]"),marksetType:r,selector:t.selector};Object.keys(t.elements[r]).forEach(function(e){n[e]=t.elements[r][e]}),p.push(n)}})}else p.push(t)}),i.animations=p,i}},{key:"compareSpec",value:function(t){var e=!1;return(void 0!==this.currentSpec.constants&&JSON.stringify(t.constants)!==JSON.stringify(this.currentSpec.constants)||void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.marksWithSameDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear()),this.currentSpec=t,e}},{key:"checkAttrs",value:function(t,e,r){for(var n=Object.keys(e),a=!1,i=0,o=n.length;i<o;i++)if(!t.includes(n[i])){a=!0;var s=e[n[i]],c='"'+n[i]+'":';isNaN(Number(s))?"object"===d(s)?c+=JSON.stringify(s):c+='"'+s+'"':c+=""+s,r.info={type:"error",msg:'Illegal attribute name "'+n[i]+'".',errSpec:c.replace(/\s/g,"")};break}return a}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var a=0,s=t.charts.length;a<s&&!(r=this.checkAttrs(n.default.attrs,t.charts[a],e));a++){if(!t.charts[a].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[a]).replace(/\s/g,"")};break}if(t.charts[a].source.indexOf(".dsvg")<0&&(!t.charts[a].start||!t.charts[a].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[a]).replace(/\s/g,"")};break}}for(var c=0,u=t.animations.length;c<u&&!(r=this.checkAttrs(o.default.attrs,t.animations[c],e));c++){if(!t.animations[c].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(!t.animations[c].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(t.animations[c].reference&&!Object.keys(i.default.timingRef).includes(i.default.transRef(t.animations[c].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[c].reference.replace(/\s/g,"")+'"'};break}if(t.animations[c].align&&"object"===d(t.animations[c].align)){if(r=this.checkAttrs(o.default.alignAttrs,t.animations[c].align,e))break;if(void 0!==t.animations[c].align.type&&!Object.keys(o.default.alignTarget).includes(o.default.transAlign(t.animations[c].align.type))){r=!0,e.info={type:"error",msg:"The value of align has to be one of: element or object.",errSpec:'"type":"'+t.animations[c].align.type.replace(/\s/g,"")+'"'};break}}if(t.animations[c].offset&&"object"===d(t.animations[c].offset)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].offset,e)))break;if(t.animations[c].grouping&&(r=this.checkGroupingSpec(t.animations[c].grouping,e)))break;for(var l=0,h=t.animations[c].effects.length;l<h&&!(r=this.checkAttrs(f.default.attrs,t.animations[c].effects[l],e));l++){if(!t.animations[c].effects[l].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[c].effects[l]).replace(/\s/g,"")};break}if(!Object.values(f.default.actionTypes).includes(t.animations[c].effects[l].type)){r=!0,e.info={type:"error",msg:'Invalid effect type "'+t.animations[c].effects[l].type+'".',errSpec:'"type":"'+t.animations[c].effects[l].type.replace(/\s/g,"")+'"'};break}if(t.animations[c].effects[l].offset&&"object"===d(t.animations[c].effects[l].offset)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].effects[l].offset,e)))break;if(t.animations[c].effects[l].duration&&"object"===d(t.animations[c].effects[l].duration)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].effects[l].duration,e)))break;if(t.animations[c].effects[l].easing&&!Object.values(f.default.easingType).includes(t.animations[c].effects[l].easing)){r=!0,e.info={type:"error",msg:'Invalid easing type "'+t.animations[c].effects[l].easing+'".',errSpec:'"easing":"'+t.animations[c].effects[l].easing.replace(/\s/g,"")+'"'};break}}}return r}},{key:"checkGroupingSpec",value:function(t,e){if("number"==typeof t||"string"==typeof t){var r="number"==typeof t?'"grouping":'+t:'"grouping":"'+t.replace(/\s/g,"")+'"';return e.info={type:"error",msg:"Invalid grouping value.",errSpec:r},!0}if(this.checkAttrs(u.default.attrs,t,e))return!0;if(t.reference&&!Object.keys(i.default.timingRef).includes(i.default.transRef(t.reference)))return e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0;if(t.sort&&"object"===d(t.sort)){if(this.checkAttrs(u.default.sortAttrs,t.sort,e))return!0}else if("number"==typeof t.sort)return e.info={type:"error",msg:"Invalid sort value.",errSpec:'"sort":'+t.sort},!0;return!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(y=regeneratorRuntime.mark(function t(e){var r,a,l,p,d,g,v=this,y=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(r=y.length>1&&void 0!==y[1]?y[1]:{},JSON.stringify(r),this.hasError=!1,this.hasError){t.next=37;break}if(o.default.resetAll(),u.default.frames.clear(),u.default.framesMark.clear(),0!==e.charts.length){t.next=18;break}o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=37;break;case 18:return c.globalVar.jsMovin.setFrameRate(i.default.FRAME_RATE),a=this.compareSpec(e),t.next=22,this.preprocessCharts(e,a,r);case 22:if((l=t.sent).constants&&void 0!==l.constants&&(this.constants=l.constants),l.effectTmpls&&void 0!==l.effectTmpls&&f.default.assignActionTmpls(l.effectTmpls,r),this.animations=l.animations,console.log("animations in canisObj",this.animations),!Array.isArray(this.animations)){t.next=37;break}d=function(t){var e=v.animations[t],a=document.createElement("div");document.body.appendChild(a),a.innerHTML=n.default.charts[e.chartIdx].svgContent.outerHTML,console.log("animation json going to process: ",e,n.default.markSetsDuringTrans);var i=a.querySelectorAll(e.selector),c=n.default.markSetsDuringTrans[e.chartIdx][e.marksetType],u=[],f=[],l="";i.length>0&&[].forEach.call(i,function(t,e){var r=t.getAttribute("id");void 0!==c&&c.includes(r)&&(l=l.concat("#",r,","),u.push(r),f.push(t))}),l=l.substring(0,l.length-1),console.log("the selector is: ",l),v.animations[t].selector=l,console.log("marks in this aniunit: ",u,l);var d=[];if([].forEach.call(a.querySelectorAll(".mark"),function(t){d.push(t.getAttribute("id"));for(var e=t.getAttribute("class").split(" "),r="",n=0,a=e.length;n<a;n++)"mark"===e[n]&&(r=e[n+1]);o.default.markClass.set(t.getAttribute("id"),r)}),o.default.allMarks=[].concat(h(new Set([].concat(h(o.default.allMarks),d)))),0===f.length)return"number"==typeof e.selector?r.info={type:"error",msg:"The selector need to be a CSS selector",errSpec:'"selector":'+e.selector}:r.info={type:"error",msg:"The selector "+e.selector+" selects no marks",errSpec:'"selector":"'+e.selector.replace(/\s/g,"")+'"'},"continue";e.selector=v.sortSelector(e.selector);for(var g=[],y=0;y<n.default.changedAttrs.length;y++)g.push(n.default.changedAttrs[y]);var m=void 0,b=e.chartIdx+"_"+e.selector;if("0_.mark"===b&&(b="0_#".concat(o.default.allMarks.join(", #"))),void 0!==o.default.animations.get(b)?(m=o.default.animations.get(b)).translate(e,g,!0,u,r):((m=new o.default).translate(e,g,!1,u,r),o.default.animations.set(b,m)),void 0===m.align&&void 0!==p&&(m.align={target:p.id,type:o.default.alignTarget.withObj}),v.constants.size>0&&m.replaceConstants(v.constants,r),f.length>0){var k=new Map;[].forEach.call(f,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id"),r=t.getAttribute("class");if(void 0===k.get(r)?k.set(r,0):k.set(r,k.get(r)+1),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var a=s.CanisUtil.toJSON(t),i=s.CanisUtil.discretizePath(a);if(i){if("lines"===i.type)for(var c=0;c<i.data.length;c++)a.attr["x"+(1+2*c)]=i.data[c][0][0],a.attr["y"+(1+2*c)]=i.data[c][0][1],a.attr["x"+(2+2*c)]=i.data[c][1][0],a.attr["y"+(2+2*c)]=i.data[c][1][1];else for(var u=Object.keys(i.data),f=0;f<u.length;f++){var l=u[f];"radius"===l?i.data[l].length>1?(a.attr.innerRadius=i.data[l][0].rx+1,a.attr.outterRadius=i.data[l][1].rx-1):(a.attr.innerRadius=0,a.attr.outterRadius=i.data[l][0].rx-1):a.attr[l]=i.data[l]}t=s.CanisUtil.toDOM(a)}}for(var p={},d=[].concat(h(t.attributes)),g=0;g<d.length;g++){var v=d[g];p[v.name]=t.getAttribute(v.name)}var y=document.getElementById(e);p.bbWidth=y.getBBox().width,p.bbHeight=y.getBBox().height,p.bbX=y.getBBox().x,p.bbY=y.getBBox().y,p.content=t.textContent,p.id=e;var m=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(m)&&(m=m[0]),m.clsIdx="a".concat(k.get(r)),void 0!==n.default.nonDataMarkDatum.get(e)&&(n.default.nonDataMarkDatum.get(e).clsIdx="a".concat(k.get(r))),p["data-datum"]=m,p.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(p["stroke-dasharray"]=document.getElementById(e).getTotalLength(),p["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var b=s.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==b&&b&&"pies"===b.type&&(p.cx=b.data.cx,p.cy=b.data.cy,p.startAngle=(b.data.clockwise?b.data.startAngle:b.data.endAngle)-1/(2*Math.PI),p.endAngle=(b.data.clockwise?b.data.endAngle:b.data.startAngle)+4*Math.PI+1/(2*Math.PI),b.data.radius.length>1?(p.innerRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[1].rx:b.data.radius[0].rx,p.outterRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[0].rx:b.data.radius[1].rx,p.outterRadius++):(p.innerRadius=0,p.outterRadius=b.data.radius[0].rx+1))}o.default.domMarks.set(e,p)}}})}m.calAniTime(u),o.default.animations.get(b).alignOnData=m.alignOnData,p=m,document.body.removeChild(a)},g=0;case 30:if(!(g<this.animations.length)){t.next=37;break}if("continue"!==d(g)){t.next=34;break}return t.abrupt("continue",34);case 34:g++,t.next=30;break;case 37:case"end":return t.stop()}},t,this)}),m=function(){var t=this,e=arguments;return new Promise(function(r,n){var a=y.apply(t,e);function i(t){p(a,r,n,i,o,"next",t)}function o(t){p(a,r,n,i,o,"throw",t)}i(void 0)})},function(t){return m.apply(this,arguments)})},{key:"sortSelector",value:function(t){var e=t.split(", ");return e.length>0?(e.sort(function(t,e){return parseInt(t.substring(5))-parseInt(e.substring(5))}),e.join(", ")):t}},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.default.renderAnimation(r),o.default.mapToLottieSpec();var n=c.globalVar.jsMovin.toJSON();return t.lottieJSON=n,r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"constants",set:function(t){var e=this;this._constants.clear(),t.forEach(function(t){e._constants.set(t.name,t.value)})},get:function(){return this._constants}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if(r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length,console.log("assigning animations: ",r,JSON.stringify(t,null,2)),r>1)for(var n=function(r){var n=s.CanisUtil.deepClone(t);n[0].reference=i.default.timingRef.previousEnd;var a=new Map,o=n.map(function(t){if(t.chartIdx=r,void 0!==t.id){var e=r+"."+t.id;a.set(t.id,e),t.id=e}return void 0!==t.align&&(void 0!==a.get(t.align.target)?t.align.target=a.get(t.align.target):console.warn("aligning with an id that does not exist!")),t});e.push.apply(e,h(o))},a=1;a<r;a++)n(a);console.log("assigned animations: ",JSON.stringify(e,null,2)),this._animations=e},get:function(){return this._animations}}])&&v(e.prototype,r),l&&v(e,l),t}();y.lottieJSON="";var m=y;e.default=m,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,a;return e=t,a=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),a&&n(e,a),t}();e.EasingFactory=a},function(t,e,r){var n=r(147).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var a in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)a in t&&(t[a]+=t.relative?t[n[a]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,a;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.warn('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),a=t.range[0].match(e),i=t.range[1].match(e);if(r===n){t.frames=[];for(var o=a;o<=i;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.warn("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var a=0;a<e.length;a++)if(e[a].frames.length<r)for(var i=e[a].frames[e[a].frames.length-1],o=r-e[a].frames.length;o>0;)e[a].frames.push(i),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),a&&n(e,a),t}();a.facetType={row:"row",col:"column"};var i=a;e.default=i,t.exports=e.default},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var GroupingSpec=function(_TimingSpec){function GroupingSpec(){var t;return _classCallCheck(this,GroupingSpec),(t=_possibleConstructorReturn(this,(GroupingSpec.__proto__||Object.getPrototypeOf(GroupingSpec)).call(this)))._groupBy="id",t._reference=_TimingSpec2.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}return _inherits(GroupingSpec,_TimingSpec),_createClass(GroupingSpec,[{key:"replaceDelayConst",value:function replaceDelayConst(constants){var _this2=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.delay&&(void 0===constants.get(this.delay)?0===this.delay.indexOf("calc")?(this.delay=this.delay.substring(0,this.delay.length-1).substring(5),constants.forEach(function(t,e,r){_this2.delay.includes(e)&&("number"==typeof t?_this2.delay=_this2.delay.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+_this2.delay.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.delay,constants)?this.delay=eval(this.delay):status.info={type:"error",msg:"Wrong equation.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.delay)?this.delay=constants.get(this.delay):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}),void 0!==this.grouping&&this.grouping.replaceDelayConst(constants,status)}},{key:"initGrouping",value:function(t){this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new GroupingSpec,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new GroupingSpec,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,e,r,n,a){return GroupingSpec.frames.clear(),GroupingSpec.framesMark.clear(),0===Object.keys(r).length?(r.groupRef="root",r.id=GroupingSpec.nodeId,GroupingSpec.frames.set(GroupingSpec.nodeId,!0),GroupingSpec.nodeId++,r.children=[],r.marks=t,r.timingRef=void 0===n?_TimingSpec2.default.timingRef.previousStart:n,r.delay=0,this.generateTree(r,e)):this.updateTree(r,e),this.getMarkOrderAndLeaves(r,a)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,a=this.delay;if(void 0!==this.grouping){var i=!1;if(void 0!==t.children[0]&&(i=t.children[0].groupRef===r),i){for(var o,s=new Map,c=0;c<t.children.length|(o=t.children[c]);c++)this.grouping.updateTree(o,e),s.set(o.refValue,o),o.timingRef=n,o.delay=a;this.sortNodes(this.sort,t,s,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,e){for(var r,n=this.groupBy,a=this.reference,i=this.delay,o=new Map,s=0;s<t.marks.length|(r=t.marks[s]);s++){var c=e.get(r)["data-datum"],u=void 0;if(void 0!==e.get(r)[n])u=e.get(r)[n];else{if(void 0!==e.get(r)[n]||void 0===c[n])return void console.warn("error: grouping by an unknown attribute");u=c[n]}if(void 0!==o.get(u))o.get(u).marks.push(r);else{var f={};f.id=GroupingSpec.nodeId,GroupingSpec.nodeId++,f.groupRef=n,"id"===f.groupRef&&(f.definedById=this.definedById),f.refValue=u,f.timingRef=a,f.delay=i,f.children=[],f.marks=[r],o.set(u,f)}}if(this.sortNodes(this.sort,t,o,e),void 0!==this.grouping)for(var l,h=0;h<t.children.length|(l=t.children[h]);h++)this.grouping.generateTree(l,e)}},{key:"sortNodes",value:function(t,e,r,n){switch(e.children=[],_typeof(t.order)){case"object":for(var a,i=0;i<t.order.length|(a=t.order[i]);i++){if(!isNaN(Number(a))){var o=Number(a);void 0!==r.get(o)&&(e.children.push(r.get(o)),0)}void 0!==r.get(a)&&(e.children.push(r.get(a)),0)}break;case"string":var s=!0;if(r.forEach(function(t,e){t.marks.length>1&&(s=!1)}),void 0!==t.field&&s){var c=t.field,u=[].concat(_toConsumableArray(r)),f=t.order;u.sort(function(t,e){var r=t[1].marks[0],a=e[1].marks[0],i="",o="",s=n.get(r)["data-datum"],u=n.get(a)["data-datum"];return void 0!==n.get(r)[c]&&"undefined"!==n.get(a)[c]?(i=n.get(r)[c],o=n.get(a)[c]):void 0===n.get(r)[c]&&void 0!==s[c]&&void 0===n.get(a)[c]&&void 0!==u[c]&&(i=s[c],o=u[c]),isNaN(parseFloat(i))||(i=parseFloat(i)),isNaN(parseFloat(o))||(o=parseFloat(o)),f===GroupingSpec.orderTypes.ascending?i>=o?1:-1:f===GroupingSpec.orderTypes.descending?o>=i?1:-1:f===GroupingSpec.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var l,h=0;h<u.length|(l=u[h]);h++)e.children.push(l[1])}else{var p=[].concat(_toConsumableArray(r));t.order===GroupingSpec.orderTypes.ascending?p.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===GroupingSpec.orderTypes.descending?p.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===GroupingSpec.orderTypes.random&&p.sort(function(t,e){return Math.random()>=.5?1:-1});for(var d,g=0;g<p.length|(d=p[g]);g++)e.children.push(d[1])}break;default:r.forEach(function(t,r){e.children.push(t),0})}}},{key:"appendFrame",value:function(t,e,r,n){!GroupingSpec.frames.get(t)||0!==r&&r!==n-1?GroupingSpec.frames.set(e,!1):GroupingSpec.frames.set(e,!0)}},{key:"getMarkOrderAndLeaves",value:function(t,e){var r=[],n=[];if(null!=t){var a=[];for(t.parentGroupRef=[],t.parentGroupRefValue=[],a.unshift(t);0!=a.length;){var i=a.shift(),o=i.children;if(o.length<=0)(i.definedById||!i.definedById&&1===i.parentGroupRef.length)&&(e&&(i.children=[],i.parentGroupRef=[i.parentGroupRef[0]],i.parentGroupRefValue=[i.parentGroupRefValue[0]],i.groupRef="id",i.refValue=i.marks[0]),n.push(i)),r=[].concat(_toConsumableArray(r),_toConsumableArray(i.marks));else{"id"!==i.children[0].groupRef||"root"===i.groupRef||i.children[0].definedById||(e&&(i.children=[],i.parentGroupRef=[i.parentGroupRef[0]],i.parentGroupRefValue=[i.parentGroupRefValue[0]],i.groupRef="id",i.refValue=i.marks[0]),n.push(i));for(var s=0;s<o.length;s++)o[s].parentGroupRef=[].concat(_toConsumableArray(i.parentGroupRef),[i.groupRef]),o[s].parentGroupRefValue=[].concat(_toConsumableArray(i.parentGroupRefValue),[i.refValue]),a.push(o[s])}}}return[r,n]}},{key:"calTimeWithTree",value:function(t,e,r,n){if(t.children.length>0)for(var a=0;a<t.children.length;a++)a>0?this.calTimeWithTree(t.children[a],t.children[a-1].start,t.children[a-1].end,n):this.calTimeWithTree(t.children[a],-1,-1,n);switch(t.timingRef){case _TimingSpec2.default.timingRef.previousStart:t.start=e+t.delay;break;case _TimingSpec2.default.timingRef.previousEnd:t.start=r+t.delay;break;case _TimingSpec2.default.timingRef.absolute:t.start=t.delay;break;default:t.start=e+t.delay}-1===e&&(t.start=0),t.end=0;for(var i=0;i<t.marks.length;i++)n.get(t.marks[i]).startTime+=t.start,n.get(t.marks[i]).startTime+n.get(t.marks[i]).totalDuration>t.end&&(t.end=n.get(t.marks[i]).startTime+n.get(t.marks[i]).totalDuration);if(1===t.marks.length){var o=t.marks[0];GroupingSpec.frames.get(t.id)?GroupingSpec.framesMark.set(o,!0):void 0===GroupingSpec.framesMark.get(o)&&GroupingSpec.framesMark.set(o,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=_TimingSpec2.default.transRef(t);Object.keys(_TimingSpec2.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){"number"==typeof t?t>=1e3/_TimingSpec2.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/_TimingSpec2.default.FRAME_RATE:"string"==typeof t&&(this._delay=t)},get:function(){return this._delay}}]),GroupingSpec}(_TimingSpec2.default);GroupingSpec.attrs=["groupBy","reference","delay","sort","grouping"],GroupingSpec.sortAttrs=["order","field"],GroupingSpec.orderTypes={ascending:"ascending",descending:"descending",random:"random"},GroupingSpec.nodeId=0,GroupingSpec.frames=new Map,GroupingSpec.framesMark=new Map;var _default=GroupingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(76)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),a=r(15),i=r(57)(!1),o=r(78)("IE_PROTO");t.exports=function(t,e){var r,s=a(t),c=0,u=[];for(r in s)r!=o&&n(s,r)&&u.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~i(u,r)||u.push(r));return u}},function(t,e,r){var n=r(8),a=r(1),i=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){a(t);for(var r,o=i(e),s=o.length,c=0;s>c;)n.f(t,r=o[c++],e[r]);return t}},function(t,e,r){var n=r(15),a=r(37).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==i.call(t)?function(t){try{return a(t)}catch(t){return o.slice()}}(t):a(n(t))}},function(t,e,r){"use strict";var n=r(7),a=r(34),i=r(58),o=r(51),s=r(9),c=r(50),u=Object.assign;t.exports=!u||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=u({},t)[r]||Object.keys(u({},e)).join("")!=n})?function(t,e){for(var r=s(t),u=arguments.length,f=1,l=i.f,h=o.f;u>f;)for(var p,d=c(arguments[f++]),g=l?a(d).concat(l(d)):a(d),v=g.length,y=0;v>y;)p=g[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:u},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),a=r(4),i=r(116),o=[].slice,s={},c=function(t,e,r){if(!(e in s)){for(var n=[],a=0;a<e;a++)n[a]="a["+a+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),s=function(){var n=r.concat(o.call(arguments));return this instanceof s?c(e,n.length,n):i(e,n,t)};return a(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,a=r(45).trim,i=r(82),o=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(t,e){var r=a(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,a=r(45).trim;t.exports=1/n(r(82)+"-0")!=-1/0?function(t){var e=a(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),a=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&a(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(85),a=Math.pow,i=a(2,-52),o=a(2,-23),s=a(2,127)*(2-o),c=a(2,-126);t.exports=Math.fround||function(t){var e,r,a=Math.abs(t),u=n(t);return a<c?u*(a/c/o+1/i-1/i)*c*o:(r=(e=(1+o/i)*a)-(e-a))>s||r!=r?u*(1/0):u*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,a){try{return a?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(10),a=r(9),i=r(50),o=r(6);t.exports=function(t,e,r,s,c){n(e);var u=a(t),f=i(u),l=o(u.length),h=c?l-1:0,p=c?-1:1;if(r<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,u));return s}},function(t,e,r){"use strict";var n=r(9),a=r(35),i=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=i(r.length),s=a(t,o),c=a(e,o),u=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===u?o:a(u,o))-c,o-s),l=1;for(c<s&&s<c+f&&(l=-1,c+=f-1,s+=f-1);f-- >0;)c in r?r[s]=r[c]:delete r[s],s+=l,c+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(97);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(52)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),a=r(4),i=r(101);t.exports=function(t,e){if(n(t),a(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(132),a=r(42);t.exports=r(66)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(a(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(a(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,a=r(36),i=r(41),o=r(19),s=r(39),c=r(40),u=r(87),f=r(126),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),g=h?"_s":"size",v=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,u){var f=t(function(t,n){s(t,f,e,"_i"),t._t=e,t._i=a(null),t._f=void 0,t._l=void 0,t[g]=0,null!=n&&c(n,r,t[u],t)});return i(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var r=d(this,e),n=v(r,t);if(n){var a=n.n,i=n.p;delete r._i[n.i],n.r=!0,i&&(i.n=a),a&&(a.p=i),r._f==n&&(r._f=a),r._l==n&&(r._l=i),r[g]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!v(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[g]}}),f},def:function(t,e,r){var n,a,i=v(t,e);return i?i.v=r:(t._l=i={i:a=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=i),n&&(n.n=i),t[g]++,"F"!==a&&(t._i[a]=i)),t},getEntry:v,setStrong:function(t,e,r){u(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(132),a=r(42);t.exports=r(66)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(a(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,a=r(2),i=r(26)(0),o=r(12),s=r(30),c=r(113),u=r(135),f=r(4),l=r(42),h=r(42),p=!a.ActiveXObject&&"ActiveXObject"in a,d=s.getWeak,g=Object.isExtensible,v=u.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?v(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(66)("WeakMap",y,m,u,!0,!0);h&&p&&(c((n=u.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,i(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,a){if(f(e)&&!g(e)){this._f||(this._f=new n);var i=this._f[t](e,a);return"set"==t?this:i}return r.call(this,e,a)})}))},function(t,e,r){"use strict";var n=r(41),a=r(30).getWeak,i=r(1),o=r(4),s=r(39),c=r(40),u=r(26),f=r(14),l=r(42),h=u(5),p=u(6),d=0,g=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};v.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,i){var u=t(function(t,n){s(t,u,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&c(n,r,t[i],t)});return n(u.prototype,{delete:function(t){if(!o(t))return!1;var r=a(t);return!0===r?g(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=a(t);return!0===r?g(l(this,e)).has(t):r&&f(r,this._i)}}),u},def:function(t,e,r){var n=a(i(e),!0);return!0===n?g(t).set(e,r):n[t._i]=r,t},ufstore:g}},function(t,e,r){var n=r(21),a=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=a(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),a=r(58),i=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(i(t)),r=a.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(59),a=r(4),i=r(6),o=r(19),s=r(5)("isConcatSpreadable");t.exports=function t(e,r,c,u,f,l,h,p){for(var d,g,v=f,y=0,m=!!h&&o(h,p,3);y<u;){if(y in c){if(d=m?m(c[y],y,r):c[y],g=!1,a(d)&&(g=void 0!==(g=d[s])?!!g:n(d)),g&&l>0)v=t(e,r,d,i(d.length),v,l-1)-1;else{if(v>=9007199254740991)throw TypeError();e[v]=d}v++}y++}return v}},function(t,e,r){var n=r(6),a=r(84),i=r(24);t.exports=function(t,e,r,o){var s=String(i(t)),c=s.length,u=void 0===r?" ":String(r),f=n(e);if(f<=c||""==u)return s;var l=f-c,h=a.call(u,Math.ceil(l/u.length));return h.length>l&&(h=h.slice(0,l)),o?h+s:s+h}},function(t,e,r){var n=r(7),a=r(34),i=r(15),o=r(51).f;t.exports=function(t){return function(e){for(var r,s=i(e),c=a(s),u=c.length,f=0,l=[];u>f;)r=c[f++],n&&!o.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}}},function(t,e,r){var n=r(44),a=r(142);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return a(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,a){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||a!=a?NaN:t===1/0||t===-1/0?t:(t-e)*(a-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),a=r.n(n),i=r(71),o=r.n(i),s=r(103),c=r.n(s);window.canis={canisObj:{},frameRate:a.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new c.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return c.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,a=r(104),i=r(146),o=r(74),s=(n=r(73))&&n.__esModule?n:{default:n},c=r(72);function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function g(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var v=function(){function t(e){h(this,t),g(this,"root",void 0),g(this,"anchor",void 0),g(this,"position",void 0),g(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3?arguments[3]:void 0,i=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],c=t[e].k.filter(function(t){return t.t==a});if(c.length)r=c[0];else{r={t:a,s:this.getDefaultProperty(e)};var u=t[e].k.reduce(function(t,e){return e.t<a?t+1:t},0);t[e].k.splice(u,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=i:r.s=!s||i instanceof Array?i:[i]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){g(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var a=this.root.shapes[0].it;a.splice(a.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,a;this.timeRange[t]=1,this.updateTimeRange(),e instanceof c.PathMaker&&(e.uniform(),e=e.path);var i=u(this.commonPropertyMapping(t),3);if(r=i[0],n=i[1],a=i[2],!n||void 0===a)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==a&&(this.convertToStaticProperty(r,n),a>=0?r[n].k[a]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,i,s){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),s||(s=a.EasingFactory.linear()),n instanceof c.PathMaker||i instanceof c.PathMaker){if([n,i].forEach(function(t){return t instanceof c.PathMaker&&t.uniform()}),n instanceof c.PathMaker&&i instanceof c.PathMaker){var f=n.path.v.length-1,l=i.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:i,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),i.upsample(Math.round(d/l))}}var g=u([n,i].map(function(t){return t instanceof c.PathMaker?t.path:t}),2);n=g[0],i=g[1]}var v,y,m,b=!0,k=u(this.commonPropertyMapping(t),3);if(v=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var S=(v=this.root.t).d.k[0].s,A=JSON.parse(JSON.stringify(S)),x=JSON.parse(JSON.stringify(S));A.t=n,x.t=i,n=A,i=x,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,i,s),new Error("Not a valid key.")}v&&y&&void 0!==m&&(this.convertToAnimatableProperty(v,y),this.addKeyframe(v,y,m,e,n,s,b),this.addKeyframe(v,y,m,r,i,a.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=v;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,i.render)(t)};return new v(r)}},{key:"rect",value:function(t,e,r,n){var a={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,i.renderPlainGlyph)("rect",[r,n])]};return new v(a)}},{key:"ellipse",value:function(t,e,r,n){var a={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,i.renderPlainGlyph)("ellipse",[r,n])]};return new v(a)}},{key:"ref",value:function(t){return new v({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,a=this,c=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:c),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,s.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(a.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=c[0]+c[2]+1,h.h=c[1]+c[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var g=f;g.ty=4,g.ks=this.generateTransform(c),g.shapes=(0,i.render)(t)}break;case 2:var y=f,m=u((0,i.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,i.render)(t);break;case 5:var S=f,A=(0,o.getBaselineHeight)(t),x=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];S.ks.p.k=[c[0]+c[2]*x,c[1]+c[3]-A,0],S.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var T=u((0,i.renderText)(t,r),2),w=T[0],_=T[1];S.t=w,r.list.filter(function(t){return t.fName==_.fName}).length||r.list.push(_)}return new v(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=c,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new a.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),a=r.fontFamily.split(",")[0].trim(),s=r.fontStyle,c=r.fontWeight,u=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,i.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==a&&t.fStyle==s&&t.fWeight==c});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:u}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:a,fWeight:"".concat(c),fStyle:s,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,i.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var a=t.width.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),s=o.getContext("2d");o.width=3*a.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,s.drawImage(t,0,0,o.width,o.height);var c=o.toDataURL();if(e){var u=e.filter(function(t){return t.p==c});u.length&&(r=u[0].id)}var f={h:n.valueInSpecifiedUnits,w:a.valueInSpecifiedUnits,id:r,p:c,e:1};return[r,f]};var n,a=r(72),i=(n=r(73))&&n.__esModule?n:{default:n},o=r(74);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=c(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var a=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var a=0,i=0,s=100;if(r&&n){var c=(0,o.calculateBaseTransform)(r,n),u=n.getBBox(),f=r.getBBox();a=c.e+f.x-u.x,i=c.f+f.y-u.y,s=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[a,i]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:s},sk:{k:0},sa:{k:0}})}(r.it,a,t,e)};if(t instanceof SVGCircleElement){var i=t.r.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var c=i.valueInSpecifiedUnits,u=new a.PathMaker;u.moveTo(c,0),u.arcTo(c,c,0,1,0,c,2*c),u.arcTo(c,c,0,1,0,c,0),u.closePath(),n(u)}else if(t instanceof SVGEllipseElement){var f=s(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new a.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=s(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),g=d[0],v=d[1],y=d[2],m=d[3],b=Math.min(g,v),k=Math.min(y,m),S=new a.PathMaker;S.moveTo(g-b,y-k),S.lineTo(v-b,m-k),n(S)}else if(t instanceof SVGPathElement){var A=t.getAttribute("d")||"",x=new a.PathMaker(A);n(x)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var T=t.points;if(T.length){var w=Array.prototype.slice.call(T),_=w.reduce(function(t,e){return Math.min(t,e.x)},0),M=w.reduce(function(t,e){return Math.min(t,e.y)},0),E=new a.PathMaker;E.moveTo(T[0].x-_,T[0].y-M),w.forEach(function(t,e){e<=0||E.lineTo(t.x-_,t.y-M)}),t instanceof SVGPolygonElement&&E.closePath(),n(E)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var O=s(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),C=O[0],F=O[1],P=new a.PathMaker;P.moveTo(0,0),P.lineTo(C,0),P.lineTo(C,F),P.lineTo(0,F),P.closePath(),n(P)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,a){this.message=t,this.expected=e,this.found=r,this.location=a,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+a(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?i(t.parts[e][0])+"-"+i(t.parts[e][1]):i(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function a(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,a,i=new Array(t.length);for(e=0;e<t.length;e++)i[e]=(a=t[e],r[a.type](a));if(i.sort(),i.length>0){for(e=1,n=1;e<i.length;e++)i[e-1]!==i[e]&&(i[n]=i[e],n++);i.length=n}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(t)+" but "+function(t){return t?'"'+a(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,a={},i={svg_path:vt},o=vt,s=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},c=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,a=e.length;n<a;n++)r[n+1]=e[n][1];return r}(t,e)},u=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Dt(t,[e]);return r&&(n=n.concat(Dt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Dt("Z")},g=/^[Ll]/,v=lt(["L","l"],!1,!1),y=function(t,e){return Dt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Dt(t,e.map(function(t){return{x:t}}))},S=/^[Vv]/,A=lt(["V","v"],!1,!1),x=function(t,e){return Dt(t,e.map(function(t){return{y:t}}))},T=/^[Cc]/,w=lt(["C","c"],!1,!1),_=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},M=/^[Ss]/,E=lt(["S","s"],!1,!1),O=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},C=/^[Qq]/,F=lt(["Q","q"],!1,!1),P=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},I=/^[Tt]/,j=lt(["T","t"],!1,!1),N=/^[Aa]/,R=lt(["A","a"],!1,!1),L=function(t,e,r,n,a,i){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:a,x:i.x,y:i.y}},D=function(t,e){return{x:t,y:e}},V=function(t){return 1*t},G=function(t){return 1*t.join("")},B=/^[01]/,Y=lt(["0","1"],!1,!1),q=function(t){return"1"==t},X=function(){return""},W=",",z=ft(",",!1),U=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),$=/^[+\-]/,K=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,at=lt([" ","\t","\n","\r"],!1,!1),it=0,ot=[{line:1,column:1}],st=0,ct=[],ut=0;if("startRule"in e){if(!(e.startRule in i))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=i[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){it<st||(it>st&&(st=it,ct=[]),ct.push(t))}function gt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function vt(){var t,e,r,n,i;for(t=it,e=[],r=Nt();r!==a;)e.push(r),r=Nt();if(e!==a)if((r=function(){var t,e,r,n,i,o;if(t=it,(e=yt())!==a){for(r=[],n=it,i=[],o=Nt();o!==a;)i.push(o),o=Nt();for(i!==a&&(o=yt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;){for(r.push(n),n=it,i=[],o=Nt();o!==a;)i.push(o),o=Nt();i!==a&&(o=yt())!==a?n=i=[i,o]:(it=n,n=a)}r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())===a&&(r=null),r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a?(t,t=e=s(r)):(it=t,t=a)}else it=t,t=a;else it=t,t=a;return t}function yt(){var e,r,n,i,o,s;if(e=it,(r=function(){var e,r,n,i,o,s,c;e=it,u.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(f));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=wt())!==a?(o=it,(s=Ot())===a&&(s=null),s!==a&&(c=bt())!==a?o=s=[s,c]:(it=o,o=a),o===a&&(o=null),o!==a?(e,r=l(r,i,o),e=r):(it=e,e=a)):(it=e,e=a)}else it=e,e=a;return e}())!==a){for(n=[],i=it,o=[],s=Nt();s!==a;)o.push(s),s=Nt();for(o!==a&&(s=mt())!==a?i=o=[o,s]:(it=i,i=a);i!==a;){for(n.push(i),i=it,o=[],s=Nt();s!==a;)o.push(s),s=Nt();o!==a&&(s=mt())!==a?i=o=[o,s]:(it=i,i=a)}n!==a?(e,e=r=c(r,n)):(it=e,e=a)}else it=e,e=a;return e}function mt(){var e;return(e=function(){var e,r;e=it,h.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(p));r!==a&&(e,r=d());return e=r}())===a&&(e=function(){var e,r,n,i;e=it,g.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(v));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=bt())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,m.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(b));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=kt())!==a?(e,r=k(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,S.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(A));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=kt())!==a?(e,r=x(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,T.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(w));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=St())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=St())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=St())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,M.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(E));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=At())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=At())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=At())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,C.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(F));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=xt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,I.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(j));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=wt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,N.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(R));if(r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=Tt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Tt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Tt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}()),e}function bt(){var t,e,r,n,i,o;if(t=it,(e=wt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,t=e=c(e,r)):(it=t,t=a)}else it=t,t=a;return t}function kt(){var t,e,r,n,i,o;if(t=it,(e=Mt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,t=e=c(e,r)):(it=t,t=a)}else it=t,t=a;return t}function St(){var t,e,r,n,i,o;return t=it,(e=wt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=wt())!==a?((i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?(t,t=e=_(e,n,o)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a),t}function At(){var t,e,r,n;return t=it,(e=wt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=wt())!==a?(t,t=e=O(e,n)):(it=t,t=a)):(it=t,t=a),t}function xt(){var t,e,r,n;return t=it,(e=wt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=wt())!==a?(t,t=e=P(e,n)):(it=t,t=a)):(it=t,t=a),t}function Tt(){var t,e,r,n,i,o,s,c,u,f,l;return t=it,(e=_t())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=_t())!==a?((i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a&&Ot()!==a&&(s=Et())!==a?((c=Ot())===a&&(c=null),c!==a&&(u=Et())!==a?((f=Ot())===a&&(f=null),f!==a&&(l=wt())!==a?(t,t=e=L(e,n,o,s,u,l)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a),t}function wt(){var t,e,r,n;return t=it,(e=Mt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=Mt())!==a?(t,t=e=D(e,n)):(it=t,t=a)):(it=t,t=a),t}function _t(){var t,e;return t=it,(e=Ft())===a&&(e=jt()),e!==a&&(t,e=V(e)),t=e}function Mt(){var t,e,r,n;return t=it,e=it,(r=It())===a&&(r=null),r!==a&&(n=Ft())!==a?e=r=[r,n]:(it=e,e=a),e===a&&(e=it,(r=It())===a&&(r=null),r!==a&&(n=jt())!==a?e=r=[r,n]:(it=e,e=a)),e!==a&&(t,e=G(e)),t=e}function Et(){var e,r;return e=it,B.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(Y)),r!==a&&(e,r=q(r)),e=r}function Ot(){var t,e,r,n,i;if(t=it,e=[],(r=Nt())!==a)for(;r!==a;)e.push(r),r=Nt();else e=a;if(e!==a)if((r=Ct())===a&&(r=null),r!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a?t=e=[e,r,n]:(it=t,t=a)}else it=t,t=a;else it=t,t=a;if(t===a){if(t=it,e=it,(r=Ct())!==a){for(n=[],i=Nt();i!==a;)n.push(i),i=Nt();n!==a?e=r=[r,n]:(it=e,e=a)}else it=e,e=a;e!==a&&(t,e=X()),t=e}return t}function Ct(){var e;return 44===t.charCodeAt(it)?(e=W,it++):(e=a,0===ut&&dt(z)),e}function Ft(){var e,r,n,i;return e=it,r=it,(n=function(){var e,r,n,i,o;e=it,r=it,(n=jt())===a&&(n=null);n!==a?(46===t.charCodeAt(it)?(i=H,it++):(i=a,0===ut&&dt(J)),i!==a&&(o=jt())!==a?r=n=[n,i,o]:(it=r,r=a)):(it=r,r=a);r===a&&(r=it,(n=jt())!==a?(46===t.charCodeAt(it)?(i=H,it++):(i=a,0===ut&&dt(J)),i!==a?r=n=[n,i]:(it=r,r=a)):(it=r,r=a));r!==a&&(e,r=U(r));return e=r}())!==a?((i=Pt())===a&&(i=null),i!==a?r=n=[n,i]:(it=r,r=a)):(it=r,r=a),r===a&&(r=it,(n=jt())!==a&&(i=Pt())!==a?r=n=[n,i]:(it=r,r=a)),r!==a&&(e,r=U(r)),e=r}function Pt(){var e,r,n,i,o;return e=it,r=it,Q.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(Z)),n!==a?((i=It())===a&&(i=null),i!==a&&(o=jt())!==a?r=n=[n,i,o]:(it=r,r=a)):(it=r,r=a),r!==a&&(e,r=U(r)),e=r}function It(){var e;return $.test(t.charAt(it))?(e=t.charAt(it),it++):(e=a,0===ut&&dt(K)),e}function jt(){var e,r,n;if(e=it,r=[],tt.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(et)),n!==a)for(;n!==a;)r.push(n),tt.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(et));else r=a;return r!==a&&(e,r=rt(r)),e=r}function Nt(){var e,r;return e=it,nt.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(at)),r!==a&&(e,r=X()),e=r}var Rt={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Lt in Rt)Rt[Lt.toUpperCase()]=Rt[Lt];function Dt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Rt[t]};for(var a in t==t.toLowerCase()&&(n.relative=!0),e[r])n[a]=e[r][a];e[r]=n}return e}if((r=o())!==a&&it===t.length)return r;throw r!==a&&it<t.length&&dt({type:"end"}),gt(ct,st<t.length?t.charAt(st):null,st<t.length?pt(st,st+1):pt(st,st))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var a=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),a[e]=t>>>((3&e)<<3)&255;return a}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,a=r;return[a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]]].join("")}},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(96),r(257),r(127),r(258),r(128),r(259),r(260),r(261),r(262),r(263),r(131),r(133),r(134),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),a=r(14),i=r(7),o=r(0),s=r(12),c=r(30).KEY,u=r(3),f=r(49),l=r(43),h=r(33),p=r(5),d=r(109),g=r(77),v=r(155),y=r(59),m=r(1),b=r(4),k=r(9),S=r(15),A=r(23),x=r(32),T=r(36),w=r(112),_=r(16),M=r(58),E=r(8),O=r(34),C=_.f,F=E.f,P=w.f,I=n.Symbol,j=n.JSON,N=j&&j.stringify,R=p("_hidden"),L=p("toPrimitive"),D={}.propertyIsEnumerable,V=f("symbol-registry"),G=f("symbols"),B=f("op-symbols"),Y=Object.prototype,q="function"==typeof I&&!!M.f,X=n.QObject,W=!X||!X.prototype||!X.prototype.findChild,z=i&&u(function(){return 7!=T(F({},"a",{get:function(){return F(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=C(Y,e);n&&delete Y[e],F(t,e,r),n&&t!==Y&&F(Y,e,n)}:F,U=function(t){var e=G[t]=T(I.prototype);return e._k=t,e},H=q&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},J=function(t,e,r){return t===Y&&J(B,e,r),m(t),e=A(e,!0),m(r),a(G,e)?(r.enumerable?(a(t,R)&&t[R][e]&&(t[R][e]=!1),r=T(r,{enumerable:x(0,!1)})):(a(t,R)||F(t,R,x(1,{})),t[R][e]=!0),z(t,e,r)):F(t,e,r)},Q=function(t,e){m(t);for(var r,n=v(e=S(e)),a=0,i=n.length;i>a;)J(t,r=n[a++],e[r]);return t},Z=function(t){var e=D.call(this,t=A(t,!0));return!(this===Y&&a(G,t)&&!a(B,t))&&(!(e||!a(this,t)||!a(G,t)||a(this,R)&&this[R][t])||e)},$=function(t,e){if(t=S(t),e=A(e,!0),t!==Y||!a(G,e)||a(B,e)){var r=C(t,e);return!r||!a(G,e)||a(t,R)&&t[R][e]||(r.enumerable=!0),r}},K=function(t){for(var e,r=P(S(t)),n=[],i=0;r.length>i;)a(G,e=r[i++])||e==R||e==c||n.push(e);return n},tt=function(t){for(var e,r=t===Y,n=P(r?B:S(t)),i=[],o=0;n.length>o;)!a(G,e=n[o++])||r&&!a(Y,e)||i.push(G[e]);return i};q||(s((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===Y&&e.call(B,r),a(this,R)&&a(this[R],t)&&(this[R][t]=!1),z(this,t,x(1,r))};return i&&W&&z(Y,t,{configurable:!0,set:e}),U(t)}).prototype,"toString",function(){return this._k}),_.f=$,E.f=J,r(37).f=w.f=K,r(51).f=Z,M.f=tt,i&&!r(29)&&s(Y,"propertyIsEnumerable",Z,!0),d.f=function(t){return U(p(t))}),o(o.G+o.W+o.F*!q,{Symbol:I});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=O(p.store),at=0;nt.length>at;)g(nt[at++]);o(o.S+o.F*!q,"Symbol",{for:function(t){return a(V,t+="")?V[t]:V[t]=I(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),o(o.S+o.F*!q,"Object",{create:function(t,e){return void 0===e?T(t):Q(T(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:$,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var it=u(function(){M.f(1)});o(o.S+o.F*it,"Object",{getOwnPropertySymbols:function(t){return M.f(k(t))}}),j&&o(o.S+o.F*(!q||u(function(){var t=I();return"[null]"!=N([t])||"{}"!=N({a:t})||"{}"!=N(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],a=1;arguments.length>a;)n.push(arguments[a++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,N.apply(j,n)}}),I.prototype[L]||r(11)(I.prototype,L,I.prototype.valueOf),l(I,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(49)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),a=r(58),i=r(51);t.exports=function(t){var e=n(t),r=a.f;if(r)for(var o,s=r(t),c=i.f,u=0;s.length>u;)c.call(t,o=s[u++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(111)})},function(t,e,r){var n=r(15),a=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return a(n(t),e)}})},function(t,e,r){var n=r(9),a=r(17);r(25)("getPrototypeOf",function(){return function(t){return a(n(t))}})},function(t,e,r){var n=r(9),a=r(34);r(25)("keys",function(){return function(t){return a(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(112).f})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(114)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(81).set})},function(t,e,r){"use strict";var n=r(44),a={};a[r(5)("toStringTag")]="z",a+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(115)})},function(t,e,r){var n=r(8).f,a=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in a||r(7)&&n(a,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),a=r(17),i=r(5)("hasInstance"),o=Function.prototype;i in o||r(8).f(o,i,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=a(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),a=r(117);n(n.G+n.F*(parseInt!=a),{parseInt:a})},function(t,e,r){var n=r(0),a=r(118);n(n.G+n.F*(parseFloat!=a),{parseFloat:a})},function(t,e,r){"use strict";var n=r(2),a=r(14),i=r(20),o=r(83),s=r(23),c=r(3),u=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,g=p.prototype,v="Number"==i(r(36)(g)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var r,n,a,i=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:n=2,a=49;break;case 79:case 111:n=8,a=55;break;default:return+e}for(var o,c=e.slice(2),u=0,f=c.length;u<f;u++)if((o=c.charCodeAt(u))<48||o>a)return NaN;return parseInt(c,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(v?c(function(){g.valueOf.call(r)}):"Number"!=i(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?u(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;k.length>S;S++)a(d,b=k[S])&&!a(p,b)&&l(p,b,f(d,b));p.prototype=g,g.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),a=r(21),i=r(119),o=r(84),s=1..toFixed,c=Math.floor,u=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*u[r],u[r]=n%1e7,n=c(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=u[e],u[e]=c(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var r=String(u[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,r,n,s,c=i(this,f),u=a(t),g="",v="0";if(u<0||u>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(g="-",c=-c),c>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(c*d(2,69,1))-69)<0?c*d(2,-e,1):c/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=u;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),v=p()}else l(0,r),l(1<<-e,0),v=p()+o.call("0",u);return v=u>0?g+((s=v.length)<=u?"0."+o.call("0",u-s)+v:v.slice(0,s-u)+"."+v.slice(s-u)):g+v}})},function(t,e,r){"use strict";var n=r(0),a=r(3),i=r(119),o=1..toPrecision;n(n.P+n.F*(a(function(){return"1"!==o.call(1,void 0)})||!a(function(){o.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),a=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),a=r(120),i=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return a(t)&&i(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),a=r(118);n(n.S+n.F*(Number.parseFloat!=a),"Number",{parseFloat:a})},function(t,e,r){var n=r(0),a=r(117);n(n.S+n.F*(Number.parseInt!=a),"Number",{parseInt:a})},function(t,e,r){var n=r(0),a=r(121),i=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:a(t-1+i(t-1)*i(t+1))}})},function(t,e,r){var n=r(0),a=Math.asinh;n(n.S+n.F*!(a&&1/a(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),a=Math.atanh;n(n.S+n.F*!(a&&1/a(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),a=r(85);n(n.S,"Math",{cbrt:function(t){return a(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),a=Math.exp;n(n.S,"Math",{cosh:function(t){return(a(t=+t)+a(-t))/2}})},function(t,e,r){var n=r(0),a=r(86);n(n.S+n.F*(a!=Math.expm1),"Math",{expm1:a})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(122)})},function(t,e,r){var n=r(0),a=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,i=0,o=0,s=arguments.length,c=0;o<s;)c<(r=a(arguments[o++]))?(i=i*(n=c/r)*n+1,c=r):i+=r>0?(n=r/c)*n:r;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,r){var n=r(0),a=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=a(4294967295,5)||2!=a.length}),"Math",{imul:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n;return 0|a*i+((65535&r>>>16)*i+a*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(121)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(85)})},function(t,e,r){var n=r(0),a=r(86),i=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(a(t)-a(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),a=r(86),i=Math.exp;n(n.S,"Math",{tanh:function(t){var e=a(t=+t),r=a(-t);return e==1/0?1:r==1/0?-1:(e-r)/(i(t)+i(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),a=r(35),i=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],a(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),a=r(15),i=r(6);n(n.S,"String",{raw:function(t){for(var e=a(t.raw),r=i(e.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(e[s++])),s<n&&o.push(String(arguments[s]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(60)(!0);r(87)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),a=r(60)(!1);n(n.P,"String",{codePointAt:function(t){return a(this,t)}})},function(t,e,r){"use strict";var n=r(0),a=r(6),i=r(89),o="".endsWith;n(n.P+n.F*r(90)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=a(e.length),s=void 0===r?n:Math.min(a(r),n),c=String(t);return o?o.call(e,c,s):e.slice(s-c.length,s)===c}})},function(t,e,r){"use strict";var n=r(0),a=r(89);n(n.P+n.F*r(90)("includes"),"String",{includes:function(t){return!!~a(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(84)})},function(t,e,r){"use strict";var n=r(0),a=r(6),i=r(89),o="".startsWith;n(n.P+n.F*r(90)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),r=a(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=a(this),r=i(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),a=r(232);n(n.P+n.F*(Date.prototype.toISOString!==a),"Date",{toISOString:a})},function(t,e,r){"use strict";var n=r(3),a=Date.prototype.getTime,i=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!n(function(){i.call(new Date(NaN))})?function(){if(!isFinite(a.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:i},function(t,e,r){var n=Date.prototype,a=n.toString,i=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=i.call(this);return t==t?a.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),a=Date.prototype;n in a||r(11)(a,n,r(235))},function(t,e,r){"use strict";var n=r(1),a=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return a(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(59)})},function(t,e,r){"use strict";var n=r(19),a=r(0),i=r(9),o=r(123),s=r(91),c=r(6),u=r(92),f=r(93);a(a.S+a.F*!r(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,a,l,h=i(t),p="function"==typeof this?this:Array,d=arguments.length,g=d>1?arguments[1]:void 0,v=void 0!==g,y=0,m=f(h);if(v&&(g=n(g,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(r=new p(e=c(h.length));e>y;y++)u(r,y,v?g(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(a=l.next()).done;y++)u(r,y,v?o(l,g,[a.value,y],!0):a.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),a=r(92);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)a(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),a=r(15),i=[].join;n(n.P+n.F*(r(50)!=Object||!r(22)(i)),"Array",{join:function(t){return i.call(a(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),a=r(80),i=r(20),o=r(35),s=r(6),c=[].slice;n(n.P+n.F*r(3)(function(){a&&c.call(a)}),"Array",{slice:function(t,e){var r=s(this.length),n=i(this);if(e=void 0===e?r:e,"Array"==n)return c.call(this,t,e);for(var a=o(t,r),u=o(e,r),f=s(u-a),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(a+h):this[a+h];return l}})},function(t,e,r){"use strict";var n=r(0),a=r(10),i=r(9),o=r(3),s=[].sort,c=[1,2,3];n(n.P+n.F*(o(function(){c.sort(void 0)})||!o(function(){c.sort(null)})||!r(22)(s)),"Array",{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),a(t))}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(0),i=r(22)([].forEach,!0);n(n.P+n.F*!i,"Array",{forEach:function(t){return a(this,t,arguments[1])}})},function(t,e,r){var n=r(4),a=r(59),i=r(5)("species");t.exports=function(t){var e;return a(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!a(e.prototype)||(e=void 0),n(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),a=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(124);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return a(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),a=r(124);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return a(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),a=r(57)(!1),i=[].indexOf,o=!!i&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(i)),"Array",{indexOf:function(t){return o?i.apply(this,arguments)||0:a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(15),i=r(21),o=r(6),s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(c||!r(22)(s)),"Array",{lastIndexOf:function(t){if(c)return s.apply(this,arguments)||0;var e=a(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,i(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(125)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(95)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),a=r(26)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),n(n.P+n.F*i,"Array",{find:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),a=r(26)(6),i="findIndex",o=!0;i in[]&&Array(1)[i](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(i)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),a=r(83),i=r(8).f,o=r(37).f,s=r(61),c=r(52),u=n.RegExp,f=u,l=u.prototype,h=/a/g,p=/a/g,d=new u(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,u(h)!=h||u(p)==p||"/a/i"!=u(h,"i")}))){u=function(t,e){var r=this instanceof u,n=s(t),i=void 0===e;return!r&&n&&t.constructor===u&&i?t:a(d?new f(n&&!i?t.source:t,e):f((n=t instanceof u)?t.source:t,n&&i?c.call(t):e),r?this:l,u)};for(var g=function(t){t in u||i(u,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},v=o(f),y=0;v.length>y;)g(v[y++]);l.constructor=u,u.prototype=l,r(12)(n,"RegExp",u)}r(38)("RegExp")},function(t,e,r){"use strict";r(128);var n=r(1),a=r(52),i=r(7),o=/./.toString,s=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?s(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?a.call(t):void 0)}):"toString"!=o.name&&s(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),a=r(6),i=r(98),o=r(63);r(64)("match",1,function(t,e,r,s){return[function(r){var n=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var c=n(t),u=String(this);if(!c.global)return o(c,u);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(c,u));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=i(u,a(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),a=r(9),i=r(6),o=r(21),s=r(98),c=r(63),u=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(64)("replace",2,function(t,e,r,d){return[function(n,a){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,a):r.call(String(i),n,a)},function(t,e){var a=d(r,t,this,e);if(a.done)return a.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var v=l.global;if(v){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!v)break;""===String(b[0])&&(l.lastIndex=s(h,i(l.lastIndex),y))}for(var k,S="",A=0,x=0;x<m.length;x++){b=m[x];for(var T=String(b[0]),w=u(f(o(b.index),h.length),0),_=[],M=1;M<b.length;M++)_.push(void 0===(k=b[M])?k:String(k));var E=b.groups;if(p){var O=[T].concat(_,w,h);void 0!==E&&O.push(E);var C=String(e.apply(void 0,O))}else C=g(T,h,w,_,E,e);w>=A&&(S+=h.slice(A,w)+C,A=w+T.length)}return S+h.slice(A)}];function g(t,e,n,i,o,s){var c=n+t.length,u=i.length,f=p;return void 0!==o&&(o=a(o),f=h),r.call(s,f,function(r,a){var s;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(c);case"<":s=o[a.slice(1,-1)];break;default:var f=+a;if(0===f)return r;if(f>u){var h=l(f/10);return 0===h?r:h<=u?void 0===i[h-1]?a.charAt(1):i[h-1]+a.charAt(1):r}s=i[f-1]}return void 0===s?"":s})}})},function(t,e,r){"use strict";var n=r(1),a=r(114),i=r(63);r(64)("search",1,function(t,e,r,o){return[function(r){var n=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var s=n(t),c=String(this),u=s.lastIndex;a(u,0)||(s.lastIndex=0);var f=i(s,c);return a(s.lastIndex,u)||(s.lastIndex=u),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(61),a=r(1),i=r(53),o=r(98),s=r(6),c=r(63),u=r(97),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(64)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var a=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(a,t,e);for(var i,o,s,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(i=u.call(d,a))&&!((o=d.lastIndex)>l&&(c.push(a.slice(l,i.index)),i.length>1&&i.index<a.length&&h.apply(c,i.slice(1)),s=i[0].length,l=o,c.length>=p));)d.lastIndex===i.index&&d.lastIndex++;return l===a.length?!s&&d.test("")||c.push(""):c.push(a.slice(l)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var a=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,a,n):d.call(String(a),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var u=a(t),h=String(this),g=i(u,RegExp),v=u.unicode,y=(u.ignoreCase?"i":"")+(u.multiline?"m":"")+(u.unicode?"u":"")+(p?"y":"g"),m=new g(p?u:"^(?:"+u.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var k=0,S=0,A=[];S<h.length;){m.lastIndex=p?S:0;var x,T=c(m,p?h:h.slice(S));if(null===T||(x=l(s(m.lastIndex+(p?0:S)),h.length))===k)S=o(h,S,v);else{if(A.push(h.slice(k,S)),A.length===b)return A;for(var w=1;w<=T.length-1;w++)if(A.push(T[w]),A.length===b)return A;S=k=x}}return A.push(h.slice(k)),A}]})},function(t,e,r){"use strict";var n,a,i,o,s=r(29),c=r(2),u=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),g=r(40),v=r(53),y=r(99).set,m=r(100)(),b=r(101),k=r(129),S=r(65),A=r(130),x=c.TypeError,T=c.process,w=T&&T.versions,_=w&&w.v8||"",M=c.Promise,E="process"==f(T),O=function(){},C=a=b.f,F=!!function(){try{var t=M.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(O,O)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==_.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),P=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},I=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,a=1==t._s,i=0,o=function(e){var r,i,o,s=a?e.ok:e.fail,c=e.resolve,u=e.reject,f=e.domain;try{s?(a||(2==t._h&&R(t),t._h=1),!0===s?r=n:(f&&f.enter(),r=s(n),f&&(f.exit(),o=!0)),r===e.promise?u(x("Promise-chain cycle")):(i=P(r))?i.call(r,c,u):c(r)):u(n)}catch(t){f&&!o&&f.exit(),u(t)}};r.length>i;)o(r[i++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){y.call(c,function(){var e,r,n,a=t._v,i=N(t);if(i&&(e=k(function(){E?T.emit("unhandledRejection",a,t):(r=c.onunhandledrejection)?r({promise:t,reason:a}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",a)}),t._h=E||N(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){y.call(c,function(){var e;E?T.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),I(e,!0))},D=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw x("Promise can't be resolved itself");(e=P(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,u(D,n,1),u(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,I(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};F||(M=function(t){d(this,M,"Promise","_h"),p(t),n.call(this);try{t(u(D,this,1),u(L,this,1))}catch(t){L.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(M.prototype,{then:function(t,e){var r=C(v(this,M));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=E?T.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&I(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n;this.promise=t,this.resolve=u(D,t,1),this.reject=u(L,t,1)},b.f=C=function(t){return t===M||t===o?new i(t):a(t)}),l(l.G+l.W+l.F*!F,{Promise:M}),r(43)(M,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!F,"Promise",{reject:function(t){var e=C(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!F),"Promise",{resolve:function(t){return A(s&&this===o?M:this,t)}}),l(l.S+l.F*!(F&&r(62)(function(t){M.all(t).catch(O)})),"Promise",{all:function(t){var e=this,r=C(e),n=r.resolve,a=r.reject,i=k(function(){var r=[],i=0,o=1;g(t,!1,function(t){var s=i++,c=!1;r.push(void 0),o++,e.resolve(t).then(function(t){c||(c=!0,r[s]=t,--o||n(r))},a)}),--o||n(r)});return i.e&&a(i.v),r.promise},race:function(t){var e=this,r=C(e),n=r.reject,a=k(function(){g(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return a.e&&n(a.v),r.promise}})},function(t,e,r){"use strict";var n=r(135),a=r(42);r(66)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(a(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),a=r(67),i=r(102),o=r(1),s=r(35),c=r(6),u=r(4),f=r(2).ArrayBuffer,l=r(53),h=i.ArrayBuffer,p=i.DataView,d=a.ABV&&f.isView,g=h.prototype.slice,v=a.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!a.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||u(t)&&v in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==g&&void 0===e)return g.call(o(this),t);for(var r=o(this).byteLength,n=s(t,r),a=s(void 0===e?r:e,r),i=new(l(this,h))(c(a-n)),u=new p(this),f=new p(i),d=0;n<a;)f.setUint8(d++,u.getUint8(n++));return i}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(67).ABV,{DataView:r(102).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),a=r(10),i=r(1),o=(r(2).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=a(t),c=i(r);return o?o(n,e,c):s.call(n,e,c)}})},function(t,e,r){var n=r(0),a=r(36),i=r(10),o=r(1),s=r(4),c=r(3),u=r(115),f=(r(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){i(t),o(e);var r=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(u.apply(t,n))}var c=r.prototype,p=a(s(c)?c:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,r){var n=r(8),a=r(0),i=r(1),o=r(23);a(a.S+a.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){i(t),e=o(e,!0),i(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),a=r(16).f,i=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=a(i(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),a=r(1),i=function(t){this._t=a(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(88)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,r){var n=r(16),a=r(17),i=r(14),o=r(0),s=r(4),c=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,u,f=arguments.length<3?e:arguments[2];return c(e)===f?e[r]:(o=n.f(e,r))?i(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:s(u=a(e))?t(u,r,f):void 0}})},function(t,e,r){var n=r(16),a=r(0),i=r(1);a(a.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(i(t),e)}})},function(t,e,r){var n=r(0),a=r(17),i=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return a(i(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),a=r(1),i=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return a(t),!i||i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(137)})},function(t,e,r){var n=r(0),a=r(1),i=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){a(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),a=r(16),i=r(17),o=r(14),s=r(0),c=r(32),u=r(1),f=r(4);s(s.S,"Reflect",{set:function t(e,r,s){var l,h,p=arguments.length<4?e:arguments[3],d=a.f(u(e),r);if(!d){if(f(h=i(e)))return t(h,r,s,p);d=c(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=a.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,n.f(p,r,l)}else n.f(p,r,c(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,r){var n=r(0),a=r(81);a&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){a.check(t,e);try{return a.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),a=r(57)(!0);n(n.P,"Array",{includes:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),a=r(138),i=r(9),o=r(6),s=r(10),c=r(94);n(n.P,"Array",{flatMap:function(t){var e,r,n=i(this);return s(t),e=o(n.length),r=c(n,0),a(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),a=r(138),i=r(9),o=r(6),s=r(21),c=r(94);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),r=o(e.length),n=c(e,0);return a(n,e,e,r,0,void 0===t?1:s(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),a=r(60)(!0);n(n.P,"String",{at:function(t){return a(this,t)}})},function(t,e,r){"use strict";var n=r(0),a=r(139),i=r(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*o,"String",{padStart:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),a=r(139),i=r(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*o,"String",{padEnd:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),a=r(24),i=r(6),o=r(61),s=r(52),c=RegExp.prototype,u=function(t,e){this._r=t,this._s=e};r(88)(u,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(a(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in c?String(t.flags):s.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=i(t.lastIndex),new u(n,e)}})},function(t,e,r){r(77)("asyncIterator")},function(t,e,r){r(77)("observable")},function(t,e,r){var n=r(0),a=r(137),i=r(15),o=r(16),s=r(92);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=i(t),c=o.f,u=a(n),f={},l=0;u.length>l;)void 0!==(r=c(n,e=u[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(0),a=r(140)(!1);n(n.S,"Object",{values:function(t){return a(t)}})},function(t,e,r){var n=r(0),a=r(140)(!0);n(n.S,"Object",{entries:function(t){return a(t)}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(10),o=r(8);r(7)&&n(n.P+r(68),"Object",{__defineGetter__:function(t,e){o.f(a(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(10),o=r(8);r(7)&&n(n.P+r(68),"Object",{__defineSetter__:function(t,e){o.f(a(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(68),"Object",{__lookupGetter__:function(t){var e,r=a(this),n=i(t,!0);do{if(e=s(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(68),"Object",{__lookupSetter__:function(t){var e,r=a(this),n=i(t,!0);do{if(e=s(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(141)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(141)("Set")})},function(t,e,r){r(69)("Map")},function(t,e,r){r(69)("Set")},function(t,e,r){r(69)("WeakMap")},function(t,e,r){r(69)("WeakSet")},function(t,e,r){r(70)("Map")},function(t,e,r){r(70)("Set")},function(t,e,r){r(70)("WeakMap")},function(t,e,r){r(70)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),a=r(20);n(n.S,"Error",{isError:function(t){return"Error"===a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),a=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*a}})},function(t,e,r){var n=r(0),a=r(143),i=r(122);n(n.S,"Math",{fscale:function(t,e,r,n,o){return i(a(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var a=t>>>0,i=r>>>0;return(e>>>0)+(n>>>0)+((a&i|(a|i)&~(a+i>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var a=t>>>0,i=r>>>0;return(e>>>0)-(n>>>0)-((~a&i|~(a^i)&a-i>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n,o=r>>16,s=n>>16,c=(o*i>>>0)+(a*i>>>16);return o*s+(c>>16)+((a*s>>>0)+(65535&c)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),a=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*a}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(143)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n,o=r>>>16,s=n>>>16,c=(o*i>>>0)+(a*i>>>16);return o*s+(c>>>16)+((a*s>>>0)+(65535&c)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),a=r(18),i=r(2),o=r(53),s=r(130);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,a.Promise||i.Promise),r="function"==typeof t;return this.then(r?function(r){return s(e,t()).then(function(){return r})}:t,r?function(r){return s(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),a=r(101),i=r(129);n(n.S,"Promise",{try:function(t){var e=a.f(this),r=i(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),a=r(1),i=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,a(r),i(n))}})},function(t,e,r){var n=r(28),a=r(1),i=n.key,o=n.map,s=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:i(arguments[2]),n=o(a(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var c=s.get(e);return c.delete(r),!!c.size||s.delete(e)}})},function(t,e,r){var n=r(28),a=r(1),i=r(17),o=n.has,s=n.get,c=n.key,u=function(t,e,r){if(o(t,e,r))return s(t,e,r);var n=i(e);return null!==n?u(t,n,r):void 0};n.exp({getMetadata:function(t,e){return u(t,a(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,r){var n=r(133),a=r(142),i=r(28),o=r(1),s=r(17),c=i.keys,u=i.key,f=function(t,e){var r=c(t,e),i=s(t);if(null===i)return r;var o=f(i,e);return o.length?r.length?a(new n(r.concat(o))):o:r};i.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return i(t,a(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return i(a(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),a=r(1),i=r(17),o=n.has,s=n.key,c=function(t,e,r){if(o(t,e,r))return!0;var n=i(e);return null!==n&&c(t,n,r)};n.exp({hasMetadata:function(t,e){return c(t,a(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return i(t,a(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=r(10),o=n.key,s=n.set;n.exp({metadata:function(t,e){return function(r,n){s(t,e,(void 0!==n?a:i)(r),o(n))}}})},function(t,e,r){var n=r(0),a=r(100)(),i=r(2).process,o="process"==r(20)(i);n(n.G,{asap:function(t){var e=o&&i.domain;a(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),a=r(2),i=r(18),o=r(100)(),s=r(5)("observable"),c=r(10),u=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,g=function(t){return null==t?void 0:c(t)},v=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,v(t))},b=function(t,e){u(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:c(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&v(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=g(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=g(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{v(e)}finally{throw t}}return v(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=g(r.complete);t=n?n.call(r,t):void 0}catch(t){try{v(e)}finally{throw t}}return v(e),t}}});var S=function(t){f(this,S,"Observable","_f")._f=c(t)};l(S.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||a.Promise)(function(r,n){c(t);var a=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),a.unsubscribe()}},error:n,complete:r})})}}),l(S,{from:function(t){var e="function"==typeof this?this:S,r=g(u(t)[s]);if(r){var n=u(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(S.prototype,s,function(){return this}),n(n.G,{Observable:S}),r(38)("Observable")},function(t,e,r){var n=r(2),a=r(0),i=r(65),o=[].slice,s=/MSIE .\./.test(i),c=function(t){return function(e,r){var n=arguments.length>2,a=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,a)}:e,r)}};a(a.G+a.B+a.F*s,{setTimeout:c(n.setTimeout),setInterval:c(n.setInterval)})},function(t,e,r){var n=r(0),a=r(99);n(n.G+n.B,{setImmediate:a.set,clearImmediate:a.clear})},function(t,e,r){for(var n=r(96),a=r(34),i=r(12),o=r(2),s=r(11),c=r(46),u=r(5),f=u("iterator"),l=u("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=a(p),g=0;g<d.length;g++){var v,y=d[g],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||s(k,f,h),k[l]||s(k,l,y),c[y]=h,m))for(v in n)k[v]||i(k,v,n[v],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,a=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",u="object"==typeof t,f=e.regeneratorRuntime;if(f)u&&(t.exports=f);else{(f=e.regeneratorRuntime=u?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",g={},v={};v[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(F([])));m&&m!==n&&a.call(m,o)&&(v=m);var b=T.prototype=A.prototype=Object.create(v);x.prototype=b.constructor=T,T.constructor=x,T[c]=x.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,T):(t.__proto__=T,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},w(_.prototype),_.prototype[s]=function(){return this},f.AsyncIterator=_,f.async=function(t,e,r,n){var a=new _(k(t,e,r,n));return f.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},w(b),b[c]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=F,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&a.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,a){return s.type="throw",s.arg=t,e.next=n,a&&(e.method="next",e.arg=r),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var c=a.call(o,"catchLoc"),u=a.call(o,"finallyLoc");if(c&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&a.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:F(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),g}}}function k(t,e,r,n){var a=e&&e.prototype instanceof A?e:A,i=Object.create(a.prototype),o=new C(n||[]);return i._invoke=function(t,e,r){var n=l;return function(a,i){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===a)throw i;return P()}for(r.method=a,r.arg=i;;){var o=r.delegate;if(o){var s=M(o,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=S(t,e,r);if("normal"===c.type){if(n=r.done?d:h,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(t,r,o),i}function S(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function A(){}function x(){}function T(){}function w(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(t){var e;this._invoke=function(r,n){function i(){return new Promise(function(e,i){!function e(r,n,i,o){var s=S(t[r],t,n);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"==typeof u&&a.call(u,"__await")?Promise.resolve(u.__await).then(function(t){e("next",t,i,o)},function(t){e("throw",t,i,o)}):Promise.resolve(u).then(function(t){c.value=t,i(c)},o)}o(s.arg)}(r,n,e,i)})}return e=e?e.then(i,i):i()}}function M(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,M(t,e),"throw"===e.method))return g;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var a=S(n,t.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,g;var i=a.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,g):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function F(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(a.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:P}}function P(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),a=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return a(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,