!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=144)}([function(t,e,r){var n=r(2),a=r(18),i=r(11),o=r(12),s=r(19),c=function(t,e,r){var u,f,l,h,p=t&c.F,d=t&c.G,g=t&c.S,v=t&c.P,y=t&c.B,m=d?n:g?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?a:a[e]||(a[e]={}),k=b.prototype||(b.prototype={});for(u in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[u])?m:r)[u],h=y&&f?s(l,n):v&&"function"==typeof l?s(Function.call,l):l,m&&o(m,u,l,t&c.U),b[u]!=l&&i(b,u,h),v&&k[u]!=l&&(k[u]=l)};n.core=a,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(49)("wks"),a=r(33),i=r(2).Symbol,o="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=o&&i[t]||(o?i:a)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),a=Math.min;t.exports=function(t){return t>0?a(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),a=r(108),i=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=i(e,!0),n(r),a)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),a=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),a=r(11),i=r(14),o=r(33)("src"),s=r(154),c=(""+s).split("toString");r(18).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,r,s){var u="function"==typeof r;u&&(i(r,"name")||a(r,"name",e)),t[e]!==r&&(u&&(i(r,o)||a(r,o,t[e]?""+t[e]:c.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:a(t,e,r):(delete t[e],a(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||s.call(this)})},function(t,e,r){var n=r(0),a=r(3),i=r(24),o=/"/g,s=function(t,e,r,n){var a=String(i(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),s+">"+a+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(s),n(n.P+n.F*a(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(50),a=r(24);t.exports=function(t){return n(a(t))}},function(t,e,r){var n=r(51),a=r(32),i=r(15),o=r(23),s=r(14),c=r(108),u=Object.getOwnPropertyDescriptor;e.f=r(7)?u:function(t,e){if(t=i(t),e=o(e,!0),c)try{return u(t,e)}catch(t){}if(s(t,e))return a(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),a=r(9),i=r(78)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=a(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,a){return t.call(e,r,n,a)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,a;if(e&&"function"==typeof(r=t.toString)&&!n(a=r.call(t)))return a;if("function"==typeof(r=t.valueOf)&&!n(a=r.call(t)))return a;if(!e&&"function"==typeof(r=t.toString)&&!n(a=r.call(t)))return a;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),a=r(18),i=r(3);t.exports=function(t,e){var r=(a.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*i(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),a=r(50),i=r(9),o=r(6),s=r(94);t.exports=function(t,e){var r=1==t,c=2==t,u=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var g,v,y=i(e),m=a(y),b=n(s,d,3),k=o(m.length),S=0,A=r?p(e,k):c?p(e,0):void 0;k>S;S++)if((h||S in m)&&(v=b(g=m[S],S,y),t))if(r)A[S]=v;else if(v)switch(t){case 3:return!0;case 5:return g;case 6:return S;case 2:A.push(g)}else if(f)return!1;return l?-1:u||f?f:A}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),a=r(2),i=r(3),o=r(0),s=r(67),c=r(102),u=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),g=r(6),v=r(136),y=r(35),m=r(23),b=r(14),k=r(44),S=r(4),A=r(9),T=r(91),w=r(36),x=r(17),_=r(37).f,M=r(93),E=r(33),O=r(5),C=r(26),P=r(57),F=r(53),I=r(96),j=r(46),R=r(62),L=r(38),N=r(95),D=r(125),V=r(8),G=r(16),B=V.f,Y=G.f,X=a.RangeError,q=a.TypeError,W=a.Uint8Array,U=Array.prototype,z=c.ArrayBuffer,H=c.DataView,J=C(0),Q=C(2),Z=C(3),$=C(4),K=C(5),tt=C(6),et=P(!0),rt=P(!1),nt=I.values,at=I.keys,it=I.entries,ot=U.lastIndexOf,st=U.reduce,ct=U.reduceRight,ut=U.join,ft=U.sort,lt=U.slice,ht=U.toString,pt=U.toLocaleString,dt=O("iterator"),gt=O("toStringTag"),vt=E("typed_constructor"),yt=E("def_constructor"),mt=s.CONSTR,bt=s.TYPED,kt=s.VIEW,St=C(1,function(t,e){return _t(F(t,t[yt]),e)}),At=i(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),Tt=!!W&&!!W.prototype.set&&i(function(){new W(1).set({})}),wt=function(t,e){var r=d(t);if(r<0||r%e)throw X("Wrong offset!");return r},xt=function(t){if(S(t)&&bt in t)return t;throw q(t+" is not a typed array!")},_t=function(t,e){if(!(S(t)&&vt in t))throw q("It is not a typed array constructor!");return new t(e)},Mt=function(t,e){return Et(F(t,t[yt]),e)},Et=function(t,e){for(var r=0,n=e.length,a=_t(t,n);n>r;)a[r]=e[r++];return a},Ot=function(t,e,r){B(t,e,{get:function(){return this._d[r]}})},Ct=function(t){var e,r,n,a,i,o,s=A(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=M(s);if(null!=h&&!T(h)){for(o=h.call(s),n=[],e=0;!(i=o.next()).done;e++)n.push(i.value);s=n}for(l&&c>2&&(f=u(f,arguments[2],2)),e=0,r=g(s.length),a=_t(this,r);r>e;e++)a[e]=l?f(s[e],e):s[e];return a},Pt=function(){for(var t=0,e=arguments.length,r=_t(this,e);e>t;)r[t]=arguments[t++];return r},Ft=!!W&&i(function(){pt.call(new W(1))}),It=function(){return pt.apply(Ft?lt.call(xt(this)):xt(this),arguments)},jt={copyWithin:function(t,e){return D.call(xt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(xt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return N.apply(xt(this),arguments)},filter:function(t){return Mt(this,Q(xt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return K(xt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(xt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(xt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(xt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(xt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ut.apply(xt(this),arguments)},lastIndexOf:function(t){return ot.apply(xt(this),arguments)},map:function(t){return St(xt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(xt(this),arguments)},reduceRight:function(t){return ct.apply(xt(this),arguments)},reverse:function(){for(var t,e=xt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(xt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(xt(this),t)},subarray:function(t,e){var r=xt(this),n=r.length,a=y(t,n);return new(F(r,r[yt]))(r.buffer,r.byteOffset+a*r.BYTES_PER_ELEMENT,g((void 0===e?n:y(e,n))-a))}},Rt=function(t,e){return Mt(this,lt.call(xt(this),t,e))},Lt=function(t){xt(this);var e=wt(arguments[1],1),r=this.length,n=A(t),a=g(n.length),i=0;if(a+e>r)throw X("Wrong length!");for(;i<a;)this[e+i]=n[i++]},Nt={entries:function(){return it.call(xt(this))},keys:function(){return at.call(xt(this))},values:function(){return nt.call(xt(this))}},Dt=function(t,e){return S(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Vt=function(t,e){return Dt(t,e=m(e,!0))?l(2,t[e]):Y(t,e)},Gt=function(t,e,r){return!(Dt(t,e=m(e,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?B(t,e,r):(t[e]=r.value,t)};mt||(G.f=Vt,V.f=Gt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Gt}),i(function(){ht.call({})})&&(ht=pt=function(){return ut.call(this)});var Bt=p({},jt);p(Bt,Nt),h(Bt,dt,Nt.values),p(Bt,{slice:Rt,set:Lt,constructor:function(){},toString:ht,toLocaleString:It}),Ot(Bt,"buffer","b"),Ot(Bt,"byteOffset","o"),Ot(Bt,"byteLength","l"),Ot(Bt,"length","e"),B(Bt,gt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,c){var u=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=a[u],y=d||{},m=d&&x(d),b=!d||!s.ABV,A={},T=d&&d.prototype,M=function(t,r){B(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,At)}(this,r)},set:function(t){return function(t,r,n){var a=t._d;c&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),a.v[p](r*e+a.o,n,At)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,a){f(t,d,u,"_d");var i,o,s,c,l=0,p=0;if(S(r)){if(!(r instanceof z||"ArrayBuffer"==(c=k(r))||"SharedArrayBuffer"==c))return bt in r?Et(d,r):Ct.call(d,r);i=r,p=wt(n,e);var y=r.byteLength;if(void 0===a){if(y%e)throw X("Wrong length!");if((o=y-p)<0)throw X("Wrong length!")}else if((o=g(a)*e)+p>y)throw X("Wrong length!");s=o/e}else s=v(r),i=new z(o=s*e);for(h(t,"_d",{b:i,o:p,l:o,e:s,v:new H(i)});l<s;)M(t,l++)}),T=d.prototype=w(Bt),h(T,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&R(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,a){var i;return f(t,d,u),S(r)?r instanceof z||"ArrayBuffer"==(i=k(r))||"SharedArrayBuffer"==i?void 0!==a?new y(r,wt(n,e),a):void 0!==n?new y(r,wt(n,e)):new y(r):bt in r?Et(d,r):Ct.call(d,r):new y(v(r))}),J(m!==Function.prototype?_(y).concat(_(m)):_(y),function(t){t in d||h(d,t,y[t])}),d.prototype=T,n||(T.constructor=d));var E=T[dt],O=!!E&&("values"==E.name||null==E.name),C=Nt.values;h(d,vt,!0),h(T,bt,u),h(T,kt,!0),h(T,yt,d),(c?new d(1)[gt]==u:gt in T)||B(T,gt,{get:function(){return u}}),A[u]=d,o(o.G+o.W+o.F*(d!=y),A),o(o.S,u,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*i(function(){y.of.call(d,1)}),u,{from:Ct,of:Pt}),"BYTES_PER_ELEMENT"in T||h(T,"BYTES_PER_ELEMENT",e),o(o.P,u,jt),L(u),o(o.P+o.F*Tt,u,{set:Lt}),o(o.P+o.F*!O,u,Nt),n||T.toString==ht||(T.toString=ht),o(o.P+o.F*i(function(){new d(1).slice()}),u,{slice:Rt}),o(o.P+o.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){T.toLocaleString.call([1,2])})),u,{toLocaleString:It}),j[u]=O?E:C,n||O||h(T,dt,C)}}else t.exports=function(){}},function(t,e,r){var n=r(131),a=r(0),i=r(49)("metadata"),o=i.store||(i.store=new(r(134))),s=function(t,e,r){var a=o.get(t);if(!a){if(!r)return;o.set(t,a=new n)}var i=a.get(e);if(!i){if(!r)return;a.set(e,i=new n)}return i};t.exports={store:o,map:s,has:function(t,e,r){var n=s(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=s(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){s(r,n,!0).set(t,e)},keys:function(t,e){var r=s(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){a(a.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),a=r(4),i=r(14),o=r(8).f,s=0,c=Object.isExtensible||function(){return!0},u=!r(3)(function(){return c(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!a(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,n)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!i(t,n)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return u&&l.NEED&&c(t)&&!i(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),a=Array.prototype;null==a[n]&&r(11)(a,n,{}),t.exports=function(t){a[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(110),a=r(79);t.exports=Object.keys||function(t){return n(t,a)}},function(t,e,r){var n=r(21),a=Math.max,i=Math.min;t.exports=function(t,e){return(t=n(t))<0?a(t+e,0):i(t,e)}},function(t,e,r){var n=r(1),a=r(111),i=r(79),o=r(78)("IE_PROTO"),s=function(){},c=function(){var t,e=r(76)("iframe"),n=i.length;for(e.style.display="none",r(80).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c.prototype[i[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=c(),void 0===e?r:a(r,e)}},function(t,e,r){var n=r(110),a=r(79).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,a)}},function(t,e,r){"use strict";var n=r(2),a=r(8),i=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];i&&e&&!e[o]&&a.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),a=r(123),i=r(91),o=r(1),s=r(6),c=r(93),u={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,g,v,y=h?function(){return t}:c(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(i(y)){for(p=s(t.length);p>b;b++)if((v=e?m(o(d=t[b])[0],d[1]):m(t[b]))===u||v===f)return v}else for(g=y.call(t);!(d=g.next()).done;)if((v=a(g,m,d.value,e))===u||v===f)return v}).BREAK=u,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var a in e)n(t,a,e[a],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,a=r(14),i=r(5)("toStringTag");t.exports=function(t,e,r){t&&!a(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),a=r(5)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),a))?r:i?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),a=r(24),i=r(3),o=r(82),s="["+o+"]",c=RegExp("^"+s+s+"*"),u=RegExp(s+s+"*$"),f=function(t,e,r){var a={},s=i(function(){return!!o[t]()||"​"!="​"[t]()}),c=a[t]=s?e(l):o[t];r&&(a[r]=c),n(n.P+n.F*s,"String",a)},l=f.trim=function(t,e){return t=String(a(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(u,"")),t};t.exports=f},function(t,e){t.exports={}},function(module,exports,__webpack_require__){"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var TimingSpec=function(){function TimingSpec(){_classCallCheck(this,TimingSpec),this._offset=0,this._reference=TimingSpec.timingRef.previousStart}return _createClass(TimingSpec,[{key:"replaceOffsetConst",value:function replaceOffsetConst(constants){var _this=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.offset?void 0===constants.get(this.offset)?0===this.offset.indexOf("calc")?(this.offset=this.offset.substring(0,this.offset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.includes(e)&&("number"==typeof t?_this.offset=_this.offset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+_this.offset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset,constants)?this.offset=eval(this.offset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset)?this.offset=constants.get(this.offset):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:this.offset&&"object"===_typeof(this.offset)&&"string"==typeof this.offset.minOffset&&(void 0===constants.get(this.offset.minOffset)?0===this.offset.minOffset.indexOf("calc")?(this.offset.minOffset=this.offset.minOffset.substring(0,this.offset.minOffset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.minOffset.includes(e)&&("number"==typeof t?_this.offset.minOffset=_this.offset.minOffset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+_this.offset.minOffset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset.minOffset,constants)?this.offset.minOffset=eval(this.offset.minOffset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset.minOffset)?this.offset.minOffset=constants.get(this.offset.minOffset):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'})}},{key:"calELeOffsetTime",value:function(t){var e=this,r=new Map,n=1e6;return"object"===_typeof(this.offset)&&t.forEach(function(t,r){n>parseFloat(t["data-datum"][e.offset.field])&&(n=parseFloat(t["data-datum"][e.offset.field]))}),t.forEach(function(t,a){var i=0;"number"==typeof e.offset?i=e.offset:"object"===_typeof(e.offset)&&(i=e.offset.minOffset*parseFloat(t["data-datum"][e.offset.field])/n),r.set(a,i)}),r}},{key:"calOffsetTime",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===n.size){var a=0;switch(this.reference){case TimingSpec.timingRef.previousStart:a=t+this.offset-r;break;case TimingSpec.timingRef.previousEnd:a=e+this.offset-r;break;case TimingSpec.timingRef.absolute:a=this.offset+r;break;default:a=t+this.offset-r}return a}var i=this,o=new Map,s=1e6;return"object"===_typeof(this.offset)&&n.forEach(function(t,e){s>parseFloat(t["data-datum"][i.offset.field])&&(s=parseFloat(t["data-datum"][i.offset.field]))}),n.forEach(function(n,a){var c=0;switch("number"==typeof i.offset?c=i.offset:"object"===_typeof(i.offset)&&(c=i.offset.minOffset*parseFloat(n["data-datum"][i.offset.field])/s),i.reference){case TimingSpec.timingRef.previousStart:o.set(a,t+c-r);break;case TimingSpec.timingRef.previousEnd:o.set(a,e+c-r);break;case TimingSpec.timingRef.absolute:o.set(a,c+r);break;default:o.set(a,t+c-r)}}),o}},{key:"reference",set:function(t){if(void 0!==t){var e=TimingSpec.transRef(t);Object.keys(TimingSpec.timingRef).includes(e)&&(this._reference=t)}},get:function(){return this._reference}},{key:"offset",set:function(t){void 0!==t&&("number"==typeof t?this._offset=Math.floor(t/(1e3/TimingSpec.FRAME_RATE))*(1e3/TimingSpec.FRAME_RATE):"object"!==_typeof(t)&&"string"!=typeof t||(this._offset=t))},get:function(){return this._offset}}],[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}]),TimingSpec}();TimingSpec.FRAME_RATE=20,TimingSpec.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"},TimingSpec.dataBindAttrs=["field","minOffset","minDuration"];var _default=TimingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n=r(55),a=r(105),i=s(r(75)),o=s(r(54));function s(t){return t&&t.__esModule?t:{default:t}}function c(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function h(t,e,r){return e&&l(t.prototype,e),r&&l(t,r),t}var p=function(){function t(){f(this,t)}return h(t,null,[{key:"arrIsContained",value:function(t,e){if(e.length>t)return!1;for(var r=0,n=e.length;r<n;r++)if(!t.includes(e[r]))return!1;return!0}},{key:"checkEquation",value:function(t,e){if(t=t.replace(/\s/g,""),/^[\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]$/.test(t))return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]{2,}/.test(t))return!1;if(/\(\)/.test(t))return!1;for(var r,n=[],a=0;a<t.length;a++)if("("===(r=t.charAt(a)))n.push("(");else if(")"===r){if(!(n.length>0))return!1;n.pop()}if(0!==n.length)return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]\)/.test(t))return!1;if(/[\x\÷\+\-\*\/]\(/.test(t))return!1;if(/\)[\x\÷\+\-\*\/]/.test(t))return!1;for(var i,o=t.replace(/[\(\)\x\÷\+\-\*\/]{1,}/g,"`").split(","),s=0;s<o.length;s++)if(i=o[s],/[A-Z]/i.test(i)&&void 0===e.get(i))return!1;for(var c=t.split(","),u=0;u<c.length;u++)if(void 0!==e.get(c[u]))if(null==c[u+1]);else if("+"!==c[u+1]&&"."!==c[u+1]&&"-"!==c[u+1]&&"x"!==c[u+1]&&"÷"!==c[u+1]&&"("!==c[u+1]&&")"!==c[u+1])return!1;return!0}},{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=u(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var a=t.keys()[n];r.set(a,this.deepClone(t.get(a)))}}for(var i in t)t.hasOwnProperty(i)&&(r[i]=this.deepClone(t[i]));return r}},{key:"arrayIntersact",value:function(t,e){return t.filter(function(t){return e.includes(t)})}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,a=t.split("");if(2===t.length)r=e=parseInt(a[0].toString()+a[1].toString(),16),n=e;else if(3===t.length)e=parseInt(a[0].toString()+a[0].toString(),16),r=parseInt(a[1].toString()+a[1].toString(),16),n=parseInt(a[2].toString()+a[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(a[0].toString()+a[1].toString(),16),r=parseInt(a[2].toString()+a[3].toString(),16),n=parseInt(a[4].toString()+a[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,a=0;a<r.length|(n=r[a]);a++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"discretizePathToPnts",value:function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttributeNS(null,"d",t);for(var n=r.getTotalLength()/e,a=[],i=0;i<e;i++){var o=r.getPointAtLength(n*i);a.push([o.x,o.y])}return a}},{key:"checkDSameShape",value:function(t,e){var r=!1;if(void 0!==t&&void 0!==e){var n=[],a=[],i=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g);if("string"==typeof t?n=(t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(i):t instanceof Array&&(n=t),"string"==typeof e?a=(e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(i):e instanceof Array&&(a=e),r=n.length===a.length)for(var o=0;o<n.length;o++){if(n[o].substring(0,1)!==a[o].substring(0,1)){r=!1;break}}}else console.error("undefined d in checkDSameShape!");return r}},{key:"findDStartEnd",value:function(t){var e=0,r=0,n=0,a=0,i=0,o=0;if(t)for(var s=0;s<t.length;s++){var c=t[s].substring(0,1),u=t[s].substring(1).split(",");switch(c){case"M":case"m":e=parseFloat(u[0]),r=parseFloat(u[1]);break;case"L":case"T":i=parseFloat(u[0]),o=parseFloat(u[1]);break;case"l":case"t":n=parseFloat(u[0]),a=parseFloat(u[1]);break;case"H":i=parseFloat(u[0]);break;case"h":n=parseFloat(u[0]);break;case"V":o=parseFloat(u[0]);break;case"v":a=parseFloat(u[0]);break;case"C":i=parseFloat(u[4]),o=parseFloat(u[5]);break;case"c":n=parseFloat(u[4]),a=parseFloat(u[5]);break;case"S":case"Q":i=parseFloat(u[2]),o=parseFloat(u[3]);break;case"s":case"q":n=parseFloat(u[2]),a=parseFloat(u[3]);break;case"A":case"a":n=2*parseFloat(u[0]),a=2*parseFloat(u[1])}}else console.error("wrong d in findDStartEnd!");return{startX:e,startY:r,endX:i,endY:o,relativeEndX:n,relativeEndY:a}}},{key:"checkValidOffsetDCmd",value:function(t,e,r,n){return Math.abs(n-t)<1||Math.abs(r-t)<1||Math.abs(n-e-t)<1}},{key:"dTrans",value:function(t,e,r,n,a,s){var u,f=this,l=s.type,h=[!1,!1,!1,!1,!1];void 0!==s.mergeType&&(h=s.mergeType),h[0]=l===i.default.actionTypes.translateX||l===i.default.actionTypes.translateXY||h[0],h[1]=l===i.default.actionTypes.translateY||l===i.default.actionTypes.translateXY||h[1],h[2]=l===i.default.actionTypes.scaleX||l===i.default.actionTypes.scaleXY||h[2],h[3]=l===i.default.actionTypes.scaleY||l===i.default.actionTypes.scaleXY||h[3],h[4]=l===i.default.actionTypes.dataChange||h[4],(u=console).log.apply(u,["current mark status: "].concat(c(h),[o.default.charts[t].markDatum.get(e),o.default.charts[t].scales,o.default.charts[t].visualMappings]));o.default.charts[t-1].scales;var p=o.default.charts[t].scales,d=o.default.charts[t-1].markDatum.get(e),g=(o.default.charts[t].markDatum.get(e),o.default.charts[t].visualMappings);if(void 0!==r&&void 0!==n){r=r.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),n=n.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var v=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),y=r.match(v),m=n.match(v),b=this.checkDSameShape(y,m);console.log("same shape: ",b,y,m),b&&function(){var t=f.findDStartEnd(y),e=f.findDStartEnd(m);if(h[3])if(a[2]);else if(h[4]);else{var r;if(p.forEach(function(t){"y-scale"===t.name&&(r=t)}),void 0!==g.get("height")){var n=g.get("height"),i=d[n];console.log("data last chart and scale this chart: ",i,r)}g.get("y")}var o=h[0]?e.startX-t.startX:0,c=h[1]?e.startY-t.startY:0,u=h[0]?e.relativeEndX-t.relativeEndX:0,l=h[1]?e.relativeEndY-t.relativeEndY:0;if(console.log("diff XY: ",o,c,"diff relative XY: ",u,l),console.log("merge type: ",s.mergeType,h),y)for(var v=[],b=[],k=function(t){var e=y[t].substring(0,1),r=y[t].substring(1),n=m[t].substring(1);e;var a=r.split(","),i=n.split(","),s=[];switch(e){case"M":case"m":case"L":case"T":var h=parseFloat(a[0])+o,p=parseFloat(a[1])+c,d=f.checkValidOffsetDCmd(h,0,parseFloat(a[0]),parseFloat(i[0])),g=f.checkValidOffsetDCmd(p,0,parseFloat(a[1]),parseFloat(i[1]));s.push(d?h:i[0]),s.push(g?p:i[1]);break;case"l":case"t":var k=parseFloat(a[0])+u,S=parseFloat(a[1])+l,A=f.checkValidOffsetDCmd(k,diffScaleX,parseFloat(a[0]),parseFloat(i[0])),T=f.checkValidOffsetDCmd(S,diffScaleY,parseFloat(a[1]),parseFloat(i[1]));s.push(A?k:i[0]),s.push(T?S:i[1]);break;case"S":case"Q":case"C":a.forEach(function(t,e){var r=0;r=e%2==0?parseFloat(t)+o:parseFloat(t)+c;var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));s.push(n?r:i[e])});break;case"s":case"q":case"c":var w="c"===e?3:2;a.forEach(function(t,e){var r=0;r=e%2==0?parseFloat(t)+(1+e/2)*u/w:parseFloat(t)+(1+Math.floor(e/2))*l/w;var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));s.push(n?r:i[e])});break;case"H":var x=parseFloat(r)+o,_=f.checkValidOffsetDCmd(x,0,parseFloat(r),parseFloat(n));s.push(_?x:n);break;case"h":var M=parseFloat(r)+u,E=f.checkValidOffsetDCmd(M,0,parseFloat(r),parseFloat(n));s.push(E?M:n);break;case"V":var O=parseFloat(r)+c,C=f.checkValidOffsetDCmd(O,0,parseFloat(r),parseFloat(n));s.push(C?O:n);break;case"v":var P=parseFloat(r)+l,F=f.checkValidOffsetDCmd(P,0,parseFloat(r),parseFloat(n));s.push(F?P:n);break;case"A":a.forEach(function(t,e){var r=0;r=5===e?parseFloat(t)+o:6===e?parseFloat(t)+c:parseFloat(t);var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));s.push(n?r:i[e])});break;case"a":a.forEach(function(t,e){var r=0;r=5===e?parseFloat(t)+u:6===e?parseFloat(t)+l:parseFloat(t);var n=f.checkValidOffsetDCmd(r,0,parseFloat(t),parseFloat(i[e]));s.push(n?r:i[e])});break;default:s.push(r)}if("z"===e.toLowerCase())return"break";v.push(e),b.push(s)},S=0;S<y.length;S++){if("break"===k(S))break}}()}else console.error("undefined d in dTrans!");return n}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},a=0;a<Object.keys(n).length|(r=Object.keys(n)[a]);a++){var i="object"===u(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,i)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],a=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,i=void 0;i=a.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,i.index)),n.push(i[0])}var s=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(s.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var c=[],u=null,f=!0;if(s.forEach(function(t){if(f)if("M"!==t.command){if(!u)return f=!1;if("m"!==t.command){var e=u,r=t.command===t.command.toLowerCase()?u.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(c.push([e,r]),u=r):f=!1}else u=u.map(function(e,r){return e+t.parameters[r]})}else u=t.parameters.slice(-2)}),f)return{type:"lines",data:c}}if(s.every(function(t){return"MmLlAaZz".includes(t.command)})&&s.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(s.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var a=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(a.cx)||isNaN(a.cy)||l.push({...a,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var a=t*r+e*n,i=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(a/i);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,a,i,o,s,c,u){var f,l,h,p,d,g=2*Math.PI;n<0&&(n=-n),a<0&&(a=-a);var v=Math.sin(i),y=Math.cos(i),m=(e-c)/2,b=(r-u)/2,k=(e+c)/2,S=(r+u)/2,A=y*m+v*b,T=y*b-v*m,w=A*A/(n*n)+T*T/(a*a);w>1&&(n*=Math.sqrt(w),a*=Math.sqrt(w));var x=n*a,_=n*T,M=a*A,E=_*_+M*M,O=Math.sqrt(Math.abs((x*x-E)/E));o==s&&(O=-O);var C=O*_/a,P=-O*M/n;f=y*C-v*P+k,l=v*C+y*P+S;var F=(A-C)/n,I=(A+C)/n,j=(T-P)/a,R=(T+P)/a;for(h=t.radian(1,0,F,j),p=t.radian(F,j,-I,-R);p>g;)p-=g;for(;p<0;)p+=g;for(0!=s&&0!=s||(p-=g),d=h+p;d>g;)d-=g;for(;d<0;)d+=g;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==s||1==s}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,a,i,o){i=i<0?i+2*Math.PI:i,n=0===n?0:n-1,a+=1;var s=(o=o<0||i>o?o+2*Math.PI:o)-i<=Math.PI?0:1,c=t.polarToCartesian(e,r,a,o),u=t.polarToCartesian(e,r,a,i),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,i),h=!1;return c.x===u.x&&c.y===u.y&&(u.y-=1,l.y-=1,h=!0),h?["M"+c.x,c.y,"A"+a,a,0,s,1,u.x,u.y,"M"+l.x,l.y,"A"+n,n,0,s,0,f.x,f.y+"Z"].join(","):["M"+c.x,c.y,"A"+a,a,0,s,0,u.x,u.y,"L"+l.x,l.y,"A"+n,n,0,s,1,f.x,f.y,"L"+c.x,c.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var a=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(a=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(a=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(a=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),a||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var i=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",i)}e.setAttribute("transX",r),e.setAttribute("transY",n)}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",a=0;a<300;a++){var i=e.getPointAtLength(r*a);n+=0===a?"M"+i.x+","+i.y:"L"+i.x+","+i.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,i=(0,a.parseSVG)(r),o=new n.PathMaker;return i.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new n.PathMaker(t);return r.uniform(),[e,r]}},{key:"pathToShape",value:function(t){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var e=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),r=t.match(e);if(r){var n=this.pathIsRect(r);console.log("path is rect: ",n)}}},{key:"pathIsRect",value:function(t){var e=0,r=0;if("z"===t[t.length-1].toLowerCase()&&t.splice(t.length-1,1),4!==t.length)return[!1,e,r];for(var n=t[0].substring(1).split(","),a="",i={x:0,y:0},o=1;o<t.length;o++){var s=t[o].substring(0,1),c=t[o].substring(1);if("v"!==s.toLowerCase()||"h"!==a&&""!==a)if("h"!==s.toLowerCase()||"v"!==a&&""!==a){if("l"===s.toLowerCase()){var u=0,f=0;if("L"===s){var l=c.split(",");u=parseFloat(l[0])-parseFloat(n[0])-i.x,f=parseFloat(l[1])-parseFloat(n[1])-i.y}else{var h=c.split(",");u=parseFloat(h[0]),f=parseFloat(h[1])}if(0!==u&&0!==f)return[!1,e,r];if(0===u){if("h"!==a&&""!==a)return[!1,e,r];a="v",i.y+=f+i.y}else{if("v"!==a&&""!==a)return[!1,e,r];a="h",i.x+=u+i.x}e=u,r=f}}else a="h",i.x="H"===s?parseFloat(c):parseFloat(c)+i.x,e="H"===s?parseFloat(c)-parseFloat(n[1]):parseFloat(c);else a="v",i.y="V"===s?parseFloat(c):parseFloat(c)+i.y,r="V"===s?parseFloat(c)-parseFloat(n[1]):parseFloat(c)}return 0!==i.x||0!==i.y?[!1,e,r]:[!0,Math.abs(e),Math.abs(r)]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var i=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",s=t.match(i);if(s){var c=s[0].substring(0,1),u="0",f="0";if("m"===c||"M"===c){var l=s[0].substring(1).split(",");u=l[0],f=l[1]}for(var h=0;h<s.length;h++){var p=s[h].substring(0,1),d=s[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,a,h,p,d,e,u,r);break;case"h":o=this.calNumTrans(o,a,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,a,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,a,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var g=d.split(","),v=0;v<g.length;v++)o=v%2==0?this.calNumTrans(o,a,h,p,g[v],e,u,r):this.calNumTrans(o,a,h,p,g[v],e,f,n),v!==g.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,a,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,a,h,p,b[k],e,parseFloat(u)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,a,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var S=d.split(","),A=0;A<S.length;A++)A===S.length-2?(o=this.calNumTrans(o,a,h,p,S[A],e,"1",0),o+=" "):A===S.length-1?o=this.calNumTrans(o,a,h,p,S[A],e,"1",0):o+=S[A]+" "}}}return o}},{key:"calNumTrans",value:function(t,e,r,n,a,i,o,s){if(n=n.toLowerCase(),i)if(void 0!==e.get(n)){for(var c=e.get(n),u=!1,f=0;f<c.length;f++)if(c[f].cmdIdx===r){t+=o,u=!0;break}u||(t+=a)}else t+=a;else a.length>0&&(t+=parseFloat(a)+s);return t}},{key:"calTransD",value:function(t,e,r,n,a){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var i="";if(0===r)i=t;else if(1===r)i=e;else for(var o=0,s=n.length;o<s;o++)i+=(0===o?"M":"L")+((a[o][0]-n[o][0])*r+n[o][0])+","+((a[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(i+="Z"),i}},{key:"arcTransition",value:function(t,e,r,n,a,i){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var s=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=s(t,e),r=s(t,r),n=s(r,n),n=s(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var c=i||function(t,e,r){return r*(e-t)+t};return[c(t,r,a),c(e,n,a)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var a=[],i=0;i<e.length;i++)void 0!==e[i]&&a.push(e[i].d?e[i].d:"m0,0");a.length>0&&t.compareD(a,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],a=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),i=1;i<t.length;i++)for(var o=t[i],s=(o=(o=o.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),u=0;u<a.length;u++)if(void 0===s[u]){var f=a[u].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=u,l.diffAttrIdxs=[];for(var h=a[u].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=s[u].substring(0,1),g=s[u].substring(1),v=a[u].substring(1);if(g!==v){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=u,y.diffAttrIdxs=[];for(var m=g.split(","),b=v.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var S=!1,A=0;A<e.get(d).length;A++)if(e.get(d)[A].cmdIdx===y.cmdIdx){S=!0,e.get(d)[A].diffAttrIdxs=[].concat(c(new Set([].concat(c(e.get(d)[A].diffAttrIdxs),c(y.diffAttrIdxs)))));break}S||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",a=0;a<e.length;a++)e[a].indexOf("translate")>=0?n=e[a]:e[a].indexOf("scale")>=0&&(r=e[a]);var i=["0","0"],o="1";return""!==n&&(i=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(i[0]),parseFloat(i[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=p,p.basicShapes=new Map([["rect",["x","y","width","height","rx","ry"]],["circle",["cx","cy","r"]]]),p.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var d=function(){function t(){f(this,t),this.chartWidth=0,this.chartHeight=0}return h(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=d;var g=function(){function t(){f(this,t)}return h(t,[{key:"construcor",value:function(t,e,r,n,a){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=a}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(c(Object.keys(t)),c(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var a=new RegExp(/[0-9\.,\s]/g);return t.d.replace(a,"")===e.d.replace(a,"")}return n.every(function(t){return r.indexOf(t)>=0})}}]),t}();e.AssetTemplate=g},function(t,e,r){var n=r(18),a=r(2),i=a["__core-js_shared__"]||(a["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),a=r(10),i=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[i])?e:a(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,a=r(48),i=(n=r(106))&&n.__esModule?n:{default:n},o=r(56);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return e&&c(t.prototype,e),r&&c(t,r),t}var f=function(){function t(e,r,n){s(this,t),this.id=e,this.type=r,this.source=n}return u(t,null,[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,a=0;a<t.length;a++){var i=t[a];if(void 0!==i.start&&void 0!==i.end){var o=parseInt(i.start),s=parseInt(i.end);if(s<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var c=i.source.split("/"),u=void 0===i.id?c[c.length-1]:i.id,f=o;f<=s;f++)r.push({id:u+f,source:i.source+f+".dsvg"})}else r.push(i)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var a=new Map;t.charts=[];for(var i=[],o=0,s=0,c=!1,u=0;u<e.length;u++)if(e[u].type===t.CHART_URL){var f=new XMLHttpRequest,l="file:"===document.location.protocol?0:200,p=void 0;if(f.open("GET",e[u].source,!1),f.overrideMimeType("text/html;charset=utf-8"),f.send(null),f.status===l){var d=document.createElement("div");d.innerHTML=f.responseText;var g=(p=d.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(g[2]),s=parseFloat(g[3]),t.charts.push(new h(p)),a.set(e[u].id,t.charts.length-1)}else 404===f.status&&(i.unshift(u),c=!0,n.info={type:"error",msg:"Can not find "+e[u].source+" ! Please check the url.",errSpec:'"source":"'+e[u].source.replace(/\s/g,"")+'"'})}else{var v=document.createElement("div");v.innerHTML=e[u].source;var y=v.children[0],m=y.getAttribute("viewBox").split(" ");o=parseFloat(m[2]),s=parseFloat(m[3]),t.charts.push(new h(y)),a.set(e[u].id,t.charts.length-1)}for(var b=0;b<i.length;b++)e.slice(i[b],1);return void 0!==r?t.facetViews(a,r):this.viewport.setViewport(o,s),c}},{key:"removeTransAndMerge",value:function(){for(var e=this,r=new Map,n=0;n<t.charts.length;n++)t.charts[n].svgContent.setAttribute("trans","0,0"),t.removeTransitions(t.charts[n].svgContent.children[0],n,r);console.log("charts after remove transition and added encoding",t.charts[0],t.charts[0].svgContent),Array.from(r).map(function(t){return t[1]}).forEach(function(t){t.forEach(function(r){e.marksWithSameDatum.set(r,t)})}),this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],a=0;a<r.views[0].frames.length;a++){for(var i=[],o=0;o<r.views.length;o++){var s=r.views[o].frames[a];void 0!==e.get(s)?i.push(t.charts[e.get(s)].svgContent.cloneNode(!0)):console.warn("chart name "+s+" is undefined !")}i.length===r.views.length&&n.push(i)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],s=0,c=0,u=s,f=c,l=0;l<n.length;l++){var p=n[l];s=parseFloat(p[0].getAttribute("width")),c=parseFloat(p[0].getAttribute("height")),u=s,f=c;var d=p[0].getAttribute("viewBox").split(" "),g=parseFloat(d[2]),v=parseFloat(d[3]),y=a.CanisUtil.getTransformAttrs(p[0].children[0]);switch(p[0].children[0].setAttribute("transform","translate("+y.transNums[0]+","+y.transNums[1]+")"),e){case i.default.facetType.row:f*=p.length,p[0].setAttribute("height",c*p.length),p[0].setAttribute("viewBox","0 0 "+g+" "+c*p.length);break;case i.default.facetType.col:u*=p.length,p[0].setAttribute("width",s*p.length),p[0].setAttribute("viewBox","0 0 "+s*p.length+" "+v)}for(var m=function(t){var r=p[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,u=0;u<o.length;u++){var f=o[u],l=a.CanisUtil.getTransformAttrs(f);switch(e){case i.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(c+20)*t)+") scale("+l.scaleNum+")");break;case i.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(s+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}p[0].children[0].appendChild(f)}},b=0;b<p.length;b++)m(b);o.push(new h(p[0]))}t.charts=o,this.viewport.setViewport(u,f)}},{key:"mergeCharts",value:function(){for(var e=this,r=new Set,n=new Map,i=new Map,o=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],s={},c=0;c<o.length;c++)s[o[c]]=null;for(var u=function(a){e.markSetsDuringTrans[a]={enter:[],update:[],exit:[]};var c=t.charts[a].svgContent;console.log("tmpChart: ",c);var u=c.querySelectorAll(".mark");u.length>0&&[].forEach.call(u,function(e){var c=e.getAttribute("id");r.add(c);for(var u={},f=0;f<o.length;f++)u[o[f]]="textContent"===o[f]?e.innerHTML:e.getAttribute(o[f]);void 0===n.get(c)&&n.set(c,new Array(t.charts.length).fill(s)),n.get(c)[a]=u,i.set(c,e.outerHTML)})},f=0;f<this.charts.length;f++)u(f);t.changedAttrs=[];var l=a.CanisUtil.deepClone(o);n.forEach(function(e,r){for(var n=0;n<l.length;n++){for(var a=!0,i=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){i=e[o];break}for(var s=0;s<e.length;s++)if(void 0!==e[s]&&e[s][l[n]]!==i[l[n]]){t.changedAttrs.push(l[n]),a=!1;break}a||l.splice(n,1)}});var h=new Map;t.changedAttrs.indexOf("d")>=0&&(h=a.CanisUtil.findDiffCmds(n)),console.log("changed attributes: ",t.changedAttrs),r=Array.from(r);var p=new Map;for(f=0;f<t.charts.length;f++)for(var d=0;d<r.length;d++)if(void 0===p.get(r[d])&&p.set(r[d],!1),0===t.charts[f].svgContent.querySelectorAll("#"+r[d]).length){p.get(r[d])&&(this.markSetsDuringTrans[f].exit.push(r[d]),p.set(r[d],!1));var g=i.get(r[d]),v=document.createElement("div");v.innerHTML=g;for(var y=v.children[0],m={},b=0;b<t.changedAttrs.length;b++)if("y"===t.changedAttrs[b]&&t.changedAttrs.indexOf("height")>=0){var k=(y.getAttribute("y")?parseFloat(y.getAttribute("y")):0)+(y.getAttribute("height")?parseFloat(y.getAttribute("height")):0);y.setAttribute("y",k),m.y=k}else if("d"===t.changedAttrs[b]){var S=void 0;y.getAttribute("d")&&(S=a.CanisUtil.setPathDValue(y.getAttribute("d"),!0,0,0,h)),y.setAttribute("d",S),m.d=S}else"textContent"===t.changedAttrs[b]?(y.innerHTML="",m.textContent=""):"fill"===t.changedAttrs[b]||"stroke"===t.changedAttrs[b]?(void 0===y.getAttribute(t.changedAttrs[b])&&y.setAttribute(t.changedAttrs[b],"#FFFFFF"),m[t.changedAttrs[b]]=y.getAttribute(t.changedAttrs[b])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[b])?"x2"===t.changedAttrs[b]?(y.setAttribute("x2",parseFloat(y.getAttribute("x1"))),m.x2=parseFloat(y.getAttribute("x1"))):"y2"===t.changedAttrs[b]?(y.setAttribute("y2",parseFloat(y.getAttribute("y1"))),m.y2=parseFloat(y.getAttribute("y1"))):m[t.changedAttrs[b]]=parseFloat(y.getAttribute(t.changedAttrs[b])):(y.setAttribute(t.changedAttrs[b],0),m[t.changedAttrs[b]]=0);g='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+y.outerHTML+"</svg>";var A=(new DOMParser).parseFromString(g,"image/svg+xml").lastChild.children[0];t.charts[f].svgContent.querySelector("#chartContent").appendChild(A),n.get(r[d])[f]=m}else p.get(r[d])?this.markSetsDuringTrans[f].update.push(r[d]):(this.markSetsDuringTrans[f].enter.push(r[d]),p.set(r[d],!0));console.log("mark sets between charts: ",t.markSetsDuringTrans),t.dataTrans=new Map;for(var T=0;T<r.length;T++){for(var w=n.get(r[T]),x=[],_=0;_<w.length;_++){for(var M={},E=0;E<t.changedAttrs.length;E++)["width","height","r"].includes(t.changedAttrs[E])?M[t.changedAttrs[E]]=100*w[_][t.changedAttrs[E]]/w[0][t.changedAttrs[E]]:M[t.changedAttrs[E]]=w[_][t.changedAttrs[E]];x.push(M)}t.dataTrans.set(r[T],x),t.charts[0].svgContent.querySelector("#"+r[T]).setAttribute("data-transition",JSON.stringify({dataTrans:x},null,"\t"))}return console.log("chart 0: ",t.charts[0]),t.charts[0].svgContent}},{key:"getBBoxes",value:function(){var t=document.getElementById("visChart").querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e,r,n){void 0!==e.style.fill&&e.style.fill&&(void 0!==e.getAttribute("fill")&&e.getAttribute("fill")||e.setAttribute("fill",e.style.fill),e.style.fill=null),void 0!==e.style.stroke&&e.style.stroke&&(void 0!==e.getAttribute("stroke")&&e.getAttribute("stroke")||e.setAttribute("stroke",e.style.stroke),e.style.stroke=null),void 0!==e.style.strokeWidth&&e.style.strokeWidth&&(void 0!==e.getAttribute("stroke-width")&&e.getAttribute("stroke-width")||e.setAttribute("stroke-width",e.style.strokeWidth),e.style.strokeWidth=null),"none"===e.getAttribute("stroke")&&e.setAttribute("stroke-width",0);var i=e.getAttribute("transform"),o=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var s=e.getAttribute("data-datum"),c=JSON.parse(s);Array.isArray(c)&&(c=c[0]);for(var u=e.getAttribute("class").split(" "),f="",l=0,h=u.length;l<h;l++)if("mark"===u[l]){f=u[l+1];break}c.mShape=f;var p=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(p=!0)});var d=e.getAttribute("id");if(p)this.nonDataMarkDatum.set(d,c);else{this.dataMarkDatum.set(d,c),t.charts[r].addMarkDatum(d,c);var g={};Object.keys(c).forEach(function(t){0!==t.indexOf("_")&&(g[t]=c[t])}),g.mShape="";var v=JSON.stringify(g);void 0===n.get(v)&&n.set(v,[]),n.get(v).push(d)}}if(e.classList.contains("axis")||e.classList.contains("legend")){console.log("datum: ",e.getAttribute("data-datum"));var y=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(y)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),y=y[0]),e.classList.contains("axis"))void 0===this.chartUnderstanding[y.position]&&(this.chartUnderstanding[y.position]=[]),this.chartUnderstanding[y.position].push("position"),void 0!==y.encoding?t.charts[r].addEncoding(y.encoding):console.error("there is no axis encoding!");else if(e.classList.contains("legend"))for(var m in y)void 0===this.chartUnderstanding[y[m]]&&(this.chartUnderstanding[y[m]]=[]),this.chartUnderstanding[y[m]].push(m)}if(i){i=(i=i.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var b="",k="",S=0;S<i.length;S++)i[S].indexOf("translate")>=0?k=i[S]:i[S].indexOf("scale")>=0&&(b=i[S]);var A=k.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",b),"g"===e.tagName?e.setAttribute("trans",parseFloat(A[0])+parseFloat(o[0])+","+(parseFloat(A[1])+parseFloat(o[1]))):a.CanisUtil.transShape(e,parseFloat(A[0])+parseFloat(o[0]),parseFloat(A[1])+parseFloat(o[1]))}else"g"===e.tagName?e.setAttribute("trans",o.join(",")):a.CanisUtil.transShape(e,parseFloat(o[0]),parseFloat(o[1]));if(e.children.length>0)for(var T=0;T<e.children.length;T++)t.removeTransitions(e.children[T],r,n)}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}]),t}();f.CHART_URL="url",f.CHART_CONTENT="content",f.charts=[],f.attrs=["id","source","start","end"],f.changedAttrs=[],f.viewport=new a.Viewport,f.dataTrans=new Map,f.markSetsDuringTrans=[],f.svgChart,f.chartUnderstanding={mShape:["shape"]},f.dataMarkDatum=new Map,f.marksWithSameDatum=new Map,f.nonDataMarkDatum=new Map;var l=f;e.default=l;var h=function(){function t(e){s(this,t),this.svgContent=e,this.scales=[],this.visualMappings=new Map,this.markDatum=new Map}return u(t,[{key:"addMarkDatum",value:function(t,e){this.markDatum.set(t,e)}},{key:"addEncoding",value:function(t){this.addScales(t.scale),this.addVisualMapping(t.visualChannel,t.attribute)}},{key:"addScales",value:function(t){void 0!==t?this.scales.push(t):console.error("undefined scale")}},{key:"addVisualMapping",value:function(t,e){void 0!==t&&void 0!==e?this.visualMappings.set(t,e):console.error("undefined viusal mapping ",t,e)}}]),t}();t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return a.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return s.PathMaker}}),e.MaskType=e.default=void 0;var n,a=r(145),i=(n=r(73))&&n.__esModule?n:{default:n},o=r(104),s=r(72);function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?a.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?a.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,i,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.Alpha;if(e instanceof a.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return i=t instanceof SVGGraphicsElement?a.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,i.root),i}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var i=e.root.layers.indexOf(r.root);if(i>0){var o=e.root.layers[i-1];0!=n&&t[n-1].root==o||t.splice(n,0,new a.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,i.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof a.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof a.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new a.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&c(e.prototype,r),n&&c(e,n),t}();e.default=f,e.MaskType=u,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(u||(e.MaskType=u={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var a={jsMovin:new(((n=r(55))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=a},function(t,e,r){var n=r(15),a=r(6),i=r(35);t.exports=function(t){return function(e,r,o){var s,c=n(e),u=a(c.length),f=i(o,u);if(t&&r!=r){for(;u>f;)if((s=c[f++])!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),a=r(24);t.exports=function(t){return function(e,r){var i,o,s=String(a(e)),c=n(r),u=s.length;return c<0||c>=u?t?"":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?t?s.charAt(c):i:t?s.slice(c,c+2):o-56320+(i-55296<<10)+65536}}},function(t,e,r){var n=r(4),a=r(20),i=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==a(t))}},function(t,e,r){var n=r(5)("iterator"),a=!1;try{var i=[7][n]();i.return=function(){a=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!a)return!1;var r=!1;try{var i=[7],o=i[n]();o.next=function(){return{done:r=!0}},i[n]=function(){return o},t(i)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),a=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var i=r.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return a.call(t,e)}},function(t,e,r){"use strict";r(127);var n=r(12),a=r(11),i=r(3),o=r(24),s=r(5),c=r(97),u=s("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),p=!i(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!i(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[u]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var g=/./[h],v=r(o,h,""[t],function(t,e,r,n,a){return e.exec===c?p&&!a?{done:!0,value:g.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=v[0],m=v[1];n(String.prototype,t,y),a(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),a=r(0),i=r(12),o=r(41),s=r(30),c=r(40),u=r(39),f=r(4),l=r(3),h=r(62),p=r(43),d=r(83);t.exports=function(t,e,r,g,v,y){var m=n[t],b=m,k=v?"set":"add",S=b&&b.prototype,A={},T=function(t){var e=S[t];i(S,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||S.forEach&&!l(function(){(new b).entries().next()}))){var w=new b,x=w[k](y?{}:-0,1)!=w,_=l(function(){w.has(1)}),M=h(function(t){new b(t)}),E=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});M||((b=e(function(e,r){u(e,b,t);var n=d(new m,e,b);return null!=r&&c(r,v,n[k],n),n})).prototype=S,S.constructor=b),(_||E)&&(T("delete"),T("has"),v&&T("get")),(E||x)&&T(k),y&&S.clear&&delete S.clear}else b=g.getConstructor(e,t,v,k),o(b.prototype,r),s.NEED=!0;return p(b,t),A[t]=b,a(a.G+a.W+a.F*(b!=m),A),y||g.setStrong(b,t,v),b}},function(t,e,r){for(var n,a=r(2),i=r(11),o=r(33),s=o("typed_array"),c=o("view"),u=!(!a.ArrayBuffer||!a.DataView),f=u,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=a[h[l++]])?(i(n.prototype,s,!0),i(n.prototype,c,!0)):f=!1;t.exports={ABV:u,CONSTR:f,TYPED:s,VIEW:c}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),a=r(10),i=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,s,c=arguments[1];return a(this),(e=void 0!==c)&&a(c),null==t?new this:(r=[],e?(n=0,s=i(c,arguments[2],2),o(t,!1,function(t){r.push(s(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(54)),a=l(r(75)),i=l(r(107)),o=l(r(47)),s=r(48),c=r(56),u=r(74),f=r(55);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function v(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=v(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._id,t.chartIdx,t.selector,t._align=e.alignTarget.object,t.grouping=new i.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t.leaves=[],t.marksInOrder=[],t.anisAligned=[],t.alignOnData=!1,t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms",this.allMarkAni.forEach(function(t,r){for(var n,a=0;a<t.actionAttrs.length|(n=t.actionAttrs[a]);a++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)})}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;console.log("going to map to lottie spec: ",this.allMarkAni),this.allMarkAni.forEach(function(r,n){for(var i=function(i){var l=r.actionAttrs[i];if(l.duration>0){var h=document.getElementById(n);if(l.type===a.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),g=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===a.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,u.getBoundingBox)(h);c.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),c.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&c.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var i=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,v=0;v<t.to.length;v++)if(t.to[v][0]===n){o=t.from[v][1],f=t.to[v][1];break}i.forEach(function(t){if("shape"===t){var e,r,i=p(s.CanisUtil.transDToLottieSpec(o),2);e=i[0],o=i[1];var u=p(s.CanisUtil.transDToLottieSpec(f),2);r=u[0],f=u[1],c.globalVar.markLayers.get(n).setAnimatableProperty("x",d,g,e[0],r[0],a.default.transToLottieAction(l.easing)),c.globalVar.markLayers.get(n).setAnimatableProperty("y",d,g,e[1],r[1],a.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=s.CanisUtil.toLottieRGBA(o),f=s.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);c.globalVar.markLayers.get(n).setAnimatableProperty(t,d,g,o,f,a.default.transToLottieAction(l.easing))})}else i.forEach(function(e){c.globalVar.markLayers.get(n).setAnimatableProperty(e,d,g,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))})}else c.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,g,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))})}else if(l.type===a.default.actionTargets.mask){var v,y=(0,u.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case a.default.targetAnimationType.wipe:case a.default.targetAnimationType.move:case a.default.targetAnimationType.appear:v=f.LayerFactory.boundingBox(h);break;case a.default.targetAnimationType.circle:(v=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),v.setStaticProperty("anchorY",y[3]/2);break;case a.default.targetAnimationType.wheel:var b=s.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],S=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];v=f.LayerFactory.ellipse(k,S,m,m);var A=t.finalStatus.get(n)[l.chartIdx].startAngle,T=t.finalStatus.get(n)[l.chartIdx].endAngle;v.setStaticProperty("trimOffset",-A/Math.PI/2*360-90),l.attribute[0].to=1-(T-A)%(2*Math.PI)/(2*Math.PI),v.setStaticProperty("strokeWidth",2*m),v.setStaticProperty("fillOpacity",0)}var w=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),x=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){v.setAnimatableProperty(t.attrName,w,x,100*t.from,100*t.to,a.default.transToLottieAction(l.easing))}),c.globalVar.jsMovin.addMask(v,c.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)i(l)})}},{key:"transAlign",value:function(t){switch(t){case this.alignTarget.withEle:return"withEle";case this.alignTarget.withObj:return"withObj"}}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.allMarkAniTrans.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear(),e.aniIdx=0}}],(l=[{key:"replaceConstants",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.replaceOffsetConst(t,e),"undefined"!==this.grouping&&this.grouping.replaceDelayConst(t,e),this.actions.forEach(function(r){r.replaceOffsetConst(t,e),r.replaceDurationConst(t,e)})}},{key:"translate",value:function(t,e,r,n){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.id=t.id,this.reference=t.reference,this.offset=t.offset,this.align=t.align,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var s,c=[[]],u=0;u<t.effects.length|(s=t.effects[u]);u++)s.reference===o.default.timingRef.previousStart||void 0===s.reference?c[c.length-1].push(u):c.push([u]);console.log("action index to merge: ",c);var f=[],l=[a.default.actionTypes.translateX,a.default.actionTypes.translateY,a.default.actionTypes.translateXY,a.default.actionTypes.scaleX,a.default.actionTypes.scaleY,a.default.actionTypes.scaleXY,a.default.actionTypes.dataChange];c.forEach(function(e){var r={},n=!1,i=0,o=[!1,!1,!1,!1,!1];e.forEach(function(e){var s=t.effects[e];l.includes(s.type)?(n=!0,i++,Object.keys(s).forEach(function(t){r[t]=s[t]}),o[0]=s.type===a.default.actionTypes.translateX||s.type===a.default.actionTypes.translateXY||o[0],o[1]=s.type===a.default.actionTypes.translateY||s.type===a.default.actionTypes.translateXY||o[1],o[2]=s.type===a.default.actionTypes.scaleX||s.type===a.default.actionTypes.scaleXY||o[2],o[3]=s.type===a.default.actionTypes.scaleY||s.type===a.default.actionTypes.scaleXY||o[3],o[4]=s.type===a.default.actionTypes.dataChange||o[4]):f.push(s)}),n&&(i>1&&(r.type=a.default.actionTypes.mergedTransition,r.mergeType=o),f.push(r))}),console.log("merged actions: ",f);for(var h,p=[!1,!1,!1],d=0;d<f.length|(h=f[d]);d++){h.type===a.default.actionTypes.scaleX||h.type===a.default.actionTypes.scaleXY?p[0]=!0:h.type===a.default.actionTypes.scaleY||h.type===a.default.actionTypes.scaleXY?p[1]=!0:h.type===a.default.actionTypes.dataChange?p[2]=!0:void 0!==h.mergeType&&(p[0]=p[0]||h.mergeType[2],p[1]=p[1]||h.mergeType[3],p[2]=p[2]||h.mergeType[4]),h.chartIdx=t.chartIdx;var g=a.default.transToVisualAttrAction(h,p,t.chartIdx,e,n,i);console.log("translated visual action: ",g);for(var v,y=0;y<g.length|(v=g[y]);y++){var m=new a.default;m.initAction(v),this.actions.push(m)}}}}},{key:"calAniTime",value:function(t){var r,n=this,i=!1;void 0!==this.align&&e.animations.forEach(function(t,a){n.align.target===t.id&&(r=t,n.align.type===e.alignTarget.withEle&&(i=!0,n._grouping=t.grouping))}),void 0!==r&&r.anisAligned.push("".concat(this.chartIdx,"_").concat(this.selector));for(var o,c=this,u=new Map,f=0;f<t.length|(o=t[f]);f++){for(var l,g=new Map,v=0;v<this.actions.length|(l=this.actions[v]);v++)if("object"===d(l.duration)){var y=e.domMarks.get(o)["data-datum"],m=parseFloat(y[l.duration.field]),b=void 0===l.duration.minDuration?300:l.duration.minDuration;g.set(l.duration.field,[m,b])}u.set(o,g)}var k=p(a.default.calActionDuration(this.actions,u,e.domMarks),3),S=k[0],A=k[1],T=k[2],w=[],x=[];if(i){var _=p(this._grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,i),2);w=_[0],x=_[1]}else{var M=p(this.grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,i),2);w=M[0],x=M[1]}i&&(this.root.children=x),this.marksInOrder=w,this.leaves=x;for(var E,O=new Map,C=0;C<this.marksInOrder.length|(E=this.marksInOrder[C]);C++){for(var P,F={},I=0;I<e.visualAttrs.length|(P=e.visualAttrs[I]);I++)if(void 0===e.domMarks.get(E)[P])switch(P){case"opacity":F[P]=1;break;case"width":F[P]=e.domMarks.get(E).bbWidth;break;case"height":F[P]=e.domMarks.get(E).bbHeight;break;case"x":F[P]=e.domMarks.get(E).bbX;break;case"y":F[P]=e.domMarks.get(E).bbY;break;case"cx":void 0!==e.domMarks.get(E).cx?F[P]=e.domMarks.get(E).cx:F[P]=e.domMarks.get(E).bbX+e.domMarks.get(E).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(E).cy?F[P]=e.domMarks.get(E).cy:F[P]=e.domMarks.get(E).bbY+e.domMarks.get(E).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(E).innerRadius?F[P]=e.domMarks.get(E).innerRadius:F[P]=0;break;case"outterRadius":void 0!==e.domMarks.get(E).outterRadius?F[P]=e.domMarks.get(E).outterRadius:F[P]=Math.sqrt(Math.pow(e.domMarks.get(E).bbWidth/2,2)+Math.pow(e.domMarks.get(E).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(E).startAngle?F[P]=e.domMarks.get(E).startAngle:F[P]=0;break;case"endAngle":void 0!==e.domMarks.get(E).endAngle?F[P]=e.domMarks.get(E).endAngle:F[P]=2*Math.PI}else F[P]=e.domMarks.get(E)[P];void 0===e.finalStatus.get(E)&&e.finalStatus.set(E,[]),e.finalStatus.get(E).push(F),O.set(E,{startTime:0,totalDuration:S.get(E),actionAttrs:[]})}var j=new Map;if(void 0!==this.align)switch(this.align.type){case e.alignTarget.withEle:j=this.calTimeAsEle(O,r);break;case e.alignTarget.withObj:j=this.calTimeAsObj(O,r)}else j=this.calTimeAsObj(O,r);O.forEach(function(t,r){var n={startTime:t.startTime+j.get(r),totalDuration:t.totalDuration,actionAttrs:[]};c.updateAniStartAndEndTime(n);for(var i,o=0;o<T.length|(i=T[o]);o++){for(var u,f=new a.default,l=Object.keys(i),h=0;h<l.length|(u=l[h]);h++)if(f[u]=i[u],"_duration"===u&&"object"===d(i[u])){var p=e.domMarks.get(r)["data-datum"],g=A.get(i[u].field);f[u]=i[u].minDuration*parseFloat(p[i[u].field])/g}else"offsetStart"===u&&(f[u]=i[u].get(r));f.animationType===a.default.targetAnimationType.custom?s.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}O.set(r,n)}),O.forEach(function(t,r){for(var n=0,a=0;a<t.actionAttrs.length;a++)t.actionAttrs[a].startTime=t.startTime+t.actionAttrs[a].offsetStart,t.actionAttrs[a].startTime+t.actionAttrs[a].duration>n&&(n=t.actionAttrs[a].startTime+t.actionAttrs[a].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var i=e.allMarkAni.get(r).startTime,o=i+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=i<t.startTime?i:t.startTime;var s=t.startTime+t.totalDuration;o=o>s?o:s,e.allMarkAni.get(r).totalDuration=o-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}})}},{key:"calTimeAsEle",value:function(t,r){var a=this,i=this;this.root.align=this.align,r.leaves.forEach(function(t){var r=t.marks;t.leafStart=1e5,t.leafEnd=0,r.forEach(function(r){var n=e.allMarkAni.get(r);n.startTime<t.leafStart&&(t.leafStart=n.startTime),n.startTime+n.totalDuration>t.leafEnd&&(t.leafEnd=n.startTime+n.totalDuration)})});var o=new Map;if(r.leaves.forEach(function(t,e){var r=[];t.marks.forEach(function(t){var e;void 0!==n.default.marksWithSameDatum.get(t)&&(e=r).push.apply(e,h(n.default.marksWithSameDatum.get(t)))}),r=[].concat(h(new Set(r)));for(var a,c=0,u=i.leaves.length;c<u|(a=i.leaves[c]);c++)void 0===o.get(c)&&o.set(c,[]),s.CanisUtil.arrIsContained(r,a.marks)&&(o.get(c).push(e),i.alignOnData=!0)}),this.alignOnData){var c=this.leaves.length,u=0,f=function(e){var n=r.leaves[o.get(e)[0]],i=a.leaves[e-1],s=a.leaves[e],c="",f="";void 0!==s?(f=s.id,void 0===n?void 0!==i&&(i.leafStart=1e5,i.leafEnd=0,i.marks.forEach(function(e){var r=t.get(e);r.startTime<i.leafStart&&(i.leafStart=r.startTime),r.startTime+r.totalDuration>i.leafEnd&&(i.leafEnd=r.startTime+r.totalDuration)}),u=a.calOfstTimeForLastAni(s,i,t)):(s.alignTo=n.id,void 0===n.alignWithLeaves&&(n.alignWithLeaves=[]),n.alignWithLeaves.push(s),c=n.id,u=a.calOfstTimeForLastAni(s,n,t))):u=0;var l="".concat(a.chartIdx,"_").concat(a.selector);a.updateLastAnimationTiming(r,n,u,c,f,l)};for(g=0;g<c;g++)f(g)}else for(var l=this.leaves.length>r.leaves.length?this.leaves.length:r.leaves.length,p=0,d=function(n){var i=r.leaves[n],o=a.leaves[n-1],s=a.leaves[n],c="",u="";void 0!==s?(u=s.id,void 0===i?void 0!==o&&(o.leafStart=1e5,o.leafEnd=0,o.marks.forEach(function(t){var r=e.allMarkAni.get(t);r.startTime<o.leafStart&&(o.leafStart=r.startTime),r.startTime+r.totalDuration>o.leafEnd&&(o.leafEnd=r.startTime+r.totalDuration)}),p=a.calOfstTimeForLastAni(s,o,t)):(s.alignTo=i.id,void 0===i.alignWithLeaves&&(i.alignWithLeaves=[]),i.alignWithLeaves.push(s),c=i.id,p=a.calOfstTimeForLastAni(s,i,t))):p=0;var f="".concat(a.chartIdx,"_").concat(a.selector);a.updateLastAnimationTiming(r,i,p,c,u,f)},g=0;g<l;g++)d(g);return this.calAniOffset(t,void 0,e.alignTarget.withEle)}},{key:"calOfstTimeForLastAni",value:function(t,r,n){var a=0;t.start=1e6,t.end=0;var i=0;switch(this.reference){case o.default.timingRef.previousStart:return i=r.leafStart,t.marks.forEach(function(e){var o=n.get(e).totalDuration;n.get(e).startTime=i,i+o-r.leafEnd>a&&(a=i+o-r.leafEnd),i<t.start&&(t.start=i),i+o>t.end&&(t.end=i+o)}),a;case o.default.timingRef.previousEnd:return i=r.leafEnd,r.alignWithLeaves.forEach(function(t){void 0!==t.leafEnd?t.leafEnd>i&&(i=t.leafEnd):t.marks.forEach(function(t){if(void 0!==e.allMarkAni.get(t)){var r=e.allMarkAni.get(t).startTime+e.allMarkAni.get(t).totalDuration;r>i&&(i=r)}})}),t.marks.forEach(function(e){var r=n.get(e).totalDuration;n.get(e).startTime=i,i+r>a&&(a=r),i<t.start&&(t.start=i),i+r>t.end&&(t.end=i+r)}),a}}},{key:"updateLastAnimationTiming",value:function(t,r,n,a,i,o){var s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6];if(""!==a&&t.leaves.forEach(function(t){t.id===a&&(void 0===t.alignWith&&(t.alignWith=[]),t.alignWith.push(o),void 0===t.alignWithIds&&(t.alignWithIds=[]),t.alignWithIds.push(i))}),void 0!==r){var c,u=this;t.leaves.forEach(function(a){var i=r.leafStart;if(void 0===i&&(i=1e7,r.marks.forEach(function(t){e.allMarkAni.get(t).startTime<i&&(i=e.allMarkAni.get(t).startTime)})),void 0!==a.leafStart){if(a.leafStart>i){var o=1e5;a.marks.forEach(function(r){e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime<o&&(o=e.allMarkAni.get(r).startTime),e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>a.leafEnd&&(a.leafEnd=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),a.leafEnd>t.animationEndTime&&(t.animationEndTime=a.leafEnd),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n})}),a.leafStart=o}}else a.marks.forEach(function(r){e.allMarkAni.get(r).startTime>i&&(e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>t.animationEndTime&&(t.animationEndTime=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n}))})}),t.anisAligned.length>0&&t.anisAligned.forEach(function(t){if(t!=="".concat(u.chartIdx,"_").concat(u.selector)){for(var a,i=e.animations.get(t),o=0,s=r.alignWithLeaves.length;o<s;o++){for(var c=r.alignWithLeaves[o],f=0,l=i.leaves.length;f<l;f++)if(c.id===i.leaves[f].id){a=c;break}if(void 0!==a)break}u.updateLastAnimationTiming(i,a,n,"","","",!1)}}),void 0!==t.align&&s&&t.align.type===e.alignTarget.withEle&&(e.animations.forEach(function(e,r){t.align.target===e.id&&(c=e)}),u.updateLastAnimationTiming(c,r,n,"","",""))}}},{key:"calTimeAsObj",value:function(t,r){return this.grouping.calTimeWithTree(this.root,-1,-1,t),this.root.timingRef=this.reference,this.root.offset=this.offset,this.root.align=this.align,this.root.aniId=this.id,this.calAniOffset(t,r,e.alignTarget.withObj)}},{key:"calAniOffset",value:function(t,r,n){var a=1e4;return t.forEach(function(t,e){t.startTime<a&&(a=t.startTime)}),n===e.alignTarget.withEle?this.calELeOffsetTime(e.domMarks):void 0===r?this.calOffsetTime(0,0,a,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,a,e.domMarks)}},{key:"updateAniStartAndEndTime",value:function(t){t.startTime<this.animationStartTime&&(this.animationStartTime=t.startTime),t.startTime+t.totalDuration>this.animationEndTime&&(this.animationEndTime=t.startTime+t.totalDuration)}},{key:"id",set:function(t){void 0===this._id&&(void 0!==t?this._id=t:(this._id="ani"+e.aniIdx,e.aniIdx++))},get:function(){return this._id}},{key:"align",set:function(t){void 0!==t&&"object"===d(t)&&(this._align=t)},get:function(){return this._align}}])&&g(r.prototype,l),m&&g(r,m),e}();m.FIRST_ANI_ID="ani0",m.aniIdx=0,m.alignTarget={withEle:"element",withObj:"object"},m.alignAttrs=["target","type"],m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.markClass=new Map,m.allMarks=[],m.attrs=["id","selector","grouping","effects","offset","reference","align"],m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map,m.allMarkAniTrans=new Map;var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(105);function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,s;return e=t,s=[{key:"a2c",value:function(t,e,r,n,a,i,o,s,c,u){var f,l=120*Math.PI/180,h=Math.PI/180*(+a||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,s,c,s,c];if(u)T=u[0],w=u[1],S=u[2],A=u[3];else{t=(f=d(t,e,-h)).x,e=f.y,s=(f=d(s,c,-h)).x,c=f.y,Math.cos(Math.PI/180*a),Math.sin(Math.PI/180*a);var g=(t-s)/2,v=(e-c)/2,y=g*g/(r*r)+v*v/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(i==o?-1:1)*Math.sqrt(Math.abs((m*b-m*v*v-b*g*g)/(m*v*v+b*g*g))),S=k*r*v/n+(t+s)/2,A=k*-n*g/r+(e+c)/2,T=Math.asin((e-A)/n),w=Math.asin((c-A)/n);T=t<S?Math.PI-T:T,w=s<S?Math.PI-w:w,T<0&&(T=2*Math.PI+T),w<0&&(w=2*Math.PI+w),o&&T>w&&(T-=2*Math.PI),!o&&w>T&&(w-=2*Math.PI)}var x=w-T;if(Math.abs(x)>l){var _=w,M=s,E=c;w=T+l*(o&&w>T?1:-1),s=S+r*Math.cos(w),c=A+n*Math.sin(w),p=this.a2c(s,c,r,n,a,0,o,M,E,[w,_,S,A])}x=w-T;var O=Math.cos(T),C=Math.sin(T),P=Math.cos(w),F=Math.sin(w),I=Math.tan(x/4),j=4/3*r*I,R=4/3*n*I,L=[t,e],N=[t+j*C,e-R*O],D=[s+j*F,c-R*P],V=[s,c];if(N[0]=2*L[0]-N[0],N[1]=2*L[1]-N[1],u)return[N,D,V].concat(p);for(var G=[],B=0,Y=(p=[N,D,V].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;B<Y;B++)G[B]=B%2?d(p[B-1],p[B],h).y:d(p[B],p[B+1],h).x;return G}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var a=3*(n-3*r+3*e-t),i=6*(r-2*e+t),o=3*(e-t),s=1/0,c=-1/0;if(i*i-4*a*o>=0){var u=Math.sqrt(i*i-4*a*o);[1,-1].map(function(t){return(t*u-i)/2/a}).forEach(function(a){if(a>0&&a<1){var i=Math.pow(1-a,3)*t+3*Math.pow(1-a,2)*a*e+3*(1-a)*a*a*r+Math.pow(a,3)*n;s=Math.min(s,i),c=Math.max(c,i)}})}return s=Math.min(s,t,n),c=Math.max(c,t,n),[s,c]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,a){n>=a.length-1||r.push(t*(1-e)+a[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var a=this.calculateHighlyOrder(r,t),i=this.calculateHighlyOrder(a,t),o=this.calculateHighlyOrder(i,t);return[a[0],i[0],o[0],i[1],a[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,a(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,i,o){this.path.i.push([r-i,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([i,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,t,r,i)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(i,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,a,i){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+a,this.currentY+i)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,i,o,s,c){for(var u=t.a2c(this.currentX,this.currentY,e,r,n,i,o,s,c);u.length>=6;){var f=u.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(a(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(a(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,a,i,o){this.arcTo(t,e,r,n,a,this.currentX+i,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,a(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,a(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,i,o){if(i<=0)return r.v.push(n),void r.i.push(e.path.i[i]);for(var s=e.path.o,c=e.path.i,u=[o[i-1][0],s[i-1][0]+o[i-1][0],c[i][0]+n[0],n[0]],f=[o[i-1][1],s[i-1][1]+o[i-1][1],c[i][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(a(u))),d=e.calculateBezierSplit.apply(e,[h].concat(a(f))),g=u[0],v=p.shift()-g,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,S=d[1],A=d.shift()-S;r.o.push([v,k]),r.i.push([m,A]),r.v.push([y,S]),u=p,f=d}var T=u.shift(),w=u.shift()-T,x=u[1],_=u.shift()-x,M=f.shift(),E=f.shift()-M,O=f[1],C=f.shift()-O;r.o.push([w,E]),r.i.push([_,C]),r.v.push([x,O])}),this.path=r,this.uniform()}}}])&&i(e.prototype,r),s&&i(e,s),t}();e.PathMaker=s},function(t,e,r){var n=r(148),a=r(149);t.exports=function(t,e,r){var i=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var s=0;s<16;++s)e[i+s]=o[s];return e||a(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function a(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),a=t.getBBox();return[r.e+a.x,r.f+a.y,a.width+1,a.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=a,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/a(t,e)):0}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_ChartSpec=_interopRequireDefault(__webpack_require__(54)),_GlobalVar=__webpack_require__(56),_jsmovin=__webpack_require__(55),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ActionSpec=function(_TimingSpec){function ActionSpec(){var t;return _classCallCheck(this,ActionSpec),(t=_possibleConstructorReturn(this,(ActionSpec.__proto__||Object.getPrototypeOf(ActionSpec)).call(this))).chartIdx=0,t._extend="",t._type=ActionSpec.actionTypes.appear,t.animationType="",t._easing=ActionSpec.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t.oriActionType,t}return _inherits(ActionSpec,_TimingSpec),_createClass(ActionSpec,[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?_jsmovin.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.delay,this.duration=t.duration,this.easing=t.easing,this.oriActionType=t.oriActionType,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"replaceDurationConst",value:function replaceDurationConst(constants){var _this3=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.duration?void 0===constants.get(this.duration)?0===this.duration.indexOf("calc")?(this.duration=this.duration.substring(0,this.duration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.includes(e)&&("number"==typeof t?_this3.duration=_this3.duration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+_this3.duration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration,constants)?this.duration=eval(this.duration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration)?this.duration=constants.get(this.duration):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:this.duration&&"object"===_typeof(this.duration)&&"string"==typeof this.duration.minDuration&&(void 0===constants.get(this.duration.minDuration)?0===this.duration.minDuration.indexOf("calc")?(this.duration.minDuration=this.duration.minDuration.substring(0,this.duration.minDuration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.minDuration.includes(e)&&("number"==typeof t?_this3.duration.minDuration=_this3.duration.minDuration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+_this3.duration.minDuration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration.minDuration,constants)?this.duration.minDuration=eval(this.duration.minDuration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration.minDuration)?this.duration.minDuration=constants.get(this.duration.minDuration):status.info={type:"error",msg:"MinDuration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(ActionSpec.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(ActionSpec.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){"number"==typeof t?this._duration=Math.floor(t/(1e3/_TimingSpec2.default.FRAME_RATE))*(1e3/_TimingSpec2.default.FRAME_RATE):"string"!=typeof t&&"object"!==_typeof(t)||(this._duration=t)},get:function(){return this._duration}}],[{key:"assignActionTmpls",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.actionTmpls.clear(),t.forEach(function(t){t.name&&void 0!==t.name||(t.name=""),e.actionTmpls.set(t.name,t)}),this.actionTmpls.forEach(function(t,n){var a=t.extend;if(a&&void 0!==a){var i=e.actionTmpls.get(a);void 0!==i?(Object.keys(i).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=i[e])}),delete t.extend,e.actionTmpls.set(n,t)):r.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+a+'"'}}})}},{key:"replaceActionTmpls",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t.extend&&void 0!==t.extend){var r=this.actionTmpls.get(t.extend);return void 0!==r?(Object.keys(r).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=r[e])}),delete t.extend,t):(e.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+t.extend+'"'},t)}return t}},{key:"transToVisualAttrAction",value:function(t,e,r,n,a){arguments.length>5&&void 0!==arguments[5]&&arguments[5];console.log("going to change action into visual attribute changes: ",t,e,r,a);var i=[];if((t=this.replaceActionTmpls(t)).type!==ActionSpec.actionTypes.transition){var o={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?_TimingSpec2.default.FRAME_RATE:t.duration,type:ActionSpec.actionTargets.mask,oriActionType:t.type};switch(t.type){case ActionSpec.actionTypes.appear:o.duration=1e3/_TimingSpec2.default.FRAME_RATE,o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.disappear:o.duration=1e3/_TimingSpec2.default.FRAME_RATE,o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.fade:o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.fadeOut:o.animationType=ActionSpec.targetAnimationType.fade,o.type=ActionSpec.actionTargets.mark,o.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.grow:o.type=ActionSpec.actionTargets.mark,o.animationType=ActionSpec.targetAnimationType.grow,o.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.degrow:o.type=ActionSpec.actionTargets.mark,o.animationType=ActionSpec.targetAnimationType.grow,o.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wipeBottom:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleY",from:.5,to:0}];break;case ActionSpec.actionTypes.wipeOutFromTop:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeTop:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromBottom:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wipeLeft:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromRight:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeRight:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeOutFromLeft:o.animationType=ActionSpec.targetAnimationType.wipe,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.circle:o.animationType=ActionSpec.targetAnimationType.circle,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.circleOut:o.animationType=ActionSpec.targetAnimationType.circle,o.maskType=_jsmovin.MaskType.Alpha,o.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wheel:o.animationType=ActionSpec.targetAnimationType.wheel,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wheelOut:o.animationType=ActionSpec.targetAnimationType.wheel,o.maskType=_jsmovin.MaskType.InvertAlpha,o.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.translateX:case ActionSpec.actionTypes.translateY:case ActionSpec.actionTypes.translateXY:case ActionSpec.actionTypes.scaleX:case ActionSpec.actionTypes.scaleY:case ActionSpec.actionTypes.scaleXY:case ActionSpec.actionTypes.dataChange:case ActionSpec.actionTypes.mergedTransition:console.log("test transition: ",_ChartSpec.default.dataTrans,r),o.animationType=ActionSpec.targetAnimationType.custom,o.type=ActionSpec.actionTargets.mark;var s=[],c=[];_ChartSpec.default.dataTrans.forEach(function(n,i){if(r<n.length&&a.includes(i)){var o=n[r-1].d,u=n[r].d;console.log("calculating dtrans: ",i);var f=_Util.CanisUtil.dTrans(r,i,o,u,e,t);"mark1"===i&&(console.log("trans from",o),console.log("trans to",u),console.log("transed",f)),s.push([i,o]),c.push([i,f]),n[r-1].d=f,_ChartSpec.default.dataTrans.set(i,n)}}),console.log("translated ",_ChartSpec.default.dataTrans),o.attribute=[{attrName:"d",from:s,to:c}]}i.push(o)}return console.log("action json in attributes: ",i),i}},{key:"calActionDuration",value:function(t,e,r){for(var n=0,a=-1e5,i=0,o=0,s=!1,c=function(e){var c=void 0,u=new Map;c=t[e].calOffsetTime(i,o,0,r),e>0&&t[e-1].animationType===ActionSpec.targetAnimationType.mistake&&c.forEach(function(r,n){c.set(n,r-t[e-1].offset)});var f=1e6,l=-1e5;t[e].offsetStart=new Map,c.forEach(function(r,i){var o=0;"object"===_typeof(t[e].duration)?(s=!0,o=r):"number"==typeof t[e].duration&&(o=r+t[e].duration),u.set(i,o),t[e].offsetStart.set(i,r),r<f&&(f=r),o>l&&(l=o),r<n&&(n=r),o>a&&(a=o)}),i=f,o=l},u=0;u<t.length;u++)c(u);var f=a-n,l=new Map,h=new Map;return s?(e.forEach(function(t,e){t.forEach(function(t,e){(void 0===h.get(e)||t[0]<h.get(e))&&h.set(e,t[0])})}),e.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=h.get(e);r+=t[1]*t[0]/n}),l.set(e,f+r)})):e.forEach(function(t,e){l.set(e,f)}),[l,h,t]}},{key:"transToLottieAction",value:function(t){switch(t){case ActionSpec.easingType.easeLinear:return _jsmovin.EasingFactory.linear();case ActionSpec.easingType.easeInQuad:return _jsmovin.EasingFactory.easeInQuad();case ActionSpec.easingType.easeOutQuad:return _jsmovin.EasingFactory.easeOutQuad();case ActionSpec.easingType.easeInOutQuad:return _jsmovin.EasingFactory.easeInOutQuad();case ActionSpec.easingType.easeInCubic:return _jsmovin.EasingFactory.easeInCubic();case ActionSpec.easingType.easeOutCubic:return _jsmovin.EasingFactory.easeOutCubic();case ActionSpec.easingType.easeInOutCubic:return _jsmovin.EasingFactory.easeInOutCubic()}}}]),ActionSpec}(_TimingSpec2.default);ActionSpec.actionTmpls=new Map,ActionSpec.attrs=["extend","type","offset","reference","easing","duration"],ActionSpec.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",test:"test",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",translateX:"translate X",translateY:"translate Y",translateXY:"translate XY",scaleX:"scale X",scaleY:"scale Y",scaleXY:"scale XY",dataChange:"data change",text:"text",mergedTransition:"merge transition",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},ActionSpec.actionTargets={mark:"mark",mask:"mask"},ActionSpec.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",test:"test",grow:"grow",custom:"custom",mistake:"mistake"},ActionSpec.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var _default=ActionSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){var n=r(4),a=r(2).document,i=n(a)&&n(a.createElement);t.exports=function(t){return i?a.createElement(t):{}}},function(t,e,r){var n=r(2),a=r(18),i=r(29),o=r(109),s=r(8).f;t.exports=function(t){var e=a.Symbol||(a.Symbol=i?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(49)("keys"),a=r(33);t.exports=function(t){return n[t]||(n[t]=a(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),a=r(1),i=function(t,e){if(a(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return i(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:i}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),a=r(81).set;t.exports=function(t,e,r){var i,o=e.constructor;return o!==r&&"function"==typeof o&&(i=o.prototype)!==r.prototype&&n(i)&&a&&a(t,i),t}},function(t,e,r){"use strict";var n=r(21),a=r(24);t.exports=function(t){var e=String(a(this)),r="",i=n(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),a=r(0),i=r(12),o=r(11),s=r(46),c=r(88),u=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,g,v,y){c(r,e,d);var m,b,k,S=function(t){if(!h&&t in x)return x[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},A=e+" Iterator",T="values"==g,w=!1,x=t.prototype,_=x[l]||x["@@iterator"]||g&&x[g],M=_||S(g),E=g?T?S("entries"):M:void 0,O="Array"==e&&x.entries||_;if(O&&(k=f(O.call(new t)))!==Object.prototype&&k.next&&(u(k,A,!0),n||"function"==typeof k[l]||o(k,l,p)),T&&_&&"values"!==_.name&&(w=!0,M=function(){return _.call(this)}),n&&!y||!h&&!w&&x[l]||o(x,l,M),s[e]=M,s[A]=p,g)if(m={values:T?M:S("values"),keys:v?M:S("keys"),entries:E},y)for(b in m)b in x||i(x,b,m[b]);else a(a.P+a.F*(h||w),e,m);return m}},function(t,e,r){"use strict";var n=r(36),a=r(32),i=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:a(1,r)}),i(t,e+" Iterator")}},function(t,e,r){var n=r(61),a=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(a(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),a=r(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||i[a]===t)}},function(t,e,r){"use strict";var n=r(8),a=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,a(0,r)):t[e]=r}},function(t,e,r){var n=r(44),a=r(5)("iterator"),i=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[a]||t["@@iterator"]||i[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),a=r(35),i=r(6);t.exports=function(t){for(var e=n(this),r=i(e.length),o=arguments.length,s=a(o>1?arguments[1]:void 0,r),c=o>2?arguments[2]:void 0,u=void 0===c?r:a(c,r);u>s;)e[s++]=t;return e}},function(t,e,r){"use strict";var n=r(31),a=r(126),i=r(46),o=r(15);t.exports=r(87)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,a(1)):a(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,a,i=r(52),o=RegExp.prototype.exec,s=String.prototype.replace,c=o,u=(n=/a/,a=/b*/g,o.call(n,"a"),o.call(a,"a"),0!==n.lastIndex||0!==a.lastIndex),f=void 0!==/()??/.exec("")[1];(u||f)&&(c=function(t){var e,r,n,a,c=this;return f&&(r=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),u&&(e=c.lastIndex),n=o.call(c,t),u&&n&&(c.lastIndex=c.global?n.index+n[0].length:e),f&&n&&n.length>1&&s.call(n[0],r,function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(n[a]=void 0)}),n}),t.exports=c},function(t,e,r){"use strict";var n=r(60)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,a,i,o=r(19),s=r(116),c=r(80),u=r(76),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,g=f.Dispatch,v=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++v]=function(){s("function"==typeof t?t:Function(t),e)},n(v),v},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:g&&g.now?n=function(t){g.now(o(m,t,1))}:d?(i=(a=new d).port2,a.port1.onmessage=b,n=o(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in u("script")?function(t){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),a=r(99).set,i=n.MutationObserver||n.WebKitMutationObserver,o=n.process,s=n.Promise,c="process"==r(20)(o);t.exports=function(){var t,e,r,u=function(){var n,a;for(c&&(n=o.domain)&&n.exit();t;){a=t.fn,t=t.next;try{a()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(c)r=function(){o.nextTick(u)};else if(!i||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);r=function(){f.then(u)}}else r=function(){a.call(n,u)};else{var l=!0,h=document.createTextNode("");new i(u).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var a={fn:n,next:void 0};e&&(e.next=a),t||(t=a,r()),e=a}}},function(t,e,r){"use strict";var n=r(10);function a(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new a(t)}},function(t,e,r){"use strict";var n=r(2),a=r(7),i=r(29),o=r(67),s=r(11),c=r(41),u=r(3),f=r(39),l=r(21),h=r(6),p=r(136),d=r(37).f,g=r(8).f,v=r(95),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,S=n.DataView,A=n.Math,T=n.RangeError,w=n.Infinity,x=k,_=A.abs,M=A.pow,E=A.floor,O=A.log,C=A.LN2,P=a?"_b":"buffer",F=a?"_l":"byteLength",I=a?"_o":"byteOffset";function j(t,e,r){var n,a,i,o=new Array(r),s=8*r-e-1,c=(1<<s)-1,u=c>>1,f=23===e?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=_(t))!=t||t===w?(a=t!=t?1:0,n=c):(n=E(O(t)/C),t*(i=M(2,-n))<1&&(n--,i*=2),(t+=n+u>=1?f/i:f*M(2,1-u))*i>=2&&(n++,i/=2),n+u>=c?(a=0,n=c):n+u>=1?(a=(t*i-1)*M(2,e),n+=u):(a=t*M(2,u-1)*M(2,e),n=0));e>=8;o[l++]=255&a,a/=256,e-=8);for(n=n<<e|a,s+=e;s>0;o[l++]=255&n,n/=256,s-=8);return o[--l]|=128*h,o}function R(t,e,r){var n,a=8*r-e-1,i=(1<<a)-1,o=i>>1,s=a-7,c=r-1,u=t[c--],f=127&u;for(u>>=7;s>0;f=256*f+t[c],c--,s-=8);for(n=f&(1<<-s)-1,f>>=-s,s+=e;s>0;n=256*n+t[c],c--,s-=8);if(0===f)f=1-o;else{if(f===i)return n?NaN:u?-w:w;n+=M(2,e),f-=o}return(u?-1:1)*n*M(2,f-e)}function L(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function N(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function G(t){return j(t,52,8)}function B(t){return j(t,23,4)}function Y(t,e,r){g(t[m],e,{get:function(){return this[r]}})}function X(t,e,r,n){var a=p(+r);if(a+e>t[F])throw T(b);var i=t[P]._b,o=a+t[I],s=i.slice(o,o+e);return n?s:s.reverse()}function q(t,e,r,n,a,i){var o=p(+r);if(o+e>t[F])throw T(b);for(var s=t[P]._b,c=o+t[I],u=n(+a),f=0;f<e;f++)s[c+f]=u[i?f:e-f-1]}if(o.ABV){if(!u(function(){k(1)})||!u(function(){new k(-1)})||u(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var W,U=(k=function(t){return f(this,k),new x(p(t))})[m]=x[m],z=d(x),H=0;z.length>H;)(W=z[H++])in k||s(k,W,x[W]);i||(U.constructor=k)}var J=new S(new k(2)),Q=S[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||c(S[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=v.call(new Array(e),0),this[F]=e},S=function(t,e,r){f(this,S,"DataView"),f(t,k,"DataView");var n=t[F],a=l(e);if(a<0||a>n)throw T("Wrong offset!");if(a+(r=void 0===r?n-a:h(r))>n)throw T("Wrong length!");this[P]=t,this[I]=a,this[F]=r},a&&(Y(k,"byteLength","_l"),Y(S,"buffer","_b"),Y(S,"byteLength","_l"),Y(S,"byteOffset","_o")),c(S[m],{getInt8:function(t){return X(this,1,t)[0]<<24>>24},getUint8:function(t){return X(this,1,t)[0]},getInt16:function(t){var e=X(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=X(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return L(X(this,4,t,arguments[1]))},getUint32:function(t){return L(X(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(X(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(X(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){q(this,1,t,N,e)},setUint8:function(t,e){q(this,1,t,N,e)},setInt16:function(t,e){q(this,2,t,D,e,arguments[2])},setUint16:function(t,e){q(this,2,t,D,e,arguments[2])},setInt32:function(t,e){q(this,4,t,V,e,arguments[2])},setUint32:function(t,e){q(this,4,t,V,e,arguments[2])},setFloat32:function(t,e){q(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){q(this,8,t,G,e,arguments[2])}});y(k,"ArrayBuffer"),y(S,"DataView"),s(S[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=S},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(54)),a=l(r(106)),i=l(r(47)),o=l(r(71)),s=r(48),c=r(56);r(150);var u=l(r(107)),f=l(r(75));function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e,r,n,a,i,o){try{var s=t[i](o),c=s.value}catch(t){return void r(t)}s.done?e(c):Promise.resolve(c).then(n,a)}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this._constants=new Map,this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,l,y,m;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=t;this.chartSpecs=[];var o=n.default.chartPreProcessing(i.charts,r),s=g(o,2);if(i.charts=s[0],this.hasError=s[1],this.hasError)return i;for(var u=0;u<i.charts.length;u++){var f=void 0===i.charts[u].id?"chart"+u:i.charts[u].id,l=void 0===i.charts[u].type?n.default.CHART_URL:i.charts[u].type,h=new n.default(f,l,i.charts[u].source);this.chartSpecs.push(h)}if(i.facet&&(this.facet=new a.default(i.facet.type,i.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError)return i;c.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart),c.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart);var p=[];return i.animations.forEach(function(t){if(void 0!==t.elements){var e=void 0===t.id?t.selector:t.id;Object.keys(t.elements).forEach(function(r){if(void 0!==t.elements[r]){var n={id:e.concat(".",r,".effects[",0,"]"),marksetType:r,selector:t.selector};Object.keys(t.elements[r]).forEach(function(e){n[e]=t.elements[r][e]}),p.push(n)}})}else p.push(t)}),i.animations=p,i}},{key:"compareSpec",value:function(t){var e=!1;return(void 0!==this.currentSpec.constants&&JSON.stringify(t.constants)!==JSON.stringify(this.currentSpec.constants)||void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.marksWithSameDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear()),this.currentSpec=t,e}},{key:"checkAttrs",value:function(t,e,r){for(var n=Object.keys(e),a=!1,i=0,o=n.length;i<o;i++)if(!t.includes(n[i])){a=!0;var s=e[n[i]],c='"'+n[i]+'":';isNaN(Number(s))?"object"===d(s)?c+=JSON.stringify(s):c+='"'+s+'"':c+=""+s,r.info={type:"error",msg:'Illegal attribute name "'+n[i]+'".',errSpec:c.replace(/\s/g,"")};break}return a}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var a=0,s=t.charts.length;a<s&&!(r=this.checkAttrs(n.default.attrs,t.charts[a],e));a++){if(!t.charts[a].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[a]).replace(/\s/g,"")};break}if(t.charts[a].source.indexOf(".dsvg")<0&&(!t.charts[a].start||!t.charts[a].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[a]).replace(/\s/g,"")};break}}for(var c=0,u=t.animations.length;c<u&&!(r=this.checkAttrs(o.default.attrs,t.animations[c],e));c++){if(!t.animations[c].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(!t.animations[c].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(t.animations[c].reference&&!Object.keys(i.default.timingRef).includes(i.default.transRef(t.animations[c].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[c].reference.replace(/\s/g,"")+'"'};break}if(t.animations[c].align&&"object"===d(t.animations[c].align)){if(r=this.checkAttrs(o.default.alignAttrs,t.animations[c].align,e))break;if(void 0!==t.animations[c].align.type&&!Object.keys(o.default.alignTarget).includes(o.default.transAlign(t.animations[c].align.type))){r=!0,e.info={type:"error",msg:"The value of align has to be one of: element or object.",errSpec:'"type":"'+t.animations[c].align.type.replace(/\s/g,"")+'"'};break}}if(t.animations[c].offset&&"object"===d(t.animations[c].offset)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].offset,e)))break;if(t.animations[c].grouping&&(r=this.checkGroupingSpec(t.animations[c].grouping,e)))break;for(var l=0,h=t.animations[c].effects.length;l<h&&!(r=this.checkAttrs(f.default.attrs,t.animations[c].effects[l],e));l++){if(!t.animations[c].effects[l].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[c].effects[l]).replace(/\s/g,"")};break}if(!Object.values(f.default.actionTypes).includes(t.animations[c].effects[l].type)){r=!0,e.info={type:"error",msg:'Invalid effect type "'+t.animations[c].effects[l].type+'".',errSpec:'"type":"'+t.animations[c].effects[l].type.replace(/\s/g,"")+'"'};break}if(t.animations[c].effects[l].offset&&"object"===d(t.animations[c].effects[l].offset)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].effects[l].offset,e)))break;if(t.animations[c].effects[l].duration&&"object"===d(t.animations[c].effects[l].duration)&&(r=this.checkAttrs(i.default.dataBindAttrs,t.animations[c].effects[l].duration,e)))break;if(t.animations[c].effects[l].easing&&!Object.values(f.default.easingType).includes(t.animations[c].effects[l].easing)){r=!0,e.info={type:"error",msg:'Invalid easing type "'+t.animations[c].effects[l].easing+'".',errSpec:'"easing":"'+t.animations[c].effects[l].easing.replace(/\s/g,"")+'"'};break}}}return r}},{key:"checkGroupingSpec",value:function(t,e){if("number"==typeof t||"string"==typeof t){var r="number"==typeof t?'"grouping":'+t:'"grouping":"'+t.replace(/\s/g,"")+'"';return e.info={type:"error",msg:"Invalid grouping value.",errSpec:r},!0}if(this.checkAttrs(u.default.attrs,t,e))return!0;if(t.reference&&!Object.keys(i.default.timingRef).includes(i.default.transRef(t.reference)))return e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0;if(t.sort&&"object"===d(t.sort)){if(this.checkAttrs(u.default.sortAttrs,t.sort,e))return!0}else if("number"==typeof t.sort)return e.info={type:"error",msg:"Invalid sort value.",errSpec:'"sort":'+t.sort},!0;return!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(y=regeneratorRuntime.mark(function t(e){var r,a,l,p,d,g,v=this,y=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(r=y.length>1&&void 0!==y[1]?y[1]:{},JSON.stringify(r),this.hasError=!1,this.hasError){t.next=37;break}if(o.default.resetAll(),u.default.frames.clear(),u.default.framesMark.clear(),0!==e.charts.length){t.next=18;break}o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=37;break;case 18:return c.globalVar.jsMovin.setFrameRate(i.default.FRAME_RATE),a=this.compareSpec(e),t.next=22,this.preprocessCharts(e,a,r);case 22:if((l=t.sent).constants&&void 0!==l.constants&&(this.constants=l.constants),l.effectTmpls&&void 0!==l.effectTmpls&&f.default.assignActionTmpls(l.effectTmpls,r),this.animations=l.animations,console.log("animations in canisObj",this.animations),!Array.isArray(this.animations)){t.next=37;break}d=function(t){var e=v.animations[t],a=document.createElement("div");document.body.appendChild(a),a.innerHTML=n.default.charts[e.chartIdx].svgContent.outerHTML,console.log("animation json going to process: ",e,n.default.markSetsDuringTrans);var i=a.querySelectorAll(e.selector),c=n.default.markSetsDuringTrans[e.chartIdx][e.marksetType],u=[],f=[],l="";i.length>0&&[].forEach.call(i,function(t,e){var r=t.getAttribute("id");void 0!==c&&c.includes(r)&&(l=l.concat("#",r,","),u.push(r),f.push(t))}),l=l.substring(0,l.length-1),console.log("the selector is: ",l),v.animations[t].selector=l,console.log("marks in this aniunit: ",u,l);var d=[];if([].forEach.call(a.querySelectorAll(".mark"),function(t){d.push(t.getAttribute("id"));for(var e=t.getAttribute("class").split(" "),r="",n=0,a=e.length;n<a;n++)"mark"===e[n]&&(r=e[n+1]);o.default.markClass.set(t.getAttribute("id"),r)}),o.default.allMarks=[].concat(h(new Set([].concat(h(o.default.allMarks),d)))),0===f.length)return"number"==typeof e.selector?r.info={type:"error",msg:"The selector need to be a CSS selector",errSpec:'"selector":'+e.selector}:r.info={type:"error",msg:"The selector "+e.selector+" selects no marks",errSpec:'"selector":"'+e.selector.replace(/\s/g,"")+'"'},"continue";e.selector=v.sortSelector(e.selector);for(var g=[],y=0;y<n.default.changedAttrs.length;y++)g.push(n.default.changedAttrs[y]);var m=void 0,b=e.chartIdx+"_"+e.selector;if("0_.mark"===b&&(b="0_#".concat(o.default.allMarks.join(", #"))),void 0!==o.default.animations.get(b)?(m=o.default.animations.get(b)).translate(e,g,!0,u,r):((m=new o.default).translate(e,g,!1,u,r),o.default.animations.set(b,m)),void 0===m.align&&void 0!==p&&(m.align={target:p.id,type:o.default.alignTarget.withObj}),v.constants.size>0&&m.replaceConstants(v.constants,r),f.length>0){var k=new Map;[].forEach.call(f,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id"),r=t.getAttribute("class");if(void 0===k.get(r)?k.set(r,0):k.set(r,k.get(r)+1),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var a=s.CanisUtil.toJSON(t),i=s.CanisUtil.discretizePath(a);if(i){if("lines"===i.type)for(var c=0;c<i.data.length;c++)a.attr["x"+(1+2*c)]=i.data[c][0][0],a.attr["y"+(1+2*c)]=i.data[c][0][1],a.attr["x"+(2+2*c)]=i.data[c][1][0],a.attr["y"+(2+2*c)]=i.data[c][1][1];else for(var u=Object.keys(i.data),f=0;f<u.length;f++){var l=u[f];"radius"===l?i.data[l].length>1?(a.attr.innerRadius=i.data[l][0].rx+1,a.attr.outterRadius=i.data[l][1].rx-1):(a.attr.innerRadius=0,a.attr.outterRadius=i.data[l][0].rx-1):a.attr[l]=i.data[l]}t=s.CanisUtil.toDOM(a)}}for(var p={},d=[].concat(h(t.attributes)),g=0;g<d.length;g++){var v=d[g];p[v.name]=t.getAttribute(v.name)}var y=document.getElementById(e);p.bbWidth=y.getBBox().width,p.bbHeight=y.getBBox().height,p.bbX=y.getBBox().x,p.bbY=y.getBBox().y,p.content=t.textContent,p.id=e;var m=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(m)&&(m=m[0]),m.clsIdx="a".concat(k.get(r)),void 0!==n.default.nonDataMarkDatum.get(e)&&(n.default.nonDataMarkDatum.get(e).clsIdx="a".concat(k.get(r))),p["data-datum"]=m,p.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(p["stroke-dasharray"]=document.getElementById(e).getTotalLength(),p["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var b=s.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==b&&b&&"pies"===b.type&&(p.cx=b.data.cx,p.cy=b.data.cy,p.startAngle=(b.data.clockwise?b.data.startAngle:b.data.endAngle)-1/(2*Math.PI),p.endAngle=(b.data.clockwise?b.data.endAngle:b.data.startAngle)+4*Math.PI+1/(2*Math.PI),b.data.radius.length>1?(p.innerRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[1].rx:b.data.radius[0].rx,p.outterRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[0].rx:b.data.radius[1].rx,p.outterRadius++):(p.innerRadius=0,p.outterRadius=b.data.radius[0].rx+1))}o.default.domMarks.set(e,p)}}})}m.calAniTime(u),o.default.animations.get(b).alignOnData=m.alignOnData,p=m,document.body.removeChild(a)},g=0;case 30:if(!(g<this.animations.length)){t.next=37;break}if("continue"!==d(g)){t.next=34;break}return t.abrupt("continue",34);case 34:g++,t.next=30;break;case 37:case"end":return t.stop()}},t,this)}),m=function(){var t=this,e=arguments;return new Promise(function(r,n){var a=y.apply(t,e);function i(t){p(a,r,n,i,o,"next",t)}function o(t){p(a,r,n,i,o,"throw",t)}i(void 0)})},function(t){return m.apply(this,arguments)})},{key:"sortSelector",value:function(t){var e=t.split(", ");return e.length>0?(e.sort(function(t,e){return parseInt(t.substring(5))-parseInt(e.substring(5))}),e.join(", ")):t}},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.default.renderAnimation(r),o.default.mapToLottieSpec();var n=c.globalVar.jsMovin.toJSON();return t.lottieJSON=n,r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"constants",set:function(t){var e=this;this._constants.clear(),t.forEach(function(t){e._constants.set(t.name,t.value)})},get:function(){return this._constants}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if(r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length,console.log("assigning animations: ",r,JSON.stringify(t,null,2)),r>1)for(var n=function(r){var n=s.CanisUtil.deepClone(t);n[0].reference=i.default.timingRef.previousEnd;var a=new Map,o=n.map(function(t){if(t.chartIdx=r,void 0!==t.id){var e=r+"."+t.id;a.set(t.id,e),t.id=e}return void 0!==t.align&&(void 0!==a.get(t.align.target)?t.align.target=a.get(t.align.target):console.warn("aligning with an id that does not exist!")),t});e.push.apply(e,h(o))},a=1;a<r;a++)n(a);console.log("assigned animations: ",JSON.stringify(e,null,2)),this._animations=e},get:function(){return this._animations}}])&&v(e.prototype,r),l&&v(e,l),t}();y.lottieJSON="";var m=y;e.default=m,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,a;return e=t,a=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),a&&n(e,a),t}();e.EasingFactory=a},function(t,e,r){var n=r(147).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var a in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)a in t&&(t[a]+=t.relative?t[n[a]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,a;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.warn('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),a=t.range[0].match(e),i=t.range[1].match(e);if(r===n){t.frames=[];for(var o=a;o<=i;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.warn("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var a=0;a<e.length;a++)if(e[a].frames.length<r)for(var i=e[a].frames[e[a].frames.length-1],o=r-e[a].frames.length;o>0;)e[a].frames.push(i),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),a&&n(e,a),t}();a.facetType={row:"row",col:"column"};var i=a;e.default=i,t.exports=e.default},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var GroupingSpec=function(_TimingSpec){function GroupingSpec(){var t;return _classCallCheck(this,GroupingSpec),(t=_possibleConstructorReturn(this,(GroupingSpec.__proto__||Object.getPrototypeOf(GroupingSpec)).call(this)))._groupBy="id",t._reference=_TimingSpec2.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}return _inherits(GroupingSpec,_TimingSpec),_createClass(GroupingSpec,[{key:"replaceDelayConst",value:function replaceDelayConst(constants){var _this2=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.delay&&(void 0===constants.get(this.delay)?0===this.delay.indexOf("calc")?(this.delay=this.delay.substring(0,this.delay.length-1).substring(5),constants.forEach(function(t,e,r){_this2.delay.includes(e)&&("number"==typeof t?_this2.delay=_this2.delay.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+_this2.delay.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.delay,constants)?this.delay=eval(this.delay):status.info={type:"error",msg:"Wrong equation.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.delay)?this.delay=constants.get(this.delay):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}),void 0!==this.grouping&&this.grouping.replaceDelayConst(constants,status)}},{key:"initGrouping",value:function(t){this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new GroupingSpec,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new GroupingSpec,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,e,r,n,a){return GroupingSpec.frames.clear(),GroupingSpec.framesMark.clear(),0===Object.keys(r).length?(r.groupRef="root",r.id=GroupingSpec.nodeId,GroupingSpec.frames.set(GroupingSpec.nodeId,!0),GroupingSpec.nodeId++,r.children=[],r.marks=t,r.timingRef=void 0===n?_TimingSpec2.default.timingRef.previousStart:n,r.delay=0,this.generateTree(r,e)):this.updateTree(r,e),this.getMarkOrderAndLeaves(r,a)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,a=this.delay;if(void 0!==this.grouping){var i=!1;if(void 0!==t.children[0]&&(i=t.children[0].groupRef===r),i){for(var o,s=new Map,c=0;c<t.children.length|(o=t.children[c]);c++)this.grouping.updateTree(o,e),s.set(o.refValue,o),o.timingRef=n,o.delay=a;this.sortNodes(this.sort,t,s,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,e){for(var r,n=this.groupBy,a=this.reference,i=this.delay,o=new Map,s=0;s<t.marks.length|(r=t.marks[s]);s++){var c=e.get(r)["data-datum"],u=void 0;if(void 0!==e.get(r)[n])u=e.get(r)[n];else{if(void 0!==e.get(r)[n]||void 0===c[n])return void console.warn("error: grouping by an unknown attribute");u=c[n]}if(void 0!==o.get(u))o.get(u).marks.push(r);else{var f={};f.id=GroupingSpec.nodeId,GroupingSpec.nodeId++,f.groupRef=n,"id"===f.groupRef&&(f.definedById=this.definedById),f.refValue=u,f.timingRef=a,f.delay=i,f.children=[],f.marks=[r],o.set(u,f)}}if(this.sortNodes(this.sort,t,o,e),void 0!==this.grouping)for(var l,h=0;h<t.children.length|(l=t.children[h]);h++)this.grouping.generateTree(l,e)}},{key:"sortNodes",value:function(t,e,r,n){switch(e.children=[],_typeof(t.order)){case"object":for(var a,i=0;i<t.order.length|(a=t.order[i]);i++){if(!isNaN(Number(a))){var o=Number(a);void 0!==r.get(o)&&(e.children.push(r.get(o)),0)}void 0!==r.get(a)&&(e.children.push(r.get(a)),0)}break;case"string":var s=!0;if(r.forEach(function(t,e){t.marks.length>1&&(s=!1)}),void 0!==t.field&&s){var c=t.field,u=[].concat(_toConsumableArray(r)),f=t.order;u.sort(function(t,e){var r=t[1].marks[0],a=e[1].marks[0],i="",o="",s=n.get(r)["data-datum"],u=n.get(a)["data-datum"];return void 0!==n.get(r)[c]&&"undefined"!==n.get(a)[c]?(i=n.get(r)[c],o=n.get(a)[c]):void 0===n.get(r)[c]&&void 0!==s[c]&&void 0===n.get(a)[c]&&void 0!==u[c]&&(i=s[c],o=u[c]),isNaN(parseFloat(i))||(i=parseFloat(i)),isNaN(parseFloat(o))||(o=parseFloat(o)),f===GroupingSpec.orderTypes.ascending?i>=o?1:-1:f===GroupingSpec.orderTypes.descending?o>=i?1:-1:f===GroupingSpec.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var l,h=0;h<u.length|(l=u[h]);h++)e.children.push(l[1])}else{var p=[].concat(_toConsumableArray(r));t.order===GroupingSpec.orderTypes.ascending?p.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===GroupingSpec.orderTypes.descending?p.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===GroupingSpec.orderTypes.random&&p.sort(function(t,e){return Math.random()>=.5?1:-1});for(var d,g=0;g<p.length|(d=p[g]);g++)e.children.push(d[1])}break;default:r.forEach(function(t,r){e.children.push(t),0})}}},{key:"appendFrame",value:function(t,e,r,n){!GroupingSpec.frames.get(t)||0!==r&&r!==n-1?GroupingSpec.frames.set(e,!1):GroupingSpec.frames.set(e,!0)}},{key:"getMarkOrderAndLeaves",value:function(t,e){var r=[],n=[];if(null!=t){var a=[];for(t.parentGroupRef=[],t.parentGroupRefValue=[],a.unshift(t);0!=a.length;){var i=a.shift(),o=i.children;if(o.length<=0)(i.definedById||!i.definedById&&1===i.parentGroupRef.length)&&(e&&(i.children=[],i.parentGroupRef=[i.parentGroupRef[0]],i.parentGroupRefValue=[i.parentGroupRefValue[0]],i.groupRef="id",i.refValue=i.marks[0]),n.push(i)),r=[].concat(_toConsumableArray(r),_toConsumableArray(i.marks));else{"id"!==i.children[0].groupRef||"root"===i.groupRef||i.children[0].definedById||(e&&(i.children=[],i.parentGroupRef=[i.parentGroupRef[0]],i.parentGroupRefValue=[i.parentGroupRefValue[0]],i.groupRef="id",i.refValue=i.marks[0]),n.push(i));for(var s=0;s<o.length;s++)o[s].parentGroupRef=[].concat(_toConsumableArray(i.parentGroupRef),[i.groupRef]),o[s].parentGroupRefValue=[].concat(_toConsumableArray(i.parentGroupRefValue),[i.refValue]),a.push(o[s])}}}return[r,n]}},{key:"calTimeWithTree",value:function(t,e,r,n){if(t.children.length>0)for(var a=0;a<t.children.length;a++)a>0?this.calTimeWithTree(t.children[a],t.children[a-1].start,t.children[a-1].end,n):this.calTimeWithTree(t.children[a],-1,-1,n);switch(t.timingRef){case _TimingSpec2.default.timingRef.previousStart:t.start=e+t.delay;break;case _TimingSpec2.default.timingRef.previousEnd:t.start=r+t.delay;break;case _TimingSpec2.default.timingRef.absolute:t.start=t.delay;break;default:t.start=e+t.delay}-1===e&&(t.start=0),t.end=0;for(var i=0;i<t.marks.length;i++)n.get(t.marks[i]).startTime+=t.start,n.get(t.marks[i]).startTime+n.get(t.marks[i]).totalDuration>t.end&&(t.end=n.get(t.marks[i]).startTime+n.get(t.marks[i]).totalDuration);if(1===t.marks.length){var o=t.marks[0];GroupingSpec.frames.get(t.id)?GroupingSpec.framesMark.set(o,!0):void 0===GroupingSpec.framesMark.get(o)&&GroupingSpec.framesMark.set(o,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=_TimingSpec2.default.transRef(t);Object.keys(_TimingSpec2.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){"number"==typeof t?t>=1e3/_TimingSpec2.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/_TimingSpec2.default.FRAME_RATE:"string"==typeof t&&(this._delay=t)},get:function(){return this._delay}}]),GroupingSpec}(_TimingSpec2.default);GroupingSpec.attrs=["groupBy","reference","delay","sort","grouping"],GroupingSpec.sortAttrs=["order","field"],GroupingSpec.orderTypes={ascending:"ascending",descending:"descending",random:"random"},GroupingSpec.nodeId=0,GroupingSpec.frames=new Map,GroupingSpec.framesMark=new Map;var _default=GroupingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(76)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),a=r(15),i=r(57)(!1),o=r(78)("IE_PROTO");t.exports=function(t,e){var r,s=a(t),c=0,u=[];for(r in s)r!=o&&n(s,r)&&u.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~i(u,r)||u.push(r));return u}},function(t,e,r){var n=r(8),a=r(1),i=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){a(t);for(var r,o=i(e),s=o.length,c=0;s>c;)n.f(t,r=o[c++],e[r]);return t}},function(t,e,r){var n=r(15),a=r(37).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==i.call(t)?function(t){try{return a(t)}catch(t){return o.slice()}}(t):a(n(t))}},function(t,e,r){"use strict";var n=r(7),a=r(34),i=r(58),o=r(51),s=r(9),c=r(50),u=Object.assign;t.exports=!u||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=u({},t)[r]||Object.keys(u({},e)).join("")!=n})?function(t,e){for(var r=s(t),u=arguments.length,f=1,l=i.f,h=o.f;u>f;)for(var p,d=c(arguments[f++]),g=l?a(d).concat(l(d)):a(d),v=g.length,y=0;v>y;)p=g[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:u},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),a=r(4),i=r(116),o=[].slice,s={},c=function(t,e,r){if(!(e in s)){for(var n=[],a=0;a<e;a++)n[a]="a["+a+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),s=function(){var n=r.concat(o.call(arguments));return this instanceof s?c(e,n.length,n):i(e,n,t)};return a(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,a=r(45).trim,i=r(82),o=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(t,e){var r=a(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,a=r(45).trim;t.exports=1/n(r(82)+"-0")!=-1/0?function(t){var e=a(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),a=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&a(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(85),a=Math.pow,i=a(2,-52),o=a(2,-23),s=a(2,127)*(2-o),c=a(2,-126);t.exports=Math.fround||function(t){var e,r,a=Math.abs(t),u=n(t);return a<c?u*(a/c/o+1/i-1/i)*c*o:(r=(e=(1+o/i)*a)-(e-a))>s||r!=r?u*(1/0):u*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,a){try{return a?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(10),a=r(9),i=r(50),o=r(6);t.exports=function(t,e,r,s,c){n(e);var u=a(t),f=i(u),l=o(u.length),h=c?l-1:0,p=c?-1:1;if(r<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,u));return s}},function(t,e,r){"use strict";var n=r(9),a=r(35),i=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=i(r.length),s=a(t,o),c=a(e,o),u=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===u?o:a(u,o))-c,o-s),l=1;for(c<s&&s<c+f&&(l=-1,c+=f-1,s+=f-1);f-- >0;)c in r?r[s]=r[c]:delete r[s],s+=l,c+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(97);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(52)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),a=r(4),i=r(101);t.exports=function(t,e){if(n(t),a(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(132),a=r(42);t.exports=r(66)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(a(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(a(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,a=r(36),i=r(41),o=r(19),s=r(39),c=r(40),u=r(87),f=r(126),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),g=h?"_s":"size",v=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,u){var f=t(function(t,n){s(t,f,e,"_i"),t._t=e,t._i=a(null),t._f=void 0,t._l=void 0,t[g]=0,null!=n&&c(n,r,t[u],t)});return i(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[g]=0},delete:function(t){var r=d(this,e),n=v(r,t);if(n){var a=n.n,i=n.p;delete r._i[n.i],n.r=!0,i&&(i.n=a),a&&(a.p=i),r._f==n&&(r._f=a),r._l==n&&(r._l=i),r[g]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!v(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[g]}}),f},def:function(t,e,r){var n,a,i=v(t,e);return i?i.v=r:(t._l=i={i:a=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=i),n&&(n.n=i),t[g]++,"F"!==a&&(t._i[a]=i)),t},getEntry:v,setStrong:function(t,e,r){u(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(132),a=r(42);t.exports=r(66)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(a(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,a=r(2),i=r(26)(0),o=r(12),s=r(30),c=r(113),u=r(135),f=r(4),l=r(42),h=r(42),p=!a.ActiveXObject&&"ActiveXObject"in a,d=s.getWeak,g=Object.isExtensible,v=u.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?v(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(66)("WeakMap",y,m,u,!0,!0);h&&p&&(c((n=u.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,i(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,a){if(f(e)&&!g(e)){this._f||(this._f=new n);var i=this._f[t](e,a);return"set"==t?this:i}return r.call(this,e,a)})}))},function(t,e,r){"use strict";var n=r(41),a=r(30).getWeak,i=r(1),o=r(4),s=r(39),c=r(40),u=r(26),f=r(14),l=r(42),h=u(5),p=u(6),d=0,g=function(t){return t._l||(t._l=new v)},v=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};v.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,i){var u=t(function(t,n){s(t,u,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&c(n,r,t[i],t)});return n(u.prototype,{delete:function(t){if(!o(t))return!1;var r=a(t);return!0===r?g(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=a(t);return!0===r?g(l(this,e)).has(t):r&&f(r,this._i)}}),u},def:function(t,e,r){var n=a(i(e),!0);return!0===n?g(t).set(e,r):n[t._i]=r,t},ufstore:g}},function(t,e,r){var n=r(21),a=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=a(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),a=r(58),i=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(i(t)),r=a.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(59),a=r(4),i=r(6),o=r(19),s=r(5)("isConcatSpreadable");t.exports=function t(e,r,c,u,f,l,h,p){for(var d,g,v=f,y=0,m=!!h&&o(h,p,3);y<u;){if(y in c){if(d=m?m(c[y],y,r):c[y],g=!1,a(d)&&(g=void 0!==(g=d[s])?!!g:n(d)),g&&l>0)v=t(e,r,d,i(d.length),v,l-1)-1;else{if(v>=9007199254740991)throw TypeError();e[v]=d}v++}y++}return v}},function(t,e,r){var n=r(6),a=r(84),i=r(24);t.exports=function(t,e,r,o){var s=String(i(t)),c=s.length,u=void 0===r?" ":String(r),f=n(e);if(f<=c||""==u)return s;var l=f-c,h=a.call(u,Math.ceil(l/u.length));return h.length>l&&(h=h.slice(0,l)),o?h+s:s+h}},function(t,e,r){var n=r(7),a=r(34),i=r(15),o=r(51).f;t.exports=function(t){return function(e){for(var r,s=i(e),c=a(s),u=c.length,f=0,l=[];u>f;)r=c[f++],n&&!o.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}}},function(t,e,r){var n=r(44),a=r(142);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return a(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,a){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||a!=a?NaN:t===1/0||t===-1/0?t:(t-e)*(a-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),a=r.n(n),i=r(71),o=r.n(i),s=r(103),c=r.n(s);window.canis={canisObj:{},frameRate:a.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new c.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return c.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,a=r(104),i=r(146),o=r(74),s=(n=r(73))&&n.__esModule?n:{default:n},c=r(72);function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function g(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var v=function(){function t(e){h(this,t),g(this,"root",void 0),g(this,"anchor",void 0),g(this,"position",void 0),g(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,a=arguments.length>3?arguments[3]:void 0,i=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],c=t[e].k.filter(function(t){return t.t==a});if(c.length)r=c[0];else{r={t:a,s:this.getDefaultProperty(e)};var u=t[e].k.reduce(function(t,e){return e.t<a?t+1:t},0);t[e].k.splice(u,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=i:r.s=!s||i instanceof Array?i:[i]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){g(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var a=this.root.shapes[0].it;a.splice(a.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,a;this.timeRange[t]=1,this.updateTimeRange(),e instanceof c.PathMaker&&(e.uniform(),e=e.path);var i=u(this.commonPropertyMapping(t),3);if(r=i[0],n=i[1],a=i[2],!n||void 0===a)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==a&&(this.convertToStaticProperty(r,n),a>=0?r[n].k[a]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,i,s){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),s||(s=a.EasingFactory.linear()),n instanceof c.PathMaker||i instanceof c.PathMaker){if([n,i].forEach(function(t){return t instanceof c.PathMaker&&t.uniform()}),n instanceof c.PathMaker&&i instanceof c.PathMaker){var f=n.path.v.length-1,l=i.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:i,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),i.upsample(Math.round(d/l))}}var g=u([n,i].map(function(t){return t instanceof c.PathMaker?t.path:t}),2);n=g[0],i=g[1]}var v,y,m,b=!0,k=u(this.commonPropertyMapping(t),3);if(v=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var S=(v=this.root.t).d.k[0].s,A=JSON.parse(JSON.stringify(S)),T=JSON.parse(JSON.stringify(S));A.t=n,T.t=i,n=A,i=T,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,i,s),new Error("Not a valid key.")}v&&y&&void 0!==m&&(this.convertToAnimatableProperty(v,y),this.addKeyframe(v,y,m,e,n,s,b),this.addKeyframe(v,y,m,r,i,a.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=v;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,i.render)(t)};return new v(r)}},{key:"rect",value:function(t,e,r,n){var a={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,i.renderPlainGlyph)("rect",[r,n])]};return new v(a)}},{key:"ellipse",value:function(t,e,r,n){var a={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,i.renderPlainGlyph)("ellipse",[r,n])]};return new v(a)}},{key:"ref",value:function(t){return new v({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,a=this,c=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:c),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,s.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(a.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=c[0]+c[2]+1,h.h=c[1]+c[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var g=f;g.ty=4,g.ks=this.generateTransform(c),g.shapes=(0,i.render)(t)}break;case 2:var y=f,m=u((0,i.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,i.render)(t);break;case 5:var S=f,A=(0,o.getBaselineHeight)(t),T=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];S.ks.p.k=[c[0]+c[2]*T,c[1]+c[3]-A,0],S.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var w=u((0,i.renderText)(t,r),2),x=w[0],_=w[1];S.t=x,r.list.filter(function(t){return t.fName==_.fName}).length||r.list.push(_)}return new v(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=c,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new a.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),a=r.fontFamily.split(",")[0].trim(),s=r.fontStyle,c=r.fontWeight,u=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,i.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==a&&t.fStyle==s&&t.fWeight==c});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:u}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:a,fWeight:"".concat(c),fStyle:s,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,i.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var a=t.width.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),s=o.getContext("2d");o.width=3*a.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,s.drawImage(t,0,0,o.width,o.height);var c=o.toDataURL();if(e){var u=e.filter(function(t){return t.p==c});u.length&&(r=u[0].id)}var f={h:n.valueInSpecifiedUnits,w:a.valueInSpecifiedUnits,id:r,p:c,e:1};return[r,f]};var n,a=r(72),i=(n=r(73))&&n.__esModule?n:{default:n},o=r(74);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){a=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=c(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var a=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var a=0,i=0,s=100;if(r&&n){var c=(0,o.calculateBaseTransform)(r,n),u=n.getBBox(),f=r.getBBox();a=c.e+f.x-u.x,i=c.f+f.y-u.y,s=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[a,i]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:s},sk:{k:0},sa:{k:0}})}(r.it,a,t,e)};if(t instanceof SVGCircleElement){var i=t.r.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var c=i.valueInSpecifiedUnits,u=new a.PathMaker;u.moveTo(c,0),u.arcTo(c,c,0,1,0,c,2*c),u.arcTo(c,c,0,1,0,c,0),u.closePath(),n(u)}else if(t instanceof SVGEllipseElement){var f=s(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new a.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=s(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),g=d[0],v=d[1],y=d[2],m=d[3],b=Math.min(g,v),k=Math.min(y,m),S=new a.PathMaker;S.moveTo(g-b,y-k),S.lineTo(v-b,m-k),n(S)}else if(t instanceof SVGPathElement){var A=t.getAttribute("d")||"",T=new a.PathMaker(A);n(T)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var w=t.points;if(w.length){var x=Array.prototype.slice.call(w),_=x.reduce(function(t,e){return Math.min(t,e.x)},0),M=x.reduce(function(t,e){return Math.min(t,e.y)},0),E=new a.PathMaker;E.moveTo(w[0].x-_,w[0].y-M),x.forEach(function(t,e){e<=0||E.lineTo(t.x-_,t.y-M)}),t instanceof SVGPolygonElement&&E.closePath(),n(E)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var O=s(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),C=O[0],P=O[1],F=new a.PathMaker;F.moveTo(0,0),F.lineTo(C,0),F.lineTo(C,P),F.lineTo(0,P),F.closePath(),n(F)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,a){this.message=t,this.expected=e,this.found=r,this.location=a,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+a(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?i(t.parts[e][0])+"-"+i(t.parts[e][1]):i(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function a(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,a,i=new Array(t.length);for(e=0;e<t.length;e++)i[e]=(a=t[e],r[a.type](a));if(i.sort(),i.length>0){for(e=1,n=1;e<i.length;e++)i[e-1]!==i[e]&&(i[n]=i[e],n++);i.length=n}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(t)+" but "+function(t){return t?'"'+a(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,a={},i={svg_path:vt},o=vt,s=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},c=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,a=e.length;n<a;n++)r[n+1]=e[n][1];return r}(t,e)},u=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Dt(t,[e]);return r&&(n=n.concat(Dt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Dt("Z")},g=/^[Ll]/,v=lt(["L","l"],!1,!1),y=function(t,e){return Dt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Dt(t,e.map(function(t){return{x:t}}))},S=/^[Vv]/,A=lt(["V","v"],!1,!1),T=function(t,e){return Dt(t,e.map(function(t){return{y:t}}))},w=/^[Cc]/,x=lt(["C","c"],!1,!1),_=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},M=/^[Ss]/,E=lt(["S","s"],!1,!1),O=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},C=/^[Qq]/,P=lt(["Q","q"],!1,!1),F=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},I=/^[Tt]/,j=lt(["T","t"],!1,!1),R=/^[Aa]/,L=lt(["A","a"],!1,!1),N=function(t,e,r,n,a,i){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:a,x:i.x,y:i.y}},D=function(t,e){return{x:t,y:e}},V=function(t){return 1*t},G=function(t){return 1*t.join("")},B=/^[01]/,Y=lt(["0","1"],!1,!1),X=function(t){return"1"==t},q=function(){return""},W=",",U=ft(",",!1),z=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),$=/^[+\-]/,K=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,at=lt([" ","\t","\n","\r"],!1,!1),it=0,ot=[{line:1,column:1}],st=0,ct=[],ut=0;if("startRule"in e){if(!(e.startRule in i))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=i[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){it<st||(it>st&&(st=it,ct=[]),ct.push(t))}function gt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function vt(){var t,e,r,n,i;for(t=it,e=[],r=Rt();r!==a;)e.push(r),r=Rt();if(e!==a)if((r=function(){var t,e,r,n,i,o;if(t=it,(e=yt())!==a){for(r=[],n=it,i=[],o=Rt();o!==a;)i.push(o),o=Rt();for(i!==a&&(o=yt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;){for(r.push(n),n=it,i=[],o=Rt();o!==a;)i.push(o),o=Rt();i!==a&&(o=yt())!==a?n=i=[i,o]:(it=n,n=a)}r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())===a&&(r=null),r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a?(t,t=e=s(r)):(it=t,t=a)}else it=t,t=a;else it=t,t=a;return t}function yt(){var e,r,n,i,o,s;if(e=it,(r=function(){var e,r,n,i,o,s,c;e=it,u.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(f));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=xt())!==a?(o=it,(s=Ot())===a&&(s=null),s!==a&&(c=bt())!==a?o=s=[s,c]:(it=o,o=a),o===a&&(o=null),o!==a?(e,r=l(r,i,o),e=r):(it=e,e=a)):(it=e,e=a)}else it=e,e=a;return e}())!==a){for(n=[],i=it,o=[],s=Rt();s!==a;)o.push(s),s=Rt();for(o!==a&&(s=mt())!==a?i=o=[o,s]:(it=i,i=a);i!==a;){for(n.push(i),i=it,o=[],s=Rt();s!==a;)o.push(s),s=Rt();o!==a&&(s=mt())!==a?i=o=[o,s]:(it=i,i=a)}n!==a?(e,e=r=c(r,n)):(it=e,e=a)}else it=e,e=a;return e}function mt(){var e;return(e=function(){var e,r;e=it,h.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(p));r!==a&&(e,r=d());return e=r}())===a&&(e=function(){var e,r,n,i;e=it,g.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(v));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=bt())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,m.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(b));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=kt())!==a?(e,r=k(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,S.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(A));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=kt())!==a?(e,r=T(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,w.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(x));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=St())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=St())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=St())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,M.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(E));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=At())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=At())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=At())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,C.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(P));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=Tt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Tt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Tt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,I.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(j));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=xt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}())===a&&(e=function(){var e,r,n,i;e=it,R.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(L));if(r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a&&(i=function(){var t,e,r,n,i,o;if(t=it,(e=wt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=wt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,e=c(e,r),t=e):(it=t,t=a)}else it=t,t=a;return t}())!==a?(e,r=y(r,i),e=r):(it=e,e=a)}else it=e,e=a;return e}()),e}function bt(){var t,e,r,n,i,o;if(t=it,(e=xt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,t=e=c(e,r)):(it=t,t=a)}else it=t,t=a;return t}function kt(){var t,e,r,n,i,o;if(t=it,(e=Mt())!==a){for(r=[],n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a?n=i=[i,o]:(it=n,n=a);n!==a;)r.push(n),n=it,(i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a?n=i=[i,o]:(it=n,n=a);r!==a?(t,t=e=c(e,r)):(it=t,t=a)}else it=t,t=a;return t}function St(){var t,e,r,n,i,o;return t=it,(e=xt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=xt())!==a?((i=Ot())===a&&(i=null),i!==a&&(o=xt())!==a?(t,t=e=_(e,n,o)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a),t}function At(){var t,e,r,n;return t=it,(e=xt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=xt())!==a?(t,t=e=O(e,n)):(it=t,t=a)):(it=t,t=a),t}function Tt(){var t,e,r,n;return t=it,(e=xt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=xt())!==a?(t,t=e=F(e,n)):(it=t,t=a)):(it=t,t=a),t}function wt(){var t,e,r,n,i,o,s,c,u,f,l;return t=it,(e=_t())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=_t())!==a?((i=Ot())===a&&(i=null),i!==a&&(o=Mt())!==a&&Ot()!==a&&(s=Et())!==a?((c=Ot())===a&&(c=null),c!==a&&(u=Et())!==a?((f=Ot())===a&&(f=null),f!==a&&(l=xt())!==a?(t,t=e=N(e,n,o,s,u,l)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a)):(it=t,t=a),t}function xt(){var t,e,r,n;return t=it,(e=Mt())!==a?((r=Ot())===a&&(r=null),r!==a&&(n=Mt())!==a?(t,t=e=D(e,n)):(it=t,t=a)):(it=t,t=a),t}function _t(){var t,e;return t=it,(e=Pt())===a&&(e=jt()),e!==a&&(t,e=V(e)),t=e}function Mt(){var t,e,r,n;return t=it,e=it,(r=It())===a&&(r=null),r!==a&&(n=Pt())!==a?e=r=[r,n]:(it=e,e=a),e===a&&(e=it,(r=It())===a&&(r=null),r!==a&&(n=jt())!==a?e=r=[r,n]:(it=e,e=a)),e!==a&&(t,e=G(e)),t=e}function Et(){var e,r;return e=it,B.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(Y)),r!==a&&(e,r=X(r)),e=r}function Ot(){var t,e,r,n,i;if(t=it,e=[],(r=Rt())!==a)for(;r!==a;)e.push(r),r=Rt();else e=a;if(e!==a)if((r=Ct())===a&&(r=null),r!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a?t=e=[e,r,n]:(it=t,t=a)}else it=t,t=a;else it=t,t=a;if(t===a){if(t=it,e=it,(r=Ct())!==a){for(n=[],i=Rt();i!==a;)n.push(i),i=Rt();n!==a?e=r=[r,n]:(it=e,e=a)}else it=e,e=a;e!==a&&(t,e=q()),t=e}return t}function Ct(){var e;return 44===t.charCodeAt(it)?(e=W,it++):(e=a,0===ut&&dt(U)),e}function Pt(){var e,r,n,i;return e=it,r=it,(n=function(){var e,r,n,i,o;e=it,r=it,(n=jt())===a&&(n=null);n!==a?(46===t.charCodeAt(it)?(i=H,it++):(i=a,0===ut&&dt(J)),i!==a&&(o=jt())!==a?r=n=[n,i,o]:(it=r,r=a)):(it=r,r=a);r===a&&(r=it,(n=jt())!==a?(46===t.charCodeAt(it)?(i=H,it++):(i=a,0===ut&&dt(J)),i!==a?r=n=[n,i]:(it=r,r=a)):(it=r,r=a));r!==a&&(e,r=z(r));return e=r}())!==a?((i=Ft())===a&&(i=null),i!==a?r=n=[n,i]:(it=r,r=a)):(it=r,r=a),r===a&&(r=it,(n=jt())!==a&&(i=Ft())!==a?r=n=[n,i]:(it=r,r=a)),r!==a&&(e,r=z(r)),e=r}function Ft(){var e,r,n,i,o;return e=it,r=it,Q.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(Z)),n!==a?((i=It())===a&&(i=null),i!==a&&(o=jt())!==a?r=n=[n,i,o]:(it=r,r=a)):(it=r,r=a),r!==a&&(e,r=z(r)),e=r}function It(){var e;return $.test(t.charAt(it))?(e=t.charAt(it),it++):(e=a,0===ut&&dt(K)),e}function jt(){var e,r,n;if(e=it,r=[],tt.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(et)),n!==a)for(;n!==a;)r.push(n),tt.test(t.charAt(it))?(n=t.charAt(it),it++):(n=a,0===ut&&dt(et));else r=a;return r!==a&&(e,r=rt(r)),e=r}function Rt(){var e,r;return e=it,nt.test(t.charAt(it))?(r=t.charAt(it),it++):(r=a,0===ut&&dt(at)),r!==a&&(e,r=q()),e=r}var Lt={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Nt in Lt)Lt[Nt.toUpperCase()]=Lt[Nt];function Dt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Lt[t]};for(var a in t==t.toLowerCase()&&(n.relative=!0),e[r])n[a]=e[r][a];e[r]=n}return e}if((r=o())!==a&&it===t.length)return r;throw r!==a&&it<t.length&&dt({type:"end"}),gt(ct,st<t.length?t.charAt(st):null,st<t.length?pt(st,st+1):pt(st,st))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var a=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),a[e]=t>>>((3&e)<<3)&255;return a}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,a=r;return[a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],"-",a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]],a[t[n++]]].join("")}},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(96),r(257),r(127),r(258),r(128),r(259),r(260),r(261),r(262),r(263),r(131),r(133),r(134),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),a=r(14),i=r(7),o=r(0),s=r(12),c=r(30).KEY,u=r(3),f=r(49),l=r(43),h=r(33),p=r(5),d=r(109),g=r(77),v=r(155),y=r(59),m=r(1),b=r(4),k=r(9),S=r(15),A=r(23),T=r(32),w=r(36),x=r(112),_=r(16),M=r(58),E=r(8),O=r(34),C=_.f,P=E.f,F=x.f,I=n.Symbol,j=n.JSON,R=j&&j.stringify,L=p("_hidden"),N=p("toPrimitive"),D={}.propertyIsEnumerable,V=f("symbol-registry"),G=f("symbols"),B=f("op-symbols"),Y=Object.prototype,X="function"==typeof I&&!!M.f,q=n.QObject,W=!q||!q.prototype||!q.prototype.findChild,U=i&&u(function(){return 7!=w(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=C(Y,e);n&&delete Y[e],P(t,e,r),n&&t!==Y&&P(Y,e,n)}:P,z=function(t){var e=G[t]=w(I.prototype);return e._k=t,e},H=X&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},J=function(t,e,r){return t===Y&&J(B,e,r),m(t),e=A(e,!0),m(r),a(G,e)?(r.enumerable?(a(t,L)&&t[L][e]&&(t[L][e]=!1),r=w(r,{enumerable:T(0,!1)})):(a(t,L)||P(t,L,T(1,{})),t[L][e]=!0),U(t,e,r)):P(t,e,r)},Q=function(t,e){m(t);for(var r,n=v(e=S(e)),a=0,i=n.length;i>a;)J(t,r=n[a++],e[r]);return t},Z=function(t){var e=D.call(this,t=A(t,!0));return!(this===Y&&a(G,t)&&!a(B,t))&&(!(e||!a(this,t)||!a(G,t)||a(this,L)&&this[L][t])||e)},$=function(t,e){if(t=S(t),e=A(e,!0),t!==Y||!a(G,e)||a(B,e)){var r=C(t,e);return!r||!a(G,e)||a(t,L)&&t[L][e]||(r.enumerable=!0),r}},K=function(t){for(var e,r=F(S(t)),n=[],i=0;r.length>i;)a(G,e=r[i++])||e==L||e==c||n.push(e);return n},tt=function(t){for(var e,r=t===Y,n=F(r?B:S(t)),i=[],o=0;n.length>o;)!a(G,e=n[o++])||r&&!a(Y,e)||i.push(G[e]);return i};X||(s((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===Y&&e.call(B,r),a(this,L)&&a(this[L],t)&&(this[L][t]=!1),U(this,t,T(1,r))};return i&&W&&U(Y,t,{configurable:!0,set:e}),z(t)}).prototype,"toString",function(){return this._k}),_.f=$,E.f=J,r(37).f=x.f=K,r(51).f=Z,M.f=tt,i&&!r(29)&&s(Y,"propertyIsEnumerable",Z,!0),d.f=function(t){return z(p(t))}),o(o.G+o.W+o.F*!X,{Symbol:I});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=O(p.store),at=0;nt.length>at;)g(nt[at++]);o(o.S+o.F*!X,"Symbol",{for:function(t){return a(V,t+="")?V[t]:V[t]=I(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),o(o.S+o.F*!X,"Object",{create:function(t,e){return void 0===e?w(t):Q(w(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:$,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var it=u(function(){M.f(1)});o(o.S+o.F*it,"Object",{getOwnPropertySymbols:function(t){return M.f(k(t))}}),j&&o(o.S+o.F*(!X||u(function(){var t=I();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],a=1;arguments.length>a;)n.push(arguments[a++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,R.apply(j,n)}}),I.prototype[N]||r(11)(I.prototype,N,I.prototype.valueOf),l(I,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(49)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),a=r(58),i=r(51);t.exports=function(t){var e=n(t),r=a.f;if(r)for(var o,s=r(t),c=i.f,u=0;s.length>u;)c.call(t,o=s[u++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(111)})},function(t,e,r){var n=r(15),a=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return a(n(t),e)}})},function(t,e,r){var n=r(9),a=r(17);r(25)("getPrototypeOf",function(){return function(t){return a(n(t))}})},function(t,e,r){var n=r(9),a=r(34);r(25)("keys",function(){return function(t){return a(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(112).f})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4),a=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(a(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(114)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(81).set})},function(t,e,r){"use strict";var n=r(44),a={};a[r(5)("toStringTag")]="z",a+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(115)})},function(t,e,r){var n=r(8).f,a=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in a||r(7)&&n(a,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),a=r(17),i=r(5)("hasInstance"),o=Function.prototype;i in o||r(8).f(o,i,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=a(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),a=r(117);n(n.G+n.F*(parseInt!=a),{parseInt:a})},function(t,e,r){var n=r(0),a=r(118);n(n.G+n.F*(parseFloat!=a),{parseFloat:a})},function(t,e,r){"use strict";var n=r(2),a=r(14),i=r(20),o=r(83),s=r(23),c=r(3),u=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,g=p.prototype,v="Number"==i(r(36)(g)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var r,n,a,i=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:n=2,a=49;break;case 79:case 111:n=8,a=55;break;default:return+e}for(var o,c=e.slice(2),u=0,f=c.length;u<f;u++)if((o=c.charCodeAt(u))<48||o>a)return NaN;return parseInt(c,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(v?c(function(){g.valueOf.call(r)}):"Number"!=i(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?u(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;k.length>S;S++)a(d,b=k[S])&&!a(p,b)&&l(p,b,f(d,b));p.prototype=g,g.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),a=r(21),i=r(119),o=r(84),s=1..toFixed,c=Math.floor,u=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*u[r],u[r]=n%1e7,n=c(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=u[e],u[e]=c(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var r=String(u[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,r,n,s,c=i(this,f),u=a(t),g="",v="0";if(u<0||u>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(g="-",c=-c),c>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(c*d(2,69,1))-69)<0?c*d(2,-e,1):c/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=u;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),v=p()}else l(0,r),l(1<<-e,0),v=p()+o.call("0",u);return v=u>0?g+((s=v.length)<=u?"0."+o.call("0",u-s)+v:v.slice(0,s-u)+"."+v.slice(s-u)):g+v}})},function(t,e,r){"use strict";var n=r(0),a=r(3),i=r(119),o=1..toPrecision;n(n.P+n.F*(a(function(){return"1"!==o.call(1,void 0)})||!a(function(){o.call({})})),"Number",{toPrecision:function(t){var e=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),a=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),a=r(120),i=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return a(t)&&i(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),a=r(118);n(n.S+n.F*(Number.parseFloat!=a),"Number",{parseFloat:a})},function(t,e,r){var n=r(0),a=r(117);n(n.S+n.F*(Number.parseInt!=a),"Number",{parseInt:a})},function(t,e,r){var n=r(0),a=r(121),i=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:a(t-1+i(t-1)*i(t+1))}})},function(t,e,r){var n=r(0),a=Math.asinh;n(n.S+n.F*!(a&&1/a(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),a=Math.atanh;n(n.S+n.F*!(a&&1/a(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),a=r(85);n(n.S,"Math",{cbrt:function(t){return a(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),a=Math.exp;n(n.S,"Math",{cosh:function(t){return(a(t=+t)+a(-t))/2}})},function(t,e,r){var n=r(0),a=r(86);n(n.S+n.F*(a!=Math.expm1),"Math",{expm1:a})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(122)})},function(t,e,r){var n=r(0),a=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,i=0,o=0,s=arguments.length,c=0;o<s;)c<(r=a(arguments[o++]))?(i=i*(n=c/r)*n+1,c=r):i+=r>0?(n=r/c)*n:r;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,r){var n=r(0),a=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=a(4294967295,5)||2!=a.length}),"Math",{imul:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n;return 0|a*i+((65535&r>>>16)*i+a*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(121)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(85)})},function(t,e,r){var n=r(0),a=r(86),i=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(a(t)-a(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),a=r(86),i=Math.exp;n(n.S,"Math",{tanh:function(t){var e=a(t=+t),r=a(-t);return e==1/0?1:r==1/0?-1:(e-r)/(i(t)+i(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),a=r(35),i=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],a(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),a=r(15),i=r(6);n(n.S,"String",{raw:function(t){for(var e=a(t.raw),r=i(e.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(e[s++])),s<n&&o.push(String(arguments[s]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(60)(!0);r(87)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),a=r(60)(!1);n(n.P,"String",{codePointAt:function(t){return a(this,t)}})},function(t,e,r){"use strict";var n=r(0),a=r(6),i=r(89),o="".endsWith;n(n.P+n.F*r(90)("endsWith"),"String",{endsWith:function(t){var e=i(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=a(e.length),s=void 0===r?n:Math.min(a(r),n),c=String(t);return o?o.call(e,c,s):e.slice(s-c.length,s)===c}})},function(t,e,r){"use strict";var n=r(0),a=r(89);n(n.P+n.F*r(90)("includes"),"String",{includes:function(t){return!!~a(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(84)})},function(t,e,r){"use strict";var n=r(0),a=r(6),i=r(89),o="".startsWith;n(n.P+n.F*r(90)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),r=a(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=a(this),r=i(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),a=r(232);n(n.P+n.F*(Date.prototype.toISOString!==a),"Date",{toISOString:a})},function(t,e,r){"use strict";var n=r(3),a=Date.prototype.getTime,i=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!n(function(){i.call(new Date(NaN))})?function(){if(!isFinite(a.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:i},function(t,e,r){var n=Date.prototype,a=n.toString,i=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=i.call(this);return t==t?a.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),a=Date.prototype;n in a||r(11)(a,n,r(235))},function(t,e,r){"use strict";var n=r(1),a=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return a(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(59)})},function(t,e,r){"use strict";var n=r(19),a=r(0),i=r(9),o=r(123),s=r(91),c=r(6),u=r(92),f=r(93);a(a.S+a.F*!r(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,a,l,h=i(t),p="function"==typeof this?this:Array,d=arguments.length,g=d>1?arguments[1]:void 0,v=void 0!==g,y=0,m=f(h);if(v&&(g=n(g,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(r=new p(e=c(h.length));e>y;y++)u(r,y,v?g(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(a=l.next()).done;y++)u(r,y,v?o(l,g,[a.value,y],!0):a.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),a=r(92);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)a(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),a=r(15),i=[].join;n(n.P+n.F*(r(50)!=Object||!r(22)(i)),"Array",{join:function(t){return i.call(a(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),a=r(80),i=r(20),o=r(35),s=r(6),c=[].slice;n(n.P+n.F*r(3)(function(){a&&c.call(a)}),"Array",{slice:function(t,e){var r=s(this.length),n=i(this);if(e=void 0===e?r:e,"Array"==n)return c.call(this,t,e);for(var a=o(t,r),u=o(e,r),f=s(u-a),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(a+h):this[a+h];return l}})},function(t,e,r){"use strict";var n=r(0),a=r(10),i=r(9),o=r(3),s=[].sort,c=[1,2,3];n(n.P+n.F*(o(function(){c.sort(void 0)})||!o(function(){c.sort(null)})||!r(22)(s)),"Array",{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),a(t))}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(0),i=r(22)([].forEach,!0);n(n.P+n.F*!i,"Array",{forEach:function(t){return a(this,t,arguments[1])}})},function(t,e,r){var n=r(4),a=r(59),i=r(5)("species");t.exports=function(t){var e;return a(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!a(e.prototype)||(e=void 0),n(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),a=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(124);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return a(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),a=r(124);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return a(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),a=r(57)(!1),i=[].indexOf,o=!!i&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(i)),"Array",{indexOf:function(t){return o?i.apply(this,arguments)||0:a(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),a=r(15),i=r(21),o=r(6),s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(c||!r(22)(s)),"Array",{lastIndexOf:function(t){if(c)return s.apply(this,arguments)||0;var e=a(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,i(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(125)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(95)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),a=r(26)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),n(n.P+n.F*i,"Array",{find:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),a=r(26)(6),i="findIndex",o=!0;i in[]&&Array(1)[i](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(i)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),a=r(83),i=r(8).f,o=r(37).f,s=r(61),c=r(52),u=n.RegExp,f=u,l=u.prototype,h=/a/g,p=/a/g,d=new u(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,u(h)!=h||u(p)==p||"/a/i"!=u(h,"i")}))){u=function(t,e){var r=this instanceof u,n=s(t),i=void 0===e;return!r&&n&&t.constructor===u&&i?t:a(d?new f(n&&!i?t.source:t,e):f((n=t instanceof u)?t.source:t,n&&i?c.call(t):e),r?this:l,u)};for(var g=function(t){t in u||i(u,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},v=o(f),y=0;v.length>y;)g(v[y++]);l.constructor=u,u.prototype=l,r(12)(n,"RegExp",u)}r(38)("RegExp")},function(t,e,r){"use strict";r(128);var n=r(1),a=r(52),i=r(7),o=/./.toString,s=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?s(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?a.call(t):void 0)}):"toString"!=o.name&&s(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),a=r(6),i=r(98),o=r(63);r(64)("match",1,function(t,e,r,s){return[function(r){var n=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var c=n(t),u=String(this);if(!c.global)return o(c,u);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(c,u));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=i(u,a(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),a=r(9),i=r(6),o=r(21),s=r(98),c=r(63),u=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(64)("replace",2,function(t,e,r,d){return[function(n,a){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,a):r.call(String(i),n,a)},function(t,e){var a=d(r,t,this,e);if(a.done)return a.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var v=l.global;if(v){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!v)break;""===String(b[0])&&(l.lastIndex=s(h,i(l.lastIndex),y))}for(var k,S="",A=0,T=0;T<m.length;T++){b=m[T];for(var w=String(b[0]),x=u(f(o(b.index),h.length),0),_=[],M=1;M<b.length;M++)_.push(void 0===(k=b[M])?k:String(k));var E=b.groups;if(p){var O=[w].concat(_,x,h);void 0!==E&&O.push(E);var C=String(e.apply(void 0,O))}else C=g(w,h,x,_,E,e);x>=A&&(S+=h.slice(A,x)+C,A=x+w.length)}return S+h.slice(A)}];function g(t,e,n,i,o,s){var c=n+t.length,u=i.length,f=p;return void 0!==o&&(o=a(o),f=h),r.call(s,f,function(r,a){var s;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(c);case"<":s=o[a.slice(1,-1)];break;default:var f=+a;if(0===f)return r;if(f>u){var h=l(f/10);return 0===h?r:h<=u?void 0===i[h-1]?a.charAt(1):i[h-1]+a.charAt(1):r}s=i[f-1]}return void 0===s?"":s})}})},function(t,e,r){"use strict";var n=r(1),a=r(114),i=r(63);r(64)("search",1,function(t,e,r,o){return[function(r){var n=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var s=n(t),c=String(this),u=s.lastIndex;a(u,0)||(s.lastIndex=0);var f=i(s,c);return a(s.lastIndex,u)||(s.lastIndex=u),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(61),a=r(1),i=r(53),o=r(98),s=r(6),c=r(63),u=r(97),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(64)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var a=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(a,t,e);for(var i,o,s,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(i=u.call(d,a))&&!((o=d.lastIndex)>l&&(c.push(a.slice(l,i.index)),i.length>1&&i.index<a.length&&h.apply(c,i.slice(1)),s=i[0].length,l=o,c.length>=p));)d.lastIndex===i.index&&d.lastIndex++;return l===a.length?!s&&d.test("")||c.push(""):c.push(a.slice(l)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var a=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,a,n):d.call(String(a),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var u=a(t),h=String(this),g=i(u,RegExp),v=u.unicode,y=(u.ignoreCase?"i":"")+(u.multiline?"m":"")+(u.unicode?"u":"")+(p?"y":"g"),m=new g(p?u:"^(?:"+u.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var k=0,S=0,A=[];S<h.length;){m.lastIndex=p?S:0;var T,w=c(m,p?h:h.slice(S));if(null===w||(T=l(s(m.lastIndex+(p?0:S)),h.length))===k)S=o(h,S,v);else{if(A.push(h.slice(k,S)),A.length===b)return A;for(var x=1;x<=w.length-1;x++)if(A.push(w[x]),A.length===b)return A;S=k=T}}return A.push(h.slice(k)),A}]})},function(t,e,r){"use strict";var n,a,i,o,s=r(29),c=r(2),u=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),g=r(40),v=r(53),y=r(99).set,m=r(100)(),b=r(101),k=r(129),S=r(65),A=r(130),T=c.TypeError,w=c.process,x=w&&w.versions,_=x&&x.v8||"",M=c.Promise,E="process"==f(w),O=function(){},C=a=b.f,P=!!function(){try{var t=M.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(O,O)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==_.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),F=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},I=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,a=1==t._s,i=0,o=function(e){var r,i,o,s=a?e.ok:e.fail,c=e.resolve,u=e.reject,f=e.domain;try{s?(a||(2==t._h&&L(t),t._h=1),!0===s?r=n:(f&&f.enter(),r=s(n),f&&(f.exit(),o=!0)),r===e.promise?u(T("Promise-chain cycle")):(i=F(r))?i.call(r,c,u):c(r)):u(n)}catch(t){f&&!o&&f.exit(),u(t)}};r.length>i;)o(r[i++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){y.call(c,function(){var e,r,n,a=t._v,i=R(t);if(i&&(e=k(function(){E?w.emit("unhandledRejection",a,t):(r=c.onunhandledrejection)?r({promise:t,reason:a}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",a)}),t._h=E||R(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){y.call(c,function(){var e;E?w.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},N=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),I(e,!0))},D=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw T("Promise can't be resolved itself");(e=F(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,u(D,n,1),u(N,n,1))}catch(t){N.call(n,t)}}):(r._v=t,r._s=1,I(r,!1))}catch(t){N.call({_w:r,_d:!1},t)}}};P||(M=function(t){d(this,M,"Promise","_h"),p(t),n.call(this);try{t(u(D,this,1),u(N,this,1))}catch(t){N.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(M.prototype,{then:function(t,e){var r=C(v(this,M));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=E?w.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&I(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n;this.promise=t,this.resolve=u(D,t,1),this.reject=u(N,t,1)},b.f=C=function(t){return t===M||t===o?new i(t):a(t)}),l(l.G+l.W+l.F*!P,{Promise:M}),r(43)(M,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!P,"Promise",{reject:function(t){var e=C(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!P),"Promise",{resolve:function(t){return A(s&&this===o?M:this,t)}}),l(l.S+l.F*!(P&&r(62)(function(t){M.all(t).catch(O)})),"Promise",{all:function(t){var e=this,r=C(e),n=r.resolve,a=r.reject,i=k(function(){var r=[],i=0,o=1;g(t,!1,function(t){var s=i++,c=!1;r.push(void 0),o++,e.resolve(t).then(function(t){c||(c=!0,r[s]=t,--o||n(r))},a)}),--o||n(r)});return i.e&&a(i.v),r.promise},race:function(t){var e=this,r=C(e),n=r.reject,a=k(function(){g(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return a.e&&n(a.v),r.promise}})},function(t,e,r){"use strict";var n=r(135),a=r(42);r(66)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(a(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),a=r(67),i=r(102),o=r(1),s=r(35),c=r(6),u=r(4),f=r(2).ArrayBuffer,l=r(53),h=i.ArrayBuffer,p=i.DataView,d=a.ABV&&f.isView,g=h.prototype.slice,v=a.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!a.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||u(t)&&v in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==g&&void 0===e)return g.call(o(this),t);for(var r=o(this).byteLength,n=s(t,r),a=s(void 0===e?r:e,r),i=new(l(this,h))(c(a-n)),u=new p(this),f=new p(i),d=0;n<a;)f.setUint8(d++,u.getUint8(n++));return i}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(67).ABV,{DataView:r(102).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),a=r(10),i=r(1),o=(r(2).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=a(t),c=i(r);return o?o(n,e,c):s.call(n,e,c)}})},function(t,e,r){var n=r(0),a=r(36),i=r(10),o=r(1),s=r(4),c=r(3),u=r(115),f=(r(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){i(t),o(e);var r=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(u.apply(t,n))}var c=r.prototype,p=a(s(c)?c:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,r){var n=r(8),a=r(0),i=r(1),o=r(23);a(a.S+a.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){i(t),e=o(e,!0),i(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),a=r(16).f,i=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=a(i(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),a=r(1),i=function(t){this._t=a(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(88)(i,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,e,r){var n=r(16),a=r(17),i=r(14),o=r(0),s=r(4),c=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,u,f=arguments.length<3?e:arguments[2];return c(e)===f?e[r]:(o=n.f(e,r))?i(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:s(u=a(e))?t(u,r,f):void 0}})},function(t,e,r){var n=r(16),a=r(0),i=r(1);a(a.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(i(t),e)}})},function(t,e,r){var n=r(0),a=r(17),i=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return a(i(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),a=r(1),i=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return a(t),!i||i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(137)})},function(t,e,r){var n=r(0),a=r(1),i=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){a(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),a=r(16),i=r(17),o=r(14),s=r(0),c=r(32),u=r(1),f=r(4);s(s.S,"Reflect",{set:function t(e,r,s){var l,h,p=arguments.length<4?e:arguments[3],d=a.f(u(e),r);if(!d){if(f(h=i(e)))return t(h,r,s,p);d=c(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=a.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,n.f(p,r,l)}else n.f(p,r,c(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,r){var n=r(0),a=r(81);a&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){a.check(t,e);try{return a.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),a=r(57)(!0);n(n.P,"Array",{includes:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),a=r(138),i=r(9),o=r(6),s=r(10),c=r(94);n(n.P,"Array",{flatMap:function(t){var e,r,n=i(this);return s(t),e=o(n.length),r=c(n,0),a(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),a=r(138),i=r(9),o=r(6),s=r(21),c=r(94);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=i(this),r=o(e.length),n=c(e,0);return a(n,e,e,r,0,void 0===t?1:s(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),a=r(60)(!0);n(n.P,"String",{at:function(t){return a(this,t)}})},function(t,e,r){"use strict";var n=r(0),a=r(139),i=r(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*o,"String",{padStart:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),a=r(139),i=r(65),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);n(n.P+n.F*o,"String",{padEnd:function(t){return a(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),a=r(24),i=r(6),o=r(61),s=r(52),c=RegExp.prototype,u=function(t,e){this._r=t,this._s=e};r(88)(u,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(a(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in c?String(t.flags):s.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=i(t.lastIndex),new u(n,e)}})},function(t,e,r){r(77)("asyncIterator")},function(t,e,r){r(77)("observable")},function(t,e,r){var n=r(0),a=r(137),i=r(15),o=r(16),s=r(92);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=i(t),c=o.f,u=a(n),f={},l=0;u.length>l;)void 0!==(r=c(n,e=u[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(0),a=r(140)(!1);n(n.S,"Object",{values:function(t){return a(t)}})},function(t,e,r){var n=r(0),a=r(140)(!0);n(n.S,"Object",{entries:function(t){return a(t)}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(10),o=r(8);r(7)&&n(n.P+r(68),"Object",{__defineGetter__:function(t,e){o.f(a(this),t,{get:i(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(10),o=r(8);r(7)&&n(n.P+r(68),"Object",{__defineSetter__:function(t,e){o.f(a(this),t,{set:i(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(68),"Object",{__lookupGetter__:function(t){var e,r=a(this),n=i(t,!0);do{if(e=s(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),a=r(9),i=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(68),"Object",{__lookupSetter__:function(t){var e,r=a(this),n=i(t,!0);do{if(e=s(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(141)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(141)("Set")})},function(t,e,r){r(69)("Map")},function(t,e,r){r(69)("Set")},function(t,e,r){r(69)("WeakMap")},function(t,e,r){r(69)("WeakSet")},function(t,e,r){r(70)("Map")},function(t,e,r){r(70)("Set")},function(t,e,r){r(70)("WeakMap")},function(t,e,r){r(70)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),a=r(20);n(n.S,"Error",{isError:function(t){return"Error"===a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),a=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*a}})},function(t,e,r){var n=r(0),a=r(143),i=r(122);n(n.S,"Math",{fscale:function(t,e,r,n,o){return i(a(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var a=t>>>0,i=r>>>0;return(e>>>0)+(n>>>0)+((a&i|(a|i)&~(a+i>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var a=t>>>0,i=r>>>0;return(e>>>0)-(n>>>0)-((~a&i|~(a^i)&a-i>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n,o=r>>16,s=n>>16,c=(o*i>>>0)+(a*i>>>16);return o*s+(c>>16)+((a*s>>>0)+(65535&c)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),a=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*a}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(143)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,a=65535&r,i=65535&n,o=r>>>16,s=n>>>16,c=(o*i>>>0)+(a*i>>>16);return o*s+(c>>>16)+((a*s>>>0)+(65535&c)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),a=r(18),i=r(2),o=r(53),s=r(130);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,a.Promise||i.Promise),r="function"==typeof t;return this.then(r?function(r){return s(e,t()).then(function(){return r})}:t,r?function(r){return s(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),a=r(101),i=r(129);n(n.S,"Promise",{try:function(t){var e=a.f(this),r=i(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),a=r(1),i=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,a(r),i(n))}})},function(t,e,r){var n=r(28),a=r(1),i=n.key,o=n.map,s=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:i(arguments[2]),n=o(a(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var c=s.get(e);return c.delete(r),!!c.size||s.delete(e)}})},function(t,e,r){var n=r(28),a=r(1),i=r(17),o=n.has,s=n.get,c=n.key,u=function(t,e,r){if(o(t,e,r))return s(t,e,r);var n=i(e);return null!==n?u(t,n,r):void 0};n.exp({getMetadata:function(t,e){return u(t,a(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,r){var n=r(133),a=r(142),i=r(28),o=r(1),s=r(17),c=i.keys,u=i.key,f=function(t,e){var r=c(t,e),i=s(t);if(null===i)return r;var o=f(i,e);return o.length?r.length?a(new n(r.concat(o))):o:r};i.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return i(t,a(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return i(a(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),a=r(1),i=r(17),o=n.has,s=n.key,c=function(t,e,r){if(o(t,e,r))return!0;var n=i(e);return null!==n&&c(t,n,r)};n.exp({hasMetadata:function(t,e){return c(t,a(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return i(t,a(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),a=r(1),i=r(10),o=n.key,s=n.set;n.exp({metadata:function(t,e){return function(r,n){s(t,e,(void 0!==n?a:i)(r),o(n))}}})},function(t,e,r){var n=r(0),a=r(100)(),i=r(2).process,o="process"==r(20)(i);n(n.G,{asap:function(t){var e=o&&i.domain;a(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),a=r(2),i=r(18),o=r(100)(),s=r(5)("observable"),c=r(10),u=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,g=function(t){return null==t?void 0:c(t)},v=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,v(t))},b=function(t,e){u(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:c(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&v(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=g(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=g(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{v(e)}finally{throw t}}return v(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=g(r.complete);t=n?n.call(r,t):void 0}catch(t){try{v(e)}finally{throw t}}return v(e),t}}});var S=function(t){f(this,S,"Observable","_f")._f=c(t)};l(S.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(i.Promise||a.Promise)(function(r,n){c(t);var a=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),a.unsubscribe()}},error:n,complete:r})})}}),l(S,{from:function(t){var e="function"==typeof this?this:S,r=g(u(t)[s]);if(r){var n=u(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(S.prototype,s,function(){return this}),n(n.G,{Observable:S}),r(38)("Observable")},function(t,e,r){var n=r(2),a=r(0),i=r(65),o=[].slice,s=/MSIE .\./.test(i),c=function(t){return function(e,r){var n=arguments.length>2,a=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,a)}:e,r)}};a(a.G+a.B+a.F*s,{setTimeout:c(n.setTimeout),setInterval:c(n.setInterval)})},function(t,e,r){var n=r(0),a=r(99);n(n.G+n.B,{setImmediate:a.set,clearImmediate:a.clear})},function(t,e,r){for(var n=r(96),a=r(34),i=r(12),o=r(2),s=r(11),c=r(46),u=r(5),f=u("iterator"),l=u("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=a(p),g=0;g<d.length;g++){var v,y=d[g],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||s(k,f,h),k[l]||s(k,l,y),c[y]=h,m))for(v in n)k[v]||i(k,v,n[v],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,a=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",u="object"==typeof t,f=e.regeneratorRuntime;if(f)u&&(t.exports=f);else{(f=e.regeneratorRuntime=u?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",g={},v={};v[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(P([])));m&&m!==n&&a.call(m,o)&&(v=m);var b=w.prototype=A.prototype=Object.create(v);T.prototype=b.constructor=w,w.constructor=T,w[c]=T.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===T||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},x(_.prototype),_.prototype[s]=function(){return this},f.AsyncIterator=_,f.async=function(t,e,r,n){var a=new _(k(t,e,r,n));return f.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},x(b),b[c]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=P,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&a.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,a){return s.type="throw",s.arg=t,e.next=n,a&&(e.method="next",e.arg=r),!!a}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var c=a.call(o,"catchLoc"),u=a.call(o,"finallyLoc");if(c&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&a.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var a=n.arg;O(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:P(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),g}}}function k(t,e,r,n){var a=e&&e.prototype instanceof A?e:A,i=Object.create(a.prototype),o=new C(n||[]);return i._invoke=function(t,e,r){var n=l;return function(a,i){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===a)throw i;return F()}for(r.method=a,r.arg=i;;){var o=r.delegate;if(o){var s=M(o,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=S(t,e,r);if("normal"===c.type){if(n=r.done?d:h,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(t,r,o),i}function S(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function A(){}function T(){}function w(){}function x(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(t){var e;this._invoke=function(r,n){function i(){return new Promise(function(e,i){!function e(r,n,i,o){var s=S(t[r],t,n);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"==typeof u&&a.call(u,"__await")?Promise.resolve(u.__await).then(function(t){e("next",t,i,o)},function(t){e("throw",t,i,o)}):Promise.resolve(u).then(function(t){c.value=t,i(c)},o)}o(s.arg)}(r,n,e,i)})}return e=e?e.then(i,i):i()}}function M(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,M(t,e),"throw"===e.method))return g;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var a=S(n,t.iterator,e.arg);if("throw"===a.type)return e.method="throw",e.arg=a.arg,e.delegate=null,g;var i=a.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,g):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function P(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(a.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:F}}function F(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),a=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return a(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL1RpbWluZ1NwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvdXRpbC9VdGlsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL0NoYXJ0U3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL2pzbW92aW4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvdXRpbC9HbG9iYWxWYXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvQW5pbWF0aW9uU3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL3BhdGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvanNtb3Zpbi9iaW4vaGVscGVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL0FjdGlvblNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRodWIvY2FuaXMtY29tcGlsZXIvc3JjL0NhbmlzU3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL2Vhc2luZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3N2Zy1wYXRoLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9FOi93b3Jrc3BhY2UvZ2l0aHViL2NhbmlzLWNvbXBpbGVyL3NyYy9GYWNldFNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdGh1Yi9jYW5pcy1jb21waWxlci9zcmMvR3JvdXBpbmdTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9sYXllci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3N2Zy1wYXRoLXBhcnNlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJzbGljZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3QiLCJkZWYiLCJzdGF0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJUaW1pbmdTcGVjIiwiX29mZnNldCIsIl9yZWZlcmVuY2UiLCJ0aW1pbmdSZWYiLCJwcmV2aW91c1N0YXJ0IiwiY29uc3RhbnRzIiwic3RhdHVzIiwic3Vic3RyaW5nIiwiaW5mbyIsIm1zZyIsImVyclNwZWMiLCJDYW5pc1V0aWwiLCJjaGVja0VxdWF0aW9uIiwiZXZhbCIsIm1pbk9mZnNldCIsImRvbU1hcmtzIiwiaXRlbXNTdGFydCIsIm1pbkF0dHJWYWx1ZSIsImF0dHJzIiwibWFya0lkIiwicGFyc2VGbG9hdCIsImZpZWxkIiwib2Zmc2V0VmFsdWUiLCJsYXN0U3RhcnQiLCJsYXN0RW5kIiwiYWxsSXRlbXNTdGFydCIsInNpemUiLCJpdGVtU3RhcnQiLCJyZWZlcmVuY2UiLCJwcmV2aW91c0VuZCIsImFic29sdXRlIiwib2Zmc2V0UmVmIiwidG1wT2Zmc2V0UmVmU3RyIiwidHJhbnNSZWYiLCJvZnN0IiwiRlJBTUVfUkFURSIsInJlZlN0ciIsImRhdGFCaW5kQXR0cnMiLCJhcnIxIiwiYXJyMiIsIml0ZW0iLCJzdGFjayIsImNoYXJBdCIsInBvcCIsImFycmF5Iiwic3RyaW5nYXJyIiwib2JqIiwib2JqVHlwZSIsImlzQXJyYXkiLCJkZWVwQ2xvbmUiLCJ0aW1lIiwiY3VycmVudFRpbWVTIiwicGFyc2VJbnQiLCJjdXJyZW50VGltZU1TIiwiY29sb3IiLCJjb2xvck5hbWVzIiwidG1wU3RyIiwic3Vic3RyIiwicmdiIiwiSEVYMlJHQiIsImhleCIsImciLCJjb2xvcjJSR0IiLCJub2RlIiwibm9kZVR5cGUiLCJ0YWdOYW1lIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsInN0ZXBOdW0iLCJ0bXBQYXRoIiwiY3JlYXRlRWxlbWVudE5TIiwic2V0QXR0cmlidXRlTlMiLCJwYXRoU3RlcExlbiIsImdldFRvdGFsTGVuZ3RoIiwiZGlzY3JpdFBhdGgiLCJ0bXBQbnQiLCJnZXRQb2ludEF0TGVuZ3RoIiwieCIsInkiLCJkMSIsImQyIiwic2FtZVNoYXBlIiwiZDFDbWRzIiwiZDJDbWRzIiwiY21kUmVnRXhwIiwibWF0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJjbWRzIiwic3RhcnRYIiwic3RhcnRZIiwicmVsYXRpdmVFbmRYIiwicmVsYXRpdmVFbmRZIiwiZW5kWCIsImVuZFkiLCJjbWROYW1lIiwiY21kVmFsdWVzIiwib2Zmc2V0VmFsIiwic2NhbGVWYWwiLCJvcmlWYWwiLCJ0YXJnZXRWYWwiLCJhYnMiLCJjaGFydElkeCIsIm9yaUQiLCJ0YXJnZXREIiwicHJldmlvdXNUcmFucyIsImFjdGlvbkpzb24iLCJ0cmFuc1R5cGUiLCJtZXJnZVR5cGUiLCJhY3Rpb25UeXBlcyIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVYWSIsInRyYW5zbGF0ZVkiLCJzY2FsZVgiLCJzY2FsZVhZIiwic2NhbGVZIiwiZGF0YUNoYW5nZSIsImxvZyIsImNoYXJ0cyIsIm1hcmtEYXR1bSIsInNjYWxlcyIsInZpc3VhbE1hcHBpbmdzIiwic2NhbGVDdXJyZW50Q2hhcnQiLCJkYXRhTGFzdENoYXJ0Iiwidm0iLCJvcmlDbWRzIiwidGFyZ2V0Q21kcyIsImNoZWNrRFNhbWVTaGFwZSIsIm9yaVN0YXJ0RW5kIiwiZmluZERTdGFydEVuZCIsInRhcmdldFN0YXJ0RW5kIiwieVNjYWxlIiwiZGF0YUF0dHIiLCJkYXRhVmFsIiwiYWJzWE9mZnNldCIsImFic1lPZmZzZXQiLCJyZWxhdGl2ZVhPZmZzZXQiLCJyZWxhdGl2ZVlPZmZzZXQiLCJjbWROYW1lUmVjb3JkIiwiY21kVmFsUmVjb3JkIiwiY21kVmFsdWUiLCJ0YXJnZXRDbWRWYWx1ZSIsIm51bXMiLCJ0YXJnZXROdW1zIiwidG1wVmFsUmVjb3JkIiwibU9mZnNldFhWYWwiLCJtT2Zmc2V0WVZhbCIsIm1WYWxpZFgiLCJjaGVja1ZhbGlkT2Zmc2V0RENtZCIsIm1WYWxpZFkiLCJsck9mZnNldFhWYWwiLCJsck9mZnNldFlWYWwiLCJsclZhbGlkWCIsImRpZmZTY2FsZVgiLCJsclZhbGlkWSIsImRpZmZTY2FsZVkiLCJudW0iLCJpZHgiLCJzT2Zmc2V0VmFsIiwic1ZhbGlkWCIsInN0ZXAyIiwic3JPZmZzZXRWYWwiLCJzclZhbGlkWCIsImhPZmZzZXRYVmFsIiwiaFZhbGlkWCIsImhyT2Zmc2V0WFZhbCIsImhyVmFsaWRYIiwidk9mZnNldFhWYWwiLCJ2VmFsaWRYIiwidnJPZmZzZXRYVmFsIiwidnJWYWxpZFgiLCJhT2Zmc2V0VmFsIiwiYVZhbGlkWCIsImFyT2Zmc2V0VmFsIiwiYXJWYWxpZFgiLCJKU09OIiwicGFyc2UiLCJhdHRyVmFsdWUiLCJzdHJpbmdpZnkiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpc2NyZXRpemVEIiwiZmlsbENvbG9yIiwicmVzdWx0R3JvdXAiLCJyZWciLCJncm91cCIsImNvbW1hbmQiLCJwYXJhbWV0ZXJzIiwiY29udmVydENvbG9yIiwibGluZXMiLCJwcmV2IiwidmFsaWQiLCJmaXJzdFBvaW50Iiwic2Vjb25kUG9pbnQiLCJjaXJjbGVzIiwidG1wIiwic3ZnQXJjVG9DZW50ZXJQYXJhbSIsImN4IiwiY3kiLCJyeCIsInJ5Iiwicm90YXRlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiY2xvY2t3aXNlIiwicmFkaXVzIiwidXgiLCJ1eSIsInZ4IiwidnkiLCJkb3QiLCJtb2QiLCJzcXJ0IiwicmFkIiwiYWNvcyIsIngxIiwieTEiLCJwaGkiLCJmQSIsImZTIiwieDIiLCJ5MiIsImRlbHRhQW5nbGUiLCJQSXgyIiwiUEkiLCJzX3BoaSIsInNpbiIsImNfcGhpIiwiY29zIiwiaGRfeCIsImhkX3kiLCJoc194IiwiaHNfeSIsIngxXyIsInkxXyIsImxhbWJkYSIsInJ4cnkiLCJyeHkxXyIsInJ5eDFfIiwic3VtX29mX3NxIiwiY29lIiwiY3hfIiwiY3lfIiwieGNyMSIsInhjcjIiLCJ5Y3IxIiwieWNyMiIsInJhZGlhbiIsInN0ciIsImZNb2RlIiwidE1vZGUiLCJtciIsInN0YXJ0c1dpdGgiLCJwYWRTdGFydCIsImNlbnRlclgiLCJjZW50ZXJZIiwiYW5nbGVJblJhZGlhbnMiLCJpbm5lclJhZGl1cyIsIm91dHRlclJhZGl1cyIsImxhcmdlQXJjRmxhZyIsInN0YXJ0MSIsInBvbGFyVG9DYXJ0ZXNpYW4iLCJlbmQxIiwic3RhcnQyIiwiZW5kMiIsImlzUmluZyIsImRvbU5vZGUiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInRtcERpdiIsImZpcnN0Q2hpbGQiLCJ0eCIsInR5IiwiaGFzUG9zaSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInJlc3VsdENtZCIsInNldFBhdGhEVmFsdWUiLCJwYXRoRGF0YVdpdGhUeXBlIiwicGF0aERhdGEiLCJwYXRoRGF0YVNlcmllcyIsInBhcnNlU1ZHIiwicGF0aE1ha2VyIiwicGF0aERhdGFJdGVtIiwiY29kZSIsIm1vdmVUbyIsImxpbmVUbyIsImxpbmVUb1JlbGF0aXZlIiwiaG9yaXpvbnRhbFRvIiwiaG9yaXpvbnRhbFRvUmVsYXRpdmUiLCJ2ZXJ0aWNhbFRvIiwidmVydGljYWxUb1JlbGF0aXZlIiwiY3ViaWNCZXppZXJDdXJ2ZVRvIiwiY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvIiwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlIiwiYXJjVG8iLCJ4QXhpc1JvdGF0aW9uIiwibGFyZ2VBcmMiLCJzd2VlcCIsImFyY1RvUmVsYXRpdmUiLCJjbG9zZVBhdGgiLCJFcnJvciIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9zaU9mZnNldCIsImdldFBhdGhPZmZzZXQiLCJwbSIsInVuaWZvcm0iLCJpc1JlY3QiLCJwYXRoSXNSZWN0IiwiaCIsInNwbGljZSIsIm12VmFsdWVzIiwibGFzdENtZERpcmVjdCIsInRyYW5zQ29vcmRzIiwiZGlmZlgiLCJkaWZmWSIsInJlc2V0IiwiZGlmZkNtZHMiLCJmaXJzdENtZE5hbWUiLCJyZXNldFgiLCJyZXNldFkiLCJmaXJzdENtZFZhbHVlcyIsImNhbE51bVRyYW5zIiwibmkiLCJudW1zMiIsImFudW1zIiwiYW51bXMyIiwiY3VycmVudENtZElkeCIsInJlc2V0VmFsIiwidFZhbCIsImRpZmZDbWRJZHhzIiwiZmxhZyIsImoiLCJjbWRJZHgiLCJzdGFydEQiLCJlbmREIiwicmF0aW8iLCJzdGFydERpc0QiLCJlbmREaXNEIiwiZnJvbVN0YXJ0QW5nbGUiLCJmcm9tRW5kQW5nbGUiLCJ0b1N0YXJ0QW5nbGUiLCJ0b0VuZEFuZ2xlIiwiaW50ZXJwb2xhdGVGbiIsInZhbGlkQW5nbGUiLCJtaW5pbWFsQW5nbGUiLCJpbnRlcnBvbGF0ZSIsIm1hcmtTdGF0dXMiLCJzdGF0dXNBcnIiLCJ0bXBEUmVjb3JkZXIiLCJjb21wYXJlRCIsImRBcnIiLCJmaXJzdEQiLCJmaXJzdERDbWRzIiwidG1wRCIsInRtcERDbWRzIiwiZGlmZkF0dHJJZHhzIiwiZmlyc3REQ21kVmFsdWVzIiwidG1wRENtZFZhbHVlIiwiZmlyc3REQ21kVmFsdWUiLCJ0bXBEQ21kVmFsdWVzIiwiaGFzRmxhZyIsIlNldCIsImRvbSIsInRyIiwic2NhbGVTdHIiLCJ0cmFuc1N0ciIsInRyYW5zUG9zaVN0ciIsInNjYWxlTnVtU3RyIiwidHJhbnNOdW1zIiwic2NhbGVOdW0iLCJwcm9wTmFtZSIsImJhc2ljU2hhcGVzIiwiVmlld3BvcnQiLCJjaGFydFdpZHRoIiwiY2hhcnRIZWlnaHQiLCJBc3NldFRlbXBsYXRlIiwidmlzdWFsUHJvcHMiLCJhbmltYXRlUHJvcHMiLCJib3VuZGluZ0JveCIsImpzTW92aW5MYXllcklkeCIsImNhbmRpZGF0ZUF0IiwiYXQiLCJjb21wYXJlVmlzdWFsUHJvcHMiLCJwMiIsInNhZmVQcm9wcyIsImRpZmZlcmVudEtleXMiLCJrIiwicmVtb3ZlTnVtUmVnRXhwIiwiY29weXJpZ2h0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIkQiLCJDaGFydFNwZWMiLCJjaGFydFNwZWNzIiwiaW5wdXRTcGVjcyIsImhhc0Vycm9yIiwiaW5wdXRTcGVjIiwic3RhcnRJZHgiLCJlbmRJZHgiLCJ0bXBCbG9ja3MiLCJjaGFydE5hbWUiLCJmYWNldCIsIm5hbWVDaGFydHMiLCJudWxsQ2hhcnRzIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdEhlaWdodCIsIkNIQVJUX1VSTCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib2tTdGF0dXMiLCJsb2NhdGlvbiIsInByb3RvY29sIiwic3ZnQ29udGVudCIsIm92ZXJyaWRlTWltZVR5cGUiLCJzZW5kIiwicmVzcG9uc2VUZXh0Iiwidmlld0JveE51bXMiLCJjaGlsZHJlbiIsIkNoYXJ0IiwidW5zaGlmdCIsImZhY2V0Vmlld3MiLCJ2aWV3cG9ydCIsInNldFZpZXdwb3J0IiwiZGF0dW1NYXJrTWFwcGluZyIsInJlbW92ZVRyYW5zaXRpb25zIiwibUFyciIsIm1JZCIsIm1hcmtzV2l0aFNhbWVEYXR1bSIsInN2Z0NoYXJ0IiwibWVyZ2VDaGFydHMiLCJ2aWV3cyIsImNoYXJ0c1RvQ29tYmluZSIsImZyYW1lcyIsInRtcFJlY29yZGVyIiwiY2xvbmVOb2RlIiwid2FybiIsImNvbWJpbmVDaGFydHMiLCJmYWNldFR5cGUiLCJmYWNldE51bSIsInJlc3VsdENoYXJ0cyIsIm9yaVdpZHRoIiwib3JpSGVpZ2h0Iiwid2lkdGhBZnRlckZhY2V0IiwiaGVpZ2h0QWZ0ZXJGYWNldCIsInRtcENoYXJ0cyIsInZpZXdCb3hXIiwidmlld0JveEgiLCJjaGFydFRyYW5zRm9ybSIsImdldFRyYW5zZm9ybUF0dHJzIiwicm93IiwiY29sIiwidG1wQ2hhcnQiLCJ0bXBNYXJrcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpZE51bSIsImNsYXNzTGlzdCIsImFkZCIsImNoYXJ0Q2hpbGRyZW4iLCJ0bXBEb20iLCJ0cmFuc2Zvcm1BdHRycyIsImFsbE1hcmtzIiwibWFya1RlbXBsZXRlcyIsImF0dHJOYW1lcyIsIm51bGxTdGF0dXMiLCJtYXJrU2V0c0R1cmluZ1RyYW5zIiwiZW50ZXIiLCJ1cGRhdGUiLCJleGl0IiwibWFya3MiLCJzdGF0dXNPYmoiLCJvdXRlckhUTUwiLCJjaGFuZ2VkQXR0cnMiLCJhdHRyTmFtZXNDb3B5IiwiY29tcGFyZVN0YXR1cyIsImZpbmREaWZmQ21kcyIsIm1hcmtFbnRlckV4aXQiLCJtYXJrU3RyIiwibWFyayIsInRhcmdldFZhbHVlIiwicmVzdWx0RCIsInRleHRDb250ZW50Iiwic3ZnTWFyayIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImxhc3RDaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhVHJhbnMiLCJkYXRhVHJhbnNBcnIiLCJzaSIsInRtcFN0YXR1cyIsImdldEVsZW1lbnRCeUlkIiwiYkJveGVzIiwiYkJveCIsImdldEJCb3giLCJ3aWR0aCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwicGFyZW50VHJhbnMiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJkYXRhRGF0dW1BdHRyVmFsdWVTdHIiLCJkYXRhRGF0dW1BdHRyVmFsdWUiLCJibG9ja3MiLCJzaGFwZU5hbWUiLCJpc05vbkRhdGFNYXJrIiwidG1wSWQiLCJub25EYXRhTWFya0RhdHVtIiwiZGF0YU1hcmtEYXR1bSIsImFkZE1hcmtEYXR1bSIsInB1cmVEYXR1bSIsIm1TaGFwZSIsInB1cmVEYXR1bVN0ciIsInRtcERhdGFEYXR1bSIsImNoYXJ0VW5kZXJzdGFuZGluZyIsInBvc2l0aW9uIiwiZW5jb2RpbmciLCJhZGRFbmNvZGluZyIsImNoYW5uZWwiLCJ0cmFuc1NoYXBlIiwiZ2xvYmFsVmFyIiwibWFya0xheWVycyIsImpzTW92aW4iLCJhZGRMYXllciIsImFkZExvdHRpZU1hcmtMYXllcnMiLCJDSEFSVF9DT05URU5UIiwiYWRkU2NhbGVzIiwic2NhbGUiLCJhZGRWaXN1YWxNYXBwaW5nIiwidmlzdWFsQ2hhbm5lbCIsIl9sYXllciIsIkxheWVyRmFjdG9yeSIsIl9lYXNpbmciLCJFYXNpbmdGYWN0b3J5IiwiX3BhdGgiLCJQYXRoTWFrZXIiLCJNYXNrVHlwZSIsIl92IiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJKU01vdmluIiwiZnBzIiwiaGVpZ2h0IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJmciIsImRkZCIsImxheWVycyIsImFzc2V0cyIsImZvbnRzIiwiaXAiLCJvcCIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRvbUxheWVyT3JBc3NldElkIiwibGF5ZXIiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJoaWVyYXJjaHkiLCJyZWYiLCJtYXNrT3JEb20iLCJsYXllclJlZk9ySW5kZXgiLCJsYXllclJlZiIsImxheWVySW5kZXgiLCJtYXNrTGF5ZXIiLCJtYXNrVHlwZSIsIkFscGhhIiwiSlNNb3ZpbkxheWVyIiwidHQiLCJsYXllclJlZnMiLCJfdGhpcyIsImlubmVySW5kZXgiLCJtYXNrIiwibGF5ZXJXcmFwcGVyIiwicmVmSWQiLCJtYXhUaW1lIiwidG9KU09OIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImNsZWFyIiwiZ2V0Q29uc3RydWN0b3IiLCJzZXRTdHJvbmciLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJLIiwiX19kZWZpbmVTZXR0ZXJfXyIsIkNPTExFQ1RJT04iLCJBIiwiY2IiLCJtYXBGbiIsIm5leHRJdGVtIiwiQW5pbWF0aW9uIiwiX2lkIiwic2VsZWN0b3IiLCJfYWxpZ24iLCJhbGlnblRhcmdldCIsImdyb3VwaW5nIiwiYWN0aW9ucyIsImFuaW1hdGlvblN0YXJ0VGltZSIsImFuaW1hdGlvbkVuZFRpbWUiLCJsZWF2ZXMiLCJtYXJrc0luT3JkZXIiLCJhbmlzQWxpZ25lZCIsImFsaWduT25EYXRhIiwiYWxsTWFya0FuaSIsIndob2xlRW5kVGltZSIsInN0YXJ0VGltZSIsInRvdGFsRHVyYXRpb24iLCJhY3Rpb25BdHRycyIsImR1cmF0aW9uIiwiYXR0ck5hbWUiLCJ0bXBBY3Rpb25TcGVjIiwidGFyZ2V0TWFyayIsImFjdGlvblRhcmdldHMiLCJzdGFydEZyYW1lIiwiZW5kRnJhbWUiLCJhbmltYXRpb25UeXBlIiwidGFyZ2V0QW5pbWF0aW9uVHlwZSIsImN1c3RvbSIsInRtcEJib3giLCJnZXRCb3VuZGluZ0JveCIsInNldFN0YXRpY1Byb3BlcnR5IiwibG90dGllQ2hhbm5lbHMiLCJ0cmFuc2xhdGVUb0xvdHRpZUNoYW5uZWwiLCJ0byIsImZyb21WYWx1ZSIsInRvVmFsdWUiLCJsYyIsImZyb21Qb3NpIiwidG9Qb3NpIiwidHJhbnNEVG9Mb3R0aWVTcGVjIiwic2V0QW5pbWF0YWJsZVByb3BlcnR5IiwidHJhbnNUb0xvdHRpZUFjdGlvbiIsImVhc2luZyIsInRvTG90dGllUkdCQSIsImZpbmFsU3RhdHVzIiwid2lwZSIsIm1vdmUiLCJhcHBlYXIiLCJjaXJjbGUiLCJlbGxpcHNlIiwid2hlZWwiLCJwYXRoT2Zmc2V0IiwidG1wT2Zmc2V0WCIsInRtcE9mZnNldFkiLCJ0bXBTdGFydEFuZ2xlIiwidG1wRW5kQW5nbGUiLCJhZGRNYXNrIiwiYWxpZ25TdHIiLCJ3aXRoRWxlIiwid2l0aE9iaiIsImFsbE1hcmtBbmlUcmFucyIsImZyYW1lVGltZSIsImFuaW1hdGlvbnMiLCJhbmlJZHgiLCJyZXBsYWNlT2Zmc2V0Q29uc3QiLCJyZXBsYWNlRGVsYXlDb25zdCIsInJlcGxhY2VEdXJhdGlvbkNvbnN0IiwiYW5pbWF0aW9uSnNvbiIsInVzZWRDaGFuZ2VkQXR0cnMiLCJ1cGRhdGluZyIsIm1hcmtzVGhpc0FuaSIsImFsaWduIiwiaW5pdEdyb3VwaW5nIiwiZWZmZWN0cyIsIm1lcmdlSWR4cyIsIm1lcmdlZEFjdGlvbnMiLCJtZXJnYWJsZUFjdGlvblR5cGVzIiwiYWN0aW9uSWR4cyIsIm1lcmdlZEFjdGlvbkpzb24iLCJtZXJnZWQiLCJjb3VudCIsImFJZHgiLCJ0bXBBY3Rpb25Kc29uIiwibWVyZ2VkVHJhbnNpdGlvbiIsInZpc0F0dHJBY3Rpb25Kc29uQXJyIiwidHJhbnNUb1Zpc3VhbEF0dHJBY3Rpb24iLCJ2aXNBdHRyQWN0aW9uSnNvbiIsInRtcEFjdGlvbiIsImluaXRBY3Rpb24iLCJtYXJrSWRzIiwibGFzdEFuaW1hdGlvbiIsImFsaWduaW5nIiwiX2dyb3VwaW5nIiwiZHVyYXRpb25BdHRyVmFsdWVzIiwiYWN0aW9uIiwidG1wQXR0clZhbHVlcyIsImRhdHVtIiwibWluRHVyYXRpb24iLCJjYWxBY3Rpb25EdXJhdGlvbiIsImFjdGlvbnNEdXJhdGlvbnMiLCJtaW5WYWx1ZUVhY2hBdHRyIiwicHJvY2Vzc2VkQWN0aW9ucyIsInRtcE1hcmtzSW5PcmRlciIsImxlYXZlc09mQW5pbWF0aW9uIiwiYXJyYW5nZU9yZGVyIiwibWFya0FuaSIsInZBdHRyIiwidG1wT2JqIiwidmlzdWFsQXR0cnMiLCJwb3ciLCJ0aW1lRGlmZiIsImNhbFRpbWVBc0VsZSIsImNhbFRpbWVBc09iaiIsInVwZGF0ZUFuaVN0YXJ0QW5kRW5kVGltZSIsImNoZWNrVmFsaWRQcm9wIiwiZnJhbWVUaW1lUG9pbnQiLCJvZmZzZXRTdGFydCIsImN1cnJlbnRTdGFydFRpbWUiLCJjdXJyZW50RW5kVGltZSIsInRtcEVuZFRpbWUiLCJtYXJrc0luTGVhZiIsImxlYWZTdGFydCIsImxlYWZFbmQiLCJ0bXBNQW5pIiwibGVhZk1hcHBpbmciLCJsZWFmSWR4IiwibWFya3NTYW1lRGF0dW0iLCJ0bXBMIiwiYXJySXNDb250YWluZWQiLCJsZWFmTnVtIiwib2ZzdFRpbWUiLCJjdXJyZW50TGVhZkxhc3RBbmkiLCJsYXN0bGVhZkN1cnJlbnRBbmkiLCJjdXJyZW50TGVhZkN1cnJlbnRBbmkiLCJhbGlnblRvSWQiLCJhbGlnbldpdGhJZCIsImNhbE9mc3RUaW1lRm9yTGFzdEFuaSIsImFsaWduVG8iLCJhbGlnbldpdGhMZWF2ZXMiLCJ0bXBBbmlJZCIsInVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmciLCJjYWxBbmlPZmZzZXQiLCJsZWFmIiwibGVhZlRvQWxpZ24iLCJ0bXBPZnN0VGltZSIsIm1TdGFydFRpbWUiLCJtRHVyYXRpb24iLCJtRW5kVGltZSIsImFsaWduV2l0aEFuaUlkIiwia2VlcFVwZGF0aW5nIiwiYWxpZ25XaXRoIiwiYWxpZ25XaXRoSWRzIiwidG1wQW5pIiwiY3VycmVudExlYWZMYXN0QW5pU3RhcnQiLCJ0bXBMZWFmU3RhcnQiLCJhbmlJZCIsImN1cnJlbnRsZWFmQWxpZ25lZEFuaSIsImFuaUFsaWduZWQiLCJ0bXBMZWFmIiwibGVuMiIsImNhbFRpbWVXaXRoVHJlZSIsInRtcEFsbFN0YXJ0IiwiY2FsRUxlT2Zmc2V0VGltZSIsImNhbE9mZnNldFRpbWUiLCJhbmlPYmoiLCJGSVJTVF9BTklfSUQiLCJhbGlnbkF0dHJzIiwibWFya0NsYXNzIiwiX3N2Z1BhdGhQYXJzZXIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiSW5maW5pdHkiLCJhbmdsZSIsImxhcmdlX2FyY19mbGFnIiwic3dlZXBfZmxhZyIsInJlY3Vyc2l2ZSIsInh5IiwiXzEyMCIsImYxIiwiZjIiLCJyeDIiLCJyeTIiLCJhc2luIiwiZGYiLCJmMm9sZCIsIngyb2xkIiwieTJvbGQiLCJhMmMiLCJjMSIsInMxIiwiYzIiLCJzMiIsInRhbiIsImh4IiwiaHkiLCJtMSIsIm0yIiwibTMiLCJtNCIsIm5ld3JlcyIsImlpIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInAwIiwicDMiLCJtdWx0aSIsIl9sZW4iLCJvcmRlcjAiLCJfa2V5Iiwib3JkZXIxIiwiY2FsY3VsYXRlSGlnaGx5T3JkZXIiLCJvcmRlcjIiLCJvcmRlcjMiLCJwYXRoUmVhZHkiLCJwYXRoU3RhcnQiLCJwYXRoQ2hhaW4iLCJwYXRoIiwidXBkYXRlWFkiLCJjMXgiLCJjMXkiLCJjMngiLCJjMnkiLCJjYWxjdWxhdGVCZXppZXJNaW5NYXgiLCJzd2VlcEZsYWciLCJjU2VyaWVzIiwiaW92TGlzdCIsInBhdGhSZWYiLCJfdGhpczIiLCJtb3ZlVG9SZWxhdGl2ZSIsIl90aGlzMyIsIk51bWJlciIsImlzSW50ZWdlciIsImNvcHlQYXRoIiwib0FycmF5IiwiaUFycmF5IiwieEFycmF5IiwieUFycmF5Iiwic3RlcFJhdGlvIiwieFNwbGl0QXJyYXkiLCJjYWxjdWxhdGVCZXppZXJTcGxpdCIsInlTcGxpdEFycmF5IiwiX3AweCIsIl9wMXgiLCJzaGlmdCIsIl9wM3giLCJfcDJ4IiwiX3AweSIsIl9wMXkiLCJfcDN5IiwiX3AyeSIsInAweCIsInAxeCIsInAzeCIsInAyeCIsInAweSIsInAxeSIsInAzeSIsInAyeSIsInJuZyIsImJ5dGVzVG9VdWlkIiwib3B0aW9ucyIsImJ1ZiIsInJuZHMiLCJjYWxjdWxhdGVCYXNlVHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsIm11bHRpcGx5IiwiZ3JlYXRlc3RDb21tb25EaXZpc29yIiwic3ZnUm9vdCIsInBhcmVudEVsZW1lbnQiLCJiYXNlQm94IiwicmVmQkJveCIsImdldExlYWZOb2RlcyIsIm1hc3RlciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZWxlbSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZE5vZGVzIiwiZ2V0QmFzZWxpbmVIZWlnaHQiLCJnZXRDb250ZXh0IiwiZm9udFNldHRpbmdzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZvbnQiLCJtZWFzdXJlVGV4dCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsImVuY29kZUxpbmVDYXAiLCJlbmNvZGVMaW5lSm9pbiIsImVuY29kZVRleHRBbmNob3IiLCJsZWFzdENvbW1vbk11bHRpcGxlIiwiQWN0aW9uU3BlYyIsIl9leHRlbmQiLCJfdHlwZSIsImVhc2luZ1R5cGUiLCJlYXNlTGluZWFyIiwiX2R1cmF0aW9uIiwib3JpQWN0aW9uVHlwZSIsImRlbGF5IiwidG1wQXR0ciIsInRwIiwiYWxlcnQiLCJlcyIsImRydG4iLCJhY3Rpb25UbXBsSnNvbiIsImFjdGlvblRtcGxzIiwiY3VycmVudFRtcGwiLCJjdXJyZW50TmFtZSIsImV4dGVuZE5hbWUiLCJleHRlbmQiLCJleHRlbmRUbXBsIiwiYWN0aW9uSnNvbkFyciIsInJlcGxhY2VBY3Rpb25UbXBscyIsInRyYW5zaXRpb24iLCJmYWRlIiwiZGlzYXBwZWFyIiwiZmFkZU91dCIsImdyb3ciLCJkZWdyb3ciLCJ3aXBlQm90dG9tIiwiSW52ZXJ0QWxwaGEiLCJ3aXBlT3V0RnJvbVRvcCIsIndpcGVUb3AiLCJ3aXBlT3V0RnJvbUJvdHRvbSIsIndpcGVMZWZ0Iiwid2lwZU91dEZyb21SaWdodCIsIndpcGVSaWdodCIsIndpcGVPdXRGcm9tTGVmdCIsImNpcmNsZU91dCIsIndoZWVsT3V0IiwiZnJvbUFyciIsInRvQXJyIiwidHJhbnNBcnIiLCJ0cmFuc0Zyb21EIiwidHJhbnNUb0QiLCJ0cmFuc2xhdGVkRCIsImRUcmFucyIsImFjdGlvbkFyciIsIndob2xlU3RhcnQiLCJ3aG9sZUVuZCIsImR1cmF0aW9uV2l0aEF0dHIiLCJ0bXBTdGFydE1hcCIsInRtcEVuZE1hcCIsIm1pc3Rha2UiLCJ0bXBTdGFydCIsIm1pblRtcFN0YXJ0IiwibWF4VG1wRW5kIiwidG1wRW5kIiwidG1wUmVzdWx0RHVyYXRpb24iLCJyZXN1bHREdXJhdGlvbnMiLCJ0bXBFeHRyYUR1cmF0aW9uIiwiZWFzaW5nTmFtZSIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwidGV4dCIsInpvb20iLCJlYXNlT3V0Qm91bmNlIiwiaXMiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwic2lnbiIsIiRleHBtMSIsImV4cG0xIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJzZWFyY2hTdHJpbmciLCIkZGVmaW5lUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsIm9yaWdpbmFsIiwiZW5kUG9zIiwiYWRkVG9VbnNjb3BhYmxlcyIsIml0ZXJhdGVkIiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJkZWZlciIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiUHJvbWlzZSIsImlzTm9kZSIsImhlYWQiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJwYXJlbnQiLCJkb21haW4iLCJzdGFuZGFsb25lIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidG9nZ2xlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIkNhbmlzU3BlYyIsImN1cnJlbnRTcGVjIiwiY2FuaXNPYmoiLCJfY29uc3RhbnRzIiwiX2FuaW1hdGlvbnMiLCJzcGVjIiwiZGlmZkNoYXJ0IiwiY2hhcnRQcmVQcm9jZXNzaW5nIiwiY2hhcnRUeXBlIiwibG9hZENoYXJ0cyIsInJlbW92ZVRyYW5zQW5kTWVyZ2UiLCJjbGVhckxheWVycyIsInRtcEFuaUpzb25zIiwidG1wQW5pSnNvbiIsImVsZW1lbnRzIiwib3JpSWQiLCJtc3QiLCJlbnRlckFuaUpzb24iLCJtYXJrc2V0VHlwZSIsImxlZ2FsQXR0cnMiLCJ0bXBWYWx1ZSIsImVyclNwZWNTdHIiLCJjaGVja0F0dHJzIiwidHJhbnNBbGlnbiIsImNoZWNrR3JvdXBpbmdTcGVjIiwiZ3JvdXBpbmdTcGVjIiwiZXJyU3RyIiwic29ydEF0dHJzIiwicmVzZXRBbGwiLCJmcmFtZXNNYXJrIiwic2V0RnJhbWVSYXRlIiwiY29tcGFyZVNwZWMiLCJwcmVwcm9jZXNzQ2hhcnRzIiwiZWZmZWN0VG1wbHMiLCJhc3NpZ25BY3Rpb25UbXBscyIsInRtcENvbnRhaW5lciIsImJvZHkiLCJhbGxUYXJnZXRNYXJrcyIsImVudGlyZU1hcmtTZXQiLCJuZXdTZWxlY3RvciIsInRtcEFsbE1hcmtzIiwidG0iLCJtQ2xhc3MiLCJtYXJrVHlwZSIsInNvcnRTZWxlY3RvciIsImFuaW1hdGlvbiIsImFuaUtleSIsInRyYW5zbGF0ZSIsInJlcGxhY2VDb25zdGFudHMiLCJpZHhGb3JFYWNoQ2xzIiwibWFya0NscyIsIm1hcmtKU09OIiwidHJhbnNmb3JtZWRBdHRycyIsImRpc2NyZXRpemVQYXRoIiwidGZBdHRyc0RhdGFLZXlzIiwidEF0dHIiLCJ0b0RPTSIsInRtcERvbUF0dHJPYmoiLCJhdHRyQXJyIiwibWFya0RvbSIsImNsc0lkeCIsImRpc2NEIiwiY2FsQW5pVGltZSIsInNlbGVjdG9yQmxvY2tzIiwiY2FsbGJhY2siLCJyZW5kZXJBbmltYXRpb24iLCJtYXBUb0xvdHRpZVNwZWMiLCJsb3R0aWVKU09OIiwiY29uQXJyIiwiYW5pSnNvbiIsImlkeEFuaUpzb24iLCJjaGFydE51bSIsImlkTWFwcGluZyIsInRtcElkeEFuaUpzb24iLCJuZXdJZCIsInBhcnNlckZ1bmN0aW9uIiwibWFrZUFic29sdXRlIiwiY29tbWFuZHMiLCJzdWJwYXRoU3RhcnQiLCJwcmV2Q21kIiwiY21kIiwieDAiLCJ5MCIsInJlbGF0aXZlIiwidG9VcHBlckNhc2UiLCJGYWNldFNwZWMiLCJfdmlld3MiLCJmcmFtZVZpZXdzIiwicmFuZ2UiLCJyZWdlbmQiLCJyYW5nZVN0YXJ0TmFtZSIsInJhbmdlRW5kTmFtZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsIm1heExlbiIsImxhc3RJdGVtIiwibnVtRGlmZiIsIkdyb3VwaW5nU3BlYyIsIl9ncm91cEJ5IiwiX2RlbGF5IiwiZGVmaW5lZEJ5SWQiLCJncm91cGluZ0pzb24iLCJncm91cEJ5Iiwib3JkZXIiLCJleHByIiwiZ3JvdXBSZWYiLCJub2RlSWQiLCJnZW5lcmF0ZVRyZWUiLCJ1cGRhdGVUcmVlIiwiZ2V0TWFya09yZGVyQW5kTGVhdmVzIiwiZ3JvdXBCeVJlZiIsInNhbWVHcm91cGluZyIsInRtcE5vZGUiLCJub2Rlc1RoaXNMZXZlbCIsInJlZlZhbHVlIiwic29ydE5vZGVzIiwic3BlY1NvcnQiLCJyZWZWYWx1ZU51bSIsImFwcGVuZE51bSIsImhhc1NpbmdsZU1hcmsiLCJvcmRlclJlZiIsIm5vZGVzVGhpc0xldmVsQXJyIiwib3JkZXJUeXBlIiwibWFya0lkMSIsIm1hcmtJZDIiLCJvcmRlclJlZlZhbHVlMSIsIm9yZGVyUmVmVmFsdWUyIiwiZGF0dW0xIiwiZGF0dW0yIiwib3JkZXJUeXBlcyIsImFzY2VuZGluZyIsImRlc2NlbmRpbmciLCJwYXJlbnRJZCIsIm5vZGVJZHgiLCJub2Rlc051bSIsIm9yZGVyZWRNYXJrcyIsInBhcmVudEdyb3VwUmVmIiwicGFyZW50R3JvdXBSZWZWYWx1ZSIsImxhc3RHcm91cFN0YXJ0IiwibGFzdEdyb3VwRW5kIiwidG1wTWFya0lkIiwiZ2IiLCJ0bXBSZWZTdHIiLCJkbHkiLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsInBhcnRBcmdzIiwiYm91bmQiLCJ1biIsIiRwYXJzZUludCIsIiR0cmltIiwid3MiLCJyYWRpeCIsIiRwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJsb2cxcCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwicmV0IiwibWVtbyIsImlzUmlnaHQiLCJpbmMiLCJmb3JjZWQiLCJmbGFncyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJzdHJvbmciLCJlbnRyeSIsImdldEVudHJ5IiwiJGl0ZXJEZWZpbmUiLCJTSVpFIiwiX2YiLCJfbCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJ1ZnN0b3JlIiwiJFdlYWtNYXAiLCIkaGFzIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsIm51bWJlciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiY2FuaXMiLCJmcmFtZVJhdGUiLCJyZW5kZXJTcGVjIiwiaW5pdCIsInJlbmRlciIsImV4cG9ydEpTT04iLCJfcmVuZGVyIiwiX2hlbHBlciIsIl9zbGljZWRUb0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2FyciIsIl9uIiwiX2UiLCJfcyIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfY3JlYXRlQ2xhc3MiLCJhbmNob3IiLCJ0cmFuc2Zvcm0iLCJnZXREZWZhdWx0UHJvcGVydHkiLCJzdGF0aWNWYWx1ZSIsInJlYWR5VG9TZXQiLCJ3cmFwIiwiZXhpc3RLZXlmcmFtZSIsInByZXZpb3VzS2V5ZnJhbWVDb3VudCIsInNoYXBlcyIsInNoYXBlIiwiZmluZFByb3BlcnR5Q29uZmlnIiwiaGFzVHJhbnNmb3JtIiwiY29uZmlnIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsIl9vYmplY3RTcHJlYWQiLCJncm91cFNoYXBlcyIsImJhc2UiLCJrcyIsImZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnIiwidGltZVJhbmdlIiwidXBkYXRlVGltZVJhbmdlIiwiX3RoaXMkY29tbW9uUHJvcGVydHlNMiIsImNvbW1vblByb3BlcnR5TWFwcGluZyIsImRvYyIsImNvbnZlcnRUb1N0YXRpY1Byb3BlcnR5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwic3RhcnRMaW5lQ291bnQiLCJlbmRMaW5lQ291bnQiLCJuZWVkQ29weSIsIm5lZWRMZW5ndGgiLCJjb21tb25NdWx0aXBsZSIsInVwc2FtcGxlIiwiX21hcDIiLCJfdGhpcyRjb21tb25Qcm9wZXJ0eU00IiwidGV4dFByb3AiLCJ0bXBTdGFydFZhbHVlIiwidG1wRW5kVmFsdWUiLCJjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkiLCJhZGRLZXlmcmFtZSIsImNvb3JkaW5hdGUiLCJyZWN0Iiwic3IiLCJhbyIsImdlbmVyYXRlVHJhbnNmb3JtIiwic3QiLCJibSIsInRvcCIsInJlbmRlclBsYWluR2x5cGgiLCJhc3NldExpc3QiLCJmb250TGlzdCIsImRvbVR5cGUiLCJTVkdUZXh0RWxlbWVudCIsIlNWR0ltYWdlRWxlbWVudCIsIlNWR0dFbGVtZW50IiwiZG9tTGVhdmVzIiwicHJlY29tcExheWVyIiwicHJlQ29tcEFzc2V0IiwicHJlQ29tcFJlZklkIiwiX3NoYXBlTGF5ZXIiLCJpbWFnZUxheWVyIiwiX3JlbmRlckltYWdlMiIsInJlbmRlckltYWdlIiwiaW1hZ2VSZWZJZCIsImltYWdlQXNzZXQiLCJ0ZXh0TGF5ZXIiLCJiYXNlTGluZUhlaWdodCIsInRleHRBbmNob3JXZWlnaHQiLCJ0ZXh0QW5jaG9yIiwiZmlsbE9wYWNpdHkiLCJfcmVuZGVyVGV4dDIiLCJyZW5kZXJUZXh0IiwidGV4dERhdGEiLCJmTmFtZSIsImhkIiwibGoiLCJzayIsInNhIiwiY29tcHV0ZWRTdHlsZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJmb250Q29sb3IiLCJmb250TmFtZSIsImZvbnRFeGlzdCIsImZGYW1pbHkiLCJmU3R5bGUiLCJmV2VpZ2h0IiwibHMiLCJmYyIsImZvbnREZWYiLCJkb21IZWlnaHRWYWwiLCJiYXNlVmFsIiwiY29udmVydFRvU3BlY2lmaWVkVW5pdHMiLCJTVkdMZW5ndGgiLCJTVkdfTEVOR1RIVFlQRV9QWCIsImRvbVdpZHRoVmFsIiwiY2FudmFzIiwidmFsdWVJblNwZWNpZmllZFVuaXRzIiwiZHJhd0ltYWdlIiwiZGF0YVVybCIsInRvRGF0YVVSTCIsImFzc2V0RXhpc3QiLCJhc3NldCIsImJhc2VEb20iLCJpdGVtcyIsInJlbmRlckdyb3VwIiwicG9zdEFjdGlvbnMiLCJubSIsInN0eWxlcyIsInJhdyIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJwb3NYIiwicG9zWSIsIm9wYWNpdHkiLCJiYXNlVHJhbnNmb3JtIiwiYmFzZUJCb3giLCJhZGRWaXN1YWxFbmNvZGluZ3MiLCJTVkdDaXJjbGVFbGVtZW50Iiwic3ZnTGVuZ3RoIiwiU1ZHRWxsaXBzZUVsZW1lbnQiLCJfbWFwS2V5JG1hcDIiLCJfcGF0aE1ha2VyIiwiU1ZHTGluZUVsZW1lbnQiLCJfbWFwS2V5JG1hcDQiLCJfcGF0aE1ha2VyMiIsIlNWR1BhdGhFbGVtZW50IiwiX3BhdGhNYWtlcjMiLCJTVkdQb2x5Z29uRWxlbWVudCIsIlNWR1BvbHlsaW5lRWxlbWVudCIsInBvaW50cyIsIml0ZXJhYmxlUG9pbnRzIiwiX29mZnNldFgiLCJfb2Zmc2V0WSIsIl9wYXRoTWFrZXI0IiwiU1ZHUmVjdEVsZW1lbnQiLCJfbWFwS2V5MiRtYXAyIiwiX3BhdGhNYWtlcjUiLCJyZW5kZXJHbHlwaCIsInBlZyRTeW50YXhFcnJvciIsIm1lc3NhZ2UiLCJleHBlY3RlZCIsImZvdW5kIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjaGlsZCIsImN0b3IiLCJwZWckc3ViY2xhc3MiLCJidWlsZE1lc3NhZ2UiLCJERVNDUklCRV9FWFBFQ1RBVElPTl9GTlMiLCJsaXRlcmFsIiwiZXhwZWN0YXRpb24iLCJsaXRlcmFsRXNjYXBlIiwiZXNjYXBlZFBhcnRzIiwicGFydHMiLCJjbGFzc0VzY2FwZSIsImludmVydGVkIiwiYW55Iiwib3RoZXIiLCJkZXNjcmlwdGlvbiIsImNoIiwiZGVzY3JpcHRpb25zIiwiZGVzY3JpYmVFeHBlY3RlZCIsImRlc2NyaWJlRm91bmQiLCJTeW50YXhFcnJvciIsImlucHV0IiwicGVnJHJlc3VsdCIsInBlZyRGQUlMRUQiLCJwZWckc3RhcnRSdWxlRnVuY3Rpb25zIiwic3ZnX3BhdGgiLCJwZWckcGFyc2VzdmdfcGF0aCIsInBlZyRzdGFydFJ1bGVGdW5jdGlvbiIsInBlZyRjMCIsImZpcnN0IiwicGVnJGMxIiwibW9yZSIsIm1lcmdlIiwicGVnJGMyIiwicGVnJGMzIiwicGVnJGNsYXNzRXhwZWN0YXRpb24iLCJwZWckYzQiLCJwZWckYzUiLCJwZWckYzYiLCJwZWckYzciLCJwZWckYzgiLCJwZWckYzkiLCJwZWckYzEwIiwicGVnJGMxMSIsInBlZyRjMTIiLCJwZWckYzEzIiwicGVnJGMxNCIsInBlZyRjMTUiLCJwZWckYzE2IiwicGVnJGMxNyIsInBlZyRjMTgiLCJwZWckYzE5IiwicGVnJGMyMCIsInBlZyRjMjEiLCJwZWckYzIyIiwicGVnJGMyMyIsInBlZyRjMjQiLCJwZWckYzI1IiwicGVnJGMyNiIsInBlZyRjMjciLCJwZWckYzI4IiwicGVnJGMyOSIsInBlZyRjMzAiLCJ4cm90IiwibGFyZ2UiLCJwZWckYzMxIiwicGVnJGMzMiIsInBlZyRjMzMiLCJwZWckYzM0IiwicGVnJGMzNSIsInBlZyRjMzYiLCJiaXQiLCJwZWckYzM3IiwicGVnJGMzOCIsInBlZyRjMzkiLCJwZWckbGl0ZXJhbEV4cGVjdGF0aW9uIiwicGVnJGM0MCIsInBlZyRjNDEiLCJwZWckYzQyIiwicGVnJGM0MyIsInBlZyRjNDQiLCJwZWckYzQ1IiwicGVnJGM0NiIsInBlZyRjNDciLCJwZWckYzQ4IiwicGVnJGM0OSIsImRpZ2l0cyIsInBlZyRjNTAiLCJwZWckYzUxIiwicGVnJGN1cnJQb3MiLCJwZWckcG9zRGV0YWlsc0NhY2hlIiwibGluZSIsImNvbHVtbiIsInBlZyRtYXhGYWlsUG9zIiwicGVnJG1heEZhaWxFeHBlY3RlZCIsInBlZyRzaWxlbnRGYWlscyIsInN0YXJ0UnVsZSIsInBlZyRjb21wdXRlUG9zRGV0YWlscyIsImRldGFpbHMiLCJwZWckY29tcHV0ZUxvY2F0aW9uIiwic3RhcnRQb3MiLCJzdGFydFBvc0RldGFpbHMiLCJlbmRQb3NEZXRhaWxzIiwicGVnJGZhaWwiLCJwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IiLCJzMCIsInMzIiwiczQiLCJwZWckcGFyc2V3c3AiLCJzNSIsInBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwIiwicGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXBzIiwiczYiLCJwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIiLCJwZWckcGFyc2Vjb21tYV93c3AiLCJwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2Vtb3ZldG8iLCJwZWckcGFyc2VkcmF3dG9fY29tbWFuZCIsInBlZyRwYXJzZWNsb3NlcGF0aCIsInBlZyRwYXJzZWxpbmV0byIsInBlZyRwYXJzZWNvb3JkaW5hdGVfc2VxdWVuY2UiLCJwZWckcGFyc2Vob3Jpem9udGFsX2xpbmV0byIsInBlZyRwYXJzZXZlcnRpY2FsX2xpbmV0byIsInBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQiLCJwZWckcGFyc2VjdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlY3VydmV0byIsInBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50IiwicGVnJHBhcnNlc21vb3RoX2N1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2VzbW9vdGhfY3VydmV0byIsInBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudCIsInBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0byIsInBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvIiwicGVnJHBhcnNlZWxsaXB0aWNhbF9hcmNfYXJndW1lbnQiLCJwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZWVsbGlwdGljYWxfYXJjIiwicGVnJHBhcnNlbnVtYmVyIiwiczciLCJzOCIsInM5IiwiczEwIiwiczExIiwicGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyIiwicGVnJHBhcnNlZmxhZyIsInBlZyRwYXJzZWZsb2F0aW5nX3BvaW50X2NvbnN0YW50IiwicGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UiLCJwZWckcGFyc2VzaWduIiwicGVnJHBhcnNlY29tbWEiLCJwZWckcGFyc2VmcmFjdGlvbmFsX2NvbnN0YW50IiwicGVnJHBhcnNlZXhwb25lbnQiLCJxIiwieiIsImdldFJhbmRvbVZhbHVlcyIsImNyeXB0byIsIm1zQ3J5cHRvIiwicm5kczgiLCJieXRlVG9IZXgiLCJidGgiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsInBhZEVuZCIsIiRmYWlscyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkR09QUyIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwiRlByb3RvIiwibmFtZVJFIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwiYWNjIiwiZnJhY3Rpb25EaWdpdHMiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIl9pc0Zpbml0ZSIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIiRhY29zaCIsImFjb3NoIiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwic2VhcmNoIiwiJHN0YXJ0c1dpdGgiLCJ1cmwiLCJEYXRlIiwiZ2V0VGltZSIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJjaGFpbiIsIl9jIiwib2siLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJyZWNlaXZlciIsImdldFByb3RvIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCJzZXRQcm90byIsIiRpbmNsdWRlcyIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCIkcGFkIiwiV0VCS0lUX0JVRyIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJpc0Vycm9yIiwiY2xhbXAiLCJsb3dlciIsInVwcGVyIiwiREVHX1BFUl9SQUQiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiZnNjYWxlIiwiaWFkZGgiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsIm9uRmluYWxseSIsIm1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0TWV0YWRhdGEiLCJnZXRNZXRhZGF0YSIsIm9yZGluYXJ5T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlNZXRhZGF0YUtleXMiLCJvS2V5cyIsInBLZXlzIiwiZ2V0TWV0YWRhdGFLZXlzIiwiZ2V0T3duTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCJoYXNPd25NZXRhZGF0YSIsIiRtZXRhZGF0YSIsImFzYXAiLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsIk1TSUUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIkNvbnRleHQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJ1bndyYXBwZWQiLCJyZXR1cm4iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJlc2NhcGUiLCIkcmUiLCJyZWdFeHAiLCJwYXJ0Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLGdCQUFpQixHQUFJSCxHQUNGLGlCQUFaQyxRQUNkQSxRQUF1QixjQUFJRCxJQUUzQkQsRUFBb0IsY0FBSUMsSUFSMUIsQ0FTR0ssT0FBUSxXQUNYLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVUCxRQUduQyxJQUFJQyxFQUFTSSxFQUFpQkUsR0FBWSxDQUN6Q0MsRUFBR0QsRUFDSEUsR0FBRyxFQUNIVCxRQUFTLElBVVYsT0FOQVUsRUFBUUgsR0FBVUksS0FBS1YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU00sR0FHL0RMLEVBQU9RLEdBQUksRUFHSlIsRUFBT0QsUUEwRGYsT0FyREFNLEVBQW9CTSxFQUFJRixFQUd4QkosRUFBb0JPLEVBQUlSLEVBR3hCQyxFQUFvQlEsRUFBSSxTQUFTZCxFQUFTZSxFQUFNQyxHQUMzQ1YsRUFBb0JXLEVBQUVqQixFQUFTZSxJQUNsQ0csT0FBT0MsZUFBZW5CLEVBQVNlLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVYsRUFBb0JnQixFQUFJLFNBQVN0QixHQUNYLG9CQUFYdUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlbkIsRUFBU3VCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUFFeUIsT0FBTyxLQVF2RG5CLEVBQW9Cb0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFuQixFQUFvQm1CLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBeEIsRUFBb0JnQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT25CLEVBQW9CUSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSdkIsRUFBb0IyQixFQUFJLFNBQVNoQyxHQUNoQyxJQUFJZSxFQUFTZixHQUFVQSxFQUFPMkIsV0FDN0IsV0FBd0IsT0FBTzNCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFLLEVBQW9CUSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSVixFQUFvQlcsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekc3QixFQUFvQmdDLEVBQUksR0FJakJoQyxFQUFvQkEsRUFBb0JpQyxFQUFJLEssa0JDbEZyRCxJQUFJQyxFQUFTLEVBQVEsR0FDakJDLEVBQU8sRUFBUSxJQUNmQyxFQUFPLEVBQVEsSUFDZkMsRUFBVyxFQUFRLElBQ25CQyxFQUFNLEVBQVEsSUFHZEMsRUFBVSxTQUFVQyxFQUFNL0IsRUFBTWdDLEdBQ2xDLElBUUloQixFQUFLaUIsRUFBS0MsRUFBS0MsRUFSZkMsRUFBWUwsRUFBT0QsRUFBUU8sRUFDM0JDLEVBQVlQLEVBQU9ELEVBQVFTLEVBQzNCQyxFQUFZVCxFQUFPRCxFQUFRVyxFQUMzQkMsRUFBV1gsRUFBT0QsRUFBUWEsRUFDMUJDLEVBQVViLEVBQU9ELEVBQVFlLEVBQ3pCQyxFQUFTUixFQUFZYixFQUFTZSxFQUFZZixFQUFPekIsS0FBVXlCLEVBQU96QixHQUFRLEtBQU95QixFQUFPekIsSUFBUyxJQUFhLFVBQzlHZixFQUFVcUQsRUFBWVosRUFBT0EsRUFBSzFCLEtBQVUwQixFQUFLMUIsR0FBUSxJQUN6RCtDLEVBQVc5RCxFQUFpQixZQUFNQSxFQUFpQixVQUFJLElBRzNELElBQUsrQixLQUREc0IsSUFBV04sRUFBU2hDLEdBQ1pnQyxFQUlWRSxJQUZBRCxHQUFPRyxHQUFhVSxRQUEwQkUsSUFBaEJGLEVBQU85QixJQUV4QjhCLEVBQVNkLEdBQVFoQixHQUU5Qm1CLEVBQU1TLEdBQVdYLEVBQU1KLEVBQUlLLEVBQUtULEdBQVVpQixHQUEwQixtQkFBUFIsRUFBb0JMLEVBQUlvQixTQUFTckQsS0FBTXNDLEdBQU9BLEVBRXZHWSxHQUFRbEIsRUFBU2tCLEVBQVE5QixFQUFLa0IsRUFBS0gsRUFBT0QsRUFBUW9CLEdBRWxEakUsRUFBUStCLElBQVFrQixHQUFLUCxFQUFLMUMsRUFBUytCLEVBQUttQixHQUN4Q08sR0FBWUssRUFBUy9CLElBQVFrQixJQUFLYSxFQUFTL0IsR0FBT2tCLElBRzFEVCxFQUFPQyxLQUFPQSxFQUVkSSxFQUFRTyxFQUFJLEVBQ1pQLEVBQVFTLEVBQUksRUFDWlQsRUFBUVcsRUFBSSxFQUNaWCxFQUFRYSxFQUFJLEVBQ1piLEVBQVFlLEVBQUksR0FDWmYsRUFBUXFCLEVBQUksR0FDWnJCLEVBQVFvQixFQUFJLEdBQ1pwQixFQUFRc0IsRUFBSSxJQUNabEUsRUFBT0QsUUFBVTZDLEcsZ0JDMUNqQixJQUFJdUIsRUFBVyxFQUFRLEdBQ3ZCbkUsRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsSUFBS0QsRUFBU0MsR0FBSyxNQUFNQyxVQUFVRCxFQUFLLHNCQUN4QyxPQUFPQSxJLGNDRlQsSUFBSTdCLEVBQVN2QyxFQUFPRCxRQUEyQixvQkFBVkksUUFBeUJBLE9BQU9tRSxNQUFRQSxLQUN6RW5FLE9BQXdCLG9CQUFSb0UsTUFBdUJBLEtBQUtELE1BQVFBLEtBQU9DLEtBRTNEUixTQUFTLGNBQVRBLEdBQ2MsaUJBQVBTLE1BQWlCQSxJQUFNakMsSSxjQ0xsQ3ZDLEVBQU9ELFFBQVUsU0FBVTBFLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPQyxHQUNQLE9BQU8sSyxjQ0pYMUUsRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsTUFBcUIsaUJBQVBBLEVBQXlCLE9BQVBBLEVBQTRCLG1CQUFQQSxJLGdCQ0R2RCxJQUFJTyxFQUFRLEVBQVEsR0FBUixDQUFxQixPQUM3QkMsRUFBTSxFQUFRLElBQ2R0RCxFQUFTLEVBQVEsR0FBYUEsT0FDOUJ1RCxFQUE4QixtQkFBVnZELEdBRVR0QixFQUFPRCxRQUFVLFNBQVVlLEdBQ3hDLE9BQU82RCxFQUFNN0QsS0FBVTZELEVBQU03RCxHQUMzQitELEdBQWN2RCxFQUFPUixLQUFVK0QsRUFBYXZELEVBQVNzRCxHQUFLLFVBQVk5RCxNQUdqRTZELE1BQVFBLEcsZ0JDVGpCLElBQUlHLEVBQVksRUFBUSxJQUNwQkMsRUFBTVQsS0FBS1MsSUFDZi9FLEVBQU9ELFFBQVUsU0FBVXFFLEdBQ3pCLE9BQU9BLEVBQUssRUFBSVcsRUFBSUQsRUFBVVYsR0FBSyxrQkFBb0IsSSxnQkNIekRwRSxFQUFPRCxTQUFXLEVBQVEsRUFBUixDQUFvQixXQUNwQyxPQUErRSxHQUF4RWtCLE9BQU9DLGVBQWUsR0FBSSxJQUFLLENBQUVFLElBQUssV0FBYyxPQUFPLEtBQVE0RCxLLGdCQ0Y1RSxJQUFJQyxFQUFXLEVBQVEsR0FDbkJDLEVBQWlCLEVBQVEsS0FDekJDLEVBQWMsRUFBUSxJQUN0QkMsRUFBS25FLE9BQU9DLGVBRWhCbkIsRUFBUXNGLEVBQUksRUFBUSxHQUFvQnBFLE9BQU9DLGVBQWlCLFNBQXdCb0UsRUFBRzdCLEVBQUc4QixHQUk1RixHQUhBTixFQUFTSyxHQUNUN0IsRUFBSTBCLEVBQVkxQixHQUFHLEdBQ25Cd0IsRUFBU00sR0FDTEwsRUFBZ0IsSUFDbEIsT0FBT0UsRUFBR0UsRUFBRzdCLEVBQUc4QixHQUNoQixNQUFPYixJQUNULEdBQUksUUFBU2EsR0FBYyxRQUFTQSxFQUFZLE1BQU1sQixVQUFVLDRCQUVoRSxNQURJLFVBQVdrQixJQUFZRCxFQUFFN0IsR0FBSzhCLEVBQVcvRCxPQUN0QzhELEksZ0JDYlQsSUFBSUUsRUFBVSxFQUFRLElBQ3RCeEYsRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsT0FBT25ELE9BQU91RSxFQUFRcEIsTSxjQ0h4QnBFLEVBQU9ELFFBQVUsU0FBVXFFLEdBQ3pCLEdBQWlCLG1CQUFOQSxFQUFrQixNQUFNQyxVQUFVRCxFQUFLLHVCQUNsRCxPQUFPQSxJLGdCQ0ZULElBQUlnQixFQUFLLEVBQVEsR0FDYkssRUFBYSxFQUFRLElBQ3pCekYsRUFBT0QsUUFBVSxFQUFRLEdBQW9CLFNBQVVrQyxFQUFRSCxFQUFLTixHQUNsRSxPQUFPNEQsRUFBR0MsRUFBRXBELEVBQVFILEVBQUsyRCxFQUFXLEVBQUdqRSxLQUNyQyxTQUFVUyxFQUFRSCxFQUFLTixHQUV6QixPQURBUyxFQUFPSCxHQUFPTixFQUNQUyxJLGdCQ05ULElBQUlNLEVBQVMsRUFBUSxHQUNqQkUsRUFBTyxFQUFRLElBQ2ZpRCxFQUFNLEVBQVEsSUFDZEMsRUFBTSxFQUFRLEdBQVIsQ0FBa0IsT0FDeEJDLEVBQVksRUFBUSxLQUVwQkMsR0FBTyxHQUFLRCxHQUFXRSxNQURYLFlBR2hCLEVBQVEsSUFBV0MsY0FBZ0IsU0FBVTNCLEdBQzNDLE9BQU93QixFQUFVbEYsS0FBSzBELEtBR3ZCcEUsRUFBT0QsUUFBVSxTQUFVdUYsRUFBR3hELEVBQUtrRSxFQUFLQyxHQUN2QyxJQUFJQyxFQUEyQixtQkFBUEYsRUFDcEJFLElBQVlSLEVBQUlNLEVBQUssU0FBV3ZELEVBQUt1RCxFQUFLLE9BQVFsRSxJQUNsRHdELEVBQUV4RCxLQUFTa0UsSUFDWEUsSUFBWVIsRUFBSU0sRUFBS0wsSUFBUWxELEVBQUt1RCxFQUFLTCxFQUFLTCxFQUFFeEQsR0FBTyxHQUFLd0QsRUFBRXhELEdBQU8rRCxFQUFJTSxLQUFLQyxPQUFPdEUsTUFDbkZ3RCxJQUFNL0MsRUFDUitDLEVBQUV4RCxHQUFPa0UsRUFDQ0MsRUFHRFgsRUFBRXhELEdBQ1h3RCxFQUFFeEQsR0FBT2tFLEVBRVR2RCxFQUFLNkMsRUFBR3hELEVBQUtrRSxXQUxOVixFQUFFeEQsR0FDVFcsRUFBSzZDLEVBQUd4RCxFQUFLa0UsT0FPZGpDLFNBQVM1QixVQXZCSSxXQXVCa0IsV0FDaEMsTUFBc0IsbUJBQVJrRSxNQUFzQkEsS0FBS1YsSUFBUUMsRUFBVWxGLEtBQUsyRixTLGdCQzdCbEUsSUFBSXpELEVBQVUsRUFBUSxHQUNsQjBELEVBQVEsRUFBUSxHQUNoQmQsRUFBVSxFQUFRLElBQ2xCZSxFQUFPLEtBRVBDLEVBQWEsU0FBVUMsRUFBUUMsRUFBS0MsRUFBV25GLEdBQ2pELElBQUkrQixFQUFJNkMsT0FBT1osRUFBUWlCLElBQ25CRyxFQUFLLElBQU1GLEVBRWYsTUFEa0IsS0FBZEMsSUFBa0JDLEdBQU0sSUFBTUQsRUFBWSxLQUFPUCxPQUFPNUUsR0FBT3FGLFFBQVFOLEVBQU0sVUFBWSxLQUN0RkssRUFBSyxJQUFNckQsRUFBSSxLQUFPbUQsRUFBTSxLQUVyQzFHLEVBQU9ELFFBQVUsU0FBVStHLEVBQU1yQyxHQUMvQixJQUFJYSxFQUFJLEdBQ1JBLEVBQUV3QixHQUFRckMsRUFBSytCLEdBQ2Y1RCxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxFQUFJbUQsRUFBTSxXQUNwQyxJQUFJUyxFQUFPLEdBQUdELEdBQU0sS0FDcEIsT0FBT0MsSUFBU0EsRUFBS0MsZUFBaUJELEVBQUtqQixNQUFNLEtBQUttQixPQUFTLElBQzdELFNBQVUzQixLLGNDakJoQixJQUFJbEQsRUFBaUIsR0FBR0EsZUFDeEJwQyxFQUFPRCxRQUFVLFNBQVVxRSxFQUFJdEMsR0FDN0IsT0FBT00sRUFBZTFCLEtBQUswRCxFQUFJdEMsSyxnQkNEakMsSUFBSW9GLEVBQVUsRUFBUSxJQUNsQjFCLEVBQVUsRUFBUSxJQUN0QnhGLEVBQU9ELFFBQVUsU0FBVXFFLEdBQ3pCLE9BQU84QyxFQUFRMUIsRUFBUXBCLE0sZ0JDSnpCLElBQUkrQyxFQUFNLEVBQVEsSUFDZDFCLEVBQWEsRUFBUSxJQUNyQjJCLEVBQVksRUFBUSxJQUNwQmpDLEVBQWMsRUFBUSxJQUN0Qk8sRUFBTSxFQUFRLElBQ2RSLEVBQWlCLEVBQVEsS0FDekJtQyxFQUFPcEcsT0FBT3FHLHlCQUVsQnZILEVBQVFzRixFQUFJLEVBQVEsR0FBb0JnQyxFQUFPLFNBQWtDL0IsRUFBRzdCLEdBR2xGLEdBRkE2QixFQUFJOEIsRUFBVTlCLEdBQ2Q3QixFQUFJMEIsRUFBWTFCLEdBQUcsR0FDZnlCLEVBQWdCLElBQ2xCLE9BQU9tQyxFQUFLL0IsRUFBRzdCLEdBQ2YsTUFBT2lCLElBQ1QsR0FBSWdCLEVBQUlKLEVBQUc3QixHQUFJLE9BQU9nQyxHQUFZMEIsRUFBSTlCLEVBQUUzRSxLQUFLNEUsRUFBRzdCLEdBQUk2QixFQUFFN0IsTSxnQkNieEQsSUFBSWlDLEVBQU0sRUFBUSxJQUNkNkIsRUFBVyxFQUFRLEdBQ25CQyxFQUFXLEVBQVEsR0FBUixDQUF5QixZQUNwQ0MsRUFBY3hHLE9BQU9rQixVQUV6Qm5DLEVBQU9ELFFBQVVrQixPQUFPeUcsZ0JBQWtCLFNBQVVwQyxHQUVsRCxPQURBQSxFQUFJaUMsRUFBU2pDLEdBQ1RJLEVBQUlKLEVBQUdrQyxHQUFrQmxDLEVBQUVrQyxHQUNILG1CQUFqQmxDLEVBQUVxQyxhQUE2QnJDLGFBQWFBLEVBQUVxQyxZQUNoRHJDLEVBQUVxQyxZQUFZeEYsVUFDZG1ELGFBQWFyRSxPQUFTd0csRUFBYyxPLGNDWC9DLElBQUlqRixFQUFPeEMsRUFBT0QsUUFBVSxDQUFFNkgsUUFBUyxTQUNyQixpQkFBUEMsTUFBaUJBLElBQU1yRixJLGdCQ0FsQyxJQUFJc0YsRUFBWSxFQUFRLElBQ3hCOUgsRUFBT0QsUUFBVSxTQUFVZ0ksRUFBSUMsRUFBTWYsR0FFbkMsR0FEQWEsRUFBVUMsUUFDR2pFLElBQVRrRSxFQUFvQixPQUFPRCxFQUMvQixPQUFRZCxHQUNOLEtBQUssRUFBRyxPQUFPLFNBQVVqQyxHQUN2QixPQUFPK0MsRUFBR3JILEtBQUtzSCxFQUFNaEQsSUFFdkIsS0FBSyxFQUFHLE9BQU8sU0FBVUEsRUFBR2lELEdBQzFCLE9BQU9GLEVBQUdySCxLQUFLc0gsRUFBTWhELEVBQUdpRCxJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVakQsRUFBR2lELEVBQUdySCxHQUM3QixPQUFPbUgsRUFBR3JILEtBQUtzSCxFQUFNaEQsRUFBR2lELEVBQUdySCxJQUcvQixPQUFPLFdBQ0wsT0FBT21ILEVBQUdHLE1BQU1GLEVBQU1HLGMsY0NqQjFCLElBQUlDLEVBQVcsR0FBR0EsU0FFbEJwSSxFQUFPRCxRQUFVLFNBQVVxRSxHQUN6QixPQUFPZ0UsRUFBUzFILEtBQUswRCxHQUFJaUUsTUFBTSxHQUFJLEssY0NGckMsSUFBSUMsRUFBT2hFLEtBQUtnRSxLQUNaQyxFQUFRakUsS0FBS2lFLE1BQ2pCdkksRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsT0FBT29FLE1BQU1wRSxHQUFNQSxHQUFNLEdBQUtBLEVBQUssRUFBSW1FLEVBQVFELEdBQU1sRSxLLDZCQ0h2RCxJQUFJa0MsRUFBUSxFQUFRLEdBRXBCdEcsRUFBT0QsUUFBVSxTQUFVMEksRUFBUUMsR0FDakMsUUFBU0QsR0FBVW5DLEVBQU0sV0FFdkJvQyxFQUFNRCxFQUFPL0gsS0FBSyxLQUFNLGFBQTZCLEdBQUsrSCxFQUFPL0gsS0FBSyxVLGdCQ0wxRSxJQUFJeUQsRUFBVyxFQUFRLEdBR3ZCbkUsRUFBT0QsUUFBVSxTQUFVcUUsRUFBSWIsR0FDN0IsSUFBS1ksRUFBU0MsR0FBSyxPQUFPQSxFQUMxQixJQUFJMkQsRUFBSS9CLEVBQ1IsR0FBSXpDLEdBQWtDLG1CQUFyQndFLEVBQUszRCxFQUFHZ0UsWUFBNEJqRSxFQUFTNkIsRUFBTStCLEVBQUdySCxLQUFLMEQsSUFBTSxPQUFPNEIsRUFDekYsR0FBZ0MsbUJBQXBCK0IsRUFBSzNELEVBQUd1RSxXQUEyQnhFLEVBQVM2QixFQUFNK0IsRUFBR3JILEtBQUswRCxJQUFNLE9BQU80QixFQUNuRixJQUFLekMsR0FBa0MsbUJBQXJCd0UsRUFBSzNELEVBQUdnRSxZQUE0QmpFLEVBQVM2QixFQUFNK0IsRUFBR3JILEtBQUswRCxJQUFNLE9BQU80QixFQUMxRixNQUFNM0IsVUFBVSw2QyxjQ1RsQnJFLEVBQU9ELFFBQVUsU0FBVXFFLEdBQ3pCLEdBQVVOLE1BQU5NLEVBQWlCLE1BQU1DLFVBQVUseUJBQTJCRCxHQUNoRSxPQUFPQSxJLGdCQ0ZULElBQUl4QixFQUFVLEVBQVEsR0FDbEJKLEVBQU8sRUFBUSxJQUNmOEQsRUFBUSxFQUFRLEdBQ3BCdEcsRUFBT0QsUUFBVSxTQUFVNkksRUFBS25FLEdBQzlCLElBQUlzRCxHQUFNdkYsRUFBS3ZCLFFBQVUsSUFBSTJILElBQVEzSCxPQUFPMkgsR0FDeEMzRixFQUFNLEdBQ1ZBLEVBQUkyRixHQUFPbkUsRUFBS3NELEdBQ2hCbkYsRUFBUUEsRUFBUVcsRUFBSVgsRUFBUU8sRUFBSW1ELEVBQU0sV0FBY3lCLEVBQUcsS0FBUSxTQUFVOUUsSyxnQkNEM0UsSUFBSU4sRUFBTSxFQUFRLElBQ2R1RSxFQUFVLEVBQVEsSUFDbEJLLEVBQVcsRUFBUSxHQUNuQnNCLEVBQVcsRUFBUSxHQUNuQkMsRUFBTSxFQUFRLElBQ2xCOUksRUFBT0QsUUFBVSxTQUFVZ0osRUFBTUMsR0FDL0IsSUFBSUMsRUFBaUIsR0FBUkYsRUFDVEcsRUFBb0IsR0FBUkgsRUFDWkksRUFBa0IsR0FBUkosRUFDVkssRUFBbUIsR0FBUkwsRUFDWE0sRUFBd0IsR0FBUk4sRUFDaEJPLEVBQW1CLEdBQVJQLEdBQWFNLEVBQ3hCeEgsRUFBU21ILEdBQVdGLEVBQ3hCLE9BQU8sU0FBVVMsRUFBT0MsRUFBWXhCLEdBUWxDLElBUEEsSUFNSWhDLEVBQUt5RCxFQU5MbkUsRUFBSWlDLEVBQVNnQyxHQUNiaEYsRUFBTzJDLEVBQVE1QixHQUNmRCxFQUFJMUMsRUFBSTZHLEVBQVl4QixFQUFNLEdBQzFCZixFQUFTNEIsRUFBU3RFLEVBQUswQyxRQUN2QnlDLEVBQVEsRUFDUkMsRUFBU1YsRUFBU3BILEVBQU8wSCxFQUFPdEMsR0FBVWlDLEVBQVlySCxFQUFPMEgsRUFBTyxRQUFLekYsRUFFdkVtRCxFQUFTeUMsRUFBT0EsSUFBUyxJQUFJSixHQUFZSSxLQUFTbkYsS0FFdERrRixFQUFNcEUsRUFETlcsRUFBTXpCLEVBQUttRixHQUNFQSxFQUFPcEUsR0FDaEJ5RCxHQUNGLEdBQUlFLEVBQVFVLEVBQU9ELEdBQVNELE9BQ3ZCLEdBQUlBLEVBQUssT0FBUVYsR0FDcEIsS0FBSyxFQUFHLE9BQU8sRUFDZixLQUFLLEVBQUcsT0FBTy9DLEVBQ2YsS0FBSyxFQUFHLE9BQU8wRCxFQUNmLEtBQUssRUFBR0MsRUFBT0MsS0FBSzVELFFBQ2YsR0FBSW9ELEVBQVUsT0FBTyxFQUdoQyxPQUFPQyxHQUFpQixFQUFJRixHQUFXQyxFQUFXQSxFQUFXTyxLLDZCQ3hDakUsR0FBSSxFQUFRLEdBQW1CLENBQzdCLElBQUlFLEVBQVUsRUFBUSxJQUNsQnRILEVBQVMsRUFBUSxHQUNqQitELEVBQVEsRUFBUSxHQUNoQjFELEVBQVUsRUFBUSxHQUNsQmtILEVBQVMsRUFBUSxJQUNqQkMsRUFBVSxFQUFRLEtBQ2xCcEgsRUFBTSxFQUFRLElBQ2RxSCxFQUFhLEVBQVEsSUFDckJDLEVBQWUsRUFBUSxJQUN2QnhILEVBQU8sRUFBUSxJQUNmeUgsRUFBYyxFQUFRLElBQ3RCcEYsRUFBWSxFQUFRLElBQ3BCK0QsRUFBVyxFQUFRLEdBQ25Cc0IsRUFBVSxFQUFRLEtBQ2xCQyxFQUFrQixFQUFRLElBQzFCakYsRUFBYyxFQUFRLElBQ3RCTyxFQUFNLEVBQVEsSUFDZDJFLEVBQVUsRUFBUSxJQUNsQmxHLEVBQVcsRUFBUSxHQUNuQm9ELEVBQVcsRUFBUSxHQUNuQitDLEVBQWMsRUFBUSxJQUN0QnpJLEVBQVMsRUFBUSxJQUNqQjZGLEVBQWlCLEVBQVEsSUFDekI2QyxFQUFPLEVBQVEsSUFBa0JsRixFQUNqQ21GLEVBQVksRUFBUSxJQUNwQjVGLEVBQU0sRUFBUSxJQUNkNkYsRUFBTSxFQUFRLEdBQ2RDLEVBQW9CLEVBQVEsSUFDNUJDLEVBQXNCLEVBQVEsSUFDOUJDLEVBQXFCLEVBQVEsSUFDN0JDLEVBQWlCLEVBQVEsSUFDekJDLEVBQVksRUFBUSxJQUNwQkMsRUFBYyxFQUFRLElBQ3RCQyxFQUFhLEVBQVEsSUFDckJDLEVBQVksRUFBUSxJQUNwQkMsRUFBa0IsRUFBUSxLQUMxQkMsRUFBTSxFQUFRLEdBQ2RDLEVBQVEsRUFBUSxJQUNoQmhHLEVBQUsrRixFQUFJOUYsRUFDVGdDLEVBQU8rRCxFQUFNL0YsRUFDYmdHLEVBQWE5SSxFQUFPOEksV0FDcEJoSCxFQUFZOUIsRUFBTzhCLFVBQ25CaUgsRUFBYS9JLEVBQU8rSSxXQUtwQkMsRUFBYUMsTUFBZSxVQUM1QkMsRUFBZTFCLEVBQVEyQixZQUN2QkMsRUFBWTVCLEVBQVE2QixTQUNwQkMsRUFBZW5CLEVBQWtCLEdBQ2pDb0IsRUFBY3BCLEVBQWtCLEdBQ2hDcUIsRUFBWXJCLEVBQWtCLEdBQzlCc0IsRUFBYXRCLEVBQWtCLEdBQy9CdUIsRUFBWXZCLEVBQWtCLEdBQzlCd0IsR0FBaUJ4QixFQUFrQixHQUNuQ3lCLEdBQWdCeEIsR0FBb0IsR0FDcEN5QixHQUFlekIsR0FBb0IsR0FDbkMwQixHQUFjeEIsRUFBZXlCLE9BQzdCQyxHQUFZMUIsRUFBZTJCLEtBQzNCQyxHQUFlNUIsRUFBZTZCLFFBQzlCQyxHQUFtQnBCLEVBQVdxQixZQUM5QkMsR0FBY3RCLEVBQVd1QixPQUN6QkMsR0FBbUJ4QixFQUFXeUIsWUFDOUJDLEdBQVkxQixFQUFXcEYsS0FDdkIrRyxHQUFZM0IsRUFBVzRCLEtBQ3ZCQyxHQUFhN0IsRUFBV2xELE1BQ3hCZ0YsR0FBZ0I5QixFQUFXbkQsU0FDM0JrRixHQUFzQi9CLEVBQVdnQyxlQUNqQ0MsR0FBVy9DLEVBQUksWUFDZmdELEdBQU1oRCxFQUFJLGVBQ1ZpRCxHQUFvQjlJLEVBQUkscUJBQ3hCK0ksR0FBa0IvSSxFQUFJLG1CQUN0QmdKLEdBQW1COUQsRUFBTytELE9BQzFCQyxHQUFjaEUsRUFBT2lFLE1BQ3JCQyxHQUFPbEUsRUFBT2tFLEtBR2RDLEdBQU92RCxFQUFrQixFQUFHLFNBQVVwRixFQUFHMkIsR0FDM0MsT0FBT2lILEdBQVN0RCxFQUFtQnRGLEVBQUdBLEVBQUVxSSxLQUFtQjFHLEtBR3pEa0gsR0FBZ0I3SCxFQUFNLFdBRXhCLE9BQTBELElBQW5ELElBQUlnRixFQUFXLElBQUk4QyxZQUFZLENBQUMsSUFBSUMsUUFBUSxLQUdqREMsS0FBZWhELEtBQWdCQSxFQUFvQixVQUFFaUQsS0FBT2pJLEVBQU0sV0FDcEUsSUFBSWdGLEVBQVcsR0FBR2lELElBQUksTUFHcEJDLEdBQVcsU0FBVXBLLEVBQUlxSyxHQUMzQixJQUFJQyxFQUFTNUosRUFBVVYsR0FDdkIsR0FBSXNLLEVBQVMsR0FBS0EsRUFBU0QsRUFBTyxNQUFNcEQsRUFBVyxpQkFDbkQsT0FBT3FELEdBR0xDLEdBQVcsU0FBVXZLLEdBQ3ZCLEdBQUlELEVBQVNDLElBQU8wSixNQUFlMUosRUFBSSxPQUFPQSxFQUM5QyxNQUFNQyxFQUFVRCxFQUFLLDJCQUduQjhKLEdBQVcsU0FBVVUsRUFBRzNILEdBQzFCLEtBQU05QyxFQUFTeUssSUFBTWxCLE1BQXFCa0IsR0FDeEMsTUFBTXZLLEVBQVUsd0NBQ2hCLE9BQU8sSUFBSXVLLEVBQUUzSCxJQUdiNEgsR0FBa0IsU0FBVXZKLEVBQUd3SixHQUNqQyxPQUFPQyxHQUFTbkUsRUFBbUJ0RixFQUFHQSxFQUFFcUksS0FBbUJtQixJQUd6REMsR0FBVyxTQUFVSCxFQUFHRSxHQUkxQixJQUhBLElBQUlwRixFQUFRLEVBQ1J6QyxFQUFTNkgsRUFBSzdILE9BQ2QwQyxFQUFTdUUsR0FBU1UsRUFBRzNILEdBQ2xCQSxFQUFTeUMsR0FBT0MsRUFBT0QsR0FBU29GLEVBQUtwRixLQUM1QyxPQUFPQyxHQUdMcUYsR0FBWSxTQUFVNUssRUFBSXRDLEVBQUttTixHQUNqQzdKLEVBQUdoQixFQUFJdEMsRUFBSyxDQUFFVixJQUFLLFdBQWMsT0FBT2lGLEtBQUs2SSxHQUFHRCxPQUc5Q0UsR0FBUSxTQUFjck0sR0FDeEIsSUFLSXZDLEVBQUcwRyxFQUFRcUYsRUFBUTNDLEVBQVF5RixFQUFNQyxFQUxqQy9KLEVBQUlpQyxFQUFTekUsR0FDYndNLEVBQU9uSCxVQUFVbEIsT0FDakJzSSxFQUFRRCxFQUFPLEVBQUluSCxVQUFVLFFBQUtyRSxFQUNsQzBMLE9BQW9CMUwsSUFBVnlMLEVBQ1ZFLEVBQVNqRixFQUFVbEYsR0FFdkIsR0FBY3hCLE1BQVYyTCxJQUF3Qm5GLEVBQVltRixHQUFTLENBQy9DLElBQUtKLEVBQVdJLEVBQU8vTyxLQUFLNEUsR0FBSWdILEVBQVMsR0FBSS9MLEVBQUksSUFBSzZPLEVBQU9DLEVBQVNLLFFBQVFDLEtBQU1wUCxJQUNsRitMLEVBQU8xQyxLQUFLd0YsRUFBSzVOLE9BQ2pCOEQsRUFBSWdILEVBR1IsSUFESWtELEdBQVdGLEVBQU8sSUFBR0MsRUFBUTVNLEVBQUk0TSxFQUFPcEgsVUFBVSxHQUFJLElBQ3JENUgsRUFBSSxFQUFHMEcsRUFBUzRCLEVBQVN2RCxFQUFFMkIsUUFBUzBDLEVBQVN1RSxHQUFTN0gsS0FBTVksR0FBU0EsRUFBUzFHLEVBQUdBLElBQ3BGb0osRUFBT3BKLEdBQUtpUCxFQUFVRCxFQUFNakssRUFBRS9FLEdBQUlBLEdBQUsrRSxFQUFFL0UsR0FFM0MsT0FBT29KLEdBR0xpRyxHQUFNLFdBSVIsSUFIQSxJQUFJbEcsRUFBUSxFQUNSekMsRUFBU2tCLFVBQVVsQixPQUNuQjBDLEVBQVN1RSxHQUFTN0gsS0FBTVksR0FDckJBLEVBQVN5QyxHQUFPQyxFQUFPRCxHQUFTdkIsVUFBVXVCLEtBQ2pELE9BQU9DLEdBSUxrRyxLQUFrQnZFLEdBQWNoRixFQUFNLFdBQWNnSCxHQUFvQjVNLEtBQUssSUFBSTRLLEVBQVcsTUFFNUZ3RSxHQUFrQixXQUNwQixPQUFPeEMsR0FBb0JwRixNQUFNMkgsR0FBZ0J6QyxHQUFXMU0sS0FBS2lPLEdBQVN0SSxPQUFTc0ksR0FBU3RJLE1BQU84QixZQUdqRzRILEdBQVEsQ0FDVkMsV0FBWSxTQUFvQnBNLEVBQVFxTSxHQUN0QyxPQUFPL0UsRUFBZ0J4SyxLQUFLaU8sR0FBU3RJLE1BQU96QyxFQUFRcU0sRUFBTzlILFVBQVVsQixPQUFTLEVBQUlrQixVQUFVLFFBQUtyRSxJQUVuR29NLE1BQU8sU0FBZTFHLEdBQ3BCLE9BQU93QyxFQUFXMkMsR0FBU3RJLE1BQU9tRCxFQUFZckIsVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLElBRXRGcU0sS0FBTSxTQUFjM08sR0FDbEIsT0FBT3lKLEVBQVUvQyxNQUFNeUcsR0FBU3RJLE1BQU84QixZQUV6Q2lJLE9BQVEsU0FBZ0I1RyxHQUN0QixPQUFPcUYsR0FBZ0J4SSxLQUFNeUYsRUFBWTZDLEdBQVN0SSxNQUFPbUQsRUFDdkRyQixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsS0FFMUN1TSxLQUFNLFNBQWNDLEdBQ2xCLE9BQU9yRSxFQUFVMEMsR0FBU3RJLE1BQU9pSyxFQUFXbkksVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLElBRXBGeU0sVUFBVyxTQUFtQkQsR0FDNUIsT0FBT3BFLEdBQWV5QyxHQUFTdEksTUFBT2lLLEVBQVduSSxVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsSUFFekYwTSxRQUFTLFNBQWlCaEgsR0FDeEJxQyxFQUFhOEMsR0FBU3RJLE1BQU9tRCxFQUFZckIsVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLElBRWpGMk0sUUFBUyxTQUFpQkMsR0FDeEIsT0FBT3RFLEdBQWF1QyxHQUFTdEksTUFBT3FLLEVBQWV2SSxVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsSUFFM0Y2TSxTQUFVLFNBQWtCRCxHQUMxQixPQUFPdkUsR0FBY3dDLEdBQVN0SSxNQUFPcUssRUFBZXZJLFVBQVVsQixPQUFTLEVBQUlrQixVQUFVLFFBQUtyRSxJQUU1RnFDLEtBQU0sU0FBY3lLLEdBQ2xCLE9BQU8zRCxHQUFVL0UsTUFBTXlHLEdBQVN0SSxNQUFPOEIsWUFFekN5RSxZQUFhLFNBQXFCOEQsR0FDaEMsT0FBTy9ELEdBQWlCekUsTUFBTXlHLEdBQVN0SSxNQUFPOEIsWUFFaEQwSSxJQUFLLFNBQWF0QixHQUNoQixPQUFPdEIsR0FBS1UsR0FBU3RJLE1BQU9rSixFQUFPcEgsVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLElBRTNFZ0osT0FBUSxTQUFnQnRELEdBQ3RCLE9BQU9xRCxHQUFZM0UsTUFBTXlHLEdBQVN0SSxNQUFPOEIsWUFFM0M2RSxZQUFhLFNBQXFCeEQsR0FDaEMsT0FBT3VELEdBQWlCN0UsTUFBTXlHLEdBQVN0SSxNQUFPOEIsWUFFaEQySSxRQUFTLFdBTVAsSUFMQSxJQUlJdFAsRUFIQXlGLEVBQVMwSCxHQURGdEksTUFDaUJZLE9BQ3hCOEosRUFBU3pNLEtBQUtpRSxNQUFNdEIsRUFBUyxHQUM3QnlDLEVBQVEsRUFFTEEsRUFBUXFILEdBQ2J2UCxFQU5TNkUsS0FNSXFELEdBTkpyRCxLQU9KcUQsS0FQSXJELE9BT2NZLEdBUGRaLEtBUUpZLEdBQVV6RixFQUNmLE9BVFM2RSxNQVdiMkssS0FBTSxTQUFjeEgsR0FDbEIsT0FBT3VDLEVBQVU0QyxHQUFTdEksTUFBT21ELEVBQVlyQixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsSUFFckZxSixLQUFNLFNBQWM4RCxHQUNsQixPQUFPL0QsR0FBVXhNLEtBQUtpTyxHQUFTdEksTUFBTzRLLElBRXhDQyxTQUFVLFNBQWtCQyxFQUFPQyxHQUNqQyxJQUFJOUwsRUFBSXFKLEdBQVN0SSxNQUNiWSxFQUFTM0IsRUFBRTJCLE9BQ1hvSyxFQUFTakgsRUFBZ0IrRyxFQUFPbEssR0FDcEMsT0FBTyxJQUFLMkQsRUFBbUJ0RixFQUFHQSxFQUFFcUksS0FBN0IsQ0FDTHJJLEVBQUUrSSxPQUNGL0ksRUFBRWdNLFdBQWFELEVBQVMvTCxFQUFFaU0sa0JBQzFCMUksUUFBa0IvRSxJQUFSc04sRUFBb0JuSyxFQUFTbUQsRUFBZ0JnSCxFQUFLbkssSUFBV29LLE1BS3pFRyxHQUFTLFNBQWV2QixFQUFPbUIsR0FDakMsT0FBT3ZDLEdBQWdCeEksS0FBTStHLEdBQVcxTSxLQUFLaU8sR0FBU3RJLE1BQU80SixFQUFPbUIsS0FHbEVLLEdBQU8sU0FBYUMsR0FDdEIvQyxHQUFTdEksTUFDVCxJQUFJcUksRUFBU0YsR0FBU3JHLFVBQVUsR0FBSSxHQUNoQ2xCLEVBQVNaLEtBQUtZLE9BQ2QwSyxFQUFNcEssRUFBU21LLEdBQ2ZFLEVBQU0vSSxFQUFTOEksRUFBSTFLLFFBQ25CeUMsRUFBUSxFQUNaLEdBQUlrSSxFQUFNbEQsRUFBU3pILEVBQVEsTUFBTW9FLEVBdktoQixpQkF3S2pCLEtBQU8zQixFQUFRa0ksR0FBS3ZMLEtBQUtxSSxFQUFTaEYsR0FBU2lJLEVBQUlqSSxNQUc3Q21JLEdBQWEsQ0FDZm5GLFFBQVMsV0FDUCxPQUFPRCxHQUFhL0wsS0FBS2lPLEdBQVN0SSxRQUVwQ21HLEtBQU0sV0FDSixPQUFPRCxHQUFVN0wsS0FBS2lPLEdBQVN0SSxRQUVqQ2lHLE9BQVEsV0FDTixPQUFPRCxHQUFZM0wsS0FBS2lPLEdBQVN0SSxTQUlqQ3lMLEdBQVksU0FBVWxPLEVBQVE5QixHQUNoQyxPQUFPcUMsRUFBU1AsSUFDWEEsRUFBT2tLLEtBQ08saUJBQVBoTSxHQUNQQSxLQUFPOEIsR0FDUHdDLFFBQVF0RSxJQUFRc0UsT0FBT3RFLElBRTFCaVEsR0FBVyxTQUFrQ25PLEVBQVE5QixHQUN2RCxPQUFPZ1EsR0FBVWxPLEVBQVE5QixFQUFNcUQsRUFBWXJELEdBQUssSUFDNUNtSSxFQUFhLEVBQUdyRyxFQUFPOUIsSUFDdkJ1RixFQUFLekQsRUFBUTlCLElBRWZrUSxHQUFXLFNBQXdCcE8sRUFBUTlCLEVBQUttUSxHQUNsRCxRQUFJSCxHQUFVbE8sRUFBUTlCLEVBQU1xRCxFQUFZckQsR0FBSyxLQUN4Q3FDLEVBQVM4TixJQUNUdk0sRUFBSXVNLEVBQU0sV0FDVHZNLEVBQUl1TSxFQUFNLFFBQ1Z2TSxFQUFJdU0sRUFBTSxRQUVWQSxFQUFLQyxjQUNKeE0sRUFBSXVNLEVBQU0sY0FBZUEsRUFBS0UsVUFDOUJ6TSxFQUFJdU0sRUFBTSxnQkFBaUJBLEVBQUs5USxXQUk5QmlFLEVBQUd4QixFQUFROUIsRUFBS21RLElBRnZCck8sRUFBTzlCLEdBQU9tUSxFQUFLelEsTUFDWm9DLElBSU5nSyxLQUNIeEMsRUFBTS9GLEVBQUkwTSxHQUNWNUcsRUFBSTlGLEVBQUkyTSxJQUdWcFAsRUFBUUEsRUFBUVcsRUFBSVgsRUFBUU8sR0FBS3lLLEdBQWtCLFNBQVUsQ0FDM0R0Ryx5QkFBMEJ5SyxHQUMxQjdRLGVBQWdCOFEsS0FHZDFMLEVBQU0sV0FBYytHLEdBQWMzTSxLQUFLLFFBQ3pDMk0sR0FBZ0JDLEdBQXNCLFdBQ3BDLE9BQU9MLEdBQVV2TSxLQUFLMkYsUUFJMUIsSUFBSStMLEdBQXdCbEksRUFBWSxHQUFJNkYsSUFDNUM3RixFQUFZa0ksR0FBdUJQLElBQ25DcFAsRUFBSzJQLEdBQXVCNUUsR0FBVXFFLEdBQVd2RixRQUNqRHBDLEVBQVlrSSxHQUF1QixDQUNqQy9KLE1BQU9tSixHQUNQakQsSUFBS2tELEdBQ0w5SixZQUFhLGFBQ2JTLFNBQVVpRixHQUNWRSxlQUFnQnVDLEtBRWxCZCxHQUFVb0QsR0FBdUIsU0FBVSxLQUMzQ3BELEdBQVVvRCxHQUF1QixhQUFjLEtBQy9DcEQsR0FBVW9ELEdBQXVCLGFBQWMsS0FDL0NwRCxHQUFVb0QsR0FBdUIsU0FBVSxLQUMzQ2hOLEVBQUdnTixHQUF1QjNFLEdBQUssQ0FDN0JyTSxJQUFLLFdBQWMsT0FBT2lGLEtBQUt5SCxPQUlqQzlOLEVBQU9ELFFBQVUsU0FBVTZJLEVBQUs2RixFQUFPNEQsRUFBU0MsR0FFOUMsSUFBSXhMLEVBQU84QixJQURYMEosSUFBWUEsR0FDZ0IsVUFBWSxJQUFNLFFBQzFDQyxFQUFTLE1BQVEzSixFQUNqQjRKLEVBQVMsTUFBUTVKLEVBQ2pCNkosRUFBYWxRLEVBQU91RSxHQUNwQjRMLEVBQU9ELEdBQWMsR0FDckJFLEVBQU1GLEdBQWMvSyxFQUFlK0ssR0FDbkNHLEdBQVVILElBQWUzSSxFQUFPK0ksSUFDaEN2TixFQUFJLEdBQ0p3TixFQUFzQkwsR0FBY0EsRUFBb0IsVUFVeERNLEVBQWEsU0FBVS9LLEVBQU0wQixHQUMvQnRFLEVBQUc0QyxFQUFNMEIsRUFBTyxDQUNkdEksSUFBSyxXQUNILE9BWk8sU0FBVTRHLEVBQU0wQixHQUMzQixJQUFJc0osRUFBT2hMLEVBQUtrSCxHQUNoQixPQUFPOEQsRUFBS0MsRUFBRVYsR0FBUTdJLEVBQVErRSxFQUFRdUUsRUFBS2hTLEVBQUdtTixJQVVuQ3BOLENBQU9zRixLQUFNcUQsSUFFdEI2RSxJQUFLLFNBQVUvTSxHQUNiLE9BWE8sU0FBVXdHLEVBQU0wQixFQUFPbEksR0FDbEMsSUFBSXdSLEVBQU9oTCxFQUFLa0gsR0FDWm9ELElBQVM5USxHQUFTQSxFQUFROEMsS0FBSzRPLE1BQU0xUixJQUFVLEVBQUksRUFBSUEsRUFBUSxJQUFPLElBQWUsSUFBUkEsR0FDakZ3UixFQUFLQyxFQUFFVCxHQUFROUksRUFBUStFLEVBQVF1RSxFQUFLaFMsRUFBR1EsRUFBTzJNLElBUW5DZ0YsQ0FBTzlNLEtBQU1xRCxFQUFPbEksSUFFN0JMLFlBQVksS0FHWnlSLEdBQ0ZILEVBQWFKLEVBQVEsU0FBVXJLLEVBQU1nTCxFQUFNSSxFQUFTQyxHQUNsRHJKLEVBQVdoQyxFQUFNeUssRUFBWTNMLEVBQU0sTUFDbkMsSUFFSXVILEVBQVFpRixFQUFZck0sRUFBUXNNLEVBRjVCN0osRUFBUSxFQUNSZ0YsRUFBUyxFQUViLEdBQUt2SyxFQUFTNk8sR0FJUCxNQUFJQSxhQUFnQnZILEdBaFVkLGdCQWdVK0I4SCxFQUFRbEosRUFBUTJJLEtBL1Q5QyxxQkErVHdFTyxHQWEvRSxPQUFJekYsTUFBZWtGLEVBQ2pCakUsR0FBUzBELEVBQVlPLEdBRXJCN0QsR0FBTXpPLEtBQUsrUixFQUFZTyxHQWY5QjNFLEVBQVMyRSxFQUNUdEUsRUFBU0YsR0FBUzRFLEVBQVMzRSxHQUMzQixJQUFJK0UsRUFBT1IsRUFBS00sV0FDaEIsUUFBZ0J4UCxJQUFadVAsRUFBdUIsQ0FDekIsR0FBSUcsRUFBTy9FLEVBQU8sTUFBTXBELEVBcFNmLGlCQXNTVCxJQURBaUksRUFBYUUsRUFBTzlFLEdBQ0gsRUFBRyxNQUFNckQsRUF0U2pCLHNCQXlTVCxJQURBaUksRUFBYXpLLEVBQVN3SyxHQUFXNUUsR0FDaEJDLEVBQVM4RSxFQUFNLE1BQU1uSSxFQXpTN0IsaUJBMlNYcEUsRUFBU3FNLEVBQWE3RSxPQWZ0QnhILEVBQVNrRCxFQUFRNkksR0FFakIzRSxFQUFTLElBQUk1QyxFQURiNkgsRUFBYXJNLEVBQVN3SCxHQTJCeEIsSUFQQWhNLEVBQUt1RixFQUFNLEtBQU0sQ0FDZkMsRUFBR29HLEVBQ0hyTixFQUFHME4sRUFDSGxPLEVBQUc4UyxFQUNINU8sRUFBR3VDLEVBQ0hnTSxFQUFHLElBQUl0SCxFQUFVMEMsS0FFWjNFLEVBQVF6QyxHQUFROEwsRUFBVy9LLEVBQU0wQixPQUUxQ29KLEVBQXNCTCxFQUFvQixVQUFJNVEsRUFBT3VRLElBQ3JEM1AsRUFBS3FRLEVBQXFCLGNBQWVMLElBQy9Cbk0sRUFBTSxXQUNoQm1NLEVBQVcsTUFDTm5NLEVBQU0sV0FDWCxJQUFJbU0sR0FBWSxNQUNYMUgsRUFBWSxTQUFVMEksR0FDM0IsSUFBSWhCLEVBQ0osSUFBSUEsRUFBVyxNQUNmLElBQUlBLEVBQVcsS0FDZixJQUFJQSxFQUFXZ0IsS0FDZCxLQUNEaEIsRUFBYUosRUFBUSxTQUFVckssRUFBTWdMLEVBQU1JLEVBQVNDLEdBRWxELElBQUlFLEVBR0osT0FKQXZKLEVBQVdoQyxFQUFNeUssRUFBWTNMLEdBSXhCM0MsRUFBUzZPLEdBQ1ZBLGFBQWdCdkgsR0E3V1AsZ0JBNld3QjhILEVBQVFsSixFQUFRMkksS0E1V3ZDLHFCQTRXaUVPLE9BQzFEelAsSUFBWnVQLEVBQ0gsSUFBSVgsRUFBS00sRUFBTXhFLEdBQVM0RSxFQUFTM0UsR0FBUTRFLFFBQzdCdlAsSUFBWnNQLEVBQ0UsSUFBSVYsRUFBS00sRUFBTXhFLEdBQVM0RSxFQUFTM0UsSUFDakMsSUFBSWlFLEVBQUtNLEdBRWJsRixNQUFla0YsRUFBYWpFLEdBQVMwRCxFQUFZTyxHQUM5QzdELEdBQU16TyxLQUFLK1IsRUFBWU8sR0FURixJQUFJTixFQUFLdkksRUFBUTZJLE1BVy9DbkgsRUFBYThHLElBQVE1TyxTQUFTNUIsVUFBWW9JLEVBQUttSSxHQUFNZ0IsT0FBT25KLEVBQUtvSSxJQUFRcEksRUFBS21JLEdBQU8sU0FBVTVRLEdBQ3ZGQSxLQUFPMlEsR0FBYWhRLEVBQUtnUSxFQUFZM1EsRUFBSzRRLEVBQUs1USxNQUV2RDJRLEVBQW9CLFVBQUlLLEVBQ25CakosSUFBU2lKLEVBQW9CbkwsWUFBYzhLLElBRWxELElBQUlrQixFQUFrQmIsRUFBb0J0RixJQUN0Q29HLElBQXNCRCxJQUNJLFVBQXhCQSxFQUFnQjdTLE1BQTRDZ0QsTUFBeEI2UCxFQUFnQjdTLE1BQ3REK1MsRUFBWWhDLEdBQVd2RixPQUMzQjdKLEVBQUtnUSxFQUFZL0UsSUFBbUIsR0FDcENqTCxFQUFLcVEsRUFBcUJoRixHQUFhaEgsR0FDdkNyRSxFQUFLcVEsRUFBcUI5RSxJQUFNLEdBQ2hDdkwsRUFBS3FRLEVBQXFCbkYsR0FBaUI4RSxJQUV2Q0gsRUFBVSxJQUFJRyxFQUFXLEdBQUdoRixLQUFRM0csRUFBUzJHLE1BQU9xRixJQUN0RDFOLEVBQUcwTixFQUFxQnJGLEdBQUssQ0FDM0JyTSxJQUFLLFdBQWMsT0FBTzBGLEtBSTlCeEIsRUFBRXdCLEdBQVEyTCxFQUVWN1AsRUFBUUEsRUFBUVMsRUFBSVQsRUFBUXFCLEVBQUlyQixFQUFRTyxHQUFLc1AsR0FBY0MsR0FBT3BOLEdBRWxFMUMsRUFBUUEsRUFBUVcsRUFBR3VELEVBQU0sQ0FDdkJ5SyxrQkFBbUI5QyxJQUdyQjdMLEVBQVFBLEVBQVFXLEVBQUlYLEVBQVFPLEVBQUltRCxFQUFNLFdBQWNvTSxFQUFLb0IsR0FBR3BULEtBQUsrUixFQUFZLEtBQVEzTCxFQUFNLENBQ3pGaU4sS0FBTTVFLEdBQ04yRSxHQUFJbEUsS0FwWmdCLHNCQXVaS2tELEdBQXNCclEsRUFBS3FRLEVBdlpoQyxvQkF1WndFckUsR0FFOUY3TCxFQUFRQSxFQUFRYSxFQUFHcUQsRUFBTWlKLElBRXpCL0UsRUFBV2xFLEdBRVhsRSxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxFQUFJbUwsR0FBWXhILEVBQU0sQ0FBRXlILElBQUtrRCxLQUV6RDdPLEVBQVFBLEVBQVFhLEVBQUliLEVBQVFPLEdBQUt5USxFQUFtQjlNLEVBQU0rSyxJQUVyRGhJLEdBQVdpSixFQUFvQjFLLFVBQVlpRixLQUFleUYsRUFBb0IxSyxTQUFXaUYsSUFFOUZ6SyxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxFQUFJbUQsRUFBTSxXQUNwQyxJQUFJbU0sRUFBVyxHQUFHcEssVUFDaEJ2QixFQUFNLENBQUV1QixNQUFPbUosS0FFbkI1TyxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxHQUFLbUQsRUFBTSxXQUNyQyxNQUFPLENBQUMsRUFBRyxHQUFHaUgsa0JBQW9CLElBQUlrRixFQUFXLENBQUMsRUFBRyxJQUFJbEYscUJBQ3BEakgsRUFBTSxXQUNYd00sRUFBb0J2RixlQUFlN00sS0FBSyxDQUFDLEVBQUcsT0FDekNvRyxFQUFNLENBQUV5RyxlQUFnQnVDLEtBRTdCaEYsRUFBVWhFLEdBQVE4TSxFQUFvQkQsRUFBa0JFLEVBQ25EaEssR0FBWStKLEdBQW1CblIsRUFBS3FRLEVBQXFCdEYsR0FBVXFHLFNBRXJFN1QsRUFBT0QsUUFBVSxjLGdCQy9keEIsSUFBSWlVLEVBQU0sRUFBUSxLQUNkcFIsRUFBVSxFQUFRLEdBQ2xCcVIsRUFBUyxFQUFRLEdBQVIsQ0FBcUIsWUFDOUJ0UCxFQUFRc1AsRUFBT3RQLFFBQVVzUCxFQUFPdFAsTUFBUSxJQUFLLEVBQVEsT0FFckR1UCxFQUF5QixTQUFVdFEsRUFBUXVRLEVBQVd0UyxHQUN4RCxJQUFJdVMsRUFBaUJ6UCxFQUFNdkQsSUFBSXdDLEdBQy9CLElBQUt3USxFQUFnQixDQUNuQixJQUFLdlMsRUFBUSxPQUNiOEMsRUFBTTRKLElBQUkzSyxFQUFRd1EsRUFBaUIsSUFBSUosR0FFekMsSUFBSUssRUFBY0QsRUFBZWhULElBQUkrUyxHQUNyQyxJQUFLRSxFQUFhLENBQ2hCLElBQUt4UyxFQUFRLE9BQ2J1UyxFQUFlN0YsSUFBSTRGLEVBQVdFLEVBQWMsSUFBSUwsR0FDaEQsT0FBT0ssR0EwQlhyVSxFQUFPRCxRQUFVLENBQ2Y0RSxNQUFPQSxFQUNQa00sSUFBS3FELEVBQ0x4TyxJQTNCMkIsU0FBVTRPLEVBQWFoUCxFQUFHN0IsR0FDckQsSUFBSThRLEVBQWNMLEVBQXVCNU8sRUFBRzdCLEdBQUcsR0FDL0MsWUFBdUJLLElBQWhCeVEsR0FBb0NBLEVBQVk3TyxJQUFJNE8sSUEwQjNEbFQsSUF4QjJCLFNBQVVrVCxFQUFhaFAsRUFBRzdCLEdBQ3JELElBQUk4USxFQUFjTCxFQUF1QjVPLEVBQUc3QixHQUFHLEdBQy9DLFlBQXVCSyxJQUFoQnlRLE9BQTRCelEsRUFBWXlRLEVBQVluVCxJQUFJa1QsSUF1Qi9EL0YsSUFyQjhCLFNBQVUrRixFQUFhRSxFQUFlbFAsRUFBRzdCLEdBQ3ZFeVEsRUFBdUI1TyxFQUFHN0IsR0FBRyxHQUFNOEssSUFBSStGLEVBQWFFLElBcUJwRGhJLEtBbkI0QixTQUFVNUksRUFBUXVRLEdBQzlDLElBQUlJLEVBQWNMLEVBQXVCdFEsRUFBUXVRLEdBQVcsR0FDeEQzSCxFQUFPLEdBRVgsT0FESStILEdBQWFBLEVBQVkvRCxRQUFRLFNBQVVpRSxFQUFHM1MsR0FBTzBLLEVBQUs1QyxLQUFLOUgsS0FDNUQwSyxHQWdCUDFLLElBZGMsU0FBVXNDLEdBQ3hCLFlBQWNOLElBQVBNLEdBQWlDLGlCQUFOQSxFQUFpQkEsRUFBS2dDLE9BQU9oQyxJQWMvRG5CLElBWlEsU0FBVXFDLEdBQ2xCMUMsRUFBUUEsRUFBUVcsRUFBRyxVQUFXK0IsTSxjQ3RDaEN0RixFQUFPRCxTQUFVLEcsZ0JDQWpCLElBQUkyVSxFQUFPLEVBQVEsR0FBUixDQUFrQixRQUN6QnZRLEVBQVcsRUFBUSxHQUNuQnVCLEVBQU0sRUFBUSxJQUNkaVAsRUFBVSxFQUFRLEdBQWdCdFAsRUFDbEN1UCxFQUFLLEVBQ0xDLEVBQWU1VCxPQUFPNFQsY0FBZ0IsV0FDeEMsT0FBTyxHQUVMQyxHQUFVLEVBQVEsRUFBUixDQUFvQixXQUNoQyxPQUFPRCxFQUFhNVQsT0FBTzhULGtCQUFrQixPQUUzQ0MsRUFBVSxTQUFVNVEsR0FDdEJ1USxFQUFRdlEsRUFBSXNRLEVBQU0sQ0FBRWxULE1BQU8sQ0FDekJqQixFQUFHLE9BQVFxVSxFQUNYSyxFQUFHLE9BZ0NIQyxFQUFPbFYsRUFBT0QsUUFBVSxDQUMxQjZJLElBQUs4TCxFQUNMUyxNQUFNLEVBQ05DLFFBaENZLFNBQVVoUixFQUFJdkMsR0FFMUIsSUFBS3NDLEVBQVNDLEdBQUssTUFBb0IsaUJBQU5BLEVBQWlCQSxHQUFtQixpQkFBTkEsRUFBaUIsSUFBTSxLQUFPQSxFQUM3RixJQUFLc0IsRUFBSXRCLEVBQUlzUSxHQUFPLENBRWxCLElBQUtHLEVBQWF6USxHQUFLLE1BQU8sSUFFOUIsSUFBS3ZDLEVBQVEsTUFBTyxJQUVwQm1ULEVBQVE1USxHQUVSLE9BQU9BLEVBQUdzUSxHQUFNblUsR0FzQmxCOFUsUUFwQlksU0FBVWpSLEVBQUl2QyxHQUMxQixJQUFLNkQsRUFBSXRCLEVBQUlzUSxHQUFPLENBRWxCLElBQUtHLEVBQWF6USxHQUFLLE9BQU8sRUFFOUIsSUFBS3ZDLEVBQVEsT0FBTyxFQUVwQm1ULEVBQVE1USxHQUVSLE9BQU9BLEVBQUdzUSxHQUFNTyxHQVlsQkssU0FUYSxTQUFVbFIsR0FFdkIsT0FESTBRLEdBQVVJLEVBQUtDLE1BQVFOLEVBQWF6USxLQUFRc0IsRUFBSXRCLEVBQUlzUSxJQUFPTSxFQUFRNVEsR0FDaEVBLEssZ0JDM0NULElBQUltUixFQUFjLEVBQVEsRUFBUixDQUFrQixlQUNoQ2hLLEVBQWFDLE1BQU1ySixVQUNRMkIsTUFBM0J5SCxFQUFXZ0ssSUFBMkIsRUFBUSxHQUFSLENBQW1CaEssRUFBWWdLLEVBQWEsSUFDdEZ2VixFQUFPRCxRQUFVLFNBQVUrQixHQUN6QnlKLEVBQVdnSyxHQUFhelQsSUFBTyxJLGNDTGpDOUIsRUFBT0QsUUFBVSxTQUFVeVYsRUFBUWhVLEdBQ2pDLE1BQU8sQ0FDTEwsYUFBdUIsRUFBVHFVLEdBQ2R0RCxlQUF5QixFQUFUc0QsR0FDaEJyRCxXQUFxQixFQUFUcUQsR0FDWmhVLE1BQU9BLEssY0NMWCxJQUFJb1QsRUFBSyxFQUNMYSxFQUFLblIsS0FBS29SLFNBQ2QxVixFQUFPRCxRQUFVLFNBQVUrQixHQUN6QixNQUFPLFVBQVU0UixZQUFlNVAsSUFBUmhDLEVBQW9CLEdBQUtBLEVBQUssUUFBUzhTLEVBQUthLEdBQUlyTixTQUFTLE8sZ0JDRm5GLElBQUl1TixFQUFRLEVBQVEsS0FDaEJDLEVBQWMsRUFBUSxJQUUxQjVWLEVBQU9ELFFBQVVrQixPQUFPdUwsTUFBUSxTQUFjbEgsR0FDNUMsT0FBT3FRLEVBQU1yUSxFQUFHc1EsSyxnQkNMbEIsSUFBSTlRLEVBQVksRUFBUSxJQUNwQitRLEVBQU12UixLQUFLdVIsSUFDWDlRLEVBQU1ULEtBQUtTLElBQ2YvRSxFQUFPRCxRQUFVLFNBQVUySixFQUFPekMsR0FFaEMsT0FEQXlDLEVBQVE1RSxFQUFVNEUsSUFDSCxFQUFJbU0sRUFBSW5NLEVBQVF6QyxFQUFRLEdBQUtsQyxFQUFJMkUsRUFBT3pDLEssZ0JDSnpELElBQUloQyxFQUFXLEVBQVEsR0FDbkI2USxFQUFNLEVBQVEsS0FDZEYsRUFBYyxFQUFRLElBQ3RCcE8sRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFDcEN1TyxFQUFRLGFBSVJDLEVBQWEsV0FFZixJQUlJQyxFQUpBQyxFQUFTLEVBQVEsR0FBUixDQUF5QixVQUNsQzNWLEVBQUlxVixFQUFZM08sT0FjcEIsSUFWQWlQLEVBQU9DLE1BQU1DLFFBQVUsT0FDdkIsRUFBUSxJQUFXQyxZQUFZSCxHQUMvQkEsRUFBT3ZFLElBQU0sZUFHYnNFLEVBQWlCQyxFQUFPSSxjQUFjQyxVQUN2QkMsT0FDZlAsRUFBZVEsTUFBTUMsdUNBQ3JCVCxFQUFlVSxRQUNmWCxFQUFhQyxFQUFlOVMsRUFDckI1QyxZQUFZeVYsRUFBb0IsVUFBRUosRUFBWXJWLElBQ3JELE9BQU95VixLQUdUaFcsRUFBT0QsUUFBVWtCLE9BQU9ZLFFBQVUsU0FBZ0J5RCxFQUFHc1IsR0FDbkQsSUFBSWpOLEVBUUosT0FQVSxPQUFOckUsR0FDRnlRLEVBQWUsVUFBSTlRLEVBQVNLLEdBQzVCcUUsRUFBUyxJQUFJb00sRUFDYkEsRUFBZSxVQUFJLEtBRW5CcE0sRUFBT25DLEdBQVlsQyxHQUNkcUUsRUFBU3FNLFNBQ01sUyxJQUFmOFMsRUFBMkJqTixFQUFTbU0sRUFBSW5NLEVBQVFpTixLLGdCQ3RDekQsSUFBSWpCLEVBQVEsRUFBUSxLQUNoQmtCLEVBQWEsRUFBUSxJQUFvQm5ELE9BQU8sU0FBVSxhQUU5RDNULEVBQVFzRixFQUFJcEUsT0FBTzZWLHFCQUF1QixTQUE2QnhSLEdBQ3JFLE9BQU9xUSxFQUFNclEsRUFBR3VSLEssNkJDSmxCLElBQUl0VSxFQUFTLEVBQVEsR0FDakI2QyxFQUFLLEVBQVEsR0FDYjJSLEVBQWMsRUFBUSxHQUN0QkMsRUFBVSxFQUFRLEVBQVIsQ0FBa0IsV0FFaENoWCxFQUFPRCxRQUFVLFNBQVU2SSxHQUN6QixJQUFJZ0csRUFBSXJNLEVBQU9xRyxHQUNYbU8sR0FBZW5JLElBQU1BLEVBQUVvSSxJQUFVNVIsRUFBR0MsRUFBRXVKLEVBQUdvSSxFQUFTLENBQ3BEOUUsY0FBYyxFQUNkOVEsSUFBSyxXQUFjLE9BQU9pRixVLGNDVjlCckcsRUFBT0QsUUFBVSxTQUFVcUUsRUFBSTZTLEVBQWFuVyxFQUFNb1csR0FDaEQsS0FBTTlTLGFBQWM2UyxTQUFvQ25ULElBQW5Cb1QsR0FBZ0NBLEtBQWtCOVMsRUFDckYsTUFBTUMsVUFBVXZELEVBQU8sMkJBQ3ZCLE9BQU9zRCxJLGdCQ0hYLElBQUl6QixFQUFNLEVBQVEsSUFDZGpDLEVBQU8sRUFBUSxLQUNmNEosRUFBYyxFQUFRLElBQ3RCckYsRUFBVyxFQUFRLEdBQ25CNEQsRUFBVyxFQUFRLEdBQ25CMkIsRUFBWSxFQUFRLElBQ3BCMk0sRUFBUSxHQUNSQyxFQUFTLElBQ1RyWCxFQUFVQyxFQUFPRCxRQUFVLFNBQVVzWCxFQUFVM0ssRUFBUzNFLEVBQUlDLEVBQU13RixHQUNwRSxJQUdJdkcsRUFBUW1JLEVBQU1DLEVBQVUxRixFQUh4QjhGLEVBQVNqQyxFQUFXLFdBQWMsT0FBTzZKLEdBQWM3TSxFQUFVNk0sR0FDakVoUyxFQUFJMUMsRUFBSW9GLEVBQUlDLEVBQU0wRSxFQUFVLEVBQUksR0FDaENoRCxFQUFRLEVBRVosR0FBcUIsbUJBQVYrRixFQUFzQixNQUFNcEwsVUFBVWdULEVBQVcscUJBRTVELEdBQUkvTSxFQUFZbUYsSUFBUyxJQUFLeEksRUFBUzRCLEVBQVN3TyxFQUFTcFEsUUFBU0EsRUFBU3lDLEVBQU9BLElBRWhGLElBREFDLEVBQVMrQyxFQUFVckgsRUFBRUosRUFBU21LLEVBQU9pSSxFQUFTM04sSUFBUSxHQUFJMEYsRUFBSyxJQUFNL0osRUFBRWdTLEVBQVMzTixPQUNqRXlOLEdBQVN4TixJQUFXeU4sRUFBUSxPQUFPek4sT0FDN0MsSUFBSzBGLEVBQVdJLEVBQU8vTyxLQUFLMlcsS0FBYWpJLEVBQU9DLEVBQVNLLFFBQVFDLE1BRXRFLElBREFoRyxFQUFTakosRUFBSzJPLEVBQVVoSyxFQUFHK0osRUFBSzVOLE1BQU9rTCxNQUN4QnlLLEdBQVN4TixJQUFXeU4sRUFBUSxPQUFPek4sSUFHOUN3TixNQUFRQSxFQUNoQnBYLEVBQVFxWCxPQUFTQSxHLGdCQ3hCakIsSUFBSTFVLEVBQVcsRUFBUSxJQUN2QjFDLEVBQU9ELFFBQVUsU0FBVTZELEVBQVErTixFQUFLMUwsR0FDdEMsSUFBSyxJQUFJbkUsS0FBTzZQLEVBQUtqUCxFQUFTa0IsRUFBUTlCLEVBQUs2UCxFQUFJN1AsR0FBTW1FLEdBQ3JELE9BQU9yQyxJLGdCQ0hULElBQUlPLEVBQVcsRUFBUSxHQUN2Qm5FLEVBQU9ELFFBQVUsU0FBVXFFLEVBQUkyRSxHQUM3QixJQUFLNUUsRUFBU0MsSUFBT0EsRUFBR2tULEtBQU92TyxFQUFNLE1BQU0xRSxVQUFVLDBCQUE0QjBFLEVBQU8sY0FDeEYsT0FBTzNFLEksZ0JDSFQsSUFBSW1ULEVBQU0sRUFBUSxHQUFnQmxTLEVBQzlCSyxFQUFNLEVBQVEsSUFDZCtILEVBQU0sRUFBUSxFQUFSLENBQWtCLGVBRTVCek4sRUFBT0QsUUFBVSxTQUFVcUUsRUFBSXNDLEVBQUs4USxHQUM5QnBULElBQU9zQixFQUFJdEIsRUFBS29ULEVBQU9wVCxFQUFLQSxFQUFHakMsVUFBV3NMLElBQU04SixFQUFJblQsRUFBSXFKLEVBQUssQ0FBRXlFLGNBQWMsRUFBTTFRLE1BQU9rRixNLGdCQ0poRyxJQUFJK1EsRUFBTSxFQUFRLElBQ2RoSyxFQUFNLEVBQVEsRUFBUixDQUFrQixlQUV4QmlLLEVBQWtELGFBQTVDRCxFQUFJLFdBQWMsT0FBT3RQLFVBQXJCLElBU2RuSSxFQUFPRCxRQUFVLFNBQVVxRSxHQUN6QixJQUFJa0IsRUFBR3FTLEVBQUdoVSxFQUNWLFlBQWNHLElBQVBNLEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTixpQkFBcEN1VCxFQVZELFNBQVV2VCxFQUFJdEMsR0FDekIsSUFDRSxPQUFPc0MsRUFBR3RDLEdBQ1YsTUFBTzRDLEtBT09rVCxDQUFPdFMsRUFBSXJFLE9BQU9tRCxHQUFLcUosSUFBb0JrSyxFQUV2REQsRUFBTUQsRUFBSW5TLEdBRU0sV0FBZjNCLEVBQUk4VCxFQUFJblMsS0FBc0MsbUJBQVpBLEVBQUV1UyxPQUF1QixZQUFjbFUsSSxnQkNyQmhGLElBQUlmLEVBQVUsRUFBUSxHQUNsQjRDLEVBQVUsRUFBUSxJQUNsQmMsRUFBUSxFQUFRLEdBQ2hCd1IsRUFBUyxFQUFRLElBQ2pCQyxFQUFRLElBQU1ELEVBQVMsSUFFdkJFLEVBQVFDLE9BQU8sSUFBTUYsRUFBUUEsRUFBUSxLQUNyQ0csRUFBUUQsT0FBT0YsRUFBUUEsRUFBUSxNQUUvQkksRUFBVyxTQUFVdlAsRUFBS25FLEVBQU0yVCxHQUNsQyxJQUFJblYsRUFBTSxHQUNOb1YsRUFBUS9SLEVBQU0sV0FDaEIsUUFBU3dSLEVBQU9sUCxNQVBWLFdBT3dCQSxPQUU1QmIsRUFBSzlFLEVBQUkyRixHQUFPeVAsRUFBUTVULEVBQUs2VCxHQUFRUixFQUFPbFAsR0FDNUN3UCxJQUFPblYsRUFBSW1WLEdBQVNyUSxHQUN4Qm5GLEVBQVFBLEVBQVFhLEVBQUliLEVBQVFPLEVBQUlrVixFQUFPLFNBQVVwVixJQU0vQ3FWLEVBQU9ILEVBQVNHLEtBQU8sU0FBVTdSLEVBQVFzQyxHQUkzQyxPQUhBdEMsRUFBU0wsT0FBT1osRUFBUWlCLElBQ2IsRUFBUHNDLElBQVV0QyxFQUFTQSxFQUFPSSxRQUFRbVIsRUFBTyxLQUNsQyxFQUFQalAsSUFBVXRDLEVBQVNBLEVBQU9JLFFBQVFxUixFQUFPLEtBQ3RDelIsR0FHVHpHLEVBQU9ELFFBQVVvWSxHLGNDN0JqQm5ZLEVBQU9ELFFBQVUsSSxtd0JDQVh3WSxXLFdBQ0Ysc0JBQWMsaUNBQ1ZsUyxLQUFLbVMsUUFBVSxFQUNmblMsS0FBS29TLFdBQWFGLFdBQVdHLFVBQVVDLGMsNEZBaUN4QkMsV0FBd0IsZUFBYkMsT0FBYSx1REFBSixHQUNSLGlCQUFoQnhTLEtBQUtxSSxZQUM4QixJQUEvQmtLLFVBQVV4WCxJQUFJaUYsS0FBS3FJLFFBRVUsSUFBaENySSxLQUFLcUksT0FBTytCLFFBQVEsU0FDcEJwSyxLQUFLcUksT0FBU3JJLEtBQUtxSSxPQUFPb0ssVUFBVSxFQUFHelMsS0FBS3FJLE9BQU96SCxPQUFTLEdBQUc2UixVQUFVLEdBQ3pFRixVQUFVcEksUUFBUSxTQUFDaFAsRUFBT00sRUFBSytPLEdBQ3ZCLE1BQUtuQyxPQUFPaUMsU0FBUzdPLEtBQ0EsaUJBQVZOLEVBQ1AsTUFBS2tOLE9BQVMsTUFBS0EsT0FBTzdILFFBQVEsSUFBSW9SLE9BQU9uVyxFQUFLLE1BQU8sR0FBS04sR0FFOURxWCxPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLHNEQUF1REMsUUFBUyxhQUFlLE1BQUt2SyxPQUFPN0gsUUFBUSxNQUFPLElBQU0sUUFJNUpxUyxVQUFVQyxjQUFjOVMsS0FBS3FJLE9BQVFrSyxXQUNyQ3ZTLEtBQUtxSSxPQUFTMEssS0FBSy9TLEtBQUtxSSxRQUV4Qm1LLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssa0JBQW1CQyxRQUFTLGFBQWU1UyxLQUFLcUksT0FBTzdILFFBQVEsTUFBTyxJQUFNLE1BR3BIZ1MsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyw2Q0FBOENDLFFBQVMsYUFBZTVTLEtBQUtxSSxPQUFPN0gsUUFBUSxNQUFPLElBQU0sS0FHckcsaUJBQS9CK1IsVUFBVXhYLElBQUlpRixLQUFLcUksUUFDMUJySSxLQUFLcUksT0FBU2tLLFVBQVV4WCxJQUFJaUYsS0FBS3FJLFFBRWpDbUssT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyxzREFBdURDLFFBQVMsYUFBZTVTLEtBQUtxSSxPQUFPN0gsUUFBUSxNQUFPLElBQU0sS0FHckpSLEtBQUtxSSxRQUFpQyxXQUF2QixRQUFPckksS0FBS3FJLFNBQ0csaUJBQTFCckksS0FBS3FJLE9BQU8ySyxpQkFDaUMsSUFBekNULFVBQVV4WCxJQUFJaUYsS0FBS3FJLE9BQU8ySyxXQUVhLElBQTFDaFQsS0FBS3FJLE9BQU8ySyxVQUFVNUksUUFBUSxTQUM5QnBLLEtBQUtxSSxPQUFPMkssVUFBWWhULEtBQUtxSSxPQUFPMkssVUFBVVAsVUFBVSxFQUFHelMsS0FBS3FJLE9BQU8ySyxVQUFVcFMsT0FBUyxHQUFHNlIsVUFBVSxHQUN2R0YsVUFBVXBJLFFBQVEsU0FBQ2hQLEVBQU9NLEVBQUsrTyxHQUN2QixNQUFLbkMsT0FBTzJLLFVBQVUxSSxTQUFTN08sS0FDVixpQkFBVk4sRUFDUCxNQUFLa04sT0FBTzJLLFVBQVksTUFBSzNLLE9BQU8ySyxVQUFVeFMsUUFBUSxJQUFJb1IsT0FBT25XLEVBQUssTUFBTyxHQUFLTixHQUVsRnFYLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUsseURBQTBEQyxRQUFTLGdCQUFrQixNQUFLdkssT0FBTzJLLFVBQVV4UyxRQUFRLE1BQU8sSUFBTSxRQUk1S3FTLFVBQVVDLGNBQWM5UyxLQUFLcUksT0FBTzJLLFVBQVdULFdBQy9DdlMsS0FBS3FJLE9BQU8ySyxVQUFZRCxLQUFLL1MsS0FBS3FJLE9BQU8ySyxXQUV6Q1IsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyxrQkFBbUJDLFFBQVMsZ0JBQWtCNVMsS0FBS3FJLE9BQU8ySyxVQUFVeFMsUUFBUSxNQUFPLElBQU0sTUFHaklnUyxPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLDZDQUE4Q0MsUUFBUyxnQkFBa0I1UyxLQUFLcUksT0FBTzJLLFVBQVV4UyxRQUFRLE1BQU8sSUFBTSxLQUd4RyxpQkFBekMrUixVQUFVeFgsSUFBSWlGLEtBQUtxSSxPQUFPMkssV0FDakNoVCxLQUFLcUksT0FBTzJLLFVBQVlULFVBQVV4WCxJQUFJaUYsS0FBS3FJLE9BQU8ySyxXQUVsRFIsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyx5REFBMERDLFFBQVMsZ0JBQWtCNVMsS0FBS3FJLE9BQU8ySyxVQUFVeFMsUUFBUSxNQUFPLElBQU0sUSx1Q0FPdkt5UyxHQUNiLElBQUl0UixFQUFPM0IsS0FDUGtULEVBQWEsSUFBSXZGLElBR2pCd0YsRUFBZSxJQWlDbkIsTUFoQzJCLFdBQXZCLFFBQU9uVCxLQUFLcUksU0FDWjRLLEVBQVM5SSxRQUFRLFNBQVVpSixFQUFPQyxHQUMxQkYsRUFBZUcsV0FBV0YsRUFBTSxjQUFjelIsRUFBSzBHLE9BQU9rTCxVQUMxREosRUFBZUcsV0FBV0YsRUFBTSxjQUFjelIsRUFBSzBHLE9BQU9rTCxXQUt0RU4sRUFBUzlJLFFBQVEsU0FBVWlKLEVBQU9DLEdBQzlCLElBQUlHLEVBQWMsRUFFUyxpQkFBaEI3UixFQUFLMEcsT0FDWm1MLEVBQWM3UixFQUFLMEcsT0FDVyxXQUF2QixRQUFPMUcsRUFBSzBHLFVBQ25CbUwsRUFBYzdSLEVBQUswRyxPQUFPMkssVUFBWU0sV0FBV0YsRUFBTSxjQUFjelIsRUFBSzBHLE9BQU9rTCxRQUFVSixHQUUvRkQsRUFBV2hMLElBQUltTCxFQUFRRyxLQWdCcEJOLEksb0NBVUdPLEVBQVdDLEdBQWtELElBQXpDQyxFQUF5Qyx1REFBekIsRUFBR1YsRUFBc0IsdURBQVgsSUFBSXRGLElBQ2hFLEdBQXNCLElBQWxCc0YsRUFBU1csS0FBWSxDQUNyQixJQUFJQyxFQUFZLEVBQ2hCLE9BQVE3VCxLQUFLOFQsV0FDVCxLQUFLNUIsV0FBV0csVUFBVUMsY0FDdEJ1QixFQUFZSixFQUFZelQsS0FBS3FJLE9BQVNzTCxFQUN0QyxNQUNKLEtBQUt6QixXQUFXRyxVQUFVMEIsWUFDdEJGLEVBQVlILEVBQVUxVCxLQUFLcUksT0FBU3NMLEVBQ3BDLE1BQ0osS0FBS3pCLFdBQVdHLFVBQVUyQixTQUN0QkgsRUFBWTdULEtBQUtxSSxPQUFTc0wsRUFDMUIsTUFDSixRQUNJRSxFQUFZSixFQUFZelQsS0FBS3FJLE9BQVNzTCxFQUU5QyxPQUFPRSxFQUVQLElBQUlsUyxFQUFPM0IsS0FDUGtULEVBQWEsSUFBSXZGLElBR2pCd0YsRUFBZSxJQWdDbkIsTUEvQjJCLFdBQXZCLFFBQU9uVCxLQUFLcUksU0FDWjRLLEVBQVM5SSxRQUFRLFNBQVVpSixFQUFPQyxHQUMxQkYsRUFBZUcsV0FBV0YsRUFBTSxjQUFjelIsRUFBSzBHLE9BQU9rTCxVQUMxREosRUFBZUcsV0FBV0YsRUFBTSxjQUFjelIsRUFBSzBHLE9BQU9rTCxXQUt0RU4sRUFBUzlJLFFBQVEsU0FBVWlKLEVBQU9DLEdBQzlCLElBQUlHLEVBQWMsRUFRbEIsT0FOMkIsaUJBQWhCN1IsRUFBSzBHLE9BQ1ptTCxFQUFjN1IsRUFBSzBHLE9BQ1csV0FBdkIsUUFBTzFHLEVBQUswRyxVQUNuQm1MLEVBQWM3UixFQUFLMEcsT0FBTzJLLFVBQVlNLFdBQVdGLEVBQU0sY0FBY3pSLEVBQUswRyxPQUFPa0wsUUFBVUosR0FHdkZ4UixFQUFLbVMsV0FDVCxLQUFLNUIsV0FBV0csVUFBVUMsY0FDdEJZLEVBQVdoTCxJQUFJbUwsRUFBUUksRUFBWUQsRUFBY0csR0FDakQsTUFDSixLQUFLekIsV0FBV0csVUFBVTBCLFlBQ3RCYixFQUFXaEwsSUFBSW1MLEVBQVFLLEVBQVVGLEVBQWNHLEdBQy9DLE1BQ0osS0FBS3pCLFdBQVdHLFVBQVUyQixTQUN0QmQsRUFBV2hMLElBQUltTCxFQUFRRyxFQUFjRyxHQUNyQyxNQUNKLFFBQ0lULEVBQVdoTCxJQUFJbUwsRUFBUUksRUFBWUQsRUFBY0csTUFHdERULEksOEJBbk1EZSxHQUNWLFFBQXlCLElBQWRBLEVBQTJCLENBQ2xDLElBQUlDLEVBQWtCaEMsV0FBV2lDLFNBQVNGLEdBQ3RDclosT0FBT3VMLEtBQUsrTCxXQUFXRyxXQUFXL0gsU0FBUzRKLEtBQzNDbFUsS0FBS29TLFdBQWE2QixLLGVBTTFCLE9BQU9qVSxLQUFLb1MsYSwyQkFHTGdDLFFBQ2EsSUFBVEEsSUFDYSxpQkFBVEEsRUFDUHBVLEtBQUttUyxRQUFVbFUsS0FBS2lFLE1BQU1rUyxHQUFRLElBQU9sQyxXQUFXbUMsY0FBZ0IsSUFBT25DLFdBQVdtQyxZQUMvRCxXQUFoQixRQUFPRCxJQUFxQyxpQkFBVEEsSUFDMUNwVSxLQUFLbVMsUUFBVWlDLEssZUFPdkIsT0FBT3BVLEtBQUttUyxXLGdDQStLQW1DLEdBQ1osT0FBUUEsR0FDSixLQUFLdFUsS0FBS3FTLFVBQVVDLGNBQ2hCLE1BQU8sZ0JBQ1gsS0FBS3RTLEtBQUtxUyxVQUFVMEIsWUFDaEIsTUFBTyxjQUNYLEtBQUsvVCxLQUFLcVMsVUFBVTJCLFNBQ2hCLE1BQU8sZ0IsY0FLdkI5QixXQUFXbUMsV0FBYSxHQUN4Qm5DLFdBQVdHLFVBQVksQ0FDbkJDLGNBQWUsc0JBQ2Z5QixZQUFhLHVCQUNiQyxTQUFVLFlBRWQ5QixXQUFXcUMsY0FBZ0IsQ0FBQyxRQUFTLFlBQWEsZSxhQUVuQ3JDLFcscUxDbk9mLFlBQ0EsU0FDQSxXQUNBLFcsODZCQUVhVyxFLFdBQ1QsYUFBYyxVLHNEQU9RMkIsRUFBTUMsR0FDeEIsR0FBSUEsRUFBSzdULE9BQVM0VCxFQUNkLE9BQU8sRUFFWCxJQUFLLElBQUl0YSxFQUFJLEVBQUdxUixFQUFNa0osRUFBSzdULE9BQVExRyxFQUFJcVIsRUFBS3JSLElBQ3hDLElBQUtzYSxFQUFLbEssU0FBU21LLEVBQUt2YSxJQUNwQixPQUFPLEVBSWYsT0FBTyxJLG9DQUdVa0csRUFBUW1TLEdBUXpCLEdBTkFuUyxFQUFTQSxFQUFPSSxRQUFRLE1BQU8sSUFNM0Isa0JBQWtCRSxLQUFLTixHQUV2QixPQUFPLEVBSVgsR0FBSSxrQkFBa0JNLEtBQUtOLEdBRXZCLE9BQU8sRUFJWCxHQUFJLG1CQUFtQk0sS0FBS04sR0FFeEIsT0FBTyxFQUdYLEdBQUkscUJBQXFCTSxLQUFLTixHQUMxQixPQUFPLEVBSVgsR0FBSSxPQUFPTSxLQUFLTixHQUNaLE9BQU8sRUFLWCxJQURBLElBQ2dCc1UsRUFEWkMsRUFBUSxHQUNIemEsRUFBSSxFQUFTQSxFQUFJa0csRUFBT1EsT0FBUTFHLElBRXJDLEdBQUksT0FESndhLEVBQU90VSxFQUFPd1UsT0FBTzFhLElBRWpCeWEsRUFBTXBSLEtBQUssVUFDUixHQUFJLE1BQVFtUixFQUFNLENBQ3JCLEtBQUlDLEVBQU0vVCxPQUFTLEdBR2YsT0FBTyxFQUZQK1QsRUFBTUUsTUFPbEIsR0FBSSxJQUFNRixFQUFNL1QsT0FDWixPQUFPLEVBSVgsR0FBSSxtQkFBbUJGLEtBQUtOLEdBQ3hCLE9BQU8sRUFJWCxHQUFJLG1CQUFtQk0sS0FBS04sR0FDeEIsT0FBTyxFQUlYLEdBQUksbUJBQW1CTSxLQUFLTixHQUN4QixPQUFPLEVBSVgsR0FBSSxtQkFBbUJNLEtBQUtOLEdBQ3hCLE9BQU8sRUFNWCxJQUZBLElBRWdCc1UsRUFEWkksRUFEUzFVLEVBQU9JLFFBQVEsMEJBQTJCLEtBQ3BDZixNQUFNLEtBQ2hCdkYsRUFBSSxFQUFTQSxFQUFJNGEsRUFBTWxVLE9BQVExRyxJQUVwQyxHQURBd2EsRUFBT0ksRUFBTTVhLEdBQ1QsU0FBU3dHLEtBQUtnVSxTQUFTLElBQXVCbkMsRUFBVXhYLElBQUkyWixHQUM1RCxPQUFPLEVBS2YsSUFGQSxJQUFJSyxFQUFZM1UsRUFBT1gsTUFBTSxLQUVwQjRELEVBQVEsRUFBR0EsRUFBUTBSLEVBQVVuVSxPQUFReUMsSUFDMUMsUUFBK0MsSUFBcENrUCxFQUFVeFgsSUFBSWdhLEVBQVUxUixJQUMvQixHQUE0QjVGLE1BQXhCc1gsRUFBVTFSLEVBQVEsU0FDZixHQUE2QixNQUF6QjBSLEVBQVUxUixFQUFRLElBQXVDLE1BQXpCMFIsRUFBVTFSLEVBQVEsSUFBdUMsTUFBekIwUixFQUFVMVIsRUFBUSxJQUF1QyxNQUF6QjBSLEVBQVUxUixFQUFRLElBQXVDLE1BQXpCMFIsRUFBVTFSLEVBQVEsSUFBdUMsTUFBekIwUixFQUFVMVIsRUFBUSxJQUF1QyxNQUF6QjBSLEVBQVUxUixFQUFRLEdBQ3pOLE9BQU8sRUFNbkIsT0FBTyxJLGdDQUdNMlIsR0FDYixJQUFLQSxHQUFPLEdBQVFBLEVBQ2hCLE9BQU9BLEVBQ1gsSUFBSUMsRUFBVSxFQUFRRCxHQUN0QixHQUFJLFVBQVlDLEdBQVcsVUFBWUEsRUFDbkMsT0FBT0QsRUFDWCxJQUFJMVIsRUFBUzZCLE1BQU0rUCxRQUFRRixHQUFPLEdBQUssR0FDdkMsR0FBSUEsYUFBZXJILElBQUssQ0FDcEJySyxFQUFTLElBQUlxSyxJQUNiLElBQUssSUFBSXpULEVBQUksRUFBR0EsRUFBSThhLEVBQUk3TyxPQUFPdkYsT0FBUTFHLElBQUssQ0FDeEMsSUFBSXVCLEVBQU11WixFQUFJN08sT0FBT2pNLEdBQ3JCb0osRUFBTzRFLElBQUl6TSxFQUFLdUUsS0FBS21WLFVBQVVILEVBQUlqYSxJQUFJVSxNQUcvQyxJQUFLLElBQUlBLEtBQU91WixFQUNSQSxFQUFJalosZUFBZU4sS0FDbkI2SCxFQUFPN0gsR0FBT3VFLEtBQUttVixVQUFVSCxFQUFJdlosS0FDekMsT0FBTzZILEkscUNBR1drUixFQUFNQyxHQUN4QixPQUFPRCxFQUFLekssT0FBTyxTQUFBNkMsR0FBQyxPQUFJNkgsRUFBS25LLFNBQVNzQyxPLGlDQUd4QndJLEdBQ2QsSUFBSUMsRUFBZUMsU0FBU0YsRUFBTyxLQUMvQkcsRUFBZ0JELFNBQVNGLEVBQU8sSUFBTyxJQUczQyxPQUZzQkMsRUFBZSxHQUFLLElBQU1BLEVBQWUsR0FBS0EsR0FFM0MsS0FERkUsRUFBZ0IsR0FBSyxJQUFNQSxFQUFnQixHQUFLQSxLLGdDQUkxREMsR0FDYixHQUFJQSxFQUFPLENBTVAsR0FMQUEsRUFBUUEsRUFBTTdVLGNBQ1Z3RSxNQUFNdUksS0FBSzFOLEtBQUt5VixXQUFXdFAsUUFBUW1FLFNBQVNrTCxLQUM1Q0EsRUFBUXhWLEtBQUt5VixXQUFXMWEsSUFBSXlhLEtBRWhDQSxFQUFRQSxFQUFNaFYsUUFBUSxNQUFPLEtBQ25CNEosUUFBUSxRQUFVLEVBQUcsQ0FDM0IsSUFBSXNMLEVBQVNGLEVBQU1HLE9BQU9ILEVBQU1wTCxRQUFRLEtBQU8sR0FFM0N3TCxHQURKRixFQUFTQSxFQUFPakQsVUFBVSxFQUFHaUQsRUFBT3RMLFFBQVEsT0FDM0IzSyxNQUFNLEtBSXZCLE9BSG1CLElBQWZtVyxFQUFJaFYsU0FDSmdWLEVBQUksR0FBSyxLQUVOLENBQUNOLFNBQVNNLEVBQUksSUFBS04sU0FBU00sRUFBSSxJQUFLTixTQUFTTSxFQUFJLElBQUtOLFNBQVNNLEVBQUksS0FDeEUsR0FBSUosRUFBTXBMLFFBQVEsTUFBUSxFQUM3QixPQUFPcEssS0FBSzZWLFFBQVFMLEdBSTVCLE1BQU8sUyw4QkFHSU0sR0FJWCxHQUhzQixNQUFsQkEsRUFBSWxCLE9BQU8sS0FDWGtCLEVBQU1BLEVBQUlILE9BQU8sSUFFaEJHLEVBQUlsVixPQUFTLEdBQU9rVixFQUFJbFYsT0FBUyxFQUNsQyxPQUFPLEVBRVgsSUFDSTVGLEVBQ0ErYSxFQUNBblUsRUFIQXFFLEVBQVM2UCxFQUFJclcsTUFBTSxJQU12QixHQUFtQixJQUFmcVcsRUFBSWxWLE9BRUptVixFQURBL2EsRUFBSXNhLFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUUxREgsRUFBSTVHLE9BQ0QsR0FBbUIsSUFBZjhhLEVBQUlsVixPQUNYNUYsRUFBSXNhLFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUMxRGdVLEVBQUlULFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUMxREgsRUFBSTBULFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxRQUN2RCxJQUFtQixJQUFmK1QsRUFBSWxWLE9BS1gsT0FBTyxFQUpQNUYsRUFBSXNhLFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUMxRGdVLEVBQUlULFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUMxREgsRUFBSTBULFNBQVNyUCxFQUFPLEdBQUdsRSxXQUFha0UsRUFBTyxHQUFHbEUsV0FBWSxJQUk5RCxNQUFPLENBQUMvRyxFQUFHK2EsRUFBR25VLEVBakJOLE8sbUNBb0JRNFQsR0FDaEIsT0FBT3hWLEtBQUtnVyxVQUFVUixHQUFPaEwsSUFBSSxTQUFDalEsR0FBRCxPQUFPQSxFQUFJLFEsNkJBR2xDMGIsR0FFVixJQUFJakIsRUFBTSxDQUNOa0IsVUFGSkQsRUFBT0EsR0FBUWpXLE1BRUlrVyxVQUVmRCxFQUFLRSxRQUNMbkIsRUFBSW1CLFFBQVVGLEVBQUtFLFFBQVF4VixjQUV2QnNWLEVBQUtHLFdBQ0xwQixFQUFJb0IsU0FBV0gsRUFBS0csVUFFeEJILEVBQUtJLFlBQ0xyQixFQUFJcUIsVUFBWUosRUFBS0ksV0FFekIsSUFBSWpELEVBQVE2QyxFQUFLSyxXQUNqQixHQUFJbEQsRUFBTyxDQUNQNEIsRUFBSXVCLEtBQU8sR0FDWCxJQUFLLElBQVdBLEVBQVByYyxFQUFJLEVBQVNBLEVBQUlrWixFQUFNeFMsUUFBVTJWLEVBQU9uRCxFQUFNbFosSUFBS0EsSUFDeEQ4YSxFQUFJdUIsS0FBS0EsRUFBS0gsVUFBWUcsRUFBS0YsVUFJdkMsT0FBT3JCLEksMkNBUWlCeGEsRUFBR2djLEdBQzNCLElBQUlDLEVBQVV2RyxTQUFTd0csZ0JBQWdCLDZCQUE4QixRQUNyRUQsRUFBUUUsZUFBZSxLQUFNLElBQUtuYyxHQUlsQyxJQUhBLElBQ0lvYyxFQURhSCxFQUFRSSxpQkFDTUwsRUFDM0JNLEVBQWMsR0FDVDVjLEVBQUksRUFBR0EsRUFBSXNjLEVBQVN0YyxJQUFLLENBQzlCLElBQUk2YyxFQUFTTixFQUFRTyxpQkFBaUJKLEVBQWMxYyxHQUNwRDRjLEVBQVl2VCxLQUFLLENBQUN3VCxFQUFPRSxFQUFHRixFQUFPRyxJQUV2QyxPQUFPSixJLHNDQUdZSyxFQUFJQyxHQUN2QixJQUFJQyxHQUFZLEVBQ2hCLFFBQWtCLElBQVBGLFFBQW9DLElBQVBDLEVBQW9CLENBQ3hELElBQUlFLEVBQVMsR0FBSUMsRUFBUyxHQUN0QkMsRUFBWSxJQUFJNUYsT0FBTyxtREFpQjNCLEdBaEJrQixpQkFBUHVGLEVBRVBHLEdBREFILEVBQUtBLEVBQUczVyxRQUFRLHVDQUF3QyxJQUFJQSxRQUFRLDRDQUE2QyxJQUFJQSxRQUFRLE1BQU8sTUFDeEhpWCxNQUFNRCxHQUNYTCxhQUFjaFMsUUFDckJtUyxFQUFTSCxHQUdLLGlCQUFQQyxFQUVQRyxHQURBSCxFQUFLQSxFQUFHNVcsUUFBUSx1Q0FBd0MsSUFBSUEsUUFBUSw0Q0FBNkMsSUFBSUEsUUFBUSxNQUFPLE1BQ3hIaVgsTUFBTUQsR0FDWEosYUFBY2pTLFFBQ3JCb1MsRUFBU0gsR0FJYkMsRUFBWUMsRUFBTzFXLFNBQVcyVyxFQUFPM1csT0FFakMsSUFBSyxJQUFJMUcsRUFBSSxFQUFHQSxFQUFJb2QsRUFBTzFXLE9BQVExRyxJQUFLLENBR3BDLEdBRmdCb2QsRUFBT3BkLEdBQUd1WSxVQUFVLEVBQUcsS0FDdkI4RSxFQUFPcmQsR0FBR3VZLFVBQVUsRUFBRyxHQUNWLENBQ3pCNEUsR0FBWSxFQUNaLGFBS1pLLFFBQVFDLE1BQU0sbUNBRWxCLE9BQU9OLEksb0NBR1VPLEdBQ2pCLElBQUlDLEVBQVMsRUFBR0MsRUFBUyxFQUFHQyxFQUFlLEVBQUdDLEVBQWUsRUFBR0MsRUFBTyxFQUFHQyxFQUFPLEVBQ2pGLEdBQUlOLEVBQ0EsSUFBSyxJQUFJMWQsRUFBSSxFQUFHQSxFQUFJMGQsRUFBS2hYLE9BQVExRyxJQUFLLENBQ2xDLElBQUlpZSxFQUFVUCxFQUFLMWQsR0FBR3VZLFVBQVUsRUFBRyxHQUM3QjJGLEVBQVlSLEVBQUsxZCxHQUFHdVksVUFBVSxHQUFHaFQsTUFBTSxLQUM3QyxPQUFRMFksR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNETixFQUFTdkUsV0FBVzhFLEVBQVUsSUFDOUJOLEVBQVN4RSxXQUFXOEUsRUFBVSxJQUM5QixNQUNKLElBQUssSUFDTCxJQUFLLElBQ0RILEVBQU8zRSxXQUFXOEUsRUFBVSxJQUM1QkYsRUFBTzVFLFdBQVc4RSxFQUFVLElBQzVCLE1BQ0osSUFBSyxJQUNMLElBQUssSUFDREwsRUFBZXpFLFdBQVc4RSxFQUFVLElBQ3BDSixFQUFlMUUsV0FBVzhFLEVBQVUsSUFDcEMsTUFDSixJQUFLLElBQ0RILEVBQU8zRSxXQUFXOEUsRUFBVSxJQUM1QixNQUNKLElBQUssSUFDREwsRUFBZXpFLFdBQVc4RSxFQUFVLElBQ3BDLE1BQ0osSUFBSyxJQUNERixFQUFPNUUsV0FBVzhFLEVBQVUsSUFDNUIsTUFDSixJQUFLLElBQ0RKLEVBQWUxRSxXQUFXOEUsRUFBVSxJQUNwQyxNQUNKLElBQUssSUFDREgsRUFBTzNFLFdBQVc4RSxFQUFVLElBQzVCRixFQUFPNUUsV0FBVzhFLEVBQVUsSUFDNUIsTUFDSixJQUFLLElBQ0RMLEVBQWV6RSxXQUFXOEUsRUFBVSxJQUNwQ0osRUFBZTFFLFdBQVc4RSxFQUFVLElBQ3BDLE1BQ0osSUFBSyxJQUNMLElBQUssSUFDREgsRUFBTzNFLFdBQVc4RSxFQUFVLElBQzVCRixFQUFPNUUsV0FBVzhFLEVBQVUsSUFDNUIsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNETCxFQUFlekUsV0FBVzhFLEVBQVUsSUFDcENKLEVBQWUxRSxXQUFXOEUsRUFBVSxJQUNwQyxNQUNKLElBQUssSUFDTCxJQUFLLElBQ0RMLEVBQTBDLEVBQTNCekUsV0FBVzhFLEVBQVUsSUFDcENKLEVBQTBDLEVBQTNCMUUsV0FBVzhFLEVBQVUsVUFPaERWLFFBQVFDLE1BQU0sNkJBRWxCLE1BQU8sQ0FDSEUsT0FBUUEsRUFDUkMsT0FBUUEsRUFDUkcsS0FBTUEsRUFDTkMsS0FBTUEsRUFDTkgsYUFBY0EsRUFDZEMsYUFBY0EsSywyQ0FJTUssRUFBV0MsRUFBVUMsRUFBUUMsR0FFckQsT0FBUXZhLEtBQUt3YSxJQUFJRCxFQUFZSCxHQURqQixHQUNxQ3BhLEtBQUt3YSxJQUFJRixFQUFTRixHQUR2RCxHQUMyRXBhLEtBQUt3YSxJQUFJRCxFQUFZRixFQUFXRCxHQUQzRyxJLDZCQWlCRkssRUFBVXJGLEVBQVFzRixFQUFNQyxFQUFTQyxFQUFlQyxHQUFZLGFBQ2hFQyxFQUFZRCxFQUFXdGMsS0FDekJ3YyxFQUFZLEVBQUMsR0FBTyxHQUFPLEdBQU8sR0FBTyxRQUNULElBQXpCRixFQUFXRSxZQUNsQkEsRUFBWUYsRUFBV0UsV0FFM0JBLEVBQVUsR0FBTUQsSUFBYyxVQUFXRSxZQUFZQyxZQUFjSCxJQUFjLFVBQVdFLFlBQVlFLGFBQWVILEVBQVUsR0FDaklBLEVBQVUsR0FBTUQsSUFBYyxVQUFXRSxZQUFZRyxZQUFjTCxJQUFjLFVBQVdFLFlBQVlFLGFBQWVILEVBQVUsR0FDaklBLEVBQVUsR0FBTUQsSUFBYyxVQUFXRSxZQUFZSSxRQUFVTixJQUFjLFVBQVdFLFlBQVlLLFNBQVdOLEVBQVUsR0FDekhBLEVBQVUsR0FBTUQsSUFBYyxVQUFXRSxZQUFZTSxRQUFVUixJQUFjLFVBQVdFLFlBQVlLLFNBQVdOLEVBQVUsR0FDekhBLEVBQVUsR0FBTUQsSUFBYyxVQUFXRSxZQUFZTyxZQUFjUixFQUFVLElBQzdFLEVBQUF0QixTQUFRK0IsSUFBUixTQUFZLHlCQUFaLFNBQXdDVCxHQUF4QyxDQUFtRCxVQUFVVSxPQUFPaEIsR0FBVWlCLFVBQVU1ZSxJQUFJc1ksR0FBUyxVQUFVcUcsT0FBT2hCLEdBQVVrQixPQUFRLFVBQVVGLE9BQU9oQixHQUFVbUIsa0JBRTVJLFVBQVVILE9BQU9oQixFQUFXLEdBQUdrQixPQUF0RCxJQUNNRSxFQUFvQixVQUFVSixPQUFPaEIsR0FBVWtCLE9BQy9DRyxFQUFnQixVQUFVTCxPQUFPaEIsRUFBVyxHQUFHaUIsVUFBVTVlLElBQUlzWSxHQUU3RDJHLEdBRG1CLFVBQVVOLE9BQU9oQixHQUFVaUIsVUFBVTVlLElBQUlzWSxHQUN2RCxVQUFVcUcsT0FBT2hCLEdBQVVtQixnQkFHdEMsUUFBb0IsSUFBVGxCLFFBQTJDLElBQVpDLEVBQXlCLENBQy9ERCxFQUFPQSxFQUFLblksUUFBUSx1Q0FBd0MsSUFBSUEsUUFBUSw0Q0FBNkMsSUFBSUEsUUFBUSxNQUFPLEtBQ3hJb1ksRUFBVUEsRUFBUXBZLFFBQVEsdUNBQXdDLElBQUlBLFFBQVEsNENBQTZDLElBQUlBLFFBQVEsTUFBTyxLQUM5SSxJQUFJZ1gsRUFBWSxJQUFJNUYsT0FBTyxtREFDdkJxSSxFQUFVdEIsRUFBS2xCLE1BQU1ELEdBQ3JCMEMsRUFBYXRCLEVBQVFuQixNQUFNRCxHQUczQkgsRUFBWXJYLEtBQUttYSxnQkFBZ0JGLEVBQVNDLEdBQzlDeEMsUUFBUStCLElBQUksZUFBZ0JwQyxFQUFXNEMsRUFBU0MsR0FDNUM3QyxHQUFXLFdBR1gsSUFBTStDLEVBQWMsRUFBS0MsY0FBY0osR0FDakNLLEVBQWlCLEVBQUtELGNBQWNILEdBYTFDLEdBQUlsQixFQUFVLEdBQ1YsR0FBSUgsRUFBYyxTQUVYLEdBQUlHLEVBQVUsUUFFZCxDQUVILElBQUl1QixFQU1KLEdBTEFULEVBQWtCM1AsUUFBUSxTQUFBbE8sR0FDUCxZQUFYQSxFQUFFeEIsT0FDRjhmLEVBQVN0ZSxVQUdlLElBQXJCK2QsRUFBR2pmLElBQUksVUFBMkIsQ0FDekMsSUFBTXlmLEVBQVdSLEVBQUdqZixJQUFJLFVBQ2xCMGYsRUFBVVYsRUFBY1MsR0FDOUI5QyxRQUFRK0IsSUFBSSx5Q0FBMENnQixFQUFTRixHQUV4RFAsRUFBR2pmLElBQUksS0FNMUIsSUFBTTJmLEVBQWExQixFQUFVLEdBQU1zQixFQUFlekMsT0FBU3VDLEVBQVl2QyxPQUFVLEVBQzdFOEMsRUFBYTNCLEVBQVUsR0FBTXNCLEVBQWV4QyxPQUFTc0MsRUFBWXRDLE9BQVUsRUFDM0U4QyxFQUFrQjVCLEVBQVUsR0FBTXNCLEVBQWV2QyxhQUFlcUMsRUFBWXJDLGFBQWdCLEVBQzVGOEMsRUFBa0I3QixFQUFVLEdBQU1zQixFQUFldEMsYUFBZW9DLEVBQVlwQyxhQUFnQixFQVloRyxHQUpBTixRQUFRK0IsSUFBSSxZQUFhaUIsRUFBWUMsRUFBWSxxQkFBc0JDLEVBQWlCQyxHQUN4Rm5ELFFBQVErQixJQUFJLGVBQWdCWCxFQUFXRSxVQUFXQSxHQUc5Q2lCLEVBRUEsSUFEQSxJQUFNYSxFQUFnQixHQUFJQyxFQUFlLEdBRGhDLFdBRUE3Z0IsR0FDTCxJQUFNaWUsRUFBVThCLEVBQVEvZixHQUFHdVksVUFBVSxFQUFHLEdBQ2xDdUksRUFBV2YsRUFBUS9mLEdBQUd1WSxVQUFVLEdBQ2hDd0ksRUFBaUJmLEVBQVdoZ0IsR0FBR3VZLFVBQVUsR0FDbEMwRixFQUViLElBQUkrQyxFQUFPRixFQUFTdmIsTUFBTSxLQUN0QjBiLEVBQWFGLEVBQWV4YixNQUFNLEtBRWxDMmIsRUFBZSxHQUNuQixPQUFRakQsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0QsSUFBTWtELEVBQWMvSCxXQUFXNEgsRUFBSyxJQUFNUixFQUNwQ1ksRUFBY2hJLFdBQVc0SCxFQUFLLElBQU1QLEVBQ3BDWSxFQUFVLEVBQUtDLHFCQUFxQkgsRUFBYSxFQUFHL0gsV0FBVzRILEVBQUssSUFBSzVILFdBQVc2SCxFQUFXLEtBQy9GTSxFQUFVLEVBQUtELHFCQUFxQkYsRUFBYSxFQUFHaEksV0FBVzRILEVBQUssSUFBSzVILFdBQVc2SCxFQUFXLEtBRXJHQyxFQUFhN1gsS0FBS2dZLEVBQVVGLEVBQWNGLEVBQVcsSUFDckRDLEVBQWE3WCxLQUFLa1ksRUFBVUgsRUFBY0gsRUFBVyxJQUNyRCxNQVNKLElBQUssSUFDTCxJQUFLLElBQ0QsSUFBTU8sRUFBZXBJLFdBQVc0SCxFQUFLLElBQU1OLEVBQ3JDZSxFQUFlckksV0FBVzRILEVBQUssSUFBTUwsRUFDckNlLEVBQVcsRUFBS0oscUJBQXFCRSxFQUFjRyxXQUFZdkksV0FBVzRILEVBQUssSUFBSzVILFdBQVc2SCxFQUFXLEtBQzFHVyxFQUFXLEVBQUtOLHFCQUFxQkcsRUFBY0ksV0FBWXpJLFdBQVc0SCxFQUFLLElBQUs1SCxXQUFXNkgsRUFBVyxLQUVoSEMsRUFBYTdYLEtBQUtxWSxFQUFXRixFQUFlUCxFQUFXLElBQ3ZEQyxFQUFhN1gsS0FBS3VZLEVBQVdILEVBQWVSLEVBQVcsSUFDdkQsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFFREQsRUFBSy9RLFFBQVEsU0FBQzZSLEVBQUtDLEdBQ2YsSUFBSUMsRUFBYSxFQUliQSxFQUhBRCxFQUFNLEdBQU0sRUFHQzNJLFdBQVcwSSxHQUFPdEIsRUFRbEJwSCxXQUFXMEksR0FBT3JCLEVBTW5DLElBQU13QixFQUFVLEVBQUtYLHFCQUFxQlUsRUFBWSxFQUFHNUksV0FBVzBJLEdBQU0xSSxXQUFXNkgsRUFBV2MsS0FFaEdiLEVBQWE3WCxLQUFLNFksRUFBVUQsRUFBYWYsRUFBV2MsTUFFeEQsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxJQUFNRyxFQUFvQixNQUFaakUsRUFBa0IsRUFBSSxFQUNwQytDLEVBQUsvUSxRQUFRLFNBQUM2UixFQUFLQyxHQUNmLElBQUlJLEVBQWMsRUFFZEEsRUFEQUosRUFBTSxHQUFNLEVBQ0UzSSxXQUFXMEksSUFBUSxFQUFJQyxFQUFNLEdBQUtyQixFQUFrQndCLEVBR3BEOUksV0FBVzBJLElBQVEsRUFBSS9kLEtBQUtpRSxNQUFNK1osRUFBTSxJQUFNcEIsRUFBa0J1QixFQUdsRixJQUFNRSxFQUFXLEVBQUtkLHFCQUFxQmEsRUFBYSxFQUFHL0ksV0FBVzBJLEdBQU0xSSxXQUFXNkgsRUFBV2MsS0FFbEdiLEVBQWE3WCxLQUFLK1ksRUFBV0QsRUFBY2xCLEVBQVdjLE1BRTFELE1BQ0osSUFBSyxJQUNELElBQU1NLEVBQWNqSixXQUFXMEgsR0FBWU4sRUFDckM4QixFQUFVLEVBQUtoQixxQkFBcUJlLEVBQWEsRUFBR2pKLFdBQVcwSCxHQUFXMUgsV0FBVzJILElBRTNGRyxFQUFhN1gsS0FBS2laLEVBQVVELEVBQWN0QixHQUMxQyxNQUNKLElBQUssSUFDRCxJQUFNd0IsRUFBZW5KLFdBQVcwSCxHQUFZSixFQUN0QzhCLEVBQVcsRUFBS2xCLHFCQUFxQmlCLEVBQWMsRUFBR25KLFdBQVcwSCxHQUFXMUgsV0FBVzJILElBRTdGRyxFQUFhN1gsS0FBS21aLEVBQVdELEVBQWV4QixHQUM1QyxNQUNKLElBQUssSUFDRCxJQUFNMEIsRUFBY3JKLFdBQVcwSCxHQUFZTCxFQUNyQ2lDLEVBQVUsRUFBS3BCLHFCQUFxQm1CLEVBQWEsRUFBR3JKLFdBQVcwSCxHQUFXMUgsV0FBVzJILElBRTNGRyxFQUFhN1gsS0FBS3FaLEVBQVVELEVBQWMxQixHQUMxQyxNQUNKLElBQUssSUFDRCxJQUFNNEIsRUFBZXZKLFdBQVcwSCxHQUFZSCxFQUN0Q2lDLEVBQVcsRUFBS3RCLHFCQUFxQnFCLEVBQWMsRUFBR3ZKLFdBQVcwSCxHQUFXMUgsV0FBVzJILElBRTdGRyxFQUFhN1gsS0FBS3VaLEVBQVdELEVBQWU1QixHQUM1QyxNQUNKLElBQUssSUFDREMsRUFBSy9RLFFBQVEsU0FBQzZSLEVBQUtDLEdBQ2YsSUFBSWMsRUFBYSxFQUdiQSxFQUZRLElBQVJkLEVBRWEzSSxXQUFXMEksR0FBT3RCLEVBQ2hCLElBQVJ1QixFQUVNM0ksV0FBVzBJLEdBQU9yQixFQVFsQnJILFdBQVcwSSxHQUU1QixJQUFNZ0IsRUFBVSxFQUFLeEIscUJBQXFCdUIsRUFBWSxFQUFHekosV0FBVzBJLEdBQU0xSSxXQUFXNkgsRUFBV2MsS0FFaEdiLEVBQWE3WCxLQUFLeVosRUFBVUQsRUFBYTVCLEVBQVdjLE1BRXhELE1BQ0osSUFBSyxJQUNEZixFQUFLL1EsUUFBUSxTQUFDNlIsRUFBS0MsR0FDZixJQUFJZ0IsRUFBYyxFQUdkQSxFQUZRLElBQVJoQixFQUVjM0ksV0FBVzBJLEdBQU9wQixFQUNqQixJQUFScUIsRUFFTzNJLFdBQVcwSSxHQUFPbkIsRUFRbEJ2SCxXQUFXMEksR0FFN0IsSUFBTWtCLEVBQVcsRUFBSzFCLHFCQUFxQnlCLEVBQWEsRUFBRzNKLFdBQVcwSSxHQUFNMUksV0FBVzZILEVBQVdjLEtBRWxHYixFQUFhN1gsS0FBSzJaLEVBQVdELEVBQWM5QixFQUFXYyxNQUUxRCxNQUNKLFFBRUliLEVBQWE3WCxLQUFLeVgsR0FFMUIsR0FBOEIsTUFBMUI3QyxFQUFReFgsY0FDUixjQUVBbWEsRUFBY3ZYLEtBQUs0VSxHQUNuQjRDLEVBQWF4WCxLQUFLNlgsSUFyS2pCbGhCLEVBQUksRUFBR0EsRUFBSStmLEVBQVFyWixPQUFRMUcsSUFBSyxnQkFBaENBLEdBa0tELE9BNU5ELFFBdU9md2QsUUFBUUMsTUFBTSwwQkFFbEIsT0FBT2lCLEksNEJBR0U1RCxHQUlULElBQUlpQixFQUNKLE9BSmtCLGlCQUFQakIsSUFDUEEsRUFBTW1JLEtBQUtDLE1BQU1wSSxJQUVBQSxFQUFJa0IsVUFFckIsS0FBSyxFQUNERCxFQUFPL0YsU0FBU3dHLGdCQUFnQiw2QkFBOEIxQixFQUFJbUIsU0FFbEUsSUFEQSxJQUNnQkksRUFEWkQsRUFBYXRCLEVBQUl1QixNQUFRLEdBQ3BCcmMsRUFBSSxFQUFTQSxFQUFJVSxPQUFPdUwsS0FBS21RLEdBQVkxVixRQUFVMlYsRUFBTzNiLE9BQU91TCxLQUFLbVEsR0FBWXBjLElBQUtBLElBQUssQ0FDakcsSUFBSW1qQixFQUF3QyxXQUE1QixFQUFPL0csRUFBV0MsSUFBcUI0RyxLQUFLRyxVQUFVaEgsRUFBV0MsR0FBTyxLQUFNLEdBQUtELEVBQVdDLEdBQzlHTixFQUFLVSxlQUFlLEtBQU1KLEVBQU04RyxHQUVwQyxNQUNKLEtBQUssRUFDRHBILEVBQU8vRixTQUFTcU4sZUFBZXZJLEVBQUlxQixXQUNuQyxNQUNKLEtBQUssRUFDREosRUFBTy9GLFNBQVNzTixjQUFjeEksRUFBSXFCLFdBQ2xDLE1BQ0osS0FBSyxFQUNESixFQUFPL0YsU0FBU3VOLGVBQWVDLGlCQUMvQixNQUNKLEtBQUssR0FDRHpILEVBQU8vRixTQUFTdU4sZUFBZUUsbUJBQW1CM0ksRUFBSW9CLFVBQ3RELE1BQ0osS0FBSyxHQUNESCxFQUFPL0YsU0FBUzBOLHlCQUNoQixNQUNKLFFBQ0ksT0FBTzNILEVBR2YsT0FBT0EsSSxxQ0FNV2pCLEdBRWxCLEdBQW9CLFNBQWhCQSxFQUFJbUIsUUFBb0IsT0FBTyxLQUNuQyxJQUFJSSxFQUFPdkIsRUFBSXVCLE1BQVEsR0FDdkIsT0FBS0EsRUFBSy9iLEVBQ0h3RixLQUFLNmQsWUFBWXRILEVBQUsvYixFQUFHK2IsRUFBS3pNLE1BRGpCLE8sa0NBSUx0UCxFQUFHc2pCLEdBSWxCLElBSEEsSUFBSUMsRUFBYyxHQUNkQyxFQUFNLG1EQUNOQyxPQUFReGdCLEVBQ0p3Z0IsRUFBUUQsRUFBSTVmLEtBQUs1RCxJQUFLLENBQzFCLElBQUk2TixFQUFTMFYsRUFBWXRYLE9BQU8sU0FBQ3pLLEVBQUd6QixHQUFKLE9BQVV5QixFQUFJekIsRUFBRXFHLFFBQVEsR0FDeERtZCxFQUFZeGEsS0FBSy9JLEVBQUV3SCxNQUFNcUcsRUFBUTRWLEVBQU01YSxRQUN2QzBhLEVBQVl4YSxLQUFLMGEsRUFBTSxJQUUzQixJQUFJM2EsRUFBU3lhLEVBQ1J2VCxJQUFJLFNBQUF5TSxHQUNELElBQUlpSCxFQUFVakgsRUFBRWpWLE1BQU0sRUFBRyxHQUNyQm1jLEVBQWFsSCxFQUNaalYsTUFBTSxHQUNOdkMsTUFBTSxRQUNOc0ssT0FBTyxTQUFBcE8sR0FBQyxPQUFJQSxFQUFFc1csU0FDZHpILElBQUksU0FBQTdPLEdBQUMsT0FBSTJYLFdBQVczWCxLQUN6QixPQUFPdWlCLEVBQVUsQ0FDYkEsVUFDQUMsY0FDQSxPQUNMcFUsT0FBTyxTQUFBa04sR0FBQyxPQUFJQSxJQUVuQixHQUFJM1QsRUFBT3VHLE1BQU0sU0FBQW9OLEdBQUMsTUFBSSxXQUFXM00sU0FBUzJNLEVBQUVpSCxhQUFjckwsRUFBVXVMLGFBQWFOLEdBQVksQ0FDekYsSUFBSU8sRUFBUSxHQUNSQyxFQUFPLEtBQ1BDLEdBQVEsRUFrQ1osR0FqQ0FqYixFQUFPNkcsUUFBUSxTQUFBOE0sR0FDWCxHQUFLc0gsRUFDTCxHQUFrQixNQUFkdEgsRUFBRWlILFFBQU4sQ0FJQSxJQUFLSSxFQUFNLE9BQU9DLEdBQVEsRUFDMUIsR0FBa0IsTUFBZHRILEVBQUVpSCxRQUFOLENBSUEsSUFBSU0sRUFBYUYsRUFDYkcsRUFBY3hILEVBQUVpSCxVQUFZakgsRUFBRWlILFFBQVF2ZCxjQUFnQjJkLEVBQUt0YyxRQUFVLENBQUMsRUFBRyxHQUM3RSxPQUFRaVYsRUFBRWlILFFBQVF2ZCxlQUNkLElBQUssSUFDRDhkLEVBQWNBLEVBQVlqVSxJQUFJLFNBQUNvQyxFQUFHMVMsR0FBSixPQUFVMFMsRUFBSXFLLEVBQUVrSCxXQUFXamtCLEtBQ3pELE1BQ0osSUFBSyxJQUNEdWtCLEVBQVksSUFBTXhILEVBQUVrSCxXQUFXLEdBQy9CTSxFQUFZLEdBQUtELEVBQVcsR0FDNUIsTUFDSixJQUFLLElBQ0RDLEVBQVksSUFBTXhILEVBQUVrSCxXQUFXLEdBQy9CTSxFQUFZLEdBQUtELEVBQVcsR0FHaENDLEdBQ0FKLEVBQU05YSxLQUFLLENBQUNpYixFQUFZQyxJQUN4QkgsRUFBT0csR0FFUEYsR0FBUSxPQXRCUkQsRUFBT0EsRUFBSzlULElBQUksU0FBQ29DLEVBQUcxUyxHQUFKLE9BQVUwUyxFQUFJcUssRUFBRWtILFdBQVdqa0IsVUFMM0Nva0IsRUFBT3JILEVBQUVrSCxXQUFXbmMsT0FBTyxLQThCL0J1YyxFQUFPLE1BQU8sQ0FDZC9oQixLQUFNLFFBQ05tUSxLQUFNMFIsR0FJZCxHQUFJL2EsRUFBT3VHLE1BQU0sU0FBQW9OLEdBQUMsTUFBSSxXQUFXM00sU0FBUzJNLEVBQUVpSCxZQUFhNWEsRUFBT3lHLE9BQU8sU0FBQWtOLEdBQUMsTUFBZ0MsTUFBNUJBLEVBQUVpSCxRQUFRdmQsZ0JBQXVCQyxPQUFRLENBQ2pILElBQUk4ZCxFQUFVLEdBQ1ZKLEVBQU8sS0FDUEMsR0FBUSxFQTJCWixHQTFCQWpiLEVBQU82RyxRQUFRLFNBQUE4TSxHQUNYLEdBQUtzSCxFQUNMLEdBQWdDLE1BQTVCdEgsRUFBRWlILFFBQVF2ZCxjQUFkLENBSUEsSUFBSzJkLEVBQU0sT0FBT0MsR0FBUSxFQUMxQixHQUFnQyxNQUE1QnRILEVBQUVpSCxRQUFRdmQsY0FBZCxDQUNBLElBQUk2ZCxFQUFhRixFQUNiRyxFQUFjeEgsRUFBRWlILFFBQVF2ZCxnQkFBa0JzVyxFQUFFaUgsUUFBVUksRUFBS3RjLFFBQVUsQ0FBQyxFQUFHLEdBQzdFLEdBQWdDLE1BQTVCaVYsRUFBRWlILFFBQVF2ZCxjQUNWLE9BQU8yZCxFQUFPRyxFQUFZalUsSUFBSSxTQUFDb0MsRUFBRzFTLEdBQUosT0FBVTBTLEVBQUlxSyxFQUFFa0gsV0FBV2prQixLQUU3RHVrQixFQUFjQSxFQUFZalUsSUFBSSxTQUFDb0MsRUFBRzFTLEdBQUosT0FBVTBTLEVBQUlxSyxFQUFFa0gsV0FBV2prQixFQUFJLEtBQzdELElBQUl5a0IsRUFBTTlMLEVBQVUrTCxvQkFBb0IvYyxNQUFNLEtBQU0yYyxFQUFXblIsT0FBTzRKLEVBQUVrSCxXQUFXbmMsTUFBTSxFQUFHLElBQUlxTCxPQUFPb1IsSUFDbEd0YyxNQUFNd2MsRUFBSUUsS0FBUTFjLE1BQU13YyxFQUFJRyxLQUM3QkosRUFBUW5iLEtBQUssSUFDTm9iLEVBQ0hJLEdBQUk5SCxFQUFFa0gsV0FBVyxHQUNqQmEsR0FBSS9ILEVBQUVrSCxXQUFXLEdBQ2pCYyxPQUFRaEksRUFBRWtILFdBQVcsS0FHN0JHLEVBQU9HLFFBcEJISCxFQUFPckgsRUFBRWtILFdBQVduYyxPQUFPLE1Bc0IvQjBjLEVBQVE5ZCxRQUFVLElBQU04ZCxFQUFRN1UsTUFBTSxTQUFBb04sR0FBQyxNQUFJLENBQUMsS0FBTSxNQUFNeFEsT0FBTyxTQUFDekssRUFBR3pCLEdBQUosT0FBVXlCLEVBQUlpQyxLQUFLd2EsSUFBSXhCLEVBQUUxYyxHQUFLbWtCLEVBQVEsR0FBR25rQixLQUFLLEdBQUssUUFBT2drQixHQUFRLEdBQ2pJQSxFQUFPLENBQ1AsSUFBSWhrQixFQUFJbWtCLEVBQVFqWSxPQUFPLFNBQUN6SyxFQUFHekIsR0FDdkIsT0FBS3lCLEVBQ0R6QixFQUFFd2tCLEdBQUt4a0IsRUFBRXlrQixHQUFLaGpCLEVBQUUraUIsR0FBSy9pQixFQUFFZ2pCLEdBQVd6a0IsRUFDL0J5QixFQUZRekIsR0FHaEIsTUFrQkgsTUFqQmlCLENBQ2JpQyxLQUFNLE9BQ05tUSxLQUFNLENBQ0ZrUyxHQUFJdGtCLEVBQUVza0IsR0FDTkMsR0FBSXZrQixFQUFFdWtCLEdBQ05JLFdBQVkza0IsRUFBRTJrQixXQUNkQyxTQUFVNWtCLEVBQUU0a0IsU0FDWkMsVUFBVzdrQixFQUFFNmtCLFVBQ2JDLE9BQVFYLEVBQVFsVSxJQUFJLFNBQUF5TSxHQUNoQixNQUFPLENBQ0g4SCxHQUFJOUgsRUFBRThILEdBQ05DLEdBQUkvSCxFQUFFK0gsR0FDTkMsT0FBUWhJLEVBQUVnSSxhQVNsQyxPQUFPLE8sNkJBR0dLLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ3RCLElBQUlDLEVBQU1KLEVBQUtFLEVBQUtELEVBQUtFLEVBQ3JCRSxFQUFNMWhCLEtBQUsyaEIsTUFBTU4sRUFBS0EsRUFBS0MsRUFBS0EsSUFBT0MsRUFBS0EsRUFBS0MsRUFBS0EsSUFDdERJLEVBQU01aEIsS0FBSzZoQixLQUFLSixFQUFNQyxHQUkxQixPQUhJTCxFQUFLRyxFQUFLRixFQUFLQyxFQUFLLElBQ3BCSyxHQUFPQSxHQUVKQSxJLDBDQUdnQkUsRUFBSUMsRUFBSWpCLEVBQUlDLEVBQUlpQixFQUFLQyxFQUFJQyxFQUFJQyxFQUFJQyxHQUN4RCxJQUFJeEIsRUFBSUMsRUFBSUksRUFBWW9CLEVBQVluQixFQUNoQ29CLEVBQWlCLEVBQVZ0aUIsS0FBS3VpQixHQUVaekIsRUFBSyxJQUNMQSxHQUFNQSxHQUVOQyxFQUFLLElBQ0xBLEdBQU1BLEdBTVYsSUFBSXlCLEVBQVF4aUIsS0FBS3lpQixJQUFJVCxHQUNqQlUsRUFBUTFpQixLQUFLMmlCLElBQUlYLEdBQ2pCWSxHQUFRZCxFQUFLSyxHQUFNLEVBQ25CVSxHQUFRZCxFQUFLSyxHQUFNLEVBQ25CVSxHQUFRaEIsRUFBS0ssR0FBTSxFQUNuQlksR0FBUWhCLEVBQUtLLEdBQU0sRUFHbkJZLEVBQU1OLEVBQVFFLEVBQU9KLEVBQVFLLEVBQzdCSSxFQUFNUCxFQUFRRyxFQUFPTCxFQUFRSSxFQUk3Qk0sRUFBVUYsRUFBTUEsR0FBUWxDLEVBQUtBLEdBQU9tQyxFQUFNQSxHQUFRbEMsRUFBS0EsR0FDdkRtQyxFQUFTLElBQ1RwQyxHQUFVOWdCLEtBQUsyaEIsS0FBS3VCLEdBQ3BCbkMsR0FBVS9nQixLQUFLMmhCLEtBQUt1QixJQUd4QixJQUFJQyxFQUFPckMsRUFBS0MsRUFDWnFDLEVBQVF0QyxFQUFLbUMsRUFDYkksRUFBUXRDLEVBQUtpQyxFQUNiTSxFQUFZRixFQUFRQSxFQUFRQyxFQUFRQSxFQUlwQ0UsRUFBTXZqQixLQUFLMmhCLEtBQUszaEIsS0FBS3dhLEtBQUsySSxFQUFPQSxFQUFPRyxHQUFhQSxJQUNyRHJCLEdBQU1DLElBQ05xQixHQUFPQSxHQUlYLElBQUlDLEVBQU1ELEVBQU1ILEVBQVFyQyxFQUNwQjBDLEdBQU9GLEVBQU1GLEVBQVF2QyxFQUd6QkYsRUFBSzhCLEVBQVFjLEVBQU1oQixFQUFRaUIsRUFBTVgsRUFDakNqQyxFQUFLMkIsRUFBUWdCLEVBQU1kLEVBQVFlLEVBQU1WLEVBRWpDLElBQUlXLEdBQVFWLEVBQU1RLEdBQU8xQyxFQUNyQjZDLEdBQVFYLEVBQU1RLEdBQU8xQyxFQUNyQjhDLEdBQVFYLEVBQU1RLEdBQU8xQyxFQUNyQjhDLEdBQVFaLEVBQU1RLEdBQU8xQyxFQU96QixJQUpBRSxFQUFhck0sRUFBVWtQLE9BQU8sRUFBSyxFQUFLSixFQUFNRSxHQUc5Q3ZCLEVBQWF6TixFQUFVa1AsT0FBT0osRUFBTUUsR0FBT0QsR0FBT0UsR0FDM0N4QixFQUFhQyxHQUNoQkQsR0FBY0MsRUFFbEIsS0FBT0QsRUFBYSxHQUNoQkEsR0FBY0MsRUFNbEIsSUFKVSxHQUFOSixHQUFxQixHQUFOQSxJQUNmRyxHQUFjQyxHQUVsQnBCLEVBQVdELEVBQWFvQixFQUNqQm5CLEVBQVdvQixHQUNkcEIsR0FBWW9CLEVBRWhCLEtBQU9wQixFQUFXLEdBQ2RBLEdBQVlvQixFQWFoQixNQVZnQixDQUVaMUIsS0FDQUMsS0FDQUksYUFDQW9CLGFBQ0FuQixXQUNBQyxVQUFrQixHQUFOZSxHQUFvQixHQUFOQSxLLG1DQU1kNkIsRUFBS0MsRUFBT0MsR0FDNUIsR0FBbUIsaUJBQVJGLEVBQWtCLE9BQU9BLEVBQ3BDLEdBQVksU0FBUkEsRUFBZ0IsT0FBTyxLQUMzQkEsRUFBTUEsRUFBSS9QLE9BQ1YsSUFBSWtRLEVBQUssS0FVVCxZQVRjMWtCLElBQVZ5a0IsSUFDQUEsRUFBUUQsRUFDSkQsRUFBSUksV0FBVyxLQUNmSCxFQUFRLE1BQ0RELEVBQUlJLFdBQVcsU0FDdEJILEVBQVEsUUFJUkEsR0FDSixJQUFLLE1BQ0RFLEVBQUtILEVBQUl2aUIsTUFBTSxLQUFLLEdBQUdBLE1BQU0sS0FBSytLLElBQUksU0FBQXlNLEdBQUMsT0FBSTNELFdBQVcyRCxLQUN0RCxNQUNKLElBQUssTUFDRGtMLEVBQUtILEVBQUloZ0IsTUFBTSxHQUFHeVYsTUFBTSxXQUFXak4sSUFBSSxTQUFBeU0sR0FBQyxPQUFJM0IsU0FBUzJCLEVBQUcsTUFDNUQsUUFDSSxPQUFPK0ssRUFHZixPQURBRyxFQUFLQSxFQUFHbmdCLE1BQU0sRUFBRyxHQUNUa2dCLEdBQ0osSUFBSyxNQUNELE1BQU8sSUFBTUMsRUFBRzNYLElBQUksU0FBQXlNLEdBQUMsT0FBSUEsRUFBRWxWLFNBQVMsSUFBSXNnQixTQUFTLEVBQUcsT0FBTXZpQixLQUFLLElBQ25FLElBQUssTUFDRCxvQkFBY3FpQixFQUFHcmlCLEtBQUssS0FBdEIsS0FDSixRQUNJLE9BQU9raUIsSyx1Q0FJS00sRUFBU0MsRUFBU2xELEVBQVFtRCxHQUM5QyxNQUFPLENBQ0h2TCxFQUFHaFosS0FBSzRPLE1BQXdELEtBQWpEeVYsRUFBV2pELEVBQVNwaEIsS0FBSzJpQixJQUFJNEIsS0FBMkIsSUFDdkV0TCxFQUFHalosS0FBSzRPLE1BQXdELEtBQWpEMFYsRUFBV2xELEVBQVNwaEIsS0FBS3lpQixJQUFJOEIsS0FBMkIsTywwQkFJcEV2TCxFQUFHQyxFQUFHdUwsRUFBYUMsRUFBY3hELEVBQVlDLEdBQ3BERCxFQUFhQSxFQUFhLEVBQUlBLEVBQWEsRUFBSWpoQixLQUFLdWlCLEdBQUt0QixFQUl6RHVELEVBQThCLElBQWhCQSxFQUFvQixFQUFJQSxFQUFjLEVBQ3BEQyxHQUFnQixFQUVoQixJQUFJQyxHQU5KeEQsRUFBV0EsRUFBVyxHQUFLRCxFQUFhQyxFQUFXQSxFQUFXLEVBQUlsaEIsS0FBS3VpQixHQUFLckIsR0FNOUNELEdBQWNqaEIsS0FBS3VpQixHQUFLLEVBQUksRUFFdERvQyxFQUFTL1AsRUFBVWdRLGlCQUFpQjVMLEVBQUdDLEVBQUd3TCxFQUFjdkQsR0FDeEQyRCxFQUFPalEsRUFBVWdRLGlCQUFpQjVMLEVBQUdDLEVBQUd3TCxFQUFjeEQsR0FDdEQ2RCxFQUFTbFEsRUFBVWdRLGlCQUFpQjVMLEVBQUdDLEVBQUd1TCxFQUFhdEQsR0FDdkQ2RCxFQUFPblEsRUFBVWdRLGlCQUFpQjVMLEVBQUdDLEVBQUd1TCxFQUFhdkQsR0FFckQrRCxHQUFTLEVBeUJiLE9BeEJJTCxFQUFPM0wsSUFBTTZMLEVBQUs3TCxHQUFLMkwsRUFBTzFMLElBQU00TCxFQUFLNUwsSUFDekM0TCxFQUFLNUwsR0FBSyxFQUNWOEwsRUFBSzlMLEdBQUssRUFDVitMLEdBQVMsR0FJUkEsRUFTRyxDQUNBLElBQU1MLEVBQU8zTCxFQUFHMkwsRUFBTzFMLEVBQ3ZCLElBQU13TCxFQUFjQSxFQUFjLEVBQUdDLEVBQWMsRUFBR0csRUFBSzdMLEVBQUc2TCxFQUFLNUwsRUFDbkUsSUFBTThMLEVBQUsvTCxFQUFHK0wsRUFBSzlMLEVBQ25CLElBQU11TCxFQUFhQSxFQUFhLEVBQUdFLEVBQWMsRUFBR0ksRUFBTzlMLEVBQUc4TCxFQUFPN0wsRUFBSSxLQUMzRXBYLEtBQUssS0FiSCxDQUNBLElBQU04aUIsRUFBTzNMLEVBQUcyTCxFQUFPMUwsRUFDdkIsSUFBTXdMLEVBQWNBLEVBQWMsRUFBR0MsRUFBYyxFQUFHRyxFQUFLN0wsRUFBRzZMLEVBQUs1TCxFQUNuRSxJQUFNOEwsRUFBSy9MLEVBQUcrTCxFQUFLOUwsRUFDbkIsSUFBTXVMLEVBQWFBLEVBQWEsRUFBR0UsRUFBYyxFQUFHSSxFQUFPOUwsRUFBRzhMLEVBQU83TCxFQUNyRSxJQUFNMEwsRUFBTzNMLEVBQUcyTCxFQUFPMUwsRUFBSSxLQUM3QnBYLEtBQUssTyxzQ0FpQlFvakIsR0FDbkIsSUFBSUMsRUFBVWpULFNBQVNrVCxjQUFjLE9BRXJDLE9BREFELEVBQVFuVCxZQUFZa1QsR0FDYkMsRUFBUUUsWSxtQ0FPQ3JCLEdBQ2hCLElBQUlzQixFQUFTcFQsU0FBU2tULGNBQWMsT0FHcEMsT0FGQUUsRUFBT0QsVUFBWXJCLEVBQUkvUCxPQUNicVIsRUFBT0MsYSxpQ0FJSG5vQixFQUFHb29CLEVBQUlDLEdBQ3JCLEdBQWtCLFNBQWRyb0IsRUFBRSthLFFBQW9CLENBQ3RCLElBQUl1TixHQUFVLEdBQ1Z0b0IsRUFBRXVvQixhQUFhLE1BQVF2b0IsRUFBRXVvQixhQUFhLFFBQ3RDRCxHQUFVLEVBQ1Z0b0IsRUFBRXdvQixhQUFhLElBQUt4b0IsRUFBRXVvQixhQUFhLEtBQU9yUSxXQUFXbFksRUFBRXVvQixhQUFhLE1BQVFILEVBQUtBLEdBQ2pGcG9CLEVBQUV3b0IsYUFBYSxJQUFLeG9CLEVBQUV1b0IsYUFBYSxLQUFPclEsV0FBV2xZLEVBQUV1b0IsYUFBYSxNQUFRRixFQUFLQSxLQUVqRnJvQixFQUFFdW9CLGFBQWEsT0FBU3ZvQixFQUFFdW9CLGFBQWEsT0FBU3ZvQixFQUFFdW9CLGFBQWEsT0FBU3ZvQixFQUFFdW9CLGFBQWEsU0FDdkZELEdBQVUsRUFDVnRvQixFQUFFd29CLGFBQWEsS0FBTXhvQixFQUFFdW9CLGFBQWEsTUFBUXJRLFdBQVdsWSxFQUFFdW9CLGFBQWEsT0FBU0gsRUFBS0EsR0FDcEZwb0IsRUFBRXdvQixhQUFhLEtBQU14b0IsRUFBRXVvQixhQUFhLE1BQVFyUSxXQUFXbFksRUFBRXVvQixhQUFhLE9BQVNILEVBQUtBLEdBQ3BGcG9CLEVBQUV3b0IsYUFBYSxLQUFNeG9CLEVBQUV1b0IsYUFBYSxNQUFRclEsV0FBV2xZLEVBQUV1b0IsYUFBYSxPQUFTRixFQUFLQSxHQUNwRnJvQixFQUFFd29CLGFBQWEsS0FBTXhvQixFQUFFdW9CLGFBQWEsTUFBUXJRLFdBQVdsWSxFQUFFdW9CLGFBQWEsT0FBU0YsRUFBS0EsS0FFcEZyb0IsRUFBRXVvQixhQUFhLE9BQVN2b0IsRUFBRXVvQixhQUFhLFNBQ3ZDRCxHQUFVLEVBQ1Z0b0IsRUFBRXdvQixhQUFhLEtBQU14b0IsRUFBRXVvQixhQUFhLE1BQVFyUSxXQUFXbFksRUFBRXVvQixhQUFhLE9BQVNILEVBQUtBLEdBQ3BGcG9CLEVBQUV3b0IsYUFBYSxLQUFNeG9CLEVBQUV1b0IsYUFBYSxNQUFRclEsV0FBV2xZLEVBQUV1b0IsYUFBYSxPQUFTRixFQUFLQSxJQUVuRkMsSUFDaUIsV0FBZHRvQixFQUFFK2EsU0FDRi9hLEVBQUV3b0IsYUFBYSxLQUFNSixHQUNyQnBvQixFQUFFd29CLGFBQWEsS0FBTUgsS0FFckJyb0IsRUFBRXdvQixhQUFhLElBQUtKLEdBQ3BCcG9CLEVBQUV3b0IsYUFBYSxJQUFLSCxVQUk1QixHQUFJcm9CLEVBQUV1b0IsYUFBYSxLQUFNLENBQ3JCLElBQUlFLEVBQVloUixFQUFVaVIsY0FBYzFvQixFQUFFdW9CLGFBQWEsTUFBTSxFQUFPSCxFQUFJQyxHQUN4RXJvQixFQUFFd29CLGFBQWEsSUFBS0MsR0FHNUJ6b0IsRUFBRXdvQixhQUFhLFNBQVVKLEdBQ3pCcG9CLEVBQUV3b0IsYUFBYSxTQUFVSCxLLGdDQUdaanBCLEdBQ2IsSUFBSWljLEVBQVV2RyxTQUFTd0csZ0JBQWdCLDZCQUE4QixRQUNyRUQsRUFBUUUsZUFBZSxLQUFNLElBQUtuYyxHQUlsQyxJQUhBLElBQ21Cb2MsRUFERkgsRUFBUUksaUJBQ1gsSUFDVkMsRUFBYyxHQUNUNWMsRUFBSSxFQUFHQSxFQUZGLElBRWVBLElBQUssQ0FDOUIsSUFBSTZjLEVBQVNOLEVBQVFPLGlCQUFpQkosRUFBYzFjLEdBQzFDNGMsR0FBSixJQUFONWMsRUFBeUIsSUFBTTZjLEVBQU9FLEVBQUksSUFBTUYsRUFBT0csRUFBbUIsSUFBTUgsRUFBT0UsRUFBSSxJQUFNRixFQUFPRyxFQUc1RyxPQURBSixHQUFlLE0sb0NBSUV0YyxHQUNqQixJQUdJdXBCLEVBSEVDLEVBQVd4cEIsRUFDWHlwQixHQUFpQixJQUFBQyxVQUFTRixHQUMxQkcsRUFBWSxJQUFJLEVBQUosVUFpRWxCLE9BL0RBRixFQUFlOVosUUFBUSxTQUFBaWEsR0FDbkIsT0FBUUEsRUFBYUMsTUFDakIsSUFBSyxJQUNETixFQUFtQkssRUFDbkJELEVBQVVHLE9BQU9QLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FDdEQsTUFDSixJQUFLLElBQ0Q2TSxFQUFtQkssRUFDbkJELEVBQVVJLE9BQU9SLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FDdEQsTUFDSixJQUFLLElBQ0Q2TSxFQUFtQkssRUFDbkJELEVBQVVLLGVBQWVULEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FDOUQsTUFDSixJQUFLLElBQ0Q2TSxFQUFtQkssRUFDbkJELEVBQVVNLGFBQWFWLEVBQWlCOU0sR0FDeEMsTUFDSixJQUFLLElBQ0Q4TSxFQUFtQkssRUFDbkJELEVBQVVPLHFCQUFxQlgsRUFBaUI5TSxHQUNoRCxNQUNKLElBQUssSUFDRDhNLEVBQW1CSyxFQUNuQkQsRUFBVVEsV0FBV1osRUFBaUI3TSxHQUN0QyxNQUNKLElBQUssSUFDRDZNLEVBQW1CSyxFQUNuQkQsRUFBVVMsbUJBQW1CYixFQUFpQjdNLEdBQzlDLE1BQ0osSUFBSyxJQUNENk0sRUFBbUJLLEVBQ25CRCxFQUFVVSxtQkFBbUJkLEVBQWlCaEUsR0FBSWdFLEVBQWlCL0QsR0FBSStELEVBQWlCM0QsR0FBSTJELEVBQWlCMUQsR0FBSTBELEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FDdEosTUFDSixJQUFLLElBQ0Q2TSxFQUFtQkssRUFDbkJELEVBQVVXLDJCQUEyQmYsRUFBaUJoRSxHQUFJZ0UsRUFBaUIvRCxHQUFJK0QsRUFBaUIzRCxHQUFJMkQsRUFBaUIxRCxHQUFJMEQsRUFBaUI5TSxFQUFHOE0sRUFBaUI3TSxHQUM5SixNQUNKLElBQUssSUFDRDZNLEVBQW1CSyxFQUNuQkQsRUFBVVksdUJBQXVCaEIsRUFBaUJoRSxHQUFJZ0UsRUFBaUIvRCxHQUFJK0QsRUFBaUI5TSxFQUFHOE0sRUFBaUI3TSxHQUNoSCxNQUNKLElBQUssSUFDRDZNLEVBQW1CSyxFQUNuQkQsRUFBVWEsK0JBQStCakIsRUFBaUJoRSxHQUFJZ0UsRUFBaUIvRCxHQUFJK0QsRUFBaUI5TSxFQUFHOE0sRUFBaUI3TSxHQUN4SCxNQUNKLElBQUssSUFDRDZNLEVBQW1CSyxFQUNuQkQsRUFBVWMsTUFBTWxCLEVBQWlCaEYsR0FBSWdGLEVBQWlCL0UsR0FBSStFLEVBQWlCbUIsZ0JBQWlCbkIsRUFBaUJvQixXQUFZcEIsRUFBaUJxQixNQUFPckIsRUFBaUI5TSxFQUFHOE0sRUFBaUI3TSxHQUN0TCxNQUNKLElBQUssSUFDRDZNLEVBQW1CSyxFQUNuQkQsRUFBVWtCLGNBQWN0QixFQUFpQmhGLEdBQUlnRixFQUFpQi9FLEdBQUkrRSxFQUFpQm1CLGdCQUFpQm5CLEVBQWlCb0IsV0FBWXBCLEVBQWlCcUIsTUFBT3JCLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FDOUwsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNEaU4sRUFBVW1CLFlBQ1YsTUFDSixRQUVJLE1BREE1TixRQUFRQyxNQUFNeU0sR0FDUixJQUFJbUIsTUFBTSxxREFHckIsQ0FBQ3BCLEVBQVVxQixRQUFTckIsRUFBVXNCLFcseUNBR2ZqckIsR0FDdEIsSUFBSWtyQixFQUFhMWxCLEtBQUsybEIsY0FBY25yQixHQUNoQ29yQixFQUFLLElBQUksRUFBSixVQUFjcHJCLEdBRXZCLE9BREFvckIsRUFBR0MsVUFDSSxDQUFDSCxFQUFZRSxLLGtDQUdMcHJCLEdBQ2ZBLEVBQUlBLEVBQUVnRyxRQUFRLHVDQUF3QyxJQUFJQSxRQUFRLDRDQUE2QyxJQUFJQSxRQUFRLE1BQU8sS0FDbEksSUFBSWdYLEVBQVksSUFBSTVGLE9BQU8sbURBQ3ZCZ0csRUFBT3BkLEVBQUVpZCxNQUFNRCxHQUNuQixHQUFJSSxFQUFNLENBQ04sSUFBTWtPLEVBQVM5bEIsS0FBSytsQixXQUFXbk8sR0FDL0JGLFFBQVErQixJQUFJLGlCQUFrQnFNLE0saUNBSXBCbE8sR0FDZCxJQUFJaEosRUFBSSxFQUFHb1gsRUFBSSxFQU9mLEdBSjRDLE1BQXhDcE8sRUFBS0EsRUFBS2hYLE9BQVMsR0FBR0QsZUFDdEJpWCxFQUFLcU8sT0FBT3JPLEVBQUtoWCxPQUFTLEVBQUcsR0FHYixJQUFoQmdYLEVBQUtoWCxPQUNMLE1BQU8sRUFBQyxFQUFPZ08sRUFBR29YLEdBSWxCLElBRkEsSUFBTUUsRUFBV3RPLEVBQUssR0FBR25GLFVBQVUsR0FBR2hULE1BQU0sS0FDeEMwbUIsRUFBZ0IsR0FBSUMsRUFBYyxDQUFFblAsRUFBRyxFQUFHQyxFQUFHLEdBQ3hDaGQsRUFBSSxFQUFHQSxFQUFJMGQsRUFBS2hYLE9BQVExRyxJQUFLLENBQ2xDLElBQU1pZSxFQUFVUCxFQUFLMWQsR0FBR3VZLFVBQVUsRUFBRyxHQUMvQnVJLEVBQVdwRCxFQUFLMWQsR0FBR3VZLFVBQVUsR0FDbkMsR0FBOEIsTUFBMUIwRixFQUFReFgsZUFBNEMsTUFBbEJ3bEIsR0FBMkMsS0FBbEJBLEVBSXhELEdBQThCLE1BQTFCaE8sRUFBUXhYLGVBQTRDLE1BQWxCd2xCLEdBQTJDLEtBQWxCQSxHQUkvRCxHQUE4QixNQUExQmhPLEVBQVF4WCxjQUF1QixDQUN0QyxJQUFJMGxCLEVBQVEsRUFBR0MsRUFBUSxFQUN2QixHQUFnQixNQUFabk8sRUFBaUIsQ0FDakIsSUFBTUMsRUFBWTRDLEVBQVN2YixNQUFNLEtBQ2pDNG1CLEVBQVEvUyxXQUFXOEUsRUFBVSxJQUFNOUUsV0FBVzRTLEVBQVMsSUFBTUUsRUFBWW5QLEVBQ3pFcVAsRUFBUWhULFdBQVc4RSxFQUFVLElBQU05RSxXQUFXNFMsRUFBUyxJQUFNRSxFQUFZbFAsTUFDdEUsQ0FDSCxJQUFNa0IsRUFBWTRDLEVBQVN2YixNQUFNLEtBQ2pDNG1CLEVBQVEvUyxXQUFXOEUsRUFBVSxJQUM3QmtPLEVBQVFoVCxXQUFXOEUsRUFBVSxJQUdqQyxHQUFjLElBQVZpTyxHQUF5QixJQUFWQyxFQUNmLE1BQU8sRUFBQyxFQUFPMVgsRUFBR29YLEdBQ2YsR0FBYyxJQUFWSyxFQUFhLENBQ3BCLEdBQXNCLE1BQWxCRixHQUEyQyxLQUFsQkEsRUFJekIsTUFBTyxFQUFDLEVBQU92WCxFQUFHb1gsR0FIbEJHLEVBQWdCLElBQ2hCQyxFQUFZbFAsR0FBS29QLEVBQVFGLEVBQVlsUCxNQUl0QyxDQUNILEdBQXNCLE1BQWxCaVAsR0FBMkMsS0FBbEJBLEVBSXpCLE1BQU8sRUFBQyxFQUFPdlgsRUFBR29YLEdBSGxCRyxFQUFnQixJQUNoQkMsRUFBWW5QLEdBQUtvUCxFQUFRRCxFQUFZblAsRUFLN0NySSxFQUFJeVgsRUFDSkwsRUFBSU0sUUFqQ0pILEVBQWdCLElBQ2hCQyxFQUFZblAsRUFBZ0IsTUFBWmtCLEVBQWtCN0UsV0FBVzBILEdBQVkxSCxXQUFXMEgsR0FBWW9MLEVBQVluUCxFQUM1RnJJLEVBQWdCLE1BQVp1SixFQUFtQjdFLFdBQVcwSCxHQUFZMUgsV0FBVzRTLEVBQVMsSUFBTzVTLFdBQVcwSCxRQU5wRm1MLEVBQWdCLElBQ2hCQyxFQUFZbFAsRUFBZ0IsTUFBWmlCLEVBQWtCN0UsV0FBVzBILEdBQVkxSCxXQUFXMEgsR0FBWW9MLEVBQVlsUCxFQUM1RjhPLEVBQWdCLE1BQVo3TixFQUFtQjdFLFdBQVcwSCxHQUFZMUgsV0FBVzRTLEVBQVMsSUFBTzVTLFdBQVcwSCxHQXNDNUYsT0FBc0IsSUFBbEJvTCxFQUFZblAsR0FBNkIsSUFBbEJtUCxFQUFZbFAsRUFDNUIsRUFBQyxFQUFPdEksRUFBR29YLEdBR25CLEVBQUMsRUFBTS9uQixLQUFLd2EsSUFBSTdKLEdBQUkzUSxLQUFLd2EsSUFBSXVOLE0sb0NBR25CeHJCLEVBQUcrckIsR0FBNkMsSUFBdEMvQyxFQUFzQyx1REFBakMsRUFBR0MsRUFBOEIsdURBQXpCLEVBQUcrQyxFQUFzQix1REFBWCxJQUFJN1ksSUFDMURuVCxFQUFJQSxFQUFFZ0csUUFBUSx1Q0FBd0MsSUFBSUEsUUFBUSw0Q0FBNkMsSUFBSUEsUUFBUSxNQUFPLEtBQ2xJLElBQUlnWCxFQUFZLElBQUk1RixPQUFPLG1EQUN2QmlTLEVBQVksR0FDWmpNLEVBQU9wZCxFQUFFaWQsTUFBTUQsR0FDbkIsR0FBSUksRUFBTSxDQUVOLElBQUk2TyxFQUFlN08sRUFBSyxHQUFHbkYsVUFBVSxFQUFHLEdBQ3BDaVUsRUFBUyxJQUFLQyxFQUFTLElBQzNCLEdBQXFCLE1BQWpCRixHQUF5QyxNQUFqQkEsRUFBc0IsQ0FDOUMsSUFBSUcsRUFBaUJoUCxFQUFLLEdBQUduRixVQUFVLEdBQUdoVCxNQUFNLEtBQ2hEaW5CLEVBQVNFLEVBQWUsR0FDeEJELEVBQVNDLEVBQWUsR0FHNUIsSUFBSyxJQUFJMXNCLEVBQUksRUFBR0EsRUFBSTBkLEVBQUtoWCxPQUFRMUcsSUFBSyxDQUNsQyxJQUFJaWUsRUFBVVAsRUFBSzFkLEdBQUd1WSxVQUFVLEVBQUcsR0FDL0J1SSxFQUFXcEQsRUFBSzFkLEdBQUd1WSxVQUFVLEdBRWpDLE9BREFvUixHQUFhMUwsRUFDTEEsR0FDSixJQUFLLElBQ0QwTCxFQUFZN2pCLEtBQUs2bUIsWUFBWWhELEVBQVcyQyxFQUFVdHNCLEVBQUdpZSxFQUFTNkMsRUFBVXVMLEVBQU9HLEVBQVFsRCxHQUN2RixNQUNKLElBQUssSUFDREssRUFBWTdqQixLQUFLNm1CLFlBQVloRCxFQUFXMkMsRUFBVXRzQixFQUFHaWUsRUFBUzZDLEVBQVV1TCxFQUFPLElBQUssR0FDcEYsTUFDSixJQUFLLElBQ0QxQyxFQUFZN2pCLEtBQUs2bUIsWUFBWWhELEVBQVcyQyxFQUFVdHNCLEVBQUdpZSxFQUFTNkMsRUFBVXVMLEVBQU9JLEVBQVFsRCxHQUN2RixNQUNKLElBQUssSUFDREksRUFBWTdqQixLQUFLNm1CLFlBQVloRCxFQUFXMkMsRUFBVXRzQixFQUFHaWUsRUFBUzZDLEVBQVV1TCxFQUFPLElBQUssR0FDcEYsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFFRCxJQURBLElBQUlyTCxFQUFPRixFQUFTdmIsTUFBTSxLQUNqQnFuQixFQUFLLEVBQUdBLEVBQUs1TCxFQUFLdGEsT0FBUWttQixJQUUzQmpELEVBREFpRCxFQUFLLEdBQU0sRUFDQzltQixLQUFLNm1CLFlBQVloRCxFQUFXMkMsRUFBVXRzQixFQUFHaWUsRUFBUytDLEVBQUs0TCxHQUFLUCxFQUFPRyxFQUFRbEQsR0FFM0V4akIsS0FBSzZtQixZQUFZaEQsRUFBVzJDLEVBQVV0c0IsRUFBR2llLEVBQVMrQyxFQUFLNEwsR0FBS1AsRUFBT0ksRUFBUWxELEdBRXZGcUQsSUFBTzVMLEVBQUt0YSxPQUFTLElBQ3JCaWpCLEdBQWEsS0FHckIsTUFDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFFRCxJQURBLElBQUlrRCxFQUFRL0wsRUFBU3ZiLE1BQU0sS0FDbEJxbkIsRUFBSyxFQUFHQSxFQUFLQyxFQUFNbm1CLE9BQVFrbUIsSUFDaENqRCxFQUFZN2pCLEtBQUs2bUIsWUFBWWhELEVBQVcyQyxFQUFVdHNCLEVBQUdpZSxFQUFTNE8sRUFBTUQsR0FBS1AsRUFBTyxJQUFLLEdBQ2pGTyxJQUFPQyxFQUFNbm1CLE9BQVMsR0FBbUIsS0FBZG1tQixFQUFNRCxLQUNqQ2pELEdBQWEsS0FHckIsTUFDSixJQUFLLElBRUQsSUFEQSxJQUFJbUQsRUFBUWhNLEVBQVN2YixNQUFNLEtBQ2xCcW5CLEVBQUssRUFBR0EsRUFBS0UsRUFBTXBtQixPQUFRa21CLElBQzVCQSxJQUFPRSxFQUFNcG1CLE9BQVMsR0FDdEJpakIsRUFBWTdqQixLQUFLNm1CLFlBQVloRCxFQUFXMkMsRUFBVXRzQixFQUFHaWUsRUFBUzZPLEVBQU1GLEdBQUtQLEVBQU9qVCxXQUFXb1QsR0FBVSxFQUFHbEQsR0FDeEdLLEdBQWEsS0FDTmlELElBQU9FLEVBQU1wbUIsT0FBUyxFQUM3QmlqQixFQUFZN2pCLEtBQUs2bUIsWUFBWWhELEVBQVcyQyxFQUFVdHNCLEVBQUdpZSxFQUFTNk8sRUFBTUYsR0FBS1AsRUFBT2pULFdBQVdxVCxHQUFVLEVBQUdsRCxHQUV4R0ksR0FBYW1ELEVBQU1GLEdBQU0sSUFHakMsTUFDSixJQUFLLElBRUQsSUFEQSxJQUFJRyxFQUFTak0sRUFBU3ZiLE1BQU0sS0FDbkJxbkIsRUFBSyxFQUFHQSxFQUFLRyxFQUFPcm1CLE9BQVFrbUIsSUFDN0JBLElBQU9HLEVBQU9ybUIsT0FBUyxHQUN2QmlqQixFQUFZN2pCLEtBQUs2bUIsWUFBWWhELEVBQVcyQyxFQUFVdHNCLEVBQUdpZSxFQUFTOE8sRUFBT0gsR0FBS1AsRUFBTyxJQUFLLEdBQ3RGMUMsR0FBYSxLQUNOaUQsSUFBT0csRUFBT3JtQixPQUFTLEVBQzlCaWpCLEVBQVk3akIsS0FBSzZtQixZQUFZaEQsRUFBVzJDLEVBQVV0c0IsRUFBR2llLEVBQVM4TyxFQUFPSCxHQUFLUCxFQUFPLElBQUssR0FFdEYxQyxHQUFhb0QsRUFBT0gsR0FBTSxNQWFsRCxPQUFPakQsSSxrQ0FHUUEsRUFBVzJDLEVBQVVVLEVBQWUvTyxFQUFTNkMsRUFBVXVMLEVBQU9ZLEVBQVVDLEdBRXZGLEdBREFqUCxFQUFVQSxFQUFReFgsY0FDZDRsQixFQUNBLFFBQXFDLElBQTFCQyxFQUFTenJCLElBQUlvZCxHQUEwQixDQUc5QyxJQUZBLElBQUlrUCxFQUFjYixFQUFTenJCLElBQUlvZCxHQUMzQm1QLEdBQU8sRUFDRkMsRUFBSSxFQUFHQSxFQUFJRixFQUFZem1CLE9BQVEybUIsSUFDcEMsR0FBSUYsRUFBWUUsR0FBR0MsU0FBV04sRUFBZSxDQUN6Q3JELEdBQWFzRCxFQUNiRyxHQUFPLEVBQ1AsTUFHSEEsSUFDRHpELEdBQWE3SSxRQUdqQjZJLEdBQWE3SSxPQUdiQSxFQUFTcGEsT0FBUyxJQUNsQmlqQixHQUFjdlEsV0FBVzBILEdBQVlvTSxHQUc3QyxPQUFPdkQsSSxnQ0FTTTRELEVBQVFDLEVBQU1DLEVBQU9DLEVBQVdDLEdBQzdDSixFQUFTQSxFQUFPam5CLFFBQVEsdUNBQXdDLElBQUlBLFFBQVEsNENBQTZDLElBQUlBLFFBQVEsTUFBTyxLQUM1SWtuQixFQUFPQSxFQUFLbG5CLFFBQVEsdUNBQXdDLElBQUlBLFFBQVEsNENBQTZDLElBQUlBLFFBQVEsTUFBTyxLQUN4SSxJQUFJcWpCLEVBQVksR0FDaEIsR0FBYyxJQUFWOEQsRUFDQTlELEVBQVk0RCxPQUNULEdBQWMsSUFBVkUsRUFDUDlELEVBQVk2RCxPQUVaLElBQUssSUFBSXh0QixFQUFJLEVBQUdxUixFQUFNcWMsRUFBVWhuQixPQUFRMUcsRUFBSXFSLEVBQUtyUixJQUM3QzJwQixJQUFvQixJQUFOM3BCLEVBQVUsSUFBTSxPQUFTMnRCLEVBQVEzdEIsR0FBRyxHQUFLMHRCLEVBQVUxdEIsR0FBRyxJQUFNeXRCLEVBQVFDLEVBQVUxdEIsR0FBRyxJQUFNLE1BQVEydEIsRUFBUTN0QixHQUFHLEdBQUswdEIsRUFBVTF0QixHQUFHLElBQU15dEIsRUFBUUMsRUFBVTF0QixHQUFHLElBTzdLLE1BSHlDLE1BQXJDdXRCLEVBQU83UyxPQUFPNlMsRUFBTzdtQixPQUFTLElBQW1ELE1BQXJDNm1CLEVBQU83UyxPQUFPNlMsRUFBTzdtQixPQUFTLEtBQzFFaWpCLEdBQWEsS0FFVkEsSSxvQ0FZVWlFLEVBQWdCQyxFQUFjQyxFQUFjQyxFQUFZTixFQUFPTyxHQUNoRixJQUFJQyxFQUFhLFNBQUNsc0IsRUFBR29DLEdBQUosT0FBVUEsRUFBSXBDLEVBQUssV0FBUSxLQUFNLDBDQUFkLEdBQStELE1BQ25Ha3NCLEVBQVdMLEVBQWdCQyxHQUMzQkksRUFBV0gsRUFBY0MsR0FDekIsSUFBSUcsRUFBZSxTQUFDbnNCLEVBQUdvQyxHQUFKLE9BQVVBLEVBQWMsRUFBVkosS0FBS3VpQixHQUFTdmlCLEtBQUtpRSxPQUFPN0QsRUFBSXBDLEdBQUtnQyxLQUFLdWlCLEdBQUssSUFFOUV1SCxFQUFlSyxFQUFhTixFQUFnQkMsR0FDNUNDLEVBQWVJLEVBQWFOLEVBQWdCRSxHQUM1Q0MsRUFBYUcsRUFBYUosRUFBY0MsR0FHeENBLEVBQWFHLEVBRGJKLEdBQWdCL3BCLEtBQUt3YSxJQUFJdVAsRUFBZUYsR0FBa0I3cEIsS0FBS3dhLElBQUl3UCxFQUFhRixHQUFnQixFQUFJOXBCLEtBQUt1aUIsR0FBSyxFQUFjLEVBQVZ2aUIsS0FBS3VpQixHQUMvRXlILEdBQ3hDLElBQUlJLEVBQWNILEdBQWtCLFNBQUNqc0IsRUFBR29DLEVBQUdyRCxHQUFQLE9BQWFBLEdBQUtxRCxFQUFJcEMsR0FBS0EsR0FDL0QsTUFBTyxDQUFDb3NCLEVBQVlQLEVBQWdCRSxFQUFjTCxHQUFRVSxFQUFZTixFQUFjRSxFQUFZTixNLG1DQUdoRlcsR0FDaEIsSUFBSWhsQixFQUFTLElBQUlxSyxJQVlqQixPQVhBMmEsRUFBV25lLFFBQVEsU0FBQ29lLEVBQVdsVixHQUUzQixJQURBLElBQUltVixFQUFlLEdBQ1Z0dUIsRUFBSSxFQUFHQSxFQUFJcXVCLEVBQVUzbkIsT0FBUTFHLFNBQ04sSUFBakJxdUIsRUFBVXJ1QixJQUNqQnN1QixFQUFhamxCLEtBQU1nbEIsRUFBVXJ1QixHQUFHTSxFQUFhK3RCLEVBQVVydUIsR0FBR00sRUFBdEIsUUFHeENndUIsRUFBYTVuQixPQUFTLEdBQ3RCaVMsRUFBVTRWLFNBQVNELEVBQWNsbEIsS0FHbENBLEksK0JBR0tvbEIsRUFBTXBsQixHQU1sQixJQUxBLElBQUlrVSxFQUFZLElBQUk1RixPQUFPLDhCQUN2QitXLEVBQVNELEVBQUssR0FHZEUsR0FESkQsR0FEQUEsRUFBU0EsRUFBT2hvQixlQUNBSCxRQUFRLDZCQUE4QixJQUFJQSxRQUFRLG1DQUFvQyxJQUFJQSxRQUFRLE1BQU8sTUFDakdpWCxNQUFNRCxHQUNyQnRkLEVBQUksRUFBR0EsRUFBSXd1QixFQUFLOW5CLE9BQVExRyxJQUs3QixJQUpBLElBQUkydUIsRUFBT0gsRUFBS3h1QixHQUdaNHVCLEdBREpELEdBREFBLEVBQU9BLEVBQUtsb0IsZUFDQUgsUUFBUSw2QkFBOEIsSUFBSUEsUUFBUSxtQ0FBb0MsSUFBSUEsUUFBUSxNQUFPLE1BQ2pHaVgsTUFBTUQsR0FDakIrUCxFQUFJLEVBQUdBLEVBQUlxQixFQUFXaG9CLE9BQVEybUIsSUFDbkMsUUFBMkIsSUFBaEJ1QixFQUFTdkIsR0FBb0IsQ0FDcEMsSUFBSXBQLEVBQVV5USxFQUFXckIsR0FBRzlVLFVBQVUsRUFBRyxRQUNOLElBQXhCblAsRUFBT3ZJLElBQUlvZCxJQUNsQjdVLEVBQU80RSxJQUFJaVEsRUFBUyxJQUV4QixJQUFJbkQsRUFBTSxHQUNWQSxFQUFJd1MsT0FBU0QsRUFDYnZTLEVBQUkrVCxhQUFlLEdBR25CLElBRkEsSUFDSUMsRUFEaUJKLEVBQVdyQixHQUFHOVUsVUFBVSxHQUNSaFQsTUFBTSxLQUNsQ25GLEVBQUksRUFBR0EsRUFBSTB1QixFQUFnQnBvQixPQUFRdEcsSUFDeEMwYSxFQUFJK1QsYUFBYXhsQixLQUFLakosR0FFMUJnSixFQUFPdkksSUFBSW9kLEdBQVM1VSxLQUFLeVIsT0FDdEIsQ0FDSCxJQUFJbUQsRUFBVTJRLEVBQVN2QixHQUFHOVUsVUFBVSxFQUFHLEdBQ25Dd1csRUFBZUgsRUFBU3ZCLEdBQUc5VSxVQUFVLEdBQ3JDeVcsRUFBaUJOLEVBQVdyQixHQUFHOVUsVUFBVSxHQUM3QyxHQUFJd1csSUFBaUJDLEVBQWdCLE1BQ0UsSUFBeEI1bEIsRUFBT3ZJLElBQUlvZCxJQUNsQjdVLEVBQU80RSxJQUFJaVEsRUFBUyxJQUV4QixJQUFJbkQsRUFBTSxHQUNWQSxFQUFJd1MsT0FBU0QsRUFDYnZTLEVBQUkrVCxhQUFlLEdBR25CLElBRkEsSUFBSUksRUFBZ0JGLEVBQWF4cEIsTUFBTSxLQUNuQ3VwQixFQUFrQkUsRUFBZXpwQixNQUFNLEtBQ2xDbkYsRUFBSSxFQUFHQSxFQUFJNnVCLEVBQWN2b0IsT0FBUXRHLElBQ2xDMkQsS0FBS2lFLE1BQXFDLElBQS9Cb1IsV0FBVzZWLEVBQWM3dUIsT0FBZ0IyRCxLQUFLaUUsTUFBdUMsSUFBakNvUixXQUFXMFYsRUFBZ0IxdUIsTUFDMUYwYSxFQUFJK1QsYUFBYXhsQixLQUFLakosR0FLOUIsSUFEQSxJQUFJOHVCLEdBQVUsRUFDTDl1QixFQUFJLEVBQUdBLEVBQUlnSixFQUFPdkksSUFBSW9kLEdBQVN2WCxPQUFRdEcsSUFDNUMsR0FBSWdKLEVBQU92SSxJQUFJb2QsR0FBUzdkLEdBQUdrdEIsU0FBV3hTLEVBQUl3UyxPQUFRLENBQzlDNEIsR0FBVSxFQUNWOWxCLEVBQU92SSxJQUFJb2QsR0FBUzdkLEdBQUd5dUIsYUFBdkIsWUFBMEMsSUFBSU0sSUFBSixZQUFZL2xCLEVBQU92SSxJQUFJb2QsR0FBUzdkLEdBQUd5dUIsY0FBbkMsRUFBb0QvVCxFQUFJK1Qsa0JBQ2xHLE1BR0hLLEdBQ0Q5bEIsRUFBT3ZJLElBQUlvZCxHQUFTNVUsS0FBS3lSLE8sd0NBU3hCc1UsR0FDckIsSUFBSUMsRUFBS0QsRUFBSTNGLGFBQWEsYUFDMUIsR0FBSTRGLEVBQUksQ0FJSkEsR0FIQUEsRUFBS0EsRUFBRy9vQixRQUFRLDZCQUE4QixTQUFDbEcsR0FDM0MsTUFBYSxNQUFOQSxFQUFZLEdBQUssSUFBTUEsS0FFMUJrRyxRQUFRLGVBQWdCLElBQUlmLE1BQU0sS0FFMUMsSUFEQSxJQUFJK3BCLEVBQVcsR0FBSUMsRUFBVyxHQUNyQnZ2QixFQUFJLEVBQUdBLEVBQUlxdkIsRUFBRzNvQixPQUFRMUcsSUFDdkJxdkIsRUFBR3J2QixHQUFHa1EsUUFBUSxjQUFnQixFQUM5QnFmLEVBQVdGLEVBQUdydkIsR0FDUHF2QixFQUFHcnZCLEdBQUdrUSxRQUFRLFVBQVksSUFDakNvZixFQUFXRCxFQUFHcnZCLElBR3RCLElBQUl3dkIsRUFBZSxDQUFDLElBQUssS0FBTUMsRUFBYyxJQU83QyxNQU5pQixLQUFiRixJQUNBQyxFQUFlRCxFQUFTanBCLFFBQVEsb0JBQXFCLElBQUlmLE1BQU0sTUFFbEQsS0FBYitwQixJQUNBRyxFQUFjSCxFQUFTaHBCLFFBQVEsZ0JBQWlCLEtBRTdDLENBQUVvcEIsVUFBVyxDQUFDdFcsV0FBV29XLEVBQWEsSUFBS3BXLFdBQVdvVyxFQUFhLEtBQU1HLFNBQVV2VyxXQUFXcVcsSUFFekcsTUFBTyxDQUFFQyxVQUFXLENBQUMsRUFBSyxHQUFNQyxTQUFVLEsscUNBUXhCMVQsRUFBUzJULEdBQzNCLE9BQVEzVCxHQUNKLElBQUssU0FDRCxNQUFPLENBQUMsVUFBVyxLQUFNLEtBQU0sSUFBSyxTQUFVLGVBQWdCLFFBQVE3TCxTQUFTd2YsR0FDbkYsSUFBSyxVQUNELE1BQU8sQ0FBQyxVQUFXLEtBQU0sS0FBTSxLQUFNLEtBQU0sU0FBVSxlQUFnQixRQUFReGYsU0FBU3dmLEdBQzFGLElBQUssUUFDRCxNQUFPLENBQUMsSUFBSyxJQUFLLFFBQVMsU0FBVSxPQUFRLGFBQWMsdUJBQXVCeGYsU0FBU3dmLEdBQy9GLElBQUssT0FDRCxNQUFPLENBQUMsVUFBVyxLQUFNLEtBQU0sS0FBTSxLQUFNLFNBQVUsZUFBZ0IsUUFBUXhmLFNBQVN3ZixHQUMxRixJQUFLLE9BQ0QsTUFBTyxDQUFDLFVBQVcsSUFBSyxTQUFVLGVBQWdCLFFBQVF4ZixTQUFTd2YsR0FDdkUsSUFBSyxVQUNMLElBQUssV0FDRCxNQUFPLENBQUMsVUFBVyxTQUFVLFNBQVUsZUFBZ0IsUUFBUXhmLFNBQVN3ZixHQUM1RSxJQUFLLE9BQ0QsTUFBTyxDQUFDLFVBQVcsSUFBSyxJQUFLLFFBQVMsU0FBVSxLQUFNLEtBQU0sU0FBVSxlQUFnQixRQUFReGYsU0FBU3dmLEdBQzNHLElBQUssT0FDRCxNQUFPLENBQUMsVUFBVyxJQUFLLElBQUssS0FBTSxLQUFNLGVBQWV4ZixTQUFTd2YsR0FDckUsUUFDSSxPQUFPLEssZ0NBT0Y5SCxHQUViLE1BRFUsV0FDQ3RoQixLQUFLc2hCLE8sbUJBSXhCblAsRUFBVWtYLFlBQWMsSUFBSXBjLElBQUksQ0FDNUIsQ0FBQyxPQUFRLENBQUMsSUFBSyxJQUFLLFFBQVMsU0FBVSxLQUFNLE9BQzdDLENBQUMsU0FBVSxDQUFDLEtBQU0sS0FBTSxRQUU1QmtGLEVBQVU0QyxXQUFhLElBQUk5SCxJQUFJLENBQUMsQ0FBQyxZQUFhLFdBQVksQ0FBQyxlQUFnQixXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsaUJBQWtCLFdBQVksQ0FBQyxPQUFRLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxRQUFTLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxRQUFTLFdBQVksQ0FBQyxpQkFBa0IsV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLFVBQVcsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsaUJBQWtCLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxlQUFnQixXQUFZLENBQUMsZ0JBQWlCLFdBQVksQ0FBQyxnQkFBaUIsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsZ0JBQWlCLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxjQUFlLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxjQUFlLFdBQVksQ0FBQyxjQUFlLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxPQUFRLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxPQUFRLFdBQVksQ0FBQyxPQUFRLFdBQVksQ0FBQyxRQUFTLFdBQVksQ0FBQyxjQUFlLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxVQUFXLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxRQUFTLFdBQVksQ0FBQyxRQUFTLFdBQVksQ0FBQyxXQUFZLFdBQVksQ0FBQyxnQkFBaUIsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLGVBQWdCLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyxhQUFjLFdBQVksQ0FBQyxZQUFhLFdBQVksQ0FBQyx1QkFBd0IsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLGFBQWMsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLGNBQWUsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsZUFBZ0IsV0FBWSxDQUFDLGlCQUFrQixXQUFZLENBQUMsaUJBQWtCLFdBQVksQ0FBQyxpQkFBa0IsV0FBWSxDQUFDLGNBQWUsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFFBQVMsV0FBWSxDQUFDLFVBQVcsV0FBWSxDQUFDLFNBQVUsV0FBWSxDQUFDLG1CQUFvQixXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsZUFBZ0IsV0FBWSxDQUFDLGVBQWdCLFdBQVksQ0FBQyxpQkFBa0IsV0FBWSxDQUFDLGtCQUFtQixXQUFZLENBQUMsb0JBQXFCLFdBQVksQ0FBQyxrQkFBbUIsV0FBWSxDQUFDLGtCQUFtQixXQUFZLENBQUMsZUFBZ0IsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFdBQVksV0FBWSxDQUFDLGNBQWUsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLFVBQVcsV0FBWSxDQUFDLFFBQVMsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFNBQVUsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLFNBQVUsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsZ0JBQWlCLFdBQVksQ0FBQyxnQkFBaUIsV0FBWSxDQUFDLGFBQWMsV0FBWSxDQUFDLFlBQWEsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLE9BQVEsV0FBWSxDQUFDLGFBQWMsV0FBWSxDQUFDLFNBQVUsV0FBWSxDQUFDLGdCQUFpQixXQUFZLENBQUMsTUFBTyxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsV0FBWSxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsY0FBZSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsTUFBTyxXQUFZLENBQUMsT0FBUSxXQUFZLENBQUMsVUFBVyxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsWUFBYSxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsUUFBUyxXQUFZLENBQUMsYUFBYyxXQUFZLENBQUMsU0FBVSxXQUFZLENBQUMsY0FBZSxhLElBRXh3SHFjLEUsV0FDVCxhQUFjLFVBQ1ZocUIsS0FBS2lxQixXQUFhLEVBQ2xCanFCLEtBQUtrcUIsWUFBYyxFLDhDQUVYdGIsRUFBR29YLEdBQ1hobUIsS0FBS2lxQixXQUFhcmIsRUFDbEI1TyxLQUFLa3FCLFlBQWNsRSxNLHNCQUlkbUUsRSwrRUFDRWhVLEVBQVNpVSxFQUFhQyxFQUFjQyxFQUFhQyxHQUV4RHZxQixLQUFLbVcsUUFBVUEsRUFDZm5XLEtBQUtvcUIsWUFBY0EsRUFDbkJwcUIsS0FBS3FxQixhQUFlQSxFQUVwQnJxQixLQUFLc3FCLFlBQWNBLEVBQ25CdHFCLEtBQUt1cUIsZ0JBQWtCQSxLLHVDQVFKQyxFQUFhQyxHQUNoQyxPQUFJRCxFQUFZclUsVUFBWXNVLEVBQUd0VSxZQUcxQm5XLEtBQUswcUIsbUJBQW1CRixFQUFZSixZQUFhSyxFQUFHTCxtQkFBekQsSyx5Q0FLc0I3cEIsRUFBSW9xQixHQUMxQixJQUFNQyxFQUFZLENBQUMsSUFBSyxJQUFLLFFBQVMsU0FBVSxJQUFLLFVBQVcsS0FFMURDLEVBRFUsR0FBSCxTQUFPandCLE9BQU91TCxLQUFLNUYsSUFBbkIsRUFBMkIzRixPQUFPdUwsS0FBS3drQixLQUN0QjVnQixPQUFPLFNBQUMrZ0IsUUFDakIsSUFBVnZxQixFQUFHdXFCLFNBQXVDLElBQVZILEVBQUdHLEtBQXNCdnFCLEVBQUd1cUIsR0FBT0gsRUFBR0csTUFHakYsR0FBSUQsRUFBY3ZnQixTQUFTLEtBQU0sQ0FDN0IsSUFBTXlnQixFQUFrQixJQUFJblosT0FBTyxlQUNuQyxPQUFPclIsRUFBRSxFQUFNQyxRQUFRdXFCLEVBQWlCLE1BQVFKLEVBQUUsRUFBTW5xQixRQUFRdXFCLEVBQWlCLElBR3JGLE9BQU9GLEVBQWNoaEIsTUFBTSxTQUFDaWhCLEdBQUQsT0FBT0YsRUFBVXhnQixRQUFRMGdCLElBQU0sUSx3Q0Mva0RsRSxJQUFJM3VCLEVBQU8sRUFBUSxJQUNmRCxFQUFTLEVBQVEsR0FFakJvQyxFQUFRcEMsRUFEQyx3QkFDa0JBLEVBRGxCLHNCQUNtQyxLQUUvQ3ZDLEVBQU9ELFFBQVUsU0FBVStCLEVBQUtOLEdBQy9CLE9BQU9tRCxFQUFNN0MsS0FBUzZDLEVBQU03QyxRQUFpQmdDLElBQVZ0QyxFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUlvSSxLQUFLLENBQ3RCaEMsUUFBU3BGLEVBQUtvRixRQUNkbEcsS0FBTSxFQUFRLElBQWdCLE9BQVMsU0FDdkMydkIsVUFBVywwQyxnQkNUYixJQUFJNVosRUFBTSxFQUFRLElBRWxCelgsRUFBT0QsUUFBVWtCLE9BQU8sS0FBS3F3QixxQkFBcUIsR0FBS3J3QixPQUFTLFNBQVVtRCxHQUN4RSxNQUFrQixVQUFYcVQsRUFBSXJULEdBQWtCQSxFQUFHMEIsTUFBTSxJQUFNN0UsT0FBT21ELEssY0NKckRyRSxFQUFRc0YsRUFBSSxHQUFHaXNCLHNCLDZCQ0VmLElBQUlyc0IsRUFBVyxFQUFRLEdBQ3ZCakYsRUFBT0QsUUFBVSxXQUNmLElBQUlpSSxFQUFPL0MsRUFBU29CLE1BQ2hCc0QsRUFBUyxHQU1iLE9BTEkzQixFQUFLekYsU0FBUW9ILEdBQVUsS0FDdkIzQixFQUFLdXBCLGFBQVk1bkIsR0FBVSxLQUMzQjNCLEVBQUt3cEIsWUFBVzduQixHQUFVLEtBQzFCM0IsRUFBS3lwQixVQUFTOW5CLEdBQVUsS0FDeEIzQixFQUFLMHBCLFNBQVEvbkIsR0FBVSxLQUNwQkEsSSxnQkNWVCxJQUFJMUUsRUFBVyxFQUFRLEdBQ25CNkMsRUFBWSxFQUFRLElBQ3BCa1AsRUFBVSxFQUFRLEVBQVIsQ0FBa0IsV0FDaENoWCxFQUFPRCxRQUFVLFNBQVV1RixFQUFHcXNCLEdBQzVCLElBQ0lwdUIsRUFEQXFMLEVBQUkzSixFQUFTSyxHQUFHcUMsWUFFcEIsWUFBYTdELElBQU44SyxHQUFpRDlLLE9BQTdCUCxFQUFJMEIsRUFBUzJKLEdBQUdvSSxJQUF5QjJhLEVBQUk3cEIsRUFBVXZFLEssK0ZDUHBGLEksRUFBQSxRQUNBLEcsRUFBQSxTLDJCQUNBLFEsaVVBRU1xdUIsRSxXQUNGLFdBQVloZCxFQUFJL1IsRUFBTUMsR0FBUSxVQUMxQnVELEtBQUt1TyxHQUFLQSxFQUNWdk8sS0FBS3hELEtBQU9BLEVBQ1p3RCxLQUFLdkQsT0FBU0EsRSwwREFHUSt1QixFQUFZaFosR0FHbEMsSUFGQSxJQUFJaVosRUFBYSxHQUNiQyxHQUFXLEVBQ054eEIsRUFBSSxFQUFHQSxFQUFJc3hCLEVBQVc1cUIsT0FBUTFHLElBQUssQ0FDeEMsSUFBSXl4QixFQUFZSCxFQUFXdHhCLEdBQzNCLFFBQStCLElBQXBCeXhCLEVBQVUvaEIsWUFBa0QsSUFBbEIraEIsRUFBVTVnQixJQUFxQixDQUNoRixJQUFJNmdCLEVBQVd0VyxTQUFTcVcsRUFBVS9oQixPQUFRaWlCLEVBQVN2VyxTQUFTcVcsRUFBVTVnQixLQUN0RSxHQUFJOGdCLEVBQVNELEVBQVUsQ0FDbkJGLEdBQVcsRUFDWGxaLEVBQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssbUNBQW9DQyxRQUFTdUssS0FBS0csVUFBVW1PLEdBQVlqckIsUUFBUSxNQUFPLEtBQzNILFNBSUEsSUFGQSxJQUFJc3JCLEVBQVlILEVBQVVsdkIsT0FBT2dELE1BQU0sS0FDbkNzc0IsT0FBb0MsSUFBakJKLEVBQVVwZCxHQUFxQnVkLEVBQVVBLEVBQVVsckIsT0FBUyxHQUFLK3FCLEVBQVVwZCxHQUN6RmdaLEVBQUlxRSxFQUFVckUsR0FBS3NFLEVBQVF0RSxJQUNoQ2tFLEVBQVdsb0IsS0FBSyxDQUNaLEdBQU13b0IsRUFBWXhFLEVBQ2xCLE9BQVVvRSxFQUFVbHZCLE9BQVM4cUIsRUFBSSxlQUs3Q2tFLEVBQVdsb0IsS0FBS29vQixHQUd4QixNQUFPLENBQUNGLEVBQVlDLEssaUNBR05GLEVBQVlRLEVBQU94WixHQUNqQyxJQUFJeVosRUFBYSxJQUFJdGUsSUFDckI0ZCxFQUFVN1IsT0FBUyxHQUtuQixJQUpBLElBQUl3UyxFQUFhLEdBQ2JDLEVBQWUsRUFDZkMsRUFBZ0IsRUFDaEJWLEdBQVcsRUFDTnh4QixFQUFJLEVBQUdBLEVBQUlzeEIsRUFBVzVxQixPQUFRMUcsSUFDbkMsR0FBSXN4QixFQUFXdHhCLEdBQUdzQyxPQUFTK3VCLEVBQVVjLFVBQVcsQ0FDNUMsSUFBSUMsRUFBTSxJQUFJQyxlQUNWQyxFQUEwQyxVQUEvQnRjLFNBQVN1YyxTQUFTQyxTQUF1QixFQUFJLElBQ3hEQyxPQUFVLEVBSWQsR0FIQUwsRUFBSW5jLEtBQUssTUFBT3FiLEVBQVd0eEIsR0FBR3VDLFFBQVEsR0FDdEM2dkIsRUFBSU0saUJBQWlCLDJCQUNyQk4sRUFBSU8sS0FBSyxNQUNMUCxFQUFJOVosU0FBV2dhLEVBQVUsQ0FDekIsSUFBSWxKLEVBQVNwVCxTQUFTa1QsY0FBYyxPQUNwQ0UsRUFBT0QsVUFBWWlKLEVBQUlRLGFBRXZCLElBQUlDLEdBREpKLEVBQWFySixFQUFPMEosU0FBUyxJQUNBckosYUFBYSxXQUFXbGtCLE1BQU0sS0FDM0Qwc0IsRUFBZTdZLFdBQVd5WixFQUFZLElBQ3RDWCxFQUFnQjlZLFdBQVd5WixFQUFZLElBQ3ZDeEIsRUFBVTdSLE9BQU9uVyxLQUFLLElBQUkwcEIsRUFBTU4sSUFDaENWLEVBQVcvakIsSUFBSXNqQixFQUFXdHhCLEdBQUdxVSxHQUFJZ2QsRUFBVTdSLE9BQU85WSxPQUFTLFFBQ3JDLE1BQWYwckIsRUFBSTlaLFNBQ1gwWixFQUFXZ0IsUUFBUWh6QixHQUNuQnd4QixHQUFXLEVBRVhsWixFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLGdCQUFrQjZZLEVBQVd0eEIsR0FBR3VDLE9BQVMsMkJBQTRCbVcsUUFBUyxhQUFlNFksRUFBV3R4QixHQUFHdUMsT0FBTytELFFBQVEsTUFBTyxJQUFNLFVBRTVLLENBRUgsSUFBTThpQixFQUFTcFQsU0FBU2tULGNBQWMsT0FDdENFLEVBQU9ELFVBQVltSSxFQUFXdHhCLEdBQUd1QyxPQUNqQyxJQUFNa3dCLEVBQWFySixFQUFPMEosU0FBUyxHQUMvQkQsRUFBY0osRUFBV2hKLGFBQWEsV0FBV2xrQixNQUFNLEtBQzNEMHNCLEVBQWU3WSxXQUFXeVosRUFBWSxJQUN0Q1gsRUFBZ0I5WSxXQUFXeVosRUFBWSxJQUN2Q3hCLEVBQVU3UixPQUFPblcsS0FBSyxJQUFJMHBCLEVBQU1OLElBQ2hDVixFQUFXL2pCLElBQUlzakIsRUFBV3R4QixHQUFHcVUsR0FBSWdkLEVBQVU3UixPQUFPOVksT0FBUyxHQUtuRSxJQUFLLElBQUkxRyxFQUFJLEVBQUdBLEVBQUlneUIsRUFBV3RyQixPQUFRMUcsSUFDbkNzeEIsRUFBV3hwQixNQUFNa3FCLEVBQVdoeUIsR0FBSSxHQU1wQyxZQUZpQixJQUFWOHhCLEVBQXdCVCxFQUFVNEIsV0FBV2xCLEVBQVlELEdBQVNoc0IsS0FBS290QixTQUFTQyxZQUFZbEIsRUFBY0MsR0FFMUdWLEksNENBTVAsSUFGQSxJQUFNL3BCLEVBQU8zQixLQUNQc3RCLEVBQW1CLElBQUkzZixJQUNwQnpULEVBQUksRUFBR0EsRUFBSXF4QixFQUFVN1IsT0FBTzlZLE9BQVExRyxJQUN6Q3F4QixFQUFVN1IsT0FBT3hmLEdBQUd5eUIsV0FBVy9JLGFBQWEsUUFBUyxPQUNyRDJILEVBQVVnQyxrQkFBa0JoQyxFQUFVN1IsT0FBT3hmLEdBQUd5eUIsV0FBV0ssU0FBUyxHQUFJOXlCLEVBQUdvekIsR0FHL0U1VixRQUFRK0IsSUFBSSxvREFBcUQ4UixFQUFVN1IsT0FBTyxHQUFJNlIsRUFBVTdSLE9BQU8sR0FBR2lULFlBQ3JGeG5CLE1BQU11SSxLQUFLNGYsR0FBa0I5aUIsSUFBSSxTQUFBa0ssR0FBSSxPQUFJQSxFQUFLLEtBQ3REdkssUUFBUSxTQUFBcWpCLEdBQ2pCQSxFQUFLcmpCLFFBQVEsU0FBQXNqQixHQUNUOXJCLEVBQUsrckIsbUJBQW1CeGxCLElBQUl1bEIsRUFBS0QsT0FHekN4dEIsS0FBSzJ0QixTQUFXcEMsRUFBVXFDLGdCLGlDQUlaM0IsRUFBWUQsR0FDMUIsR0FBSUEsRUFBTTZCLE1BQU1qdEIsT0FBUyxFQUFHLENBRXhCLElBREEsSUFBSWt0QixFQUFrQixHQUNiNXpCLEVBQUksRUFBR0EsRUFBSTh4QixFQUFNNkIsTUFBTSxHQUFHRSxPQUFPbnRCLE9BQVExRyxJQUFLLENBRW5ELElBREEsSUFBSTh6QixFQUFjLEdBQ1R6RyxFQUFJLEVBQUdBLEVBQUl5RSxFQUFNNkIsTUFBTWp0QixPQUFRMm1CLElBQUssQ0FDekMsSUFBSXdFLEVBQVlDLEVBQU02QixNQUFNdEcsR0FBR3dHLE9BQU83ekIsUUFDRyxJQUE5Qit4QixFQUFXbHhCLElBQUlneEIsR0FDdEJpQyxFQUFZenFCLEtBQUtnb0IsRUFBVTdSLE9BQU91UyxFQUFXbHhCLElBQUlneEIsSUFBWVksV0FBV3NCLFdBQVUsSUFFbEZ2VyxRQUFRd1csS0FBSyxjQUFnQm5DLEVBQVksbUJBRzdDaUMsRUFBWXB0QixTQUFXb3JCLEVBQU02QixNQUFNanRCLFFBQ25Da3RCLEVBQWdCdnFCLEtBQUt5cUIsR0FHN0J6QyxFQUFVNEMsY0FBY25DLEVBQU14dkIsS0FBTXd2QixFQUFNNkIsTUFBTWp0QixPQUFRa3RCLE0sb0NBSTNDTSxFQUFXQyxFQUFVUCxHQU10QyxJQUxBLElBQUlRLEVBQWUsR0FFZkMsRUFBVyxFQUFHQyxFQUFZLEVBQzFCQyxFQUFrQkYsRUFDbEJHLEVBQW1CRixFQUNkdDBCLEVBQUksRUFBR0EsRUFBSTR6QixFQUFnQmx0QixPQUFRMUcsSUFBSyxDQUM3QyxJQUFJeTBCLEVBQVliLEVBQWdCNXpCLEdBQ2hDcTBCLEVBQVdqYixXQUFXcWIsRUFBVSxHQUFHaEwsYUFBYSxVQUNoRDZLLEVBQVlsYixXQUFXcWIsRUFBVSxHQUFHaEwsYUFBYSxXQUNqRDhLLEVBQWtCRixFQUNsQkcsRUFBbUJGLEVBQ25CLElBQUl6QixFQUFjNEIsRUFBVSxHQUFHaEwsYUFBYSxXQUFXbGtCLE1BQU0sS0FDekRtdkIsRUFBV3RiLFdBQVd5WixFQUFZLElBQ2xDOEIsRUFBV3ZiLFdBQVd5WixFQUFZLElBRWxDK0IsRUFBaUIsRUFBQWpjLFVBQVVrYyxrQkFBa0JKLEVBQVUsR0FBRzNCLFNBQVMsSUFFdkUsT0FEQTJCLEVBQVUsR0FBRzNCLFNBQVMsR0FBR3BKLGFBQWEsWUFBYSxhQUFla0wsRUFBZWxGLFVBQVUsR0FBSyxJQUFNa0YsRUFBZWxGLFVBQVUsR0FBSyxLQUM1SHdFLEdBQ0osS0FBSyxVQUFVQSxVQUFVWSxJQUNyQk4sR0FBb0JDLEVBQVUvdEIsT0FDOUIrdEIsRUFBVSxHQUFHL0ssYUFBYSxTQUFVNEssRUFBWUcsRUFBVS90QixRQUMxRCt0QixFQUFVLEdBQUcvSyxhQUFhLFVBQVcsT0FBU2dMLEVBQVcsSUFBTUosRUFBWUcsRUFBVS90QixRQUNyRixNQUNKLEtBQUssVUFBVXd0QixVQUFVYSxJQUNyQlIsR0FBbUJFLEVBQVUvdEIsT0FDN0IrdEIsRUFBVSxHQUFHL0ssYUFBYSxRQUFTMkssRUFBV0ksRUFBVS90QixRQUN4RCt0QixFQUFVLEdBQUcvSyxhQUFhLFVBQVcsT0FBUzJLLEVBQVdJLEVBQVUvdEIsT0FBUyxJQUFNaXVCLEdBSTFGLElBekI2QyxlQXlCcEN0SCxHQUNMLElBQUkySCxFQUFXUCxFQUFVcEgsR0FDckI0SCxFQUFXRCxFQUFTRSxpQkFBaUIsU0FNekMsR0FMQSxHQUFHamxCLFFBQVE5UCxLQUFLODBCLEVBQVUsU0FBQzcwQixHQUN2QixJQUFJKzBCLEVBQVEvWixTQUFTaGIsRUFBRXFwQixhQUFhLE1BQU1sUixVQUFVLElBQ3BEblksRUFBRXNwQixhQUFhLEtBQU0sUUFBVXlMLEVBQVksSUFBSjlILElBQ3ZDanRCLEVBQUVnMUIsVUFBVUMsSUFBSSxRQUFVaEksS0FFMUJBLEVBQUksRUFHSixJQUZBLElBQ0lpSSxFQURnQk4sRUFBU2xDLFNBQVMsR0FDSkEsU0FDekIxeUIsRUFBSSxFQUFHQSxFQUFJazFCLEVBQWM1dUIsT0FBUXRHLElBQUssQ0FDM0MsSUFBSW0xQixFQUFTRCxFQUFjbDFCLEdBQ3ZCbzFCLEVBQWlCLEVBQUE3YyxVQUFVa2Msa0JBQWtCVSxHQUNqRCxPQUFRckIsR0FDSixLQUFLLFVBQVVBLFVBQVVZLElBQ3JCUyxFQUFPN0wsYUFBYSxZQUFhLGFBQWU4TCxFQUFlOUYsVUFBVSxHQUFLLEtBQU84RixFQUFlOUYsVUFBVSxJQUFNNEUsRUE3QzFILElBNkNxSmpILEdBQUssV0FBa0JtSSxFQUFlN0YsU0FBVyxLQUNoTSxNQUNKLEtBQUssVUFBVXVFLFVBQVVhLElBQ3JCUSxFQUFPN0wsYUFBYSxZQUFhLGNBQWdCOEwsRUFBZTlGLFVBQVUsSUFBTTJFLEVBaER0RixJQWdEZ0hoSCxHQUFLLElBQU1tSSxFQUFlOUYsVUFBVSxHQUFLLFdBQWtCOEYsRUFBZTdGLFNBQVcsS0FHdk04RSxFQUFVLEdBQUczQixTQUFTLEdBQUdoZCxZQUFZeWYsS0F0QnhDbEksRUFBSSxFQUFHQSxFQUFJb0gsRUFBVS90QixPQUFRMm1CLElBQUssRUFBbENBLEdBMEJUK0csRUFBYS9xQixLQUFLLElBQUkwcEIsRUFBTTBCLEVBQVUsS0FFMUNwRCxFQUFVN1IsT0FBUzRVLEVBQ25CdHVCLEtBQUtvdEIsU0FBU0MsWUFBWW9CLEVBQWlCQyxLLG9DQVMzQyxJQU5pQixXQUNiaUIsRUFBVyxJQUFJdEcsSUFDZmYsRUFBYSxJQUFJM2EsSUFDakJpaUIsRUFBZ0IsSUFBSWppQixJQUNwQmtpQixFQUFZLENBQUMsSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQUssSUFBSyxRQUFTLFNBQVUsY0FBZSxPQUFRLFNBQVUsV0FDekhDLEVBQWEsR0FDUnZJLEVBQUksRUFBR0EsRUFBSXNJLEVBQVVqdkIsT0FBUTJtQixJQUNsQ3VJLEVBQVdELEVBQVV0SSxJQUFNLEtBSS9CLElBWGlCLGVBV1JydEIsR0FDTCxFQUFLNjFCLG9CQUFvQjcxQixHQUFLLENBQUU4MUIsTUFBTyxHQUFJQyxPQUFRLEdBQUlDLEtBQU0sSUFDN0QsSUFBSWhCLEVBQVczRCxFQUFVN1IsT0FBT3hmLEdBQUd5eUIsV0FDbkNqVixRQUFRK0IsSUFBSSxhQUFjeVYsR0FDMUIsSUFBSWlCLEVBQVFqQixFQUFTRSxpQkFBaUIsU0FDbENlLEVBQU12dkIsT0FBUyxHQUNmLEdBQUd1SixRQUFROVAsS0FBSzgxQixFQUFPLFNBQUM3MUIsR0FDcEIsSUFBSStZLEVBQVMvWSxFQUFFcXBCLGFBQWEsTUFFNUJnTSxFQUFTSixJQUFJbGMsR0FFYixJQURBLElBQUkrYyxFQUFZLEdBQ1A3SSxFQUFJLEVBQUdBLEVBQUlzSSxFQUFVanZCLE9BQVEybUIsSUFFOUI2SSxFQUFVUCxFQUFVdEksSUFESCxnQkFBakJzSSxFQUFVdEksR0FDZ0JqdEIsRUFBRStvQixVQUVGL29CLEVBQUVxcEIsYUFBYWtNLEVBQVV0SSxTQUdyQixJQUEzQmUsRUFBV3Z0QixJQUFJc1ksSUFDdEJpVixFQUFXcGdCLElBQUltTCxFQUFRLElBQUlsTyxNQUFNb21CLEVBQVU3UixPQUFPOVksUUFBUWtKLEtBQUtnbUIsSUFHbkV4SCxFQUFXdnRCLElBQUlzWSxHQUFRblosR0FBS2syQixFQUM1QlIsRUFBYzFuQixJQUFJbUwsRUFBUS9ZLEVBQUUrMUIsY0F2Qi9CbjJCLEVBQUksRUFBR0EsRUFBSThGLEtBQUswWixPQUFPOVksT0FBUTFHLElBQUssRUFBcENBLEdBK0JUcXhCLEVBQVUrRSxhQUFlLEdBQ3pCLElBQUlDLEVBQWdCLEVBQUExZCxVQUFVc0MsVUFBVTBhLEdBQ3hDdkgsRUFBV25lLFFBQVEsU0FBVW9lLEVBQVdsVixHQUNwQyxJQUFLLElBQUluWixFQUFJLEVBQUdBLEVBQUlxMkIsRUFBYzN2QixPQUFRMUcsSUFBSyxDQUczQyxJQUZBLElBQUlvdEIsR0FBTyxFQUNQa0osT0FBYSxFQUNSakosRUFBSSxFQUFHQSxFQUFJZ0IsRUFBVTNuQixPQUFRMm1CLElBQ2xDLFFBQTRCLElBQWpCZ0IsRUFBVWhCLEdBQW9CLENBQ3JDaUosRUFBZ0JqSSxFQUFVaEIsR0FDMUIsTUFHUixJQUFLLElBQUlBLEVBQUksRUFBR0EsRUFBSWdCLEVBQVUzbkIsT0FBUTJtQixJQUNsQyxRQUE0QixJQUFqQmdCLEVBQVVoQixJQUNiZ0IsRUFBVWhCLEdBQUdnSixFQUFjcjJCLE1BQVFzMkIsRUFBY0QsRUFBY3IyQixJQUFLLENBQ3BFcXhCLEVBQVUrRSxhQUFhL3NCLEtBQUtndEIsRUFBY3IyQixJQUMxQ290QixHQUFPLEVBQ1AsTUFJUEEsR0FDRGlKLEVBQWN0SyxPQUFPL3JCLEVBQUcsTUFPcEMsSUFBSXNzQixFQUFXLElBQUk3WSxJQUNmNGQsRUFBVStFLGFBQWFsbUIsUUFBUSxNQUFRLElBQ3ZDb2MsRUFBVyxFQUFBM1QsVUFBVTRkLGFBQWFuSSxJQUV0QzVRLFFBQVErQixJQUFJLHVCQUF3QjhSLEVBQVUrRSxjQUc5Q1gsRUFBV3hxQixNQUFNdUksS0FBS2lpQixHQUN0QixJQUFJZSxFQUFnQixJQUFJL2lCLElBQ3hCLElBQVN6VCxFQUFJLEVBQUdBLEVBQUlxeEIsRUFBVTdSLE9BQU85WSxPQUFRMUcsSUFDekMsSUFBSyxJQUFJcXRCLEVBQUksRUFBR0EsRUFBSW9JLEVBQVMvdUIsT0FBUTJtQixJQUtqQyxRQUo4QyxJQUFuQ21KLEVBQWMzMUIsSUFBSTQwQixFQUFTcEksS0FDbENtSixFQUFjeG9CLElBQUl5bkIsRUFBU3BJLElBQUksR0FHK0MsSUFBOUVnRSxFQUFVN1IsT0FBT3hmLEdBQUd5eUIsV0FBV3lDLGlCQUFpQixJQUFNTyxFQUFTcEksSUFBSTNtQixPQUFjLENBQzdFOHZCLEVBQWMzMUIsSUFBSTQwQixFQUFTcEksTUFDM0J2bkIsS0FBSyt2QixvQkFBb0I3MUIsR0FBR2cyQixLQUFLM3NCLEtBQUtvc0IsRUFBU3BJLElBQy9DbUosRUFBY3hvQixJQUFJeW5CLEVBQVNwSSxJQUFJLElBRW5DLElBQUlvSixFQUFVZixFQUFjNzBCLElBQUk0MEIsRUFBU3BJLElBQ3JDakUsRUFBU3BULFNBQVNrVCxjQUFjLE9BQ3BDRSxFQUFPRCxVQUFZc04sRUFJbkIsSUFIQSxJQUFJQyxFQUFPdE4sRUFBTzBKLFNBQVMsR0FDdkJvRCxFQUFZLEdBRVB6eEIsRUFBSSxFQUFHQSxFQUFJNHNCLEVBQVUrRSxhQUFhMXZCLE9BQVFqQyxJQUMvQyxHQUFrQyxNQUE5QjRzQixFQUFVK0UsYUFBYTN4QixJQUFjNHNCLEVBQVUrRSxhQUFhbG1CLFFBQVEsV0FBYSxFQUFHLENBQ3BGLElBRUl5bUIsR0FGU0QsRUFBS2pOLGFBQWEsS0FBV3JRLFdBQVdzZCxFQUFLak4sYUFBYSxNQUFqQyxJQUNwQmlOLEVBQUtqTixhQUFhLFVBQWdCclEsV0FBV3NkLEVBQUtqTixhQUFhLFdBQWpDLEdBRWhEaU4sRUFBS2hOLGFBQWEsSUFBS2lOLEdBQ3ZCVCxFQUFVbFosRUFBSTJaLE9BQ1gsR0FBa0MsTUFBOUJ0RixFQUFVK0UsYUFBYTN4QixHQUFZLENBQzFDLElBQUlteUIsT0FBTyxFQUNQRixFQUFLak4sYUFBYSxPQUNsQm1OLEVBQVUsRUFBQWplLFVBQVVpUixjQUFjOE0sRUFBS2pOLGFBQWEsTUFBTSxFQUFNLEVBQUcsRUFBRzZDLElBRTFFb0ssRUFBS2hOLGFBQWEsSUFBS2tOLEdBQ3ZCVixFQUFVNTFCLEVBQUlzMkIsTUFDdUIsZ0JBQTlCdkYsRUFBVStFLGFBQWEzeEIsSUFDOUJpeUIsRUFBS3ZOLFVBQVksR0FDakIrTSxFQUFVVyxZQUFjLElBQ2EsU0FBOUJ4RixFQUFVK0UsYUFBYTN4QixJQUErQyxXQUE5QjRzQixFQUFVK0UsYUFBYTN4QixTQUNWLElBQWpEaXlCLEVBQUtqTixhQUFhNEgsRUFBVStFLGFBQWEzeEIsS0FDaERpeUIsRUFBS2hOLGFBQWEySCxFQUFVK0UsYUFBYTN4QixHQUFJLFdBRWpEeXhCLEVBQVU3RSxFQUFVK0UsYUFBYTN4QixJQUFNaXlCLEVBQUtqTixhQUFhNEgsRUFBVStFLGFBQWEzeEIsS0FFNUUsQ0FBQyxJQUFLLElBQUssS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQU0yTCxTQUFTaWhCLEVBQVUrRSxhQUFhM3hCLElBQzdDLE9BQTlCNHNCLEVBQVUrRSxhQUFhM3hCLElBQ3ZCaXlCLEVBQUtoTixhQUFhLEtBQU10USxXQUFXc2QsRUFBS2pOLGFBQWEsUUFDckR5TSxFQUFTLEdBQVM5YyxXQUFXc2QsRUFBS2pOLGFBQWEsUUFDVixPQUE5QjRILEVBQVUrRSxhQUFhM3hCLElBQzlCaXlCLEVBQUtoTixhQUFhLEtBQU10USxXQUFXc2QsRUFBS2pOLGFBQWEsUUFDckR5TSxFQUFTLEdBQVM5YyxXQUFXc2QsRUFBS2pOLGFBQWEsUUFFL0N5TSxFQUFVN0UsRUFBVStFLGFBQWEzeEIsSUFBTTJVLFdBQVdzZCxFQUFLak4sYUFBYTRILEVBQVUrRSxhQUFhM3hCLE1BRy9GaXlCLEVBQUtoTixhQUFhMkgsRUFBVStFLGFBQWEzeEIsR0FBSSxHQUM3Q3l4QixFQUFVN0UsRUFBVStFLGFBQWEzeEIsSUFBTSxHQUtuRGd5QixFQUFVLG9FQUFzRUMsRUFBS1AsVUFBWSxTQUNqRyxJQUNJVyxHQURTLElBQUlDLFdBQ0lDLGdCQUFnQlAsRUFBUyxpQkFBaUJRLFVBQVVuRSxTQUFTLEdBQ2xGekIsRUFBVTdSLE9BQU94ZixHQUFHeXlCLFdBQVd5RSxjQUFjLGlCQUFpQnBoQixZQUFZZ2hCLEdBQzFFMUksRUFBV3Z0QixJQUFJNDBCLEVBQVNwSSxJQUFJcnRCLEdBQUtrMkIsT0FFN0JNLEVBQWMzMUIsSUFBSTQwQixFQUFTcEksSUFDM0J2bkIsS0FBSyt2QixvQkFBb0I3MUIsR0FBRysxQixPQUFPMXNCLEtBQUtvc0IsRUFBU3BJLEtBRWpEdm5CLEtBQUsrdkIsb0JBQW9CNzFCLEdBQUc4MUIsTUFBTXpzQixLQUFLb3NCLEVBQVNwSSxJQUNoRG1KLEVBQWN4b0IsSUFBSXluQixFQUFTcEksSUFBSSxJQVEvQzdQLFFBQVErQixJQUFJLDZCQUE4QjhSLEVBQVV3RSxxQkFHcER4RSxFQUFVOEYsVUFBWSxJQUFJMWpCLElBQzFCLElBQUssSUFBSTRaLEVBQUksRUFBR0EsRUFBSW9JLEVBQVMvdUIsT0FBUTJtQixJQUFLLENBSXRDLElBSEEsSUFBSWdCLEVBQVlELEVBQVd2dEIsSUFBSTQwQixFQUFTcEksSUFDcEMrSixFQUFlLEdBRVZDLEVBQUssRUFBR0EsRUFBS2hKLEVBQVUzbkIsT0FBUTJ3QixJQUFNLENBRTFDLElBREEsSUFBSUMsRUFBWSxHQUNQN3lCLEVBQUksRUFBR0EsRUFBSTRzQixFQUFVK0UsYUFBYTF2QixPQUFRakMsSUFDM0MsQ0FBQyxRQUFTLFNBQVUsS0FBSzJMLFNBQVNpaEIsRUFBVStFLGFBQWEzeEIsSUFDekQ2eUIsRUFBVWpHLEVBQVUrRSxhQUFhM3hCLElBQU0sSUFBTTRwQixFQUFVZ0osR0FBSWhHLEVBQVUrRSxhQUFhM3hCLElBQU00cEIsRUFBVSxHQUFHZ0QsRUFBVStFLGFBQWEzeEIsSUFFNUg2eUIsRUFBVWpHLEVBQVUrRSxhQUFhM3hCLElBQU00cEIsRUFBVWdKLEdBQUloRyxFQUFVK0UsYUFBYTN4QixJQUdwRjJ5QixFQUFhL3RCLEtBQUtpdUIsR0FHdEJqRyxFQUFVOEYsVUFBVW5wQixJQUFJeW5CLEVBQVNwSSxHQUFJK0osR0FDdkIvRixFQUFVN1IsT0FBTyxHQUFHaVQsV0FBV3lFLGNBQWMsSUFBTXpCLEVBQVNwSSxJQUNsRTNELGFBQWEsa0JBQW1CekcsS0FBS0csVUFBVSxDQUFFLFVBQWFnVSxHQUFnQixLQUFNLE9BSWhHLE9BREE1WixRQUFRK0IsSUFBSSxZQUFhOFIsRUFBVTdSLE9BQU8sSUFDbkM2UixFQUFVN1IsT0FBTyxHQUFHaVQsYSxrQ0FLM0IsSUFDSXdELEVBRE1qZ0IsU0FBU3VoQixlQUFlLFlBQ2xCckMsaUJBQWlCLGdCQUM3QnNDLEVBQVMsSUFBSS9qQixJQWVqQixPQWRJd2lCLEVBQU12dkIsT0FBUyxHQUNmLEdBQUd1SixRQUFROVAsS0FBSzgxQixFQUFPLFNBQUM3MUIsR0FDcEIsSUFFSXEzQixFQUZBdGUsRUFBUy9ZLEVBQUVxcEIsYUFBYSxNQUdWLFNBQWRycEIsRUFBRTZiLFNBQ0Z3YixFQUFPcjNCLEVBQUVzM0IsV0FDSkMsT0FBUyxHQUVkRixFQUFPcjNCLEVBQUVzM0IsVUFFYkYsRUFBT3hwQixJQUFJbUwsRUFBUXNlLEtBR3BCRCxJLHdDQUdjdDJCLEVBQUdzZCxFQUFVNFUsUUFFTixJQUFqQmx5QixFQUFFMFUsTUFBTWhHLE1BQXdCMU8sRUFBRTBVLE1BQU1oRyxZQUNULElBQTNCMU8sRUFBRXVvQixhQUFhLFNBQTRCdm9CLEVBQUV1b0IsYUFBYSxTQUNqRXZvQixFQUFFd29CLGFBQWEsT0FBUXhvQixFQUFFMFUsTUFBTWhHLE1BRW5DMU8sRUFBRTBVLE1BQU1oRyxLQUFPLFdBRVcsSUFBbkIxTyxFQUFFMFUsTUFBTWdpQixRQUEwQjEyQixFQUFFMFUsTUFBTWdpQixjQUNULElBQTdCMTJCLEVBQUV1b0IsYUFBYSxXQUE4QnZvQixFQUFFdW9CLGFBQWEsV0FDbkV2b0IsRUFBRXdvQixhQUFhLFNBQVV4b0IsRUFBRTBVLE1BQU1naUIsUUFFckMxMkIsRUFBRTBVLE1BQU1naUIsT0FBUyxXQUVjLElBQXhCMTJCLEVBQUUwVSxNQUFNaWlCLGFBQStCMzJCLEVBQUUwVSxNQUFNaWlCLG1CQUNSLElBQW5DMzJCLEVBQUV1b0IsYUFBYSxpQkFBb0N2b0IsRUFBRXVvQixhQUFhLGlCQUN6RXZvQixFQUFFd29CLGFBQWEsZUFBZ0J4b0IsRUFBRTBVLE1BQU1paUIsYUFFM0MzMkIsRUFBRTBVLE1BQU1paUIsWUFBYyxNQUVPLFNBQTdCMzJCLEVBQUV1b0IsYUFBYSxXQUNmdm9CLEVBQUV3b0IsYUFBYSxlQUFnQixHQUduQyxJQUFJMkYsRUFBS251QixFQUFFdW9CLGFBQWEsYUFDcEJxTyxFQUFjNTJCLEVBQUU2MkIsV0FBV3RPLGFBQWEsU0FBU2xrQixNQUFNLEtBQzNELEdBQUlyRSxFQUFFazBCLFVBQVU0QyxTQUFTLFFBQVMsQ0FDOUIsSUFBTUMsRUFBd0IvMkIsRUFBRXVvQixhQUFhLGNBQ3pDeU8sRUFBcUJqVixLQUFLQyxNQUFNK1UsR0FDaENodEIsTUFBTStQLFFBQVFrZCxLQUNkQSxFQUFxQkEsRUFBbUIsSUFNNUMsSUFIQSxJQUNNQyxFQURTajNCLEVBQUV1b0IsYUFBYSxTQUNSbGtCLE1BQU0sS0FDeEI2eUIsRUFBWSxHQUNQcDRCLEVBQUksRUFBR3FSLEVBQU04bUIsRUFBT3p4QixPQUFRMUcsRUFBSXFSLEVBQUtyUixJQUMxQyxHQUFrQixTQUFkbTRCLEVBQU9uNEIsR0FBZSxDQUN0Qm80QixFQUFZRCxFQUFPbjRCLEVBQUksR0FDdkIsTUFHUms0QixFQUFrQixPQUFhRSxFQUMvQixJQUFJQyxHQUFnQixFQUNwQnB0QixNQUFNdUksS0FBS3RTLEVBQUVrMEIsV0FBV25sQixRQUFRLFNBQUM1UCxLQUM3QkEsRUFBSUEsRUFBRW9HLGVBQ0EySixTQUFTLFNBQVcvUCxFQUFFK1AsU0FBUyxXQUFhL1AsRUFBRStQLFNBQVMsWUFDekRpb0IsR0FBZ0IsS0FHeEIsSUFBTUMsRUFBUXAzQixFQUFFdW9CLGFBQWEsTUFDN0IsR0FBSTRPLEVBQ0F2eUIsS0FBS3l5QixpQkFBaUJ2cUIsSUFBSXNxQixFQUFPSixPQUM5QixDQUNIcHlCLEtBQUsweUIsY0FBY3hxQixJQUFJc3FCLEVBQU9KLEdBQzlCN0csRUFBVTdSLE9BQU9oQixHQUFVaWEsYUFBYUgsRUFBT0osR0FDL0MsSUFBSVEsRUFBWSxHQUNoQmg0QixPQUFPdUwsS0FBS2lzQixHQUFvQmpvQixRQUFRLFNBQUExTyxHQUNYLElBQXJCQSxFQUFJMk8sUUFBUSxPQUNad29CLEVBQVVuM0IsR0FBTzIyQixFQUFtQjMyQixNQUc1Q20zQixFQUFVQyxPQUFTLEdBQ25CLElBQUlDLEVBQWUzVixLQUFLRyxVQUFVc1YsUUFDZ0IsSUFBdkN0RixFQUFpQnZ5QixJQUFJKzNCLElBQzVCeEYsRUFBaUJwbEIsSUFBSTRxQixFQUFjLElBRXZDeEYsRUFBaUJ2eUIsSUFBSSszQixHQUFjdnZCLEtBQUtpdkIsSUFJaEQsR0FBSXAzQixFQUFFazBCLFVBQVU0QyxTQUFTLFNBQVc5MkIsRUFBRWswQixVQUFVNEMsU0FBUyxVQUFXLENBQ2hFeGEsUUFBUStCLElBQUksVUFBV3JlLEVBQUV1b0IsYUFBYSxlQUN0QyxJQUFNb1AsRUFBZTVWLEtBQUtDLE1BQU1oaUIsRUFBRXVvQixhQUFhLGVBSS9DLEdBSEl4ZSxNQUFNK1AsUUFBUTZkLEtBQ0YsNkRBQVpBLEVBQWVBLEVBQWEsSUFFNUIzM0IsRUFBRWswQixVQUFVNEMsU0FBUyxhQUN5QyxJQUFuRGx5QixLQUFLZ3pCLG1CQUFtQkQsRUFBYUUsWUFDNUNqekIsS0FBS2d6QixtQkFBbUJELEVBQWFFLFVBQVksSUFFckRqekIsS0FBS2d6QixtQkFBbUJELEVBQWFFLFVBQVUxdkIsS0FBSyxpQkFDZixJQUExQnd2QixFQUFhRyxTQUNwQjNILEVBQVU3UixPQUFPaEIsR0FBVXlhLFlBQVlKLEVBQWFHLFVBRXBEeGIsUUFBUUMsTUFBTSxtQ0FFZixHQUFJdmMsRUFBRWswQixVQUFVNEMsU0FBUyxVQUM1QixJQUFLLElBQUlrQixLQUFXTCxPQUM4QyxJQUFuRC95QixLQUFLZ3pCLG1CQUFtQkQsRUFBYUssTUFDNUNwekIsS0FBS2d6QixtQkFBbUJELEVBQWFLLElBQVksSUFFckRwekIsS0FBS2d6QixtQkFBbUJELEVBQWFLLElBQVU3dkIsS0FBSzZ2QixHQU1oRSxHQUFJN0osRUFBSSxDQUlKQSxHQUhBQSxFQUFLQSxFQUFHL29CLFFBQVEsNkJBQThCLFNBQUNsRyxHQUMzQyxNQUFhLE1BQU5BLEVBQVksR0FBSyxJQUFNQSxLQUUxQmtHLFFBQVEsZUFBZ0IsSUFBSWYsTUFBTSxLQUUxQyxJQURBLElBQUkrcEIsRUFBVyxHQUFJQyxFQUFXLEdBQ3JCdnZCLEVBQUksRUFBR0EsRUFBSXF2QixFQUFHM29CLE9BQVExRyxJQUN2QnF2QixFQUFHcnZCLEdBQUdrUSxRQUFRLGNBQWdCLEVBQzlCcWYsRUFBV0YsRUFBR3J2QixHQUNQcXZCLEVBQUdydkIsR0FBR2tRLFFBQVEsVUFBWSxJQUNqQ29mLEVBQVdELEVBQUdydkIsSUFHdEIsSUFBSXd2QixFQUFlRCxFQUFTanBCLFFBQVEsb0JBQXFCLElBQUlmLE1BQU0sS0FDbkVyRSxFQUFFd29CLGFBQWEsWUFBYTRGLEdBQ1YsTUFBZHB1QixFQUFFK2EsUUFDRi9hLEVBQUV3b0IsYUFBYSxRQUFVdFEsV0FBV29XLEVBQWEsSUFBTXBXLFdBQVcwZSxFQUFZLElBQU8sS0FBTzFlLFdBQVdvVyxFQUFhLElBQU1wVyxXQUFXMGUsRUFBWSxNQUVqSixFQUFBbmYsVUFBVXdnQixXQUFXajRCLEVBQUdrWSxXQUFXb1csRUFBYSxJQUFNcFcsV0FBVzBlLEVBQVksSUFBSzFlLFdBQVdvVyxFQUFhLElBQU1wVyxXQUFXMGUsRUFBWSxTQUd6SCxNQUFkNTJCLEVBQUUrYSxRQUNGL2EsRUFBRXdvQixhQUFhLFFBQVNvTyxFQUFZbHlCLEtBQUssTUFFekMsRUFBQStTLFVBQVV3Z0IsV0FBV2o0QixFQUFHa1ksV0FBVzBlLEVBQVksSUFBSzFlLFdBQVcwZSxFQUFZLEtBR25GLEdBQUk1MkIsRUFBRTR4QixTQUFTcHNCLE9BQVMsRUFDcEIsSUFBSyxJQUFJMUcsRUFBSSxFQUFHQSxFQUFJa0IsRUFBRTR4QixTQUFTcHNCLE9BQVExRyxJQUNuQ3F4QixFQUFVZ0Msa0JBQWtCbnlCLEVBQUU0eEIsU0FBUzl5QixHQUFJd2UsRUFBVTRVLEssMENBS3RDbHlCLEdBUXZCLEdBUGtCLE1BQWRBLEVBQUUrYSxTQUFpQyxRQUFkL2EsRUFBRSthLFVBQ25CL2EsRUFBRWswQixVQUFVNEMsU0FBUyxRQUNyQixFQUFBb0IsVUFBVUMsV0FBV3JyQixJQUFJOU0sRUFBRXVvQixhQUFhLE1BQU8sRUFBQTJQLFVBQVVFLFFBQVFDLFNBQVNyNEIsSUFFMUUsRUFBQWs0QixVQUFVRSxRQUFRQyxTQUFTcjRCLElBRy9CQSxFQUFFNHhCLFNBQVNwc0IsT0FBUyxFQUNwQixJQUFLLElBQUkxRyxFQUFJLEVBQUdBLEVBQUlrQixFQUFFNHhCLFNBQVNwc0IsT0FBUTFHLElBQ25DcXhCLEVBQVVtSSxvQkFBb0J0NEIsRUFBRTR4QixTQUFTOXlCLFEsS0FRekRxeEIsRUFBVWMsVUFBWSxNQUN0QmQsRUFBVW9JLGNBQWdCLFVBQzFCcEksRUFBVTdSLE9BQVMsR0FDbkI2UixFQUFVblksTUFBUSxDQUFDLEtBQU0sU0FBVSxRQUFTLE9BQzVDbVksRUFBVStFLGFBQWUsR0FFekIvRSxFQUFVNkIsU0FBVyxJQUFJLEVBQUosU0FDckI3QixFQUFVOEYsVUFBWSxJQUFJMWpCLElBQzFCNGQsRUFBVXdFLG9CQUFzQixHQUNoQ3hFLEVBQVVvQyxTQUNWcEMsRUFBVXlILG1CQUFxQixDQUFFSCxPQUFRLENBQUMsVUFDMUN0SCxFQUFVbUgsY0FBZ0IsSUFBSS9rQixJQUM5QjRkLEVBQVVtQyxtQkFBcUIsSUFBSS9mLElBQ25DNGQsRUFBVWtILGlCQUFtQixJQUFJOWtCLEksTUFFbEI0ZCxFLGdCQUVUMEIsRSxXQUNGLFdBQVlOLEdBQVksVUFDcEIzc0IsS0FBSzJzQixXQUFhQSxFQUNsQjNzQixLQUFLNFosT0FBUyxHQUNkNVosS0FBSzZaLGVBQWlCLElBQUlsTSxJQUMxQjNOLEtBQUsyWixVQUFZLElBQUloTSxJLCtDQUlaMEYsRUFBUXNHLEdBQ2pCM1osS0FBSzJaLFVBQVV6UixJQUFJbUwsRUFBUXNHLEssa0NBR25CdVosR0FDUmx6QixLQUFLNHpCLFVBQVVWLEVBQVNXLE9BQ3hCN3pCLEtBQUs4ekIsaUJBQWlCWixFQUFTYSxjQUFlYixFQUFTNXlCLGEsZ0NBR2pEdXpCLFFBQ2UsSUFBVkEsRUFDUDd6QixLQUFLNFosT0FBT3JXLEtBQUtzd0IsR0FFakJuYyxRQUFRQyxNQUFNLHFCLHVDQUlMbGMsRUFBS04sUUFDQyxJQUFSTSxRQUF3QyxJQUFWTixFQUNyQzZFLEtBQUs2WixlQUFlM1IsSUFBSXpNLEVBQUtOLEdBRTdCdWMsUUFBUUMsTUFBTSw0QkFBNkJsYyxFQUFLTixPLHVEQ3JsQjVEUCxPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQzNDeUIsT0FBTyxJQUVUUCxPQUFPQyxlQUFlbkIsRUFBUyxlQUFnQixDQUM3Q29CLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU9pNUIsRUFBT0MsZ0JBR2xCcjVCLE9BQU9DLGVBQWVuQixFQUFTLGdCQUFpQixDQUM5Q29CLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU9tNUIsRUFBUUMsaUJBR25CdjVCLE9BQU9DLGVBQWVuQixFQUFTLFlBQWEsQ0FDMUNvQixZQUFZLEVBQ1pDLElBQUssV0FDSCxPQUFPcTVCLEVBQU1DLGFBR2pCMzZCLEVBQVE0NkIsU0FBVzU2QixFQUFpQixhQUFJLEVBRXhDLElBUWdDc2IsRUFSNUJnZixFQUFTLEVBQVEsS0FFakJPLEdBTTRCdmYsRUFOQSxFQUFRLE1BTWFBLEVBQUkxWixXQUFhMFosRUFBTSxDQUFFLFFBQVdBLEdBSnJGa2YsRUFBVSxFQUFRLEtBRWxCRSxFQUFRLEVBQVEsSUFNcEIsU0FBU0ksRUFBa0JqM0IsRUFBUWszQixHQUFTLElBQUssSUFBSXY2QixFQUFJLEVBQUdBLEVBQUl1NkIsRUFBTTd6QixPQUFRMUcsSUFBSyxDQUFFLElBQUl3NkIsRUFBYUQsRUFBTXY2QixHQUFJdzZCLEVBQVc1NUIsV0FBYTQ1QixFQUFXNTVCLGFBQWMsRUFBTzQ1QixFQUFXN29CLGNBQWUsRUFBVSxVQUFXNm9CLElBQVlBLEVBQVc1b0IsVUFBVyxHQUFNbFIsT0FBT0MsZUFBZTBDLEVBQVFtM0IsRUFBV2o1QixJQUFLaTVCLElBTTdTLElBcVFJSixFQXJRQUssRUFFSixXQU1FLFNBQVNBLElBQ1AsSUFBSUMsRUFBTTl5QixVQUFVbEIsT0FBUyxRQUFzQm5ELElBQWpCcUUsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQzFFK3ZCLEVBQVEvdkIsVUFBVWxCLE9BQVMsUUFBc0JuRCxJQUFqQnFFLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUM1RSt5QixFQUFTL3lCLFVBQVVsQixPQUFTLFFBQXNCbkQsSUFBakJxRSxVQUFVLEdBQW1CQSxVQUFVLEdBQUssS0FuQnJGLFNBQXlCZ3pCLEVBQVVsa0IsR0FBZSxLQUFNa2tCLGFBQW9CbGtCLEdBQWdCLE1BQU0sSUFBSTVTLFVBQVUscUNBcUI1RysyQixDQUFnQi8wQixLQUFNMjBCLEdBZjFCLFNBQXlCM2YsRUFBS3ZaLEVBQUtOLEdBQWFNLEtBQU91WixFQUFPcGEsT0FBT0MsZUFBZW1hLEVBQUt2WixFQUFLLENBQUVOLE1BQU9BLEVBQU9MLFlBQVksRUFBTStRLGNBQWMsRUFBTUMsVUFBVSxJQUFrQmtKLEVBQUl2WixHQUFPTixFQWlCdkw2NUIsQ0FBZ0JoMUIsS0FBTSxZQUFRLEdBRTlCQSxLQUFLeEcsS0FBTyxDQUNWeTdCLEdBQUlMLEVBQ0pobUIsRUFBR2lqQixFQUNIN0wsRUFBRzZPLEVBQ0hLLElBQUssRUFDTEMsT0FBUSxHQUNSQyxPQUFRLEdBQ1JDLE1BQU8sQ0FDTDVzQixLQUFNLElBRVI2c0IsR0FBSSxFQUNKQyxHQUFJLEdBaENWLElBQXNCM2tCLEVBQWE0a0IsRUFBWUMsRUFxUTdDLE9BclFvQjdrQixFQXdDUCtqQixHQXhDb0JhLEVBd0NYLENBQUMsQ0FDckIvNUIsSUFBSyxlQUNMTixNQUFPLFNBQXNCeTVCLEdBQzNCNTBCLEtBQUt4RyxLQUFLeTdCLEdBQUtMLElBT2hCLENBQ0RuNUIsSUFBSyxjQUNMTixNQUFPLFNBQXFCMDJCLEVBQU9nRCxHQUNqQzcwQixLQUFLeEcsS0FBS29WLEVBQUlpakIsRUFDZDd4QixLQUFLeEcsS0FBS3dzQixFQUFJNk8sSUFPZixDQUNEcDVCLElBQUssV0FDTE4sTUFBTyxTQUFrQnU2QixHQUN2QixJQUFJQyxFQVdKLE9BUkVBLEVBREVELGFBQTZCRSxtQkFDdkI1QixFQUFPQyxhQUFhNEIsVUFBVUgsRUFBbUIxMUIsS0FBS3hHLEtBQUs0N0IsT0FBUXAxQixLQUFLeEcsS0FBSzY3QixPQUMvQyxpQkFBdEJLLEVBQ1IxQixFQUFPQyxhQUFhNkIsSUFBSUosR0FFeEJBLEVBR1YxMUIsS0FBS3hHLEtBQUsyN0IsT0FBT2xQLE9BQU8sRUFBRyxFQUFHMFAsRUFBTW44QixNQUM3Qm04QixJQVFSLENBQ0RsNkIsSUFBSyxVQUNMTixNQUFPLFNBQWlCNDZCLEVBQVdDLEdBQ2pDLElBQ0lDLEVBQ0FDLEVBZUFDLEVBakJBQyxFQUFXdDBCLFVBQVVsQixPQUFTLFFBQXNCbkQsSUFBakJxRSxVQUFVLEdBQW1CQSxVQUFVLEdBQUt3eUIsRUFBUytCLE1BYTVGLEdBVElMLGFBQTJCaEMsRUFBT3NDLGNBQ3BDTCxFQUFXRCxFQUNYRSxFQUFhbDJCLEtBQUt4RyxLQUFLMjdCLE9BQU8vcUIsUUFBUTZyQixFQUFTejhCLE1BQy9DeThCLEVBQVN6OEIsS0FBSys4QixHQUFLSCxJQUVuQkYsRUFBYUYsRUFDYmgyQixLQUFLeEcsS0FBSzI3QixPQUFPZSxHQUFZSyxHQUFLSCxHQUdoQ0YsRUFBYSxFQUNmLE1BQU0sSUFBSTNRLE1BQU0sZ0RBWWxCLE9BTkU0USxFQURFSixhQUFxQkgsbUJBQ1g1QixFQUFPQyxhQUFhNEIsVUFBVUUsRUFBVy8xQixLQUFLeEcsS0FBSzQ3QixPQUFRcDFCLEtBQUt4RyxLQUFLNjdCLE9BRXJFVSxFQUdkLzFCLEtBQUt4RyxLQUFLMjdCLE9BQU9sUCxPQUFPaVEsRUFBWSxFQUFHQyxFQUFVMzhCLE1BQzFDMjhCLElBTVIsQ0FDRDE2QixJQUFLLFlBQ0xOLE1BQU8sU0FBbUJxN0IsR0FDeEIsSUFBSUMsRUFBUXoyQixLQUVadzJCLEVBQVVyc0IsUUFBUSxTQUFVd3JCLEVBQU9lLEdBQ2pDLEdBQXFCLEdBQWpCZixFQUFNbjhCLEtBQUsrOEIsR0FBUyxDQUN0QixJQUFJTCxFQUFhTyxFQUFNajlCLEtBQUsyN0IsT0FBTy9xQixRQUFRdXJCLEVBQU1uOEIsTUFFakQsR0FBSTA4QixFQUFhLEVBQUcsQ0FDbEIsSUFBSVMsRUFBT0YsRUFBTWo5QixLQUFLMjdCLE9BQU9lLEVBQWEsR0FFeEIsR0FBZFEsR0FBbUJGLEVBQVVFLEVBQWEsR0FBR2w5QixNQUFRbTlCLEdBQ3ZESCxFQUFVdlEsT0FBT3lRLEVBQVksRUFBRyxJQUFJMUMsRUFBT3NDLGFBQWFLLFNBS2hFSCxFQUFZQSxFQUFVaHNCLElBQUksU0FBVW1yQixFQUFPZSxHQUN6QyxNQUFPLENBQ0xmLE1BQU9BLEVBQ1BlLFdBQVlBLEtBRWI1dkIsS0FBSyxTQUFVbkksRUFBR2lELEdBS25CLE9BSmE2MEIsRUFBTWo5QixLQUFLMjdCLE9BQU8vcUIsUUFBUXpMLEVBQUVnM0IsTUFBTW44QixNQUVsQ2k5QixFQUFNajlCLEtBQUsyN0IsT0FBTy9xQixRQUFReEksRUFBRSt6QixNQUFNbjhCLE9BRXJCbUYsRUFBRSszQixXQUFhOTBCLEVBQUU4MEIsYUFDMUNsc0IsSUFBSSxTQUFVb3NCLEdBQ2YsT0FBT0EsRUFBYWpCLFNBRVp4ckIsUUFBUSxTQUFVd3JCLEdBQzFCLElBQUlPLEVBQWFPLEVBQU1qOUIsS0FBSzI3QixPQUFPL3FCLFFBQVF1ckIsRUFBTW44QixNQUU3QzA4QixFQUFhLEdBQ2ZPLEVBQU1qOUIsS0FBSzI3QixPQUFPbFAsT0FBT2lRLEVBQVksR0FHdkNQLEVBQU1uOEIsS0FBSys3QixHQUFLLE1BRWxCLElBQUlzQixHQUFRLEVBQUl0QyxFQUFZLFdBTzVCLE9BTkF2MEIsS0FBS3hHLEtBQUs0N0IsT0FBTzd4QixLQUFLLENBQ3BCZ0wsR0FBSXNvQixFQUNKMUIsT0FBUXFCLEVBQVVoc0IsSUFBSSxTQUFVeXJCLEdBQzlCLE9BQU9BLEVBQVN6OEIsU0FHYnE5QixJQU1SLENBQ0RwN0IsSUFBSyxjQUNMTixNQUFPLFNBQXFCNjZCLEdBQzFCLElBQUlDLEVBQ0FDLEVBRUFGLGFBQTJCaEMsRUFBT3NDLGNBQ3BDTCxFQUFXRCxFQUNYRSxFQUFhbDJCLEtBQUt4RyxLQUFLMjdCLE9BQU8vcUIsUUFBUTZyQixFQUFTejhCLE9BRS9DMDhCLEVBQWFGLEVBR2ZoMkIsS0FBS3hHLEtBQUsyN0IsT0FBT2xQLE9BQU9pUSxFQUFZLEtBTXJDLENBQ0R6NkIsSUFBSyxhQUNMTixNQUFPLFNBQW9CNjZCLEdBQ3pCLElBQUlDLEVBQ0FDLEVBVUosR0FSSUYsYUFBMkJoQyxFQUFPc0MsY0FDcENMLEVBQVdELEVBQ1hFLEVBQWFsMkIsS0FBS3hHLEtBQUsyN0IsT0FBTy9xQixRQUFRNnJCLEVBQVN6OEIsUUFFL0MwOEIsRUFBYUYsRUFDYkMsRUFBVyxJQUFJakMsRUFBT3NDLGFBQWF0MkIsS0FBS3hHLEtBQUsyN0IsT0FBT2UsS0FHbERELEVBQVN6OEIsS0FBSys4QixHQUNoQk4sRUFBU3o4QixLQUFLKzhCLEdBQUssRUFDbkJ2MkIsS0FBS3hHLEtBQUsyN0IsT0FBT2xQLE9BQU9pUSxFQUFhLEVBQUcsT0FDbkMsS0FBSWwyQixLQUFLeEcsS0FBSzI3QixPQUFPZSxFQUFhLEdBQUdLLEdBSTFDLE1BQU0sSUFBSWhSLE1BQU0sb0RBSGhCdmxCLEtBQUt4RyxLQUFLMjdCLE9BQU9lLEVBQWEsR0FBR0ssR0FBSyxFQUN0Q3YyQixLQUFLeEcsS0FBSzI3QixPQUFPbFAsT0FBT2lRLEVBQVksTUFTdkMsQ0FDRHo2QixJQUFLLGNBQ0xOLE1BQU8sV0FDTDZFLEtBQUt4RyxLQUFLMjdCLE9BQVMsS0FNcEIsQ0FDRDE1QixJQUFLLFVBQ0xOLE1BQU8sV0FDTCxJQUFJMjdCLEVBQVU5MkIsS0FBS3hHLEtBQUsyN0IsT0FBTzF1QixPQUFPLFNBQVV6SyxFQUFHNFEsR0FDakQsT0FBTzVRLEVBQUk0USxFQUFFMm9CLEdBQUszb0IsRUFBRTJvQixHQUFLdjVCLEdBQ3hCLEdBQ0hnRSxLQUFLeEcsS0FBSys3QixHQUFLdUIsRUFDZjkyQixLQUFLeEcsS0FBSzI3QixPQUFPaHJCLFFBQVEsU0FBVXdyQixHQUNqQyxPQUFPQSxFQUFNSixHQUFLdUIsTUFPckIsQ0FDRHI3QixJQUFLLFdBQ0xOLE1BQU8sV0FFTCxPQURBNkUsS0FBSzZsQixVQUNFMUksS0FBS0MsTUFBTXBkLEtBQUsrMkIsWUFNeEIsQ0FDRHQ3QixJQUFLLFNBQ0xOLE1BQU8sV0FFTCxPQURBNkUsS0FBSzZsQixVQUNFMUksS0FBS0csVUFBVXRkLEtBQUt4RyxXQWpRNkNnN0IsRUFBa0I1akIsRUFBWTlVLFVBQVcwNUIsR0FBaUJDLEdBQWFqQixFQUFrQjVqQixFQUFhNmtCLEdBcVEzS2QsRUEvUFQsR0FrUUFqN0IsRUFBaUIsUUFBSWk3QixFQUVyQmo3QixFQUFRNDZCLFNBQVdBLEVBRW5CLFNBQVdBLEdBQ1RBLEVBQVNBLEVBQWdCLE1BQUksR0FBSyxRQUNsQ0EsRUFBU0EsRUFBc0IsWUFBSSxHQUFLLGNBQ3hDQSxFQUFTQSxFQUFlLEtBQUksR0FBSyxPQUNqQ0EsRUFBU0EsRUFBcUIsV0FBSSxHQUFLLGFBSnpDLENBS0dBLElBQWE1NkIsRUFBUTQ2QixTQUFXQSxFQUFXLE0sNkJDdFQ5QyxJLHNFQUVPLElBQUloQixFQUFZLENBQ25CRSxRQUFTLE0sRUFIYixRLDRCQUdhLFNBQ1RELFdBQVksSUFBSTVsQixLLCtCQ0pwQixJQUFJNU0sRUFBWSxFQUFRLElBQ3BCeUIsRUFBVyxFQUFRLEdBQ25CdUIsRUFBa0IsRUFBUSxJQUM5QnBLLEVBQU9ELFFBQVUsU0FBVXM5QixHQUN6QixPQUFPLFNBQVU5ekIsRUFBTyt6QixFQUFJQyxHQUMxQixJQUdJLzdCLEVBSEE4RCxFQUFJOEIsRUFBVW1DLEdBQ2R0QyxFQUFTNEIsRUFBU3ZELEVBQUUyQixRQUNwQnlDLEVBQVFVLEVBQWdCbXpCLEVBQVd0MkIsR0FJdkMsR0FBSW8yQixHQUFlQyxHQUFNQSxHQUFJLEtBQU9yMkIsRUFBU3lDLEdBRzNDLElBRkFsSSxFQUFROEQsRUFBRW9FLE9BRUdsSSxFQUFPLE9BQU8sT0FFdEIsS0FBTXlGLEVBQVN5QyxFQUFPQSxJQUFTLElBQUkyekIsR0FBZTN6QixLQUFTcEUsSUFDNURBLEVBQUVvRSxLQUFXNHpCLEVBQUksT0FBT0QsR0FBZTN6QixHQUFTLEVBQ3BELE9BQVEyekIsSUFBZ0IsSyxjQ3BCOUJ0OUIsRUFBUXNGLEVBQUlwRSxPQUFPdThCLHVCLGdCQ0NuQixJQUFJL2xCLEVBQU0sRUFBUSxJQUNsQnpYLEVBQU9ELFFBQVV5TCxNQUFNK1AsU0FBVyxTQUFpQjdTLEdBQ2pELE1BQW1CLFNBQVorTyxFQUFJL08sSyxnQkNIYixJQUFJNUQsRUFBWSxFQUFRLElBQ3BCVSxFQUFVLEVBQVEsSUFHdEJ4RixFQUFPRCxRQUFVLFNBQVUwOUIsR0FDekIsT0FBTyxTQUFVejFCLEVBQU0wMUIsR0FDckIsSUFHSTE0QixFQUFHaUQsRUFISDNGLEVBQUk4RCxPQUFPWixFQUFRd0MsSUFDbkJ6SCxFQUFJdUUsRUFBVTQ0QixHQUNkbDlCLEVBQUk4QixFQUFFMkUsT0FFVixPQUFJMUcsRUFBSSxHQUFLQSxHQUFLQyxFQUFVaTlCLEVBQVksUUFBSzM1QixHQUM3Q2tCLEVBQUkxQyxFQUFFcTdCLFdBQVdwOUIsSUFDTixPQUFVeUUsRUFBSSxPQUFVekUsRUFBSSxJQUFNQyxJQUFNeUgsRUFBSTNGLEVBQUVxN0IsV0FBV3A5QixFQUFJLElBQU0sT0FBVTBILEVBQUksTUFDeEZ3MUIsRUFBWW43QixFQUFFMlksT0FBTzFhLEdBQUt5RSxFQUMxQnk0QixFQUFZbjdCLEVBQUUrRixNQUFNOUgsRUFBR0EsRUFBSSxHQUEyQjBILEVBQUksT0FBekJqRCxFQUFJLE9BQVUsSUFBcUIsUyxnQkNiNUUsSUFBSWIsRUFBVyxFQUFRLEdBQ25Cc1QsRUFBTSxFQUFRLElBQ2RtbUIsRUFBUSxFQUFRLEVBQVIsQ0FBa0IsU0FDOUI1OUIsRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsSUFBSXk1QixFQUNKLE9BQU8xNUIsRUFBU0MsVUFBbUNOLEtBQTFCKzVCLEVBQVd6NUIsRUFBR3c1QixNQUEwQkMsRUFBc0IsVUFBWHBtQixFQUFJclQsTSxnQkNObEYsSUFBSW9KLEVBQVcsRUFBUSxFQUFSLENBQWtCLFlBQzdCc3dCLEdBQWUsRUFFbkIsSUFDRSxJQUFJQyxFQUFRLENBQUMsR0FBR3Z3QixLQUNoQnV3QixFQUFjLE9BQUksV0FBY0QsR0FBZSxHQUUvQ3R5QixNQUFNdUksS0FBS2dxQixFQUFPLFdBQWMsTUFBTSxJQUN0QyxNQUFPcjVCLElBRVQxRSxFQUFPRCxRQUFVLFNBQVUwRSxFQUFNdTVCLEdBQy9CLElBQUtBLElBQWdCRixFQUFjLE9BQU8sRUFDMUMsSUFBSTczQixHQUFPLEVBQ1gsSUFDRSxJQUFJZzRCLEVBQU0sQ0FBQyxHQUNQeHFCLEVBQU93cUIsRUFBSXp3QixLQUNmaUcsRUFBSy9ELEtBQU8sV0FBYyxNQUFPLENBQUVDLEtBQU0xSixHQUFPLElBQ2hEZzRCLEVBQUl6d0IsR0FBWSxXQUFjLE9BQU9pRyxHQUNyQ2hQLEVBQUt3NUIsR0FDTCxNQUFPdjVCLElBQ1QsT0FBT3VCLEksNkJDbEJULElBQUlvRSxFQUFVLEVBQVEsSUFDbEI2ekIsRUFBY2ptQixPQUFPOVYsVUFBVXNDLEtBSW5DekUsRUFBT0QsUUFBVSxTQUFVbUUsRUFBR1gsR0FDNUIsSUFBSWtCLEVBQU9QLEVBQUVPLEtBQ2IsR0FBb0IsbUJBQVRBLEVBQXFCLENBQzlCLElBQUlrRixFQUFTbEYsRUFBSy9ELEtBQUt3RCxFQUFHWCxHQUMxQixHQUFzQixpQkFBWG9HLEVBQ1QsTUFBTSxJQUFJdEYsVUFBVSxzRUFFdEIsT0FBT3NGLEVBRVQsR0FBbUIsV0FBZlUsRUFBUW5HLEdBQ1YsTUFBTSxJQUFJRyxVQUFVLCtDQUV0QixPQUFPNjVCLEVBQVl4OUIsS0FBS3dELEVBQUdYLEssNkJDbEI3QixFQUFRLEtBQ1IsSUFBSWIsRUFBVyxFQUFRLElBQ25CRCxFQUFPLEVBQVEsSUFDZjZELEVBQVEsRUFBUSxHQUNoQmQsRUFBVSxFQUFRLElBQ2xCaUYsRUFBTSxFQUFRLEdBQ2QwekIsRUFBYSxFQUFRLElBRXJCbm5CLEVBQVV2TSxFQUFJLFdBRWQyekIsR0FBaUM5M0IsRUFBTSxXQUl6QyxJQUFJKzNCLEVBQUssSUFNVCxPQUxBQSxFQUFHNTVCLEtBQU8sV0FDUixJQUFJa0YsRUFBUyxHQUViLE9BREFBLEVBQU8yMEIsT0FBUyxDQUFFdDVCLEVBQUcsS0FDZDJFLEdBRXlCLE1BQTNCLEdBQUc5QyxRQUFRdzNCLEVBQUksVUFHcEJFLEVBQW9DLFdBRXRDLElBQUlGLEVBQUssT0FDTEcsRUFBZUgsRUFBRzU1QixLQUN0QjQ1QixFQUFHNTVCLEtBQU8sV0FBYyxPQUFPKzVCLEVBQWF0MkIsTUFBTTdCLEtBQU04QixZQUN4RCxJQUFJd0IsRUFBUyxLQUFLN0QsTUFBTXU0QixHQUN4QixPQUF5QixJQUFsQjEwQixFQUFPMUMsUUFBOEIsTUFBZDBDLEVBQU8sSUFBNEIsTUFBZEEsRUFBTyxHQU5wQixHQVN4QzNKLEVBQU9ELFFBQVUsU0FBVTZJLEVBQUszQixFQUFReEMsR0FDdEMsSUFBSWc2QixFQUFTaDBCLEVBQUk3QixHQUViODFCLEdBQXVCcDRCLEVBQU0sV0FFL0IsSUFBSWhCLEVBQUksR0FFUixPQURBQSxFQUFFbTVCLEdBQVUsV0FBYyxPQUFPLEdBQ1osR0FBZCxHQUFHNzFCLEdBQUt0RCxLQUdicTVCLEVBQW9CRCxHQUF1QnA0QixFQUFNLFdBRW5ELElBQUlzNEIsR0FBYSxFQUNiUCxFQUFLLElBU1QsT0FSQUEsRUFBRzU1QixLQUFPLFdBQWlDLE9BQW5CbTZCLEdBQWEsRUFBYSxNQUN0QyxVQUFSaDJCLElBR0Z5MUIsRUFBRzEyQixZQUFjLEdBQ2pCMDJCLEVBQUcxMkIsWUFBWXFQLEdBQVcsV0FBYyxPQUFPcW5CLElBRWpEQSxFQUFHSSxHQUFRLEtBQ0hHLFNBQ0w5NkIsRUFFTCxJQUNHNDZCLElBQ0FDLEdBQ1EsWUFBUi8xQixJQUFzQncxQixHQUNkLFVBQVJ4MUIsSUFBb0IyMUIsRUFDckIsQ0FDQSxJQUFJTSxFQUFxQixJQUFJSixHQUN6QkssRUFBTXI2QixFQUNSZSxFQUNBaTVCLEVBQ0EsR0FBRzcxQixHQUNILFNBQXlCbTJCLEVBQWNDLEVBQVEzVyxFQUFLNFcsRUFBTUMsR0FDeEQsT0FBSUYsRUFBT3Y2QixPQUFTMDVCLEVBQ2RPLElBQXdCUSxFQUluQixDQUFFdnZCLE1BQU0sRUFBTW5PLE1BQU9xOUIsRUFBbUJuK0IsS0FBS3MrQixFQUFRM1csRUFBSzRXLElBRTVELENBQUV0dkIsTUFBTSxFQUFNbk8sTUFBT3U5QixFQUFhcitCLEtBQUsybkIsRUFBSzJXLEVBQVFDLElBRXRELENBQUV0dkIsTUFBTSxLQUdmd3ZCLEVBQVFMLEVBQUksR0FDWk0sRUFBT04sRUFBSSxHQUVmcDhCLEVBQVMwRCxPQUFPakUsVUFBV3lHLEVBQUt1MkIsR0FDaEMxOEIsRUFBS3dWLE9BQU85VixVQUFXczhCLEVBQWtCLEdBQVZ4M0IsRUFHM0IsU0FBVVIsRUFBUWlDLEdBQU8sT0FBTzAyQixFQUFLMStCLEtBQUsrRixFQUFRSixLQUFNcUMsSUFHeEQsU0FBVWpDLEdBQVUsT0FBTzI0QixFQUFLMStCLEtBQUsrRixFQUFRSixXLGdCQzVGckQsSUFDSWc1QixFQURTLEVBQVEsR0FDRUEsVUFFdkJyL0IsRUFBT0QsUUFBVXMvQixHQUFhQSxFQUFVQyxXQUFhLEksNkJDRnJELElBQUkvOEIsRUFBUyxFQUFRLEdBQ2pCSyxFQUFVLEVBQVEsR0FDbEJGLEVBQVcsRUFBUSxJQUNuQndILEVBQWMsRUFBUSxJQUN0QmdMLEVBQU8sRUFBUSxJQUNmcXFCLEVBQVEsRUFBUSxJQUNoQnYxQixFQUFhLEVBQVEsSUFDckI3RixFQUFXLEVBQVEsR0FDbkJtQyxFQUFRLEVBQVEsR0FDaEJ5RSxFQUFjLEVBQVEsSUFDdEJ5MEIsRUFBaUIsRUFBUSxJQUN6QkMsRUFBb0IsRUFBUSxJQUVoQ3ovQixFQUFPRCxRQUFVLFNBQVUrRyxFQUFNdUwsRUFBU3F0QixFQUFTQyxFQUFRMTJCLEVBQVEyMkIsR0FDakUsSUFBSWx0QixFQUFPblEsRUFBT3VFLEdBQ2Q4SCxFQUFJOEQsRUFDSm10QixFQUFRNTJCLEVBQVMsTUFBUSxNQUN6QjhHLEVBQVFuQixHQUFLQSxFQUFFek0sVUFDZm1ELEVBQUksR0FDSnc2QixFQUFZLFNBQVVsM0IsR0FDeEIsSUFBSWIsRUFBS2dJLEVBQU1uSCxHQUNmbEcsRUFBU3FOLEVBQU9uSCxFQUNQLFVBQVBBLEVBQWtCLFNBQVU1RCxHQUMxQixRQUFPNDZCLElBQVl6N0IsRUFBU2EsS0FBYStDLEVBQUdySCxLQUFLMkYsS0FBWSxJQUFOckIsRUFBVSxFQUFJQSxJQUM1RCxPQUFQNEQsRUFBZSxTQUFhNUQsR0FDOUIsUUFBTzQ2QixJQUFZejdCLEVBQVNhLEtBQWErQyxFQUFHckgsS0FBSzJGLEtBQVksSUFBTnJCLEVBQVUsRUFBSUEsSUFDNUQsT0FBUDRELEVBQWUsU0FBYTVELEdBQzlCLE9BQU80NkIsSUFBWXo3QixFQUFTYSxRQUFLbEIsRUFBWWlFLEVBQUdySCxLQUFLMkYsS0FBWSxJQUFOckIsRUFBVSxFQUFJQSxJQUNoRSxPQUFQNEQsRUFBZSxTQUFhNUQsR0FBcUMsT0FBaEMrQyxFQUFHckgsS0FBSzJGLEtBQVksSUFBTnJCLEVBQVUsRUFBSUEsR0FBV3FCLE1BQ3hFLFNBQWFyQixFQUFHaUQsR0FBd0MsT0FBbkNGLEVBQUdySCxLQUFLMkYsS0FBWSxJQUFOckIsRUFBVSxFQUFJQSxFQUFHaUQsR0FBVzVCLFFBR3ZFLEdBQWdCLG1CQUFMdUksSUFBcUJneEIsR0FBVzd2QixFQUFNUyxVQUFZbEssRUFBTSxZQUNqRSxJQUFJc0ksR0FBSWxDLFVBQVVnRCxVQU1iLENBQ0wsSUFBSXlyQixFQUFXLElBQUl2c0IsRUFFZm14QixFQUFpQjVFLEVBQVMwRSxHQUFPRCxFQUFVLElBQU0sRUFBRyxJQUFNekUsRUFFMUQ2RSxFQUF1QjE1QixFQUFNLFdBQWM2MEIsRUFBU3oxQixJQUFJLEtBRXhEdTZCLEVBQW1CbDFCLEVBQVksU0FBVTBJLEdBQVEsSUFBSTdFLEVBQUU2RSxLQUV2RHlzQixHQUFjTixHQUFXdDVCLEVBQU0sV0FJakMsSUFGQSxJQUFJNjVCLEVBQVksSUFBSXZ4QixFQUNoQmxGLEVBQVEsRUFDTEEsS0FBU3kyQixFQUFVTixHQUFPbjJCLEVBQU9BLEdBQ3hDLE9BQVF5MkIsRUFBVXo2QixLQUFLLEtBRXBCdTZCLEtBQ0hyeEIsRUFBSXlELEVBQVEsU0FBVXpPLEVBQVF5VCxHQUM1QnJOLEVBQVdwRyxFQUFRZ0wsRUFBRzlILEdBQ3RCLElBQUlrQixFQUFPeTNCLEVBQWtCLElBQUkvc0IsRUFBUTlPLEVBQVFnTCxHQUVqRCxPQURnQjlLLE1BQVp1VCxHQUF1QmtvQixFQUFNbG9CLEVBQVVwTyxFQUFRakIsRUFBSzYzQixHQUFRNzNCLEdBQ3pEQSxLQUVQN0YsVUFBWTROLEVBQ2RBLEVBQU1wSSxZQUFjaUgsSUFFbEJveEIsR0FBd0JFLEtBQzFCSixFQUFVLFVBQ1ZBLEVBQVUsT0FDVjcyQixHQUFVNjJCLEVBQVUsU0FFbEJJLEdBQWNILElBQWdCRCxFQUFVRCxHQUV4Q0QsR0FBVzd2QixFQUFNcXdCLGNBQWNyd0IsRUFBTXF3QixXQXBDekN4eEIsRUFBSSt3QixFQUFPVSxlQUFlaHVCLEVBQVN2TCxFQUFNbUMsRUFBUTQyQixHQUNqRDMxQixFQUFZMEUsRUFBRXpNLFVBQVd1OUIsR0FDekJ4cUIsRUFBS0MsTUFBTyxFQTRDZCxPQVBBcXFCLEVBQWU1d0IsRUFBRzlILEdBRWxCeEIsRUFBRXdCLEdBQVE4SCxFQUNWaE0sRUFBUUEsRUFBUVMsRUFBSVQsRUFBUXFCLEVBQUlyQixFQUFRTyxHQUFLeUwsR0FBSzhELEdBQU9wTixHQUVwRHM2QixHQUFTRCxFQUFPVyxVQUFVMXhCLEVBQUc5SCxFQUFNbUMsR0FFakMyRixJLGdCQ3BFVCxJQWZBLElBU0kyeEIsRUFUQWgrQixFQUFTLEVBQVEsR0FDakJFLEVBQU8sRUFBUSxJQUNmbUMsRUFBTSxFQUFRLElBQ2RtSixFQUFRbkosRUFBSSxlQUNab0osRUFBT3BKLEVBQUksUUFDWGlPLEtBQVN0USxFQUFPbUosY0FBZW5KLEVBQU9xSixVQUN0Q2lDLEVBQVNnRixFQUNUdFMsRUFBSSxFQUlKaWdDLEVBQXlCLGlIQUUzQjE2QixNQUFNLEtBRUR2RixFQVBDLElBUUZnZ0MsRUFBUWgrQixFQUFPaStCLEVBQXVCamdDLFFBQ3hDa0MsRUFBSzg5QixFQUFNcCtCLFVBQVc0TCxHQUFPLEdBQzdCdEwsRUFBSzg5QixFQUFNcCtCLFVBQVc2TCxHQUFNLElBQ3ZCSCxHQUFTLEVBR2xCN04sRUFBT0QsUUFBVSxDQUNmOFMsSUFBS0EsRUFDTGhGLE9BQVFBLEVBQ1JFLE1BQU9BLEVBQ1BDLEtBQU1BLEksNkJDeEJSaE8sRUFBT0QsUUFBVSxFQUFRLE1BQWtCLEVBQVEsRUFBUixDQUFvQixXQUM3RCxJQUFJMGdDLEVBQUluOEIsS0FBS29SLFNBR2JnckIsaUJBQWlCaGdDLEtBQUssS0FBTSsvQixFQUFHLHFCQUN4QixFQUFRLEdBQWFBLE0sNkJDTDlCLElBQUk3OUIsRUFBVSxFQUFRLEdBRXRCNUMsRUFBT0QsUUFBVSxTQUFVNGdDLEdBQ3pCLzlCLEVBQVFBLEVBQVFXLEVBQUdvOUIsRUFBWSxDQUFFN3NCLEdBQUksV0FHbkMsSUFGQSxJQUFJN00sRUFBU2tCLFVBQVVsQixPQUNuQjI1QixFQUFJLElBQUlwMUIsTUFBTXZFLEdBQ1hBLEtBQVUyNUIsRUFBRTM1QixHQUFVa0IsVUFBVWxCLEdBQ3ZDLE9BQU8sSUFBSVosS0FBS3U2QixRLDZCQ1BwQixJQUFJaCtCLEVBQVUsRUFBUSxHQUNsQmtGLEVBQVksRUFBUSxJQUNwQm5GLEVBQU0sRUFBUSxJQUNkNDhCLEVBQVEsRUFBUSxJQUVwQnYvQixFQUFPRCxRQUFVLFNBQVU0Z0MsR0FDekIvOUIsRUFBUUEsRUFBUVcsRUFBR285QixFQUFZLENBQUU1c0IsS0FBTSxTQUFjalIsR0FDbkQsSUFDSTBNLEVBQVNveEIsRUFBRzUrQixFQUFHNitCLEVBRGZDLEVBQVEzNEIsVUFBVSxHQUt0QixPQUhBTCxFQUFVekIsT0FDVm1KLE9BQW9CMUwsSUFBVmc5QixJQUNHaDVCLEVBQVVnNUIsR0FDVGg5QixNQUFWaEIsRUFBNEIsSUFBSXVELE1BQ3BDdTZCLEVBQUksR0FDQXB4QixHQUNGeE4sRUFBSSxFQUNKNitCLEVBQUtsK0IsRUFBSW0rQixFQUFPMzRCLFVBQVUsR0FBSSxHQUM5Qm8zQixFQUFNejhCLEdBQVEsRUFBTyxTQUFVaStCLEdBQzdCSCxFQUFFaDNCLEtBQUtpM0IsRUFBR0UsRUFBVS8rQixTQUd0QnU5QixFQUFNejhCLEdBQVEsRUFBTzg5QixFQUFFaDNCLEtBQU1nM0IsR0FFeEIsSUFBSXY2QixLQUFLdTZCLFMsK0ZDekJwQixlQUNBLFdBQ0EsWUFDQSxXQUNBLFFBQ0EsUUFDQSxRQUNBLFEsd2lEQUVNSSxFLFlBQ0YsYUFBYyxhLDRGQUFBLFVBQ1YsOERBQ0tDLElBQ0wsRUFBS2xpQixTQUNMLEVBQUttaUIsU0FDTCxFQUFLQyxPQUFTSCxFQUFVSSxZQUFZbi9CLE9BQ3BDLEVBQUtvL0IsU0FBVyxJQUFJLEVBQUosUUFDaEIsRUFBS0MsUUFBVSxHQUlmLEVBQUtDLG1CQUFxQixJQUMxQixFQUFLQyxpQkFBbUIsRUFDeEIsRUFBSzNoQyxLQUFPLEdBQ1osRUFBSzRoQyxPQUFTLEdBRWQsRUFBS0MsYUFBZSxHQUNwQixFQUFLQyxZQUFjLEdBQ25CLEVBQUtDLGFBQWMsRUFsQlQsRSxnVEFnc0JzQixJQUFiL29CLEVBQWEsdURBQUosR0FDeEI3USxFQUFPM0IsS0FDWEEsS0FBS3c3QixXQUFXcnhCLFFBQVEsU0FBQ2hQLEVBQU9rWSxHQUV4QjFSLEVBQUs4NUIsYUFBZXRnQyxFQUFNdWdDLFVBQVl2Z0MsRUFBTXdnQyxnQkFDNUNoNkIsRUFBSzg1QixhQUFldGdDLEVBQU11Z0MsVUFBWXZnQyxFQUFNd2dDLGlCQUdwRG5wQixFQUFPRSxLQUFPLCtDQUFpRDFTLEtBQUt5N0IsYUFBZSxLQUduRno3QixLQUFLdzdCLFdBQVdyeEIsUUFBUSxTQUFDaFAsRUFBT3dELEdBQzVCLElBQUssSUFBVytWLEVBQVB4YSxFQUFJLEVBQVNBLEVBQUlpQixFQUFNeWdDLFlBQVloN0IsUUFBVThULEVBQU92WixFQUFNeWdDLFlBQVkxaEMsSUFBS0EsSUFDMUQsYUFBbEJ3YSxFQUFLbW5CLFdBQ0xubkIsRUFBS21uQixTQUFXbDZCLEVBQUs4NUIsYUFBZS9tQixFQUFLZ25CLGUsK0NBTXpCSSxHQUM1QixPQUFRQSxHQUNKLElBQUssVUFDRCxNQUFPLENBQUMsV0FDWixJQUFLLElBQ0wsSUFBSyxLQUNELE1BQU8sQ0FBQyxLQUNaLElBQUssSUFDTCxJQUFLLEtBQ0QsTUFBTyxDQUFDLEtBQ1osSUFBSyxJQUNELE1BQU8sQ0FBQyxTQUFVLFVBQ3RCLElBQUssUUFDRCxNQUFPLENBQUMsVUFDWixJQUFLLFNBQ0QsTUFBTyxDQUFDLFVBQ1osSUFBSyxJQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDRCxNQUFPLENBQUMsU0FDWixJQUFLLGNBQ0QsTUFBTyxDQUFDLFFBQ1osSUFBSyxPQUNELE1BQU8sQ0FBQyxhQUNaLElBQUssU0FDRCxNQUFPLENBQUMsa0Isd0NBS2hCLElBQUluNkIsRUFBTzNCLEtBQ1gwWCxRQUFRK0IsSUFBSSxnQ0FBaUN6WixLQUFLdzdCLFlBQ2xEeDdCLEtBQUt3N0IsV0FBV3J4QixRQUFRLFNBQVVoUCxFQUFPa1ksR0FDckMsSUFENkMsZUFDcENuWixHQUNMLElBQUk2aEMsRUFBZ0I1Z0MsRUFBTXlnQyxZQUFZMWhDLEdBQ3RDLEdBQUk2aEMsRUFBY0YsU0FBVyxFQUFHLENBQzVCLElBQUlHLEVBQWE5ckIsU0FBU3VoQixlQUFlcGUsR0FDekMsR0FBSTBvQixFQUFjdi9CLE9BQVMsVUFBV3kvQixjQUFjckwsS0FBTSxDQUV0RCxJQUFJc0wsRUFBYWorQixLQUFLZ0UsS0FBSzg1QixFQUFjTCxXQUFhLElBQU8sVUFBV3JuQixhQUNwRThuQixFQUFXbCtCLEtBQUtnRSxNQUFNODVCLEVBQWNMLFVBQVlLLEVBQWNGLFdBQWEsSUFBTyxVQUFXeG5CLGFBQ2pHMG5CLEVBQWN6N0IsVUFBVTZKLFFBQVEsU0FBQ29NLEdBQzdCLEdBQUl3bEIsRUFBY0ssZ0JBQWtCLFVBQVdDLG9CQUFvQkMsT0FBUSxDQUV2RSxHQUFzQixNQUFsQi9sQixFQUFLdWxCLFNBQWtCLENBQ3ZCLElBQU1TLEdBQVUsSUFBQUMsZ0JBQWVSLEdBQy9CLEVBQUExSSxVQUFVQyxXQUFXeDRCLElBQUlzWSxHQUFRb3BCLGtCQUFrQixVQUFXRixFQUFRLEdBQUssR0FDM0UsRUFBQWpKLFVBQVVDLFdBQVd4NEIsSUFBSXNZLEdBQVFvcEIsa0JBQWtCLFVBQVdGLEVBQVEsR0FBSyxPQUN4QixTQUE1Q3JzQixTQUFTdWhCLGVBQWVwZSxHQUFROEMsU0FDdkMsRUFBQW1kLFVBQVVDLFdBQVd4NEIsSUFBSXNZLEdBQVFvcEIsa0JBQWtCLFVBQVcsR0FJbEUsSUFBSUMsRUFBaUIvQixFQUFVZ0MseUJBQXlCcG1CLEVBQUt1bEIsVUFDN0QsR0FBSTMyQixNQUFNK1AsUUFBUXFCLEVBQUtxbUIsSUFBSyxDQUV4QixJQURBLElBQUlDLEVBQVksRUFBR0MsRUFBVSxFQUNwQnZWLEVBQUksRUFBR0EsRUFBSWhSLEVBQUtxbUIsR0FBR2g4QixPQUFRMm1CLElBQ2hDLEdBQUloUixFQUFLcW1CLEdBQUdyVixHQUFHLEtBQU9sVSxFQUFRLENBQzFCd3BCLEVBQVl0bUIsRUFBSzdJLEtBQUs2WixHQUFHLEdBQ3pCdVYsRUFBVXZtQixFQUFLcW1CLEdBQUdyVixHQUFHLEdBQ3JCLE1BSVJtVixFQUFldnlCLFFBQVEsU0FBQzR5QixHQUNwQixHQUFXLFVBQVBBLEVBQWdCLENBRWhCLElBQUlDLEVBQW1CQyxFQUZQLElBSVEsRUFBQXBxQixVQUFVcXFCLG1CQUFtQkwsR0FKckMsR0FJZkcsRUFKZSxLQUlMSCxFQUpLLGFBS0ksRUFBQWhxQixVQUFVcXFCLG1CQUFtQkosR0FMakMsR0FLZkcsRUFMZSxLQUtQSCxFQUxPLEtBTWhCLEVBQUF4SixVQUFVQyxXQUFXeDRCLElBQUlzWSxHQUFROHBCLHNCQUM3QixJQUNBakIsRUFDQUMsRUFDQWEsRUFBUyxHQUNUQyxFQUFPLEdBQ1AsVUFBV0csb0JBQW9CckIsRUFBY3NCLFNBRWpELEVBQUEvSixVQUFVQyxXQUFXeDRCLElBQUlzWSxHQUFROHBCLHNCQUM3QixJQUNBakIsRUFDQUMsRUFDQWEsRUFBUyxHQUNUQyxFQUFPLEdBQ1AsVUFBV0csb0JBQW9CckIsRUFBY3NCLGFBRW5DLGNBQVBOLEdBQTZCLGdCQUFQQSxFQUN6QkYsR0FBYUMsR0FBeUIsU0FBZEQsR0FBb0MsU0FBWkMsR0FDaERELEVBQVksRUFBQWhxQixVQUFVeXFCLGFBQWFULEdBQ25DQyxFQUFVLEVBQUFqcUIsVUFBVXlxQixhQUFhUixJQUVqQ0QsRUFBWUMsRUFBVSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBR3RCLFlBQVBDLElBQ1BGLEdBQWEsSUFDYkMsR0FBVyxLQUdmLEVBQUF4SixVQUFVQyxXQUFXeDRCLElBQUlzWSxHQUFROHBCLHNCQUM3QkosRUFDQWIsRUFDQUMsRUFDQVUsRUFDQUMsRUFDQSxVQUFXTSxvQkFBb0JyQixFQUFjc0IsZ0JBSXJEWCxFQUFldnlCLFFBQVEsU0FBQzR5QixHQUNwQixFQUFBekosVUFBVUMsV0FBV3g0QixJQUFJc1ksR0FBUThwQixzQkFDN0JKLEVBQ0FiLEVBQ0FDLEVBQ1ksSUFBWjVsQixFQUFLN0ksS0FDSyxJQUFWNkksRUFBS3FtQixHQUNMLFVBQVdRLG9CQUFvQnJCLEVBQWNzQixnQkFLekQsRUFBQS9KLFVBQVVDLFdBQVd4NEIsSUFBSXNZLEdBQVE4cEIsc0JBQzdCNW1CLEVBQUt1bEIsU0FDTEksRUFDQUMsRUFDWSxJQUFaNWxCLEVBQUs3SSxLQUNLLElBQVY2SSxFQUFLcW1CLEdBQ0wsVUFBV1Esb0JBQW9CckIsRUFBY3NCLGdCQUl0RCxHQUFJdEIsRUFBY3YvQixPQUFTLFVBQVd5L0IsY0FBY3RGLEtBQU0sQ0FDN0QsSUFBSVIsRUFDRW9HLEdBQVUsSUFBQUMsZ0JBQWVSLEdBQzNCaGhDLEVBQUkyRyxFQUFLNDdCLFlBQVl4aUMsSUFBSXNZLEdBQVEwb0IsRUFBY3JqQixVQUEzQyxhQUNSLE9BQVFxakIsRUFBY0ssZUFFbEIsS0FBSyxVQUFXQyxvQkFBb0JtQixLQUNwQyxLQUFLLFVBQVduQixvQkFBb0JvQixLQUNwQyxLQUFLLFVBQVdwQixvQkFBb0JxQixPQUNoQ3ZILEVBQVksRUFBQWxDLGFBQWEzSixZQUFZMFIsR0FDckMsTUFFSixLQUFLLFVBQVdLLG9CQUFvQnNCLFFBQ2hDeEgsRUFBWSxFQUFBbEMsYUFBYTJKLFFBQVFyQixFQUFRLEdBQUtBLEVBQVEsR0FBSUEsRUFBUSxHQUFLQSxFQUFRLEdBQUl2aEMsRUFBR0EsSUFDNUV5aEMsa0JBQWtCLFVBQVdGLEVBQVEsR0FBSyxHQUNwRHBHLEVBQVVzRyxrQkFBa0IsVUFBV0YsRUFBUSxHQUFLLEdBQ3BELE1BRUosS0FBSyxVQUFXRixvQkFBb0J3QixNQUVoQyxJQUFJQyxFQUFhLEVBQUFqckIsVUFBVThTLGNBQWNxVyxFQUFXclksYUFBYSxNQUM3RG9hLEVBQWFwOEIsRUFBSzQ3QixZQUFZeGlDLElBQUlzWSxHQUFRMG9CLEVBQWNyakIsVUFBM0MsR0FBNkQ2akIsRUFBUSxHQUFLdUIsRUFBVyxHQUNsR0UsRUFBYXI4QixFQUFLNDdCLFlBQVl4aUMsSUFBSXNZLEdBQVEwb0IsRUFBY3JqQixVQUEzQyxHQUE2RDZqQixFQUFRLEdBQUt1QixFQUFXLEdBQ3RHM0gsRUFBWSxFQUFBbEMsYUFBYTJKLFFBQVFHLEVBQVlDLEVBQVloakMsRUFBR0EsR0FFNUQsSUFBSWlqQyxFQUFnQnQ4QixFQUFLNDdCLFlBQVl4aUMsSUFBSXNZLEdBQVEwb0IsRUFBY3JqQixVQUEzQyxXQUNoQndsQixFQUFjdjhCLEVBQUs0N0IsWUFBWXhpQyxJQUFJc1ksR0FBUTBvQixFQUFjcmpCLFVBQTNDLFNBQ2xCeWQsRUFBVXNHLGtCQUFrQixjQUFld0IsRUFBZ0JoZ0MsS0FBS3VpQixHQUFLLEVBQUksSUFBTSxJQUMvRXViLEVBQWN6N0IsVUFBVSxHQUFHczhCLEdBQUssR0FBTXNCLEVBQWNELElBQTRCLEVBQVZoZ0MsS0FBS3VpQixLQUFzQixFQUFWdmlCLEtBQUt1aUIsSUFFNUYyVixFQUFVc0csa0JBQWtCLGNBQWUsRUFBSXpoQyxHQUMvQ203QixFQUFVc0csa0JBQWtCLGNBQWUsR0FJbkQsSUFBSVAsRUFBYWorQixLQUFLZ0UsS0FBSzg1QixFQUFjTCxXQUFhLElBQU8sVUFBV3JuQixhQUNwRThuQixFQUFXbCtCLEtBQUtnRSxNQUFNODVCLEVBQWNMLFVBQVlLLEVBQWNGLFdBQWEsSUFBTyxVQUFXeG5CLGFBQ2pHMG5CLEVBQWN6N0IsVUFBVTZKLFFBQVEsU0FBQ29NLEdBQzdCNGYsRUFBVWdILHNCQUNONW1CLEVBQUt1bEIsU0FDTEksRUFDQUMsRUFDWSxJQUFaNWxCLEVBQUs3SSxLQUNLLElBQVY2SSxFQUFLcW1CLEdBQ0wsVUFBV1Esb0JBQW9CckIsRUFBY3NCLFdBR3JELEVBQUEvSixVQUFVRSxRQUFRMkssUUFBUWhJLEVBQVcsRUFBQTdDLFVBQVVDLFdBQVd4NEIsSUFBSXNZLEdBQVMwb0IsRUFBYzNGLGVBRXJGMWUsUUFBUUMsTUFBTSwyQkFBNEJva0IsRUFBY3YvQixRQXBKM0R0QyxFQUFJLEVBQUdBLEVBQUlpQixFQUFNeWdDLFlBQVloN0IsT0FBUTFHLElBQUssRUFBMUNBLE8saUNBMkpDa2tDLEdBQ2QsT0FBUUEsR0FDSixLQUFLcCtCLEtBQUsrNkIsWUFBWXNELFFBQ2xCLE1BQU8sVUFDWCxLQUFLcitCLEtBQUsrNkIsWUFBWXVELFFBQ2xCLE1BQU8sYSxpQ0FNZnQrQixLQUFLeTdCLGFBQWUsRUFDcEJ6N0IsS0FBS3c3QixXQUFXekIsUUFDaEIvNUIsS0FBS3UrQixnQkFBZ0J4RSxRQUNyQi81QixLQUFLdytCLFVBQVV6RSxRQUVmLzVCLEtBQUt1OUIsWUFBWXhELFFBQ2pCLzVCLEtBQUt5K0IsV0FBVzFFLFFBQ2hCWSxFQUFVK0QsT0FBUyxNLDBDQWwzQk5uc0IsR0FBd0IsSUFBYkMsRUFBYSx1REFBSixHQUVqQ3hTLEtBQUsyK0IsbUJBQW1CcHNCLEVBQVdDLEdBR2IsY0FBbEJ4UyxLQUFLZzdCLFVBQ0xoN0IsS0FBS2c3QixTQUFTNEQsa0JBQWtCcnNCLEVBQVdDLEdBSS9DeFMsS0FBS2k3QixRQUFROXdCLFFBQVEsU0FBQXhMLEdBQ2pCQSxFQUFFZ2dDLG1CQUFtQnBzQixFQUFXQyxHQUNoQzdULEVBQUVrZ0MscUJBQXFCdHNCLEVBQVdDLE8sZ0NBUWhDc3NCLEVBQWVDLEVBQWtCQyxFQUFVQyxHQUEyQixJQUFienNCLEVBQWEsdURBQUosR0FjeEUsR0FiQXhTLEtBQUswWSxTQUFXb21CLEVBQWNwbUIsU0FDekJzbUIsSUFDRGgvQixLQUFLNjZCLFNBQVdpRSxFQUFjakUsVUFFbEM3NkIsS0FBS3VPLEdBQUt1d0IsRUFBY3Z3QixHQUN4QnZPLEtBQUs4VCxVQUFZZ3JCLEVBQWNockIsVUFDL0I5VCxLQUFLcUksT0FBU3kyQixFQUFjejJCLE9BQzVCckksS0FBS2svQixNQUFRSixFQUFjSSxXQUNXLElBQTNCSixFQUFjOUQsVUFDckJoN0IsS0FBS2c3QixTQUFTbUUsYUFBYUwsRUFBYzlELGVBSVIsSUFBMUI4RCxFQUFjTSxRQUF5QixDQUMxQ0osSUFDQWgvQixLQUFLaTdCLFFBQVUsSUFLbkIsSUFEQSxJQUNnQm5pQixFQURWdW1CLEVBQVksQ0FBQyxJQUNWbmxDLEVBQUksRUFBZUEsRUFBSTRrQyxFQUFjTSxRQUFReCtCLFFBQVVrWSxFQUFhZ21CLEVBQWNNLFFBQVFsbEMsSUFBS0EsSUFDaEc0ZSxFQUFXaEYsWUFBYyxVQUFXekIsVUFBVUMsb0JBQWlELElBQXpCd0csRUFBV2hGLFVBQ2pGdXJCLEVBQVVBLEVBQVV6K0IsT0FBUyxHQUFHMkMsS0FBS3JKLEdBRXJDbWxDLEVBQVU5N0IsS0FBSyxDQUFDckosSUFHeEJ3ZCxRQUFRK0IsSUFBSSwwQkFBMkI0bEIsR0FDdkMsSUFBTUMsRUFBZ0IsR0FDaEJDLEVBQXNCLENBQ3hCLFVBQVd0bUIsWUFBWUMsV0FDdkIsVUFBV0QsWUFBWUcsV0FDdkIsVUFBV0gsWUFBWUUsWUFDdkIsVUFBV0YsWUFBWUksT0FDdkIsVUFBV0osWUFBWU0sT0FDdkIsVUFBV04sWUFBWUssUUFDdkIsVUFBV0wsWUFBWU8sWUFFM0I2bEIsRUFBVWwxQixRQUFRLFNBQUNxMUIsR0FFZixJQUFJQyxFQUFtQixHQUFJQyxHQUFTLEVBQU9DLEVBQVEsRUFBRzNtQixFQUFZLEVBQUMsR0FBTyxHQUFPLEdBQU8sR0FBTyxHQUMvRndtQixFQUFXcjFCLFFBQVEsU0FBQXkxQixHQUNmLElBQU1DLEVBQWdCZixFQUFjTSxRQUFRUSxHQUN4Q0wsRUFBb0JqMUIsU0FBU3UxQixFQUFjcmpDLE9BQzNDa2pDLEdBQVMsRUFDVEMsSUFDQS9rQyxPQUFPdUwsS0FBSzA1QixHQUFlMTFCLFFBQVEsU0FBQTJnQixHQUMvQjJVLEVBQWlCM1UsR0FBSytVLEVBQWMvVSxLQUV4QzlSLEVBQVUsR0FBTTZtQixFQUFjcmpDLE9BQVMsVUFBV3ljLFlBQVlDLFlBQWMybUIsRUFBY3JqQyxPQUFTLFVBQVd5YyxZQUFZRSxhQUFlSCxFQUFVLEdBQ25KQSxFQUFVLEdBQU02bUIsRUFBY3JqQyxPQUFTLFVBQVd5YyxZQUFZRyxZQUFjeW1CLEVBQWNyakMsT0FBUyxVQUFXeWMsWUFBWUUsYUFBZUgsRUFBVSxHQUNuSkEsRUFBVSxHQUFNNm1CLEVBQWNyakMsT0FBUyxVQUFXeWMsWUFBWUksUUFBVXdtQixFQUFjcmpDLE9BQVMsVUFBV3ljLFlBQVlLLFNBQVdOLEVBQVUsR0FDM0lBLEVBQVUsR0FBTTZtQixFQUFjcmpDLE9BQVMsVUFBV3ljLFlBQVlNLFFBQVVzbUIsRUFBY3JqQyxPQUFTLFVBQVd5YyxZQUFZSyxTQUFXTixFQUFVLEdBQzNJQSxFQUFVLEdBQU02bUIsRUFBY3JqQyxPQUFTLFVBQVd5YyxZQUFZTyxZQUFjUixFQUFVLElBRXRGc21CLEVBQWMvN0IsS0FBS3M4QixLQUd2QkgsSUFDSUMsRUFBUSxJQUNSRixFQUFpQmpqQyxLQUFPLFVBQVd5YyxZQUFZNm1CLGlCQUMvQ0wsRUFBaUJ6bUIsVUFBWUEsR0FFakNzbUIsRUFBYy83QixLQUFLazhCLE1BSzNCL25CLFFBQVErQixJQUFJLG1CQUFvQjZsQixHQUloQyxJQURBLElBQ2dCeG1CLEVBRFpELEVBQWdCLEVBQUMsR0FBTyxHQUFPLEdBQzFCM2UsRUFBSSxFQUFlQSxFQUFJb2xDLEVBQWMxK0IsUUFBVWtZLEVBQWF3bUIsRUFBY3BsQyxJQUFLQSxJQUFLLENBQ3JGNGUsRUFBV3RjLE9BQVMsVUFBV3ljLFlBQVlJLFFBQVVQLEVBQVd0YyxPQUFTLFVBQVd5YyxZQUFZSyxRQUNoR1QsRUFBYyxJQUFLLEVBQ1pDLEVBQVd0YyxPQUFTLFVBQVd5YyxZQUFZTSxRQUFVVCxFQUFXdGMsT0FBUyxVQUFXeWMsWUFBWUssUUFDdkdULEVBQWMsSUFBSyxFQUNaQyxFQUFXdGMsT0FBUyxVQUFXeWMsWUFBWU8sV0FDbERYLEVBQWMsSUFBSyxPQUNvQixJQUF6QkMsRUFBV0UsWUFDekJILEVBQWMsR0FBTUEsRUFBYyxJQUFNQyxFQUFXRSxVQUFVLEdBQzdESCxFQUFjLEdBQU1BLEVBQWMsSUFBTUMsRUFBV0UsVUFBVSxHQUM3REgsRUFBYyxHQUFNQSxFQUFjLElBQU1DLEVBQVdFLFVBQVUsSUFFakVGLEVBQVdKLFNBQVdvbUIsRUFBY3BtQixTQUNwQyxJQUFJcW5CLEVBQXVCLFVBQVdDLHdCQUF3QmxuQixFQUFZRCxFQUFlaW1CLEVBQWNwbUIsU0FBVXFtQixFQUFrQkUsRUFBY3pzQixHQUNqSmtGLFFBQVErQixJQUFJLDZCQUE4QnNtQixHQUMxQyxJQUFLLElBQVdFLEVBQVAxWSxFQUFJLEVBQXNCQSxFQUFJd1ksRUFBcUJuL0IsUUFBVXEvQixFQUFvQkYsRUFBcUJ4WSxJQUFLQSxJQUFLLENBQ3JILElBQUkyWSxFQUFZLElBQUksRUFBSixRQUNoQkEsRUFBVUMsV0FBV0YsR0FDckJqZ0MsS0FBS2k3QixRQUFRMTNCLEtBQUsyOEIsUSxpQ0FjdkJFLEdBQVMsSUFDWkMsRUFEWSxPQUNHQyxHQUFXLE9BQ0osSUFBZnRnQyxLQUFLay9CLE9BQ1p2RSxFQUFVOEQsV0FBV3QwQixRQUFRLFNBQUNoUCxFQUFPTSxHQUM3QixFQUFLeWpDLE1BQU0zaEMsU0FBV3BDLEVBQU1vVCxLQUM1Qjh4QixFQUFnQmxsQyxFQUNaLEVBQUsrakMsTUFBTTFpQyxPQUFTbStCLEVBQVVJLFlBQVlzRCxVQUMxQ2lDLEdBQVcsRUFDWCxFQUFLQyxVQUFZcGxDLEVBQU02L0Isa0JBT1gsSUFBakJxRixHQUNQQSxFQUFjL0UsWUFBWS8zQixLQUExQixVQUFrQ3ZELEtBQUswWSxTQUF2QyxZQUFtRDFZLEtBQUs2NkIsV0FNNUQsSUFIQSxJQUdnQnhuQixFQUhaMVIsRUFBTzNCLEtBRVB3Z0MsRUFBcUIsSUFBSTd5QixJQUNwQnpULEVBQUksRUFBV0EsRUFBSWttQyxFQUFReC9CLFFBQVV5UyxFQUFTK3NCLEVBQVFsbUMsSUFBS0EsSUFBSyxDQUVyRSxJQURBLElBQ2dCdW1DLEVBRFpDLEVBQWdCLElBQUkveUIsSUFDZjRaLEVBQUksRUFBV0EsRUFBSXZuQixLQUFLaTdCLFFBQVFyNkIsUUFBVTYvQixFQUFTemdDLEtBQUtpN0IsUUFBUTFULElBQUtBLElBQzFFLEdBQStCLFdBQTNCLEVBQU9rWixFQUFPNUUsVUFBdUIsQ0FDckMsSUFBSThFLEVBQVFoRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBUSxjQUN2Q2xZLEVBQVFtWSxXQUFXcXRCLEVBQU1GLEVBQU81RSxTQUFTdG9CLFFBQ3pDcXRCLE9BQW9ELElBQS9CSCxFQUFPNUUsU0FBUytFLFlBQTZCLElBQU1ILEVBQU81RSxTQUFTK0UsWUFDNUZGLEVBQWN4NEIsSUFBSXU0QixFQUFPNUUsU0FBU3RvQixNQUFPLENBQUNwWSxFQUFPeWxDLElBR3pESixFQUFtQnQ0QixJQUFJbUwsRUFBUXF0QixHQWhDbkIsUUFtQzZDLFVBQVdHLGtCQUFrQjdnQyxLQUFLaTdCLFFBQVN1RixFQUFvQjdGLEVBQVUxbkIsVUFuQ3RILEdBbUNYNnRCLEVBbkNXLEtBbUNPQyxFQW5DUCxLQW1DeUJDLEVBbkN6QixLQXNDWkMsRUFBa0IsR0FBSUMsRUFBb0IsR0FDOUMsR0FBSVosRUFBVSxTQUM2QnRnQyxLQUFLdWdDLFVBQVVZLGFBQWFmLEVBQVN6RixFQUFVMW5CLFNBQVVqVCxLQUFLeEcsS0FBTXdHLEtBQUs4VCxVQUFXd3NCLEdBRGpILEdBQ1RXLEVBRFMsS0FDUUMsRUFEUixTQUVQLFNBQ29DbGhDLEtBQUtnN0IsU0FBU21HLGFBQWFmLEVBQVN6RixFQUFVMW5CLFNBQVVqVCxLQUFLeEcsS0FBTXdHLEtBQUs4VCxVQUFXd3NCLEdBRHZILEdBQ0ZXLEVBREUsS0FDZUMsRUFEZixLQUdIWixJQUNBdGdDLEtBQUt4RyxLQUFLd3pCLFNBQVdrVSxHQUd6QmxoQyxLQUFLcTdCLGFBQWU0RixFQUNwQmpoQyxLQUFLbzdCLE9BQVM4RixFQUdkLElBREEsSUFDZ0I3dEIsRUFEWit0QixFQUFVLElBQUl6ekIsSUFDVHpULEVBQUksRUFBV0EsRUFBSThGLEtBQUtxN0IsYUFBYXo2QixRQUFVeVMsRUFBU3JULEtBQUtxN0IsYUFBYW5oQyxJQUFLQSxJQUFLLENBR3pGLElBREEsSUFDZ0JtbkMsRUFEWkMsRUFBUyxHQUNKL1osRUFBSSxFQUFVQSxFQUFJb1QsRUFBVTRHLFlBQVkzZ0MsUUFBVXlnQyxFQUFRMUcsRUFBVTRHLFlBQVloYSxJQUFLQSxJQUMxRixRQUFxRCxJQUExQ29ULEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUFRZ3VCLEdBQ3RDLE9BQVFBLEdBQ0osSUFBSyxVQUNEQyxFQUFPRCxHQUFTLEVBQ2hCLE1BQ0osSUFBSyxRQUNEQyxFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFFBQ2hCLE1BQ0osSUFBSyxTQUNEaXVCLEVBQU9ELEdBQVMxRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsU0FDaEIsTUFDSixJQUFLLElBQ0RpdUIsRUFBT0QsR0FBUzFHLEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUF2QixJQUNoQixNQUNKLElBQUssSUFDRGl1QixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLElBQ2hCLE1BQ0osSUFBSyxVQUNtRCxJQUF6Q3NuQixFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsR0FDUGl1QixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLEdBRWhCaXVCLEVBQU9ELEdBQVMxRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsSUFBd0NzbkIsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFFBQTRDLEVBRXhHLE1BQ0osSUFBSyxVQUNtRCxJQUF6Q3NuQixFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsR0FDUGl1QixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLEdBRWhCaXVCLEVBQU9ELEdBQVMxRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsSUFBd0NzbkIsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFNBQTZDLEVBRXpHLE1BQ0osSUFBSyxtQkFDNEQsSUFBbERzbkIsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFlBQ1BpdUIsRUFBT0QsR0FBUzFHLEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUF2QixZQUVoQml1QixFQUFPRCxHQUFTLEVBRXBCLE1BQ0osSUFBSyxvQkFDNkQsSUFBbkQxRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsYUFDUGl1QixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLGFBRWhCaXVCLEVBQU9ELEdBQVNwakMsS0FBSzJoQixLQUFLM2hCLEtBQUt1akMsSUFBSTdHLEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUF2QixRQUE0QyxFQUFHLEdBQUtwVixLQUFLdWpDLElBQUk3RyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsU0FBNkMsRUFBRyxJQUFNLEVBRTFKLE1BQ0osSUFBSyxrQkFDMkQsSUFBakRzbkIsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFdBQ1BpdUIsRUFBT0QsR0FBUzFHLEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUF2QixXQUVoQml1QixFQUFPRCxHQUFTLEVBRXBCLE1BQ0osSUFBSyxnQkFDeUQsSUFBL0MxRyxFQUFVMW5CLFNBQVNsWSxJQUFJc1ksR0FBdkIsU0FDUGl1QixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFNBRWhCaXVCLEVBQU9ELEdBQW1CLEVBQVZwakMsS0FBS3VpQixRQUtqQzhnQixFQUFPRCxHQUFTMUcsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQVFndUIsUUFHTixJQUF0QzFHLEVBQVU0QyxZQUFZeGlDLElBQUlzWSxJQUNqQ3NuQixFQUFVNEMsWUFBWXIxQixJQUFJbUwsRUFBUSxJQUV0Q3NuQixFQUFVNEMsWUFBWXhpQyxJQUFJc1ksR0FBUTlQLEtBQUsrOUIsR0FFdkNGLEVBQVFsNUIsSUFBSW1MLEVBQVEsQ0FDaEIsVUFBYSxFQUNiLGNBQWlCeXRCLEVBQWlCL2xDLElBQUlzWSxHQUN0QyxZQUFlLEtBSXZCLElBQUlvdUIsRUFBVyxJQUFJOXpCLElBQ25CLFFBQTBCLElBQWYzTixLQUFLay9CLE1BQ1osT0FBUWwvQixLQUFLay9CLE1BQU0xaUMsTUFDZixLQUFLbStCLEVBQVVJLFlBQVlzRCxRQUN2Qm9ELEVBQVd6aEMsS0FBSzBoQyxhQUFhTixFQUFTZixHQUN0QyxNQUNKLEtBQUsxRixFQUFVSSxZQUFZdUQsUUFDdkJtRCxFQUFXemhDLEtBQUsyaEMsYUFBYVAsRUFBU2YsUUFJOUNvQixFQUFXemhDLEtBQUsyaEMsYUFBYVAsRUFBU2YsR0FHMUNlLEVBQVFqM0IsUUFBUSxTQUFVaFAsRUFBT2tZLEdBQzdCLElBQUlpdUIsRUFBUyxDQUFFLFVBQWFubUMsRUFBTXVnQyxVQUFZK0YsRUFBUzFtQyxJQUFJc1ksR0FBUyxjQUFpQmxZLEVBQU13Z0MsY0FBZSxZQUFlLElBQ3pIaDZCLEVBQUtpZ0MseUJBQXlCTixHQUM5QixJQUFLLElBQVczaUMsRUFBUHpFLEVBQUksRUFBTUEsRUFBSThtQyxFQUFpQnBnQyxRQUFVakMsRUFBSXFpQyxFQUFpQjltQyxJQUFLQSxJQUFLLENBRzdFLElBRkEsSUFFZ0JxYyxFQUZad2xCLEVBQWdCLElBQUksRUFBSixRQUNoQjUxQixFQUFPdkwsT0FBT3VMLEtBQUt4SCxHQUNkNG9CLEVBQUksRUFBU0EsRUFBSXBoQixFQUFLdkYsUUFBVTJWLEVBQU9wUSxFQUFLb2hCLElBQUtBLElBRXRELEdBREF3VSxFQUFjeGxCLEdBQVE1WCxFQUFFNFgsR0FDWCxjQUFUQSxHQUEyQyxXQUFuQixFQUFPNVgsRUFBRTRYLElBQW9CLENBQ3JELElBQUlvcUIsRUFBUWhHLEVBQVUxbkIsU0FBU2xZLElBQUlzWSxHQUFRLGNBQ3ZDRixFQUFlNHRCLEVBQWlCaG1DLElBQUk0RCxFQUFFNFgsR0FBTWhELE9BQ2hEd29CLEVBQWN4bEIsR0FBUTVYLEVBQUU0WCxHQUFNcXFCLFlBQWN0dEIsV0FBV3F0QixFQUFNaGlDLEVBQUU0WCxHQUFNaEQsUUFBVUosTUFDL0QsZ0JBQVRvRCxJQUNQd2xCLEVBQWN4bEIsR0FBUTVYLEVBQUU0WCxHQUFNeGIsSUFBSXNZLElBSXRDMG9CLEVBQWNLLGdCQUFrQixVQUFXQyxvQkFBb0JDLE9BQzNELEVBQUF6cEIsVUFBVWd2QixlQUFlbEgsRUFBVTFuQixTQUFTbFksSUFBSXNZLEdBQXZCLFFBQTJDMG9CLEVBQWN6N0IsVUFBVSxHQUFHdzdCLFdBQy9Gd0YsRUFBTzFGLFlBQVlyNEIsS0FBS3c0QixHQUc1QnVGLEVBQU8xRixZQUFZcjRCLEtBQUt3NEIsR0FJaENxRixFQUFRbDVCLElBQUltTCxFQUFRaXVCLEtBR3hCRixFQUFRajNCLFFBQVEsU0FBVWhQLEVBQU9rWSxHQUc3QixJQURBLElBQUl5dUIsRUFBaUIsRUFDWjVuQyxFQUFJLEVBQUdBLEVBQUlpQixFQUFNeWdDLFlBQVloN0IsT0FBUTFHLElBQzFDaUIsRUFBTXlnQyxZQUFZMWhDLEdBQUd3aEMsVUFBWXZnQyxFQUFNdWdDLFVBQVl2Z0MsRUFBTXlnQyxZQUFZMWhDLEdBQUc2bkMsWUFDcEU1bUMsRUFBTXlnQyxZQUFZMWhDLEdBQUd3aEMsVUFBWXZnQyxFQUFNeWdDLFlBQVkxaEMsR0FBRzJoQyxTQUFXaUcsSUFDakVBLEVBQWlCM21DLEVBQU15Z0MsWUFBWTFoQyxHQUFHd2hDLFVBQVl2Z0MsRUFBTXlnQyxZQUFZMWhDLEdBQUcyaEMsVUFHL0UsUUFBZ0QsSUFBckNsQixFQUFVYSxXQUFXemdDLElBQUlzWSxHQUNoQ3NuQixFQUFVYSxXQUFXdHpCLElBQUltTCxFQUFRbFksT0FDOUIsQ0FDSCxJQUFJNm1DLEVBQW1CckgsRUFBVWEsV0FBV3pnQyxJQUFJc1ksR0FBUXFvQixVQUNwRHVHLEVBQWlCRCxFQUFtQnJILEVBQVVhLFdBQVd6Z0MsSUFBSXNZLEdBQVFzb0IsY0FDekVoQixFQUFVYSxXQUFXemdDLElBQUlzWSxHQUFRcW9CLFVBQVlzRyxFQUFtQjdtQyxFQUFNdWdDLFVBQVlzRyxFQUFtQjdtQyxFQUFNdWdDLFVBQzNHLElBQUl3RyxFQUFhL21DLEVBQU11Z0MsVUFBWXZnQyxFQUFNd2dDLGNBQ3pDc0csRUFBaUJBLEVBQWlCQyxFQUFhRCxFQUFpQkMsRUFDaEV2SCxFQUFVYSxXQUFXemdDLElBQUlzWSxHQUFRc29CLGNBQWdCc0csRUFBaUJ0SCxFQUFVYSxXQUFXemdDLElBQUlzWSxHQUFRcW9CLFVBQ25HZixFQUFVYSxXQUFXemdDLElBQUlzWSxHQUFRdW9CLFlBQWpDLFlBQW1EakIsRUFBVWEsV0FBV3pnQyxJQUFJc1ksR0FBUXVvQixhQUFwRixFQUFvR3pnQyxFQUFNeWdDLG1CLG1DQUt6R3dGLEVBQVNmLEdBQWUsV0FDM0IxK0IsRUFBTzNCLEtBQ2JBLEtBQUt4RyxLQUFLMGxDLE1BQVFsL0IsS0FBS2svQixNQUV2Qm1CLEVBQWNqRixPQUFPanhCLFFBQVEsU0FBQWhRLEdBQ3pCLElBQU1nb0MsRUFBY2hvQyxFQUFFZzJCLE1BQ3RCaDJCLEVBQUVpb0MsVUFBWSxJQUNkam9DLEVBQUVrb0MsUUFBVSxFQUNaRixFQUFZaDRCLFFBQVEsU0FBQXNqQixHQUNoQixJQUFNNlUsRUFBVTNILEVBQVVhLFdBQVd6Z0MsSUFBSTB5QixHQUN6QzZVLEVBQVE1RyxVQUFZdmhDLEVBQUVpb0MsWUFBWWpvQyxFQUFFaW9DLFVBQVlFLEVBQVE1RyxXQUN2RDRHLEVBQVE1RyxVQUFZNEcsRUFBUTNHLGNBQWlCeGhDLEVBQUVrb0MsVUFBVWxvQyxFQUFFa29DLFFBQVdDLEVBQVE1RyxVQUFZNEcsRUFBUTNHLG1CQUszRyxJQUFJNEcsRUFBYyxJQUFJNTBCLElBdUJ0QixHQXRCQTB5QixFQUFjakYsT0FBT2p4QixRQUFRLFNBQUNoUSxFQUFHcW9DLEdBQzdCLElBQUlDLEVBQWlCLEdBQ3JCdG9DLEVBQUVnMkIsTUFBTWhtQixRQUFRLFNBQUFzakIsR0FDc0QsV0FBYixJQUExQyxVQUFVQyxtQkFBbUIzeUIsSUFBSTB5QixLQUN4QyxFQUFBZ1YsR0FBZWwvQixLQUFmLFVBQXVCLFVBQVVtcUIsbUJBQW1CM3lCLElBQUkweUIsT0FHaEVnVixFQUFpQixHQUFILFNBQU8sSUFBSXBaLElBQUlvWixLQUU3QixJQUFLLElBQXFDQyxFQUFqQ3hvQyxFQUFJLEVBQUdxUixFQUFNNUosRUFBS3k1QixPQUFPeDZCLE9BQWMxRyxFQUFJcVIsR0FBT20zQixFQUFPL2dDLEVBQUt5NUIsT0FBT2xoQyxJQUFLQSxTQUM3QyxJQUF2QnFvQyxFQUFZeG5DLElBQUliLElBQ3ZCcW9DLEVBQVlyNkIsSUFBSWhPLEVBQUcsSUFHbkIsRUFBQTJZLFVBQVU4dkIsZUFBZUYsRUFBZ0JDLEVBQUt2UyxTQUU5Q29TLEVBQVl4bkMsSUFBSWIsR0FBR3FKLEtBQUtpL0IsR0FDeEI3Z0MsRUFBSzQ1QixhQUFjLEtBSzFCdjdCLEtBQUt1N0IsWUE2Q04sS0FBTXFILEVBQVU1aUMsS0FBS283QixPQUFPeDZCLE9BQ3hCaWlDLEVBQVcsRUFGWixXQUdNM29DLEdBQ0wsSUFBSTRvQyxFQUFxQnpDLEVBQWNqRixPQUFPbUgsRUFBWXhuQyxJQUFJYixHQUFHLElBQzdENm9DLEVBQXFCLEVBQUszSCxPQUFPbGhDLEVBQUksR0FDckM4b0MsRUFBd0IsRUFBSzVILE9BQU9saEMsR0FFcEMrb0MsRUFBWSxHQUFJQyxFQUFjLFFBRUcsSUFBMUJGLEdBQ1BFLEVBQWNGLEVBQXNCejBCLFFBQ0YsSUFBdkJ1MEIsT0FDMkIsSUFBdkJDLElBRVBBLEVBQW1CWCxVQUFZLElBQy9CVyxFQUFtQlYsUUFBVSxFQUM3QlUsRUFBbUI1UyxNQUFNaG1CLFFBQVEsU0FBQXNqQixHQUM3QixJQUFNNlUsRUFBVWxCLEVBQVFybUMsSUFBSTB5QixHQUM1QjZVLEVBQVE1RyxVQUFZcUgsRUFBbUJYLFlBQVlXLEVBQW1CWCxVQUFZRSxFQUFRNUcsV0FDekY0RyxFQUFRNUcsVUFBWTRHLEVBQVEzRyxjQUFpQm9ILEVBQW1CVixVQUFVVSxFQUFtQlYsUUFBV0MsRUFBUTVHLFVBQVk0RyxFQUFRM0csaUJBR3pJa0gsRUFBVyxFQUFLTSxzQkFBc0JILEVBQXVCRCxFQUFvQjNCLEtBR3JGNEIsRUFBc0JJLFFBQVVOLEVBQW1CdjBCLFFBQ0QsSUFBdkN1MEIsRUFBbUJPLGtCQUMxQlAsRUFBbUJPLGdCQUFrQixJQUV6Q1AsRUFBbUJPLGdCQUFnQjkvQixLQUFLeS9CLEdBQ3hDQyxFQUFZSCxFQUFtQnYwQixHQUMvQnMwQixFQUFXLEVBQUtNLHNCQUFzQkgsRUFBdUJGLEVBQW9CMUIsS0FHckZ5QixFQUFXLEVBS2YsSUFBTVMsRUFBVyxHQUFILE9BQU0sRUFBSzVxQixTQUFYLFlBQXVCLEVBQUttaUIsVUFFMUMsRUFBSzBJLDBCQUEwQmxELEVBQWV5QyxFQUFvQkQsRUFBVUksRUFBV0MsRUFBYUksSUF2Q3hHLElBQVNwcEMsRUFBSSxFQUFHQSxFQUFJMG9DLEVBQVMxb0MsSUFBSyxFQUF6QkEsUUE1Q1QsSUFGQSxJQUFNMG9DLEVBQVU1aUMsS0FBS283QixPQUFPeDZCLE9BQVN5L0IsRUFBY2pGLE9BQU94NkIsT0FBU1osS0FBS283QixPQUFPeDZCLE9BQVN5L0IsRUFBY2pGLE9BQU94NkIsT0FDekdpaUMsRUFBVyxFQUZJLFdBR1Yzb0MsR0FDTCxJQUFJNG9DLEVBQXFCekMsRUFBY2pGLE9BQU9saEMsR0FDMUM2b0MsRUFBcUIsRUFBSzNILE9BQU9saEMsRUFBSSxHQUNyQzhvQyxFQUF3QixFQUFLNUgsT0FBT2xoQyxHQUNwQytvQyxFQUFZLEdBQUlDLEVBQWMsUUFFRyxJQUExQkYsR0FDUEUsRUFBY0YsRUFBc0J6MEIsUUFDRixJQUF2QnUwQixPQUMyQixJQUF2QkMsSUFFUEEsRUFBbUJYLFVBQVksSUFDL0JXLEVBQW1CVixRQUFVLEVBQzdCVSxFQUFtQjVTLE1BQU1obUIsUUFBUSxTQUFBc2pCLEdBQzdCLElBQU02VSxFQUFVM0gsRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQ3pDNlUsRUFBUTVHLFVBQVlxSCxFQUFtQlgsWUFBWVcsRUFBbUJYLFVBQVlFLEVBQVE1RyxXQUN6RjRHLEVBQVE1RyxVQUFZNEcsRUFBUTNHLGNBQWlCb0gsRUFBbUJWLFVBQVVVLEVBQW1CVixRQUFXQyxFQUFRNUcsVUFBWTRHLEVBQVEzRyxpQkFHeklrSCxFQUFXLEVBQUtNLHNCQUFzQkgsRUFBdUJELEVBQW9CM0IsS0FHckY0QixFQUFzQkksUUFBVU4sRUFBbUJ2MEIsUUFDRCxJQUF2Q3UwQixFQUFtQk8sa0JBQzFCUCxFQUFtQk8sZ0JBQWtCLElBRXpDUCxFQUFtQk8sZ0JBQWdCOS9CLEtBQUt5L0IsR0FDeENDLEVBQVlILEVBQW1CdjBCLEdBQy9CczBCLEVBQVcsRUFBS00sc0JBQXNCSCxFQUF1QkYsRUFBb0IxQixLQUdyRnlCLEVBQVcsRUFLZixJQUFNUyxFQUFXLEdBQUgsT0FBTSxFQUFLNXFCLFNBQVgsWUFBdUIsRUFBS21pQixVQUUxQyxFQUFLMEksMEJBQTBCbEQsRUFBZXlDLEVBQW9CRCxFQUFVSSxFQUFXQyxFQUFhSSxJQXRDL0ZwcEMsRUFBSSxFQUFHQSxFQUFJMG9DLEVBQVMxb0MsSUFBSyxFQUF6QkEsR0F3RmIsT0FBTzhGLEtBQUt3akMsYUFBYXBDLE9BQVMzakMsRUFBV2s5QixFQUFVSSxZQUFZc0QsVyw0Q0FHakRvRixFQUFNQyxFQUFhdEMsR0FFckMsSUFBSXVDLEVBQWMsRUFDbEJGLEVBQUs3NUIsTUFBUSxJQUNiNjVCLEVBQUsxNEIsSUFBTSxFQUNYLElBQUk2NEIsRUFBYSxFQUNqQixPQUFRNWpDLEtBQUs4VCxXQUNULEtBQUssVUFBV3pCLFVBQVVDLGNBZXRCLE9BZEFzeEIsRUFBYUYsRUFBWXRCLFVBQ3pCcUIsRUFBS3RULE1BQU1obUIsUUFBUSxTQUFBc2pCLEdBQ2YsSUFBTW9XLEVBQVl6QyxFQUFRcm1DLElBQUkweUIsR0FBS2tPLGNBQ25DeUYsRUFBUXJtQyxJQUFJMHlCLEdBQUtpTyxVQUFZa0ksRUFDekJBLEVBQWFDLEVBQVlILEVBQVlyQixRQUFVc0IsSUFDL0NBLEVBQWNDLEVBQWFDLEVBQVlILEVBQVlyQixTQUVuRHVCLEVBQWFILEVBQUs3NUIsUUFDbEI2NUIsRUFBSzc1QixNQUFRZzZCLEdBRWJBLEVBQWFDLEVBQVlKLEVBQUsxNEIsTUFDOUIwNEIsRUFBSzE0QixJQUFNNjRCLEVBQWFDLEtBR3pCRixFQUNYLEtBQUssVUFBV3R4QixVQUFVMEIsWUFnQ3RCLE9BL0JBNnZCLEVBQWFGLEVBQVlyQixRQUN6QnFCLEVBQVlMLGdCQUFnQmw1QixRQUFRLFNBQUFoUSxRQUNQLElBQWRBLEVBQUVrb0MsUUFDTGxvQyxFQUFFa29DLFFBQVV1QixJQUNaQSxFQUFhenBDLEVBQUVrb0MsU0FHbkJsb0MsRUFBRWcyQixNQUFNaG1CLFFBQVEsU0FBQXNqQixHQUNaLFFBQTZDLElBQWxDa04sRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQXNCLENBQ3RELElBQU1xVyxFQUFXbkosRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxVQUFZZixFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2tPLGNBQ3JGbUksRUFBV0YsSUFDWEEsRUFBYUUsUUFPakNMLEVBQUt0VCxNQUFNaG1CLFFBQVEsU0FBQXNqQixHQUNmLElBQU1vVyxFQUFZekMsRUFBUXJtQyxJQUFJMHlCLEdBQUtrTyxjQUNuQ3lGLEVBQVFybUMsSUFBSTB5QixHQUFLaU8sVUFBWWtJLEVBQ3pCQSxFQUFhQyxFQUFZRixJQUN6QkEsRUFBY0UsR0FFZEQsRUFBYUgsRUFBSzc1QixRQUNsQjY1QixFQUFLNzVCLE1BQVFnNkIsR0FFYkEsRUFBYUMsRUFBWUosRUFBSzE0QixNQUM5QjA0QixFQUFLMTRCLElBQU02NEIsRUFBYUMsS0FHekJGLEssZ0RBSU90RCxFQUFleUMsRUFBb0JELEVBQVVJLEVBQVdDLEVBQWFhLEdBQXFDLElBQXJCQyxJQUFxQix5REFpQmhJLEdBZGtCLEtBQWRmLEdBQ0E1QyxFQUFjakYsT0FBT2p4QixRQUFRLFNBQUFoUSxHQUNyQkEsRUFBRW9VLEtBQU8wMEIsU0FDa0IsSUFBaEI5b0MsRUFBRThwQyxZQUNUOXBDLEVBQUU4cEMsVUFBWSxJQUVsQjlwQyxFQUFFOHBDLFVBQVUxZ0MsS0FBS3dnQyxRQUNhLElBQW5CNXBDLEVBQUUrcEMsZUFDVC9wQyxFQUFFK3BDLGFBQWUsSUFFckIvcEMsRUFBRStwQyxhQUFhM2dDLEtBQUsyL0IsV0FJRSxJQUF2QkosRUFBb0MsQ0FDM0MsSUF5RVlxQixFQXpFTnhpQyxFQUFPM0IsS0FFYnFnQyxFQUFjakYsT0FBT2p4QixRQUFRLFNBQUFoUSxHQUN6QixJQUFJaXFDLEVBQTBCdEIsRUFBbUJWLFVBU2pELFFBUnVDLElBQTVCZ0MsSUFDUEEsRUFBMEIsSUFDMUJ0QixFQUFtQjNTLE1BQU1obUIsUUFBUSxTQUFBc2pCLEdBQ3pCa04sRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxVQUFZMEksSUFDMUNBLEVBQTBCekosRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxtQkFJekMsSUFBaEJ2aEMsRUFBRWlvQyxXQUNULEdBQUlqb0MsRUFBRWlvQyxVQUFZZ0MsRUFBeUIsQ0FDdkMsSUFBSUMsRUFBZSxJQUNuQmxxQyxFQUFFZzJCLE1BQU1obUIsUUFBUSxTQUFBc2pCLEdBQ1prTixFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2lPLFdBQWFtSCxFQUN2Q2xJLEVBQVVhLFdBQVd6Z0MsSUFBSTB5QixHQUFLaU8sVUFBWTJJLElBQzFDQSxFQUFlMUosRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxXQUU3Q2YsRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxVQUFZZixFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2tPLGNBQWdCeGhDLEVBQUVrb0MsVUFDMUZsb0MsRUFBRWtvQyxRQUFVMUgsRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxVQUFZZixFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2tPLGVBRXBGeGhDLEVBQUVrb0MsUUFBVWhDLEVBQWNsRixtQkFDMUJrRixFQUFjbEYsaUJBQW1CaGhDLEVBQUVrb0MsU0FFdkMxSCxFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS21PLFlBQVl6eEIsUUFBUSxTQUFBeEwsR0FDOUNBLEVBQUUrOEIsV0FBYW1ILE1BR3ZCMW9DLEVBQUVpb0MsVUFBWWlDLFFBR2xCbHFDLEVBQUVnMkIsTUFBTWhtQixRQUFRLFNBQUFzakIsR0FDUmtOLEVBQVVhLFdBQVd6Z0MsSUFBSTB5QixHQUFLaU8sVUFBWTBJLElBQzFDekosRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxXQUFhbUgsRUFDdkNsSSxFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2lPLFVBQVlmLEVBQVVhLFdBQVd6Z0MsSUFBSTB5QixHQUFLa08sY0FBZ0IwRSxFQUFjbEYsbUJBQ3RHa0YsRUFBY2xGLGlCQUFtQlIsRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUtpTyxVQUFZZixFQUFVYSxXQUFXemdDLElBQUkweUIsR0FBS2tPLGVBRTdHaEIsRUFBVWEsV0FBV3pnQyxJQUFJMHlCLEdBQUttTyxZQUFZenhCLFFBQVEsU0FBQXhMLEdBQzlDQSxFQUFFKzhCLFdBQWFtSCxTQVEvQnhDLEVBQWMvRSxZQUFZMTZCLE9BQVMsR0FDbkN5L0IsRUFBYy9FLFlBQVlueEIsUUFBUSxTQUFBbTZCLEdBQzlCLEdBQUlBLElBQVUsR0FBTCxPQUFRM2lDLEVBQUsrVyxTQUFiLFlBQXlCL1csRUFBS2s1QixVQUFZLENBRy9DLElBRkEsSUFDSTBKLEVBREVDLEVBQWE3SixFQUFVOEQsV0FBVzFqQyxJQUFJdXBDLEdBRW5DcHFDLEVBQUksRUFBR3FSLEVBQU11M0IsRUFBbUJPLGdCQUFnQnppQyxPQUFRMUcsRUFBSXFSLEVBQUtyUixJQUFLLENBRTNFLElBREEsSUFBSXVxQyxFQUFVM0IsRUFBbUJPLGdCQUFnQm5wQyxHQUN4Q3F0QixFQUFJLEVBQUdtZCxFQUFPRixFQUFXcEosT0FBT3g2QixPQUFRMm1CLEVBQUltZCxFQUFNbmQsSUFDdkQsR0FBSWtkLEVBQVFsMkIsS0FBT2kyQixFQUFXcEosT0FBTzdULEdBQUdoWixHQUFJLENBQ3hDZzJCLEVBQXdCRSxFQUN4QixNQUdSLFFBQXFDLElBQTFCRixFQUNQLE1BR1I1aUMsRUFBSzRoQywwQkFBMEJpQixFQUFZRCxFQUF1QjFCLEVBQVUsR0FBSSxHQUFJLElBQUksV0FNakUsSUFBeEJ4QyxFQUFjbkIsT0FBeUI4RSxHQUMxQzNELEVBQWNuQixNQUFNMWlDLE9BQVNtK0IsRUFBVUksWUFBWXNELFVBRW5EMUQsRUFBVThELFdBQVd0MEIsUUFBUSxTQUFDaFAsRUFBT00sR0FDN0I0a0MsRUFBY25CLE1BQU0zaEMsU0FBV3BDLEVBQU1vVCxLQUNyQzQxQixFQUFTaHBDLEtBR2pCd0csRUFBSzRoQywwQkFBMEJZLEVBQVFyQixFQUFvQkQsRUFBVSxHQUFJLEdBQUksUSxtQ0FNaEZ6QixFQUFTZixHQU9sQixPQU5BcmdDLEtBQUtnN0IsU0FBUzJKLGdCQUFnQjNrQyxLQUFLeEcsTUFBTyxHQUFJLEVBQUc0bkMsR0FDakRwaEMsS0FBS3hHLEtBQUs2WSxVQUFZclMsS0FBSzhULFVBQzNCOVQsS0FBS3hHLEtBQUs2TyxPQUFTckksS0FBS3FJLE9BQ3hCckksS0FBS3hHLEtBQUswbEMsTUFBUWwvQixLQUFLay9CLE1BQ3ZCbC9CLEtBQUt4RyxLQUFLOHFDLE1BQVF0a0MsS0FBS3VPLEdBRWhCdk8sS0FBS3dqQyxhQUFhcEMsRUFBU2YsRUFBZTFGLEVBQVVJLFlBQVl1RCxXLG1DQUc5RDhDLEVBQVNmLEVBQWU3akMsR0FDakMsSUFBSW9vQyxFQUFjLElBTWxCLE9BTEF4RCxFQUFRajNCLFFBQVEsU0FBVWhQLEVBQU9rWSxHQUN6QmxZLEVBQU11Z0MsVUFBWWtKLElBQ2xCQSxFQUFjenBDLEVBQU11Z0MsYUFHeEJsL0IsSUFBU20rQixFQUFVSSxZQUFZc0QsUUFDeEJyK0IsS0FBSzZrQyxpQkFBaUJsSyxFQUFVMW5CLGVBRVAsSUFBbEJvdEIsRUFBZ0NyZ0MsS0FBSzhrQyxjQUFjLEVBQUcsRUFBR0YsRUFBYWpLLEVBQVUxbkIsVUFBWWpULEtBQUs4a0MsY0FBY3pFLEVBQWNuRixtQkFBb0JtRixFQUFjbEYsaUJBQWtCeUosRUFBYWpLLEVBQVUxbkIsWSwrQ0FJck04eEIsR0FDakJBLEVBQU9ySixVQUFZMTdCLEtBQUtrN0IscUJBQ3hCbDdCLEtBQUtrN0IsbUJBQXFCNkosRUFBT3JKLFdBRWpDcUosRUFBT3JKLFVBQVlxSixFQUFPcEosY0FBZ0IzN0IsS0FBS203QixtQkFDL0NuN0IsS0FBS203QixpQkFBbUI0SixFQUFPckosVUFBWXFKLEVBQU9wSixpQix1QkFucUJuRHB0QixRQUNxQixJQUFidk8sS0FBSzQ2QixXQUNNLElBQVByc0IsRUFDUHZPLEtBQUs0NkIsSUFBTXJzQixHQUVYdk8sS0FBSzQ2QixJQUFNLE1BQVFELEVBQVUrRCxPQUM3Qi9ELEVBQVUrRCxZLGVBUWxCLE9BQU8xK0IsS0FBSzQ2QixNLDBCQUdOc0UsUUFDZSxJQUFWQSxHQUEwQyxXQUFqQixFQUFPQSxLQUN2Q2wvQixLQUFLODZCLE9BQVNvRSxJLGVBS2xCLE9BQU9sL0IsS0FBSzg2QixZLGdDQTIzQnBCSCxFQUFVcUssYUFBZSxPQUN6QnJLLEVBQVUrRCxPQUFTLEVBQ25CL0QsRUFBVUksWUFBYyxDQUNwQnNELFFBQVMsVUFDVEMsUUFBUyxVQUViM0QsRUFBVXNLLFdBQWEsQ0FBQyxTQUFVLFFBQ2xDdEssRUFBVTRHLFlBQWMsQ0FBQyxJQUFLLElBQUssS0FBTSxLQUFNLGNBQWUsZUFBZ0IsYUFBYyxXQUFZLFFBQVMsU0FBVSxVQUFXLE9BQVEsU0FBVSxVQUFXLG1CQUFvQixxQkFDdkw1RyxFQUFVMW5CLFNBQVcsSUFBSXRGLElBQ3pCZ3RCLEVBQVV1SyxVQUFZLElBQUl2M0IsSUFDMUJndEIsRUFBVWhMLFNBQVcsR0FDckJnTCxFQUFVdm5CLE1BQVEsQ0FBQyxLQUFNLFdBQVksV0FBWSxVQUFXLFNBQVUsWUFBYSxTQUNuRnVuQixFQUFVYyxhQUFlLEVBQ3pCZCxFQUFVNkQsVUFBWSxJQUFJN3dCLElBQzFCZ3RCLEVBQVU4RCxXQUFhLElBQUk5d0IsSUFDM0JndEIsRUFBVTRDLFlBQWMsSUFBSTV2QixJQUM1Qmd0QixFQUFVYSxXQUFhLElBQUk3dEIsSUFDM0JndEIsRUFBVTRELGdCQUFrQixJQUFJNXdCLEksTUFxQ2pCZ3RCLEUsOERDditCZi8vQixPQUFPQyxlQUFlbkIsRUFBUyxhQUFjLENBQzNDeUIsT0FBTyxJQUVUekIsRUFBUTI2QixlQUFZLEVBRXBCLElBQUk4USxFQUFpQixFQUFRLEtBRTdCLFNBQVNDLEVBQW1CeE4sR0FBTyxPQU1uQyxTQUE0QkEsR0FBTyxHQUFJenlCLE1BQU0rUCxRQUFRMGlCLEdBQU0sQ0FBRSxJQUFLLElBQUkxOUIsRUFBSSxFQUFHdWEsRUFBTyxJQUFJdFAsTUFBTXl5QixFQUFJaDNCLFFBQVMxRyxFQUFJMDlCLEVBQUloM0IsT0FBUTFHLElBQU91YSxFQUFLdmEsR0FBSzA5QixFQUFJMTlCLEdBQU0sT0FBT3VhLEdBTm5INHdCLENBQW1Cek4sSUFJN0QsU0FBMEJ4cUIsR0FBUSxHQUFJblMsT0FBTytOLFlBQVlwTyxPQUFPd1MsSUFBa0QsdUJBQXpDeFMsT0FBT2tCLFVBQVVpRyxTQUFTMUgsS0FBSytTLEdBQWdDLE9BQU9qSSxNQUFNdUksS0FBS04sR0FKckZrNEIsQ0FBaUIxTixJQUV0RixXQUFnQyxNQUFNLElBQUk1NUIsVUFBVSxtREFGMEN1bkMsR0FVOUYsU0FBUy9RLEVBQWtCajNCLEVBQVFrM0IsR0FBUyxJQUFLLElBQUl2NkIsRUFBSSxFQUFHQSxFQUFJdTZCLEVBQU03ekIsT0FBUTFHLElBQUssQ0FBRSxJQUFJdzZCLEVBQWFELEVBQU12NkIsR0FBSXc2QixFQUFXNTVCLFdBQWE0NUIsRUFBVzU1QixhQUFjLEVBQU80NUIsRUFBVzdvQixjQUFlLEVBQVUsVUFBVzZvQixJQUFZQSxFQUFXNW9CLFVBQVcsR0FBTWxSLE9BQU9DLGVBQWUwQyxFQUFRbTNCLEVBQVdqNUIsSUFBS2k1QixJQUk3UyxTQUFTTSxFQUFnQmhnQixFQUFLdlosRUFBS04sR0FBaUssT0FBcEpNLEtBQU91WixFQUFPcGEsT0FBT0MsZUFBZW1hLEVBQUt2WixFQUFLLENBQUVOLE1BQU9BLEVBQU9MLFlBQVksRUFBTStRLGNBQWMsRUFBTUMsVUFBVSxJQUFrQmtKLEVBQUl2WixHQUFPTixFQUFnQjZaLEVBRTNNLElBQUlxZixFQUVKLFdBRUUsU0FBU0EsRUFBVXJRLElBWnJCLFNBQXlCOFEsRUFBVWxrQixHQUFlLEtBQU1ra0IsYUFBb0Jsa0IsR0FBZ0IsTUFBTSxJQUFJNVMsVUFBVSxxQ0FhNUcrMkIsQ0FBZ0IvMEIsS0FBTXEwQixHQUV0QlcsRUFBZ0JoMUIsS0FBTSxPQUFRLENBQzVCekYsR0FBRyxFQUNITCxFQUFHLEdBQ0hTLEVBQUcsR0FDSGlTLEVBQUcsS0FHTG9vQixFQUFnQmgxQixLQUFNLFdBQVksR0FFbENnMUIsRUFBZ0JoMUIsS0FBTSxXQUFZLEdBRWxDZzFCLEVBQWdCaDFCLEtBQU0sVUFBV3dsQyxLQUVqQ3hRLEVBQWdCaDFCLEtBQU0sVUFBV3dsQyxLQUVqQ3hRLEVBQWdCaDFCLEtBQU0sYUFBYSxHQUVuQ2cxQixFQUFnQmgxQixLQUFNLFlBQWEsQ0FBQyxFQUFHLElBRXZDZzFCLEVBQWdCaDFCLEtBQU0sWUFBYSxJQUUvQmdrQixHQUNGaGtCLEtBQUtvZCxNQUFNNEcsR0FqQ2pCLElBQXNCcFQsRUFBYTRrQixFQUFZQyxFQWtoQjdDLE9BbGhCb0I3a0IsRUFxQ1B5akIsRUFyQ2dDb0IsRUFtYXpDLENBQUMsQ0FDSGg2QixJQUFLLE1BQ0xOLE1BQU8sU0FBYTRrQixFQUFJQyxFQUFJakIsRUFBSUMsRUFBSXltQixFQUFPQyxFQUFnQkMsRUFBWXZsQixFQUFJQyxFQUFJdWxCLEdBRzdFLElBR0lDLEVBSEFDLEVBQWlCLElBQVY3bkMsS0FBS3VpQixHQUFXLElBQ3ZCWCxFQUFNNWhCLEtBQUt1aUIsR0FBSyxNQUFRaWxCLEdBQVMsR0FDakNyaUMsRUFBTSxHQUVONmIsRUFBUyxTQUFnQmhJLEVBQUdDLEVBQUcySSxHQUdqQyxNQUFPLENBQ0w1SSxFQUhNQSxFQUFJaFosS0FBSzJpQixJQUFJZixHQUFPM0ksRUFBSWpaLEtBQUt5aUIsSUFBSWIsR0FJdkMzSSxFQUhNRCxFQUFJaFosS0FBS3lpQixJQUFJYixHQUFPM0ksRUFBSWpaLEtBQUsyaUIsSUFBSWYsS0FPM0MsSUFBS2QsSUFBT0MsRUFDVixNQUFPLENBQUNlLEVBQUlDLEVBQUlJLEVBQUlDLEVBQUlELEVBQUlDLEdBRzlCLEdBQUt1bEIsRUF1Q0hHLEVBQUtILEVBQVUsR0FDZkksRUFBS0osRUFBVSxHQUNmL21CLEVBQUsrbUIsRUFBVSxHQUNmOW1CLEVBQUs4bUIsRUFBVSxPQTFDRCxDQUVkN2xCLEdBREE4bEIsRUFBSzVtQixFQUFPYyxFQUFJQyxHQUFLSCxJQUNiNUksRUFDUitJLEVBQUs2bEIsRUFBRzN1QixFQUVSa0osR0FEQXlsQixFQUFLNW1CLEVBQU9tQixFQUFJQyxHQUFLUixJQUNiNUksRUFDUm9KLEVBQUt3bEIsRUFBRzN1QixFQUNFalosS0FBSzJpQixJQUFJM2lCLEtBQUt1aUIsR0FBSyxJQUFNaWxCLEdBQ3pCeG5DLEtBQUt5aUIsSUFBSXppQixLQUFLdWlCLEdBQUssSUFBTWlsQixHQURuQyxJQUVJeHVCLEdBQUs4SSxFQUFLSyxHQUFNLEVBQ2hCbEosR0FBSzhJLEVBQUtLLEdBQU0sRUFDaEIyRixFQUFJL08sRUFBSUEsR0FBSzhILEVBQUtBLEdBQU03SCxFQUFJQSxHQUFLOEgsRUFBS0EsR0FFdENnSCxFQUFJLElBRU5qSCxHQURBaUgsRUFBSS9uQixLQUFLMmhCLEtBQUtvRyxHQUVkaEgsR0FBS2dILEdBR1AsSUFBSWlnQixFQUFNbG5CLEVBQUtBLEVBQ1htbkIsRUFBTWxuQixFQUFLQSxFQUNYOEwsR0FBSzRhLEdBQWtCQyxHQUFjLEVBQUksR0FBSzFuQyxLQUFLMmhCLEtBQUszaEIsS0FBS3dhLEtBQUt3dEIsRUFBTUMsRUFBTUQsRUFBTS91QixFQUFJQSxFQUFJZ3ZCLEVBQU1qdkIsRUFBSUEsSUFBTWd2QixFQUFNL3VCLEVBQUlBLEVBQUlndkIsRUFBTWp2QixFQUFJQSxLQUNwSTRILEVBQUtpTSxFQUFJL0wsRUFBSzdILEVBQUk4SCxHQUFNZSxFQUFLSyxHQUFNLEVBQ25DdEIsRUFBS2dNLEdBQUs5TCxFQUFLL0gsRUFBSThILEdBQU1pQixFQUFLSyxHQUFNLEVBQ3BDMGxCLEVBQUs5bkMsS0FBS2tvQyxNQUFNbm1CLEVBQUtsQixHQUFNRSxHQUMzQmduQixFQUFLL25DLEtBQUtrb0MsTUFBTTlsQixFQUFLdkIsR0FBTUUsR0FDL0IrbUIsRUFBS2htQixFQUFLbEIsRUFBSzVnQixLQUFLdWlCLEdBQUt1bEIsRUFBS0EsRUFDOUJDLEVBQUs1bEIsRUFBS3ZCLEVBQUs1Z0IsS0FBS3VpQixHQUFLd2xCLEVBQUtBLEVBQzlCRCxFQUFLLElBQU1BLEVBQWUsRUFBVjluQyxLQUFLdWlCLEdBQVN1bEIsR0FDOUJDLEVBQUssSUFBTUEsRUFBZSxFQUFWL25DLEtBQUt1aUIsR0FBU3dsQixHQUUxQkwsR0FBY0ksRUFBS0MsSUFDckJELEdBQW9CLEVBQVY5bkMsS0FBS3VpQixLQUdabWxCLEdBQWNLLEVBQUtELElBQ3RCQyxHQUFvQixFQUFWL25DLEtBQUt1aUIsSUFTbkIsSUFBSTRsQixFQUFLSixFQUFLRCxFQUVkLEdBQUk5bkMsS0FBS3dhLElBQUkydEIsR0FBTU4sRUFBTSxDQUN2QixJQUFJTyxFQUFRTCxFQUNSTSxFQUFRbG1CLEVBQ1JtbUIsRUFBUWxtQixFQUNaMmxCLEVBQUtELEVBQUtELEdBQVFILEdBQWNLLEVBQUtELEVBQUssR0FBSyxHQUMvQzNsQixFQUFLdkIsRUFBS0UsRUFBSzlnQixLQUFLMmlCLElBQUlvbEIsR0FDeEIzbEIsRUFBS3ZCLEVBQUtFLEVBQUsvZ0IsS0FBS3lpQixJQUFJc2xCLEdBQ3hCNWlDLEVBQU1wRCxLQUFLd21DLElBQUlwbUIsRUFBSUMsRUFBSXRCLEVBQUlDLEVBQUl5bUIsRUFBTyxFQUFHRSxFQUFZVyxFQUFPQyxFQUFPLENBQUNQLEVBQUlLLEVBQU94bkIsRUFBSUMsSUFHckZzbkIsRUFBS0osRUFBS0QsRUFDVixJQUFJVSxFQUFLeG9DLEtBQUsyaUIsSUFBSW1sQixHQUNkVyxFQUFLem9DLEtBQUt5aUIsSUFBSXFsQixHQUNkWSxFQUFLMW9DLEtBQUsyaUIsSUFBSW9sQixHQUNkWSxFQUFLM29DLEtBQUt5aUIsSUFBSXNsQixHQUNkNXFDLEVBQUk2QyxLQUFLNG9DLElBQUlULEVBQUssR0FDbEJVLEVBQUssRUFBSSxFQUFJL25CLEVBQUszakIsRUFDbEIyckMsRUFBSyxFQUFJLEVBQUkvbkIsRUFBSzVqQixFQUNsQjRyQyxFQUFLLENBQUNqbkIsRUFBSUMsR0FDVmluQixFQUFLLENBQUNsbkIsRUFBSyttQixFQUFLSixFQUFJMW1CLEVBQUsrbUIsRUFBS04sR0FDOUJTLEVBQUssQ0FBQzltQixFQUFLMG1CLEVBQUtGLEVBQUl2bUIsRUFBSzBtQixFQUFLSixHQUM5QlEsRUFBSyxDQUFDL21CLEVBQUlDLEdBSWQsR0FIQTRtQixFQUFHLEdBQUssRUFBSUQsRUFBRyxHQUFLQyxFQUFHLEdBQ3ZCQSxFQUFHLEdBQUssRUFBSUQsRUFBRyxHQUFLQyxFQUFHLEdBRW5CckIsRUFDRixNQUFPLENBQUNxQixFQUFJQyxFQUFJQyxHQUFJOTVCLE9BQU9qSyxHQU8zQixJQUZBLElBQUlna0MsRUFBUyxHQUVKbHRDLEVBQUksRUFBR210QyxHQUxoQmprQyxFQUFNLENBQUM2akMsRUFBSUMsRUFBSUMsR0FBSTk1QixPQUFPakssR0FBS3RELE9BQU9MLE1BQU0sS0FBSytLLElBQUksU0FBVXlNLEdBQzdELE9BQU8zRCxXQUFXMkQsTUFJS3JXLE9BQVExRyxFQUFJbXRDLEVBQUludEMsSUFDdkNrdEMsRUFBT2x0QyxHQUFLQSxFQUFJLEVBQUkra0IsRUFBTzdiLEVBQUlsSixFQUFJLEdBQUlrSixFQUFJbEosR0FBSTJsQixHQUFLM0ksRUFBSStILEVBQU83YixFQUFJbEosR0FBSWtKLEVBQUlsSixFQUFJLEdBQUkybEIsR0FBSzVJLEVBRzFGLE9BQU9td0IsTUE3Z0JvQjVSLEVBcUNULENBQUMsQ0FDdkIvNUIsSUFBSyxXQUNMTixNQUFPLFNBQWtCOGIsRUFBR0MsR0FDMUJsWCxLQUFLc25DLFNBQVdyd0IsRUFDaEJqWCxLQUFLdW5DLFNBQVdyd0IsRUFDaEJsWCxLQUFLd2xCLFFBQVV2bkIsS0FBS1MsSUFBSXNCLEtBQUt3bEIsUUFBU3ZPLEdBQ3RDalgsS0FBS3lsQixRQUFVeG5CLEtBQUtTLElBQUlzQixLQUFLeWxCLFFBQVN2TyxLQUV2QyxDQUNEemIsSUFBSyx3QkFDTE4sTUFBTyxTQUErQnFzQyxFQUFJam5DLEVBQUlvcUIsRUFBSThjLEdBQ2hELElBQUk5b0MsRUFBSSxHQUFLOG9DLEVBQUssRUFBSTljLEVBQUssRUFBSXBxQixFQUFLaW5DLEdBQ2hDNWxDLEVBQUksR0FBSytvQixFQUFLLEVBQUlwcUIsRUFBS2luQyxHQUN2Qmp0QyxFQUFJLEdBQUtnRyxFQUFLaW5DLEdBQ2Q5b0MsRUFBTThtQyxJQUNOaDJCLEdBQU0sSUFFVixHQUFJNU4sRUFBSUEsRUFBSSxFQUFJakQsRUFBSXBFLEdBQUssRUFBRyxDQUMxQixJQUFJcWxCLEVBQU8zaEIsS0FBSzJoQixLQUFLaGUsRUFBSUEsRUFBSSxFQUFJakQsRUFBSXBFLEdBQ3pCLENBQUMsR0FBSSxHQUFHaVEsSUFBSSxTQUFVazlCLEdBQ2hDLE9BQVFBLEVBQVE5bkIsRUFBT2hlLEdBQUssRUFBSWpELElBRTVCd0wsUUFBUSxTQUFVM1EsR0FDdEIsR0FBSUEsRUFBTyxHQUFLQSxFQUFPLEVBQUcsQ0FDeEIsSUFBSTJCLEVBQVE4QyxLQUFLdWpDLElBQUksRUFBSWhvQyxFQUFNLEdBQUtndUMsRUFBSyxFQUFJdnBDLEtBQUt1akMsSUFBSSxFQUFJaG9DLEVBQU0sR0FBS0EsRUFBTytHLEVBQUssR0FBSyxFQUFJL0csR0FBUUEsRUFBT0EsRUFBT214QixFQUFLMXNCLEtBQUt1akMsSUFBSWhvQyxFQUFNLEdBQUtpdUMsRUFDekkvb0MsRUFBTVQsS0FBS1MsSUFBSUEsRUFBS3ZELEdBQ3BCcVUsRUFBTXZSLEtBQUt1UixJQUFJQSxFQUFLclUsTUFPMUIsT0FGQXVELEVBQU1ULEtBQUtTLElBQUlBLEVBQUs4b0MsRUFBSUMsR0FDeEJqNEIsRUFBTXZSLEtBQUt1UixJQUFJQSxFQUFLZzRCLEVBQUlDLEdBQ2pCLENBQUMvb0MsRUFBSzhRLEtBRWQsQ0FDRC9ULElBQUssdUJBQ0xOLE1BQU8sU0FBOEJ5OEIsRUFBS2pRLEdBQ3hDLElBQUlya0IsRUFBUyxHQUtiLE9BSkFzMEIsRUFBSXp0QixRQUFRLFNBQVV5QyxFQUFHMVMsRUFBR3lFLEdBQ3RCekUsR0FBS3lFLEVBQUVpQyxPQUFTLEdBQ3BCMEMsRUFBT0MsS0FBS3FKLEdBQUssRUFBSSthLEdBQVNocEIsRUFBRXpFLEVBQUksR0FBS3l0QixLQUVwQ3JrQixJQUVSLENBQ0Q3SCxJQUFLLHVCQUNMTixNQUFPLFNBQThCd3NCLEdBQ25DLElBQUssSUFBSWdnQixFQUFPN2xDLFVBQVVsQixPQUFRZ25DLEVBQVMsSUFBSXppQyxNQUFNd2lDLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlFLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDcEdELEVBQU9DLEVBQU8sR0FBSy9sQyxVQUFVK2xDLEdBRy9CLElBQUlDLEVBQVM5bkMsS0FBSytuQyxxQkFBcUJILEVBQVFqZ0IsR0FDM0NxZ0IsRUFBU2hvQyxLQUFLK25DLHFCQUFxQkQsRUFBUW5nQixHQUMzQ3NnQixFQUFTam9DLEtBQUsrbkMscUJBQXFCQyxFQUFRcmdCLEdBQy9DLE1BQU8sQ0FBQ21nQixFQUFPLEdBQUlFLEVBQU8sR0FBSUMsRUFBTyxHQUFJRCxFQUFPLEdBQUlGLEVBQU8sR0FBSUYsRUFBTyxNQUV2RSxDQUNEbnNDLElBQUssU0FDTE4sTUFBTyxTQUFnQjhiLEVBQUdDLEdBQ25CbFgsS0FBS2tvQyxXQVdSbG9DLEtBQUt1a0IsT0FBTzFpQixNQUFNN0IsS0FBTW9sQyxFQUFtQnBsQyxLQUFLbW9DLFlBQ2hEbm9DLEtBQUt1a0IsT0FBT3ROLEVBQUdDLEdBQ2ZsWCxLQUFLb29DLFVBQVU3a0MsS0FBS3ZELEtBQUttb0MsYUFaekJub0MsS0FBS3FvQyxLQUFLOXRDLEdBQUksRUFDZHlGLEtBQUtxb0MsS0FBS251QyxFQUFJLENBQUMsQ0FBQyxFQUFHLElBQ25COEYsS0FBS3FvQyxLQUFLMXRDLEVBQUksR0FDZHFGLEtBQUtxb0MsS0FBS3o3QixFQUFJLENBQUMsQ0FBQ3FLLEVBQUdDLElBQ25CbFgsS0FBS3NuQyxTQUFXcndCLEVBQ2hCalgsS0FBS3VuQyxTQUFXcndCLEVBQ2hCbFgsS0FBS3dsQixRQUFVdk8sRUFDZmpYLEtBQUt5bEIsUUFBVXZPLEVBQ2ZsWCxLQUFLa29DLFdBQVksR0FPbkJsb0MsS0FBS21vQyxVQUFZLENBQUNseEIsRUFBR0MsS0FFdEIsQ0FDRHpiLElBQUssaUJBQ0xOLE1BQU8sU0FBd0I4YixFQUFHQyxHQUNoQ2xYLEtBQUtza0IsT0FBT3RrQixLQUFLc25DLFNBQVdyd0IsRUFBR2pYLEtBQUt1bkMsU0FBV3J3QixLQUVoRCxDQUNEemIsSUFBSyxTQUNMTixNQUFPLFNBQWdCOGIsRUFBR0MsR0FDeEJsWCxLQUFLcW9DLEtBQUtudUMsRUFBRXFKLEtBQUssQ0FBQyxFQUFHLElBQ3JCdkQsS0FBS3FvQyxLQUFLMXRDLEVBQUU0SSxLQUFLLENBQUMsRUFBRyxJQUNyQnZELEtBQUtxb0MsS0FBS3o3QixFQUFFckosS0FBSyxDQUFDMFQsRUFBR0MsSUFDckJsWCxLQUFLc29DLFNBQVNyeEIsRUFBR0MsS0FFbEIsQ0FDRHpiLElBQUssaUJBQ0xOLE1BQU8sU0FBd0I4YixFQUFHQyxHQUNoQ2xYLEtBQUt1a0IsT0FBT3ZrQixLQUFLc25DLFNBQVdyd0IsRUFBR2pYLEtBQUt1bkMsU0FBV3J3QixLQUVoRCxDQUNEemIsSUFBSyxlQUNMTixNQUFPLFNBQXNCOGIsR0FDM0JqWCxLQUFLdWtCLE9BQU90TixFQUFHalgsS0FBS3VuQyxZQUVyQixDQUNEOXJDLElBQUssdUJBQ0xOLE1BQU8sU0FBOEI4YixHQUNuQ2pYLEtBQUt5a0IsYUFBYXprQixLQUFLc25DLFNBQVdyd0IsS0FFbkMsQ0FDRHhiLElBQUssYUFDTE4sTUFBTyxTQUFvQitiLEdBQ3pCbFgsS0FBS3VrQixPQUFPdmtCLEtBQUtzbkMsU0FBVXB3QixLQUU1QixDQUNEemIsSUFBSyxxQkFDTE4sTUFBTyxTQUE0QitiLEdBQ2pDbFgsS0FBSzJrQixXQUFXM2tCLEtBQUt1bkMsU0FBV3J3QixLQUVqQyxDQUNEemIsSUFBSyxxQkFDTE4sTUFBTyxTQUE0Qm90QyxFQUFLQyxFQUFLQyxFQUFLQyxFQUFLenhCLEVBQUdDLEdBQ3hEbFgsS0FBS3FvQyxLQUFLbnVDLEVBQUVxSixLQUFLLENBQUNrbEMsRUFBTXh4QixFQUFHeXhCLEVBQU14eEIsSUFDakNsWCxLQUFLcW9DLEtBQUsxdEMsRUFBRTRJLEtBQUssQ0FBQ2dsQyxFQUFNdm9DLEtBQUtzbkMsU0FBVWtCLEVBQU14b0MsS0FBS3VuQyxXQUNsRHZuQyxLQUFLcW9DLEtBQUt6N0IsRUFBRXJKLEtBQUssQ0FBQzBULEVBQUdDLElBQ3JCbFgsS0FBS3dsQixRQUFVdm5CLEtBQUtTLElBQUltRCxNQUFNNUQsS0FBTSxDQUFDK0IsS0FBS3dsQixTQUFTblksT0FBTyszQixFQUFtQnBsQyxLQUFLMm9DLHNCQUFzQjNvQyxLQUFLc25DLFNBQVVpQixFQUFLRSxFQUFLeHhCLE1BQ2pJalgsS0FBS3lsQixRQUFVeG5CLEtBQUtTLElBQUltRCxNQUFNNUQsS0FBTSxDQUFDK0IsS0FBS3lsQixTQUFTcFksT0FBTyszQixFQUFtQnBsQyxLQUFLMm9DLHNCQUFzQjNvQyxLQUFLdW5DLFNBQVVpQixFQUFLRSxFQUFLeHhCLE1BQ2pJbFgsS0FBS3NvQyxTQUFTcnhCLEVBQUdDLEtBRWxCLENBQ0R6YixJQUFLLDZCQUNMTixNQUFPLFNBQW9Db3RDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUt6eEIsRUFBR0MsR0FDaEVsWCxLQUFLNmtCLG1CQUFtQjdrQixLQUFLc25DLFNBQVdpQixFQUFLdm9DLEtBQUt1bkMsU0FBV2lCLEVBQUt4b0MsS0FBS3NuQyxTQUFXbUIsRUFBS3pvQyxLQUFLdW5DLFNBQVdtQixFQUFLMW9DLEtBQUtzbkMsU0FBV3J3QixFQUFHalgsS0FBS3VuQyxTQUFXcndCLEtBRWhKLENBQ0R6YixJQUFLLHlCQUNMTixNQUFPLFNBQWdDMGpCLEVBQUlDLEVBQUk3SCxFQUFHQyxHQUNoRGxYLEtBQUtxb0MsS0FBS251QyxFQUFFcUosS0FBSyxDQUFDc2IsRUFBSzVILEVBQUc2SCxFQUFLNUgsSUFDL0JsWCxLQUFLcW9DLEtBQUsxdEMsRUFBRTRJLEtBQUssQ0FBQ3NiLEVBQUs3ZSxLQUFLc25DLFNBQVV4b0IsRUFBSzllLEtBQUt1bkMsV0FDaER2bkMsS0FBS3FvQyxLQUFLejdCLEVBQUVySixLQUFLLENBQUMwVCxFQUFHQyxJQUNyQmxYLEtBQUt3bEIsUUFBVXZuQixLQUFLUyxJQUFJbUQsTUFBTTVELEtBQU0sQ0FBQytCLEtBQUt3bEIsU0FBU25ZLE9BQU8rM0IsRUFBbUJwbEMsS0FBSzJvQyxzQkFBc0Izb0MsS0FBS3NuQyxTQUFVem9CLEVBQUlBLEVBQUk1SCxNQUMvSGpYLEtBQUt5bEIsUUFBVXhuQixLQUFLUyxJQUFJbUQsTUFBTTVELEtBQU0sQ0FBQytCLEtBQUt5bEIsU0FBU3BZLE9BQU8rM0IsRUFBbUJwbEMsS0FBSzJvQyxzQkFBc0Izb0MsS0FBS3VuQyxTQUFVem9CLEVBQUlBLEVBQUk1SCxNQUMvSGxYLEtBQUtzb0MsU0FBU3J4QixFQUFHQyxLQUVsQixDQUNEemIsSUFBSyxpQ0FDTE4sTUFBTyxTQUF3QzBqQixFQUFJQyxFQUFJN0gsRUFBR0MsR0FDeERsWCxLQUFLK2tCLHVCQUF1Qi9rQixLQUFLc25DLFNBQVd6b0IsRUFBSTdlLEtBQUt1bkMsU0FBV3pvQixFQUFJOWUsS0FBS3NuQyxTQUFXcndCLEVBQUdqWCxLQUFLdW5DLFNBQVdyd0IsS0FFeEcsQ0FDRHpiLElBQUssUUFDTE4sTUFBTyxTQUFlNGpCLEVBQUlDLEVBQUlrRyxFQUFldkMsRUFBY2ltQixFQUFXM3hCLEVBQUdDLEdBR3ZFLElBRkEsSUFBSTJ4QixFQUFVeFUsRUFBVW1TLElBQUl4bUMsS0FBS3NuQyxTQUFVdG5DLEtBQUt1bkMsU0FBVXhvQixFQUFJQyxFQUFJa0csRUFBZXZDLEVBQWNpbUIsRUFBVzN4QixFQUFHQyxHQUV0RzJ4QixFQUFRam9DLFFBQVUsR0FBRyxDQUMxQixJQUFJa29DLEVBQVVELEVBQVE1aUIsT0FBTyxFQUFHLEdBQ2hDam1CLEtBQUtxb0MsS0FBS251QyxFQUFFcUosS0FBSyxDQUFDdWxDLEVBQVEsR0FBS0EsRUFBUSxHQUFJQSxFQUFRLEdBQUtBLEVBQVEsS0FDaEU5b0MsS0FBS3FvQyxLQUFLMXRDLEVBQUU0SSxLQUFLLENBQUN1bEMsRUFBUSxHQUFLOW9DLEtBQUtzbkMsU0FBVXdCLEVBQVEsR0FBSzlvQyxLQUFLdW5DLFdBQ2hFdm5DLEtBQUtxb0MsS0FBS3o3QixFQUFFckosS0FBSyxDQUFDdWxDLEVBQVEsR0FBSUEsRUFBUSxLQUN0QzlvQyxLQUFLd2xCLFFBQVV2bkIsS0FBS1MsSUFBSW1ELE1BQU01RCxLQUFNLENBQUMrQixLQUFLd2xCLFNBQVNuWSxPQUFPKzNCLEVBQW1CcGxDLEtBQUsyb0Msc0JBQXNCM29DLEtBQUtzbkMsU0FBVXdCLEVBQVEsR0FBSUEsRUFBUSxHQUFJQSxFQUFRLE9BQ3ZKOW9DLEtBQUt5bEIsUUFBVXhuQixLQUFLUyxJQUFJbUQsTUFBTTVELEtBQU0sQ0FBQytCLEtBQUt5bEIsU0FBU3BZLE9BQU8rM0IsRUFBbUJwbEMsS0FBSzJvQyxzQkFBc0Izb0MsS0FBS3VuQyxTQUFVdUIsRUFBUSxHQUFJQSxFQUFRLEdBQUlBLEVBQVEsT0FDdko5b0MsS0FBS3NvQyxTQUFTUSxFQUFRLEdBQUlBLEVBQVEsT0FHckMsQ0FDRHJ0QyxJQUFLLGdCQUNMTixNQUFPLFNBQXVCNGpCLEVBQUlDLEVBQUlrRyxFQUFldkMsRUFBY2ltQixFQUFXM3hCLEVBQUdDLEdBQy9FbFgsS0FBS2lsQixNQUFNbEcsRUFBSUMsRUFBSWtHLEVBQWV2QyxFQUFjaW1CLEVBQVc1b0MsS0FBS3NuQyxTQUFXcndCLEVBQUdqWCxLQUFLdW5DLFNBQVdyd0IsS0FFL0YsQ0FDRHpiLElBQUssWUFDTE4sTUFBTyxXQUNMNkUsS0FBS3FvQyxLQUFLOXRDLEdBQUksSUFFZixDQUNEa0IsSUFBSyxVQUNMTixNQUFPLFdBQ0wsSUFBSXM3QixFQUFRejJCLEtBTVosS0FKSUEsS0FBS29vQyxVQUFVeG5DLFFBQVlaLEtBQUtzbkMsVUFBWXRuQyxLQUFLbW9DLFVBQVUsSUFBTW5vQyxLQUFLdW5DLFVBQVl2bkMsS0FBS21vQyxVQUFVLElBQ25Hbm9DLEtBQUt1a0IsT0FBTzFpQixNQUFNN0IsS0FBTW9sQyxFQUFtQnBsQyxLQUFLbW9DLFlBRzNDbm9DLEtBQUtvb0MsVUFBVXhuQyxRQUFRLENBQzVCLElBQUltb0MsRUFBVS9vQyxLQUFLb29DLFVBQVV2ekIsTUFDN0I3VSxLQUFLdWtCLE9BQU8xaUIsTUFBTTdCLEtBQU1vbEMsRUFBbUIyRCxJQUc3QyxLQUFPL29DLEtBQUtxb0MsS0FBSzF0QyxFQUFFaUcsT0FBU1osS0FBS3FvQyxLQUFLbnVDLEVBQUUwRyxRQUN0Q1osS0FBS3FvQyxLQUFLMXRDLEVBQUU0SSxLQUFLLENBQUMsRUFBRyxJQUd2QnZELEtBQUtxb0MsS0FBS3o3QixFQUFFekMsUUFBUSxTQUFVaFAsR0FDNUJBLEVBQU0sSUFBTXM3QixFQUFNalIsUUFDbEJycUIsRUFBTSxJQUFNczdCLEVBQU1oUixVQUVwQnpsQixLQUFLd2xCLFFBQVUsRUFDZnhsQixLQUFLeWxCLFFBQVUsSUFFaEIsQ0FDRGhxQixJQUFLLFFBQ0xOLE1BQU8sU0FBZTZvQixHQUNwQixJQUdJRCxFQUhBaWxCLEVBQVNocEMsTUFFUSxFQUFJbWxDLEVBQWVqaEIsVUFBVUYsR0FFbkM3WixRQUFRLFNBQVVpYSxHQUMvQixPQUFRQSxFQUFhQyxNQUNuQixJQUFLLElBQ0hOLEVBQW1CSyxFQUVuQjRrQixFQUFPMWtCLE9BQU9QLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FFbkQsTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT0MsZUFBZWxsQixFQUFpQjlNLEVBQUc4TSxFQUFpQjdNLEdBRTdELElBQUssSUFDSDZNLEVBQW1CSyxFQUVuQjRrQixFQUFPemtCLE9BQU9SLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FFbkQsTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT3hrQixlQUFlVCxFQUFpQjlNLEVBQUc4TSxFQUFpQjdNLEdBRTNELE1BRUYsSUFBSyxJQUNINk0sRUFBbUJLLEVBRW5CNGtCLEVBQU92a0IsYUFBYVYsRUFBaUI5TSxHQUVyQyxNQUVGLElBQUssSUFDSDhNLEVBQW1CSyxFQUVuQjRrQixFQUFPdGtCLHFCQUFxQlgsRUFBaUI5TSxHQUU3QyxNQUVGLElBQUssSUFDSDhNLEVBQW1CSyxFQUVuQjRrQixFQUFPcmtCLFdBQVdaLEVBQWlCN00sR0FFbkMsTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT3BrQixtQkFBbUJiLEVBQWlCN00sR0FFM0MsTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT25rQixtQkFBbUJkLEVBQWlCaEUsR0FBSWdFLEVBQWlCL0QsR0FBSStELEVBQWlCM0QsR0FBSTJELEVBQWlCMUQsR0FBSTBELEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FFbkosTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT2xrQiwyQkFBMkJmLEVBQWlCaEUsR0FBSWdFLEVBQWlCL0QsR0FBSStELEVBQWlCM0QsR0FBSTJELEVBQWlCMUQsR0FBSTBELEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FFM0osTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBT2prQix1QkFBdUJoQixFQUFpQmhFLEdBQUlnRSxFQUFpQi9ELEdBQUkrRCxFQUFpQjlNLEVBQUc4TSxFQUFpQjdNLEdBRTdHLE1BRUYsSUFBSyxJQUNINk0sRUFBbUJLLEVBRW5CNGtCLEVBQU9oa0IsK0JBQStCakIsRUFBaUJoRSxHQUFJZ0UsRUFBaUIvRCxHQUFJK0QsRUFBaUI5TSxFQUFHOE0sRUFBaUI3TSxHQUVySCxNQUVGLElBQUssSUFDSDZNLEVBQW1CSyxFQUVuQjRrQixFQUFPL2pCLE1BQU1sQixFQUFpQmhGLEdBQUlnRixFQUFpQi9FLEdBQUkrRSxFQUFpQm1CLGdCQUFpQm5CLEVBQWlCb0IsV0FBWXBCLEVBQWlCcUIsTUFBT3JCLEVBQWlCOU0sRUFBRzhNLEVBQWlCN00sR0FFbkwsTUFFRixJQUFLLElBQ0g2TSxFQUFtQkssRUFFbkI0a0IsRUFBTzNqQixjQUFjdEIsRUFBaUJoRixHQUFJZ0YsRUFBaUIvRSxHQUFJK0UsRUFBaUJtQixnQkFBaUJuQixFQUFpQm9CLFdBQVlwQixFQUFpQnFCLE1BQU9yQixFQUFpQjlNLEVBQUc4TSxFQUFpQjdNLEdBRTNMLE1BRUYsSUFBSyxJQUNMLElBQUssSUFDSDh4QixFQUFPMWpCLFlBRVAsTUFFRixRQUVFLE1BREE1TixRQUFRQyxNQUFNeU0sR0FDUixJQUFJbUIsTUFBTSx1REFJdkIsQ0FDRDlwQixJQUFLLFdBQ0xOLE1BQU8sU0FBa0J3c0IsR0FDdkIsSUFBSXVoQixFQUFTbHBDLEtBSWIsSUFBS21wQyxPQUFPQyxVQUFVemhCLEdBQ3BCLE1BQU0sSUFBSXBDLE1BQU0sOENBSWxCLEdBREF2bEIsS0FBSzZsQixZQUNEOEIsR0FBUyxHQUFiLENBQ0EsSUFBSTBoQixFQUFXLENBQ2I5dUMsRUFBR3lGLEtBQUtxb0MsS0FBSzl0QyxFQUNiTCxFQUFHLEdBQ0hTLEVBQUcsR0FDSGlTLEVBQUcsSUFFTDVNLEtBQUtxb0MsS0FBS3o3QixFQUFFekMsUUFBUSxTQUFVeUMsRUFBRzFTLEVBQUd5RSxHQUNsQyxHQUFJekUsR0FBSyxFQUdQLE9BRkFtdkMsRUFBU3o4QixFQUFFckosS0FBS3FKLFFBQ2hCeThCLEVBQVNudkMsRUFBRXFKLEtBQUsybEMsRUFBT2IsS0FBS251QyxFQUFFQSxJQVNoQyxJQUxBLElBQUlvdkMsRUFBU0osRUFBT2IsS0FBSzF0QyxFQUNyQjR1QyxFQUFTTCxFQUFPYixLQUFLbnVDLEVBQ3JCc3ZDLEVBQVMsQ0FBQzdxQyxFQUFFekUsRUFBSSxHQUFHLEdBQUlvdkMsRUFBT3B2QyxFQUFJLEdBQUcsR0FBS3lFLEVBQUV6RSxFQUFJLEdBQUcsR0FBSXF2QyxFQUFPcnZDLEdBQUcsR0FBSzBTLEVBQUUsR0FBSUEsRUFBRSxJQUM5RTY4QixFQUFTLENBQUM5cUMsRUFBRXpFLEVBQUksR0FBRyxHQUFJb3ZDLEVBQU9wdkMsRUFBSSxHQUFHLEdBQUt5RSxFQUFFekUsRUFBSSxHQUFHLEdBQUlxdkMsRUFBT3J2QyxHQUFHLEdBQUswUyxFQUFFLEdBQUlBLEVBQUUsSUFFekV2SixFQUFRLEVBQUdBLEVBQVFza0IsRUFBT3RrQixJQUFTLENBQzFDLElBQUlxbUMsRUFBWSxHQUFLL2hCLEVBQVF0a0IsRUFBUSxHQUVqQ3NtQyxFQUFjVCxFQUFPVSxxQkFBcUIvbkMsTUFBTXFuQyxFQUFRLENBQUNRLEdBQVdyOEIsT0FBTyszQixFQUFtQm9FLEtBRTlGSyxFQUFjWCxFQUFPVSxxQkFBcUIvbkMsTUFBTXFuQyxFQUFRLENBQUNRLEdBQVdyOEIsT0FBTyszQixFQUFtQnFFLEtBRTlGSyxFQUFPTixFQUFPLEdBQ2RPLEVBQU9KLEVBQVlLLFFBQVVGLEVBQzdCRyxFQUFPTixFQUFZLEdBQ25CTyxFQUFPUCxFQUFZSyxRQUFVQyxFQUM3QkUsRUFBT1YsRUFBTyxHQUNkVyxFQUFPUCxFQUFZRyxRQUFVRyxFQUM3QkUsRUFBT1IsRUFBWSxHQUNuQlMsRUFBT1QsRUFBWUcsUUFBVUssRUFFakNoQixFQUFTMXVDLEVBQUU0SSxLQUFLLENBQUN3bUMsRUFBTUssSUFDdkJmLEVBQVNudkMsRUFBRXFKLEtBQUssQ0FBQzJtQyxFQUFNSSxJQUN2QmpCLEVBQVN6OEIsRUFBRXJKLEtBQUssQ0FBQzBtQyxFQUFNSSxJQUN2QmIsRUFBU0csRUFDVEYsRUFBU0ksRUFHWCxJQUFJVSxFQUFNZixFQUFPUSxRQUNiUSxFQUFNaEIsRUFBT1EsUUFBVU8sRUFDdkJFLEVBQU1qQixFQUFPLEdBQ2JrQixFQUFNbEIsRUFBT1EsUUFBVVMsRUFDdkJFLEVBQU1sQixFQUFPTyxRQUNiWSxFQUFNbkIsRUFBT08sUUFBVVcsRUFDdkJFLEVBQU1wQixFQUFPLEdBQ2JxQixFQUFNckIsRUFBT08sUUFBVWEsRUFDM0J4QixFQUFTMXVDLEVBQUU0SSxLQUFLLENBQUNpbkMsRUFBS0ksSUFDdEJ2QixFQUFTbnZDLEVBQUVxSixLQUFLLENBQUNtbkMsRUFBS0ksSUFDdEJ6QixFQUFTejhCLEVBQUVySixLQUFLLENBQUNrbkMsRUFBS0ksTUFFeEI3cUMsS0FBS3FvQyxLQUFPZ0IsRUFDWnJwQyxLQUFLNmxCLGdCQWphbUUyTyxFQUFrQjVqQixFQUFZOVUsVUFBVzA1QixHQUFpQkMsR0FBYWpCLEVBQWtCNWpCLEVBQWE2a0IsR0FraEIzS3BCLEVBNWdCVCxHQStnQkEzNkIsRUFBUTI2QixVQUFZQSxHLGdCQzFpQnBCLElBQUkwVyxFQUFNLEVBQVEsS0FDZEMsRUFBYyxFQUFRLEtBMkIxQnJ4QyxFQUFPRCxRQXpCUCxTQUFZdXhDLEVBQVNDLEVBQUs3aUMsR0FDeEIsSUFBSW5PLEVBQUlneEMsR0FBTzdpQyxHQUFVLEVBRUYsaUJBQWIsSUFDUjZpQyxFQUFrQixXQUFaRCxFQUF1QixJQUFJOWxDLE1BQU0sSUFBTSxLQUM3QzhsQyxFQUFVLE1BSVosSUFBSUUsR0FGSkYsRUFBVUEsR0FBVyxJQUVGNTdCLFNBQVc0N0IsRUFBUUYsS0FBT0EsS0FPN0MsR0FKQUksRUFBSyxHQUFnQixHQUFWQSxFQUFLLEdBQWEsR0FDN0JBLEVBQUssR0FBZ0IsR0FBVkEsRUFBSyxHQUFhLElBR3pCRCxFQUNGLElBQUssSUFBSTdELEVBQUssRUFBR0EsRUFBSyxLQUFNQSxFQUMxQjZELEVBQUloeEMsRUFBSW10QyxHQUFNOEQsRUFBSzlELEdBSXZCLE9BQU82RCxHQUFPRixFQUFZRyxLLDZCQ1Y1QixTQUFTQyxFQUF1QjloQixFQUFLOXZCLEdBRW5DLE9BQU9BLEVBQUs2eEMsZUFBZUMsVUFBVUMsU0FBU2ppQixFQUFJK2hCLGdCQXlGcEQsU0FBU0csRUFBc0J2MEIsRUFBR0MsR0FJaEMsSUFIQUQsRUFBSWhaLEtBQUt3YSxJQUFJeEIsR0FDYkMsRUFBSWpaLEtBQUt3YSxJQUFJdkIsR0FFTkEsR0FBRyxDQUNSLElBQUk5YixFQUFJOGIsRUFDUkEsRUFBSUQsRUFBSUMsRUFDUkQsRUFBSTdiLEVBR04sT0FBTzZiLEVBbEhUcmMsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUMzQ3lCLE9BQU8sSUFFVHpCLEVBQVEweEMsdUJBQXlCQSxFQUNqQzF4QyxFQUFROGlDLGVBY1IsU0FBd0JsVCxHQUN0QixJQUFJbWlCLEVBQVVuaUIsRUFFZCxLQUNNbWlCLEVBQVFDLHlCQUF5QjlWLG9CQUNuQzZWLEVBQVVBLEVBQVFDLGNBTXRCLElBQUlDLEVBQVVQLEVBQXVCOWhCLEVBQUttaUIsR0FDdENHLEVBQVV0aUIsRUFBSXNJLFVBRWxCLE1BRGlCLENBQUMrWixFQUFRdHRDLEVBQUl1dEMsRUFBUTMwQixFQUFHMDBCLEVBQVEzc0MsRUFBSTRzQyxFQUFRMTBCLEVBQUcwMEIsRUFBUS9aLE1BQVEsRUFBRytaLEVBQVEvVyxPQUFTLElBMUJ0R243QixFQUFRbXlDLGFBOEJSLFNBQXNCQyxHQWlCcEIsT0FmWTNtQyxNQUFNckosVUFBVWtHLE1BQU0zSCxLQUFLeXhDLEVBQU9DLHFCQUFxQixLQUFNLEdBQ25EaGlDLE9BQU8sU0FBVWlpQyxHQUNyQyxHQUFJQSxFQUFLQyxnQkFFUCxJQUFLLElBQUkveEMsRUFBSSxFQUFHQSxFQUFJOHhDLEVBQUtFLFdBQVd0ckMsT0FBUTFHLElBQzFDLEdBQW1DLEdBQS9COHhDLEVBQUtFLFdBQVdoeUMsR0FBR2djLFNBR3JCLE9BQU8sRUFLYixPQUFPLEtBNUNYeGMsRUFBUXl5QyxrQkFpRFIsU0FBMkI3aUIsR0FDekIsSUFDSWh0QixFQURTNFQsU0FBU2tULGNBQWMsVUFDbkJncEIsV0FBVyxNQUV4QkMsRUFEZ0JDLGlCQUFpQmhqQixHQUNKaWpCLEtBR2pDLE9BRkFqd0MsRUFBSWl3QyxLQUFPRixFQUNNL3ZDLEVBQUlrd0MsWUFBWSxVQUNmQywwQkFBNEIsR0F2RGhEL3lDLEVBQVFnekMsY0EwRFIsU0FBdUJsd0MsR0FDckIsT0FBUUEsR0FDTixJQUFLLFNBQ0gsT0FBTyxFQUVULElBQUssT0FDSCxPQUFPLEVBRVQsUUFDRSxPQUFPLElBbEViOUMsRUFBUWl6QyxlQXNFUixTQUF3Qm53QyxHQUN0QixPQUFRQSxHQUNOLElBQUssUUFDSCxPQUFPLEVBRVQsSUFBSyxRQUNILE9BQU8sRUFFVCxRQUNFLE9BQU8sSUE5RWI5QyxFQUFRa3pDLGlCQWtGUixTQUEwQnB3QyxHQUN4QixPQUFRQSxHQUNOLElBQUssU0FDSCxPQUFPLEVBRVQsSUFBSyxNQUNILE9BQU8sRUFFVCxRQUNFLE9BQU8sSUExRmI5QyxFQUFROHhDLHNCQUF3QkEsRUFDaEM5eEMsRUFBUW16QyxvQkEwR1IsU0FBNkI1MUIsRUFBR0MsR0FDOUIsT0FBUUQsR0FBTUMsRUFBUWpaLEtBQUt3YSxJQUFJeEIsRUFBSUMsRUFBSXMwQixFQUFzQnYwQixFQUFHQyxJQUE5QyxJLHdJQ3hIcEIsaUVBQ0EsMkRBQ0EsbUNBQ0EsaUNBQ0EsOEIsZzBDQUVNNDFCLFcsc0JBQ0Ysc0JBQWMsK0NBQ1YseUdBQ0twMEIsU0FBVyxFQUNoQixFQUFLcTBCLFFBQVUsR0FDZixFQUFLQyxNQUFRRixXQUFXN3pCLFlBQVl5a0IsT0FDcEMsRUFBS3RCLGNBQWdCLEdBQ3JCLEVBQUtsSSxRQUFVNFksV0FBV0csV0FBV0MsV0FDckMsRUFBS0MsVUFBWSxFQUNqQixFQUFLelIsVUFDTCxFQUFLcDdCLFVBQVksR0FDakIsRUFBSzhzQyxjQVZLLEUsbUdBNERIdDBCLEdBQVksV0FDbkI5WSxLQUFLMFksU0FBV0ksRUFBV0osU0FDM0IxWSxLQUFLeEQsS0FBT3NjLEVBQVd0YyxLQUN2QndELEtBQUtvOEIsY0FBZ0J0akIsRUFBV3NqQixjQUNoQ3A4QixLQUFLbzJCLGNBQTBDLElBQXhCdGQsRUFBV3NkLFNBQTJCLFNBQUE5QixTQUFTK0IsTUFBUXZkLEVBQVdzZCxTQUN6RnAyQixLQUFLOFQsVUFBWWdGLEVBQVdoRixVQUM1QjlULEtBQUtxSSxPQUFTeVEsRUFBV3UwQixNQUN6QnJ0QyxLQUFLNjdCLFNBQVcvaUIsRUFBVytpQixTQUMzQjc3QixLQUFLcTlCLE9BQVN2a0IsRUFBV3VrQixPQUN6QnI5QixLQUFLb3RDLGNBQWdCdDBCLEVBQVdzMEIsbUJBR0ksSUFBekJ0MEIsRUFBV3hZLFdBQ2xCd1ksRUFBV3hZLFVBQVU2SixRQUFRLFNBQUNvTSxHQUMxQixJQUFJKzJCLEVBQVUsQ0FDVnhSLFNBQVV2bEIsRUFBS3VsQixTQUNmcHVCLEtBQU02SSxFQUFLN0ksS0FDWGt2QixHQUFJcm1CLEVBQUtxbUIsSUFFYixFQUFLdDhCLFVBQVVpRCxLQUFLK3BDLE8sZ0VBS1gvNkIsV0FBd0IsZ0JBQWJDLE9BQWEsdURBQUosR0FDUixpQkFBbEJ4UyxLQUFLNjdCLGNBQ2dDLElBQWpDdHBCLFVBQVV4WCxJQUFJaUYsS0FBSzY3QixVQUVZLElBQWxDNzdCLEtBQUs2N0IsU0FBU3p4QixRQUFRLFNBQ3RCcEssS0FBSzY3QixTQUFXNzdCLEtBQUs2N0IsU0FBU3BwQixVQUFVLEVBQUd6UyxLQUFLNjdCLFNBQVNqN0IsT0FBUyxHQUFHNlIsVUFBVSxHQUMvRUYsVUFBVXBJLFFBQVEsU0FBQ2hQLEVBQU9NLEVBQUsrTyxHQUN2QixPQUFLcXhCLFNBQVN2eEIsU0FBUzdPLEtBQ0YsaUJBQVZOLEVBQ1AsT0FBSzBnQyxTQUFXLE9BQUtBLFNBQVNyN0IsUUFBUSxJQUFJb1IsT0FBT25XLEVBQUssTUFBTyxHQUFLTixHQUVsRXFYLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssd0RBQXlEQyxRQUFTLGVBQWlCLE9BQUtpcEIsU0FBU3I3QixRQUFRLE1BQU8sSUFBTSxRQUlsSyxNQUFBcVMsVUFBVUMsY0FBYzlTLEtBQUs2N0IsU0FBVXRwQixXQUN2Q3ZTLEtBQUs2N0IsU0FBVzlvQixLQUFLL1MsS0FBSzY3QixVQUUxQnJwQixPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLGtCQUFtQkMsUUFBUyxlQUFpQjVTLEtBQUs2N0IsU0FBU3I3QixRQUFRLE1BQU8sSUFBTSxNQUd4SGdTLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssNkNBQThDQyxRQUFTLGVBQWlCNVMsS0FBSzY3QixTQUFTcjdCLFFBQVEsTUFBTyxJQUFNLEtBR3ZHLGlCQUFqQytSLFVBQVV4WCxJQUFJaUYsS0FBSzY3QixVQUMxQjc3QixLQUFLNjdCLFNBQVd0cEIsVUFBVXhYLElBQUlpRixLQUFLNjdCLFVBRW5DcnBCLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssd0RBQXlEQyxRQUFTLGVBQWlCNVMsS0FBSzY3QixTQUFTcjdCLFFBQVEsTUFBTyxJQUFNLEtBRzNKUixLQUFLNjdCLFVBQXFDLFdBQXpCLFFBQU83N0IsS0FBSzY3QixXQUNLLGlCQUE5Qjc3QixLQUFLNjdCLFNBQVMrRSxtQkFDbUMsSUFBN0NydUIsVUFBVXhYLElBQUlpRixLQUFLNjdCLFNBQVMrRSxhQUVlLElBQTlDNWdDLEtBQUs2N0IsU0FBUytFLFlBQVl4MkIsUUFBUSxTQUNsQ3BLLEtBQUs2N0IsU0FBUytFLFlBQWM1Z0MsS0FBSzY3QixTQUFTK0UsWUFBWW51QixVQUFVLEVBQUd6UyxLQUFLNjdCLFNBQVMrRSxZQUFZaGdDLE9BQVMsR0FBRzZSLFVBQVUsR0FDbkhGLFVBQVVwSSxRQUFRLFNBQUNoUCxFQUFPTSxFQUFLK08sR0FDdkIsT0FBS3F4QixTQUFTK0UsWUFBWXQyQixTQUFTN08sS0FDZCxpQkFBVk4sRUFDUCxPQUFLMGdDLFNBQVMrRSxZQUFjLE9BQUsvRSxTQUFTK0UsWUFBWXBnQyxRQUFRLElBQUlvUixPQUFPblcsRUFBSyxNQUFPLEdBQUtOLEdBRTFGcVgsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyx3REFBeURDLFFBQVMsa0JBQW9CLE9BQUtpcEIsU0FBUytFLFlBQVlwZ0MsUUFBUSxNQUFPLElBQU0sUUFJakwsTUFBQXFTLFVBQVVDLGNBQWM5UyxLQUFLNjdCLFNBQVMrRSxZQUFhcnVCLFdBQ25EdlMsS0FBSzY3QixTQUFTK0UsWUFBYzd0QixLQUFLL1MsS0FBSzY3QixTQUFTK0UsYUFFL0NwdUIsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyxrQkFBbUJDLFFBQVMsa0JBQW9CNVMsS0FBSzY3QixTQUFTK0UsWUFBWXBnQyxRQUFRLE1BQU8sSUFBTSxNQUd2SWdTLE9BQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssNkNBQThDQyxRQUFTLGtCQUFvQjVTLEtBQUs2N0IsU0FBUytFLFlBQVlwZ0MsUUFBUSxNQUFPLElBQU0sS0FHMUcsaUJBQTdDK1IsVUFBVXhYLElBQUlpRixLQUFLNjdCLFNBQVMrRSxhQUNuQzVnQyxLQUFLNjdCLFNBQVMrRSxZQUFjcnVCLFVBQVV4WCxJQUFJaUYsS0FBSzY3QixTQUFTK0UsYUFFeERwdUIsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSywyREFBNERDLFFBQVMsa0JBQW9CNVMsS0FBSzY3QixTQUFTK0UsWUFBWXBnQyxRQUFRLE1BQU8sSUFBTSxRLHlCQTlIdkwrc0MsUUFDYSxJQUFQQSxJQUNIM3lDLE9BQU91TCxLQUFLMm1DLFdBQVc3ekIsYUFBYTNPLFNBQVNpakMsR0FDN0N2dEMsS0FBS2d0QyxNQUFRTyxFQUViQyxNQUFNLDJDLGVBTWQsT0FBT3h0QyxLQUFLZ3RDLFEsMkJBR0xTLFFBQ1csSUFBUEEsSUFDSDd5QyxPQUFPdUwsS0FBSzJtQyxXQUFXRyxZQUFZM2lDLFNBQVNtakMsR0FDNUN6dEMsS0FBS2swQixRQUFVdVosRUFFZkQsTUFBTSw2QyxlQU1kLE9BQU94dEMsS0FBS2swQixVLDZCQUdId1osR0FDVyxpQkFBVEEsRUFDUDF0QyxLQUFLbXRDLFVBQVlsdkMsS0FBS2lFLE1BQU13ckMsR0FBUSxJQUFPLHFCQUFXcjVCLGNBQWdCLElBQU8scUJBQVdBLFlBQ2pFLGlCQUFUcTVCLEdBQXFDLFdBQWhCLFFBQU9BLEtBQzFDMXRDLEtBQUttdEMsVUFBWU8sSSxlQUtyQixPQUFPMXRDLEtBQUttdEMsYSx5Q0FnR1NRLEdBQTZCLFdBQWJuN0IsRUFBYSx1REFBSixHQUU5Q3hTLEtBQUs0dEMsWUFBWTdULFFBQ2pCNFQsRUFBZXhqQyxRQUFRLFNBQUF4TCxHQUNkQSxFQUFFbEUsV0FBMEIsSUFBWGtFLEVBQUVsRSxPQUNwQmtFLEVBQUVsRSxLQUFPLElBRWIsRUFBS216QyxZQUFZMWxDLElBQUl2SixFQUFFbEUsS0FBTWtFLEtBR2pDcUIsS0FBSzR0QyxZQUFZempDLFFBQVEsU0FBQzBqQyxFQUFhQyxHQUNuQyxJQUFNQyxFQUFhRixFQUFZRyxPQUMvQixHQUFJRCxRQUFvQyxJQUFmQSxFQUE0QixDQUNqRCxJQUFNRSxFQUFhLEVBQUtMLFlBQVk3eUMsSUFBSWd6QyxRQUNkLElBQWZFLEdBQ1ByekMsT0FBT3VMLEtBQUs4bkMsR0FBWTlqQyxRQUFRLFNBQUEyZ0IsR0FDbEIsU0FBTkEsUUFBMEMsSUFBbkIraUIsRUFBWS9pQixLQUNuQytpQixFQUFZL2lCLEdBQUttakIsRUFBV25qQixhQUc3QitpQixFQUFZRyxPQUNuQixFQUFLSixZQUFZMWxDLElBQUk0bEMsRUFBYUQsSUFFbENyN0IsRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyxzQ0FBdUNDLFFBQVMsYUFBZW03QixFQUFhLFUseUNBTXRHajFCLEdBQXlCLElBQWJ0RyxFQUFhLHVEQUFKLEdBQzNDLEdBQUlzRyxFQUFXazFCLGFBQXVDLElBQXRCbDFCLEVBQVdrMUIsT0FBd0IsQ0FDL0QsSUFBTUMsRUFBYWp1QyxLQUFLNHRDLFlBQVk3eUMsSUFBSStkLEVBQVdrMUIsUUFDbkQsWUFBMEIsSUFBZkMsR0FDUHJ6QyxPQUFPdUwsS0FBSzhuQyxHQUFZOWpDLFFBQVEsU0FBQTJnQixHQUNsQixTQUFOQSxRQUF5QyxJQUFsQmhTLEVBQVdnUyxLQUNsQ2hTLEVBQVdnUyxHQUFLbWpCLEVBQVduakIsYUFHNUJoUyxFQUFXazFCLE9BQ1hsMUIsSUFFUHRHLEVBQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssc0NBQXVDQyxRQUFTLGFBQWVrRyxFQUFXazFCLE9BQVMsS0FDaEhsMUIsR0FHZixPQUFPQSxJLDhDQU1vQkEsRUFBWUQsRUFBZUgsRUFBVTRYLEVBQWM4UCxHQUFzQix3REFDcEcxb0IsUUFBUStCLElBQUkseURBQTBEWCxFQUFZRCxFQUFlSCxFQUFVMG5CLEdBSzNHLElBQUk4TixFQUFnQixHQXVEcEIsSUExREFwMUIsRUFBYTlZLEtBQUttdUMsbUJBQW1CcjFCLElBMER0QnRjLE9BQVNzd0MsV0FBVzd6QixZQUFZbTFCLFdBQVksQ0FDdkQsSUFBSTlNLEVBQVMsQ0FDVDVvQixTQUFVSSxFQUFXSixTQUNyQjVFLFVBQVdnRixFQUFXaEYsVUFDdEJ6TCxPQUFReVEsRUFBV3pRLE9BQ25CZzFCLE9BQVF2a0IsRUFBV3VrQixPQUNuQnhCLGNBQXlDLElBQXhCL2lCLEVBQVcraUIsU0FBMkIscUJBQVd4bkIsV0FBYXlFLEVBQVcraUIsU0FDMUZyL0IsS0FBTXN3QyxXQUFXN1EsY0FBY3RGLEtBQy9CeVcsY0FBZXQwQixFQUFXdGMsTUFJOUIsT0FBUXNjLEVBQVd0YyxNQUNmLEtBQUtzd0MsV0FBVzd6QixZQUFZeWtCLE9BQ3hCNEQsRUFBT3pGLFNBQVcsSUFBTyxxQkFBV3huQixXQUNwQ2l0QixFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9CZ1MsS0FDdEQvTSxFQUFPOWtDLEtBQU9zd0MsV0FBVzdRLGNBQWNyTCxLQUN2QzBRLEVBQU9oaEMsVUFBWSxDQUNmLENBQ0l3N0IsU0FBVSxVQUNWcHVCLEtBQU0sRUFDTmt2QixHQUFJLElBR1osTUFDSixLQUFLa1EsV0FBVzd6QixZQUFZcTFCLFVBQ3hCaE4sRUFBT3pGLFNBQVcsSUFBTyxxQkFBV3huQixXQUNwQ2l0QixFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9CZ1MsS0FDdEQvTSxFQUFPOWtDLEtBQU9zd0MsV0FBVzdRLGNBQWNyTCxLQUN2QzBRLEVBQU9oaEMsVUFBWSxDQUNmLENBQ0l3N0IsU0FBVSxVQUNWcHVCLEtBQU0sRUFDTmt2QixHQUFJLElBR1osTUFDSixLQUFLa1EsV0FBVzd6QixZQUFZbzFCLEtBQ3hCL00sRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQmdTLEtBQ3REL00sRUFBTzlrQyxLQUFPc3dDLFdBQVc3USxjQUFjckwsS0FDdkMwUSxFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFVBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVlzMUIsUUFDeEJqTixFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9CZ1MsS0FDdEQvTSxFQUFPOWtDLEtBQU9zd0MsV0FBVzdRLGNBQWNyTCxLQUN2QzBRLEVBQU9oaEMsVUFBWSxDQUFDLENBQ2hCdzdCLFNBQVUsVUFDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUVSLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWXUxQixLQUN4QmxOLEVBQU85a0MsS0FBT3N3QyxXQUFXN1EsY0FBY3JMLEtBQ3ZDMFEsRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQm1TLEtBQ3REbE4sRUFBT2hoQyxVQUFZLENBQUMsQ0FDaEJ3N0IsU0FBVSxVQUNWcHVCLEtBQU0sRUFDTmt2QixHQUFJLElBRVIsTUFDSixLQUFLa1EsV0FBVzd6QixZQUFZdzFCLE9BQ3hCbk4sRUFBTzlrQyxLQUFPc3dDLFdBQVc3USxjQUFjckwsS0FDdkMwUSxFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9CbVMsS0FDdERsTixFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFVBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVl5MUIsV0FDeEJwTixFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9CbUIsS0FDdEQ4RCxFQUFPbEwsU0FBVyxTQUFBOUIsU0FBU3FhLFlBQzNCck4sRUFBT2hoQyxVQUFZLENBQUMsQ0FDaEJ3N0IsU0FBVSxTQUNWcHVCLEtBQU0sR0FDTmt2QixHQUFJLElBRVIsTUFDSixLQUFLa1EsV0FBVzd6QixZQUFZMjFCLGVBQ3hCdE4sRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQm1CLEtBQ3REOEQsRUFBT2xMLFNBQVcsU0FBQTlCLFNBQVNxYSxZQUMzQnJOLEVBQU9oaEMsVUFBWSxDQUFDLENBQ2hCdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUVSLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWTQxQixRQUN4QnZOLEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JtQixLQUN0RDhELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTK0IsTUFDM0JpTCxFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFNBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVk2MUIsa0JBQ3hCeE4sRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQm1CLEtBQ3REOEQsRUFBT2xMLFNBQVcsU0FBQTlCLFNBQVMrQixNQUMzQmlMLEVBQU9oaEMsVUFBWSxDQUFDLENBQ2hCdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUVSLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWTgxQixTQUN4QnpOLEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JtQixLQUN0RDhELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTK0IsTUFDM0JpTCxFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFNBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVkrMUIsaUJBQ3hCMU4sRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQm1CLEtBQ3REOEQsRUFBT2xMLFNBQVcsU0FBQTlCLFNBQVMrQixNQUMzQmlMLEVBQU9oaEMsVUFBWSxDQUFDLENBQ2hCdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUVSLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWWcyQixVQUN4QjNOLEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JtQixLQUN0RDhELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTcWEsWUFDM0JyTixFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFNBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVlpMkIsZ0JBQ3hCNU4sRUFBT2xGLGNBQWdCMFEsV0FBV3pRLG9CQUFvQm1CLEtBQ3REOEQsRUFBT2xMLFNBQVcsU0FBQTlCLFNBQVNxYSxZQUMzQnJOLEVBQU9oaEMsVUFBWSxDQUFDLENBQ2hCdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUVSLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWTBrQixPQUN4QjJELEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JzQixPQUN0RDJELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTK0IsTUFDM0JpTCxFQUFPaGhDLFVBQVksQ0FDZixDQUNJdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxHQUVSLENBQ0lkLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUdaLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWWsyQixVQUN4QjdOLEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JzQixPQUN0RDJELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTK0IsTUFDM0JpTCxFQUFPaGhDLFVBQVksQ0FDZixDQUNJdzdCLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxHQUVSLENBQ0lkLFNBQVUsU0FDVnB1QixLQUFNLEVBQ05rdkIsR0FBSSxJQUdaLE1BQ0osS0FBS2tRLFdBQVc3ekIsWUFBWTRrQixNQUN4QnlELEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0J3QixNQUN0RHlELEVBQU9sTCxTQUFXLFNBQUE5QixTQUFTcWEsWUFDM0JyTixFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLFVBQ1ZwdUIsS0FBTSxFQUNOa3ZCLEdBQUksSUFFUixNQUNKLEtBQUtrUSxXQUFXN3pCLFlBQVltMkIsU0FDeEI5TixFQUFPbEYsY0FBZ0IwUSxXQUFXelEsb0JBQW9Cd0IsTUFDdER5RCxFQUFPbEwsU0FBVyxTQUFBOUIsU0FBU3FhLFlBQzNCck4sRUFBT2hoQyxVQUFZLENBQUMsQ0FDaEJ3N0IsU0FBVSxVQUNWcHVCLEtBQU0sRUFDTmt2QixHQUFJLElBRVIsTUFDSixLQUFLa1EsV0FBVzd6QixZQUFZQyxXQUM1QixLQUFLNHpCLFdBQVc3ekIsWUFBWUcsV0FDNUIsS0FBSzB6QixXQUFXN3pCLFlBQVlFLFlBQzVCLEtBQUsyekIsV0FBVzd6QixZQUFZSSxPQUM1QixLQUFLeXpCLFdBQVc3ekIsWUFBWU0sT0FDNUIsS0FBS3V6QixXQUFXN3pCLFlBQVlLLFFBQzVCLEtBQUt3ekIsV0FBVzd6QixZQUFZTyxXQUM1QixLQUFLc3pCLFdBQVc3ekIsWUFBWTZtQixpQkFDeEJwb0IsUUFBUStCLElBQUksb0JBQXFCLG1CQUFVNFgsVUFBVzNZLEdBQ3RENG9CLEVBQU9sRixjQUFnQjBRLFdBQVd6USxvQkFBb0JDLE9BQ3REZ0YsRUFBTzlrQyxLQUFPc3dDLFdBQVc3USxjQUFjckwsS0FFdkMsSUFBSXllLEVBQVUsR0FBSUMsRUFBUSxHQUMxQixtQkFBVWplLFVBQVVsbkIsUUFBUSxTQUFVb2xDLEVBQVVsOEIsR0FDNUMsR0FBSXFGLEVBQVc2MkIsRUFBUzN1QyxRQUFVdy9CLEVBQVE5MUIsU0FBUytJLEdBQVMsQ0FDeEQsSUFBTW04QixFQUFhRCxFQUFTNzJCLEVBQVcsR0FBcEIsRUFDYisyQixFQUFXRixFQUFTNzJCLEdBQVQsRUFDakJoQixRQUFRK0IsSUFBSSx1QkFBd0JwRyxHQUNwQyxJQUFNcThCLEVBQWMsTUFBQTc4QixVQUFVODhCLE9BQU9qM0IsRUFBVXJGLEVBQVFtOEIsRUFBWUMsRUFBVTUyQixFQUFlQyxHQUM3RSxVQUFYekYsSUFDQXFFLFFBQVErQixJQUFJLGFBQWMrMUIsR0FDMUI5M0IsUUFBUStCLElBQUksV0FBWWcyQixHQUN4Qi8zQixRQUFRK0IsSUFBSSxVQUFXaTJCLElBRTNCTCxFQUFROXJDLEtBQUssQ0FBQzhQLEVBQVFtOEIsSUFDdEJGLEVBQU0vckMsS0FBSyxDQUFDOFAsRUFBUXE4QixJQUNwQkgsRUFBUzcyQixFQUFXLEdBQXBCLEVBQThCZzNCLEVBQzlCLG1CQUFVcmUsVUFBVW5wQixJQUFJbUwsRUFBUWs4QixNQUd4QzczQixRQUFRK0IsSUFBSSxjQUFlLG1CQUFVNFgsV0FDckNpUSxFQUFPaGhDLFVBQVksQ0FBQyxDQUNoQnc3QixTQUFVLElBQ1ZwdUIsS0FBTTJoQyxFQUNOelMsR0FBSTBTLElBaUJoQnBCLEVBQWMzcUMsS0FBSys5QixHQUt2QixPQUZBNXBCLFFBQVErQixJQUFJLDhCQUErQnkwQixHQUVwQ0EsSSx3Q0FTYzBCLEVBQVdwUCxFQUFvQnZ0QixHQUtwRCxJQUpBLElBQUk0OEIsRUFBYSxFQUFHQyxHQUFZLElBQzVCcjhCLEVBQVksRUFBR0MsRUFBVSxFQUN6QnE4QixHQUFtQixFQUh1QyxXQUtyRDcxQyxHQUNMLElBQUk4MUMsT0FBVyxFQUFFQyxFQUFZLElBQUl0aUMsSUFDakNxaUMsRUFBY0osRUFBVTExQyxHQUFHNHFDLGNBQWNyeEIsRUFBV0MsRUFBUyxFQUFHVCxHQUc1RC9ZLEVBQUksR0FDQTAxQyxFQUFVMTFDLEVBQUksR0FBR2tpQyxnQkFBa0IwUSxXQUFXelEsb0JBQW9CNlQsU0FDbEVGLEVBQVk3bEMsUUFBUSxTQUFVZ21DLEVBQVU5OEIsR0FDcEMyOEIsRUFBWTluQyxJQUFJbUwsRUFBUTg4QixFQUFXUCxFQUFVMTFDLEVBQUksR0FBR21PLFVBS2hFLElBQUkrbkMsRUFBYyxJQUFTQyxHQUFhLElBQ3hDVCxFQUFVMTFDLEdBQUc2bkMsWUFBYyxJQUFJcDBCLElBQy9CcWlDLEVBQVk3bEMsUUFBUSxTQUFVZ21DLEVBQVU5OEIsR0FDcEMsSUFBSWk5QixFQUFTLEVBQ3dCLFdBQWpDLFFBQU9WLEVBQVUxMUMsR0FBRzJoQyxXQUNwQmtVLEdBQW1CLEVBQ25CTyxFQUFTSCxHQUMrQixpQkFBMUJQLEVBQVUxMUMsR0FBRzJoQyxXQUMzQnlVLEVBQVNILEVBQVdQLEVBQVUxMUMsR0FBRzJoQyxVQUVyQ29VLEVBQVUvbkMsSUFBSW1MLEVBQVFpOUIsR0FDdEJWLEVBQVUxMUMsR0FBRzZuQyxZQUFZNzVCLElBQUltTCxFQUFRODhCLEdBRWpDQSxFQUFXQyxJQUNYQSxFQUFjRCxHQUVkRyxFQUFTRCxJQUNUQSxFQUFZQyxHQUVaSCxFQUFXTixJQUNYQSxFQUFhTSxHQUViRyxFQUFTUixJQUNUQSxFQUFXUSxLQUluQjc4QixFQUFZMjhCLEVBQ1oxOEIsRUFBVTI4QixHQXpDTG4yQyxFQUFJLEVBQUdBLEVBQUkwMUMsRUFBVWh2QyxPQUFRMUcsSUFBSyxFQUFsQ0EsR0E0Q1QsSUFBSXEyQyxFQUFvQlQsRUFBV0QsRUFDL0JXLEVBQWtCLElBQUk3aUMsSUFDdEJvekIsRUFBbUIsSUFBSXB6QixJQXdCM0IsT0F2QklvaUMsR0FFQXZQLEVBQW1CcjJCLFFBQVEsU0FBVWlKLEVBQU9DLEdBQ3hDRCxFQUFNakosUUFBUSxTQUFVa1QsRUFBV3llLFNBQ2UsSUFBbkNpRixFQUFpQmhtQyxJQUFJK2dDLElBQTZCemUsRUFBVSxHQUFLMGpCLEVBQWlCaG1DLElBQUkrZ0MsS0FDN0ZpRixFQUFpQjc0QixJQUFJNHpCLEVBQVV6ZSxFQUFVLFFBSXJEbWpCLEVBQW1CcjJCLFFBQVEsU0FBVWlKLEVBQU9DLEdBQ3hDLElBQUlvOUIsRUFBbUIsRUFDdkJyOUIsRUFBTWpKLFFBQVEsU0FBVWtULEVBQVd5ZSxHQUMvQixJQUFJM29CLEVBQWU0dEIsRUFBaUJobUMsSUFBSStnQyxHQUV4QzJVLEdBQW9CcHpCLEVBQVUsR0FBS0EsRUFBVSxHQUFLbEssSUFFdERxOUIsRUFBZ0J0b0MsSUFBSW1MLEVBQVFrOUIsRUFBb0JFLE1BR3BEalEsRUFBbUJyMkIsUUFBUSxTQUFVaFAsRUFBT2tZLEdBQ3hDbTlCLEVBQWdCdG9DLElBQUltTCxFQUFRazlCLEtBRzdCLENBQUNDLEVBQWlCelAsRUFBa0I2TyxLLDBDQUdwQmMsR0FDdkIsT0FBUUEsR0FDSixLQUFLNUQsV0FBV0csV0FBV0MsV0FDdkIsT0FBTyxTQUFBL1ksY0FBY3djLFNBQ3pCLEtBQUs3RCxXQUFXRyxXQUFXMkQsV0FDdkIsT0FBTyxTQUFBemMsY0FBY3ljLGFBQ3pCLEtBQUs5RCxXQUFXRyxXQUFXNEQsWUFDdkIsT0FBTyxTQUFBMWMsY0FBYzBjLGNBQ3pCLEtBQUsvRCxXQUFXRyxXQUFXNkQsY0FDdkIsT0FBTyxTQUFBM2MsY0FBYzJjLGdCQUN6QixLQUFLaEUsV0FBV0csV0FBVzhELFlBQ3ZCLE9BQU8sU0FBQTVjLGNBQWM0YyxjQUN6QixLQUFLakUsV0FBV0csV0FBVytELGFBQ3ZCLE9BQU8sU0FBQTdjLGNBQWM2YyxlQUN6QixLQUFLbEUsV0FBV0csV0FBV2dFLGVBQ3ZCLE9BQU8sU0FBQTljLGNBQWM4YyxzQixrQ0FLckNuRSxXQUFXYyxZQUFjLElBQUlqZ0MsSUFDN0JtL0IsV0FBVzE1QixNQUFRLENBQUMsU0FBVSxPQUFRLFNBQVUsWUFBYSxTQUFVLFlBRXZFMDVCLFdBQVc3ekIsWUFBYyxDQUNyQm8xQixLQUFNLE9BQ05LLFdBQVksY0FDWkcsUUFBUyxXQUNURSxTQUFVLFlBQ1ZFLFVBQVcsYUFDWHBSLE1BQU8sUUFDUEgsT0FBUSxTQUNSaDlCLEtBQU0sT0FDTjR0QyxVQUFXLFlBQ1gzUSxPQUFRLFNBQ1I2USxLQUFNLE9BQ05sUyxPQUFRLFNBQ1JwakIsV0FBWSxjQUNaRSxXQUFZLGNBQ1pELFlBQWEsZUFDYkUsT0FBUSxVQUNSRSxPQUFRLFVBQ1JELFFBQVMsV0FDVEUsV0FBWSxjQUNaMDNCLEtBQU0sT0FDTnBSLGlCQUFrQixtQkFDbEJ5TyxRQUFTLFdBQ1RXLGdCQUFpQixxQkFDakJOLGVBQWdCLG9CQUNoQkksaUJBQWtCLHNCQUNsQkYsa0JBQW1CLHVCQUNuQk0sU0FBVSxZQUNWRCxVQUFXLGFBQ1hWLE9BQVEsU0FDUkwsV0FBWSxhQUNaK0MsS0FBTSxPQUNOdmdCLEtBQU0sT0FDTitGLEtBQU0sUUFHVm1XLFdBQVc3USxjQUFnQixDQUN2QnJMLEtBQU0sT0FDTitGLEtBQU0sUUFHVm1XLFdBQVd6USxvQkFBc0IsQ0FDN0JnUyxLQUFNLE9BQ043USxLQUFNLE9BQ05DLEtBQU0sT0FDTkksTUFBTyxRQUNQRixPQUFRLFNBQ1JELE9BQVEsU0FDUmg5QixLQUFNLE9BQ044dEMsS0FBTSxPQUNObFMsT0FBUSxTQUNSNFQsUUFBUyxXQUdicEQsV0FBV0csV0FBYSxDQUNwQkMsV0FBWSxhQUNaMEQsV0FBWSxhQUNaQyxZQUFhLGNBQ2JDLGNBQWUsZ0JBQ2ZDLFlBQWEsY0FDYkMsYUFBYyxlQUNkQyxlQUFnQixpQkFDaEJHLGNBQWUsaUIsYUFHSnRFLFcseUVDcnJCZixJQUFJaHZDLEVBQVcsRUFBUSxHQUNuQm9TLEVBQVcsRUFBUSxHQUFhQSxTQUVoQ21oQyxFQUFLdnpDLEVBQVNvUyxJQUFhcFMsRUFBU29TLEVBQVNrVCxlQUNqRHpwQixFQUFPRCxRQUFVLFNBQVVxRSxHQUN6QixPQUFPc3pDLEVBQUtuaEMsRUFBU2tULGNBQWNybEIsR0FBTSxLLGdCQ0wzQyxJQUFJN0IsRUFBUyxFQUFRLEdBQ2pCQyxFQUFPLEVBQVEsSUFDZnFILEVBQVUsRUFBUSxJQUNsQjh0QyxFQUFTLEVBQVEsS0FDakJ6MkMsRUFBaUIsRUFBUSxHQUFnQm1FLEVBQzdDckYsRUFBT0QsUUFBVSxTQUFVZSxHQUN6QixJQUFJODJDLEVBQVVwMUMsRUFBS2xCLFNBQVdrQixFQUFLbEIsT0FBU3VJLEVBQVUsR0FBS3RILEVBQU9qQixRQUFVLElBQ3RELEtBQWxCUixFQUFLbWEsT0FBTyxJQUFlbmEsS0FBUTgyQyxHQUFVMTJDLEVBQWUwMkMsRUFBUzkyQyxFQUFNLENBQUVVLE1BQU9tMkMsRUFBT3R5QyxFQUFFdkUsTyxnQkNQbkcsSUFBSW1ULEVBQVMsRUFBUSxHQUFSLENBQXFCLFFBQzlCclAsRUFBTSxFQUFRLElBQ2xCNUUsRUFBT0QsUUFBVSxTQUFVK0IsR0FDekIsT0FBT21TLEVBQU9uUyxLQUFTbVMsRUFBT25TLEdBQU84QyxFQUFJOUMsTSxjQ0YzQzlCLEVBQU9ELFFBQVUsZ0dBRWYrRixNQUFNLE0sZ0JDSFIsSUFBSXlRLEVBQVcsRUFBUSxHQUFhQSxTQUNwQ3ZXLEVBQU9ELFFBQVV3VyxHQUFZQSxFQUFTc2hDLGlCLGdCQ0N0QyxJQUFJMXpDLEVBQVcsRUFBUSxHQUNuQmMsRUFBVyxFQUFRLEdBQ25CNnlDLEVBQVEsU0FBVXh5QyxFQUFHeUssR0FFdkIsR0FEQTlLLEVBQVNLLElBQ0puQixFQUFTNEwsSUFBb0IsT0FBVkEsRUFBZ0IsTUFBTTFMLFVBQVUwTCxFQUFRLDhCQUVsRS9QLEVBQU9ELFFBQVUsQ0FDZndPLElBQUt0TixPQUFPODJDLGlCQUFtQixhQUFlLEdBQzVDLFNBQVVoeEMsRUFBTWl4QyxFQUFPenBDLEdBQ3JCLEtBQ0VBLEVBQU0sRUFBUSxHQUFSLENBQWtCeEssU0FBU3JELEtBQU0sRUFBUSxJQUFrQjJFLEVBQUVwRSxPQUFPa0IsVUFBVyxhQUFhb00sSUFBSyxJQUNuR3hILEVBQU0sSUFDVml4QyxJQUFVanhDLGFBQWdCeUUsT0FDMUIsTUFBTzlHLEdBQUtzekMsR0FBUSxFQUN0QixPQUFPLFNBQXdCMXlDLEVBQUd5SyxHQUloQyxPQUhBK25DLEVBQU14eUMsRUFBR3lLLEdBQ0xpb0MsRUFBTzF5QyxFQUFFMnlDLFVBQVlsb0MsRUFDcEJ4QixFQUFJakosRUFBR3lLLEdBQ0x6SyxHQVZYLENBWUUsSUFBSSxRQUFTeEIsR0FDakJnMEMsTUFBT0EsSSxjQ3ZCVDkzQyxFQUFPRCxRQUFVLGtELGdCQ0FqQixJQUFJb0UsRUFBVyxFQUFRLEdBQ25CNHpDLEVBQWlCLEVBQVEsSUFBZ0J4cEMsSUFDN0N2TyxFQUFPRCxRQUFVLFNBQVVpSSxFQUFNcEUsRUFBUWdMLEdBQ3ZDLElBQ0luTCxFQURBRixFQUFJSyxFQUFPK0QsWUFJYixPQUZFcEUsSUFBTXFMLEdBQWlCLG1CQUFMckwsSUFBb0JFLEVBQUlGLEVBQUVwQixhQUFleU0sRUFBRXpNLFdBQWFnQyxFQUFTVixJQUFNczBDLEdBQzNGQSxFQUFlL3ZDLEVBQU12RSxHQUNkdUUsSSw2QkNOWCxJQUFJbEQsRUFBWSxFQUFRLElBQ3BCVSxFQUFVLEVBQVEsSUFFdEJ4RixFQUFPRCxRQUFVLFNBQWdCaW1DLEdBQy9CLElBQUkzZCxFQUFNamlCLE9BQU9aLEVBQVFhLE9BQ3JCb0QsRUFBTSxHQUNOekgsRUFBSThDLEVBQVVraEMsR0FDbEIsR0FBSWhrQyxFQUFJLEdBQUtBLEdBQUs2cEMsSUFBVSxNQUFNeGdDLFdBQVcsMkJBQzdDLEtBQU1ySixFQUFJLEdBQUlBLEtBQU8sS0FBT3FtQixHQUFPQSxHQUFjLEVBQUpybUIsSUFBT3lILEdBQU80ZSxHQUMzRCxPQUFPNWUsSSxjQ1RUekosRUFBT0QsUUFBVXVFLEtBQUs0ekMsTUFBUSxTQUFjNTZCLEdBRTFDLE9BQW1CLElBQVhBLEdBQUtBLElBQVdBLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUksR0FBSyxFQUFJLEksY0NGcEQsSUFBSTY2QixFQUFTN3pDLEtBQUs4ekMsTUFDbEJwNEMsRUFBT0QsU0FBWW80QyxHQUVkQSxFQUFPLElBQU0sb0JBQXNCQSxFQUFPLElBQU0scUJBRTdCLE9BQW5CQSxHQUFRLE9BQ1QsU0FBZTc2QixHQUNqQixPQUFtQixJQUFYQSxHQUFLQSxHQUFVQSxFQUFJQSxHQUFLLE1BQVFBLEVBQUksS0FBT0EsRUFBSUEsRUFBSUEsRUFBSSxFQUFJaFosS0FBS3JCLElBQUlxYSxHQUFLLEdBQy9FNjZCLEcsNkJDUkosSUFBSXR1QyxFQUFVLEVBQVEsSUFDbEJqSCxFQUFVLEVBQVEsR0FDbEJGLEVBQVcsRUFBUSxJQUNuQkQsRUFBTyxFQUFRLElBQ2ZxSSxFQUFZLEVBQVEsSUFDcEJ1dEMsRUFBYyxFQUFRLElBQ3RCN1ksRUFBaUIsRUFBUSxJQUN6QjkzQixFQUFpQixFQUFRLElBQ3pCOEYsRUFBVyxFQUFRLEVBQVIsQ0FBa0IsWUFDN0I4cUMsSUFBVSxHQUFHOXJDLE1BQVEsUUFBVSxHQUFHQSxRQUtsQytyQyxFQUFhLFdBQWMsT0FBT2x5QyxNQUV0Q3JHLEVBQU9ELFFBQVUsU0FBVTJTLEVBQU01TCxFQUFNbVEsRUFBYXZILEVBQU04b0MsRUFBU0MsRUFBUTdsQyxHQUN6RXlsQyxFQUFZcGhDLEVBQWFuUSxFQUFNNEksR0FDL0IsSUFlSWd3QixFQUFTNTlCLEVBQUs0MkMsRUFmZEMsRUFBWSxTQUFVQyxHQUN4QixJQUFLTixHQUFTTSxLQUFRN29DLEVBQU8sT0FBT0EsRUFBTTZvQyxHQUMxQyxPQUFRQSxHQUNOLElBVkssT0FXTCxJQVZPLFNBVU0sT0FBTyxXQUFvQixPQUFPLElBQUkzaEMsRUFBWTVRLEtBQU11eUMsSUFDckUsT0FBTyxXQUFxQixPQUFPLElBQUkzaEMsRUFBWTVRLEtBQU11eUMsS0FFekRuckMsRUFBTTNHLEVBQU8sWUFDYit4QyxFQWRPLFVBY01MLEVBQ2JNLEdBQWEsRUFDYi9vQyxFQUFRMkMsRUFBS3ZRLFVBQ2I0MkMsRUFBVWhwQyxFQUFNdkMsSUFBYXVDLEVBbkJqQixlQW1CdUN5b0MsR0FBV3pvQyxFQUFNeW9DLEdBQ3BFUSxFQUFXRCxHQUFXSixFQUFVSCxHQUNoQ1MsRUFBV1QsRUFBV0ssRUFBd0JGLEVBQVUsV0FBckJLLE9BQWtDbDFDLEVBQ3JFbzFDLEVBQXFCLFNBQVJweUMsR0FBa0JpSixFQUFNckQsU0FBcUJxc0MsRUF3QjlELEdBckJJRyxJQUNGUixFQUFvQmh4QyxFQUFld3hDLEVBQVd4NEMsS0FBSyxJQUFJZ1MsT0FDN0J6UixPQUFPa0IsV0FBYXUyQyxFQUFrQmhwQyxPQUU5RDh2QixFQUFla1osRUFBbUJqckMsR0FBSyxHQUVsQzVELEdBQWlELG1CQUEvQjZ1QyxFQUFrQmxyQyxJQUF5Qi9LLEVBQUtpMkMsRUFBbUJsckMsRUFBVStxQyxJQUlwR00sR0FBY0UsR0FqQ1AsV0FpQ2tCQSxFQUFRajRDLE9BQ25DZzRDLEdBQWEsRUFDYkUsRUFBVyxXQUFvQixPQUFPRCxFQUFRcjRDLEtBQUsyRixRQUcvQ3dELElBQVcrSSxJQUFZMGxDLElBQVNRLEdBQWUvb0MsRUFBTXZDLElBQ3pEL0ssRUFBS3NOLEVBQU92QyxFQUFVd3JDLEdBR3hCbHVDLEVBQVVoRSxHQUFRa3lDLEVBQ2xCbHVDLEVBQVUyQyxHQUFPOHFDLEVBQ2JDLEVBTUYsR0FMQTlZLEVBQVUsQ0FDUnB6QixPQUFRdXNDLEVBQWFHLEVBQVdMLEVBOUN6QixVQStDUG5zQyxLQUFNaXNDLEVBQVNPLEVBQVdMLEVBaERyQixRQWlETGpzQyxRQUFTdXNDLEdBRVBybUMsRUFBUSxJQUFLOVEsS0FBTzQ5QixFQUNoQjU5QixLQUFPaU8sR0FBUXJOLEVBQVNxTixFQUFPak8sRUFBSzQ5QixFQUFRNTlCLFNBQzdDYyxFQUFRQSxFQUFRYSxFQUFJYixFQUFRTyxHQUFLbTFDLEdBQVNRLEdBQWFoeUMsRUFBTTQ0QixHQUV0RSxPQUFPQSxJLDZCQ2xFVCxJQUFJNzlCLEVBQVMsRUFBUSxJQUNqQms1QixFQUFhLEVBQVEsSUFDckJ5RSxFQUFpQixFQUFRLElBQ3pCa1osRUFBb0IsR0FHeEIsRUFBUSxHQUFSLENBQW1CQSxFQUFtQixFQUFRLEVBQVIsQ0FBa0IsWUFBYSxXQUFjLE9BQU9yeUMsT0FFMUZyRyxFQUFPRCxRQUFVLFNBQVVrWCxFQUFhblEsRUFBTTRJLEdBQzVDdUgsRUFBWTlVLFVBQVlOLEVBQU82MkMsRUFBbUIsQ0FBRWhwQyxLQUFNcXJCLEVBQVcsRUFBR3JyQixLQUN4RTh2QixFQUFldm9CLEVBQWFuUSxFQUFPLGUsZ0JDVnJDLElBQUkrMkIsRUFBVyxFQUFRLElBQ25CcjRCLEVBQVUsRUFBUSxJQUV0QnhGLEVBQU9ELFFBQVUsU0FBVWlJLEVBQU1teEMsRUFBY3J5QyxHQUM3QyxHQUFJKzJCLEVBQVNzYixHQUFlLE1BQU05MEMsVUFBVSxVQUFZeUMsRUFBTywwQkFDL0QsT0FBT1YsT0FBT1osRUFBUXdDLE0sZ0JDTnhCLElBQUk0MUIsRUFBUSxFQUFRLEVBQVIsQ0FBa0IsU0FDOUI1OUIsRUFBT0QsUUFBVSxTQUFVNkksR0FDekIsSUFBSXkxQixFQUFLLElBQ1QsSUFDRSxNQUFNejFCLEdBQUt5MUIsR0FDWCxNQUFPMzVCLEdBQ1AsSUFFRSxPQURBMjVCLEVBQUdULElBQVMsR0FDSixNQUFNaDFCLEdBQUt5MUIsR0FDbkIsTUFBT2g1QixLQUNULE9BQU8sSSxnQkNUWCxJQUFJeUYsRUFBWSxFQUFRLElBQ3BCMEMsRUFBVyxFQUFRLEVBQVIsQ0FBa0IsWUFDN0JqQyxFQUFhQyxNQUFNckosVUFFdkJuQyxFQUFPRCxRQUFVLFNBQVVxRSxHQUN6QixZQUFjTixJQUFQTSxJQUFxQjBHLEVBQVVVLFFBQVVwSCxHQUFNbUgsRUFBV2lDLEtBQWNwSixLLDZCQ0xqRixJQUFJZzFDLEVBQWtCLEVBQVEsR0FDMUIzekMsRUFBYSxFQUFRLElBRXpCekYsRUFBT0QsUUFBVSxTQUFVa0MsRUFBUXlILEVBQU9sSSxHQUNwQ2tJLEtBQVN6SCxFQUFRbTNDLEVBQWdCL3pDLEVBQUVwRCxFQUFReUgsRUFBT2pFLEVBQVcsRUFBR2pFLElBQy9EUyxFQUFPeUgsR0FBU2xJLEksZ0JDTnZCLElBQUk2SSxFQUFVLEVBQVEsSUFDbEJtRCxFQUFXLEVBQVEsRUFBUixDQUFrQixZQUM3QjFDLEVBQVksRUFBUSxJQUN4QjlLLEVBQU9ELFFBQVUsRUFBUSxJQUFXczVDLGtCQUFvQixTQUFVajFDLEdBQ2hFLEdBQVVOLE1BQU5NLEVBQWlCLE9BQU9BLEVBQUdvSixJQUMxQnBKLEVBQUcsZUFDSDBHLEVBQVVULEVBQVFqRyxNLGdCQ0x6QixJQUFJd0csRUFBcUIsRUFBUSxLQUVqQzVLLEVBQU9ELFFBQVUsU0FBVXU1QyxFQUFVcnlDLEdBQ25DLE9BQU8sSUFBSzJELEVBQW1CMHVDLEdBQXhCLENBQW1DcnlDLEssNkJDRjVDLElBQUlNLEVBQVcsRUFBUSxHQUNuQjZDLEVBQWtCLEVBQVEsSUFDMUJ2QixFQUFXLEVBQVEsR0FDdkI3SSxFQUFPRCxRQUFVLFNBQWN5QixHQU83QixJQU5BLElBQUk4RCxFQUFJaUMsRUFBU2xCLE1BQ2JZLEVBQVM0QixFQUFTdkQsRUFBRTJCLFFBQ3BCcUksRUFBT25ILFVBQVVsQixPQUNqQnlDLEVBQVFVLEVBQWdCa0YsRUFBTyxFQUFJbkgsVUFBVSxRQUFLckUsRUFBV21ELEdBQzdEbUssRUFBTTlCLEVBQU8sRUFBSW5ILFVBQVUsUUFBS3JFLEVBQ2hDeTFDLE9BQWlCejFDLElBQVJzTixFQUFvQm5LLEVBQVNtRCxFQUFnQmdILEVBQUtuSyxHQUN4RHN5QyxFQUFTN3ZDLEdBQU9wRSxFQUFFb0UsS0FBV2xJLEVBQ3BDLE9BQU84RCxJLDZCQ1pULElBQUlrMEMsRUFBbUIsRUFBUSxJQUMzQnBxQyxFQUFPLEVBQVEsS0FDZnRFLEVBQVksRUFBUSxJQUNwQjFELEVBQVksRUFBUSxJQU14QnBILEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBQTBCeUwsTUFBTyxRQUFTLFNBQVVpdUMsRUFBVWIsR0FDN0V2eUMsS0FBS2lSLEdBQUtsUSxFQUFVcXlDLEdBQ3BCcHpDLEtBQUtxekMsR0FBSyxFQUNWcnpDLEtBQUtzekMsR0FBS2YsR0FFVCxXQUNELElBQUl0ekMsRUFBSWUsS0FBS2lSLEdBQ1RzaEMsRUFBT3Z5QyxLQUFLc3pDLEdBQ1pqd0MsRUFBUXJELEtBQUtxekMsS0FDakIsT0FBS3AwQyxHQUFLb0UsR0FBU3BFLEVBQUUyQixRQUNuQlosS0FBS2lSLFFBQUt4VCxFQUNIc0wsRUFBSyxJQUVhQSxFQUFLLEVBQXBCLFFBQVJ3cEMsRUFBK0JsdkMsRUFDdkIsVUFBUmt2QyxFQUFpQ3R6QyxFQUFFb0UsR0FDeEIsQ0FBQ0EsRUFBT3BFLEVBQUVvRSxNQUN4QixVQUdIb0IsRUFBVTh1QyxVQUFZOXVDLEVBQVVVLE1BRWhDZ3VDLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWSw2QkMvQmpCLElBYU1LLEVBQ0FDLEVBZEZDLEVBQWMsRUFBUSxJQUV0QkMsRUFBYS9oQyxPQUFPOVYsVUFBVXNDLEtBSTlCdzFDLEVBQWdCN3pDLE9BQU9qRSxVQUFVMEUsUUFFakNxekMsRUFBY0YsRUFJZEcsR0FDRU4sRUFBTSxJQUNOQyxFQUFNLE1BQ1ZFLEVBQVd0NUMsS0FBS201QyxFQUFLLEtBQ3JCRyxFQUFXdDVDLEtBQUtvNUMsRUFBSyxLQUNNLElBQXBCRCxFQUFjLFdBQStCLElBQXBCQyxFQUFjLFdBSTVDTSxPQUF1Q3QyQyxJQUF2QixPQUFPVyxLQUFLLElBQUksSUFFeEIwMUMsR0FBNEJDLEtBR3RDRixFQUFjLFNBQWM3eEIsR0FDMUIsSUFDSWd5QixFQUFXQyxFQUFReDhCLEVBQU92ZCxFQUQxQjg5QixFQUFLaDRCLEtBd0JULE9BckJJK3pDLElBQ0ZFLEVBQVMsSUFBSXJpQyxPQUFPLElBQU1vbUIsRUFBR3Y3QixPQUFTLFdBQVlpM0MsRUFBWXI1QyxLQUFLMjlCLEtBRWpFOGIsSUFBMEJFLEVBQVloYyxFQUFhLFdBRXZEdmdCLEVBQVFrOEIsRUFBV3Q1QyxLQUFLMjlCLEVBQUloVyxHQUV4Qjh4QixHQUE0QnI4QixJQUM5QnVnQixFQUFhLFVBQUlBLEVBQUc5N0IsT0FBU3ViLEVBQU1wVSxNQUFRb1UsRUFBTSxHQUFHN1csT0FBU296QyxHQUUzREQsR0FBaUJ0OEIsR0FBU0EsRUFBTTdXLE9BQVMsR0FJM0NnekMsRUFBY3Y1QyxLQUFLb2QsRUFBTSxHQUFJdzhCLEVBQVEsV0FDbkMsSUFBSy81QyxFQUFJLEVBQUdBLEVBQUk0SCxVQUFVbEIsT0FBUyxFQUFHMUcsU0FDZnVELElBQWpCcUUsVUFBVTVILEtBQWtCdWQsRUFBTXZkLFFBQUt1RCxLQUsxQ2dhLElBSVg5ZCxFQUFPRCxRQUFVbTZDLEcsNkJDeERqQixJQUFJcHBCLEVBQUssRUFBUSxHQUFSLEVBQXdCLEdBSWpDOXdCLEVBQU9ELFFBQVUsU0FBVXdELEVBQUdtRyxFQUFPK25CLEdBQ25DLE9BQU8vbkIsR0FBUytuQixFQUFVWCxFQUFHdnRCLEVBQUdtRyxHQUFPekMsT0FBUyxLLGdCQ05sRCxJQWFJc3pDLEVBQU85Z0IsRUFBUytnQixFQWJoQjczQyxFQUFNLEVBQVEsSUFDZDgzQyxFQUFTLEVBQVEsS0FDakJDLEVBQU8sRUFBUSxJQUNmQyxFQUFNLEVBQVEsSUFDZHA0QyxFQUFTLEVBQVEsR0FDakJxNEMsRUFBVXI0QyxFQUFPcTRDLFFBQ2pCQyxFQUFVdDRDLEVBQU91NEMsYUFDakJDLEVBQVl4NEMsRUFBT3k0QyxlQUNuQkMsRUFBaUIxNEMsRUFBTzA0QyxlQUN4QkMsRUFBVzM0QyxFQUFPMjRDLFNBQ2xCQyxFQUFVLEVBQ1ZDLEVBQVEsR0FHUkMsRUFBTSxXQUNSLElBQUl6bUMsR0FBTXZPLEtBRVYsR0FBSSswQyxFQUFNaDVDLGVBQWV3UyxHQUFLLENBQzVCLElBQUk3TSxFQUFLcXpDLEVBQU14bUMsVUFDUndtQyxFQUFNeG1DLEdBQ2I3TSxNQUdBdXpDLEVBQVcsU0FBVUMsR0FDdkJGLEVBQUkzNkMsS0FBSzY2QyxFQUFNdm9DLE9BR1o2bkMsR0FBWUUsSUFDZkYsRUFBVSxTQUFzQjl5QyxHQUc5QixJQUZBLElBQUl5ekMsRUFBTyxHQUNQajdDLEVBQUksRUFDRDRILFVBQVVsQixPQUFTMUcsR0FBR2k3QyxFQUFLNXhDLEtBQUt6QixVQUFVNUgsTUFNakQsT0FMQTY2QyxJQUFRRCxHQUFXLFdBRWpCVixFQUFvQixtQkFBTjF5QyxFQUFtQkEsRUFBS2hFLFNBQVNnRSxHQUFLeXpDLElBRXREakIsRUFBTVksR0FDQ0EsR0FFVEosRUFBWSxTQUF3Qm5tQyxVQUMzQndtQyxFQUFNeG1DLElBR21CLFdBQTlCLEVBQVEsR0FBUixDQUFrQmdtQyxHQUNwQkwsRUFBUSxTQUFVM2xDLEdBQ2hCZ21DLEVBQVFhLFNBQVM5NEMsRUFBSTA0QyxFQUFLem1DLEVBQUksS0FHdkJzbUMsR0FBWUEsRUFBU1EsSUFDOUJuQixFQUFRLFNBQVUzbEMsR0FDaEJzbUMsRUFBU1EsSUFBSS80QyxFQUFJMDRDLEVBQUt6bUMsRUFBSSxLQUduQnFtQyxHQUVUVCxHQURBL2dCLEVBQVUsSUFBSXdoQixHQUNDVSxNQUNmbGlCLEVBQVFtaUIsTUFBTUMsVUFBWVAsRUFDMUJmLEVBQVE1M0MsRUFBSTYzQyxFQUFLc0IsWUFBYXRCLEVBQU0sSUFHM0JqNEMsRUFBT3c1QyxrQkFBMEMsbUJBQWZELGNBQThCdjVDLEVBQU95NUMsZUFDaEZ6QixFQUFRLFNBQVUzbEMsR0FDaEJyUyxFQUFPdTVDLFlBQVlsbkMsRUFBSyxHQUFJLE1BRTlCclMsRUFBT3c1QyxpQkFBaUIsVUFBV1QsR0FBVSxJQUc3Q2YsRUF2RHFCLHVCQXNEVUksRUFBSSxVQUMzQixTQUFVL2xDLEdBQ2hCOGxDLEVBQUtya0MsWUFBWXNrQyxFQUFJLFdBQTZCLG1CQUFJLFdBQ3BERCxFQUFLdUIsWUFBWTUxQyxNQUNqQmcxQyxFQUFJMzZDLEtBQUtrVSxLQUtMLFNBQVVBLEdBQ2hCc25DLFdBQVd2NUMsRUFBSTA0QyxFQUFLem1DLEVBQUksR0FBSSxLQUlsQzVVLEVBQU9ELFFBQVUsQ0FDZndPLElBQUtzc0MsRUFDTHphLE1BQU8yYSxJLGdCQ2xGVCxJQUFJeDRDLEVBQVMsRUFBUSxHQUNqQjQ1QyxFQUFZLEVBQVEsSUFBVzV0QyxJQUMvQjZ0QyxFQUFXNzVDLEVBQU84NUMsa0JBQW9COTVDLEVBQU8rNUMsdUJBQzdDMUIsRUFBVXI0QyxFQUFPcTRDLFFBQ2pCMkIsRUFBVWg2QyxFQUFPZzZDLFFBQ2pCQyxFQUF1QyxXQUE5QixFQUFRLEdBQVIsQ0FBa0I1QixHQUUvQjU2QyxFQUFPRCxRQUFVLFdBQ2YsSUFBSTA4QyxFQUFNQyxFQUFNQyxFQUVaQyxFQUFRLFdBQ1YsSUFBSUMsRUFBUTkwQyxFQUVaLElBREl5MEMsSUFBV0ssRUFBU2pDLEVBQVFrQyxTQUFTRCxFQUFPdG1CLE9BQ3pDa21CLEdBQU0sQ0FDWDEwQyxFQUFLMDBDLEVBQUsxMEMsR0FDVjAwQyxFQUFPQSxFQUFLL3NDLEtBQ1osSUFDRTNILElBQ0EsTUFBT3JELEdBR1AsTUFGSSszQyxFQUFNRSxJQUNMRCxPQUFPNTRDLEVBQ05ZLEdBRVJnNEMsT0FBTzU0QyxFQUNMKzRDLEdBQVFBLEVBQU94bUIsU0FJckIsR0FBSW1tQixFQUNGRyxFQUFTLFdBQ1AvQixFQUFRYSxTQUFTbUIsU0FHZCxJQUFJUixHQUFjNzVDLEVBQU84OEIsV0FBYTk4QixFQUFPODhCLFVBQVUwZCxXQVF2RCxHQUFJUixHQUFXQSxFQUFRUyxRQUFTLENBRXJDLElBQUlDLEVBQVVWLEVBQVFTLGFBQVFsNUMsR0FDOUI2NEMsRUFBUyxXQUNQTSxFQUFRQyxLQUFLTixTQVNmRCxFQUFTLFdBRVBSLEVBQVV6N0MsS0FBSzZCLEVBQVFxNkMsUUF2QmdELENBQ3pFLElBQUlPLEdBQVMsRUFDVDdnQyxFQUFPL0YsU0FBU3FOLGVBQWUsSUFDbkMsSUFBSXc0QixFQUFTUSxHQUFPUSxRQUFROWdDLEVBQU0sQ0FBRStnQyxlQUFlLElBQ25EVixFQUFTLFdBQ1ByZ0MsRUFBS3RKLEtBQU9tcUMsR0FBVUEsR0FzQjFCLE9BQU8sU0FBVXAxQyxHQUNmLElBQUl1MUMsRUFBTyxDQUFFdjFDLEdBQUlBLEVBQUkySCxVQUFNNUwsR0FDdkI0NEMsSUFBTUEsRUFBS2h0QyxLQUFPNHRDLEdBQ2pCYixJQUNIQSxFQUFPYSxFQUNQWCxLQUNBRCxFQUFPWSxLLDZCQ2hFYixJQUFJeDFDLEVBQVksRUFBUSxJQUV4QixTQUFTeTFDLEVBQWtCM3VDLEdBQ3pCLElBQUlvdUMsRUFBU1EsRUFDYm4zQyxLQUFLNDJDLFFBQVUsSUFBSXJ1QyxFQUFFLFNBQVU2dUMsRUFBV0MsR0FDeEMsUUFBZ0I1NUMsSUFBWms1QyxRQUFvQ2w1QyxJQUFYMDVDLEVBQXNCLE1BQU1uNUMsVUFBVSwyQkFDbkUyNEMsRUFBVVMsRUFDVkQsRUFBU0UsSUFFWHIzQyxLQUFLMjJDLFFBQVVsMUMsRUFBVWsxQyxHQUN6QjMyQyxLQUFLbTNDLE9BQVMxMUMsRUFBVTAxQyxHQUcxQng5QyxFQUFPRCxRQUFRc0YsRUFBSSxTQUFVdUosR0FDM0IsT0FBTyxJQUFJMnVDLEVBQWtCM3VDLEssNkJDZi9CLElBQUlyTSxFQUFTLEVBQVEsR0FDakJ3VSxFQUFjLEVBQVEsR0FDdEJsTixFQUFVLEVBQVEsSUFDbEJDLEVBQVMsRUFBUSxJQUNqQnJILEVBQU8sRUFBUSxJQUNmeUgsRUFBYyxFQUFRLElBQ3RCNUQsRUFBUSxFQUFRLEdBQ2hCMEQsRUFBYSxFQUFRLElBQ3JCbEYsRUFBWSxFQUFRLElBQ3BCK0QsRUFBVyxFQUFRLEdBQ25Cc0IsRUFBVSxFQUFRLEtBQ2xCSSxFQUFPLEVBQVEsSUFBa0JsRixFQUNqQ0QsRUFBSyxFQUFRLEdBQWdCQyxFQUM3QjRGLEVBQVksRUFBUSxJQUNwQnUwQixFQUFpQixFQUFRLElBR3pCbWUsRUFBWSxZQUVaQyxFQUFjLGVBQ2RueUMsRUFBZWxKLEVBQW1CLFlBQ2xDb0osRUFBWXBKLEVBQWdCLFNBQzVCK0IsRUFBTy9CLEVBQU8rQixLQUNkK0csRUFBYTlJLEVBQU84SSxXQUVwQndnQyxFQUFXdHBDLEVBQU9zcEMsU0FDbEJnUyxFQUFhcHlDLEVBQ2JxVCxFQUFNeGEsRUFBS3dhLElBQ1grb0IsRUFBTXZqQyxFQUFLdWpDLElBQ1h0L0IsRUFBUWpFLEVBQUtpRSxNQUNidVgsRUFBTXhiLEVBQUt3YixJQUNYZytCLEVBQU14NUMsRUFBS3c1QyxJQUlYQyxFQUFVaG5DLEVBQWMsS0FIZixTQUlUaW5DLEVBQVVqbkMsRUFBYyxLQUhWLGFBSWRrbkMsRUFBVWxuQyxFQUFjLEtBSFYsYUFNbEIsU0FBU21uQyxFQUFZMThDLEVBQU8yOEMsRUFBTUMsR0FDaEMsSUFPSTE1QyxFQUFHL0QsRUFBR0MsRUFQTnlOLEVBQVMsSUFBSTdDLE1BQU00eUMsR0FDbkJDLEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsRUFBYyxLQUFUTCxFQUFjdFcsRUFBSSxHQUFJLElBQU1BLEVBQUksR0FBSSxJQUFNLEVBQy9DdG5DLEVBQUksRUFDSitCLEVBQUlkLEVBQVEsR0FBZSxJQUFWQSxHQUFlLEVBQUlBLEVBQVEsRUFBSSxFQUFJLEVBa0N4RCxLQWhDQUEsRUFBUXNkLEVBQUl0ZCxLQUVDQSxHQUFTQSxJQUFVcXFDLEdBRTlCbHJDLEVBQUlhLEdBQVNBLEVBQVEsRUFBSSxFQUN6QmtELEVBQUk0NUMsSUFFSjU1QyxFQUFJNkQsRUFBTXVYLEVBQUl0ZSxHQUFTczhDLEdBQ25CdDhDLEdBQVNaLEVBQUlpbkMsRUFBSSxHQUFJbmpDLElBQU0sSUFDN0JBLElBQ0E5RCxHQUFLLElBR0xZLEdBREVrRCxFQUFJNjVDLEdBQVMsRUFDTkMsRUFBSzU5QyxFQUVMNDlDLEVBQUszVyxFQUFJLEVBQUcsRUFBSTBXLElBRWYzOUMsR0FBSyxJQUNmOEQsSUFDQTlELEdBQUssR0FFSDhELEVBQUk2NUMsR0FBU0QsR0FDZjM5QyxFQUFJLEVBQ0orRCxFQUFJNDVDLEdBQ0s1NUMsRUFBSTY1QyxHQUFTLEdBQ3RCNTlDLEdBQUthLEVBQVFaLEVBQUksR0FBS2luQyxFQUFJLEVBQUdzVyxHQUM3Qno1QyxHQUFRNjVDLElBRVI1OUMsRUFBSWEsRUFBUXFtQyxFQUFJLEVBQUcwVyxFQUFRLEdBQUsxVyxFQUFJLEVBQUdzVyxHQUN2Q3o1QyxFQUFJLElBR0R5NUMsR0FBUSxFQUFHOXZDLEVBQU85TixLQUFXLElBQUpJLEVBQVNBLEdBQUssSUFBS3c5QyxHQUFRLEdBRzNELElBRkF6NUMsRUFBSUEsR0FBS3k1QyxFQUFPeDlDLEVBQ2hCMDlDLEdBQVFGLEVBQ0RFLEVBQU8sRUFBR2h3QyxFQUFPOU4sS0FBVyxJQUFKbUUsRUFBU0EsR0FBSyxJQUFLMjVDLEdBQVEsR0FFMUQsT0FEQWh3QyxJQUFTOU4sSUFBVSxJQUFKK0IsRUFDUitMLEVBRVQsU0FBU293QyxFQUFjcHdDLEVBQVE4dkMsRUFBTUMsR0FDbkMsSUFPSXo5QyxFQVBBMDlDLEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBUUwsRUFBTyxFQUNmOTlDLEVBQUk2OUMsRUFBUyxFQUNiOTdDLEVBQUkrTCxFQUFPOU4sS0FDWG1FLEVBQVEsSUFBSnBDLEVBR1IsSUFEQUEsSUFBTSxFQUNDbzhDLEVBQVEsRUFBR2g2QyxFQUFRLElBQUpBLEVBQVUySixFQUFPOU4sR0FBSUEsSUFBS20rQyxHQUFTLEdBSXpELElBSEEvOUMsRUFBSStELEdBQUssSUFBTWc2QyxHQUFTLEVBQ3hCaDZDLEtBQU9nNkMsRUFDUEEsR0FBU1AsRUFDRk8sRUFBUSxFQUFHLzlDLEVBQVEsSUFBSkEsRUFBVTBOLEVBQU85TixHQUFJQSxJQUFLbStDLEdBQVMsR0FDekQsR0FBVSxJQUFOaDZDLEVBQ0ZBLEVBQUksRUFBSTY1QyxNQUNILElBQUk3NUMsSUFBTTQ1QyxFQUNmLE9BQU8zOUMsRUFBSWcrQyxJQUFNcjhDLEdBQUt1cEMsRUFBV0EsRUFFakNsckMsR0FBUWtuQyxFQUFJLEVBQUdzVyxHQUNmejVDLEdBQVE2NUMsRUFDUixPQUFRajhDLEdBQUssRUFBSSxHQUFLM0IsRUFBSWtuQyxFQUFJLEVBQUduakMsRUFBSXk1QyxHQUd6QyxTQUFTUyxFQUFVQyxHQUNqQixPQUFPQSxFQUFNLElBQU0sR0FBS0EsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEdBRWpFLFNBQVNDLEVBQU8xNkMsR0FDZCxNQUFPLENBQU0sSUFBTEEsR0FFVixTQUFTMjZDLEVBQVEzNkMsR0FDZixNQUFPLENBQU0sSUFBTEEsRUFBV0EsR0FBTSxFQUFJLEtBRS9CLFNBQVM0NkMsRUFBUTU2QyxHQUNmLE1BQU8sQ0FBTSxJQUFMQSxFQUFXQSxHQUFNLEVBQUksSUFBTUEsR0FBTSxHQUFLLElBQU1BLEdBQU0sR0FBSyxLQUVqRSxTQUFTNjZDLEVBQVE3NkMsR0FDZixPQUFPODVDLEVBQVk5NUMsRUFBSSxHQUFJLEdBRTdCLFNBQVM4NkMsRUFBUTk2QyxHQUNmLE9BQU84NUMsRUFBWTk1QyxFQUFJLEdBQUksR0FHN0IsU0FBUzRLLEVBQVVKLEVBQUc5TSxFQUFLbU4sR0FDekI3SixFQUFHd0osRUFBRSt1QyxHQUFZNzdDLEVBQUssQ0FBRVYsSUFBSyxXQUFjLE9BQU9pRixLQUFLNEksTUFHekQsU0FBUzdOLEVBQUkrOUMsRUFBTU4sRUFBT24xQyxFQUFPMDFDLEdBQy9CLElBQ0lDLEVBQVdsMUMsR0FEQ1QsR0FFaEIsR0FBSTIxQyxFQUFXUixFQUFRTSxFQUFLbkIsR0FBVSxNQUFNM3lDLEVBQVd1eUMsR0FDdkQsSUFBSWo1QyxFQUFRdzZDLEVBQUtwQixHQUFTdUIsR0FDdEJydkMsRUFBUW92QyxFQUFXRixFQUFLbEIsR0FDeEJzQixFQUFPNTZDLEVBQU0wRCxNQUFNNEgsRUFBT0EsRUFBUTR1QyxHQUN0QyxPQUFPTyxFQUFpQkcsRUFBT0EsRUFBS3p1QyxVQUV0QyxTQUFTdkMsRUFBSTR3QyxFQUFNTixFQUFPbjFDLEVBQU84MUMsRUFBWWgrQyxFQUFPNDlDLEdBQ2xELElBQ0lDLEVBQVdsMUMsR0FEQ1QsR0FFaEIsR0FBSTIxQyxFQUFXUixFQUFRTSxFQUFLbkIsR0FBVSxNQUFNM3lDLEVBQVd1eUMsR0FJdkQsSUFIQSxJQUFJajVDLEVBQVF3NkMsRUFBS3BCLEdBQVN1QixHQUN0QnJ2QyxFQUFRb3ZDLEVBQVdGLEVBQUtsQixHQUN4QnNCLEVBQU9DLEdBQVloK0MsR0FDZGpCLEVBQUksRUFBR0EsRUFBSXMrQyxFQUFPdCtDLElBQUtvRSxFQUFNc0wsRUFBUTFQLEdBQUtnL0MsRUFBS0gsRUFBaUI3K0MsRUFBSXMrQyxFQUFRdCtDLEVBQUksR0FHM0YsR0FBS3VKLEVBQU8rSSxJQWdGTCxDQUNMLElBQUt2TSxFQUFNLFdBQ1RtRixFQUFhLE9BQ1JuRixFQUFNLFdBQ1gsSUFBSW1GLEdBQWMsTUFDZG5GLEVBQU0sV0FJVixPQUhBLElBQUltRixFQUNKLElBQUlBLEVBQWEsS0FDakIsSUFBSUEsRUFBYWt6QyxLQXBPRixlQXFPUmx6QyxFQUFhM0ssT0FDbEIsQ0FNRixJQURBLElBQ3lDZ0IsRUFEckMyOUMsR0FKSmgwQyxFQUFlLFNBQXFCeEUsR0FFbEMsT0FEQStDLEVBQVczRCxLQUFNb0YsR0FDVixJQUFJb3lDLEVBQVcxekMsRUFBUWxELE1BRUkwMkMsR0FBYUUsRUFBV0YsR0FDbkRueEMsRUFBT2pDLEVBQUtzekMsR0FBYWp3QixFQUFJLEVBQVFwaEIsRUFBS3ZGLE9BQVMybUIsSUFDbkQ5ckIsRUFBTTBLLEVBQUtvaEIsUUFBU25pQixHQUFlaEosRUFBS2dKLEVBQWMzSixFQUFLKzdDLEVBQVcvN0MsSUFFMUUrSCxJQUFTNDFDLEVBQWlCOTNDLFlBQWM4RCxHQUcvQyxJQUFJMHpDLEVBQU8sSUFBSXh6QyxFQUFVLElBQUlGLEVBQWEsSUFDdENpMEMsRUFBVy96QyxFQUFVZ3lDLEdBQVdnQyxRQUNwQ1IsRUFBS1EsUUFBUSxFQUFHLFlBQ2hCUixFQUFLUSxRQUFRLEVBQUcsYUFDWlIsRUFBS1MsUUFBUSxJQUFPVCxFQUFLUyxRQUFRLElBQUkxMUMsRUFBWXlCLEVBQVVneUMsR0FBWSxDQUN6RWdDLFFBQVMsU0FBaUJydUMsRUFBWTlQLEdBQ3BDaytDLEVBQVNoL0MsS0FBSzJGLEtBQU1pTCxFQUFZOVAsR0FBUyxJQUFNLEtBRWpEcStDLFNBQVUsU0FBa0J2dUMsRUFBWTlQLEdBQ3RDaytDLEVBQVNoL0MsS0FBSzJGLEtBQU1pTCxFQUFZOVAsR0FBUyxJQUFNLE9BRWhELFFBaEhIaUssRUFBZSxTQUFxQnhFLEdBQ2xDK0MsRUFBVzNELEtBQU1vRixFQTlJRixlQStJZixJQUFJNkgsRUFBYW5KLEVBQVFsRCxHQUN6QlosS0FBS2k1QyxHQUFLcjBDLEVBQVV2SyxLQUFLLElBQUk4SyxNQUFNOEgsR0FBYSxHQUNoRGpOLEtBQUsyM0MsR0FBVzFxQyxHQUdsQjNILEVBQVksU0FBa0IwQyxFQUFRaUQsRUFBWWdDLEdBQ2hEdEosRUFBVzNELEtBQU1zRixFQXBKTCxZQXFKWjNCLEVBQVdxRSxFQUFRNUMsRUFySlAsWUFzSlosSUFBSXEwQyxFQUFlenhDLEVBQU8ydkMsR0FDdEJ0dkMsRUFBUzVKLEVBQVV3TSxHQUN2QixHQUFJNUMsRUFBUyxHQUFLQSxFQUFTb3hDLEVBQWMsTUFBTXowQyxFQUFXLGlCQUUxRCxHQUFJcUQsR0FESjRFLE9BQTRCeFAsSUFBZndQLEVBQTJCd3NDLEVBQWVweEMsRUFBUzdGLEVBQVN5SyxJQUMvQ3dzQyxFQUFjLE1BQU16MEMsRUF4Si9CLGlCQXlKZmhGLEtBQUswM0MsR0FBVzF2QyxFQUNoQmhJLEtBQUs0M0MsR0FBV3Z2QyxFQUNoQnJJLEtBQUsyM0MsR0FBVzFxQyxHQUdkeUQsSUFDRi9ILEVBQVV2RCxFQWhKSSxhQWdKdUIsTUFDckN1RCxFQUFVckQsRUFsSkQsU0FrSm9CLE1BQzdCcUQsRUFBVXJELEVBbEpJLGFBa0pvQixNQUNsQ3FELEVBQVVyRCxFQWxKSSxhQWtKb0IsT0FHcEN6QixFQUFZeUIsRUFBVWd5QyxHQUFZLENBQ2hDaUMsUUFBUyxTQUFpQnR1QyxHQUN4QixPQUFPbFEsRUFBSWlGLEtBQU0sRUFBR2lMLEdBQVksSUFBTSxJQUFNLElBRTlDeXVDLFNBQVUsU0FBa0J6dUMsR0FDMUIsT0FBT2xRLEVBQUlpRixLQUFNLEVBQUdpTCxHQUFZLElBRWxDMHVDLFNBQVUsU0FBa0IxdUMsR0FDMUIsSUFBSXV0QyxFQUFRejlDLEVBQUlpRixLQUFNLEVBQUdpTCxFQUFZbkosVUFBVSxJQUMvQyxPQUFRMDJDLEVBQU0sSUFBTSxFQUFJQSxFQUFNLEtBQU8sSUFBTSxJQUU3Q29CLFVBQVcsU0FBbUIzdUMsR0FDNUIsSUFBSXV0QyxFQUFRejlDLEVBQUlpRixLQUFNLEVBQUdpTCxFQUFZbkosVUFBVSxJQUMvQyxPQUFPMDJDLEVBQU0sSUFBTSxFQUFJQSxFQUFNLElBRS9CcUIsU0FBVSxTQUFrQjV1QyxHQUMxQixPQUFPc3RDLEVBQVV4OUMsRUFBSWlGLEtBQU0sRUFBR2lMLEVBQVluSixVQUFVLE1BRXREZzRDLFVBQVcsU0FBbUI3dUMsR0FDNUIsT0FBT3N0QyxFQUFVeDlDLEVBQUlpRixLQUFNLEVBQUdpTCxFQUFZbkosVUFBVSxPQUFTLEdBRS9EaTRDLFdBQVksU0FBb0I5dUMsR0FDOUIsT0FBT210QyxFQUFjcjlDLEVBQUlpRixLQUFNLEVBQUdpTCxFQUFZbkosVUFBVSxJQUFLLEdBQUksSUFFbkVrNEMsV0FBWSxTQUFvQi91QyxHQUM5QixPQUFPbXRDLEVBQWNyOUMsRUFBSWlGLEtBQU0sRUFBR2lMLEVBQVluSixVQUFVLElBQUssR0FBSSxJQUVuRXczQyxRQUFTLFNBQWlCcnVDLEVBQVk5UCxHQUNwQytNLEVBQUlsSSxLQUFNLEVBQUdpTCxFQUFZd3RDLEVBQVF0OUMsSUFFbkNxK0MsU0FBVSxTQUFrQnZ1QyxFQUFZOVAsR0FDdEMrTSxFQUFJbEksS0FBTSxFQUFHaUwsRUFBWXd0QyxFQUFRdDlDLElBRW5DOCtDLFNBQVUsU0FBa0JodkMsRUFBWTlQLEdBQ3RDK00sRUFBSWxJLEtBQU0sRUFBR2lMLEVBQVl5dEMsRUFBU3Y5QyxFQUFPMkcsVUFBVSxLQUVyRG80QyxVQUFXLFNBQW1CanZDLEVBQVk5UCxHQUN4QytNLEVBQUlsSSxLQUFNLEVBQUdpTCxFQUFZeXRDLEVBQVN2OUMsRUFBTzJHLFVBQVUsS0FFckRxNEMsU0FBVSxTQUFrQmx2QyxFQUFZOVAsR0FDdEMrTSxFQUFJbEksS0FBTSxFQUFHaUwsRUFBWTB0QyxFQUFTeDlDLEVBQU8yRyxVQUFVLEtBRXJEczRDLFVBQVcsU0FBbUJudkMsRUFBWTlQLEdBQ3hDK00sRUFBSWxJLEtBQU0sRUFBR2lMLEVBQVkwdEMsRUFBU3g5QyxFQUFPMkcsVUFBVSxLQUVyRHU0QyxXQUFZLFNBQW9CcHZDLEVBQVk5UCxHQUMxQytNLEVBQUlsSSxLQUFNLEVBQUdpTCxFQUFZNHRDLEVBQVMxOUMsRUFBTzJHLFVBQVUsS0FFckR3NEMsV0FBWSxTQUFvQnJ2QyxFQUFZOVAsR0FDMUMrTSxFQUFJbEksS0FBTSxFQUFHaUwsRUFBWTJ0QyxFQUFTejlDLEVBQU8yRyxVQUFVLE9Bc0N6RHEzQixFQUFlL3pCLEVBL1BJLGVBZ1FuQit6QixFQUFlN3pCLEVBL1BDLFlBZ1FoQmxKLEVBQUtrSixFQUFVZ3lDLEdBQVk3ekMsRUFBT2tFLE1BQU0sR0FDeENqTyxFQUFvQixZQUFJMEwsRUFDeEIxTCxFQUFpQixTQUFJNEwsRywrRkNuUnJCLGVBQ0EsWUFDQSxXQUNBLFdBQ0EsUUFDQSxRQUNBLE9BQ0EsZ0JBQ0EsVyxzNENBRU1pMUMsRSxXQUNGLGMsNEZBQWMsU0FDVnY2QyxLQUFLdzZDLFlBQWMsR0FDbkJ4NkMsS0FBS3k2QyxTQUFXLEdBQ2hCejZDLEtBQUswNkMsV0FBYSxJQUFJL3NDLElBRXRCM04sS0FBS3dyQixXQUNMeHJCLEtBQUtnc0IsTUFDTGhzQixLQUFLMjZDLFlBQ0wzNkMsS0FBS2lxQixXQUNManFCLEtBQUtrcUIsWUFDTGxxQixLQUFLMHJCLFVBQVcsRSxvRUE4RUhrdkIsRUFBTUMsR0FBd0IsSUFBYnJvQyxFQUFhLHVEQUFKLEdBRW5DaW9DLEVBQVdHLEVBR2Y1NkMsS0FBS3dyQixXQUFhLEdBTHlCLE1BTVIsVUFBVXN2QixtQkFBbUJMLEVBQVMvZ0MsT0FBUWxILEdBTnRDLFNBTzNDLEdBRENpb0MsRUFBUy9nQyxPQU5pQyxLQU16QjFaLEtBQUswckIsU0FOb0IsS0FPdkMxckIsS0FBSzByQixTQUFVLE9BQU8rdUIsRUFFMUIsSUFBSyxJQUFJdmdELEVBQUksRUFBR0EsRUFBSXVnRCxFQUFTL2dDLE9BQU85WSxPQUFRMUcsSUFBSyxDQUM3QyxJQUFNNnhCLE9BQTZDLElBQTFCMHVCLEVBQVMvZ0MsT0FBT3hmLEdBQUdxVSxHQUFxQixRQUFVclUsRUFBSXVnRCxFQUFTL2dDLE9BQU94ZixHQUFHcVUsR0FDNUZ3c0MsT0FBK0MsSUFBNUJOLEVBQVMvZ0MsT0FBT3hmLEdBQUdzQyxLQUF1QixVQUFVNnZCLFVBQVlvdUIsRUFBUy9nQyxPQUFPeGYsR0FBR3NDLEtBQ3RHMHlCLEVBQVcsSUFBSSxFQUFKLFFBQWNuRCxFQUFXZ3ZCLEVBQVdOLEVBQVMvZ0MsT0FBT3hmLEdBQUd1QyxRQUN4RXVELEtBQUt3ckIsV0FBV2pvQixLQUFLMnJCLEdBT3pCLEdBSkl1ckIsRUFBU3p1QixRQUNUaHNCLEtBQUtnc0IsTUFBUSxJQUFJLEVBQUosUUFBY3l1QixFQUFTenVCLE1BQU14dkIsS0FBTWkrQyxFQUFTenVCLE1BQU02QixRQUVuRTd0QixLQUFLMHJCLFNBQVcsVUFBVXN2QixXQUFXaDdDLEtBQUt3ckIsV0FBWXhyQixLQUFLZ3NCLE1BQU94WixHQUM5RHhTLEtBQUswckIsU0FBVSxPQUFPK3VCLEVBRzFCLEVBQUFubkIsVUFBVUUsUUFBUW5HLFlBQVksVUFBVUQsU0FBU25ELFdBQVksVUFBVW1ELFNBQVNsRCxhQUVoRixVQUFVK3dCLHNCQUNWL3FDLFNBQVN1aEIsZUFBZSxrQkFBa0JwTyxVQUFZLEdBQ3REblQsU0FBU3VoQixlQUFlLGtCQUFrQnpoQixZQUFZLFVBQVUyZCxVQUVoRSxFQUFBMkYsVUFBVUUsUUFBUTBuQixjQUNsQixVQUFVeG5CLG9CQUFvQixVQUFVL0YsVUFNeEMsSUFBSXd0QixFQUFjLEdBb0NsQixPQW5DQVYsRUFBU2hjLFdBQVd0MEIsUUFBUSxTQUFBaXhDLEdBQ3hCLFFBQW1DLElBQXhCQSxFQUFXQyxTQUEwQixDQUM1QyxJQUFNQyxPQUFpQyxJQUFsQkYsRUFBVzdzQyxHQUFxQjZzQyxFQUFXdmdCLFNBQVd1Z0IsRUFBVzdzQyxHQUVqRTNULE9BQU91TCxLQUFLaTFDLEVBQVdDLFVBQy9CbHhDLFFBQVEsU0FBQW94QyxHQUNqQixRQUF3QyxJQUE3QkgsRUFBV0MsU0FBU0UsR0FBc0IsQ0FDakQsSUFBSUMsRUFBZSxDQUNmanRDLEdBQUkrc0MsRUFBTWp1QyxPQUFPLElBQUtrdUMsRUFBSyxZQUFhLEVBQUcsS0FDM0NFLFlBQWFGLEVBQ2IxZ0IsU0FBVXVnQixFQUFXdmdCLFVBRXpCamdDLE9BQU91TCxLQUFLaTFDLEVBQVdDLFNBQVNFLElBQU1weEMsUUFBUSxTQUFBMmdCLEdBQzFDMHdCLEVBQWExd0IsR0FBS3N3QixFQUFXQyxTQUFTRSxHQUFLendCLEtBRS9DcXdCLEVBQVk1M0MsS0FBS2k0QyxXQUl6QkwsRUFBWTUzQyxLQUFLNjNDLEtBY3pCWCxFQUFTaGMsV0FBYTBjLEVBRWZWLEksa0NBR0NHLEdBQ1IsSUFBSUMsR0FBWSxFQXVCaEIsWUFyQjJDLElBQS9CNzZDLEtBQUt3NkMsWUFBWWpvQyxXQUE2QjRLLEtBQUtHLFVBQVVzOUIsRUFBS3JvQyxhQUFlNEssS0FBS0csVUFBVXRkLEtBQUt3NkMsWUFBWWpvQyxpQkFDckYsSUFBNUJ2UyxLQUFLdzZDLFlBQVk5Z0MsUUFBMEJ5RCxLQUFLRyxVQUFVczlCLEVBQUtsaEMsVUFBWXlELEtBQUtHLFVBQVV0ZCxLQUFLdzZDLFlBQVk5Z0MsY0FDaEYsSUFBNUIxWixLQUFLdzZDLFlBQVk5Z0MsYUFDRCxJQUFma2hDLEVBQUs1dUIsWUFBMkQsSUFBM0Joc0IsS0FBS3c2QyxZQUFZeHVCLE9BQXlCN08sS0FBS0csVUFBVXM5QixFQUFLNXVCLFNBQVc3TyxLQUFLRyxVQUFVdGQsS0FBS3c2QyxZQUFZeHVCLGNBQ2xILElBQTNCaHNCLEtBQUt3NkMsWUFBWXh1QixZQUErQyxJQUFmNHVCLEVBQUs1dUIsY0FBOEQsSUFBM0Joc0IsS0FBS3c2QyxZQUFZeHVCLFlBQStDLElBQWY0dUIsRUFBSzV1QixVQUV4SjZ1QixHQUFZLEdBRVpBLElBRUEsVUFBVTVuQyxTQUFTOG1CLFFBQ25CLFVBQVVwSyxTQUFXLEdBQ3JCLFVBQVUrQyxjQUFjcUgsUUFDeEIsVUFBVXJNLG1CQUFtQnFNLFFBQzdCLFVBQVV0SCxpQkFBaUJzSCxRQUMzQixVQUFVL0csbUJBQXFCLENBQUVILE9BQVEsQ0FBQyxVQUMxQyxVQUFVNEwsV0FBVzFFLFFBQ3JCLFVBQVVtTCxVQUFVbkwsUUFDcEIsVUFBVzZULFlBQVk3VCxTQUUzQi81QixLQUFLdzZDLFlBQWNJLEVBQ1pDLEksaUNBR0FhLEVBQVkxbUMsRUFBS3hDLEdBR3hCLElBRkEsSUFBTVksRUFBUXhZLE9BQU91TCxLQUFLNk8sR0FDdEIwVyxHQUFXLEVBQ05uRSxFQUFJLEVBQUdtZCxFQUFPdHhCLEVBQU14UyxPQUFRMm1CLEVBQUltZCxFQUFNbmQsSUFDM0MsSUFBS20wQixFQUFXcHhDLFNBQVM4SSxFQUFNbVUsSUFBSyxDQUNoQ21FLEdBQVcsRUFDWCxJQUFNaXdCLEVBQVczbUMsRUFBSTVCLEVBQU1tVSxJQUN2QnEwQixFQUFhLElBQU14b0MsRUFBTW1VLEdBQUssS0FDN0JwbEIsTUFBTWduQyxPQUFPd1MsSUFFYSxXQUFwQixFQUFPQSxHQUNkQyxHQUFjeitCLEtBQUtHLFVBQVVxK0IsR0FFN0JDLEdBQWMsSUFBTUQsRUFBVyxJQUovQkMsR0FBYyxHQUFLRCxFQU12Qm5wQyxFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLDJCQUE2QlMsRUFBTW1VLEdBQUssS0FBTTNVLFFBQVNncEMsRUFBV3A3QyxRQUFRLE1BQU8sS0FDckgsTUFHUixPQUFPa3JCLEksZ0NBT0RrdkIsRUFBTXBvQyxHQUNaLElBQUlrWixHQUFXLEVBRVksSUFBdkJrdkIsRUFBS2xoQyxPQUFPOVksU0FDWjhxQixHQUFXLEVBQ1hsWixFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLDZCQUE4QkMsUUFBUyxnQkFHL0UsSUFBSyxJQUFJMVksRUFBSSxFQUFHcVIsRUFBTXF2QyxFQUFLbGhDLE9BQU85WSxPQUFRMUcsRUFBSXFSLEtBRTFDbWdCLEVBQVcxckIsS0FBSzY3QyxXQUFXLFVBQVV6b0MsTUFBT3duQyxFQUFLbGhDLE9BQU94ZixHQUFJc1ksSUFGYnRZLElBQUssQ0FPcEQsSUFBSzBnRCxFQUFLbGhDLE9BQU94ZixHQUFHdUMsT0FBUSxDQUN4Qml2QixHQUFXLEVBQ1hsWixFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLHVDQUF3Q0MsUUFBU3VLLEtBQUtHLFVBQVVzOUIsRUFBS2xoQyxPQUFPeGYsSUFBSXNHLFFBQVEsTUFBTyxLQUNuSSxNQUdBLEdBRGtCbzZDLEVBQUtsaEMsT0FBT3hmLEdBQUd1QyxPQUNuQjJOLFFBQVEsU0FBVyxLQUFPd3dDLEVBQUtsaEMsT0FBT3hmLEdBQUcwUCxRQUFTZ3hDLEVBQUtsaEMsT0FBT3hmLEdBQUc2USxLQUFNLENBQ2pGMmdCLEdBQVcsRUFDWGxaLEVBQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssdURBQXdEQyxRQUFTdUssS0FBS0csVUFBVXM5QixFQUFLbGhDLE9BQU94ZixJQUFJc0csUUFBUSxNQUFPLEtBQ25KLE9BS1osSUFBSyxJQUFJdEcsRUFBSSxFQUFHcVIsRUFBTXF2QyxFQUFLbmMsV0FBVzc5QixPQUFRMUcsRUFBSXFSLEtBRTlDbWdCLEVBQVcxckIsS0FBSzY3QyxXQUFXLFVBQVV6b0MsTUFBT3duQyxFQUFLbmMsV0FBV3ZrQyxHQUFJc1ksSUFGYnRZLElBQUssQ0FPeEQsSUFBSzBnRCxFQUFLbmMsV0FBV3ZrQyxHQUFHMmdDLFNBQVUsQ0FDOUJuUCxHQUFXLEVBQ1hsWixFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLHVDQUF3Q0MsUUFBU3VLLEtBQUtHLFVBQVVzOUIsRUFBS25jLFdBQVd2a0MsSUFBSXNHLFFBQVEsTUFBTyxLQUN2SSxNQUNHLElBQUtvNkMsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFTLENBQ3BDMVQsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyxzQ0FBdUNDLFFBQVN1SyxLQUFLRyxVQUFVczlCLEVBQUtuYyxXQUFXdmtDLElBQUlzRyxRQUFRLE1BQU8sS0FDdEksTUFHQSxHQUFJbzZDLEVBQUtuYyxXQUFXdmtDLEdBQUc0WixZQUNkbFosT0FBT3VMLEtBQUssVUFBV2tNLFdBQVcvSCxTQUFTLFVBQVc2SixTQUFTeW1DLEVBQUtuYyxXQUFXdmtDLEdBQUc0WixZQUFhLENBQ2hHNFgsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyw0RkFBNkZDLFFBQVMsZ0JBQWtCZ29DLEVBQUtuYyxXQUFXdmtDLEdBQUc0WixVQUFVdFQsUUFBUSxNQUFPLElBQU0sS0FDOU0sTUFZUixHQUFJbzZDLEVBQUtuYyxXQUFXdmtDLEdBQUdnbEMsT0FBNkMsV0FBcEMsRUFBTzBiLEVBQUtuYyxXQUFXdmtDLEdBQUdnbEMsT0FBb0IsQ0FFMUUsR0FEQXhULEVBQVcxckIsS0FBSzY3QyxXQUFXLFVBQVU1VyxXQUFZMlYsRUFBS25jLFdBQVd2a0MsR0FBR2dsQyxNQUFPMXNCLEdBRXZFLE1BR0osUUFBNkMsSUFBbENvb0MsRUFBS25jLFdBQVd2a0MsR0FBR2dsQyxNQUFNMWlDLE9BQzNCNUIsT0FBT3VMLEtBQUssVUFBVTQwQixhQUFhendCLFNBQVMsVUFBVXd4QyxXQUFXbEIsRUFBS25jLFdBQVd2a0MsR0FBR2dsQyxNQUFNMWlDLE9BQVEsQ0FDbkdrdkIsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSywwREFBMkRDLFFBQVMsV0FBYWdvQyxFQUFLbmMsV0FBV3ZrQyxHQUFHZ2xDLE1BQU0xaUMsS0FBS2dFLFFBQVEsTUFBTyxJQUFNLEtBQ3hLLE9BS1osR0FBSW82QyxFQUFLbmMsV0FBV3ZrQyxHQUFHbU8sUUFBK0MsV0FBckMsRUFBT3V5QyxFQUFLbmMsV0FBV3ZrQyxHQUFHbU8sVUFDdkRxakIsRUFBVzFyQixLQUFLNjdDLFdBQVcsVUFBV3RuQyxjQUFlcW1DLEVBQUtuYyxXQUFXdmtDLEdBQUdtTyxPQUFRbUssSUFFNUUsTUFJUixHQUFJb29DLEVBQUtuYyxXQUFXdmtDLEdBQUc4Z0MsV0FDbkJ0UCxFQUFXMXJCLEtBQUsrN0Msa0JBQWtCbkIsRUFBS25jLFdBQVd2a0MsR0FBRzhnQyxTQUFVeG9CLElBRTNELE1BSVIsSUFBSyxJQUFJK1UsRUFBSSxFQUFHbWQsRUFBT2tXLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUXgrQixPQUFRMm1CLEVBQUltZCxLQUUxRGhaLEVBQVcxckIsS0FBSzY3QyxXQUFXLFVBQVd6b0MsTUFBT3duQyxFQUFLbmMsV0FBV3ZrQyxHQUFHa2xDLFFBQVE3WCxHQUFJL1UsSUFGWitVLElBQUssQ0FPckUsSUFBS3F6QixFQUFLbmMsV0FBV3ZrQyxHQUFHa2xDLFFBQVE3WCxHQUFHL3FCLEtBQU0sQ0FDckNrdkIsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyx1Q0FBd0NDLFFBQVN1SyxLQUFLRyxVQUFVczlCLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUTdYLElBQUkvbUIsUUFBUSxNQUFPLEtBQ2xKLE1BQ0csSUFBSzVGLE9BQU9xTCxPQUFPLFVBQVdnVCxhQUFhM08sU0FBU3N3QyxFQUFLbmMsV0FBV3ZrQyxHQUFHa2xDLFFBQVE3WCxHQUFHL3FCLE1BQU8sQ0FDNUZrdkIsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyx3QkFBMEJpb0MsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBRy9xQixLQUFPLEtBQU1vVyxRQUFTLFdBQWFnb0MsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBRy9xQixLQUFLZ0UsUUFBUSxNQUFPLElBQU0sS0FDdkwsTUFFSixHQUFJbzZDLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUTdYLEdBQUdsZixRQUEwRCxXQUFoRCxFQUFPdXlDLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUTdYLEdBQUdsZixVQUM3RXFqQixFQUFXMXJCLEtBQUs2N0MsV0FBVyxVQUFXdG5DLGNBQWVxbUMsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBR2xmLE9BQVFtSyxJQUV2RixNQUdSLEdBQUlvb0MsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBR3NVLFVBQThELFdBQWxELEVBQU8rZSxFQUFLbmMsV0FBV3ZrQyxHQUFHa2xDLFFBQVE3WCxHQUFHc1UsWUFDL0VuUSxFQUFXMXJCLEtBQUs2N0MsV0FBVyxVQUFXdG5DLGNBQWVxbUMsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBR3NVLFNBQVVycEIsSUFFekYsTUFHUixHQUFJb29DLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUTdYLEdBQUc4VixTQUFXemlDLE9BQU9xTCxPQUFPLFVBQVdnbkMsWUFBWTNpQyxTQUFTc3dDLEVBQUtuYyxXQUFXdmtDLEdBQUdrbEMsUUFBUTdYLEdBQUc4VixRQUFTLENBQzlIM1IsR0FBVyxFQUNYbFosRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyx3QkFBMEJpb0MsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBRzhWLE9BQVMsS0FBTXpxQixRQUFTLGFBQWVnb0MsRUFBS25jLFdBQVd2a0MsR0FBR2tsQyxRQUFRN1gsR0FBRzhWLE9BQU83OEIsUUFBUSxNQUFPLElBQU0sS0FDN0wsUUFLaEIsT0FBT2tyQixJLHdDQUdPc3dCLEVBQWN4cEMsR0FDNUIsR0FBNEIsaUJBQWpCd3BDLEdBQXFELGlCQUFqQkEsRUFBMkIsQ0FDdEUsSUFBTUMsRUFBaUMsaUJBQWpCRCxFQUE0QixjQUFnQkEsRUFBZSxlQUFpQkEsRUFBYXg3QyxRQUFRLE1BQU8sSUFBTSxJQUVwSSxPQURBZ1MsRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSywwQkFBMkJDLFFBQVNxcEMsSUFDakUsRUFLWCxHQURlajhDLEtBQUs2N0MsV0FBVyxVQUFhem9DLE1BQU80b0MsRUFBY3hwQyxHQUU3RCxPQUFPLEVBR1gsR0FBSXdwQyxFQUFhbG9DLFlBQ1JsWixPQUFPdUwsS0FBSyxVQUFXa00sV0FBVy9ILFNBQVMsVUFBVzZKLFNBQVM2bkMsRUFBYWxvQyxZQUU3RSxPQURBdEIsRUFBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyw0RkFBNkZDLFFBQVMsZ0JBQWtCb3BDLEVBQWFsb0MsVUFBVXRULFFBQVEsTUFBTyxJQUFNLE1BQ2pNLEVBR2YsR0FBSXc3QyxFQUFhbDFDLE1BQXFDLFdBQTdCLEVBQU9rMUMsRUFBYWwxQyxPQUV6QyxHQURtQjlHLEtBQUs2N0MsV0FBVyxVQUFhSyxVQUFXRixFQUFhbDFDLEtBQU0wTCxHQUUxRSxPQUFPLE9BRVIsR0FBaUMsaUJBQXRCd3BDLEVBQWFsMUMsS0FFM0IsT0FEQTBMLEVBQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUssc0JBQXVCQyxRQUFTLFVBQVlvcEMsRUFBYWwxQyxPQUN0RixFQUVYLFFBQUlrMUMsRUFBYWhoQixVQUNOaDdCLEtBQUsrN0Msa0JBQWtCQyxFQUFhaGhCLFNBQVV4b0IsSyx3REFLbERvb0MsRyxxSEFBTXBvQyxFLCtCQUFTLEdBQ2xCMkssS0FBS0csVUFBVTlLLEdBQ2Z4UyxLQUFLMHJCLFVBQVcsRUFNZjFyQixLQUFLMHJCLFMsb0JBQ04sVUFBVXl3QixXQUNWLFVBQWFwdUIsT0FBT2dNLFFBQ3BCLFVBQWFxaUIsV0FBV3JpQixRQUNHLElBQXZCNmdCLEVBQUtsaEMsT0FBTzlZLE8saUJBQ1osVUFBVXFTLFNBQVM4bUIsUUFDbkIsVUFBVXBLLFNBQVcsR0FDckIsVUFBVStDLGNBQWNxSCxRQUN4QixVQUFVdEgsaUJBQWlCc0gsUUFDM0IsVUFBVS9HLG1CQUFxQixDQUFFSCxPQUFRLENBQUMsVUFDMUMsVUFBVTRMLFdBQVcxRSxRQUNyQixVQUFVbUwsVUFBVW5MLFFBQ3BCLFVBQVc2VCxZQUFZN1QsUUFDbkI3cEIsU0FBU3VoQixlQUFlLG9CQUN4QnZoQixTQUFTdWhCLGVBQWUsa0JBQWtCcE8sVUFBWSxJLCtCQUkxRCxFQUFBaVEsVUFBVUUsUUFBUTZvQixhQUFhLFVBQVdob0MsWUFFcEN3bUMsRUFBWTc2QyxLQUFLczhDLFlBQVkxQixHLFVBQ2Q1NkMsS0FBS3U4QyxpQkFBaUIzQixFQUFNQyxFQUFXcm9DLEcsWUFBeERpb0MsRSxRQUdTbG9DLGdCQUEyQyxJQUF2QmtvQyxFQUFTbG9DLFlBQ3RDdlMsS0FBS3VTLFVBQVlrb0MsRUFBU2xvQyxXQUUxQmtvQyxFQUFTK0Isa0JBQStDLElBQXpCL0IsRUFBUytCLGFBQ3hDLFVBQVdDLGtCQUFrQmhDLEVBQVMrQixZQUFhaHFDLEdBSXZEeFMsS0FBS3krQixXQUFhZ2MsRUFBU2hjLFdBQzNCL21CLFFBQVErQixJQUFJLHlCQUEwQnpaLEtBQUt5K0IsYUFDdkN0NUIsTUFBTStQLFFBQVFsVixLQUFLeStCLFksNEJBRVZDLEdBQ0wsSUFBSUksRUFBZ0IsRUFBS0wsV0FBV0MsR0FLaENnZSxFQUFleHNDLFNBQVNrVCxjQUFjLE9BQzFDbFQsU0FBU3lzQyxLQUFLM3NDLFlBQVkwc0MsR0FDMUJBLEVBQWFyNUIsVUFBWSxVQUFVM0osT0FBT29sQixFQUFjcG1CLFVBQVVpVSxXQUFXMEQsVUFFN0UzWSxRQUFRK0IsSUFBSSxvQ0FBcUNxbEIsRUFBZSxVQUFVL08scUJBQzFFLElBQUk2c0IsRUFBaUJGLEVBQWF0dEIsaUJBQWlCMFAsRUFBY2pFLFVBQzNEZ2lCLEVBQWdCLFVBQVU5c0Isb0JBQW9CK08sRUFBY3BtQixVQUFVb21CLEVBQWMyYyxhQUN0RnJiLEVBQVUsR0FBSWpRLEVBQVEsR0FBSTJzQixFQUFjLEdBQ3hDRixFQUFlaDhDLE9BQVMsR0FDeEIsR0FBR3VKLFFBQVE5UCxLQUFLdWlELEVBQWdCLFNBQUN0aUQsRUFBR0osR0FDaEMsSUFBTXV6QixFQUFNbnpCLEVBQUVxcEIsYUFBYSxXQUNFLElBQWxCazVCLEdBQ0hBLEVBQWN2eUMsU0FBU21qQixLQUN2QnF2QixFQUFjQSxFQUFZenZDLE9BQU8sSUFBS29nQixFQUFLLEtBQzNDMlMsRUFBUTc4QixLQUFLa3FCLEdBQ2IwQyxFQUFNNXNCLEtBQUtqSixNQVUzQndpRCxFQUFjQSxFQUFZcnFDLFVBQVUsRUFBR3FxQyxFQUFZbDhDLE9BQVMsR0FDNUQ4VyxRQUFRK0IsSUFBSSxvQkFBcUJxakMsR0FDakMsRUFBS3JlLFdBQVdDLEdBQVE3RCxTQUFXaWlCLEVBQ25DcGxDLFFBQVErQixJQUFJLDBCQUEyQjJtQixFQUFTMGMsR0FFaEQsSUFBSUMsRUFBYyxHQWFsQixHQVpBLEdBQUc1eUMsUUFBUTlQLEtBQUtxaUQsRUFBYXR0QixpQkFBaUIsU0FBVSxTQUFVNHRCLEdBQzlERCxFQUFZeDVDLEtBQUt5NUMsRUFBR3I1QixhQUFhLE9BR2pDLElBRkEsSUFBSXM1QixFQUFTRCxFQUFHcjVCLGFBQWEsU0FBU2xrQixNQUFNLEtBQ3hDeTlDLEVBQVcsR0FDTmhqRCxFQUFJLEVBQUdxUixFQUFNMHhDLEVBQU9yOEMsT0FBUTFHLEVBQUlxUixFQUFLclIsSUFDeEIsU0FBZCtpRCxFQUFPL2lELEtBQ1BnakQsRUFBV0QsRUFBTy9pRCxFQUFJLElBRzlCLFVBQVVnckMsVUFBVWg5QixJQUFJODBDLEVBQUdyNUIsYUFBYSxNQUFPdTVCLEtBRW5ELFVBQVV2dEIsU0FBVixZQUF5QixJQUFJdEcsSUFBSixZQUFZLFVBQVVzRyxVQUFhb3RCLE1BQ3ZDLElBQWpCNXNCLEVBQU12dkIsT0FNTixNQUxzQyxpQkFBM0JrK0IsRUFBY2pFLFNBQ3JCcm9CLEVBQU9FLEtBQU8sQ0FBRWxXLEtBQU0sUUFBU21XLElBQUsseUNBQTBDQyxRQUFTLGNBQWdCa3NCLEVBQWNqRSxVQUVySHJvQixFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLGdCQUFrQm1zQixFQUFjakUsU0FBVyxvQkFBcUJqb0IsUUFBUyxlQUFpQmtzQixFQUFjakUsU0FBU3I2QixRQUFRLE1BQU8sSUFBTSxLQUU5SyxXQUdKcytCLEVBQWNqRSxTQUFXLEVBQUtzaUIsYUFBYXJlLEVBQWNqRSxVQUd6RCxJQURBLElBQUlrRSxFQUFtQixHQUNkN2tDLEVBQUksRUFBR0EsRUFBSSxVQUFVbzJCLGFBQWExdkIsT0FBUTFHLElBQy9DNmtDLEVBQWlCeDdCLEtBQUssVUFBVStzQixhQUFhcDJCLElBS2pELElBQUlrakQsT0FBUyxFQUVUQyxFQUFTdmUsRUFBY3BtQixTQUFXLElBQU1vbUIsRUFBY2pFLFNBMEIxRCxHQXpCZSxZQUFYd2lCLElBQ0FBLEVBQVMsTUFBSCxPQUFTLFVBQVUxdEIsU0FBUzd2QixLQUFLLGNBRUssSUFBckMsVUFBVTIrQixXQUFXMWpDLElBQUlzaUQsSUFDaENELEVBQVksVUFBVTNlLFdBQVcxakMsSUFBSXNpRCxJQUMzQkMsVUFBVXhlLEVBQWVDLEdBQWtCLEVBQU1xQixFQUFTNXRCLEtBRXBFNHFDLEVBQVksSUFBSSxFQUFKLFNBQ0ZFLFVBQVV4ZSxFQUFlQyxHQUFrQixFQUFPcUIsRUFBUzV0QixHQUNyRSxVQUFVaXNCLFdBQVd2MkIsSUFBSW0xQyxFQUFRRCxTQUdOLElBQXBCQSxFQUFVbGUsWUFBa0QsSUFBbEJtQixJQUNqRCtjLEVBQVVsZSxNQUFRLENBQ2QzaEMsT0FBUThpQyxFQUFjOXhCLEdBQ3RCL1IsS0FBTSxVQUFVdStCLFlBQVl1RCxVQUloQyxFQUFLL3JCLFVBQVVxQixLQUFPLEdBQ3RCd3BDLEVBQVVHLGlCQUFpQixFQUFLaHJDLFVBQVdDLEdBSzNDMmQsRUFBTXZ2QixPQUFTLEVBQUcsQ0FDbEIsSUFBTTQ4QyxFQUFnQixJQUFJN3ZDLElBQzFCLEdBQUd4RCxRQUFROVAsS0FBSzgxQixFQUFPLFNBQVVTLEdBQzdCLEdBQUlBLEVBQUt0QixVQUFVNEMsU0FBUyxRQUFTLENBQ2pDLElBQUk3ZSxFQUFTdWQsRUFBS2pOLGFBQWEsTUFDM0I4NUIsRUFBVTdzQixFQUFLak4sYUFBYSxTQU9oQyxRQU4wQyxJQUEvQjY1QixFQUFjemlELElBQUkwaUQsR0FDekJELEVBQWN0MUMsSUFBSXUxQyxFQUFTLEdBRTNCRCxFQUFjdDFDLElBQUl1MUMsRUFBU0QsRUFBY3ppRCxJQUFJMGlELEdBQVcsUUFHZCxJQUFuQyxVQUFVeHFDLFNBQVNsWSxJQUFJc1ksR0FBeUIsQ0FFdkQsR0FBcUIsU0FBakJ1ZCxFQUFLemEsUUFBb0IsQ0FDekIsSUFBSXVuQyxFQUFXLEVBQUE3cUMsVUFBVWtrQixPQUFPbkcsR0FDNUIrc0IsRUFBbUIsRUFBQTlxQyxVQUFVK3FDLGVBQWVGLEdBRWhELEdBQUlDLEVBQWtCLENBQ2xCLEdBQThCLFVBQTFCQSxFQUFpQm5oRCxLQUNqQixJQUFLLElBQUl0QyxFQUFJLEVBQUdBLEVBQUl5akQsRUFBaUJoeEMsS0FBSy9MLE9BQVExRyxJQUM5Q3dqRCxFQUFTbm5DLEtBQUssS0FBTyxFQUFJLEVBQUlyYyxJQUFNeWpELEVBQWlCaHhDLEtBQUt6UyxHQUFHLEdBQUcsR0FDL0R3akQsRUFBU25uQyxLQUFLLEtBQU8sRUFBSSxFQUFJcmMsSUFBTXlqRCxFQUFpQmh4QyxLQUFLelMsR0FBRyxHQUFHLEdBQy9Ed2pELEVBQVNubkMsS0FBSyxLQUFPLEVBQUksRUFBSXJjLElBQU15akQsRUFBaUJoeEMsS0FBS3pTLEdBQUcsR0FBRyxHQUMvRHdqRCxFQUFTbm5DLEtBQUssS0FBTyxFQUFJLEVBQUlyYyxJQUFNeWpELEVBQWlCaHhDLEtBQUt6UyxHQUFHLEdBQUcsUUFLbkUsSUFGQSxJQUFJMmpELEVBQWtCampELE9BQU91TCxLQUFLdzNDLEVBQWlCaHhDLE1BRTFDelMsRUFBSSxFQUFHQSxFQUFJMmpELEVBQWdCajlDLE9BQVExRyxJQUFLLENBQzdDLElBQUk0akQsRUFBUUQsRUFBZ0IzakQsR0FDZCxXQUFWNGpELEVBQ0lILEVBQWlCaHhDLEtBQUtteEMsR0FBT2w5QyxPQUFTLEdBQ3RDODhDLEVBQVNubkMsS0FBS2tNLFlBQWNrN0IsRUFBaUJoeEMsS0FBS214QyxHQUFPLEdBQUcvK0IsR0FBSyxFQUNqRTIrQixFQUFTbm5DLEtBQUttTSxhQUFlaTdCLEVBQWlCaHhDLEtBQUtteEMsR0FBTyxHQUFHLytCLEdBQUssSUFFbEUyK0IsRUFBU25uQyxLQUFLa00sWUFBYyxFQUM1Qmk3QixFQUFTbm5DLEtBQUttTSxhQUFlaTdCLEVBQWlCaHhDLEtBQUtteEMsR0FBTyxHQUFHLytCLEdBQUssR0FHdEUyK0IsRUFBU25uQyxLQUFLdW5DLEdBQVNILEVBQWlCaHhDLEtBQUtteEMsR0FJekRsdEIsRUFBTyxFQUFBL2QsVUFBVWtyQyxNQUFNTCxJQU0vQixJQUZBLElBQUlNLEVBQWdCLEdBQ2hCQyxFQUFVLEdBQUgsU0FBT3J0QixFQUFLdGEsYUFDZHBjLEVBQUksRUFBR0EsRUFBSStqRCxFQUFRcjlDLE9BQVExRyxJQUFLLENBQ3JDLElBQUk0aEMsRUFBV21pQixFQUFRL2pELEdBQ3ZCOGpELEVBQWNsaUIsRUFBU3JoQyxNQUFRbTJCLEVBQUtqTixhQUFhbVksRUFBU3JoQyxNQUU5RCxJQUFJeWpELEVBQVVodUMsU0FBU3VoQixlQUFlcGUsR0FDdEMycUMsRUFBYSxRQUFjRSxFQUFRdHNCLFVBQVVDLE1BQzdDbXNCLEVBQWEsU0FBZUUsRUFBUXRzQixVQUFVaUQsT0FDOUNtcEIsRUFBYSxJQUFVRSxFQUFRdHNCLFVBQVUzYSxFQUN6QyttQyxFQUFhLElBQVVFLEVBQVF0c0IsVUFBVTFhLEVBQ3pDOG1DLEVBQWEsUUFBY3B0QixFQUFLRyxZQUNoQ2l0QixFQUFhLEdBQVMzcUMsRUFDdEIsSUFBSStlLEVBQXFCalYsS0FBS0MsTUFBTXdULEVBQUtqTixhQUFhLGVBV3RELEdBVkl4ZSxNQUFNK1AsUUFBUWtkLEtBQ2RBLEVBQXFCQSxFQUFtQixJQUU1Q0EsRUFBbUIrckIsT0FBbkIsV0FBZ0NYLEVBQWN6aUQsSUFBSTBpRCxTQUNJLElBQTNDLFVBQVVockIsaUJBQWlCMTNCLElBQUlzWSxLQUN0QyxVQUFVb2YsaUJBQWlCMTNCLElBQUlzWSxHQUFROHFDLE9BQXZDLFdBQW9EWCxFQUFjemlELElBQUkwaUQsS0FFMUVPLEVBQWMsY0FBZ0I1ckIsRUFFOUI0ckIsRUFBYSxRQUFjcHRCLEVBQUt6YSxTQUNYLFNBQWpCeWEsRUFBS3phLFNBQXVDLFNBQWpCeWEsRUFBS3phLFdBQ2hDNm5DLEVBQWMsb0JBQXNCOXRDLFNBQVN1aEIsZUFBZXBlLEdBQVF3RCxpQkFDcEVtbkMsRUFBYyxxQkFBdUI5dEMsU0FBU3VoQixlQUFlcGUsR0FBUXdELGlCQUNoRCxTQUFqQitaLEVBQUt6YSxTQUFvQixDQUN6QixJQUFJaW9DLEVBQVEsRUFBQXZyQyxVQUFVZ0wsWUFBWStTLEVBQUtqTixhQUFhLEtBQU0sYUFDckMsSUFBVnk2QixHQUF5QkEsR0FDYixTQUFmQSxFQUFNNWhELE9BQ053aEQsRUFBYSxHQUFTSSxFQUFNenhDLEtBQUtrUyxHQUNqQ20vQixFQUFhLEdBQVNJLEVBQU16eEMsS0FBS21TLEdBQ2pDay9CLEVBQWEsWUFBa0JJLEVBQU16eEMsS0FBS3lTLFVBQVlnL0IsRUFBTXp4QyxLQUFLdVMsV0FBYWsvQixFQUFNenhDLEtBQUt3UyxVQUFZLEdBQWUsRUFBVmxoQixLQUFLdWlCLElBQy9HdzlCLEVBQWEsVUFBaUJJLEVBQU16eEMsS0FBS3lTLFVBQW9DZy9CLEVBQU16eEMsS0FBS3dTLFNBQW5DaS9CLEVBQU16eEMsS0FBS3VTLFlBQThDLEVBQVZqaEIsS0FBS3VpQixHQUFTLEdBQWUsRUFBVnZpQixLQUFLdWlCLElBQ3hINDlCLEVBQU16eEMsS0FBSzBTLE9BQU96ZSxPQUFTLEdBQzNCbzlDLEVBQWEsWUFBa0JJLEVBQU16eEMsS0FBSzBTLE9BQU8sR0FBR04sR0FBS3EvQixFQUFNenhDLEtBQUswUyxPQUFPLEdBQUdOLEdBQUtxL0IsRUFBTXp4QyxLQUFLMFMsT0FBTyxHQUFHTixHQUFLcS9CLEVBQU16eEMsS0FBSzBTLE9BQU8sR0FBR04sR0FDbElpL0IsRUFBYSxhQUFtQkksRUFBTXp4QyxLQUFLMFMsT0FBTyxHQUFHTixHQUFLcS9CLEVBQU16eEMsS0FBSzBTLE9BQU8sR0FBR04sR0FBS3EvQixFQUFNenhDLEtBQUswUyxPQUFPLEdBQUdOLEdBQUtxL0IsRUFBTXp4QyxLQUFLMFMsT0FBTyxHQUFHTixHQUNuSWkvQixFQUFhLGlCQUViQSxFQUFhLFlBQWtCLEVBQy9CQSxFQUFhLGFBQW1CSSxFQUFNenhDLEtBQUswUyxPQUFPLEdBQUdOLEdBQUssSUFNOUUsVUFBVTlMLFNBQVMvSyxJQUFJbUwsRUFBUTJxQyxPQVEvQ1osRUFBVWlCLFdBQVdqZSxHQUNyQixVQUFVM0IsV0FBVzFqQyxJQUFJc2lELEdBQVE5aEIsWUFBYzZoQixFQUFVN2hCLFlBQ3pEOEUsRUFBZ0IrYyxFQUNoQmx0QyxTQUFTeXNDLEtBQUsvRyxZQUFZOEcsSUF6TXJCaGUsRUFBUyxFLGFBQUdBLEVBQVMxK0IsS0FBS3krQixXQUFXNzlCLFEsbUNBQXJDODlCLEcsd0RBQTZDQSxJLDZUQWtOekQ3RCxHQUNULElBQU15akIsRUFBaUJ6akIsRUFBU3A3QixNQUFNLE1BQ3RDLE9BQUk2K0MsRUFBZTE5QyxPQUFTLEdBRXhCMDlDLEVBQWV4M0MsS0FBSyxTQUFDbkksRUFBR2lELEdBR3BCLE9BRmEwVCxTQUFTM1csRUFBRThULFVBQVUsSUFDckI2QyxTQUFTMVQsRUFBRTZRLFVBQVUsTUFJL0I2ckMsRUFBZXgrQyxLQUFLLE9BRXhCKzZCLEksNkJBR0owakIsR0FBdUIsSUFBYi9yQyxFQUFhLHVEQUFKLEdBRXRCLFVBQVVnc0MsZ0JBQWdCaHNDLEdBRzFCLFVBQVVpc0Msa0JBR1YsSUFBSUMsRUFBYSxFQUFBcHJCLFVBQVVFLFFBQVF1RCxTQU9uQyxPQU5Bd2pCLEVBQVVtRSxXQUFhQSxFQUVuQmxzQyxJQUNBQSxFQUFPRSxLQUFPLG1CQUVsQjZyQyxJQUNPcGhDLEtBQUtDLE1BQU1zaEMsSyw4QkEzb0JSQyxHQUFRLFdBQ2xCMytDLEtBQUswNkMsV0FBVzNnQixRQUNoQjRrQixFQUFPeDBDLFFBQVEsU0FBQTVQLEdBQ1gsRUFBS21nRCxXQUFXeHlDLElBQUkzTixFQUFFRSxLQUFNRixFQUFFWSxVLGVBS2xDLE9BQU82RSxLQUFLMDZDLGEsK0JBaUJEa0UsR0FFWCxJQUFJQyxFQUFhRCxFQUFRcDBDLElBQUksU0FBQTI1QixHQUV6QixPQURBQSxFQUFPenJCLFNBQVcsRUFDWHlyQixJQUVQMmEsRUFBVyxFQU9mLEdBTElBLEVBREE5K0MsS0FBS2dzQixNQUNNaHNCLEtBQUtnc0IsTUFBTTZCLE1BQU0sR0FBR0UsT0FBT250QixPQUUzQlosS0FBS3dyQixXQUFXNXFCLE9BRS9COFcsUUFBUStCLElBQUkseUJBQTBCcWxDLEVBQVUzaEMsS0FBS0csVUFBVXNoQyxFQUFTLEtBQU0sSUFDMUVFLEVBQVcsRUFFWCxJQUZjLGVBRUw1a0QsR0FDTCxJQUFJa2hELEVBQWEsRUFBQXZvQyxVQUFVc0MsVUFBVXlwQyxHQUNyQ3hELEVBQVcsR0FBR3RuQyxVQUFZLFVBQVd6QixVQUFVMEIsWUFFL0MsSUFDSWdyQyxFQUFZLElBQUlweEMsSUFDaEJxeEMsRUFBZ0I1RCxFQUFXNXdDLElBQUksU0FBQTI1QixHQUUvQixHQURBQSxFQUFPenJCLFNBQVd4ZSxPQUNPLElBQWRpcUMsRUFBTzUxQixHQUFvQixDQUVsQyxJQUFNMHdDLEVBQVEva0QsRUFBSSxJQUFNaXFDLEVBQU81MUIsR0FDL0J3d0MsRUFBVTcyQyxJQUFJaThCLEVBQU81MUIsR0FBSTB3QyxHQUN6QjlhLEVBQU81MUIsR0FBSzB3QyxFQVNoQixZQVA0QixJQUFqQjlhLEVBQU9qRixhQUNvQyxJQUF2QzZmLEVBQVVoa0QsSUFBSW9wQyxFQUFPakYsTUFBTTNoQyxRQUNsQzRtQyxFQUFPakYsTUFBTTNoQyxPQUFTd2hELEVBQVVoa0QsSUFBSW9wQyxFQUFPakYsTUFBTTNoQyxRQUVqRG1hLFFBQVF3VyxLQUFLLDZDQUdkaVcsSUFHWDBhLEVBQVd0N0MsS0FBWCxNQUFBczdDLEVBQVUsRUFBU0csS0F4QmQ5a0QsRUFBSSxFQUFHQSxFQUFJNGtELEVBQVU1a0QsSUFBSyxFQUExQkEsR0EyQmJ3ZCxRQUFRK0IsSUFBSSx3QkFBeUIwRCxLQUFLRyxVQUFVdWhDLEVBQVksS0FBTSxJQUN0RTcrQyxLQUFLMjZDLFlBQWNrRSxHLGVBSW5CLE9BQU83K0MsS0FBSzI2QyxpQixnQ0F1a0JwQkosRUFBVW1FLFdBQWEsRyxNQUVSbkUsRSw4RENocUJmLFNBQVMvbEIsRUFBa0JqM0IsRUFBUWszQixHQUFTLElBQUssSUFBSXY2QixFQUFJLEVBQUdBLEVBQUl1NkIsRUFBTTd6QixPQUFRMUcsSUFBSyxDQUFFLElBQUl3NkIsRUFBYUQsRUFBTXY2QixHQUFJdzZCLEVBQVc1NUIsV0FBYTQ1QixFQUFXNTVCLGFBQWMsRUFBTzQ1QixFQUFXN29CLGNBQWUsRUFBVSxVQUFXNm9CLElBQVlBLEVBQVc1b0IsVUFBVyxHQUFNbFIsT0FBT0MsZUFBZTBDLEVBQVFtM0IsRUFBV2o1QixJQUFLaTVCLElBUDdTOTVCLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FDM0N5QixPQUFPLElBRVR6QixFQUFReTZCLG1CQUFnQixFQVN4QixJQUFJQSxFQUVKLFdBQ0UsU0FBU0EsS0FWWCxTQUF5QlcsRUFBVWxrQixHQUFlLEtBQU1ra0IsYUFBb0Jsa0IsR0FBZ0IsTUFBTSxJQUFJNVMsVUFBVSxxQ0FXNUcrMkIsQ0FBZ0IvMEIsS0FBTW0wQixHQVAxQixJQUFzQnZqQixFQUFhNGtCLEVBQVlDLEVBeUk3QyxPQXpJb0I3a0IsRUFVUHVqQixFQVZnQ3NCLEVBVVgsQ0FBQyxDQUNqQ2g2QixJQUFLLFNBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxJQUFLLENBQUMsQ0FBQyxHQUFJLENBQUMsT0FFNUIsQ0FDRE0sSUFBSyxhQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxLQUFPLENBQUMsSUFBSyxDQUFDLENBQUMsTUFBUSxDQUFDLFVBRW5DLENBQ0RNLElBQUssY0FDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxDQUFDLE9BQVMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxPQUV2QyxDQUNETSxJQUFLLGdCQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsTUFBUSxDQUFDLENBQUMsS0FBTyxDQUFDLFNBRXRDLENBQ0RNLElBQUssYUFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxDQUFDLE9BQVMsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxTQUV0QyxDQUNETSxJQUFLLGNBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxNQUFRLENBQUMsQ0FBQyxLQUFPLENBQUMsU0FFckMsQ0FDRE0sSUFBSyxnQkFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsTUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxVQUV2QyxDQUNETSxJQUFLLGNBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxPQUFTLENBQUMsQ0FBQyxNQUFRLENBQUMsU0FFdkMsQ0FDRE0sSUFBSyxlQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsTUFBUSxDQUFDLENBQUMsTUFBUSxDQUFDLE9BRXZDLENBQ0RNLElBQUssaUJBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxPQUFTLENBQUMsQ0FBQyxNQUFRLENBQUMsT0FFeEMsQ0FDRE0sSUFBSyxjQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsTUFBUSxDQUFDLENBQUMsTUFBUSxDQUFDLFNBRXZDLENBQ0RNLElBQUssZUFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsTUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxPQUV0QyxDQUNETSxJQUFLLGlCQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxLQUFPLENBQUMsSUFBSyxDQUFDLENBQUMsTUFBUSxDQUFDLE9BRW5DLENBQ0RNLElBQUssY0FDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsTUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxTQUV2QyxDQUNETSxJQUFLLGVBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxJQUFLLENBQUMsQ0FBQyxLQUFPLENBQUMsT0FFbEMsQ0FDRE0sSUFBSyxpQkFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxDQUFDLElBQUssQ0FBQyxDQUFDLEtBQU8sQ0FBQyxPQUVsQyxDQUNETSxJQUFLLGFBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEtBQU8sQ0FBQyxNQUFRLENBQUMsQ0FBQyxNQUFRLENBQUMsVUFFdEMsQ0FDRE0sSUFBSyxjQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxLQUFPLENBQUMsSUFBSyxDQUFDLENBQUMsS0FBTyxDQUFDLE9BRWxDLENBQ0RNLElBQUssZ0JBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUksQ0FBQyxJQUFLLENBQUMsQ0FBQyxHQUFJLENBQUMsT0FFNUIsQ0FDRE0sSUFBSyxhQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxJQUFNLENBQUMsTUFBUSxDQUFDLENBQUMsS0FBTyxDQUFDLFVBRXBDLENBQ0RNLElBQUssY0FDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsTUFBUSxDQUFDLE1BQVEsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxPQUV2QyxDQUNETSxJQUFLLGdCQUNMTixNQUFPLFdBQ0wsTUFBTyxDQUFDLENBQUMsQ0FBQyxNQUFRLENBQUMsT0FBUyxDQUFDLENBQUMsS0FBTyxDQUFDLFNBRXZDLENBQ0RNLElBQUssYUFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsSUFBTSxFQUFFLE1BQVEsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxVQUV0QyxDQUNETSxJQUFLLGNBQ0xOLE1BQU8sV0FDTCxNQUFPLENBQUMsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxPQUFTLENBQUMsQ0FBQyxLQUFPLENBQUMsV0FFdkMsQ0FDRE0sSUFBSyxnQkFDTE4sTUFBTyxXQUNMLE1BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTyxFQUFFLE1BQVEsQ0FBQyxDQUFDLE1BQVEsQ0FBQyxZQXJJVHE2QixFQVVMLE9BVmdEaEIsRUFBa0I1akIsRUFBWTlVLFVBQVcwNUIsR0FBaUJDLEdBQWFqQixFQUFrQjVqQixFQUFhNmtCLEdBeUkzS3RCLEVBcElULEdBdUlBejZCLEVBQVF5NkIsY0FBZ0JBLEcsZ0JDckp4QixJQUFJK3FCLEVBQWlCLEVBQVEsS0FBZTloQyxNQUM1QzhoQyxFQUFlaDdCLFNBQVdnN0IsRUFDMUJBLEVBQWVDLGFBR2YsU0FBcUNDLEdBQ3BDLElBQUlDLEVBQWNDLEVBQVEsQ0FBQ3JvQyxFQUFFLEVBQUVDLEVBQUUsR0FDN0JYLEVBQU8sQ0FBQ1UsRUFBRSxLQUFLQyxFQUFFLEtBQUs2SSxHQUFHLEtBQUtDLEdBQUcsS0FBS0ksR0FBRyxLQUFLQyxHQUFHLE1BZXJELE9BZEErK0IsRUFBU2oxQyxRQUFRLFNBQVNvMUMsR0FHekIsSUFBSyxJQUFJNWdELElBRlMsV0FBZDRnRCxFQUFJcmhDLFVBQW9CbWhDLEVBQWFFLEdBQ3pDQSxFQUFJQyxHQUFHRixFQUFRcm9DLEVBQUdzb0MsRUFBSUUsR0FBR0gsRUFBUXBvQyxFQUNuQlgsRUFBVTVYLEtBQUs0Z0QsSUFBS0EsRUFBSTVnRCxJQUFNNGdELEVBQUlHLFNBQVdILEVBQUlocEMsRUFBSzVYLElBQU0sR0FDcEUsTUFBTzRnRCxJQUFNQSxFQUFJdG9DLEVBQUlxb0MsRUFBUXJvQyxHQUM3QixNQUFPc29DLElBQU1BLEVBQUlyb0MsRUFBSW9vQyxFQUFRcG9DLEdBQ25DcW9DLEVBQUlHLFVBQVcsRUFDZkgsRUFBSWw3QixLQUFPazdCLEVBQUlsN0IsS0FBS3M3QixjQUNILGFBQWJKLEVBQUlyaEMsVUFDUHFoQyxFQUFJdG9DLEVBQUlvb0MsRUFBYXBvQyxFQUNyQnNvQyxFQUFJcm9DLEVBQUltb0MsRUFBYW5vQyxHQUV0Qm9vQyxFQUFVQyxJQUVKSCxHQW5CUnpsRCxFQUFPRCxRQUFVd2xELEcseVFDTFhVLEUsV0FDRixXQUFZcGpELEVBQU1xeEIsSSw0RkFBTyxTQUNyQjd0QixLQUFLZ3RDLE1BQ0xodEMsS0FBSzYvQyxPQUNMNy9DLEtBQUs2dEIsTUFBUUEsRUFDYjd0QixLQUFLeEQsS0FBT0EsRSxrREFHUEEsUUFDZSxJQUFUQSxJQUNINUIsT0FBT3VMLEtBQUt5NUMsRUFBVXh4QixXQUFXOWpCLFNBQVM5TixHQUMxQ3dELEtBQUtndEMsTUFBUXh3QyxHQUVia2IsUUFBUXdXLEtBQUsseUZBQ2JsdUIsS0FBS2d0QyxNQUFRNFMsRUFBVXh4QixVQUFVYSxPLGVBTXpDLE9BQU9qdkIsS0FBS2d0QyxRLDBCQUdObmYsR0FDTixRQUFxQixJQUFWQSxFQUF1QixDQXlCOUIsSUF2QkEsSUFBSWl5QixFQUFhanlCLEVBQU1yakIsSUFBSSxTQUFBc3VDLEdBQ3ZCLFFBQTBCLElBQWZBLEVBQUtpSCxNQUF1QixDQUVuQyxJQUFJQyxFQUFTLElBQUlwdUMsT0FBTyxTQUNwQnF1QyxFQUFpQm5ILEVBQUtpSCxNQUFNLEdBQUd2L0MsUUFBUXcvQyxFQUFRLElBQy9DRSxFQUFlcEgsRUFBS2lILE1BQU0sR0FBR3YvQyxRQUFRdy9DLEVBQVEsSUFDN0NHLEVBQWFySCxFQUFLaUgsTUFBTSxHQUFHdG9DLE1BQU11b0MsR0FDakNJLEVBQVd0SCxFQUFLaUgsTUFBTSxHQUFHdG9DLE1BQU11b0MsR0FDbkMsR0FBSUMsSUFBbUJDLEVBQWMsQ0FDakNwSCxFQUFLL3FCLE9BQVMsR0FDZCxJQUFLLElBQUk3ekIsRUFBSWltRCxFQUFZam1ELEdBQUtrbUQsRUFBVWxtRCxJQUNwQzQrQyxFQUFLL3FCLE9BQU94cUIsS0FBSzA4QyxFQUFpQi9sRCxRQUd0QzQrQyxFQUFLL3FCLE9BQVMsQ0FBQytxQixFQUFLaUgsTUFBTSxHQUFJakgsRUFBS2lILE1BQU0sSUFDekNyb0MsUUFBUXdXLEtBQUssZ0NBR3JCLE9BQU80cUIsSUFJUHVILEVBQVMsRUFDSm5tRCxFQUFJLEVBQUdBLEVBQUk0bEQsRUFBV2wvQyxPQUFRMUcsSUFDL0I0bEQsRUFBVzVsRCxHQUFHNnpCLE9BQU9udEIsT0FBU3kvQyxJQUM5QkEsRUFBU1AsRUFBVzVsRCxHQUFHNnpCLE9BQU9udEIsUUFHdEMsSUFBSyxJQUFJMUcsRUFBSSxFQUFHQSxFQUFJNGxELEVBQVdsL0MsT0FBUTFHLElBQ25DLEdBQUk0bEQsRUFBVzVsRCxHQUFHNnpCLE9BQU9udEIsT0FBU3kvQyxFQUc5QixJQUZBLElBQUlDLEVBQVdSLEVBQVc1bEQsR0FBRzZ6QixPQUFPK3hCLEVBQVc1bEQsR0FBRzZ6QixPQUFPbnRCLE9BQVMsR0FDOUQyL0MsRUFBVUYsRUFBU1AsRUFBVzVsRCxHQUFHNnpCLE9BQU9udEIsT0FDckMyL0MsRUFBVSxHQUNiVCxFQUFXNWxELEdBQUc2ekIsT0FBT3hxQixLQUFLKzhDLEdBQzFCQyxJQUladmdELEtBQUs2L0MsT0FBU0MsSSxlQUtsQixPQUFPOS9DLEtBQUs2L0MsWSxnQ0FJcEJELEVBQVV4eEIsVUFBWSxDQUNsQlksSUFBSyxNQUNMQyxJQUFLLFUsTUFHTTJ3QixFLHlLQzlFZixpRUFDQSw4QixpeERBRU1ZLGEsc0JBQ0Ysd0JBQWMsaURBQ1YsNkdBQ0tDLFNBQVcsS0FDaEIsRUFBS3J1QyxXQUFhLHFCQUFXQyxVQUFVQyxjQUN2QyxFQUFLb3VDLE9BQVMsRUFDZCxFQUFLQyxhQUFjLEVBQ25CLEVBQUs3NUMsS0FBTyxHQUVaLEVBQUtrMEIsU0FSSyxFLGdJQW9ESXpvQixXQUF3QixnQkFBYkMsT0FBYSx1REFBSixHQUNSLGlCQUFmeFMsS0FBS3F0QyxhQUM2QixJQUE5Qjk2QixVQUFVeFgsSUFBSWlGLEtBQUtxdEMsT0FFUyxJQUEvQnJ0QyxLQUFLcXRDLE1BQU1qakMsUUFBUSxTQUNuQnBLLEtBQUtxdEMsTUFBUXJ0QyxLQUFLcXRDLE1BQU01NkIsVUFBVSxFQUFHelMsS0FBS3F0QyxNQUFNenNDLE9BQVMsR0FBRzZSLFVBQVUsR0FDdEVGLFVBQVVwSSxRQUFRLFNBQUNoUCxFQUFPTSxFQUFLK08sR0FDdkIsT0FBSzZpQyxNQUFNL2lDLFNBQVM3TyxLQUNDLGlCQUFWTixFQUNQLE9BQUtreUMsTUFBUSxPQUFLQSxNQUFNN3NDLFFBQVEsSUFBSW9SLE9BQU9uVyxFQUFLLE1BQU8sR0FBS04sR0FFNURxWCxPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLHFEQUFzREMsUUFBUyxZQUFjLE9BQUt5NkIsTUFBTTdzQyxRQUFRLE1BQU8sSUFBTSxRQUl6SixNQUFBcVMsVUFBVUMsY0FBYzlTLEtBQUtxdEMsTUFBTzk2QixXQUNwQ3ZTLEtBQUtxdEMsTUFBUXQ2QixLQUFLL1MsS0FBS3F0QyxPQUV2Qjc2QixPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLGtCQUFtQkMsUUFBUyxZQUFjNVMsS0FBS3F0QyxNQUFNN3NDLFFBQVEsTUFBTyxJQUFNLE1BR2xIZ1MsT0FBT0UsS0FBTyxDQUFFbFcsS0FBTSxRQUFTbVcsSUFBSyw2Q0FBOENDLFFBQVMsWUFBYzVTLEtBQUtxdEMsTUFBTTdzQyxRQUFRLE1BQU8sSUFBTSxLQUdwRyxpQkFBOUIrUixVQUFVeFgsSUFBSWlGLEtBQUtxdEMsT0FDMUJydEMsS0FBS3F0QyxNQUFROTZCLFVBQVV4WCxJQUFJaUYsS0FBS3F0QyxPQUVoQzc2QixPQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLHFEQUFzREMsUUFBUyxZQUFjNVMsS0FBS3F0QyxNQUFNN3NDLFFBQVEsTUFBTyxJQUFNLFdBSWhJLElBQWxCUixLQUFLZzdCLFVBQ1poN0IsS0FBS2c3QixTQUFTNEQsa0JBQWtCcnNCLFVBQVdDLFUsbUNBUXRDb3VDLEdBQ1Q1Z0QsS0FBSzZnRCxRQUFVRCxFQUFhQyxRQUNDLE9BQXpCRCxFQUFhQyxVQUNiN2dELEtBQUsyZ0QsYUFBYyxHQUV2QjNnRCxLQUFLOFQsVUFBWThzQyxFQUFhOXNDLFVBQzlCOVQsS0FBS3F0QyxNQUFRdVQsRUFBYXZULFdBRU8sSUFBdEJ1VCxFQUFhOTVDLE9BQ3BCOUcsS0FBSzhHLEtBQUt5TSxNQUFRcXRDLEVBQWE5NUMsS0FBS3lNLE1BQ3BDdlQsS0FBSzhHLEtBQUtnNkMsTUFBUUYsRUFBYTk1QyxLQUFLZzZDLE1BQ3BDOWdELEtBQUs4RyxLQUFLaTZDLEtBQU9ILEVBQWE5NUMsS0FBS2k2QyxXQUdGLElBQTFCSCxFQUFhNWxCLFVBQ3BCaDdCLEtBQUtnN0IsU0FBVyxJQUFJd2xCLGFBQ3BCeGdELEtBQUtnN0IsU0FBU21FLGFBQWF5aEIsRUFBYTVsQixnQkFDQSxJQUExQjRsQixFQUFhNWxCLFVBQXFELE9BQXpCNGxCLEVBQWFDLFVBRXBFN2dELEtBQUtnN0IsU0FBVyxJQUFJd2xCLGFBQ3BCeGdELEtBQUtnN0IsU0FBUzZsQixRQUFVLEtBQ3hCN2dELEtBQUtnN0IsU0FBUzJsQixhQUFjLEssbUNBSXZCdmdCLEVBQVNudEIsRUFBVXpaLEVBQU02WSxFQUFXaXVCLEdBZ0I3QyxPQWZBa2dCLGFBQWF6eUIsT0FBT2dNLFFBQ3BCeW1CLGFBQWFwRSxXQUFXcmlCLFFBQ1MsSUFBN0JuL0IsT0FBT3VMLEtBQUszTSxHQUFNb0gsUUFDbEJwSCxFQUFLd25ELFNBQVcsT0FDaEJ4bkQsRUFBSytVLEdBQUtpeUMsYUFBYVMsT0FDdkJULGFBQWF6eUIsT0FBTzdsQixJQUFJczRDLGFBQWFTLFFBQVEsR0FDN0NULGFBQWFTLFNBQ2J6bkQsRUFBS3d6QixTQUFXLEdBQ2hCeHpCLEVBQUsyMkIsTUFBUWlRLEVBQ2I1bUMsRUFBSzZZLGVBQWlDLElBQWRBLEVBQTRCLHFCQUFXQSxVQUFVQyxjQUFnQkQsRUFDekY3WSxFQUFLNnpDLE1BQVEsRUFDYnJ0QyxLQUFLa2hELGFBQWExbkQsRUFBTXlaLElBRXhCalQsS0FBS21oRCxXQUFXM25ELEVBQU15WixHQUVuQmpULEtBQUtvaEQsc0JBQXNCNW5ELEVBQU04bUMsSyxpQ0FHakNsbEMsRUFBRzZYLEdBRVYsUUFBaUIsSUFBTjdYLEVBQW1CLENBQzFCLElBQU1pbUQsRUFBYXJoRCxLQUFLNmdELFFBQ2xCeHVDLEVBQVlyUyxLQUFLOFQsVUFDakJ1NUIsRUFBUXJ0QyxLQUFLcXRDLE1BQ25CLFFBQTZCLElBQWxCcnRDLEtBQUtnN0IsU0FBMEIsQ0FDdEMsSUFBSXNtQixHQUFlLEVBS25CLFFBSjZCLElBQWxCbG1ELEVBQUU0eEIsU0FBUyxLQUNsQnMwQixFQUFlbG1ELEVBQUU0eEIsU0FBUyxHQUFHZzBCLFdBQWFLLEdBRzFDQyxFQUFjLENBRWQsSUFEQSxJQUNnQkMsRUFEWkMsRUFBaUIsSUFBSTd6QyxJQUNoQnpULEVBQUksRUFBWUEsRUFBSWtCLEVBQUU0eEIsU0FBU3BzQixRQUFVMmdELEVBQVVubUQsRUFBRTR4QixTQUFTOXlCLElBQUtBLElBQ3hFOEYsS0FBS2c3QixTQUFTbW1CLFdBQVdJLEVBQVN0dUMsR0FDbEN1dUMsRUFBZXQ1QyxJQUFJcTVDLEVBQVFFLFNBQVVGLEdBQ3JDQSxFQUFRbHZDLFVBQVlBLEVBQ3BCa3ZDLEVBQVFsVSxNQUFRQSxFQUdwQnJ0QyxLQUFLMGhELFVBQVUxaEQsS0FBSzhHLEtBQU0xTCxFQUFHb21ELEVBQWdCdnVDLFFBRTdDN1gsRUFBRTR4QixTQUFXLEdBQ2JodEIsS0FBS2toRCxhQUFhOWxELEVBQUc2WCxhQUVPLElBQWxCalQsS0FBS2c3QixVQUE0QjUvQixFQUFFNHhCLFNBQVNwc0IsT0FBUyxJQUNuRXhGLEVBQUU0eEIsU0FBVyxPLG1DQUtaNXhCLEVBQUc2WCxHQU1aLElBSkEsSUFJZ0JJLEVBSlZndUMsRUFBYXJoRCxLQUFLNmdELFFBQ2xCeHVDLEVBQVlyUyxLQUFLOFQsVUFDakJ1NUIsRUFBUXJ0QyxLQUFLcXRDLE1BQ2ZtVSxFQUFpQixJQUFJN3pDLElBQ2hCelQsRUFBSSxFQUFXQSxFQUFJa0IsRUFBRSswQixNQUFNdnZCLFFBQVV5UyxFQUFTalksRUFBRSswQixNQUFNajJCLElBQUtBLElBQUssQ0FDckUsSUFBSXltQyxFQUFRMXRCLEVBQVNsWSxJQUFJc1ksR0FBUSxjQUM3Qm91QyxPQUFRLEVBQ1osUUFBZ0QsSUFBckN4dUMsRUFBU2xZLElBQUlzWSxHQUFRZ3VDLEdBQzVCSSxFQUFXeHVDLEVBQVNsWSxJQUFJc1ksR0FBUWd1QyxPQUM3QixTQUFnRCxJQUFyQ3B1QyxFQUFTbFksSUFBSXNZLEdBQVFndUMsU0FBNEQsSUFBdEIxZ0IsRUFBTTBnQixHQUkvRSxZQURBM3BDLFFBQVF3VyxLQUFLLDJDQUZidXpCLEVBQVc5Z0IsRUFBTTBnQixHQU1yQixRQUE0QyxJQUFqQ0csRUFBZXptRCxJQUFJMG1ELEdBQzFCRCxFQUFlem1ELElBQUkwbUQsR0FBVXR4QixNQUFNNXNCLEtBQUs4UCxPQUNyQyxDQUNILElBQUlpdUIsRUFBUyxHQUNiQSxFQUFPL3lCLEdBQUtpeUMsYUFBYVMsT0FDekJULGFBQWFTLFNBQ2IzZixFQUFPMGYsU0FBV0ssRUFDTSxPQUFwQi9mLEVBQU8wZixXQUNQMWYsRUFBT3FmLFlBQWMzZ0QsS0FBSzJnRCxhQUU5QnJmLEVBQU9tZ0IsU0FBV0EsRUFDbEJuZ0IsRUFBT2p2QixVQUFZQSxFQUNuQml2QixFQUFPK0wsTUFBUUEsRUFDZi9MLEVBQU90VSxTQUFXLEdBQ2xCc1UsRUFBT25SLE1BQVEsQ0FBQzljLEdBQ2hCbXVDLEVBQWV0NUMsSUFBSXU1QyxFQUFVbmdCLElBTXJDLEdBRkF0aEMsS0FBSzBoRCxVQUFVMWhELEtBQUs4RyxLQUFNMUwsRUFBR29tRCxFQUFnQnZ1QyxRQUVoQixJQUFsQmpULEtBQUtnN0IsU0FDWixJQUFLLElBQVd1bUIsRUFBUHJuRCxFQUFJLEVBQVlBLEVBQUlrQixFQUFFNHhCLFNBQVNwc0IsUUFBVTJnRCxFQUFVbm1ELEVBQUU0eEIsU0FBUzl5QixJQUFLQSxJQUN4RThGLEtBQUtnN0IsU0FBU2ttQixhQUFhSyxFQUFTdHVDLEssZ0NBS3RDMHVDLEVBQVV2bUQsRUFBR29tRCxFQUFnQnZ1QyxHQUduQyxPQURBN1gsRUFBRTR4QixTQUFXLEdBQ2IsUUFBZTIwQixFQUFTYixRQUNwQixJQUFLLFNBR0QsSUFEQSxJQUNnQlcsRUFBUHZuRCxFQUFJLEVBQWFBLEVBQUl5bkQsRUFBU2IsTUFBTWxnRCxRQUFVNmdELEVBQVdFLEVBQVNiLE1BQU01bUQsSUFBS0EsSUFBSyxDQUN2RixJQUFLaUksTUFBTWduQyxPQUFPc1ksSUFBWSxDQUMxQixJQUFJRyxFQUFjelksT0FBT3NZLFFBQ3NCLElBQXBDRCxFQUFlem1ELElBQUk2bUQsS0FDMUJ4bUQsRUFBRTR4QixTQUFTenBCLEtBQUtpK0MsRUFBZXptRCxJQUFJNm1ELElBQ25DQyxRQUlvQyxJQUFqQ0wsRUFBZXptRCxJQUFJMG1ELEtBQzFCcm1ELEVBQUU0eEIsU0FBU3pwQixLQUFLaStDLEVBQWV6bUQsSUFBSTBtRCxJQUNuQ0ksR0FHUixNQUNKLElBQUssU0FFRCxJQUFJQyxHQUFnQixFQVFwQixHQVBBTixFQUFlcjNDLFFBQVEsU0FBVWhQLEVBQU8yNkIsR0FDaEMzNkIsRUFBTWcxQixNQUFNdnZCLE9BQVMsSUFDckJraEQsR0FBZ0IsVUFLTSxJQUFuQkgsRUFBU3B1QyxPQUF5QnV1QyxFQUFlLENBQ3hELElBQUlDLEVBQVdKLEVBQVNwdUMsTUFDcEJ5dUMsRUFBb0IsR0FBSCwwQkFBT1IsSUFDeEJTLEVBQVlOLEVBQVNiLE1BQ3pCa0IsRUFBa0JsN0MsS0FBSyxTQUFVbkksRUFBR2lELEdBQ2hDLElBQUlzZ0QsRUFBVXZqRCxFQUFFLEdBQUd3eEIsTUFBTSxHQUNyQmd5QixFQUFVdmdELEVBQUUsR0FBR3V1QixNQUFNLEdBQ3JCaXlCLEVBQWlCLEdBQUlDLEVBQWlCLEdBQ3RDQyxFQUFTcnZDLEVBQVNsWSxJQUFJbW5ELEdBQVMsY0FDL0JLLEVBQVN0dkMsRUFBU2xZLElBQUlvbkQsR0FBUyxjQW1CbkMsWUFsQitDLElBQXBDbHZDLEVBQVNsWSxJQUFJbW5ELEdBQVNILElBQWlFLGNBQXBDOXVDLEVBQVNsWSxJQUFJb25ELEdBQVNKLElBQ2hGSyxFQUFpQm52QyxFQUFTbFksSUFBSW1uRCxHQUFTSCxHQUN2Q00sRUFBaUJwdkMsRUFBU2xZLElBQUlvbkQsR0FBU0osU0FDVyxJQUFwQzl1QyxFQUFTbFksSUFBSW1uRCxHQUFTSCxTQUNMLElBQXJCTyxFQUFPUCxTQUM2QixJQUFwQzl1QyxFQUFTbFksSUFBSW9uRCxHQUFTSixTQUNELElBQXJCUSxFQUFPUixLQUNqQkssRUFBaUJFLEVBQU9QLEdBQ3hCTSxFQUFpQkUsRUFBT1IsSUFHdkI1L0MsTUFBTW1SLFdBQVc4dUMsTUFDbEJBLEVBQWlCOXVDLFdBQVc4dUMsSUFFM0JqZ0QsTUFBTW1SLFdBQVcrdUMsTUFDbEJBLEVBQWlCL3VDLFdBQVcrdUMsSUFHNUJKLElBQWN6QixhQUFhZ0MsV0FBV0MsVUFDbENMLEdBQWtCQyxFQUNYLEdBRUMsRUFFTEosSUFBY3pCLGFBQWFnQyxXQUFXRSxXQUN6Q0wsR0FBa0JELEVBQ1gsR0FFQyxFQUVMSCxJQUFjekIsYUFBYWdDLFdBQVduekMsT0FDdENwUixLQUFLb1IsVUFBWSxHQUFNLEdBQUssT0FEaEMsSUFLWCxJQUFLLElBQVdreUMsRUFBUHJuRCxFQUFJLEVBQVlBLEVBQUk4bkQsRUFBa0JwaEQsUUFBVTJnRCxFQUFVUyxFQUFrQjluRCxJQUFLQSxJQUV0RmtCLEVBQUU0eEIsU0FBU3pwQixLQUFLZytDLEVBQVEsUUFFekIsQ0FDSCxJQUFJUyxFQUFvQixHQUFILDBCQUFPUixJQUN4QkcsRUFBU2IsUUFBVU4sYUFBYWdDLFdBQVdDLFVBQzNDVCxFQUFrQmw3QyxLQUFLLFNBQVVuSSxFQUFHaUQsR0FDaEMsT0FBSWpELEVBQUUsSUFBTWlELEVBQUUsR0FDSCxHQUVDLElBR1QrL0MsRUFBU2IsUUFBVU4sYUFBYWdDLFdBQVdFLFdBQ2xEVixFQUFrQmw3QyxLQUFLLFNBQVVuSSxFQUFHaUQsR0FDaEMsT0FBSUEsRUFBRSxJQUFNakQsRUFBRSxHQUNILEdBRUMsSUFHVGdqRCxFQUFTYixRQUFVTixhQUFhZ0MsV0FBV256QyxRQUNsRDJ5QyxFQUFrQmw3QyxLQUFLLFNBQVVuSSxFQUFHaUQsR0FDaEMsT0FBTzNELEtBQUtvUixVQUFZLEdBQU0sR0FBSyxJQUczQyxJQUFLLElBQVdreUMsRUFBUHJuRCxFQUFJLEVBQVlBLEVBQUk4bkQsRUFBa0JwaEQsUUFBVTJnRCxFQUFVUyxFQUFrQjluRCxJQUFLQSxJQUV0RmtCLEVBQUU0eEIsU0FBU3pwQixLQUFLZytDLEVBQVEsSUFJaEMsTUFDSixRQUVJQyxFQUFlcjNDLFFBQVEsU0FBVW8zQyxFQUFTenJCLEdBQ3RDMTZCLEVBQUU0eEIsU0FBU3pwQixLQUFLZytDLEdBRWhCNWhCLE8sa0NBS0pnakIsRUFBVTFCLEVBQVEyQixFQUFTQyxJQUMvQnJDLGFBQWF6eUIsT0FBT2h6QixJQUFJNG5ELElBQTBCLElBQVpDLEdBQWlCQSxJQUFZQyxFQUFXLEVBRzlFckMsYUFBYXp5QixPQUFPN2xCLElBQUkrNEMsR0FBUSxHQUZoQ1QsYUFBYXp5QixPQUFPN2xCLElBQUkrNEMsR0FBUSxLLDRDQVdsQjdsRCxFQUFHa2xDLEdBRXJCLElBQUl3aUIsRUFBZSxHQUFJMW5CLEVBQVMsR0FDaEMsR0FBUyxNQUFMaGdDLEVBQVcsQ0FDWCxJQUFJMjVDLEVBQVEsR0FJWixJQUhBMzVDLEVBQUUybkQsZUFBaUIsR0FDbkIzbkQsRUFBRTRuRCxvQkFBc0IsR0FDeEJqTyxFQUFNN25CLFFBQVE5eEIsR0FDUyxHQUFoQjI1QyxFQUFNbjBDLFFBQWEsQ0FDdEIsSUFBSThULEVBQU9xZ0MsRUFBTS9LLFFBRWJoZCxFQUFXdFksRUFBS3NZLFNBQ3BCLEdBQUlBLEVBQVNwc0IsUUFBVSxHQUNmOFQsRUFBS2lzQyxjQUFpQmpzQyxFQUFLaXNDLGFBQThDLElBQS9CanNDLEVBQUtxdUMsZUFBZW5pRCxVQUMxRDAvQixJQUNBNXJCLEVBQUtzWSxTQUFXLEdBQ2hCdFksRUFBS3F1QyxlQUFpQixDQUFDcnVDLEVBQUtxdUMsZUFBZSxJQUMzQ3J1QyxFQUFLc3VDLG9CQUFzQixDQUFDdHVDLEVBQUtzdUMsb0JBQW9CLElBQ3JEdHVDLEVBQUtzc0MsU0FBVyxLQUNoQnRzQyxFQUFLK3NDLFNBQVcvc0MsRUFBS3liLE1BQU0sSUFFL0JpTCxFQUFPNzNCLEtBQUttUixJQUVoQm91QyxFQUFlLEdBQUgsMEJBQU9BLEdBQVAsbUJBQXdCcHVDLEVBQUt5YixZQUN0QyxDQUMrQixPQUE5QnpiLEVBQUtzWSxTQUFTLEdBQUdnMEIsVUFBdUMsU0FBbEJ0c0MsRUFBS3NzQyxVQUF3QnRzQyxFQUFLc1ksU0FBUyxHQUFHMnpCLGNBQ2hGcmdCLElBQ0E1ckIsRUFBS3NZLFNBQVcsR0FDaEJ0WSxFQUFLcXVDLGVBQWlCLENBQUNydUMsRUFBS3F1QyxlQUFlLElBQzNDcnVDLEVBQUtzdUMsb0JBQXNCLENBQUN0dUMsRUFBS3N1QyxvQkFBb0IsSUFDckR0dUMsRUFBS3NzQyxTQUFXLEtBQ2hCdHNDLEVBQUsrc0MsU0FBVy9zQyxFQUFLeWIsTUFBTSxJQUUvQmlMLEVBQU83M0IsS0FBS21SLElBRWhCLElBQUssSUFBSXhhLEVBQUksRUFBR0EsRUFBSTh5QixFQUFTcHNCLE9BQVExRyxJQUNqQzh5QixFQUFTOXlCLEdBQUc2b0QsZUFBWiw2QkFBaUNydUMsRUFBS3F1QyxnQkFBdEMsQ0FBc0RydUMsRUFBS3NzQyxXQUMzRGgwQixFQUFTOXlCLEdBQUc4b0Qsb0JBQVosNkJBQXNDdHVDLEVBQUtzdUMscUJBQTNDLENBQWdFdHVDLEVBQUsrc0MsV0FDckUxTSxFQUFNeHhDLEtBQUt5cEIsRUFBUzl5QixNQU1wQyxNQUFPLENBQUM0b0QsRUFBYzFuQixLLHNDQVVWaGdDLEVBQUc2bkQsRUFBZ0JDLEVBQWM5aEIsR0FDN0MsR0FBSWhtQyxFQUFFNHhCLFNBQVNwc0IsT0FBUyxFQUNwQixJQUFLLElBQUkxRyxFQUFJLEVBQUdBLEVBQUlrQixFQUFFNHhCLFNBQVNwc0IsT0FBUTFHLElBQy9CQSxFQUFJLEVBQ0o4RixLQUFLMmtDLGdCQUFnQnZwQyxFQUFFNHhCLFNBQVM5eUIsR0FBSWtCLEVBQUU0eEIsU0FBUzl5QixFQUFJLEdBQUcwUCxNQUFPeE8sRUFBRTR4QixTQUFTOXlCLEVBQUksR0FBRzZRLElBQUtxMkIsR0FFcEZwaEMsS0FBSzJrQyxnQkFBZ0J2cEMsRUFBRTR4QixTQUFTOXlCLElBQUssR0FBSSxFQUFHa25DLEdBSXhELE9BQVFobUMsRUFBRWlYLFdBQ04sS0FBSyxxQkFBV0EsVUFBVUMsY0FDdEJsWCxFQUFFd08sTUFBUXE1QyxFQUFpQjduRCxFQUFFaXlDLE1BQzdCLE1BQ0osS0FBSyxxQkFBV2g3QixVQUFVMEIsWUFDdEIzWSxFQUFFd08sTUFBUXM1QyxFQUFlOW5ELEVBQUVpeUMsTUFDM0IsTUFDSixLQUFLLHFCQUFXaDdCLFVBQVUyQixTQUN0QjVZLEVBQUV3TyxNQUFReE8sRUFBRWl5QyxNQUNaLE1BQ0osUUFDSWp5QyxFQUFFd08sTUFBUXE1QyxFQUFpQjduRCxFQUFFaXlDLE9BRWIsSUFBcEI0VixJQUNBN25ELEVBQUV3TyxNQUFRLEdBRWR4TyxFQUFFMlAsSUFBTSxFQUNSLElBQUssSUFBSTdRLEVBQUksRUFBR0EsRUFBSWtCLEVBQUUrMEIsTUFBTXZ2QixPQUFRMUcsSUFDaENrbkMsRUFBUXJtQyxJQUFJSyxFQUFFKzBCLE1BQU1qMkIsSUFBSXdoQyxXQUFhdGdDLEVBQUV3TyxNQUNuQ3czQixFQUFRcm1DLElBQUlLLEVBQUUrMEIsTUFBTWoyQixJQUFJd2hDLFVBQVkwRixFQUFRcm1DLElBQUlLLEVBQUUrMEIsTUFBTWoyQixJQUFJeWhDLGNBQWdCdmdDLEVBQUUyUCxNQUM5RTNQLEVBQUUyUCxJQUFNcTJCLEVBQVFybUMsSUFBSUssRUFBRSswQixNQUFNajJCLElBQUl3aEMsVUFBWTBGLEVBQVFybUMsSUFBSUssRUFBRSswQixNQUFNajJCLElBQUl5aEMsZUFJNUUsR0FBdUIsSUFBbkJ2Z0MsRUFBRSswQixNQUFNdnZCLE9BQWMsQ0FDdEIsSUFBTXVpRCxFQUFZL25ELEVBQUUrMEIsTUFBTSxHQUN0QnF3QixhQUFhenlCLE9BQU9oekIsSUFBSUssRUFBRW1ULElBQzFCaXlDLGFBQWFwRSxXQUFXbDBDLElBQUlpN0MsR0FBVyxRQUVlLElBQTNDM0MsYUFBYXBFLFdBQVdyaEQsSUFBSW9vRCxJQUNuQzNDLGFBQWFwRSxXQUFXbDBDLElBQUlpN0MsR0FBVyxNLDRCQTlhM0NDLFFBQ1UsSUFBUEEsSUFDUHBqRCxLQUFLeWdELFNBQVcyQyxJLGVBSXBCLE9BQU9wakQsS0FBS3lnRCxXLDhCQUdGM3FCLEdBQ1YsUUFBbUIsSUFBUkEsRUFBcUIsQ0FDNUIsSUFBSXV0QixFQUFZLHFCQUFXbHZDLFNBQVMyaEIsR0FDaENsN0IsT0FBT3VMLEtBQUsscUJBQVdrTSxXQUFXL0gsU0FBUys0QyxHQUMzQ3JqRCxLQUFLb1MsV0FBYTBqQixFQUVsQjBYLE1BQU0sbUcsZUFNZCxPQUFPeHRDLEtBQUtvUyxhLDBCQUdOa3hDLEdBQ2EsaUJBQVJBLEVBQ0hBLEdBQU8sSUFBTyxxQkFBV2p2QyxZQUFzQixJQUFSaXZDLEVBQ3ZDdGpELEtBQUswZ0QsT0FBUzRDLEVBRWR0akQsS0FBSzBnRCxPQUFTLElBQU8scUJBQVdyc0MsV0FFZCxpQkFBUml2QyxJQUNkdGpELEtBQUswZ0QsT0FBUzRDLEksZUFLbEIsT0FBT3RqRCxLQUFLMGdELFcsb0NBZ1pwQkYsYUFBYXB0QyxNQUFRLENBQUMsVUFBVyxZQUFhLFFBQVMsT0FBUSxZQUMvRG90QyxhQUFhdEUsVUFBWSxDQUFDLFFBQVMsU0FDbkNzRSxhQUFhZ0MsV0FBYSxDQUN0QkMsVUFBVyxZQUNYQyxXQUFZLGFBQ1pyekMsT0FBUSxVQUdabXhDLGFBQWFTLE9BQVMsRUFDdEJULGFBQWF6eUIsT0FBUyxJQUFJcGdCLElBQzFCNnlDLGFBQWFwRSxXQUFhLElBQUl6dUMsSSxhQUdmNnlDLGEseUVDbGRmN21ELEVBQU9ELFNBQVcsRUFBUSxLQUFzQixFQUFRLEVBQVIsQ0FBb0IsV0FDbEUsT0FBNEcsR0FBckdrQixPQUFPQyxlQUFlLEVBQVEsR0FBUixDQUF5QixPQUFRLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUTRELEssZ0JDRHpHakYsRUFBUXNGLEVBQUksRUFBUSxJLGdCQ0FwQixJQUFJSyxFQUFNLEVBQVEsSUFDZDBCLEVBQVksRUFBUSxJQUNwQmdGLEVBQWUsRUFBUSxHQUFSLEVBQTZCLEdBQzVDNUUsRUFBVyxFQUFRLEdBQVIsQ0FBeUIsWUFFeEN4SCxFQUFPRCxRQUFVLFNBQVVrQyxFQUFRMm5ELEdBQ2pDLElBR0k5bkQsRUFIQXdELEVBQUk4QixFQUFVbkYsR0FDZDFCLEVBQUksRUFDSm9KLEVBQVMsR0FFYixJQUFLN0gsS0FBT3dELEVBQU94RCxHQUFPMEYsR0FBVTlCLEVBQUlKLEVBQUd4RCxJQUFRNkgsRUFBT0MsS0FBSzlILEdBRS9ELEtBQU84bkQsRUFBTTNpRCxPQUFTMUcsR0FBT21GLEVBQUlKLEVBQUd4RCxFQUFNOG5ELEVBQU1ycEQsU0FDN0M2TCxFQUFhekMsRUFBUTdILElBQVE2SCxFQUFPQyxLQUFLOUgsSUFFNUMsT0FBTzZILEksZ0JDZlQsSUFBSXZFLEVBQUssRUFBUSxHQUNiSCxFQUFXLEVBQVEsR0FDbkI0a0QsRUFBVSxFQUFRLElBRXRCN3BELEVBQU9ELFFBQVUsRUFBUSxHQUFvQmtCLE9BQU82b0QsaUJBQW1CLFNBQTBCeGtELEVBQUdzUixHQUNsRzNSLEVBQVNLLEdBS1QsSUFKQSxJQUdJN0IsRUFIQStJLEVBQU9xOUMsRUFBUWp6QyxHQUNmM1AsRUFBU3VGLEVBQUt2RixPQUNkMUcsRUFBSSxFQUVEMEcsRUFBUzFHLEdBQUc2RSxFQUFHQyxFQUFFQyxFQUFHN0IsRUFBSStJLEVBQUtqTSxLQUFNcVcsRUFBV25ULElBQ3JELE9BQU82QixJLGdCQ1ZULElBQUk4QixFQUFZLEVBQVEsSUFDcEJtRCxFQUFPLEVBQVEsSUFBa0JsRixFQUNqQytDLEVBQVcsR0FBR0EsU0FFZDJoRCxFQUErQixpQkFBVjVwRCxRQUFzQkEsUUFBVWMsT0FBTzZWLG9CQUM1RDdWLE9BQU82VixvQkFBb0IzVyxRQUFVLEdBVXpDSCxFQUFPRCxRQUFRc0YsRUFBSSxTQUE2QmpCLEdBQzlDLE9BQU8ybEQsR0FBb0MsbUJBQXJCM2hELEVBQVMxSCxLQUFLMEQsR0FUakIsU0FBVUEsR0FDN0IsSUFDRSxPQUFPbUcsRUFBS25HLEdBQ1osTUFBT00sR0FDUCxPQUFPcWxELEVBQVkxaEQsU0FLMEMyaEQsQ0FBZTVsRCxHQUFNbUcsRUFBS25ELEVBQVVoRCxNLDZCQ2ZyRyxJQUFJMlMsRUFBYyxFQUFRLEdBQ3RCOHlDLEVBQVUsRUFBUSxJQUNsQkksRUFBTyxFQUFRLElBQ2Y5aUQsRUFBTSxFQUFRLElBQ2RJLEVBQVcsRUFBUSxHQUNuQkwsRUFBVSxFQUFRLElBQ2xCZ2pELEVBQVVqcEQsT0FBT2twRCxPQUdyQm5xRCxFQUFPRCxTQUFXbXFELEdBQVcsRUFBUSxFQUFSLENBQW9CLFdBQy9DLElBQUl0cEIsRUFBSSxHQUNKajlCLEVBQUksR0FFSkosRUFBSWpDLFNBQ0ptL0IsRUFBSSx1QkFHUixPQUZBRyxFQUFFcjlCLEdBQUssRUFDUGs5QixFQUFFMzZCLE1BQU0sSUFBSTBLLFFBQVEsU0FBVTJnQixHQUFLeHRCLEVBQUV3dEIsR0FBS0EsSUFDZCxHQUFyQis0QixFQUFRLEdBQUl0cEIsR0FBR3I5QixJQUFXdEMsT0FBT3VMLEtBQUswOUMsRUFBUSxHQUFJdm1ELElBQUl3QyxLQUFLLEtBQU9zNkIsSUFDdEUsU0FBZ0I3OEIsRUFBUWQsR0FNM0IsSUFMQSxJQUFJNlUsRUFBSXBRLEVBQVMzRCxHQUNiMEwsRUFBT25ILFVBQVVsQixPQUNqQnlDLEVBQVEsRUFDUjBnRCxFQUFhSCxFQUFLNWtELEVBQ2xCZ2xELEVBQVNsakQsRUFBSTlCLEVBQ1ZpSyxFQUFPNUYsR0FNWixJQUxBLElBSUk1SCxFQUpBeUIsRUFBSTJELEVBQVFpQixVQUFVdUIsTUFDdEI4QyxFQUFPNDlDLEVBQWFQLEVBQVF0bUQsR0FBR21RLE9BQU8wMkMsRUFBVzdtRCxJQUFNc21ELEVBQVF0bUQsR0FDL0QwRCxFQUFTdUYsRUFBS3ZGLE9BQ2QybUIsRUFBSSxFQUVEM21CLEVBQVMybUIsR0FDZDlyQixFQUFNMEssRUFBS29oQixLQUNON1csSUFBZXN6QyxFQUFPM3BELEtBQUs2QyxFQUFHekIsS0FBTTZWLEVBQUU3VixHQUFPeUIsRUFBRXpCLElBRXRELE9BQU82VixHQUNQdXlDLEcsY0NwQ0pscUQsRUFBT0QsUUFBVWtCLE9BQU95MkMsSUFBTSxTQUFZcDZCLEVBQUdDLEdBRTNDLE9BQU9ELElBQU1DLEVBQVUsSUFBTkQsR0FBVyxFQUFJQSxHQUFNLEVBQUlDLEVBQUlELEdBQUtBLEdBQUtDLEdBQUtBLEksNkJDRi9ELElBQUl6VixFQUFZLEVBQVEsSUFDcEIzRCxFQUFXLEVBQVEsR0FDbkJzMkMsRUFBUyxFQUFRLEtBQ2pCcnRDLEVBQWEsR0FBRy9FLE1BQ2hCaWlELEVBQVksR0FFWkMsRUFBWSxTQUFVcG5ELEVBQUd5TyxFQUFLNHBDLEdBQ2hDLEtBQU01cEMsS0FBTzA0QyxHQUFZLENBQ3ZCLElBQUssSUFBSXRvRCxFQUFJLEdBQUl6QixFQUFJLEVBQUdBLEVBQUlxUixFQUFLclIsSUFBS3lCLEVBQUV6QixHQUFLLEtBQU9BLEVBQUksSUFFeEQrcEQsRUFBVTE0QyxHQUFPN04sU0FBUyxNQUFPLGdCQUFrQi9CLEVBQUVtRSxLQUFLLEtBQU8sS0FDakUsT0FBT21rRCxFQUFVMTRDLEdBQUt6TyxFQUFHcTRDLElBRzdCeDdDLEVBQU9ELFFBQVVnRSxTQUFTaEMsTUFBUSxTQUFjaUcsR0FDOUMsSUFBSUQsRUFBS0QsRUFBVXpCLE1BQ2Zta0QsRUFBV3A5QyxFQUFXMU0sS0FBS3lILFVBQVcsR0FDdENzaUQsRUFBUSxXQUNWLElBQUlqUCxFQUFPZ1AsRUFBUzkyQyxPQUFPdEcsRUFBVzFNLEtBQUt5SCxZQUMzQyxPQUFPOUIsZ0JBQWdCb2tELEVBQVFGLEVBQVV4aUQsRUFBSXl6QyxFQUFLdjBDLE9BQVF1MEMsR0FBUWYsRUFBTzF5QyxFQUFJeXpDLEVBQU14ekMsSUFHckYsT0FESTdELEVBQVM0RCxFQUFHNUYsYUFBWXNvRCxFQUFNdG9ELFVBQVk0RixFQUFHNUYsV0FDMUNzb0QsSSxjQ3RCVHpxRCxFQUFPRCxRQUFVLFNBQVVnSSxFQUFJeXpDLEVBQU14ekMsR0FDbkMsSUFBSTBpRCxPQUFjNW1ELElBQVRrRSxFQUNULE9BQVF3ekMsRUFBS3YwQyxRQUNYLEtBQUssRUFBRyxPQUFPeWpELEVBQUszaUQsSUFDQUEsRUFBR3JILEtBQUtzSCxHQUM1QixLQUFLLEVBQUcsT0FBTzBpRCxFQUFLM2lELEVBQUd5ekMsRUFBSyxJQUNSenpDLEVBQUdySCxLQUFLc0gsRUFBTXd6QyxFQUFLLElBQ3ZDLEtBQUssRUFBRyxPQUFPa1AsRUFBSzNpRCxFQUFHeXpDLEVBQUssR0FBSUEsRUFBSyxJQUNqQnp6QyxFQUFHckgsS0FBS3NILEVBQU13ekMsRUFBSyxHQUFJQSxFQUFLLElBQ2hELEtBQUssRUFBRyxPQUFPa1AsRUFBSzNpRCxFQUFHeXpDLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQzFCenpDLEVBQUdySCxLQUFLc0gsRUFBTXd6QyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUN6RCxLQUFLLEVBQUcsT0FBT2tQLEVBQUszaUQsRUFBR3l6QyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ25DenpDLEVBQUdySCxLQUFLc0gsRUFBTXd6QyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ2xFLE9BQU96ekMsRUFBR0csTUFBTUYsRUFBTXd6QyxLLGdCQ2QxQixJQUFJbVAsRUFBWSxFQUFRLEdBQWFodkMsU0FDakNpdkMsRUFBUSxFQUFRLElBQWtCdHlDLEtBQ2xDdXlDLEVBQUssRUFBUSxJQUNiMXVDLEVBQU0sY0FFVm5jLEVBQU9ELFFBQW1DLElBQXpCNHFELEVBQVVFLEVBQUssT0FBMEMsS0FBM0JGLEVBQVVFLEVBQUssUUFBaUIsU0FBa0J4aUMsRUFBS3lpQyxHQUNwRyxJQUFJcmtELEVBQVNta0QsRUFBTXhrRCxPQUFPaWlCLEdBQU0sR0FDaEMsT0FBT3NpQyxFQUFVbGtELEVBQVNxa0QsSUFBVSxJQUFPM3VDLEVBQUlwVixLQUFLTixHQUFVLEdBQUssTUFDakVra0QsRyxnQkNSSixJQUFJSSxFQUFjLEVBQVEsR0FBYXB4QyxXQUNuQ2l4QyxFQUFRLEVBQVEsSUFBa0J0eUMsS0FFdEN0WSxFQUFPRCxRQUFVLEVBQUlnckQsRUFBWSxFQUFRLElBQWtCLFFBQVdsZixJQUFXLFNBQW9CeGpCLEdBQ25HLElBQUk1aEIsRUFBU21rRCxFQUFNeGtELE9BQU9paUIsR0FBTSxHQUM1QjFlLEVBQVNvaEQsRUFBWXRrRCxHQUN6QixPQUFrQixJQUFYa0QsR0FBb0MsS0FBcEJsRCxFQUFPd1UsT0FBTyxJQUFhLEVBQUl0UixHQUNwRG9oRCxHLGdCQ1BKLElBQUl0ekMsRUFBTSxFQUFRLElBQ2xCelgsRUFBT0QsUUFBVSxTQUFVcUUsRUFBSTRVLEdBQzdCLEdBQWlCLGlCQUFONVUsR0FBNkIsVUFBWHFULEVBQUlyVCxHQUFpQixNQUFNQyxVQUFVMlUsR0FDbEUsT0FBUTVVLEksZ0JDRlYsSUFBSUQsRUFBVyxFQUFRLEdBQ25Cb0UsRUFBUWpFLEtBQUtpRSxNQUNqQnZJLEVBQU9ELFFBQVUsU0FBbUJxRSxHQUNsQyxPQUFRRCxFQUFTQyxJQUFPNG1ELFNBQVM1bUQsSUFBT21FLEVBQU1uRSxLQUFRQSxJLGNDSHhEcEUsRUFBT0QsUUFBVXVFLEtBQUsybUQsT0FBUyxTQUFlM3RDLEdBQzVDLE9BQVFBLEdBQUtBLElBQU0sTUFBUUEsRUFBSSxLQUFPQSxFQUFJQSxFQUFJQSxFQUFJLEVBQUloWixLQUFLd2IsSUFBSSxFQUFJeEMsSyxnQkNEckUsSUFBSTQ2QixFQUFPLEVBQVEsSUFDZnJRLEVBQU12akMsS0FBS3VqQyxJQUNYcWpCLEVBQVVyakIsRUFBSSxHQUFJLElBQ2xCc2pCLEVBQVl0akIsRUFBSSxHQUFJLElBQ3BCdWpCLEVBQVF2akIsRUFBSSxFQUFHLE1BQVEsRUFBSXNqQixHQUMzQkUsRUFBUXhqQixFQUFJLEdBQUksS0FNcEI3bkMsRUFBT0QsUUFBVXVFLEtBQUtnbkQsUUFBVSxTQUFnQmh1QyxHQUM5QyxJQUVJdFksRUFBRzJFLEVBRkg0aEQsRUFBT2puRCxLQUFLd2EsSUFBSXhCLEdBQ2hCa3VDLEVBQVF0VCxFQUFLNTZCLEdBRWpCLE9BQUlpdUMsRUFBT0YsRUFBY0csR0FBd0JELEVBQU9GLEVBQVFGLEVBUHJELEVBQUlELEVBQVUsRUFBSUEsR0FPZ0RHLEVBQVFGLEdBRXJGeGhELEdBREEzRSxHQUFLLEVBQUltbUQsRUFBWUQsR0FBV0ssSUFDbEJ2bUQsRUFBSXVtRCxJQUVMSCxHQUFTemhELEdBQVVBLEVBQWU2aEQsR0FBUTNmLEtBQ2hEMmYsRUFBUTdoRCxJLGdCQ3BCakIsSUFBSTFFLEVBQVcsRUFBUSxHQUN2QmpGLEVBQU9ELFFBQVUsU0FBVXNQLEVBQVV0SCxFQUFJdkcsRUFBT2tMLEdBQzlDLElBQ0UsT0FBT0EsRUFBVTNFLEVBQUc5QyxFQUFTekQsR0FBTyxHQUFJQSxFQUFNLElBQU11RyxFQUFHdkcsR0FFdkQsTUFBT2tELEdBQ1AsSUFBSSttRCxFQUFNcDhDLEVBQWlCLE9BRTNCLFdBRFl2TCxJQUFSMm5ELEdBQW1CeG1ELEVBQVN3bUQsRUFBSS9xRCxLQUFLMk8sSUFDbkMzSyxLLGdCQ1RWLElBQUlvRCxFQUFZLEVBQVEsSUFDcEJQLEVBQVcsRUFBUSxHQUNuQkwsRUFBVSxFQUFRLElBQ2xCMkIsRUFBVyxFQUFRLEdBRXZCN0ksRUFBT0QsUUFBVSxTQUFVaUksRUFBTXdCLEVBQVk4RixFQUFNbzhDLEVBQU1DLEdBQ3ZEN2pELEVBQVUwQixHQUNWLElBQUlsRSxFQUFJaUMsRUFBU1MsR0FDYnpELEVBQU8yQyxFQUFRNUIsR0FDZjJCLEVBQVM0QixFQUFTdkQsRUFBRTJCLFFBQ3BCeUMsRUFBUWlpRCxFQUFVMWtELEVBQVMsRUFBSSxFQUMvQjFHLEVBQUlvckQsR0FBVyxFQUFJLEVBQ3ZCLEdBQUlyOEMsRUFBTyxFQUFHLE9BQVMsQ0FDckIsR0FBSTVGLEtBQVNuRixFQUFNLENBQ2pCbW5ELEVBQU9ubkQsRUFBS21GLEdBQ1pBLEdBQVNuSixFQUNULE1BR0YsR0FEQW1KLEdBQVNuSixFQUNMb3JELEVBQVVqaUQsRUFBUSxFQUFJekMsR0FBVXlDLEVBQ2xDLE1BQU1yRixVQUFVLCtDQUdwQixLQUFNc25ELEVBQVVqaUQsR0FBUyxFQUFJekMsRUFBU3lDLEVBQU9BLEdBQVNuSixFQUFPbUosS0FBU25GLElBQ3BFbW5ELEVBQU9saUQsRUFBV2tpRCxFQUFNbm5ELEVBQUttRixHQUFRQSxFQUFPcEUsSUFFOUMsT0FBT29tRCxJLDZCQ3hCVCxJQUFJbmtELEVBQVcsRUFBUSxHQUNuQjZDLEVBQWtCLEVBQVEsSUFDMUJ2QixFQUFXLEVBQVEsR0FFdkI3SSxFQUFPRCxRQUFVLEdBQUdpUSxZQUFjLFNBQW9CcE0sRUFBa0JxTSxHQUN0RSxJQUFJM0ssRUFBSWlDLEVBQVNsQixNQUNidUwsRUFBTS9JLEVBQVN2RCxFQUFFMkIsUUFDakJnOEIsRUFBSzc0QixFQUFnQnhHLEVBQVFnTyxHQUM3Qm1DLEVBQU8zSixFQUFnQjZGLEVBQU8yQixHQUM5QlIsRUFBTWpKLFVBQVVsQixPQUFTLEVBQUlrQixVQUFVLFFBQUtyRSxFQUM1Q2tpQyxFQUFRMWhDLEtBQUtTLFVBQWFqQixJQUFSc04sRUFBb0JRLEVBQU14SCxFQUFnQmdILEVBQUtRLElBQVFtQyxFQUFNbkMsRUFBTXF4QixHQUNyRjJvQixFQUFNLEVBTVYsSUFMSTczQyxFQUFPa3ZCLEdBQU1BLEVBQUtsdkIsRUFBT2l5QixJQUMzQjRsQixHQUFPLEVBQ1A3M0MsR0FBUWl5QixFQUFRLEVBQ2hCL0MsR0FBTStDLEVBQVEsR0FFVEEsS0FBVSxHQUNYanlCLEtBQVF6TyxFQUFHQSxFQUFFMjlCLEdBQU0zOUIsRUFBRXlPLFVBQ2J6TyxFQUFFMjlCLEdBQ2RBLEdBQU0yb0IsRUFDTjczQyxHQUFRNjNDLEVBQ1IsT0FBT3RtRCxJLGNDeEJYdEYsRUFBT0QsUUFBVSxTQUFVNFAsRUFBTW5PLEdBQy9CLE1BQU8sQ0FBRUEsTUFBT0EsRUFBT21PLE9BQVFBLEssNkJDQWpDLElBQUl3dUIsRUFBYSxFQUFRLElBQ3pCLEVBQVEsRUFBUixDQUFxQixDQUNuQnY2QixPQUFRLFNBQ1JtTSxPQUFPLEVBQ1A4N0MsT0FBUTF0QixJQUFlLElBQUkxNUIsTUFDMUIsQ0FDREEsS0FBTTA1QixLLGdCQ05KLEVBQVEsSUFBbUMsS0FBZCxLQUFLMnRCLE9BQWMsRUFBUSxHQUFnQnptRCxFQUFFNFMsT0FBTzlWLFVBQVcsUUFBUyxDQUN2RytQLGNBQWMsRUFDZDlRLElBQUssRUFBUSxPLGNDSGZwQixFQUFPRCxRQUFVLFNBQVUwRSxHQUN6QixJQUNFLE1BQU8sQ0FBRUMsR0FBRyxFQUFPdU8sRUFBR3hPLEtBQ3RCLE1BQU9DLEdBQ1AsTUFBTyxDQUFFQSxHQUFHLEVBQU11TyxFQUFHdk8sTSxnQkNKekIsSUFBSU8sRUFBVyxFQUFRLEdBQ25CZCxFQUFXLEVBQVEsR0FDbkI0bkQsRUFBdUIsRUFBUSxLQUVuQy9yRCxFQUFPRCxRQUFVLFNBQVU2TyxFQUFHME8sR0FFNUIsR0FEQXJZLEVBQVMySixHQUNMekssRUFBU21aLElBQU1BLEVBQUUzVixjQUFnQmlILEVBQUcsT0FBTzBPLEVBQy9DLElBQUkwdUMsRUFBb0JELEVBQXFCMW1ELEVBQUV1SixHQUcvQyxPQURBb3VDLEVBRGNnUCxFQUFrQmhQLFNBQ3hCMS9CLEdBQ0QwdUMsRUFBa0IvTyxVLDZCQ1QzQixJQUFJZ1AsRUFBUyxFQUFRLEtBQ2pCdDlDLEVBQVcsRUFBUSxJQUl2QjNPLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBSFAsTUFHcUMsU0FBVXFCLEdBQ3ZELE9BQU8sV0FBaUIsT0FBT0EsRUFBSWlGLEtBQU04QixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsS0FDOUUsQ0FFRDFDLElBQUssU0FBYVUsR0FDaEIsSUFBSW9xRCxFQUFRRCxFQUFPRSxTQUFTeDlDLEVBQVN0SSxLQVIvQixPQVEyQ3ZFLEdBQ2pELE9BQU9vcUQsR0FBU0EsRUFBTWo1QyxHQUd4QjFFLElBQUssU0FBYXpNLEVBQUtOLEdBQ3JCLE9BQU95cUQsRUFBTzEwQyxJQUFJNUksRUFBU3RJLEtBYnJCLE9BYXlDLElBQVJ2RSxFQUFZLEVBQUlBLEVBQUtOLEtBRTdEeXFELEdBQVEsSSw2QkNqQlgsSUFBSTdtRCxFQUFLLEVBQVEsR0FBZ0JDLEVBQzdCeEQsRUFBUyxFQUFRLElBQ2pCcUksRUFBYyxFQUFRLElBQ3RCdkgsRUFBTSxFQUFRLElBQ2RxSCxFQUFhLEVBQVEsSUFDckJ1MUIsRUFBUSxFQUFRLElBQ2hCNnNCLEVBQWMsRUFBUSxJQUN0Qmg5QyxFQUFPLEVBQVEsS0FDZnBFLEVBQWEsRUFBUSxJQUNyQitMLEVBQWMsRUFBUSxHQUN0QjNCLEVBQVUsRUFBUSxJQUFXQSxRQUM3QnpHLEVBQVcsRUFBUSxJQUNuQjA5QyxFQUFPdDFDLEVBQWMsS0FBTyxPQUU1Qm8xQyxFQUFXLFNBQVVua0QsRUFBTWxHLEdBRTdCLElBQ0lvcUQsRUFEQXhpRCxFQUFRMEwsRUFBUXRULEdBRXBCLEdBQWMsTUFBVjRILEVBQWUsT0FBTzFCLEVBQUsweEMsR0FBR2h3QyxHQUVsQyxJQUFLd2lELEVBQVFsa0QsRUFBS3NrRCxHQUFJSixFQUFPQSxFQUFRQSxFQUFNbHFELEVBQ3pDLEdBQUlrcUQsRUFBTS82QixHQUFLcnZCLEVBQUssT0FBT29xRCxHQUkvQmxzRCxFQUFPRCxRQUFVLENBQ2ZzZ0MsZUFBZ0IsU0FBVWh1QixFQUFTdkwsRUFBTW1DLEVBQVE0MkIsR0FDL0MsSUFBSWp4QixFQUFJeUQsRUFBUSxTQUFVckssRUFBTXFQLEdBQzlCck4sRUFBV2hDLEVBQU00RyxFQUFHOUgsRUFBTSxNQUMxQmtCLEVBQUtzUCxHQUFLeFEsRUFDVmtCLEVBQUsweEMsR0FBSzczQyxFQUFPLE1BQ2pCbUcsRUFBS3NrRCxRQUFLeG9ELEVBQ1ZrRSxFQUFLdWtELFFBQUt6b0QsRUFDVmtFLEVBQUtxa0QsR0FBUSxFQUNHdm9ELE1BQVp1VCxHQUF1QmtvQixFQUFNbG9CLEVBQVVwTyxFQUFRakIsRUFBSzYzQixHQUFRNzNCLEtBc0RsRSxPQXBEQWtDLEVBQVkwRSxFQUFFek0sVUFBVyxDQUd2QmkrQixNQUFPLFdBQ0wsSUFBSyxJQUFJcDRCLEVBQU8yRyxFQUFTdEksS0FBTVMsR0FBT2tNLEVBQU9oTCxFQUFLMHhDLEdBQUl3UyxFQUFRbGtELEVBQUtza0QsR0FBSUosRUFBT0EsRUFBUUEsRUFBTWxxRCxFQUMxRmtxRCxFQUFNN3FELEdBQUksRUFDTjZxRCxFQUFNN3BELElBQUc2cEQsRUFBTTdwRCxFQUFJNnBELEVBQU03cEQsRUFBRUwsT0FBSThCLFVBQzVCa1AsRUFBS2s1QyxFQUFNM3JELEdBRXBCeUgsRUFBS3NrRCxHQUFLdGtELEVBQUt1a0QsUUFBS3pvRCxFQUNwQmtFLEVBQUtxa0QsR0FBUSxHQUlmLE9BQVUsU0FBVXZxRCxHQUNsQixJQUFJa0csRUFBTzJHLEVBQVN0SSxLQUFNUyxHQUN0Qm9sRCxFQUFRQyxFQUFTbmtELEVBQU1sRyxHQUMzQixHQUFJb3FELEVBQU8sQ0FDVCxJQUFJeDhDLEVBQU93OEMsRUFBTWxxRCxFQUNiMmlCLEVBQU91bkMsRUFBTTdwRCxTQUNWMkYsRUFBSzB4QyxHQUFHd1MsRUFBTTNyRCxHQUNyQjJyRCxFQUFNN3FELEdBQUksRUFDTnNqQixJQUFNQSxFQUFLM2lCLEVBQUkwTixHQUNmQSxJQUFNQSxFQUFLck4sRUFBSXNpQixHQUNmM2MsRUFBS3NrRCxJQUFNSixJQUFPbGtELEVBQUtza0QsR0FBSzU4QyxHQUM1QjFILEVBQUt1a0QsSUFBTUwsSUFBT2xrRCxFQUFLdWtELEdBQUs1bkMsR0FDaEMzYyxFQUFLcWtELEtBQ0wsUUFBU0gsR0FJYjE3QyxRQUFTLFNBQWlCaEgsR0FDeEJtRixFQUFTdEksS0FBTVMsR0FHZixJQUZBLElBQ0lvbEQsRUFEQTdtRCxFQUFJMUMsRUFBSTZHLEVBQVlyQixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsRUFBVyxHQUVsRW9vRCxFQUFRQSxFQUFRQSxFQUFNbHFELEVBQUlxRSxLQUFLaW1ELElBR3BDLElBRkFqbkQsRUFBRTZtRCxFQUFNajVDLEVBQUdpNUMsRUFBTS82QixFQUFHOXFCLE1BRWI2bEQsR0FBU0EsRUFBTTdxRCxHQUFHNnFELEVBQVFBLEVBQU03cEQsR0FLM0NxRCxJQUFLLFNBQWE1RCxHQUNoQixRQUFTcXFELEVBQVN4OUMsRUFBU3RJLEtBQU1TLEdBQU9oRixNQUd4Q2lWLEdBQWEzUixFQUFHd0osRUFBRXpNLFVBQVcsT0FBUSxDQUN2Q2YsSUFBSyxXQUNILE9BQU91TixFQUFTdEksS0FBTVMsR0FBTXVsRCxNQUd6Qno5QyxHQUVUMkksSUFBSyxTQUFVdlAsRUFBTWxHLEVBQUtOLEdBQ3hCLElBQ0ltakIsRUFBTWpiLEVBRE53aUQsRUFBUUMsRUFBU25rRCxFQUFNbEcsR0FvQnpCLE9BakJFb3FELEVBQ0ZBLEVBQU1qNUMsRUFBSXpSLEdBR1Z3RyxFQUFLdWtELEdBQUtMLEVBQVEsQ0FDaEIzckQsRUFBR21KLEVBQVEwTCxFQUFRdFQsR0FBSyxHQUN4QnF2QixFQUFHcnZCLEVBQ0htUixFQUFHelIsRUFDSGEsRUFBR3NpQixFQUFPM2MsRUFBS3VrRCxHQUNmdnFELE9BQUc4QixFQUNIekMsR0FBRyxHQUVBMkcsRUFBS3NrRCxLQUFJdGtELEVBQUtza0QsR0FBS0osR0FDcEJ2bkMsSUFBTUEsRUFBSzNpQixFQUFJa3FELEdBQ25CbGtELEVBQUtxa0QsS0FFUyxNQUFWM2lELElBQWUxQixFQUFLMHhDLEdBQUdod0MsR0FBU3dpRCxJQUM3QmxrRCxHQUVYbWtELFNBQVVBLEVBQ1Y3ckIsVUFBVyxTQUFVMXhCLEVBQUc5SCxFQUFNbUMsR0FHNUJtakQsRUFBWXg5QyxFQUFHOUgsRUFBTSxTQUFVMnlDLEVBQVViLEdBQ3ZDdnlDLEtBQUtpUixHQUFLM0ksRUFBUzhxQyxFQUFVM3lDLEdBQzdCVCxLQUFLc3pDLEdBQUtmLEVBQ1Z2eUMsS0FBS2ttRCxRQUFLem9ELEdBQ1QsV0FLRCxJQUpBLElBQ0k4MEMsRUFET3Z5QyxLQUNLc3pDLEdBQ1p1UyxFQUZPN2xELEtBRU1rbUQsR0FFVkwsR0FBU0EsRUFBTTdxRCxHQUFHNnFELEVBQVFBLEVBQU03cEQsRUFFdkMsT0FOV2dFLEtBTURpUixLQU5DalIsS0FNWWttRCxHQUFLTCxFQUFRQSxFQUFRQSxFQUFNbHFELEVBTnZDcUUsS0FNZ0RpUixHQUFHZzFDLElBTW5DbDlDLEVBQUssRUFBcEIsUUFBUndwQyxFQUErQnNULEVBQU0vNkIsRUFDN0IsVUFBUnluQixFQUFpQ3NULEVBQU1qNUMsRUFDNUIsQ0FBQ2k1QyxFQUFNLzZCLEVBQUcrNkIsRUFBTWo1QyxLQWRwQjVNLEtBUUppUixRQUFLeFQsRUFDSHNMLEVBQUssS0FNYm5HLEVBQVMsVUFBWSxVQUFXQSxHQUFRLEdBRzNDK0IsRUFBV2xFLE0sNkJDNUlmLElBQUltbEQsRUFBUyxFQUFRLEtBQ2pCdDlDLEVBQVcsRUFBUSxJQUl2QjNPLEVBQU9ELFFBQVUsRUFBUSxHQUFSLENBSFAsTUFHcUMsU0FBVXFCLEdBQ3ZELE9BQU8sV0FBaUIsT0FBT0EsRUFBSWlGLEtBQU04QixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsS0FDOUUsQ0FFRDh4QixJQUFLLFNBQWFwMEIsR0FDaEIsT0FBT3lxRCxFQUFPMTBDLElBQUk1SSxFQUFTdEksS0FSckIsT0FRaUM3RSxFQUFrQixJQUFWQSxFQUFjLEVBQUlBLEVBQU9BLEtBRXpFeXFELEksNkJDWkgsSUFjSU8sRUFkQWpxRCxFQUFTLEVBQVEsR0FDakJrcUQsRUFBTyxFQUFRLEdBQVIsQ0FBNEIsR0FDbkMvcEQsRUFBVyxFQUFRLElBQ25Cd1MsRUFBTyxFQUFRLElBQ2ZpMUMsRUFBUyxFQUFRLEtBQ2pCdUMsRUFBTyxFQUFRLEtBQ2Z2b0QsRUFBVyxFQUFRLEdBQ25Cd0ssRUFBVyxFQUFRLElBQ25CZytDLEVBQWtCLEVBQVEsSUFDMUJDLEdBQVdycUQsRUFBT3NxRCxlQUFpQixrQkFBbUJ0cUQsRUFFdEQ4UyxFQUFVSCxFQUFLRyxRQUNmUixFQUFlNVQsT0FBTzRULGFBQ3RCaTRDLEVBQXNCSixFQUFLSyxRQUczQjE2QyxFQUFVLFNBQVVqUixHQUN0QixPQUFPLFdBQ0wsT0FBT0EsRUFBSWlGLEtBQU04QixVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsS0FJdkQ0N0IsRUFBVSxDQUVadCtCLElBQUssU0FBYVUsR0FDaEIsR0FBSXFDLEVBQVNyQyxHQUFNLENBQ2pCLElBQUlrUixFQUFPcUMsRUFBUXZULEdBQ25CLE9BQWEsSUFBVGtSLEVBQXNCODVDLEVBQW9CbitDLEVBQVN0SSxLQWpCOUMsWUFpQitEakYsSUFBSVUsR0FDckVrUixFQUFPQSxFQUFLM00sS0FBS3F6QyxTQUFNNTFDLElBSWxDeUssSUFBSyxTQUFhek0sRUFBS04sR0FDckIsT0FBT2tyRCxFQUFLbjFDLElBQUk1SSxFQUFTdEksS0F2QmQsV0F1QitCdkUsRUFBS04sS0FLL0N3ckQsRUFBV2h0RCxFQUFPRCxRQUFVLEVBQVEsR0FBUixDQTVCakIsVUE0Qm9Ec1MsRUFBU3F0QixFQUFTZ3RCLEdBQU0sR0FBTSxHQUc3RkMsR0FBbUJDLElBRXJCekMsR0FEQXFDLEVBQWNFLEVBQUtyc0IsZUFBZWh1QixFQWhDckIsWUFpQ01sUSxVQUFXdTlCLEdBQzlCeHFCLEVBQUtDLE1BQU8sRUFDWnMzQyxFQUFLLENBQUMsU0FBVSxNQUFPLE1BQU8sT0FBUSxTQUFVM3FELEdBQzlDLElBQUlpTyxFQUFRaTlDLEVBQVM3cUQsVUFDakJzRyxFQUFTc0gsRUFBTWpPLEdBQ25CWSxFQUFTcU4sRUFBT2pPLEVBQUssU0FBVWtELEVBQUdpRCxHQUVoQyxHQUFJOUQsRUFBU2EsS0FBTzZQLEVBQWE3UCxHQUFJLENBQzlCcUIsS0FBS2ltRCxLQUFJam1ELEtBQUtpbUQsR0FBSyxJQUFJRSxHQUM1QixJQUFJN2lELEVBQVN0RCxLQUFLaW1ELEdBQUd4cUQsR0FBS2tELEVBQUdpRCxHQUM3QixNQUFjLE9BQVBuRyxFQUFldUUsS0FBT3NELEVBRTdCLE9BQU9sQixFQUFPL0gsS0FBSzJGLEtBQU1yQixFQUFHaUQsUyw2QkN2RHBDLElBQUlpQyxFQUFjLEVBQVEsSUFDdEJtTCxFQUFVLEVBQVEsSUFBV0EsUUFDN0JwUSxFQUFXLEVBQVEsR0FDbkJkLEVBQVcsRUFBUSxHQUNuQjZGLEVBQWEsRUFBUSxJQUNyQnUxQixFQUFRLEVBQVEsSUFDaEI3MEIsRUFBb0IsRUFBUSxJQUM1QnVpRCxFQUFPLEVBQVEsSUFDZnQrQyxFQUFXLEVBQVEsSUFDbkIxQyxFQUFZdkIsRUFBa0IsR0FDOUJ3QixFQUFpQnhCLEVBQWtCLEdBQ25Da0ssRUFBSyxFQUdMazRDLEVBQXNCLFNBQVU5a0QsR0FDbEMsT0FBT0EsRUFBS3VrRCxLQUFPdmtELEVBQUt1a0QsR0FBSyxJQUFJVyxJQUUvQkEsRUFBc0IsV0FDeEI3bUQsS0FBS3JCLEVBQUksSUFFUG1vRCxFQUFxQixTQUFVeG9ELEVBQU83QyxHQUN4QyxPQUFPbUssRUFBVXRILEVBQU1LLEVBQUcsU0FBVVosR0FDbEMsT0FBT0EsRUFBRyxLQUFPdEMsS0FHckJvckQsRUFBb0IvcUQsVUFBWSxDQUM5QmYsSUFBSyxTQUFVVSxHQUNiLElBQUlvcUQsRUFBUWlCLEVBQW1COW1ELEtBQU12RSxHQUNyQyxHQUFJb3FELEVBQU8sT0FBT0EsRUFBTSxJQUUxQnhtRCxJQUFLLFNBQVU1RCxHQUNiLFFBQVNxckQsRUFBbUI5bUQsS0FBTXZFLElBRXBDeU0sSUFBSyxTQUFVek0sRUFBS04sR0FDbEIsSUFBSTBxRCxFQUFRaUIsRUFBbUI5bUQsS0FBTXZFLEdBQ2pDb3FELEVBQU9BLEVBQU0sR0FBSzFxRCxFQUNqQjZFLEtBQUtyQixFQUFFNEUsS0FBSyxDQUFDOUgsRUFBS04sS0FFekIsT0FBVSxTQUFVTSxHQUNsQixJQUFJNEgsRUFBUXdDLEVBQWU3RixLQUFLckIsRUFBRyxTQUFVWixHQUMzQyxPQUFPQSxFQUFHLEtBQU90QyxJQUduQixPQURLNEgsR0FBT3JELEtBQUtyQixFQUFFc25CLE9BQU81aUIsRUFBTyxNQUN2QkEsSUFJZDFKLEVBQU9ELFFBQVUsQ0FDZnNnQyxlQUFnQixTQUFVaHVCLEVBQVN2TCxFQUFNbUMsRUFBUTQyQixHQUMvQyxJQUFJanhCLEVBQUl5RCxFQUFRLFNBQVVySyxFQUFNcVAsR0FDOUJyTixFQUFXaEMsRUFBTTRHLEVBQUc5SCxFQUFNLE1BQzFCa0IsRUFBS3NQLEdBQUt4USxFQUNWa0IsRUFBSzB4QyxHQUFLOWtDLElBQ1Y1TSxFQUFLdWtELFFBQUt6b0QsRUFDTUEsTUFBWnVULEdBQXVCa29CLEVBQU1sb0IsRUFBVXBPLEVBQVFqQixFQUFLNjNCLEdBQVE3M0IsS0FvQmxFLE9BbEJBa0MsRUFBWTBFLEVBQUV6TSxVQUFXLENBR3ZCLE9BQVUsU0FBVUwsR0FDbEIsSUFBS3FDLEVBQVNyQyxHQUFNLE9BQU8sRUFDM0IsSUFBSWtSLEVBQU9xQyxFQUFRdlQsR0FDbkIsT0FBYSxJQUFUa1IsRUFBc0I4NUMsRUFBb0JuK0MsRUFBU3RJLEtBQU1TLElBQWUsT0FBRWhGLEdBQ3ZFa1IsR0FBUWk2QyxFQUFLajZDLEVBQU0zTSxLQUFLcXpDLFlBQWMxbUMsRUFBSzNNLEtBQUtxekMsS0FJekRoMEMsSUFBSyxTQUFhNUQsR0FDaEIsSUFBS3FDLEVBQVNyQyxHQUFNLE9BQU8sRUFDM0IsSUFBSWtSLEVBQU9xQyxFQUFRdlQsR0FDbkIsT0FBYSxJQUFUa1IsRUFBc0I4NUMsRUFBb0JuK0MsRUFBU3RJLEtBQU1TLElBQU9wQixJQUFJNUQsR0FDakVrUixHQUFRaTZDLEVBQUtqNkMsRUFBTTNNLEtBQUtxekMsT0FHNUI5cUMsR0FFVDJJLElBQUssU0FBVXZQLEVBQU1sRyxFQUFLTixHQUN4QixJQUFJd1IsRUFBT3FDLEVBQVFwUSxFQUFTbkQsSUFBTSxHQUdsQyxPQUZhLElBQVRrUixFQUFlODVDLEVBQW9COWtELEdBQU11RyxJQUFJek0sRUFBS04sR0FDakR3UixFQUFLaEwsRUFBSzB4QyxJQUFNbDRDLEVBQ2R3RyxHQUVUK2tELFFBQVNELEksZ0JDbEZYLElBQUlob0QsRUFBWSxFQUFRLElBQ3BCK0QsRUFBVyxFQUFRLEdBQ3ZCN0ksRUFBT0QsUUFBVSxTQUFVcUUsR0FDekIsUUFBV04sSUFBUE0sRUFBa0IsT0FBTyxFQUM3QixJQUFJZ3BELEVBQVN0b0QsRUFBVVYsR0FDbkI2QyxFQUFTNEIsRUFBU3VrRCxHQUN0QixHQUFJQSxJQUFXbm1ELEVBQVEsTUFBTW9FLFdBQVcsaUJBQ3hDLE9BQU9wRSxJLGdCQ1BULElBQUlzRCxFQUFPLEVBQVEsSUFDZjAvQyxFQUFPLEVBQVEsSUFDZmhsRCxFQUFXLEVBQVEsR0FDbkJvb0QsRUFBVSxFQUFRLEdBQWFBLFFBQ25DcnRELEVBQU9ELFFBQVVzdEQsR0FBV0EsRUFBUUMsU0FBVyxTQUFpQmxwRCxHQUM5RCxJQUFJb0ksRUFBT2pDLEVBQUtsRixFQUFFSixFQUFTYixJQUN2QmdtRCxFQUFhSCxFQUFLNWtELEVBQ3RCLE9BQU8ra0QsRUFBYTU5QyxFQUFLa0gsT0FBTzAyQyxFQUFXaG1ELElBQU9vSSxJLDZCQ05wRCxJQUFJK08sRUFBVSxFQUFRLElBQ2xCcFgsRUFBVyxFQUFRLEdBQ25CMEUsRUFBVyxFQUFRLEdBQ25CbEcsRUFBTSxFQUFRLElBQ2Q0cUQsRUFBdUIsRUFBUSxFQUFSLENBQWtCLHNCQWdDN0N2dEQsRUFBT0QsUUE5QlAsU0FBU3l0RCxFQUFpQjVwRCxFQUFRMDFDLEVBQVV4MkMsRUFBUTJxRCxFQUFXeDlDLEVBQU95OUMsRUFBT0MsRUFBUUMsR0FNbkYsSUFMQSxJQUdJcGtDLEVBQVNxa0MsRUFIVEMsRUFBYzc5QyxFQUNkODlDLEVBQWMsRUFDZGp0QixJQUFRNnNCLEdBQVNockQsRUFBSWdyRCxFQUFRQyxFQUFTLEdBR25DRyxFQUFjTixHQUFXLENBQzlCLEdBQUlNLEtBQWVqckQsRUFBUSxDQVN6QixHQVJBMG1CLEVBQVVzWCxFQUFRQSxFQUFNaCtCLEVBQU9pckQsR0FBY0EsRUFBYXpVLEdBQVl4MkMsRUFBT2lyRCxHQUU3RUYsR0FBYSxFQUNUMXBELEVBQVNxbEIsS0FFWHFrQyxPQUE0Qi9wRCxLQUQ1QitwRCxFQUFhcmtDLEVBQVErakMsTUFDcUJNLEVBQWF0eUMsRUFBUWlPLElBRzdEcWtDLEdBQWNILEVBQVEsRUFDeEJJLEVBQWNOLEVBQWlCNXBELEVBQVEwMUMsRUFBVTl2QixFQUFTM2dCLEVBQVMyZ0IsRUFBUXZpQixRQUFTNm1ELEVBQWFKLEVBQVEsR0FBSyxNQUN6RyxDQUNMLEdBQUlJLEdBQWUsaUJBQWtCLE1BQU16cEQsWUFDM0NULEVBQU9rcUQsR0FBZXRrQyxFQUd4QnNrQyxJQUVGQyxJQUVGLE9BQU9ELEksZ0JDbENULElBQUlqbEQsRUFBVyxFQUFRLEdBQ25CbWxELEVBQVMsRUFBUSxJQUNqQnhvRCxFQUFVLEVBQVEsSUFFdEJ4RixFQUFPRCxRQUFVLFNBQVVpSSxFQUFNaW1ELEVBQVdDLEVBQVlDLEdBQ3RELElBQUk1cUQsRUFBSTZDLE9BQU9aLEVBQVF3QyxJQUNuQm9tRCxFQUFlN3FELEVBQUUwRCxPQUNqQm9uRCxPQUF5QnZxRCxJQUFmb3FELEVBQTJCLElBQU05bkQsT0FBTzhuRCxHQUNsREksRUFBZXpsRCxFQUFTb2xELEdBQzVCLEdBQUlLLEdBQWdCRixHQUEyQixJQUFYQyxFQUFlLE9BQU85cUQsRUFDMUQsSUFBSWdyRCxFQUFVRCxFQUFlRixFQUN6QkksRUFBZVIsRUFBT3R0RCxLQUFLMnRELEVBQVMvcEQsS0FBS2dFLEtBQUtpbUQsRUFBVUYsRUFBUXBuRCxTQUVwRSxPQURJdW5ELEVBQWF2bkQsT0FBU3NuRCxJQUFTQyxFQUFlQSxFQUFhbm1ELE1BQU0sRUFBR2ttRCxJQUNqRUosRUFBT0ssRUFBZWpyRCxFQUFJQSxFQUFJaXJELEksZ0JDZHZDLElBQUl6M0MsRUFBYyxFQUFRLEdBQ3RCOHlDLEVBQVUsRUFBUSxJQUNsQnppRCxFQUFZLEVBQVEsSUFDcEJpakQsRUFBUyxFQUFRLElBQWlCaGxELEVBQ3RDckYsRUFBT0QsUUFBVSxTQUFVMHVELEdBQ3pCLE9BQU8sU0FBVXJxRCxHQU9mLElBTkEsSUFLSXRDLEVBTEF3RCxFQUFJOEIsRUFBVWhELEdBQ2RvSSxFQUFPcTlDLEVBQVF2a0QsR0FDZjJCLEVBQVN1RixFQUFLdkYsT0FDZDFHLEVBQUksRUFDSm9KLEVBQVMsR0FFTjFDLEVBQVMxRyxHQUNkdUIsRUFBTTBLLEVBQUtqTSxLQUNOd1csSUFBZXN6QyxFQUFPM3BELEtBQUs0RSxFQUFHeEQsSUFDakM2SCxFQUFPQyxLQUFLNmtELEVBQVksQ0FBQzNzRCxFQUFLd0QsRUFBRXhELElBQVF3RCxFQUFFeEQsSUFHOUMsT0FBTzZILEssZ0JDakJYLElBQUlVLEVBQVUsRUFBUSxJQUNsQjBKLEVBQU8sRUFBUSxLQUNuQi9ULEVBQU9ELFFBQVUsU0FBVStHLEdBQ3pCLE9BQU8sV0FDTCxHQUFJdUQsRUFBUWhFLE9BQVNTLEVBQU0sTUFBTXpDLFVBQVV5QyxFQUFPLHlCQUNsRCxPQUFPaU4sRUFBSzFOLFMsZ0JDTmhCLElBQUlrNUIsRUFBUSxFQUFRLElBRXBCdi9CLEVBQU9ELFFBQVUsU0FBVTBULEVBQU1qRyxHQUMvQixJQUFJN0QsRUFBUyxHQUViLE9BREE0MUIsRUFBTTlyQixHQUFNLEVBQU85SixFQUFPQyxLQUFNRCxFQUFRNkQsR0FDakM3RCxJLGNDSlQzSixFQUFPRCxRQUFVdUUsS0FBSzQxQixPQUFTLFNBQWU1YyxFQUFHb3hDLEVBQU9DLEVBQVFDLEVBQVFDLEdBQ3RFLE9BQ3VCLElBQXJCMW1ELFVBQVVsQixRQUVMcVcsR0FBS0EsR0FFTG94QyxHQUFTQSxHQUVUQyxHQUFVQSxHQUVWQyxHQUFVQSxHQUVWQyxHQUFXQSxFQUNUbFEsSUFDTHJoQyxJQUFNdXVCLEtBQVl2dUIsS0FBT3V1QixJQUFpQnZ1QixHQUN0Q0EsRUFBSW94QyxJQUFVRyxFQUFVRCxJQUFXRCxFQUFTRCxHQUFTRSxJLDZCQ2hCL0QsK0RBSUF6dUQsT0FBTzJ1RCxNQUFRLENBQ1hoTyxTQUFVLEdBQ1ZpTyxVQUFXLElBQVdyMEMsV0FDdEJ3bkIsU0FBVSxJQUNDLElBQVVKLGFBRXJCa3RCLFdBQVksQ0FBQy9OLEVBQU1wb0MsRUFBUStyQyxLQUN2Qi9yQyxFQUFPRSxLQUFPLENBQUVsVyxLQUFNLFFBQVNtVyxJQUFLLGdCQUNPLElBQXZDL1gsT0FBT3VMLEtBQUtzaUQsTUFBTWhPLFVBQVU3NUMsU0FDNUI2bkQsTUFBTWhPLFNBQVcsSUFBSSxLQUVsQmdPLE1BQU1oTyxTQUFTbU8sS0FBS2hPLEVBQU1wb0MsR0FBUXFrQyxLQUFLLEtBQzFDLElBQUs0UixNQUFNaE8sU0FBUy91QixTQUNoQixPQUFPKzhCLE1BQU1oTyxTQUFTb08sT0FBT3RLLEVBQVUvckMsTUFJbkQrVCxNQUFPLFdBQ0gsSUFBVTQxQixZQUVkMk0sV0FBWSxXQUNSLE9BQU8sSUFBVXBLLFlBRXJCaCtDLEtBQU0sU0FBVWs2QyxHQUNabGpDLFFBQVErQixJQUFJLG1CQUFvQm1oQyxNLDZCQzFCeENoZ0QsT0FBT0MsZUFBZW5CLEVBQVMsYUFBYyxDQUMzQ3lCLE9BQU8sSUFFVHpCLEVBQVF1NkIsYUFBZXY2QixFQUFRNDhCLGtCQUFlLEVBRTlDLElBVWdDdGhCLEVBVjVCa2YsRUFBVSxFQUFRLEtBRWxCNjBCLEVBQVUsRUFBUSxLQUVsQkMsRUFBVSxFQUFRLElBRWxCejBCLEdBSTRCdmYsRUFKQSxFQUFRLE1BSWFBLEVBQUkxWixXQUFhMFosRUFBTSxDQUFFLFFBQVdBLEdBRnJGb2YsRUFBUSxFQUFRLElBSXBCLFNBQVM2MEIsRUFBZXJ4QixFQUFLMTlCLEdBQUssT0FNbEMsU0FBeUIwOUIsR0FBTyxHQUFJenlCLE1BQU0rUCxRQUFRMGlCLEdBQU0sT0FBT0EsRUFOdEJzeEIsQ0FBZ0J0eEIsSUFJekQsU0FBK0JBLEVBQUsxOUIsR0FBSyxLQUFNZSxPQUFPK04sWUFBWXBPLE9BQU9nOUIsSUFBZ0QsdUJBQXhDaDlCLE9BQU9rQixVQUFVaUcsU0FBUzFILEtBQUt1OUIsSUFBa0MsT0FBVSxJQUFJdXhCLEVBQU8sR0FBUUMsR0FBSyxFQUFVdmdELEdBQUssRUFBV3dnRCxPQUFLNXJELEVBQVcsSUFBTSxJQUFLLElBQWlDNnJELEVBQTdCalcsRUFBS3piLEVBQUkzOEIsT0FBTytOLGNBQW1Cb2dELEdBQU1FLEVBQUtqVyxFQUFHaHFDLFFBQVFDLFFBQW9CNi9DLEVBQUs1bEQsS0FBSytsRCxFQUFHbnVELFFBQVlqQixHQUFLaXZELEVBQUt2b0QsU0FBVzFHLEdBQTNEa3ZELEdBQUssSUFBb0UsTUFBT0csR0FBTzFnRCxHQUFLLEVBQU13Z0QsRUFBS0UsRUFBTyxRQUFVLElBQVdILEdBQXNCLE1BQWhCL1YsRUFBVyxRQUFXQSxFQUFXLFNBQU8sUUFBVSxHQUFJeHFDLEVBQUksTUFBTXdnRCxHQUFRLE9BQU9GLEVBSnBjSyxDQUFzQjV4QixFQUFLMTlCLElBRTVGLFdBQThCLE1BQU0sSUFBSThELFVBQVUsd0RBRmdEeXJELEdBUWxHLFNBQVNya0IsRUFBbUJ4TixHQUFPLE9BTW5DLFNBQTRCQSxHQUFPLEdBQUl6eUIsTUFBTStQLFFBQVEwaUIsR0FBTSxDQUFFLElBQUssSUFBSTE5QixFQUFJLEVBQUd1YSxFQUFPLElBQUl0UCxNQUFNeXlCLEVBQUloM0IsUUFBUzFHLEVBQUkwOUIsRUFBSWgzQixPQUFRMUcsSUFBT3VhLEVBQUt2YSxHQUFLMDlCLEVBQUkxOUIsR0FBTSxPQUFPdWEsR0FObkg0d0IsQ0FBbUJ6TixJQUk3RCxTQUEwQnhxQixHQUFRLEdBQUluUyxPQUFPK04sWUFBWXBPLE9BQU93UyxJQUFrRCx1QkFBekN4UyxPQUFPa0IsVUFBVWlHLFNBQVMxSCxLQUFLK1MsR0FBZ0MsT0FBT2pJLE1BQU11SSxLQUFLTixHQUpyRms0QixDQUFpQjFOLElBRXRGLFdBQWdDLE1BQU0sSUFBSTU1QixVQUFVLG1EQUYwQ3VuQyxHQVE5RixTQUFTMGhCLEVBQVFyckQsRUFBUTh0RCxHQUFrQixJQUFJdmpELEVBQU92TCxPQUFPdUwsS0FBS3ZLLEdBQVMsR0FBSWhCLE9BQU91OEIsc0JBQXVCLENBQUUsSUFBSXd5QixFQUFVL3VELE9BQU91OEIsc0JBQXNCdjdCLEdBQWE4dEQsSUFBZ0JDLEVBQVVBLEVBQVE1L0MsT0FBTyxTQUFVNi9DLEdBQU8sT0FBT2h2RCxPQUFPcUcseUJBQXlCckYsRUFBUWd1RCxHQUFLOXVELGNBQWdCcUwsRUFBSzVDLEtBQUsxQixNQUFNc0UsRUFBTXdqRCxHQUFZLE9BQU94akQsRUFJOVUsU0FBUzR1QixFQUFnQkQsRUFBVWxrQixHQUFlLEtBQU1ra0IsYUFBb0Jsa0IsR0FBZ0IsTUFBTSxJQUFJNVMsVUFBVSxxQ0FFaEgsU0FBU3cyQixFQUFrQmozQixFQUFRazNCLEdBQVMsSUFBSyxJQUFJdjZCLEVBQUksRUFBR0EsRUFBSXU2QixFQUFNN3pCLE9BQVExRyxJQUFLLENBQUUsSUFBSXc2QixFQUFhRCxFQUFNdjZCLEdBQUl3NkIsRUFBVzU1QixXQUFhNDVCLEVBQVc1NUIsYUFBYyxFQUFPNDVCLEVBQVc3b0IsY0FBZSxFQUFVLFVBQVc2b0IsSUFBWUEsRUFBVzVvQixVQUFXLEdBQU1sUixPQUFPQyxlQUFlMEMsRUFBUW0zQixFQUFXajVCLElBQUtpNUIsSUFFN1MsU0FBU20xQixFQUFhajVDLEVBQWE0a0IsRUFBWUMsR0FBbUosT0FBaElELEdBQVloQixFQUFrQjVqQixFQUFZOVUsVUFBVzA1QixHQUFpQkMsR0FBYWpCLEVBQWtCNWpCLEVBQWE2a0IsR0FBcUI3a0IsRUFFek0sU0FBU29rQixFQUFnQmhnQixFQUFLdlosRUFBS04sR0FBaUssT0FBcEpNLEtBQU91WixFQUFPcGEsT0FBT0MsZUFBZW1hLEVBQUt2WixFQUFLLENBQUVOLE1BQU9BLEVBQU9MLFlBQVksRUFBTStRLGNBQWMsRUFBTUMsVUFBVSxJQUFrQmtKLEVBQUl2WixHQUFPTixFQUFnQjZaLEVBRTNNLElBQUlzaEIsRUFFSixXQW1RRSxTQUFTQSxFQUFhUixHQUNwQmYsRUFBZ0IvMEIsS0FBTXMyQixHQUV0QnRCLEVBQWdCaDFCLEtBQU0sWUFBUSxHQUU5QmcxQixFQUFnQmgxQixLQUFNLGNBQVUsR0FFaENnMUIsRUFBZ0JoMUIsS0FBTSxnQkFBWSxHQUVsQ2cxQixFQUFnQmgxQixLQUFNLFlBQWEsSUFFbkNBLEtBQUt4RyxLQUFPczhCLEVBQ1o5MUIsS0FBSzhwRCxPQUFTLENBQUMsRUFBRyxFQUFHLEdBQ3JCOXBELEtBQUtpekIsU0FBVyxDQUFDLEVBQUcsRUFBRyxHQTZKekIsT0E1YUE0MkIsRUFBYXZ6QixFQUFjLENBQUMsQ0FDMUI3NkIsSUFBSyxxQkFDTE4sTUFBTyxTQUE0Qk0sR0FDakMsT0FBUUEsR0FDTixJQUFLLElBQ0wsSUFBSyxJQUNILE9BQU8waEIsS0FBS0MsTUFBTUQsS0FBS0csVUFBaUIsS0FBUDdoQixFQUFhdUUsS0FBSzhwRCxPQUFTOXBELEtBQUtpekIsV0FFbkUsSUFBSyxJQUNILE1BQU8sQ0FBQyxJQUFLLElBQUssS0FFcEIsSUFBSyxJQUNILE9BQU8sSUFFVCxJQUFLLElBQ0gsT0FBTyxFQUVULElBQUssS0FDSCxNQUFPLENBQ0xoM0IsRUFBRyxDQUNENnVCLEVBQUcsR0FFTHpzQixFQUFHLENBQ0R5c0IsRUFBRyxLQUVMbndCLEVBQUcsQ0FDRG13QixFQUFHLElBSVQsUUFDRSxPQUFPLEtBR1osQ0FDRHJ2QixJQUFLLDBCQUNMTixNQUFPLFNBQWlDNHVELEVBQVd0dUQsR0FRakQsR0FQS3N1RCxFQUFVdHVELEtBQ2JzdUQsRUFBVXR1RCxHQUFPLENBQ2ZrRCxFQUFHLEVBQ0htc0IsRUFBRzlxQixLQUFLZ3FELG1CQUFtQnZ1RCxLQUlQLEdBQXBCc3VELEVBQVV0dUQsR0FBS2tELEVBQVEsQ0FDekIsSUFBSXNyRCxFQUFjRixFQUFVdHVELEdBQUtxdkIsRUFBRSxHQUFHN3VCLEVBQ3RDOHRELEVBQVV0dUQsR0FBTyxDQUNma0QsRUFBRyxFQUNIbXNCLEVBQUdtL0IsTUFJUixDQUNEeHVELElBQUssOEJBQ0xOLE1BQU8sU0FBcUM0dUQsRUFBV3R1RCxHQUNoRHN1RCxFQUFVdHVELElBQVNzdUQsRUFBVXR1RCxHQUFLa0QsSUFDMUIsS0FBUGxELElBQ0Z1RSxLQUFLOHBELE9BQVNDLEVBQVV0dUQsR0FBT3N1RCxFQUFVdHVELEdBQUtxdkIsRUFBSSxDQUFDLEVBQUcsRUFBRyxJQUdoRCxLQUFQcnZCLElBQ0Z1RSxLQUFLaXpCLFNBQVc4MkIsRUFBVXR1RCxHQUFPc3VELEVBQVV0dUQsR0FBS3F2QixFQUFJLENBQUMsRUFBRyxFQUFHLElBRzdEaS9CLEVBQVV0dUQsR0FBTyxDQUNma0QsRUFBRyxFQUNIbXNCLEVBQUcsT0FJUixDQUNEcnZCLElBQUssY0FDTE4sTUFBTyxTQUFxQjR1RCxFQUFXdHVELEdBQ3JDLElBUUl5dUQsRUFSQWp1QyxFQUFNbmEsVUFBVWxCLE9BQVMsUUFBc0JuRCxJQUFqQnFFLFVBQVUsR0FBbUJBLFVBQVUsSUFBTSxFQUMzRXNULEVBQU90VCxVQUFVbEIsT0FBUyxFQUFJa0IsVUFBVSxRQUFLckUsRUFDN0N0QyxFQUFRMkcsVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLEVBQzlDNC9CLEVBQVN2N0IsVUFBVWxCLE9BQVMsRUFBSWtCLFVBQVUsUUFBS3JFLEVBQy9DMHNELElBQU9yb0QsVUFBVWxCLE9BQVMsUUFBc0JuRCxJQUFqQnFFLFVBQVUsS0FBbUJBLFVBQVUsR0FDdEVzb0QsRUFBZ0JMLEVBQVV0dUQsR0FBS3F2QixFQUFFL2dCLE9BQU8sU0FBVWtOLEdBQ3BELE9BQU9BLEVBQUU3YixHQUFLZ2EsSUFJaEIsR0FBSWcxQyxFQUFjeHBELE9BQ2hCc3BELEVBQWFFLEVBQWMsT0FDdEIsQ0FDTEYsRUFBYSxDQUNYOXVELEVBQUdnYSxFQUNIblosRUFBRytELEtBQUtncUQsbUJBQW1CdnVELElBRTdCLElBQUk0dUQsRUFBd0JOLEVBQVV0dUQsR0FBS3F2QixFQUFFcmtCLE9BQU8sU0FBVXpLLEVBQUdpYixHQUMvRCxPQUFPQSxFQUFFN2IsRUFBSWdhLEVBQU9wWixFQUFJLEVBQUlBLEdBQzNCLEdBQ0grdEQsRUFBVXR1RCxHQUFLcXZCLEVBQUU3RSxPQUFPb2tDLEVBQXVCLEVBQUdILEdBR2hEN3NCLElBQ0Y2c0IsRUFBV3Z2RCxFQUFJLENBQ2JzYyxFQUFHb21CLEVBQU8sR0FBRyxHQUNibm1CLEVBQUdtbUIsRUFBTyxHQUFHLElBRWY2c0IsRUFBV2h3RCxFQUFJLENBQ2IrYyxFQUFHb21CLEVBQU8sR0FBRyxHQUNibm1CLEVBQUdtbUIsRUFBTyxHQUFHLEtBSWJwaEIsR0FBTyxFQUNUaXVDLEVBQVdqdUQsRUFBRWdnQixHQUFPOWdCLEVBRXBCK3VELEVBQVdqdUQsR0FBSWt1RCxHQUFVaHZELGFBQWlCZ0ssTUFBbUJoSyxFQUFWLENBQUNBLEtBR3ZELENBQ0RNLElBQUsscUJBQ0xOLE1BQU8sU0FBNEJNLEdBQ2pDLE9BQU91RSxLQUFLeEcsS0FBSzh3RCxPQUFPLEdBQUd2c0QsR0FBR2lNLEtBQUssU0FBVXVnRCxHQUMzQyxPQUFPQSxFQUFNOW1DLElBQU1ob0IsTUFHdEIsQ0FDREEsSUFBSyw2QkFDTE4sTUFBTyxTQUFvQ00sR0FDekMsSUFBSXVPLEVBQU9oSyxLQUFLd3FELG1CQUFtQi91RCxHQUNuQyxHQUFJdU8sRUFBTSxPQUFPQSxFQUNqQixJQUFJeWdELEVBQWV6cUQsS0FBS3dxRCxtQkFBbUIsTUFFdkNFLEVBNUlWLFNBQXVCbnRELEdBQVUsSUFBSyxJQUFJckQsRUFBSSxFQUFHQSxFQUFJNEgsVUFBVWxCLE9BQVExRyxJQUFLLENBQUUsSUFBSXVDLEVBQXlCLE1BQWhCcUYsVUFBVTVILEdBQWE0SCxVQUFVNUgsR0FBSyxHQUFRQSxFQUFJLEVBQUsrc0QsRUFBUXJzRCxPQUFPNkIsSUFBUyxHQUFNME4sUUFBUSxTQUFVMU8sR0FBT3U1QixFQUFnQnozQixFQUFROUIsRUFBS2dCLEVBQU9oQixNQUFzQmIsT0FBTyt2RCwwQkFBNkIvdkQsT0FBTzZvRCxpQkFBaUJsbUQsRUFBUTNDLE9BQU8rdkQsMEJBQTBCbHVELElBQW1Cd3FELEVBQVFyc0QsT0FBTzZCLElBQVMwTixRQUFRLFNBQVUxTyxHQUFPYixPQUFPQyxlQUFlMEMsRUFBUTlCLEVBQUtiLE9BQU9xRyx5QkFBeUJ4RSxFQUFRaEIsTUFBZSxPQUFPOEIsRUE0STFmcXRELENBQWMsQ0FDekJubkMsR0FBSWhvQixHQUNIdUUsS0FBS2dxRCxtQkFBbUJ2dUQsSUFFM0IsR0FBSWd2RCxFQUFjLENBQ2hCLElBQUlJLEVBQWM3cUQsS0FBS3hHLEtBQUs4d0QsT0FBTyxHQUFHdnNELEdBQ3RDOHNELEVBQVk1a0MsT0FBTzRrQyxFQUFZanFELE9BQVMsRUFBRyxFQUFHOHBELFFBRTlDMXFELEtBQUt4RyxLQUFLOHdELE9BQU8sR0FBR3ZzRCxHQUFHd0YsS0FBS21uRCxHQUc5QixPQUFPQSxJQUVSLENBQ0RqdkQsSUFBSyx3QkFDTE4sTUFBTyxTQUErQk0sR0FDcEMsSUFBSXF2RCxFQUFNaGdDLEVBQUd6bkIsRUFFYixPQUFRNUgsR0FDTixJQUFLLFNBQ0hxdkQsRUFBTzlxRCxLQUFLeEcsS0FBS3V4RCxHQUNqQmpnQyxFQUFJLElBQ0p6bkIsRUFBUSxFQUNSLE1BRUYsSUFBSyxTQUNIeW5ELEVBQU85cUQsS0FBS3hHLEtBQUt1eEQsR0FDakJqZ0MsRUFBSSxJQUNKem5CLEVBQVEsRUFDUixNQUVGLElBQUssVUFDSHluRCxFQUFPOXFELEtBQUt4RyxLQUFLdXhELEdBQ2pCamdDLEVBQUksSUFDSnpuQixFQUFRLEVBQ1IsTUFFRixJQUFLLFVBQ0h5bkQsRUFBTzlxRCxLQUFLeEcsS0FBS3V4RCxHQUNqQmpnQyxFQUFJLElBQ0p6bkIsRUFBUSxFQUNSLE1BRUYsSUFBSyxJQUNIeW5ELEVBQU85cUQsS0FBS3hHLEtBQUt1eEQsR0FDakJqZ0MsRUFBSSxJQUNKem5CLEVBQVEsRUFDUixNQUVGLElBQUssSUFDSHluRCxFQUFPOXFELEtBQUt4RyxLQUFLdXhELEdBQ2pCamdDLEVBQUksSUFDSnpuQixFQUFRLEVBQ1IsTUFFRixJQUFLLFNBQ0h5bkQsRUFBTzlxRCxLQUFLeEcsS0FBS3V4RCxHQUNqQmpnQyxFQUFJLElBQ0p6bkIsR0FBUyxFQUNULE1BRUYsSUFBSyxVQUNIeW5ELEVBQU85cUQsS0FBS3hHLEtBQUt1eEQsR0FDakJqZ0MsRUFBSSxJQUNKem5CLEdBQVMsRUFDVCxNQUVGLElBQUssWUFDSHluRCxFQUFPOXFELEtBQUtnckQsMkJBQTJCLE1BQ3ZDbGdDLEVBQUksSUFDSnpuQixHQUFTLEVBQ1QsTUFFRixJQUFLLFVBQ0h5bkQsRUFBTzlxRCxLQUFLZ3JELDJCQUEyQixNQUN2Q2xnQyxFQUFJLElBQ0p6bkIsR0FBUyxFQUNULE1BRUYsSUFBSyxhQUNIeW5ELEVBQU85cUQsS0FBS2dyRCwyQkFBMkIsTUFDdkNsZ0MsRUFBSSxJQUNKem5CLEdBQVMsRUFDVCxNQUVGLElBQUssWUFDSHluRCxFQUFPOXFELEtBQUt3cUQsbUJBQW1CLE1BQy9CMS9CLEVBQUksSUFDSnpuQixHQUFTLEVBQ1QsTUFFRixJQUFLLGNBQ0h5bkQsRUFBTzlxRCxLQUFLd3FELG1CQUFtQixNQUMvQjEvQixFQUFJLElBQ0p6bkIsR0FBUyxFQUNULE1BRUYsSUFBSyxjQUNIeW5ELEVBQU85cUQsS0FBS3dxRCxtQkFBbUIsTUFDL0IxL0IsRUFBSSxJQUNKem5CLEdBQVMsRUFDVCxNQUVGLElBQUssUUFDSHluRCxFQUFPOXFELEtBQUt3cUQsbUJBQW1CLE1BQy9CMS9CLEVBQUksS0FDSnpuQixHQUFTLEVBQ1QsTUFFRixJQUFLLGNBQ0h5bkQsRUFBTzlxRCxLQUFLd3FELG1CQUFtQixNQUMvQjEvQixFQUFJLElBQ0p6bkIsR0FBUyxFQUNULE1BRUYsSUFBSyxnQkFDSHluRCxFQUFPOXFELEtBQUt3cUQsbUJBQW1CLE1BQy9CMS9CLEVBQUksSUFDSnpuQixHQUFTLEVBSWIsTUFBTyxDQUFDeW5ELEVBQU1oZ0MsRUFBR3puQixLQUVsQixDQUNENUgsSUFBSyxrQkFDTE4sTUFBTyxXQUNMNkUsS0FBS3hHLEtBQUsrN0IsR0FBS3QzQixLQUFLdVIsSUFBSTNOLE1BQU01RCxLQUFNbW5DLEVBQW1CeHFDLE9BQU9xTCxPQUFPakcsS0FBS2lyRCxZQUFZNTlDLE9BQU8sQ0FBQyxTQTBCbEd3OEMsRUFBYXZ6QixFQUFjLENBQUMsQ0FDMUI3NkIsSUFBSyxvQkFDTE4sTUFBTyxTQUEyQk0sRUFBS04sR0FTckMsSUFBSTJ2RCxFQUFNaGdDLEVBQUd6bkIsRUFSYnJELEtBQUtpckQsVUFBVXh2RCxHQUFPLEVBQ3RCdUUsS0FBS2tyRCxrQkFFRC92RCxhQUFpQmk1QixFQUFNQyxZQUN6Qmw1QixFQUFNMHFCLFVBQ04xcUIsRUFBUUEsRUFBTWt0QyxNQUtoQixJQUVJOGlCLEVBQXlCbEMsRUFGRGpwRCxLQUFLb3JELHNCQUFzQjN2RCxHQUVZLEdBTW5FLEdBSkFxdkQsRUFBT0ssRUFBdUIsR0FDOUJyZ0MsRUFBSXFnQyxFQUF1QixHQUMzQjluRCxFQUFROG5ELEVBQXVCLElBRTFCcmdDLFFBQWVydEIsSUFBVjRGLEVBQ1IsT0FBUTVILEdBQ04sSUFBSyxPQUNILEdBQW9CLEdBQWhCdUUsS0FBS3hHLEtBQUtpcUIsR0FBUyxDQUNyQixJQUFJNG5DLEVBQU1yckQsS0FBS3hHLEtBQUs0QixFQUFFWixFQUN0QjZ3RCxFQUFJdmdDLEVBQUksQ0FBQ3VnQyxFQUFJdmdDLEVBQUUsSUFDZnVnQyxFQUFJdmdDLEVBQUUsR0FBRzF2QixFQUFJLEVBQ2Jpd0QsRUFBSXZnQyxFQUFFLEdBQUc3dUIsRUFBRWIsRUFBSUQsRUFHakIsTUFFRixRQUVFLE1BREF1YyxRQUFRQyxNQUFNbGMsRUFBS04sR0FDYixJQUFJb3FCLE1BQU0sb0JBSWxCdWxDLEdBQVFoZ0MsUUFBZXJ0QixJQUFWNEYsSUFDZnJELEtBQUtzckQsd0JBQXdCUixFQUFNaGdDLEdBQy9Cem5CLEdBQVMsRUFBR3luRCxFQUFLaGdDLEdBQUdBLEVBQUV6bkIsR0FBU2xJLEVBQVcydkQsRUFBS2hnQyxHQUFHQSxFQUFJM3ZCLEtBYTdELENBQ0RNLElBQUssd0JBQ0xOLE1BQU8sU0FBK0JNLEVBQUt5Z0MsRUFBWUMsRUFBVW92QixFQUFZQyxFQUFVbnVCLEdBQ3JGLEdBQUlsQixHQUFZRCxFQUNkLE1BQU0sSUFBSTNXLE1BQU0sZ0RBVWxCLEdBUEF2bEIsS0FBS2lyRCxVQUFVeHZELEdBQU93QyxLQUFLdVIsSUFBSXhQLEtBQUtpckQsVUFBVXh2RCxJQUFRLEVBQUcwZ0MsRUFBVyxHQUNwRW44QixLQUFLa3JELGtCQUVBN3RCLElBQ0hBLEVBQVNuSixFQUFRQyxjQUFjd2MsVUFHN0I0YSxhQUFzQm4zQixFQUFNQyxXQUFhbTNCLGFBQW9CcDNCLEVBQU1DLFVBQVcsQ0FLaEYsR0FKQSxDQUFDazNCLEVBQVlDLEdBQVVyaEQsUUFBUSxTQUFVeUMsR0FDdkMsT0FBT0EsYUFBYXduQixFQUFNQyxXQUFhem5CLEVBQUVpWixZQUd2QzBsQyxhQUFzQm4zQixFQUFNQyxXQUFhbTNCLGFBQW9CcDNCLEVBQU1DLFVBQVcsQ0FDaEYsSUFBSW8zQixFQUFpQkYsRUFBV2xqQixLQUFLejdCLEVBQUVoTSxPQUFTLEVBQzVDOHFELEVBQWVGLEVBQVNuakIsS0FBS3o3QixFQUFFaE0sT0FBUyxFQUU1QyxLQUFNNnFELEdBQWtCLEdBQUtDLEdBQWdCLEdBQzNDLEdBQUl6dEQsS0FBS1MsSUFBSStzRCxFQUFnQkMsSUFBaUIsR0FBS3p0RCxLQUFLdVIsSUFBSWk4QyxFQUFnQkMsR0FBZ0IsRUFBRyxDQUM3RixJQUFJQyxFQUFXRixHQUFrQixFQUFJRixFQUFhQyxFQUM5Q0ksRUFBYTN0RCxLQUFLdVIsSUFBSWk4QyxFQUFnQkMsR0FDMUMsQ0FBQyxJQUFLLElBQUssS0FBS3ZoRCxRQUFRLFNBQVUxTyxHQUNoQ2t3RCxFQUFTdGpCLEtBQUs1c0MsR0FBTzBKLE1BQU15bUQsR0FBWTloRCxLQUFLNmhELEVBQVN0akIsS0FBSzVzQyxHQUFLbUYsT0FBUytxRCxFQUFTdGpCLEtBQUs1c0MsR0FBSyxHQUFLLENBQUMsRUFBRyxVQUVqRyxDQUNMLElBQUlvd0QsR0FBaUIsRUFBSTdDLEVBQVFuYyxxQkFBcUI0ZSxFQUFnQkMsR0FDdEVILEVBQVdPLFNBQVM3dEQsS0FBSzRPLE1BQU1nL0MsRUFBaUJKLElBQ2hERCxFQUFTTSxTQUFTN3RELEtBQUs0TyxNQUFNZy9DLEVBQWlCSCxLQUtwRCxJQUlJSyxFQUFROUMsRUFKRCxDQUFDc0MsRUFBWUMsR0FBVWhoRCxJQUFJLFNBQVVvQyxHQUM5QyxPQUFPQSxhQUFhd25CLEVBQU1DLFVBQVl6bkIsRUFBRXk3QixLQUFPejdCLElBR2hCLEdBRWpDMitDLEVBQWFRLEVBQU0sR0FDbkJQLEVBQVdPLEVBQU0sR0FHbkIsSUFBSWpCLEVBQ0FoZ0MsRUFDQXpuQixFQUNBOG1ELEdBQU8sRUFJUDZCLEVBQXlCL0MsRUFGQWpwRCxLQUFLb3JELHNCQUFzQjN2RCxHQUVZLEdBTXBFLEdBSkFxdkQsRUFBT2tCLEVBQXVCLEdBQzlCbGhDLEVBQUlraEMsRUFBdUIsR0FDM0Izb0QsRUFBUTJvRCxFQUF1QixJQUUxQmxoQyxRQUFlcnRCLElBQVY0RixFQUNSLE9BQVE1SCxHQUNOLElBQUssT0FDSCxHQUFvQixHQUFoQnVFLEtBQUt4RyxLQUFLaXFCLEdBQVMsQ0FFckIsSUFBSXdvQyxHQURKbkIsRUFBTzlxRCxLQUFLeEcsS0FBSzRCLEdBQ0daLEVBQUVzd0IsRUFBRSxHQUFHN3VCLEVBQ3ZCaXdELEVBQWdCL3VDLEtBQUtDLE1BQU1ELEtBQUtHLFVBQVUydUMsSUFDMUNFLEVBQWNodkMsS0FBS0MsTUFBTUQsS0FBS0csVUFBVTJ1QyxJQUM1Q0MsRUFBYzl3RCxFQUFJbXdELEVBQ2xCWSxFQUFZL3dELEVBQUlvd0QsRUFDaEJELEVBQWFXLEVBQ2JWLEVBQVdXLEVBQ1hyaEMsRUFBSSxJQUNKem5CLEdBQVMsRUFDVDhtRCxHQUFPLEVBR1QsTUFFRixRQUVFLE1BREF6eUMsUUFBUUMsTUFBTWxjLEVBQUt5Z0MsRUFBWUMsRUFBVW92QixFQUFZQyxFQUFVbnVCLEdBQ3pELElBQUk5WCxNQUFNLG9CQUlsQnVsQyxHQUFRaGdDLFFBQWVydEIsSUFBVjRGLElBQ2ZyRCxLQUFLb3NELDRCQUE0QnRCLEVBQU1oZ0MsR0FDdkM5cUIsS0FBS3FzRCxZQUFZdkIsRUFBTWhnQyxFQUFHem5CLEVBQU82NEIsRUFBWXF2QixFQUFZbHVCLEVBQVE4c0IsR0FDakVucUQsS0FBS3FzRCxZQUFZdkIsRUFBTWhnQyxFQUFHem5CLEVBQU84NEIsRUFBVXF2QixFQUFVdDNCLEVBQVFDLGNBQWN3YyxTQUFVd1osUUFLcEY3ekIsRUE3YVQsR0FnYkE1OEIsRUFBUTQ4QixhQUFlQSxFQUV2QixJQUFJckMsRUFFSixXQUNFLFNBQVNBLElBQ1BjLEVBQWdCLzBCLEtBQU1pMEIsR0FpUXhCLE9BOVBBNDFCLEVBQWE1MUIsRUFBYyxLQUFNLENBQUMsQ0FDaEN4NEIsSUFBSyxvQkFDTE4sTUFBTyxTQUEyQm14RCxHQUNoQyxNQUFPLENBQ0wzeEQsRUFBRyxDQUNEZ0UsRUFBRyxFQUNIbXNCLEVBQUcsS0FFTDl2QixFQUFHLENBQ0QyRCxFQUFHLEVBQ0htc0IsRUFBRyxHQUVMOXVCLEVBQUcsQ0FDRDJDLEVBQUcsRUFDSG1zQixFQUFHLENBQUN3aEMsRUFBVyxHQUFJQSxFQUFXLEdBQUksSUFFcEMzdEQsRUFBRyxDQUNEQSxFQUFHLEVBQ0htc0IsRUFBRyxDQUFDLEVBQUcsRUFBRyxJQUVaN3VCLEVBQUcsQ0FDRDBDLEVBQUcsRUFDSG1zQixFQUFHLENBQUMsSUFBSyxJQUFLLFNBU25CLENBQ0RydkIsSUFBSyxjQUNMTixNQUFPLFNBQXFCbXVCLEdBQzFCLElBQUlnQixHQUFjLEVBQUkwK0IsRUFBUXhzQixnQkFBZ0JsVCxHQUFLOWUsSUFBSSxTQUFVb0MsRUFBRzFTLEdBQ2xFLE9BQU9BLEVBQUksRUFBSTBTLEVBQUksRUFBSUEsRUFBSSxJQUU3QixPQUFPNU0sS0FBS3VzRCxLQUFLMXFELE1BQU03QixLQUFNb2xDLEVBQW1COWEsTUFPakQsQ0FDRDd1QixJQUFLLFFBQ0xOLE1BQU8sU0FBZW11QixHQUNwQixJQUFJZ2pDLEdBQWEsRUFBSXRELEVBQVF4c0IsZ0JBQWdCbFQsR0FDekNxTSxFQUFRLENBQ1ZsUyxHQUFJLEVBQ0p5UixJQUFLLEVBQ0xzM0IsR0FBSSxFQUNKQyxHQUFJLEVBQ0oxQixHQUFJL3FELEtBQUswc0Qsa0JBQWtCSixHQUMzQmgzQixHQUFJLEVBQ0pDLEdBQUksRUFDSm8zQixHQUFJLEVBQ0pDLEdBQUksRUFDSnRDLFFBQVEsRUFBSXZCLEVBQVFGLFFBQVF2L0IsSUFFOUIsT0FBTyxJQUFJZ04sRUFBYVgsS0FVekIsQ0FDRGw2QixJQUFLLE9BQ0xOLE1BQU8sU0FBYzJzRCxFQUFNK0UsRUFBS2g3QixFQUFPZ0QsR0FDckMsSUFBSWMsRUFBUSxDQUNWbFMsR0FBSSxFQUNKeVIsSUFBSyxFQUNMczNCLEdBQUksRUFDSkMsR0FBSSxFQUNKMUIsR0FBSS9xRCxLQUFLMHNELGtCQUFrQixDQUFDNUUsRUFBTStFLEVBQUtoN0IsRUFBT2dELElBQzlDUyxHQUFJLEVBQ0pDLEdBQUksRUFDSm8zQixHQUFJLEVBQ0pDLEdBQUksRUFDSnRDLE9BQVEsRUFBQyxFQUFJdkIsRUFBUStELGtCQUFrQixPQUFRLENBQUNqN0IsRUFBT2dELE1BRXpELE9BQU8sSUFBSXlCLEVBQWFYLEtBVXpCLENBQ0RsNkIsSUFBSyxVQUNMTixNQUFPLFNBQWlCMGpCLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ2xDLElBQUkyVyxFQUFRLENBQ1ZsUyxHQUFJLEVBQ0p5UixJQUFLLEVBQ0xzM0IsR0FBSSxFQUNKQyxHQUFJLEVBQ0oxQixHQUFJL3FELEtBQUswc0Qsa0JBQWtCLENBQUM3dEMsRUFBS0UsRUFBSUQsRUFBS0UsRUFBSSxFQUFJRCxFQUFJLEVBQUlDLElBQzFEc1csR0FBSSxFQUNKQyxHQUFJLEVBQ0pvM0IsR0FBSSxFQUNKQyxHQUFJLEVBQ0p0QyxPQUFRLEVBQUMsRUFBSXZCLEVBQVErRCxrQkFBa0IsVUFBVyxDQUFDL3RDLEVBQUlDLE1BRXpELE9BQU8sSUFBSXNYLEVBQWFYLEtBT3pCLENBQ0RsNkIsSUFBSyxNQUNMTixNQUFPLFNBQWFvVCxHQWVsQixPQWRZLElBQUkrbkIsRUFBYSxDQUMzQjdTLEdBQUksRUFDSnlSLElBQUssRUFDTHMzQixHQUFJLEVBQ0pDLEdBQUksRUFDSjFCLEdBQUkvcUQsS0FBSzBzRCxrQkFBa0IsQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUNyQ3AzQixHQUFJLEVBQ0pDLEdBQUksRUFDSm8zQixHQUFJLEVBQ0pDLEdBQUksRUFDSmgrQyxFQUFHLElBQ0hvWCxFQUFHLElBQ0g2USxNQUFPdG9CLE1BV1YsQ0FDRDlTLElBQUssWUFDTE4sTUFBTyxTQUFtQm11QixFQUFLeWpDLEVBQVdDLEdBQ3hDLElBR0lDLEVBSEF4MkIsRUFBUXoyQixLQUVSc3NELEdBQWEsRUFBSXRELEVBQVF4c0IsZ0JBQWdCbFQsR0FhekNxTSxFQUFRLENBQ1ZsUyxHQVZBd3BDLEVBREUzakMsYUFBZTRqQyxlQUNQLEVBQ0Q1akMsYUFBZTZqQyxnQkFDZCxFQUNEN2pDLGFBQWU4akMsWUFDZCxFQUVBLEVBS1ZsNEIsSUFBSyxFQUNMczNCLEdBQUksRUFDSkMsR0FBSSxFQUNKMUIsR0FBSS9xRCxLQUFLMHNELGtCQUE2QixHQUFYTyxFQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FBS1gsR0FDekRoM0IsR0FBSSxFQUNKQyxHQUFJLEVBQ0pvM0IsR0FBSSxFQUNKQyxHQUFJLEdBR04sT0FBUUssR0FDTixLQUFLLEVBQ0gsSUFBSUksR0FBWSxFQUFJckUsRUFBUW5kLGNBQWN2aUIsR0FFMUMsR0FBSStqQyxFQUFVdGpELE9BQU8sU0FBVXVmLEdBQzdCLE9BQU9BLGFBQWU0akMsZ0JBQWtCNWpDLGFBQWU2akMsa0JBQ3REdnNELE9BQVEsQ0FDVCxJQUFJMHNELEVBQWUzM0IsRUFDZjQzQixFQUFlLEdBQ2ZDLEdBQWUsRUFBSWo1QixFQUFZLFdBQ25DODRCLEVBQVVsakQsUUFBUSxTQUFVM1AsR0FDdEJBLGFBQWFvN0Isc0JBQXdCcDdCLGFBQWE0eUQsY0FDcERHLEVBQWFyZ0MsUUFBUXVKLEVBQU1aLFVBQVVyN0IsRUFBR3V5RCxFQUFXQyxNQUd2RE8sRUFBYXBqRCxRQUFRLFNBQVV3ckIsR0FDN0JBLEVBQU1uOEIsS0FBSys3QixHQUFLLE1BRWxCKzNCLEVBQWExK0MsRUFBSTA5QyxFQUFXLEdBQUtBLEVBQVcsR0FBSyxFQUNqRGdCLEVBQWF0bkMsRUFBSXNtQyxFQUFXLEdBQUtBLEVBQVcsR0FBSyxFQUNqRGdCLEVBQWF6MkIsTUFBUTIyQixFQUNyQlQsRUFBVXhwRCxLQUFLLENBQ2JnTCxHQUFJaS9DLEVBQ0pyNEIsT0FBUW80QixFQUFhL2lELElBQUksU0FBVW1yQixHQUNqQyxPQUFPQSxFQUFNbjhCLGFBR1osQ0FDTCxJQUFJaTBELEVBQWM5M0IsRUFDbEI4M0IsRUFBWWhxQyxHQUFLLEVBQ2pCZ3FDLEVBQVkxQyxHQUFLL3FELEtBQUswc0Qsa0JBQWtCSixHQUN4Q21CLEVBQVluRCxRQUFTLEVBQUl2QixFQUFRRixRQUFRdi9CLEdBRzNDLE1BRUYsS0FBSyxFQUNILElBQUlva0MsRUFBYS8zQixFQUdiZzRCLEVBQWdCMUUsR0FERCxFQUFJRixFQUFRNkUsYUFBYXRrQyxFQUFLeWpDLEdBQ0EsR0FDN0NjLEVBQWFGLEVBQWMsR0FDM0JHLEVBQWFILEVBQWMsR0FFL0JELEVBQVc3MkIsTUFBUWczQixFQUNkZCxFQUFVaGpELE9BQU8sU0FBVXBMLEdBQzlCLE9BQU9BLEVBQUU0UCxJQUFNcy9DLElBQ2RqdEQsUUFBUW1zRCxFQUFVeHBELEtBQUt1cUQsR0FDMUIsTUFFRixLQUFLLEVBQ2NuNEIsRUFDTjIwQixRQUFTLEVBQUl2QixFQUFRRixRQUFRdi9CLEdBQ3hDLE1BRUYsS0FBSyxFQUNILElBQUl5a0MsRUFBWXA0QixFQUVacTRCLEdBQWlCLEVBQUloRixFQUFRN2MsbUJBQW1CN2lCLEdBRWhEMmtDLEVBQW1CLENBQUMsRUFBRyxFQUFHLEtBRGIsRUFBSWpGLEVBQVFwYyxrQkFBa0JOLGlCQUFpQmhqQixHQUFLNGtDLGFBRXJFSCxFQUFVaEQsR0FBRy91RCxFQUFFOHVCLEVBQUksQ0FBQ3doQyxFQUFXLEdBQUtBLEVBQVcsR0FBSzJCLEVBQWtCM0IsRUFBVyxHQUFLQSxFQUFXLEdBQUswQixFQUFnQixHQUN0SEQsRUFBVWhELEdBQUdwd0QsRUFBRW13QixLQUE4RCxJQUF2RHhYLFdBQVdnNUIsaUJBQWlCaGpCLEdBQUs2a0MsYUFBZSxNQUV0RSxJQUNJQyxFQUFlbkYsR0FERCxFQUFJRixFQUFRc0YsWUFBWS9rQyxFQUFLMGpDLEdBQ0EsR0FDM0NzQixFQUFXRixFQUFhLEdBQ3hCN2hCLEVBQU82aEIsRUFBYSxHQUV4QkwsRUFBVTN5RCxFQUFJa3pELEVBQ1R0QixFQUFTdmtELEtBQUtzQixPQUFPLFNBQVUvSyxHQUNsQyxPQUFPQSxFQUFFdXZELE9BQVNoaUIsRUFBS2dpQixRQUN0QjN0RCxRQUFRb3NELEVBQVN2a0QsS0FBS2xGLEtBQUtncEMsR0FLbEMsT0FEaUIsSUFBSWpXLEVBQWFYLE9BSy9CMUIsRUFuUVQsR0FzUUF2NkIsRUFBUXU2QixhQUFlQSxHLDZCQ3p1QnZCcjVCLE9BQU9DLGVBQWVuQixFQUFTLGFBQWMsQ0FDM0N5QixPQUFPLElBRVR6QixFQUFRbXZELE9BQVNBLEVBQ2pCbnZELEVBQVFvekQsaUJBc1FSLFNBQTBCdHdELEVBQU0yNEMsR0FDOUIsSUFBSWwzQixFQUFRLENBQ1Z3RixHQUFJLEtBQ0oxbEIsR0FBSSxDQUFDLENBQ0gwbEIsR0FBSSxLQUNKc25DLEdBQUksQ0FDRmpnQyxFQUFHLEtBQ0huc0IsRUFBRyxHQUVMNnZELElBQUksR0FDSCxDQUNEL3FDLEdBQUksS0FDSmxwQixFQUFHLENBQ0R1d0IsRUFBRyxDQUFDLEVBQUcsRUFBRyxFQUFHLElBRWZsYyxFQUFHLENBQ0RrYyxFQUFHLEdBRUxud0IsRUFBRyxDQUNEbXdCLEVBQUcsS0FFTGlTLElBQUksRUFBSWlzQixFQUFRdGMsZUFBZSxRQUMvQitoQixJQUFJLEVBQUl6RixFQUFRcmMsZ0JBQWdCLFVBQy9CLENBQ0RscEIsR0FBSSxLQUNKbHBCLEVBQUcsQ0FDRHV3QixFQUFHLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFFZm53QixFQUFHLENBQ0Rtd0IsRUFBRyxNQUVKLENBQ0RySCxHQUFJLEtBQ0p6bkIsRUFBRyxDQUNEOHVCLEVBQUcsQ0FBQyxFQUFHLElBRVRuc0IsRUFBRyxDQUNEbXNCLEVBQUcsQ0FBQyxFQUFHLElBRVQ3dUIsRUFBRyxDQUNENnVCLEVBQUcsQ0FBQyxJQUFLLE1BRVg5dkIsRUFBRyxDQUNEOHZCLEVBQUcsR0FFTG53QixFQUFHLENBQ0Rtd0IsRUFBRyxLQUVMNGpDLEdBQUksQ0FDRjVqQyxFQUFHLEdBRUw2akMsR0FBSSxDQUNGN2pDLEVBQUcsS0FHUDhoQyxHQUFJLEVBQ0o0QixJQUFJLEdBRUZycUMsRUFBWSxJQUFJaVEsRUFBTUMsVUFFMUIsT0FBUTczQixHQUNOLElBQUssT0FDSDJuQixFQUFVRyxPQUFPLEVBQUcsR0FDcEJILEVBQVVJLE9BQU80d0IsRUFBSyxHQUFJLEdBQzFCaHhCLEVBQVVJLE9BQU80d0IsRUFBSyxHQUFJQSxFQUFLLElBQy9CaHhCLEVBQVVJLE9BQU8sRUFBRzR3QixFQUFLLElBQ3pCaHhCLEVBQVVtQixZQUNWLE1BRUYsSUFBSyxVQUNIbkIsRUFBVUcsT0FBTzZ3QixFQUFLLEdBQUksR0FDMUJoeEIsRUFBVWMsTUFBTWt3QixFQUFLLEdBQUlBLEVBQUssR0FBSSxFQUFHLEVBQUcsRUFBR0EsRUFBSyxHQUFJLEVBQUlBLEVBQUssSUFDN0RoeEIsRUFBVWMsTUFBTWt3QixFQUFLLEdBQUlBLEVBQUssR0FBSSxFQUFHLEVBQUcsRUFBR0EsRUFBSyxHQUFJLEdBQ3BEaHhCLEVBQVVtQixZQUtkLE9BRkFuQixFQUFVMEIsVUFDVjVILEVBQU1sZ0IsR0FBRyxHQUFHZ3RELEdBQUdqZ0MsRUFBSTNHLEVBQVVra0IsS0FDdEJwcUIsR0FuVlR2a0IsRUFBUTIwRCxXQXNWUixTQUFvQi9rQyxFQUFLMGpDLEdBQ3ZCLElBQUk0QixFQUFnQnRpQixpQkFBaUJoakIsR0FDakN1bEMsRUFBV3Y3QyxXQUFXczdDLEVBQWNDLFVBQ3BDQyxFQUFhRixFQUFjRSxXQUFXcnZELE1BQU0sS0FBSyxHQUFHd1MsT0FDcEQ4OEMsRUFBWUgsRUFBY0csVUFDMUJDLEVBQWFKLEVBQWNJLFdBQzNCQyxHQUFhTCxFQUFjOWtELE1BQVEsY0FBY3JLLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUssR0FBR0EsTUFBTSxLQUFLK0ssSUFBSSxTQUFVdFEsR0FDeEcsT0FBT29iLFNBQVNwYixHQUFLLE1BRW5CZzBELEVBQWFVLEVBQWNWLFdBQzNCZ0IsR0FBVyxFQUFJMzZCLEVBQVksV0FFL0IsR0FBSXk0QixFQUFVLENBQ1osSUFBSW1DLEVBQVluQyxFQUFTdmtELEtBQUtzQixPQUFPLFNBQVV3aUMsR0FDN0MsT0FBT0EsRUFBSzZpQixTQUFXTixHQUFjdmlCLEVBQUs4aUIsUUFBVU4sR0FBYXhpQixFQUFLK2lCLFNBQVdOLElBRS9FRyxFQUFVdnVELFNBQVFzdUQsRUFBV0MsRUFBVSxHQUFHWixPQUdoRCxJQUFJRCxFQUFXLENBQ2I5ekQsRUFBRyxDQUNEc3dCLEVBQUcsQ0FBQyxDQUNGMXZCLEVBQUcsRUFDSGEsRUFBRyxDQUNEQSxFQUFHNHlELEVBQ0g3dkQsRUFBR2t3RCxFQUNIOXpELEVBQUdrdUIsRUFBSWpHLFVBQ1BrRSxHQUFHLEVBQUl5aEMsRUFBUXBjLGtCQUFrQnNoQixHQUNqQzNrQyxHQUFJLEVBQ0pnbUMsR0FBSSxFQUNKQyxHQUFJUCxNQUlWanpELEVBQUcsR0FDSDFCLEVBQUcsQ0FDRHFFLEVBQUcsQ0FDRG1zQixFQUFHLENBQUMsRUFBRyxLQUdYbnNCLEVBQUcsSUFFRDh3RCxFQUFVLENBQ1pMLFFBQVNOLEVBQ1RRLFFBQVMsR0FBR2ppRCxPQUFPMmhELEdBQ25CSyxPQUFRTixFQUNSUixNQUFPVyxHQUVULE1BQU8sQ0FBQ1osRUFBVW1CLElBcllwQi8xRCxFQUFRazBELFlBd1lSLFNBQXFCdGtDLEVBQUt5akMsR0FDeEIsSUFBSXgrQyxHQUFLLEVBQUlnbUIsRUFBWSxXQUNyQm03QixFQUFlcG1DLEVBQUl1TCxPQUFPODZCLFFBQzlCRCxFQUFhRSx3QkFBd0JDLFVBQVVDLG1CQUMvQyxJQUFJQyxFQUFjem1DLEVBQUl1SSxNQUFNODlCLFFBQzVCSSxFQUFZSCx3QkFBd0JDLFVBQVVDLG1CQUM5QyxJQUFJRSxFQUFTOS9DLFNBQVNrVCxjQUFjLFVBQ2hDOW1CLEVBQU0wekQsRUFBTzVqQixXQUFXLE1BQzVCNGpCLEVBQU9uK0IsTUFBNEMsRUFBcENrK0IsRUFBWUUsc0JBQzNCRCxFQUFPbjdCLE9BQThDLEVBQXJDNjZCLEVBQWFPLHNCQUM3QjN6RCxFQUFJNHpELFVBQVU1bUMsRUFBSyxFQUFHLEVBQUcwbUMsRUFBT24rQixNQUFPbStCLEVBQU9uN0IsUUFDOUMsSUFBSXM3QixFQUFVSCxFQUFPSSxZQUVyQixHQUFJckQsRUFBVyxDQUNiLElBQUlzRCxFQUFhdEQsRUFBVWhqRCxPQUFPLFNBQVV1bUQsR0FDMUMsT0FBT0EsRUFBTXQwRCxHQUFLbTBELElBRWhCRSxFQUFXenZELFNBQVEyTixFQUFLOGhELEVBQVcsR0FBRzloRCxJQUc1QyxJQUFJK2hELEVBQVEsQ0FDVnRxQyxFQUFHMHBDLEVBQWFPLHNCQUNoQnJoRCxFQUFHbWhELEVBQVlFLHNCQUNmMWhELEdBQUlBLEVBQ0p2UyxFQUFHbTBELEVBQ0g5eEQsRUFBRyxHQUVMLE1BQU8sQ0FBQ2tRLEVBQUkraEQsSUFqYWQsSUFNZ0N0N0MsRUFONUJvZixFQUFRLEVBQVEsSUFFaEJHLEdBSTRCdmYsRUFKQSxFQUFRLE1BSWFBLEVBQUkxWixXQUFhMFosRUFBTSxDQUFFLFFBQVdBLEdBRnJGZzBDLEVBQVUsRUFBUSxJQUl0QixTQUFTQyxFQUFlcnhCLEVBQUsxOUIsR0FBSyxPQU1sQyxTQUF5QjA5QixHQUFPLEdBQUl6eUIsTUFBTStQLFFBQVEwaUIsR0FBTSxPQUFPQSxFQU50QnN4QixDQUFnQnR4QixJQUl6RCxTQUErQkEsRUFBSzE5QixHQUFLLEtBQU1lLE9BQU8rTixZQUFZcE8sT0FBT2c5QixJQUFnRCx1QkFBeENoOUIsT0FBT2tCLFVBQVVpRyxTQUFTMUgsS0FBS3U5QixJQUFrQyxPQUFVLElBQUl1eEIsRUFBTyxHQUFRQyxHQUFLLEVBQVV2Z0QsR0FBSyxFQUFXd2dELE9BQUs1ckQsRUFBVyxJQUFNLElBQUssSUFBaUM2ckQsRUFBN0JqVyxFQUFLemIsRUFBSTM4QixPQUFPK04sY0FBbUJvZ0QsR0FBTUUsRUFBS2pXLEVBQUdocUMsUUFBUUMsUUFBb0I2L0MsRUFBSzVsRCxLQUFLK2xELEVBQUdudUQsUUFBWWpCLEdBQUtpdkQsRUFBS3ZvRCxTQUFXMUcsR0FBM0RrdkQsR0FBSyxJQUFvRSxNQUFPRyxHQUFPMWdELEdBQUssRUFBTXdnRCxFQUFLRSxFQUFPLFFBQVUsSUFBV0gsR0FBc0IsTUFBaEIvVixFQUFXLFFBQVdBLEVBQVcsU0FBTyxRQUFVLEdBQUl4cUMsRUFBSSxNQUFNd2dELEdBQVEsT0FBT0YsRUFKcGNLLENBQXNCNXhCLEVBQUsxOUIsSUFFNUYsV0FBOEIsTUFBTSxJQUFJOEQsVUFBVSx3REFGZ0R5ckQsR0FRbEcsU0FBU1osRUFBT3YvQixFQUFLaW5DLEdBQ25CLE9BQUlqbkMsYUFBZTRqQyxnQkFBa0I1akMsYUFBZTZqQyxnQkFDM0MsR0FDRTdqQyxhQUFlOGpDLFlBcU81QixTQUFxQjlqQyxFQUFLaW5DLEdBQ3hCLElBQUlDLEVBQVEsR0FNWixPQUxBbG5DLEVBQUk0aUIsV0FBVy9oQyxRQUFRLFNBQVU4TCxHQUMzQkEsYUFBZ0IyZixxQkFDbEI0NkIsRUFBUTNILEVBQU81eUMsRUFBTXM2QyxHQUFXam5DLEdBQUtqYyxPQUFPbWpELE1BR3pDQSxFQTNPRUMsQ0FBWW5uQyxFQUFLaW5DLEdBK0U1QixTQUFxQmpuQyxFQUFLaW5DLEdBQ3hCLElBQUl0eUMsRUFBUSxDQUNWd0YsR0FBSSxLQUNKMWxCLEdBQUksR0FDSjZ1RCxHQUFJLEVBQ0o0QixJQUFJLEdBR0ZrQyxFQUFjLFNBQXFCdnNDLEdBQ3JDQSxFQUFVMEIsVUFDVjVILEVBQU1sZ0IsR0FBR3dGLEtBQUssQ0FDWmtnQixHQUFJLEtBQ0pzbkMsR0FBSSxDQUNGamdDLEVBQUczRyxFQUFVa2tCLEtBQ2IxcEMsRUFBRyxHQUVMZ3lELEdBQUlybkMsRUFBSS9hLEdBQ1JpZ0QsSUFBSSxJQUVOLElBQUlvQyxFQUFTOTJELE9BQU93eUMsaUJBQWlCaGpCLElBNUZ6QyxTQUE0QmtuQyxFQUFPSSxFQUFRdG5DLEVBQUtpbkMsR0FDMUNLLEVBQU85K0IsUUFBNEIsU0FBbEI4K0IsRUFBTzkrQixRQUMxQjArQixFQUFNanRELEtBQUssQ0FDVGtnQixHQUFJLEtBQ0pscEIsRUFBRyxDQUNEdXdCLEVBQUc4bEMsRUFBTzkrQixPQUFPcnlCLE1BQU0sS0FBSyxHQUFHQSxNQUFNLEtBQUssR0FBR0EsTUFBTSxLQUFLdUMsTUFBTSxFQUFHLEdBQUd3SSxJQUFJLFNBQVVxbUQsR0FDaEYsT0FBT3Y3QyxTQUFTdTdDLEdBQU8sTUFDdEJ4akQsT0FBTyxJQUVaMVMsRUFBRyxDQUNEbXdCLEVBQTZDLElBQTFDeFgsV0FBV3M5QyxFQUFPRSxlQUFpQixNQUV4Q2xpRCxFQUFHLENBQ0RrYyxFQUFHeFgsV0FBV3M5QyxFQUFPNytCLGFBQWUsTUFFdENnTCxJQUFJLEVBQUlpc0IsRUFBUXRjLGVBQWVra0IsRUFBT0csZUFDdEN0QyxJQUFJLEVBQUl6RixFQUFRcmMsZ0JBQWdCaWtCLEVBQU9JLGtCQUl2Q0osRUFBTzltRCxNQUF3QixTQUFoQjhtRCxFQUFPOW1ELE1BQ3hCMG1ELEVBQU1qdEQsS0FBSyxDQUNUa2dCLEdBQUksS0FDSmxwQixFQUFHLENBQ0R1d0IsRUFBRzhsQyxFQUFPOW1ELEtBQUtySyxNQUFNLEtBQUssR0FBR0EsTUFBTSxLQUFLLEdBQUdBLE1BQU0sS0FBS3VDLE1BQU0sRUFBRyxHQUFHd0ksSUFBSSxTQUFVcW1ELEdBQzlFLE9BQU92N0MsU0FBU3U3QyxHQUFPLE1BQ3RCeGpELE9BQU8sSUFFWjFTLEVBQUcsQ0FDRG13QixFQUEyQyxJQUF4Q3hYLFdBQVdzOUMsRUFBT3pDLGFBQWUsUUFLMUMsSUFBSThDLEVBQU8sRUFDUEMsRUFBTyxFQUNQQyxFQUFVLElBRWQsR0FBSTduQyxHQUFPaW5DLEVBQVMsQ0FDbEIsSUFBSWEsR0FBZ0IsRUFBSXBJLEVBQVE1ZCx3QkFBd0I5aEIsRUFBS2luQyxHQUN6RGMsRUFBV2QsRUFBUTMrQixVQUNuQmdhLEVBQVV0aUIsRUFBSXNJLFVBQ2xCcS9CLEVBQU9HLEVBQWMveUQsRUFBSXV0QyxFQUFRMzBCLEVBQUlvNkMsRUFBU3A2QyxFQUM5Q2k2QyxFQUFPRSxFQUFjcHlELEVBQUk0c0MsRUFBUTEwQixFQUFJbTZDLEVBQVNuNkMsRUFDOUNpNkMsRUFBOEMsSUFBcEM3OUMsV0FBV3M5QyxFQUFPTyxTQUFXLEtBR3pDWCxFQUFNanRELEtBQUssQ0FDVGtnQixHQUFJLEtBQ0p6bkIsRUFBRyxDQUNEOHVCLEVBQUcsQ0FBQ21tQyxFQUFNQyxJQUVadnlELEVBQUcsQ0FDRG1zQixFQUFHLENBQUMsRUFBRyxJQUVUN3VCLEVBQUcsQ0FDRDZ1QixFQUFHLENBQUMsSUFBSyxNQUVYOXZCLEVBQUcsQ0FDRDh2QixFQUFHLEdBRUxud0IsRUFBRyxDQUNEbXdCLEVBQUdxbUMsR0FFTHpDLEdBQUksQ0FDRjVqQyxFQUFHLEdBRUw2akMsR0FBSSxDQUNGN2pDLEVBQUcsS0F5Qkx3bUMsQ0FBbUJyekMsRUFBTWxnQixHQUFJNnlELEVBQVF0bkMsRUFBS2luQyxJQUc1QyxHQUFJam5DLGFBQWVpb0MsaUJBQWtCLENBQ25DLElBQUlDLEVBQVlsb0MsRUFBSXR1QixFQUFFMjBELFFBQ3RCNkIsRUFBVTVCLHdCQUF3QkMsVUFBVUMsbUJBQzVDLElBQUk5MEQsRUFBSXcyRCxFQUFVdkIsc0JBQ2Q5ckMsRUFBWSxJQUFJaVEsRUFBTUMsVUFDMUJsUSxFQUFVRyxPQUFPdHBCLEVBQUcsR0FDcEJtcEIsRUFBVWMsTUFBTWpxQixFQUFHQSxFQUFHLEVBQUcsRUFBRyxFQUFHQSxFQUFHLEVBQUlBLEdBQ3RDbXBCLEVBQVVjLE1BQU1qcUIsRUFBR0EsRUFBRyxFQUFHLEVBQUcsRUFBR0EsRUFBRyxHQUNsQ21wQixFQUFVbUIsWUFDVm9yQyxFQUFZdnNDLFFBQ1AsR0FBSW1GLGFBQWVtb0Msa0JBQW1CLENBQzNDLElBT0lDLEVBQWV6SSxFQVBOLENBQUMsS0FBTSxNQUVLeitDLElBQUksU0FBVS9PLEdBQ3JDLElBQUkrMUQsRUFBWWxvQyxFQUFJN3RCLEdBQUtrMEQsUUFFekIsT0FEQTZCLEVBQVU1Qix3QkFBd0JDLFVBQVVDLG1CQUNyQzBCLEVBQVV2Qix3QkFFNEIsR0FDM0NseEMsRUFBSzJ5QyxFQUFhLEdBQ2xCMXlDLEVBQUsweUMsRUFBYSxHQUVsQkMsRUFBYSxJQUFJdjlCLEVBQU1DLFVBRTNCczlCLEVBQVdydEMsT0FBT3ZGLEVBQUksR0FFdEI0eUMsRUFBVzFzQyxNQUFNbEcsRUFBSUMsRUFBSSxFQUFHLEVBQUcsRUFBR0QsRUFBSSxFQUFJQyxHQUUxQzJ5QyxFQUFXMXNDLE1BQU1sRyxFQUFJQyxFQUFJLEVBQUcsRUFBRyxFQUFHRCxFQUFJLEdBRXRDNHlDLEVBQVdyc0MsWUFFWG9yQyxFQUFZaUIsUUFDUCxHQUFJcm9DLGFBQWVzb0MsZUFBZ0IsQ0FDeEMsSUFPSUMsRUFBZTVJLEVBUEwsQ0FBQyxLQUFNLEtBQU0sS0FBTSxNQUVOeitDLElBQUksU0FBVS9PLEdBQ3ZDLElBQUkrMUQsRUFBWWxvQyxFQUFJN3RCLEdBQUtrMEQsUUFFekIsT0FEQTZCLEVBQVU1Qix3QkFBd0JDLFVBQVVDLG1CQUNyQzBCLEVBQVV2Qix3QkFFNkIsR0FDNUNsd0MsRUFBSzh4QyxFQUFhLEdBQ2xCenhDLEVBQUt5eEMsRUFBYSxHQUNsQjd4QyxFQUFLNnhDLEVBQWEsR0FDbEJ4eEMsRUFBS3d4QyxFQUFhLEdBRWxCcnNDLEVBQVV2bkIsS0FBS1MsSUFBSXFoQixFQUFJSyxHQUN2QnFGLEVBQVV4bkIsS0FBS1MsSUFBSXNoQixFQUFJSyxHQUV2Qnl4QyxFQUFjLElBQUkxOUIsRUFBTUMsVUFFNUJ5OUIsRUFBWXh0QyxPQUFPdkUsRUFBS3lGLEVBQVN4RixFQUFLeUYsR0FFdENxc0MsRUFBWXZ0QyxPQUFPbkUsRUFBS29GLEVBQVNuRixFQUFLb0YsR0FFdENpckMsRUFBWW9CLFFBQ1AsR0FBSXhvQyxhQUFleW9DLGVBQWdCLENBQ3hDLElBQUkvdEMsRUFBV3NGLEVBQUkzRixhQUFhLE1BQVEsR0FFcENxdUMsRUFBYyxJQUFJNTlCLEVBQU1DLFVBQVVyUSxHQUV0QzBzQyxFQUFZc0IsUUFDUCxHQUFJMW9DLGFBQWUyb0MsbUJBQXFCM29DLGFBQWU0b0MsbUJBQW9CLENBQ2hGLElBQUlDLEVBQVM3b0MsRUFBSTZvQyxPQUVqQixHQUFJQSxFQUFPdnhELE9BQVEsQ0FDakIsSUFBSXd4RCxFQUFpQmp0RCxNQUFNckosVUFBVWtHLE1BQU0zSCxLQUFLODNELEdBRTVDRSxFQUFXRCxFQUFlM3JELE9BQU8sU0FBVXpLLEVBQUc0USxHQUNoRCxPQUFPM08sS0FBS1MsSUFBSTFDLEVBQUc0USxFQUFFcUssSUFDcEIsR0FFQ3E3QyxFQUFXRixFQUFlM3JELE9BQU8sU0FBVXpLLEVBQUc0USxHQUNoRCxPQUFPM08sS0FBS1MsSUFBSTFDLEVBQUc0USxFQUFFc0ssSUFDcEIsR0FFQ3E3QyxFQUFjLElBQUluK0IsRUFBTUMsVUFFNUJrK0IsRUFBWWp1QyxPQUFPNnRDLEVBQU8sR0FBR2w3QyxFQUFJbzdDLEVBQVVGLEVBQU8sR0FBR2o3QyxFQUFJbzdDLEdBRXpERixFQUFlam9ELFFBQVEsU0FBVXlDLEVBQUcxUyxHQUM5QkEsR0FBSyxHQUVUcTRELEVBQVlodUMsT0FBTzNYLEVBQUVxSyxFQUFJbzdDLEVBQVV6bEQsRUFBRXNLLEVBQUlvN0MsS0FHdkNocEMsYUFBZTJvQyxtQkFDakJNLEVBQVlqdEMsWUFHZG9yQyxFQUFZNkIsUUFFVCxNQUFJanBDLGFBQWVrcEMsZ0JBMkJ4QixNQURBOTZDLFFBQVFDLE1BQU0yUixHQUNSLElBQUkvRCxNQUFNLHFEQTFCaEIsSUFPSWt0QyxFQUFnQnhKLEVBUEwsQ0FBQyxRQUFTLFVBRUd6K0MsSUFBSSxTQUFVL08sR0FDeEMsSUFBSSsxRCxFQUFZbG9DLEVBQUk3dEIsR0FBS2swRCxRQUV6QixPQURBNkIsRUFBVTVCLHdCQUF3QkMsVUFBVUMsbUJBQ3JDMEIsRUFBVXZCLHdCQUU4QixHQUM3Q3ArQixFQUFRNGdDLEVBQWMsR0FDdEI1OUIsRUFBUzQ5QixFQUFjLEdBRXZCQyxFQUFjLElBQUl0K0IsRUFBTUMsVUFFNUJxK0IsRUFBWXB1QyxPQUFPLEVBQUcsR0FFdEJvdUMsRUFBWW51QyxPQUFPc04sRUFBTyxHQUUxQjZnQyxFQUFZbnVDLE9BQU9zTixFQUFPZ0QsR0FFMUI2OUIsRUFBWW51QyxPQUFPLEVBQUdzUSxHQUV0QjY5QixFQUFZcHRDLFlBRVpvckMsRUFBWWdDLEdBTWQsTUFBTyxDQUFDejBDLEdBL05DMDBDLENBQVlycEMsRUFBS2luQyxLLDZCQ2xCNUIsU0FBU3FDLEVBQWdCQyxFQUFTQyxFQUFVQyxFQUFPdG1DLEdBQ2pEenNCLEtBQUs2eUQsUUFBV0EsRUFDaEI3eUQsS0FBSzh5RCxTQUFXQSxFQUNoQjl5RCxLQUFLK3lELE1BQVdBLEVBQ2hCL3lELEtBQUt5c0IsU0FBV0EsRUFDaEJ6c0IsS0FBS3ZGLEtBQVcsY0FFdUIsbUJBQTVCOHFCLE1BQU15dEMsbUJBQ2Z6dEMsTUFBTXl0QyxrQkFBa0JoekQsS0FBTTR5RCxJQWRsQyxTQUFzQkssRUFBT3pjLEdBQzNCLFNBQVMwYyxJQUFTbHpELEtBQUtzQixZQUFjMnhELEVBQ3JDQyxFQUFLcDNELFVBQVkwNkMsRUFBTzE2QyxVQUN4Qm0zRCxFQUFNbjNELFVBQVksSUFBSW8zRCxFQWV4QkMsQ0FBYVAsRUFBaUJydEMsT0FFOUJxdEMsRUFBZ0JRLGFBQWUsU0FBU04sRUFBVUMsR0FDaEQsSUFBSU0sRUFBMkIsQ0FDekJDLFFBQVMsU0FBU0MsR0FDaEIsTUFBTyxJQUFPQyxFQUFjRCxFQUFZcmlCLE1BQVEsS0FHbEQsTUFBUyxTQUFTcWlCLEdBQ2hCLElBQ0lyNUQsRUFEQXU1RCxFQUFlLEdBR25CLElBQUt2NUQsRUFBSSxFQUFHQSxFQUFJcTVELEVBQVlHLE1BQU05eUQsT0FBUTFHLElBQ3hDdTVELEdBQWdCRixFQUFZRyxNQUFNeDVELGFBQWNpTCxNQUM1Q3d1RCxFQUFZSixFQUFZRyxNQUFNeDVELEdBQUcsSUFBTSxJQUFNeTVELEVBQVlKLEVBQVlHLE1BQU14NUQsR0FBRyxJQUM5RXk1RCxFQUFZSixFQUFZRyxNQUFNeDVELElBR3BDLE1BQU8sS0FBT3E1RCxFQUFZSyxTQUFXLElBQU0sSUFBTUgsRUFBZSxLQUdsRUksSUFBSyxTQUFTTixHQUNaLE1BQU8saUJBR1R4b0QsSUFBSyxTQUFTd29ELEdBQ1osTUFBTyxnQkFHVE8sTUFBTyxTQUFTUCxHQUNkLE9BQU9BLEVBQVlRLGNBSTNCLFNBQVNqK0MsRUFBSWsrQyxHQUNYLE9BQU9BLEVBQUcxOEIsV0FBVyxHQUFHdjFCLFNBQVMsSUFBSTQ5QyxjQUd2QyxTQUFTNlQsRUFBY3YzRCxHQUNyQixPQUFPQSxFQUNKdUUsUUFBUSxNQUFPLFFBQ2ZBLFFBQVEsS0FBTyxPQUNmQSxRQUFRLE1BQU8sT0FDZkEsUUFBUSxNQUFPLE9BQ2ZBLFFBQVEsTUFBTyxPQUNmQSxRQUFRLE1BQU8sT0FDZkEsUUFBUSxlQUF5QixTQUFTd3pELEdBQU0sTUFBTyxPQUFTbCtDLEVBQUlrK0MsS0FDcEV4ekQsUUFBUSx3QkFBeUIsU0FBU3d6RCxHQUFNLE1BQU8sTUFBU2wrQyxFQUFJaytDLEtBR3pFLFNBQVNMLEVBQVkxM0QsR0FDbkIsT0FBT0EsRUFDSnVFLFFBQVEsTUFBTyxRQUNmQSxRQUFRLE1BQU8sT0FDZkEsUUFBUSxNQUFPLE9BQ2ZBLFFBQVEsS0FBTyxPQUNmQSxRQUFRLE1BQU8sT0FDZkEsUUFBUSxNQUFPLE9BQ2ZBLFFBQVEsTUFBTyxPQUNmQSxRQUFRLE1BQU8sT0FDZkEsUUFBUSxlQUF5QixTQUFTd3pELEdBQU0sTUFBTyxPQUFTbCtDLEVBQUlrK0MsS0FDcEV4ekQsUUFBUSx3QkFBeUIsU0FBU3d6RCxHQUFNLE1BQU8sTUFBU2wrQyxFQUFJaytDLEtBNkN6RSxNQUFPLFlBdENQLFNBQTBCbEIsR0FDeEIsSUFDSTU0RCxFQUFHcXRCLEVBTm9CZ3NDLEVBS3ZCVSxFQUFlLElBQUk5dUQsTUFBTTJ0RCxFQUFTbHlELFFBR3RDLElBQUsxRyxFQUFJLEVBQUdBLEVBQUk0NEQsRUFBU2x5RCxPQUFRMUcsSUFDL0IrNUQsRUFBYS81RCxJQVRZcTVELEVBU2FULEVBQVM1NEQsR0FSMUNtNUQsRUFBeUJFLEVBQVkvMkQsTUFBTSsyRCxJQWFsRCxHQUZBVSxFQUFhbnRELE9BRVRtdEQsRUFBYXJ6RCxPQUFTLEVBQUcsQ0FDM0IsSUFBSzFHLEVBQUksRUFBR3F0QixFQUFJLEVBQUdydEIsRUFBSSs1RCxFQUFhcnpELE9BQVExRyxJQUN0Qys1RCxFQUFhLzVELEVBQUksS0FBTys1RCxFQUFhLzVELEtBQ3ZDKzVELEVBQWExc0MsR0FBSzBzQyxFQUFhLzVELEdBQy9CcXRCLEtBR0owc0MsRUFBYXJ6RCxPQUFTMm1CLEVBR3hCLE9BQVEwc0MsRUFBYXJ6RCxRQUNuQixLQUFLLEVBQ0gsT0FBT3F6RCxFQUFhLEdBRXRCLEtBQUssRUFDSCxPQUFPQSxFQUFhLEdBQUssT0FBU0EsRUFBYSxHQUVqRCxRQUNFLE9BQU9BLEVBQWFqeUQsTUFBTSxHQUFJLEdBQUdsQyxLQUFLLE1BQ2xDLFFBQ0FtMEQsRUFBYUEsRUFBYXJ6RCxPQUFTLElBUXhCc3pELENBQWlCcEIsR0FBWSxRQUpsRCxTQUF1QkMsR0FDckIsT0FBT0EsRUFBUSxJQUFPUyxFQUFjVCxHQUFTLElBQU8sZUFHTW9CLENBQWNwQixHQUFTLFdBNDREckZwNUQsRUFBT0QsUUFBVSxDQUNmMDZELFlBQWF4QixFQUNieDFDLE1BMzRERixTQUFtQmkzQyxFQUFPcHBCLEdBQ3hCQSxPQUFzQixJQUFaQSxFQUFxQkEsRUFBVSxHQUV6QyxJQThFSXFwQixFQTlFQUMsRUFBYSxHQUViQyxFQUF5QixDQUFFQyxTQUFVQyxJQUNyQ0MsRUFBeUJELEdBRXpCRSxFQUFTLFNBQVNqb0QsR0FDZCxJQUFLQSxFQUFNLE1BQU8sR0FDbEIsSUFBSyxJQUFJaUwsRUFBSyxHQUFHMWQsRUFBRSxFQUFFQSxFQUFFeVMsRUFBSy9MLE9BQU8xRyxJQUFLMGQsRUFBS0EsRUFBS3ZLLE9BQU94TCxNQUFNK1YsRUFBS2pMLEVBQUt6UyxJQUN6RSxJQUFJMjZELEVBQU1qOUMsRUFBSyxHQUtmLE9BSklpOUMsR0FBcUIsS0FBWkEsRUFBTXh3QyxjQUNWd3dDLEVBQU1uVixTQUNibVYsRUFBTXh3QyxLQUFPLEtBRVJ6TSxHQUVYazlDLEVBQVMsU0FBU0QsRUFBT0UsR0FBUSxPQWcxRG5DLFNBQWVGLEVBQU1FLEdBQ25CLElBQUtBLEVBQU0sTUFBTyxDQUFDRixHQUNuQixJQUFLLElBQUlsMkQsRUFBRSxDQUFDazJELEdBQU8zNkQsRUFBRSxFQUFFQyxFQUFFNDZELEVBQUtuMEQsT0FBTzFHLEVBQUVDLEVBQUVELElBQUt5RSxFQUFFekUsRUFBRSxHQUFHNjZELEVBQUs3NkQsR0FBRyxHQUM3RCxPQUFPeUUsRUFuMURpQ3EyRCxDQUFNSCxFQUFNRSxJQUNwREUsRUFBUyxRQUNUQyxFQUFTQyxHQUFxQixDQUFDLElBQUssTUFBTSxHQUFPLEdBQ2pEQyxFQUFTLFNBQVM3NkQsRUFBR3M2RCxFQUFPRSxHQUN4QixJQUFJdDNCLEVBQU8yaEIsR0FBUzdrRCxFQUFFLENBQUNzNkQsSUFFdkIsT0FESUUsSUFBTXQzQixFQUFPQSxFQUFLcHdCLE9BQU8reEMsR0FBWSxLQUFIN2tELEVBQVMsSUFBTSxJQUFJdzZELEVBQUssTUFDdkR0M0IsR0FFWDQzQixFQUFTLFFBQ1RDLEVBQVNILEdBQXFCLENBQUMsSUFBSyxNQUFNLEdBQU8sR0FDakRJLEVBQVMsV0FBYSxPQUFPblcsR0FBUyxNQUN0Q29XLEVBQVMsUUFDVEMsRUFBU04sR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNqRE8sRUFBVSxTQUFTbjdELEVBQUc0NkMsR0FBUSxPQUFPaUssR0FBUzdrRCxFQUFFNDZDLElBQ2hEd2dCLEVBQVUsUUFDVkMsRUFBVVQsR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRFUsRUFBVSxTQUFTdDdELEVBQUc0NkMsR0FBUSxPQUFPaUssR0FBUzdrRCxFQUFFNDZDLEVBQUszcUMsSUFBSSxTQUFTeU0sR0FBSSxNQUFPLENBQUNBLEVBQUVBLE9BQ2hGNitDLEVBQVUsUUFDVkMsRUFBVVosR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRGEsRUFBVSxTQUFTejdELEVBQUc0NkMsR0FBUSxPQUFPaUssR0FBUzdrRCxFQUFFNDZDLEVBQUszcUMsSUFBSSxTQUFTME0sR0FBSSxNQUFPLENBQUNBLEVBQUVBLE9BQ2hGKytDLEVBQVUsUUFDVkMsRUFBVWYsR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRGdCLEVBQVUsU0FBU3gzRCxFQUFHaUQsRUFBR3JILEdBQUssTUFBTyxDQUFFd2xCLEdBQUdwaEIsRUFBRXNZLEVBQUcrSSxHQUFHcmhCLEVBQUV1WSxFQUFHa0osR0FBR3hlLEVBQUVxVixFQUFHb0osR0FBR3plLEVBQUVzVixFQUFHRCxFQUFFMWMsRUFBRTBjLEVBQUdDLEVBQUUzYyxFQUFFMmMsSUFDbEZrL0MsRUFBVSxRQUNWQyxFQUFVbEIsR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRG1CLEVBQVUsU0FBUzEwRCxFQUFHckgsR0FBSyxNQUFPLENBQUU2bEIsR0FBR3hlLEVBQUVxVixFQUFHb0osR0FBR3plLEVBQUVzVixFQUFHRCxFQUFFMWMsRUFBRTBjLEVBQUdDLEVBQUUzYyxFQUFFMmMsSUFDL0RxL0MsRUFBVSxRQUNWQyxFQUFVckIsR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRHNCLEVBQVUsU0FBUzkzRCxFQUFHaUQsR0FBSyxNQUFPLENBQUVtZSxHQUFHcGhCLEVBQUVzWSxFQUFHK0ksR0FBR3JoQixFQUFFdVksRUFBR0QsRUFBRXJWLEVBQUVxVixFQUFHQyxFQUFFdFYsRUFBRXNWLElBQy9Edy9DLEVBQVUsUUFDVkMsRUFBVXhCLEdBQXFCLENBQUMsSUFBSyxNQUFNLEdBQU8sR0FDbER5QixFQUFVLFFBQ1ZDLEVBQVUxQixHQUFxQixDQUFDLElBQUssTUFBTSxHQUFPLEdBQ2xEMkIsRUFBVSxTQUFTLzNDLEVBQUlDLEVBQUkrM0MsRUFBTUMsRUFBTzV4QyxFQUFPeWdCLEdBQU0sTUFBTyxDQUFFOW1CLEdBQUdBLEVBQUlDLEdBQUdBLEVBQUlrRyxjQUFjNnhDLEVBQU01eEMsU0FBUzZ4QyxFQUFPNXhDLE1BQU1BLEVBQU9uTyxFQUFFNHVCLEVBQUc1dUIsRUFBR0MsRUFBRTJ1QixFQUFHM3VCLElBQzFJKy9DLEVBQVUsU0FBU2hnRCxFQUFHQyxHQUFLLE1BQU8sQ0FBRUQsRUFBRUEsRUFBR0MsRUFBRUEsSUFDM0NnZ0QsRUFBVSxTQUFTdjdELEdBQUssT0FBUyxFQUFGQSxHQUMvQnc3RCxFQUFVLFNBQVN6RCxHQUFTLE9BQXNCLEVBQWZBLEVBQU01ekQsS0FBSyxLQUM5Q3MzRCxFQUFVLFFBQ1ZDLEVBQVVsQyxHQUFxQixDQUFDLElBQUssTUFBTSxHQUFPLEdBQ2xEbUMsRUFBVSxTQUFTQyxHQUFPLE1BQVksS0FBTEEsR0FDakNDLEVBQVUsV0FBYSxNQUFPLElBQzlCQyxFQUFVLElBQ1ZDLEVBQVVDLEdBQXVCLEtBQUssR0FDdENDLEVBQVUsU0FBU2xFLEdBQVMsT0FBT0EsRUFBTTV6RCxLQUFLLEtBQzlDKzNELEVBQVUsSUFDVkMsRUFBVUgsR0FBdUIsS0FBSyxHQUN0Q0ksRUFBVSxRQUNWQyxFQUFVN0MsR0FBcUIsQ0FBQyxJQUFLLE1BQU0sR0FBTyxHQUNsRDhDLEVBQVUsU0FDVkMsRUFBVS9DLEdBQXFCLENBQUMsSUFBSyxNQUFNLEdBQU8sR0FDbERnRCxHQUFVLFNBQ1ZDLEdBQVVqRCxHQUFxQixDQUFDLENBQUMsSUFBSyxPQUFPLEdBQU8sR0FDcERrRCxHQUFVLFNBQVNDLEdBQVUsT0FBT0EsRUFBT3g0RCxLQUFLLEtBQ2hEeTRELEdBQVUsYUFDVkMsR0FBVXJELEdBQXFCLENBQUMsSUFBSyxLQUFNLEtBQU0sT0FBTyxHQUFPLEdBRS9Ec0QsR0FBdUIsRUFFdkJDLEdBQXVCLENBQUMsQ0FBRUMsS0FBTSxFQUFHQyxPQUFRLElBQzNDQyxHQUF1QixFQUN2QkMsR0FBdUIsR0FDdkJDLEdBQXVCLEVBSTNCLEdBQUksY0FBZTl0QixFQUFTLENBQzFCLEtBQU1BLEVBQVErdEIsYUFBYXhFLEdBQ3pCLE1BQU0sSUFBSWp2QyxNQUFNLG1DQUFxQzBsQixFQUFRK3RCLFVBQVksTUFHM0VyRSxFQUF3QkgsRUFBdUJ2cEIsRUFBUSt0QixXQTJCekQsU0FBU3JCLEdBQXVCem1CLEVBQU1obUIsR0FDcEMsTUFBTyxDQUFFMXVCLEtBQU0sVUFBVzAwQyxLQUFNQSxFQUFNaG1CLFdBQVlBLEdBR3BELFNBQVNpcUMsR0FBcUJ6QixFQUFPRSxFQUFVMW9DLEdBQzdDLE1BQU8sQ0FBRTF1QixLQUFNLFFBQVNrM0QsTUFBT0EsRUFBT0UsU0FBVUEsRUFBVTFvQyxXQUFZQSxHQWV4RSxTQUFTK3RDLEdBQXNCNWhDLEdBQzdCLElBQXdDcjdCLEVBQXBDazlELEVBQVVSLEdBQW9CcmhDLEdBRWxDLEdBQUk2aEMsRUFDRixPQUFPQSxFQUdQLElBREFsOUQsRUFBSXE3QixFQUFNLEdBQ0ZxaEMsR0FBb0IxOEQsSUFDMUJBLElBU0YsSUFMQWs5RCxFQUFVLENBQ1JQLE1BRkZPLEVBQVVSLEdBQW9CMThELElBRVoyOEQsS0FDaEJDLE9BQVFNLEVBQVFOLFFBR1g1OEQsRUFBSXE3QixHQUNtQixLQUF4Qmc5QixFQUFNLzhCLFdBQVd0N0IsSUFDbkJrOUQsRUFBUVAsT0FDUk8sRUFBUU4sT0FBUyxHQUVqQk0sRUFBUU4sU0FHVjU4RCxJQUlGLE9BREEwOEQsR0FBb0JyaEMsR0FBTzZoQyxFQUNwQkEsRUFJWCxTQUFTQyxHQUFvQkMsRUFBVWxtQixHQUNyQyxJQUFJbW1CLEVBQWtCSixHQUFzQkcsR0FDeENFLEVBQWtCTCxHQUFzQi9sQixHQUU1QyxNQUFPLENBQ0x0cEMsTUFBTyxDQUNMdkIsT0FBUSt3RCxFQUNSVCxLQUFRVSxFQUFnQlYsS0FDeEJDLE9BQVFTLEVBQWdCVCxRQUUxQjd0RCxJQUFLLENBQ0gxQyxPQUFRNnFDLEVBQ1J5bEIsS0FBUVcsRUFBY1gsS0FDdEJDLE9BQVFVLEVBQWNWLFNBSzVCLFNBQVNXLEdBQVN6RyxHQUNaMkYsR0FBY0ksS0FFZEosR0FBY0ksS0FDaEJBLEdBQWlCSixHQUNqQkssR0FBc0IsSUFHeEJBLEdBQW9CdjFELEtBQUt1dkQsSUFPM0IsU0FBUzBHLEdBQXlCMUcsRUFBVUMsRUFBT3RtQyxHQUNqRCxPQUFPLElBQUltbUMsRUFDVEEsRUFBZ0JRLGFBQWFOLEVBQVVDLEdBQ3ZDRCxFQUNBQyxFQUNBdG1DLEdBSUosU0FBU2lvQyxLQUNQLElBQUkrRSxFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFBSUMsRUFLcEIsSUFIQUYsRUFBS2hCLEdBQ0wveEIsRUFBSyxHQUNMRSxFQUFLZ3pCLEtBQ0VoekIsSUFBTzJ0QixHQUNaN3RCLEVBQUduakMsS0FBS3FqQyxHQUNSQSxFQUFLZ3pCLEtBRVAsR0FBSWx6QixJQUFPNnRCLEVBS1QsSUFKQTN0QixFQStCSixXQUNFLElBQUk2eUIsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUtvekIsUUFDTXZGLEVBQVksQ0FLckIsSUFKQTN0QixFQUFLLEdBQ0w4eUIsRUFBS2pCLEdBQ0xrQixFQUFLLEdBQ0xFLEVBQUtELEtBQ0VDLElBQU90RixHQUNab0YsRUFBR3AyRCxLQUFLczJELEdBQ1JBLEVBQUtELEtBZVAsSUFiSUQsSUFBT3BGLElBQ1RzRixFQUFLQyxRQUNNdkYsRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FFQW1GLElBQU9uRixHQUFZLENBS3hCLElBSkEzdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtqQixHQUNMa0IsRUFBSyxHQUNMRSxFQUFLRCxLQUNFQyxJQUFPdEYsR0FDWm9GLEVBQUdwMkQsS0FBS3MyRCxHQUNSQSxFQUFLRCxLQUVIRCxJQUFPcEYsSUFDVHNGLEVBQUtDLFFBQ012RixFQUVUbUYsRUFEQUMsRUFBSyxDQUFDQSxFQUFJRSxJQU9acEIsR0FBY2lCLEVBQ2RBLEVBQUtuRixHQUdMM3RCLElBQU8ydEIsR0FDTWtGLEVBQ2YveUIsRUFBS291QixFQUFPcHVCLEVBQUlFLEdBQ2hCNnlCLEVBQUsveUIsSUFFTCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBOUZBTSxNQUNNeEYsSUFDVDN0QixFQUFLLE1BRUhBLElBQU8ydEIsRUFBWSxDQUdyQixJQUZBbUYsRUFBSyxHQUNMQyxFQUFLQyxLQUNFRCxJQUFPcEYsR0FDWm1GLEVBQUduMkQsS0FBS28yRCxHQUNSQSxFQUFLQyxLQUVIRixJQUFPbkYsR0FDTWtGLEVBRWZBLEVBREEveUIsRUFBS2t1QixFQUFPaHVCLEtBR1o2eEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixPQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQXFFVCxTQUFTSyxLQUNQLElBQUlMLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUFJQyxFQUFJRSxFQUl4QixHQUZBSixFQUFLaEIsSUFDTC94QixFQThGRixXQUNFLElBQUkreUIsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBQUlHLEVBRTVCUCxFQUFLaEIsR0FDRHhELEVBQU92MEQsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDM0IveEIsRUFBSzJ0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUEveEIsRUFBSzZ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTckUsSUFFeEMsR0FBSXh1QixJQUFPNnRCLEVBQVksQ0FHckIsSUFGQTN0QixFQUFLLEdBQ0w4eUIsRUFBS0UsS0FDRUYsSUFBT25GLEdBQ1ozdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtFLEtBRUhoekIsSUFBTzJ0QixJQUNUbUYsRUFBS08sUUFDTTFGLEdBQ1RvRixFQUFLbEIsSUFDTG9CLEVBQUtLLFFBQ00zRixJQUNUc0YsRUFBSyxNQUVIQSxJQUFPdEYsSUFDVHlGLEVBQUtHLFFBQ001RixFQUVUb0YsRUFEQUUsRUFBSyxDQUFDQSxFQUFJRyxJQU9adkIsR0FBY2tCLEVBQ2RBLEVBQUtwRixHQUVIb0YsSUFBT3BGLElBQ1RvRixFQUFLLE1BRUhBLElBQU9wRixHQUNNa0YsRUFDZi95QixFQUFLMHVCLEVBQU8xdUIsRUFBSWd6QixFQUFJQyxHQUNwQkYsRUFBSy95QixJQUVMK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsS0FPVGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUE3SkZXLE1BQ003RixFQUFZLENBS3JCLElBSkEzdEIsRUFBSyxHQUNMOHlCLEVBQUtqQixHQUNMa0IsRUFBSyxHQUNMRSxFQUFLRCxLQUNFQyxJQUFPdEYsR0FDWm9GLEVBQUdwMkQsS0FBS3MyRCxHQUNSQSxFQUFLRCxLQWVQLElBYklELElBQU9wRixJQUNUc0YsRUFBS1EsUUFDTTlGLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBRUFtRixJQUFPbkYsR0FBWSxDQUt4QixJQUpBM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLakIsR0FDTGtCLEVBQUssR0FDTEUsRUFBS0QsS0FDRUMsSUFBT3RGLEdBQ1pvRixFQUFHcDJELEtBQUtzMkQsR0FDUkEsRUFBS0QsS0FFSEQsSUFBT3BGLElBQ1RzRixFQUFLUSxRQUNNOUYsRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FHTDN0QixJQUFPMnRCLEdBQ01rRixFQUVmQSxFQURBL3lCLEVBQUtvdUIsRUFBT3B1QixFQUFJRSxLQUdoQjZ4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBR1QsU0FBU1ksS0FDUCxJQUFJWixFQTRCSixPQTFCQUEsRUErRkYsV0FDRSxJQUFJQSxFQUFJL3lCLEVBRVIreUIsRUFBS2hCLEdBQ0RwRCxFQUFPMzBELEtBQUsyekQsRUFBTXovQyxPQUFPNmpELE1BQzNCL3hCLEVBQUsydEIsRUFBTXovQyxPQUFPNmpELElBQ2xCQSxPQUVBL3hCLEVBQUs2dEIsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBU2pFLElBRXBDNXVCLElBQU82dEIsSUFDTWtGLEVBQ2YveUIsRUFBSzZ1QixLQUlQLE9BRkFrRSxFQUFLL3lCLEVBOUdBNHpCLE1BQ00vRixJQUNUa0YsRUFpSEosV0FDRSxJQUFJQSxFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFFaEJELEVBQUtoQixHQUNEakQsRUFBTzkwRCxLQUFLMnpELEVBQU16L0MsT0FBTzZqRCxNQUMzQi94QixFQUFLMnRCLEVBQU16L0MsT0FBTzZqRCxJQUNsQkEsT0FFQS94QixFQUFLNnRCLEVBQ21CLElBQXBCd0UsSUFBeUJRLEdBQVM5RCxJQUV4QyxHQUFJL3VCLElBQU82dEIsRUFBWSxDQUdyQixJQUZBM3RCLEVBQUssR0FDTDh5QixFQUFLRSxLQUNFRixJQUFPbkYsR0FDWjN0QixFQUFHcmpDLEtBQUttMkQsR0FDUkEsRUFBS0UsS0FFSGh6QixJQUFPMnRCLElBQ1RtRixFQUFLUyxRQUNNNUYsR0FDTWtGLEVBQ2YveUIsRUFBS2d2QixFQUFRaHZCLEVBQUlnekIsR0FDakJELEVBQUsveUIsSUFNUCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBdEpBYyxNQUNNaEcsSUFDVGtGLEVBcU5OLFdBQ0UsSUFBSUEsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBRWhCRCxFQUFLaEIsR0FDRDlDLEVBQVFqMUQsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDNUIveEIsRUFBSzJ0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUEveEIsRUFBSzZ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTM0QsSUFFeEMsR0FBSWx2QixJQUFPNnRCLEVBQVksQ0FHckIsSUFGQTN0QixFQUFLLEdBQ0w4eUIsRUFBS0UsS0FDRUYsSUFBT25GLEdBQ1ozdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtFLEtBRUhoekIsSUFBTzJ0QixJQUNUbUYsRUFBS2MsUUFDTWpHLEdBQ01rRixFQUNmL3lCLEVBQUttdkIsRUFBUW52QixFQUFJZ3pCLEdBQ2pCRCxFQUFLL3lCLElBTVAreEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQTFQRWdCLE1BQ01sRyxJQUNUa0YsRUF5VFIsV0FDRSxJQUFJQSxFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFFaEJELEVBQUtoQixHQUNEM0MsRUFBUXAxRCxLQUFLMnpELEVBQU16L0MsT0FBTzZqRCxNQUM1Qi94QixFQUFLMnRCLEVBQU16L0MsT0FBTzZqRCxJQUNsQkEsT0FFQS94QixFQUFLNnRCLEVBQ21CLElBQXBCd0UsSUFBeUJRLEdBQVN4RCxJQUV4QyxHQUFJcnZCLElBQU82dEIsRUFBWSxDQUdyQixJQUZBM3RCLEVBQUssR0FDTDh5QixFQUFLRSxLQUNFRixJQUFPbkYsR0FDWjN0QixFQUFHcmpDLEtBQUttMkQsR0FDUkEsRUFBS0UsS0FFSGh6QixJQUFPMnRCLElBQ1RtRixFQUFLYyxRQUNNakcsR0FDTWtGLEVBQ2YveUIsRUFBS3N2QixFQUFRdHZCLEVBQUlnekIsR0FDakJELEVBQUsveUIsSUFNUCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBOVZJaUIsTUFDTW5HLElBQ1RrRixFQStWVixXQUNFLElBQUlBLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUVoQkQsRUFBS2hCLEdBQ0R4QyxFQUFRdjFELEtBQUsyekQsRUFBTXovQyxPQUFPNmpELE1BQzVCL3hCLEVBQUsydEIsRUFBTXovQyxPQUFPNmpELElBQ2xCQSxPQUVBL3hCLEVBQUs2dEIsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBU3JELElBRXhDLEdBQUl4dkIsSUFBTzZ0QixFQUFZLENBR3JCLElBRkEzdEIsRUFBSyxHQUNMOHlCLEVBQUtFLEtBQ0VGLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLRSxLQUVIaHpCLElBQU8ydEIsSUFDVG1GLEVBcUJOLFdBQ0UsSUFBSUQsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUtpMEIsUUFDTXBHLEVBQVksQ0FvQnJCLElBbkJBM3RCLEVBQUssR0FDTDh5QixFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUtjLFFBQ01wRyxFQUVUbUYsRUFEQUMsRUFBSyxDQUFDQSxFQUFJRSxJQU9acEIsR0FBY2lCLEVBQ2RBLEVBQUtuRixHQUVBbUYsSUFBT25GLEdBQ1ozdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtqQixJQUNMa0IsRUFBS08sUUFDTTNGLElBQ1RvRixFQUFLLE1BRUhBLElBQU9wRixJQUNUc0YsRUFBS2MsUUFDTXBHLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBR0wzdEIsSUFBTzJ0QixHQUNNa0YsRUFDZi95QixFQUFLb3VCLEVBQU9wdUIsRUFBSUUsR0FDaEI2eUIsRUFBSy95QixJQUVMK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUFoRkVtQixNQUNNckcsR0FDTWtGLEVBQ2YveUIsRUFBS2d2QixFQUFRaHZCLEVBQUlnekIsR0FDakJELEVBQUsveUIsSUFNUCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBcFlNb0IsTUFDTXRHLElBQ1RrRixFQWtmWixXQUNFLElBQUlBLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUVoQkQsRUFBS2hCLEdBQ0RyQyxFQUFRMTFELEtBQUsyekQsRUFBTXovQyxPQUFPNmpELE1BQzVCL3hCLEVBQUsydEIsRUFBTXovQyxPQUFPNmpELElBQ2xCQSxPQUVBL3hCLEVBQUs2dEIsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBU2xELElBRXhDLEdBQUkzdkIsSUFBTzZ0QixFQUFZLENBR3JCLElBRkEzdEIsRUFBSyxHQUNMOHlCLEVBQUtFLEtBQ0VGLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLRSxLQUVIaHpCLElBQU8ydEIsSUFDVG1GLEVBcUJOLFdBQ0UsSUFBSUQsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUtvMEIsUUFDTXZHLEVBQVksQ0FvQnJCLElBbkJBM3RCLEVBQUssR0FDTDh5QixFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUtpQixRQUNNdkcsRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FFQW1GLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUtpQixRQUNNdkcsRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FHTDN0QixJQUFPMnRCLEdBQ01rRixFQUNmL3lCLEVBQUtvdUIsRUFBT3B1QixFQUFJRSxHQUNoQjZ5QixFQUFLL3lCLElBRUwreEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQWhGRXNCLE1BQ014RyxHQUNNa0YsRUFDZi95QixFQUFLZ3ZCLEVBQVFodkIsRUFBSWd6QixHQUNqQkQsRUFBSy95QixJQU1QK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUF2aEJRdUIsTUFDTXpHLElBQ1RrRixFQXNuQmQsV0FDRSxJQUFJQSxFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFFaEJELEVBQUtoQixHQUNEbEMsRUFBUTcxRCxLQUFLMnpELEVBQU16L0MsT0FBTzZqRCxNQUM1Qi94QixFQUFLMnRCLEVBQU16L0MsT0FBTzZqRCxJQUNsQkEsT0FFQS94QixFQUFLNnRCLEVBQ21CLElBQXBCd0UsSUFBeUJRLEdBQVMvQyxJQUV4QyxHQUFJOXZCLElBQU82dEIsRUFBWSxDQUdyQixJQUZBM3RCLEVBQUssR0FDTDh5QixFQUFLRSxLQUNFRixJQUFPbkYsR0FDWjN0QixFQUFHcmpDLEtBQUttMkQsR0FDUkEsRUFBS0UsS0FFSGh6QixJQUFPMnRCLElBQ1RtRixFQXFCTixXQUNFLElBQUlELEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUFJQyxFQUFJRSxFQUl4QixHQUZBSixFQUFLaEIsSUFDTC94QixFQUFLdTBCLFFBQ00xRyxFQUFZLENBb0JyQixJQW5CQTN0QixFQUFLLEdBQ0w4eUIsRUFBS2pCLElBQ0xrQixFQUFLTyxRQUNNM0YsSUFDVG9GLEVBQUssTUFFSEEsSUFBT3BGLElBQ1RzRixFQUFLb0IsUUFDTTFHLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBRUFtRixJQUFPbkYsR0FDWjN0QixFQUFHcmpDLEtBQUttMkQsR0FDUkEsRUFBS2pCLElBQ0xrQixFQUFLTyxRQUNNM0YsSUFDVG9GLEVBQUssTUFFSEEsSUFBT3BGLElBQ1RzRixFQUFLb0IsUUFDTTFHLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBR0wzdEIsSUFBTzJ0QixHQUNNa0YsRUFDZi95QixFQUFLb3VCLEVBQU9wdUIsRUFBSUUsR0FDaEI2eUIsRUFBSy95QixJQUVMK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUFoRkV5QixNQUNNM0csR0FDTWtGLEVBQ2YveUIsRUFBS2d2QixFQUFRaHZCLEVBQUlnekIsR0FDakJELEVBQUsveUIsSUFNUCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBM3BCVTBCLE1BQ001RyxJQUNUa0YsRUEwdkJoQixXQUNFLElBQUlBLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUVoQkQsRUFBS2hCLEdBQ0QvQixFQUFRaDJELEtBQUsyekQsRUFBTXovQyxPQUFPNmpELE1BQzVCL3hCLEVBQUsydEIsRUFBTXovQyxPQUFPNmpELElBQ2xCQSxPQUVBL3hCLEVBQUs2dEIsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBUzVDLElBRXhDLEdBQUlqd0IsSUFBTzZ0QixFQUFZLENBR3JCLElBRkEzdEIsRUFBSyxHQUNMOHlCLEVBQUtFLEtBQ0VGLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLRSxLQUVIaHpCLElBQU8ydEIsSUFDVG1GLEVBcUJOLFdBQ0UsSUFBSUQsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUt1ekIsUUFDTTFGLEVBQVksQ0FvQnJCLElBbkJBM3RCLEVBQUssR0FDTDh5QixFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUtJLFFBQ00xRixFQUVUbUYsRUFEQUMsRUFBSyxDQUFDQSxFQUFJRSxJQU9acEIsR0FBY2lCLEVBQ2RBLEVBQUtuRixHQUVBbUYsSUFBT25GLEdBQ1ozdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtqQixJQUNMa0IsRUFBS08sUUFDTTNGLElBQ1RvRixFQUFLLE1BRUhBLElBQU9wRixJQUNUc0YsRUFBS0ksUUFDTTFGLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBR0wzdEIsSUFBTzJ0QixHQUNNa0YsRUFDZi95QixFQUFLb3VCLEVBQU9wdUIsRUFBSUUsR0FDaEI2eUIsRUFBSy95QixJQUVMK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUFoRkUyQixNQUNNN0csR0FDTWtGLEVBQ2YveUIsRUFBS2d2QixFQUFRaHZCLEVBQUlnekIsR0FDakJELEVBQUsveUIsSUFNUCt4QixHQUFjZ0IsRUFDZEEsRUFBS2xGLFFBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEVBR1AsT0FBT2tGLEVBL3hCWTRCLE1BQ005RyxJQUNUa0YsRUE4MUJsQixXQUNFLElBQUlBLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUVoQkQsRUFBS2hCLEdBQ0Q3QixFQUFRbDJELEtBQUsyekQsRUFBTXovQyxPQUFPNmpELE1BQzVCL3hCLEVBQUsydEIsRUFBTXovQyxPQUFPNmpELElBQ2xCQSxPQUVBL3hCLEVBQUs2dEIsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBUzFDLElBRXhDLEdBQUlud0IsSUFBTzZ0QixFQUFZLENBR3JCLElBRkEzdEIsRUFBSyxHQUNMOHlCLEVBQUtFLEtBQ0VGLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLRSxLQUVIaHpCLElBQU8ydEIsSUFDVG1GLEVBcUJOLFdBQ0UsSUFBSUQsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUs0MEIsUUFDTS9HLEVBQVksQ0FvQnJCLElBbkJBM3RCLEVBQUssR0FDTDh5QixFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUt5QixRQUNNL0csRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FFQW1GLElBQU9uRixHQUNaM3RCLEVBQUdyakMsS0FBS20yRCxHQUNSQSxFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUt5QixRQUNNL0csRUFFVG1GLEVBREFDLEVBQUssQ0FBQ0EsRUFBSUUsSUFPWnBCLEdBQWNpQixFQUNkQSxFQUFLbkYsR0FHTDN0QixJQUFPMnRCLEdBQ01rRixFQUNmL3lCLEVBQUtvdUIsRUFBT3B1QixFQUFJRSxHQUNoQjZ5QixFQUFLL3lCLElBRUwreEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQWhGRThCLE1BQ01oSCxHQUNNa0YsRUFDZi95QixFQUFLZ3ZCLEVBQVFodkIsRUFBSWd6QixHQUNqQkQsRUFBSy95QixJQU1QK3hCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFHUCxPQUFPa0YsRUFuNEJjK0IsSUFVZC9CLEVBaUlULFNBQVNVLEtBQ1AsSUFBSVYsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBSXhCLEdBRkFKLEVBQUtoQixJQUNML3hCLEVBQUt1ekIsUUFDTTFGLEVBQVksQ0FvQnJCLElBbkJBM3RCLEVBQUssR0FDTDh5QixFQUFLakIsSUFDTGtCLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUtJLFFBQ00xRixFQUVUbUYsRUFEQUMsRUFBSyxDQUFDQSxFQUFJRSxJQU9acEIsR0FBY2lCLEVBQ2RBLEVBQUtuRixHQUVBbUYsSUFBT25GLEdBQ1ozdEIsRUFBR3JqQyxLQUFLbTJELEdBQ1JBLEVBQUtqQixJQUNMa0IsRUFBS08sUUFDTTNGLElBQ1RvRixFQUFLLE1BRUhBLElBQU9wRixJQUNUc0YsRUFBS0ksUUFDTTFGLEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBR0wzdEIsSUFBTzJ0QixHQUNNa0YsRUFFZkEsRUFEQS95QixFQUFLb3VCLEVBQU9wdUIsRUFBSUUsS0FHaEI2eEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQTJDVCxTQUFTZSxLQUNQLElBQUlmLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUFJQyxFQUFJRSxFQUl4QixHQUZBSixFQUFLaEIsSUFDTC94QixFQUFLKzBCLFFBQ01sSCxFQUFZLENBb0JyQixJQW5CQTN0QixFQUFLLEdBQ0w4eUIsRUFBS2pCLElBQ0xrQixFQUFLTyxRQUNNM0YsSUFDVG9GLEVBQUssTUFFSEEsSUFBT3BGLElBQ1RzRixFQUFLNEIsUUFDTWxILEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBRUFtRixJQUFPbkYsR0FDWjN0QixFQUFHcmpDLEtBQUttMkQsR0FDUkEsRUFBS2pCLElBQ0xrQixFQUFLTyxRQUNNM0YsSUFDVG9GLEVBQUssTUFFSEEsSUFBT3BGLElBQ1RzRixFQUFLNEIsUUFDTWxILEVBRVRtRixFQURBQyxFQUFLLENBQUNBLEVBQUlFLElBT1pwQixHQUFjaUIsRUFDZEEsRUFBS25GLEdBR0wzdEIsSUFBTzJ0QixHQUNNa0YsRUFFZkEsRUFEQS95QixFQUFLb3VCLEVBQU9wdUIsRUFBSUUsS0FHaEI2eEIsR0FBY2dCLEVBQ2RBLEVBQUtsRixRQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixFQUdQLE9BQU9rRixFQWlKVCxTQUFTa0IsS0FDUCxJQUFJbEIsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBQUlDLEVBQUlFLEVBMkN4QixPQXpDQUosRUFBS2hCLElBQ0wveEIsRUFBS3V6QixRQUNNMUYsSUFDVDN0QixFQUFLc3pCLFFBQ00zRixJQUNUM3RCLEVBQUssTUFFSEEsSUFBTzJ0QixJQUNUbUYsRUFBS08sUUFDTTFGLElBQ1RvRixFQUFLTyxRQUNNM0YsSUFDVG9GLEVBQUssTUFFSEEsSUFBT3BGLElBQ1RzRixFQUFLSSxRQUNNMUYsR0FDTWtGLEVBRWZBLEVBREEveUIsRUFBS3l2QixFQUFRenZCLEVBQUlnekIsRUFBSUcsS0FPdkJwQixHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBT1RrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEdBR0FrRixFQXlHVCxTQUFTcUIsS0FDUCxJQUFJckIsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBNEJoQixPQTFCQUQsRUFBS2hCLElBQ0wveEIsRUFBS3V6QixRQUNNMUYsSUFDVDN0QixFQUFLc3pCLFFBQ00zRixJQUNUM3RCLEVBQUssTUFFSEEsSUFBTzJ0QixJQUNUbUYsRUFBS08sUUFDTTFGLEdBQ01rRixFQUVmQSxFQURBL3lCLEVBQUs0dkIsRUFBUTV2QixFQUFJZ3pCLEtBT25CakIsR0FBY2dCLEVBQ2RBLEVBQUtsRixLQUdQa0UsR0FBY2dCLEVBQ2RBLEVBQUtsRixHQUdBa0YsRUF5R1QsU0FBU3dCLEtBQ1AsSUFBSXhCLEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQTRCaEIsT0ExQkFELEVBQUtoQixJQUNML3hCLEVBQUt1ekIsUUFDTTFGLElBQ1QzdEIsRUFBS3N6QixRQUNNM0YsSUFDVDN0QixFQUFLLE1BRUhBLElBQU8ydEIsSUFDVG1GLEVBQUtPLFFBQ00xRixHQUNNa0YsRUFFZkEsRUFEQS95QixFQUFLK3ZCLEVBQVEvdkIsRUFBSWd6QixLQU9uQmpCLEdBQWNnQixFQUNkQSxFQUFLbEYsS0FHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsR0FHQWtGLEVBK01ULFNBQVM2QixLQUNQLElBQUk3QixFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFBSUMsRUFBSUUsRUFBUTZCLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUtDLEVBcUZqRCxPQW5GQXJDLEVBQUtoQixJQUNML3hCLEVBQUtxMUIsUUFDTXhILElBQ1QzdEIsRUFBS3N6QixRQUNNM0YsSUFDVDN0QixFQUFLLE1BRUhBLElBQU8ydEIsSUFDVG1GLEVBQUtxQyxRQUNNeEgsSUFDVG9GLEVBQUtPLFFBQ00zRixJQUNUb0YsRUFBSyxNQUVIQSxJQUFPcEYsSUFDVHNGLEVBQUs0QixRQUNNbEgsR0FDSjJGLE9BQ00zRixJQUNUbUgsRUFBS00sUUFDTXpILElBQ1RvSCxFQUFLekIsUUFDTTNGLElBQ1RvSCxFQUFLLE1BRUhBLElBQU9wSCxJQUNUcUgsRUFBS0ksUUFDTXpILElBQ1RzSCxFQUFNM0IsUUFDTTNGLElBQ1ZzSCxFQUFNLE1BRUpBLElBQVF0SCxJQUNWdUgsRUFBTTdCLFFBQ00xRixHQUNLa0YsRUFFZkEsRUFEQS95QixFQUFLb3dCLEVBQVFwd0IsRUFBSWd6QixFQUFJRyxFQUFJNkIsRUFBSUUsRUFBSUUsS0FPbkNyRCxHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBT1RrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBZWJrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBT1RrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEtBR1BrRSxHQUFjZ0IsRUFDZEEsRUFBS2xGLEdBR0FrRixFQUdULFNBQVNRLEtBQ1AsSUFBSVIsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBNEJoQixPQTFCQUQsRUFBS2hCLElBQ0wveEIsRUFBSyswQixRQUNNbEgsSUFDVDN0QixFQUFLc3pCLFFBQ00zRixJQUNUM3RCLEVBQUssTUFFSEEsSUFBTzJ0QixJQUNUbUYsRUFBSytCLFFBQ01sSCxHQUNNa0YsRUFFZkEsRUFEQS95QixFQUFLdXdCLEVBQVF2d0IsRUFBSWd6QixLQU9uQmpCLEdBQWNnQixFQUNkQSxFQUFLbEYsS0FHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsR0FHQWtGLEVBR1QsU0FBU3NDLEtBQ1AsSUFBSXRDLEVBQUkveUIsRUFhUixPQVhBK3lCLEVBQUtoQixJQUNML3hCLEVBQUt1MUIsUUFDTTFILElBQ1Q3dEIsRUFBS3cxQixNQUVIeDFCLElBQU82dEIsSUFDTWtGLEVBQ2YveUIsRUFBS3d3QixFQUFReHdCLElBRWYreUIsRUFBSy95QixFQUtQLFNBQVMrMEIsS0FDUCxJQUFJaEMsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBK0NoQixPQTdDQUQsRUFBS2hCLEdBQ0wveEIsRUFBSyt4QixJQUNMN3hCLEVBQUt1MUIsUUFDTTVILElBQ1QzdEIsRUFBSyxNQUVIQSxJQUFPMnRCLElBQ1RtRixFQUFLdUMsUUFDTTFILEVBRVQ3dEIsRUFEQUUsRUFBSyxDQUFDQSxFQUFJOHlCLElBT1pqQixHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsR0FFSDd0QixJQUFPNnRCLElBQ1Q3dEIsRUFBSyt4QixJQUNMN3hCLEVBQUt1MUIsUUFDTTVILElBQ1QzdEIsRUFBSyxNQUVIQSxJQUFPMnRCLElBQ1RtRixFQUFLd0MsUUFDTTNILEVBRVQ3dEIsRUFEQUUsRUFBSyxDQUFDQSxFQUFJOHlCLElBT1pqQixHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsSUFHTDd0QixJQUFPNnRCLElBQ01rRixFQUNmL3lCLEVBQUt5d0IsRUFBUXp3QixJQUVmK3lCLEVBQUsveUIsRUFLUCxTQUFTczFCLEtBQ1AsSUFBSXZDLEVBQUkveUIsRUFnQlIsT0FkQSt5QixFQUFLaEIsR0FDRHJCLEVBQVExMkQsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDNUIveEIsRUFBSzJ0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUEveEIsRUFBSzZ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTbEMsSUFFcEMzd0IsSUFBTzZ0QixJQUNNa0YsRUFDZi95QixFQUFLNHdCLEVBQVE1d0IsSUFFZit5QixFQUFLL3lCLEVBS1AsU0FBU3d6QixLQUNQLElBQUlULEVBQUkveUIsRUFBSUUsRUFBSTh5QixFQUFJQyxFQUtwQixHQUhBRixFQUFLaEIsR0FDTC94QixFQUFLLElBQ0xFLEVBQUtnekIsUUFDTXJGLEVBQ1QsS0FBTzN0QixJQUFPMnRCLEdBQ1o3dEIsRUFBR25qQyxLQUFLcWpDLEdBQ1JBLEVBQUtnekIsVUFHUGx6QixFQUFLNnRCLEVBRVAsR0FBSTd0QixJQUFPNnRCLEVBS1QsSUFKQTN0QixFQUFLdzFCLFFBQ003SCxJQUNUM3RCLEVBQUssTUFFSEEsSUFBTzJ0QixFQUFZLENBR3JCLElBRkFtRixFQUFLLEdBQ0xDLEVBQUtDLEtBQ0VELElBQU9wRixHQUNabUYsRUFBR24yRCxLQUFLbzJELEdBQ1JBLEVBQUtDLEtBRUhGLElBQU9uRixFQUVUa0YsRUFEQS95QixFQUFLLENBQUNBLEVBQUlFLEVBQUk4eUIsSUFHZGpCLEdBQWNnQixFQUNkQSxFQUFLbEYsUUFHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsT0FHUGtFLEdBQWNnQixFQUNkQSxFQUFLbEYsRUFFUCxHQUFJa0YsSUFBT2xGLEVBQVksQ0FJckIsR0FIQWtGLEVBQUtoQixHQUNML3hCLEVBQUsreEIsSUFDTDd4QixFQUFLdzFCLFFBQ003SCxFQUFZLENBR3JCLElBRkFtRixFQUFLLEdBQ0xDLEVBQUtDLEtBQ0VELElBQU9wRixHQUNabUYsRUFBR24yRCxLQUFLbzJELEdBQ1JBLEVBQUtDLEtBRUhGLElBQU9uRixFQUVUN3RCLEVBREFFLEVBQUssQ0FBQ0EsRUFBSTh5QixJQUdWakIsR0FBYy94QixFQUNkQSxFQUFLNnRCLFFBR1BrRSxHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsRUFFSDd0QixJQUFPNnRCLElBQ01rRixFQUNmL3lCLEVBQUs4d0IsS0FFUGlDLEVBQUsveUIsRUFHUCxPQUFPK3lCLEVBR1QsU0FBUzJDLEtBQ1AsSUFBSTNDLEVBVUosT0FSc0MsS0FBbENwRixFQUFNLzhCLFdBQVdtaEMsS0FDbkJnQixFQUFLaEMsRUFDTGdCLE9BRUFnQixFQUFLbEYsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBUzdCLElBR2pDK0IsRUFHVCxTQUFTd0MsS0FDUCxJQUFJeEMsRUFBSS95QixFQUFJRSxFQUFJOHlCLEVBNENoQixPQTFDQUQsRUFBS2hCLEdBQ0wveEIsRUFBSyt4QixJQUNMN3hCLEVBMkNGLFdBQ0UsSUFBSTZ5QixFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFBSUMsRUFFcEJGLEVBQUtoQixHQUNML3hCLEVBQUsreEIsSUFDTDd4QixFQUFLczFCLFFBQ00zSCxJQUNUM3RCLEVBQUssTUFFSEEsSUFBTzJ0QixHQUM2QixLQUFsQ0YsRUFBTS84QixXQUFXbWhDLEtBQ25CaUIsRUFBSzdCLEVBQ0xZLE9BRUFpQixFQUFLbkYsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBU3pCLElBRXBDNEIsSUFBT25GLElBQ1RvRixFQUFLdUMsUUFDTTNILEVBRVQ3dEIsRUFEQUUsRUFBSyxDQUFDQSxFQUFJOHlCLEVBQUlDLElBT2hCbEIsR0FBYy94QixFQUNkQSxFQUFLNnRCLEtBR1BrRSxHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsR0FFSDd0QixJQUFPNnRCLElBQ1Q3dEIsRUFBSyt4QixJQUNMN3hCLEVBQUtzMUIsUUFDTTNILEdBQzZCLEtBQWxDRixFQUFNLzhCLFdBQVdtaEMsS0FDbkJpQixFQUFLN0IsRUFDTFksT0FFQWlCLEVBQUtuRixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTekIsSUFFcEM0QixJQUFPbkYsRUFFVDd0QixFQURBRSxFQUFLLENBQUNBLEVBQUk4eUIsSUFHVmpCLEdBQWMveEIsRUFDZEEsRUFBSzZ0QixLQUdQa0UsR0FBYy94QixFQUNkQSxFQUFLNnRCLElBR0w3dEIsSUFBTzZ0QixJQUNNa0YsRUFDZi95QixFQUFLa3hCLEVBQVFseEIsSUFJZixPQUZBK3lCLEVBQUsveUIsRUF4R0EyMUIsTUFDTTlILElBQ1RtRixFQUFLNEMsUUFDTS9ILElBQ1RtRixFQUFLLE1BRUhBLElBQU9uRixFQUVUN3RCLEVBREFFLEVBQUssQ0FBQ0EsRUFBSTh5QixJQUdWakIsR0FBYy94QixFQUNkQSxFQUFLNnRCLEtBR1BrRSxHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsR0FFSDd0QixJQUFPNnRCLElBQ1Q3dEIsRUFBSyt4QixJQUNMN3hCLEVBQUtzMUIsUUFDTTNILElBQ1RtRixFQUFLNEMsUUFDTS9ILEVBRVQ3dEIsRUFEQUUsRUFBSyxDQUFDQSxFQUFJOHlCLElBT1pqQixHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsSUFHTDd0QixJQUFPNnRCLElBQ01rRixFQUNmL3lCLEVBQUtreEIsRUFBUWx4QixJQUVmK3lCLEVBQUsveUIsRUF1RVAsU0FBUzQxQixLQUNQLElBQUk3QyxFQUFJL3lCLEVBQUlFLEVBQUk4eUIsRUFBSUMsRUF1Q3BCLE9BckNBRixFQUFLaEIsR0FDTC94QixFQUFLK3hCLEdBQ0RWLEVBQVFyM0QsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDNUI3eEIsRUFBS3l0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUE3eEIsRUFBSzJ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTdkIsSUFFcENweEIsSUFBTzJ0QixJQUNUbUYsRUFBS3lDLFFBQ001SCxJQUNUbUYsRUFBSyxNQUVIQSxJQUFPbkYsSUFDVG9GLEVBQUt1QyxRQUNNM0gsRUFFVDd0QixFQURBRSxFQUFLLENBQUNBLEVBQUk4eUIsRUFBSUMsSUFPaEJsQixHQUFjL3hCLEVBQ2RBLEVBQUs2dEIsS0FHUGtFLEdBQWMveEIsRUFDZEEsRUFBSzZ0QixHQUVIN3RCLElBQU82dEIsSUFDTWtGLEVBQ2YveUIsRUFBS2t4QixFQUFRbHhCLElBRWYreUIsRUFBSy95QixFQUtQLFNBQVN5MUIsS0FDUCxJQUFJMUMsRUFVSixPQVJJeEIsRUFBUXYzRCxLQUFLMnpELEVBQU16L0MsT0FBTzZqRCxNQUM1QmdCLEVBQUtwRixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUFnQixFQUFLbEYsRUFDbUIsSUFBcEJ3RSxJQUF5QlEsR0FBU3JCLElBR2pDdUIsRUFHVCxTQUFTeUMsS0FDUCxJQUFJekMsRUFBSS95QixFQUFJRSxFQVdaLEdBVEE2eUIsRUFBS2hCLEdBQ0wveEIsRUFBSyxHQUNEeXhCLEdBQVF6M0QsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDNUI3eEIsRUFBS3l0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUE3eEIsRUFBSzJ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTbkIsS0FFcEN4eEIsSUFBTzJ0QixFQUNULEtBQU8zdEIsSUFBTzJ0QixHQUNaN3RCLEVBQUduakMsS0FBS3FqQyxHQUNKdXhCLEdBQVF6M0QsS0FBSzJ6RCxFQUFNei9DLE9BQU82akQsTUFDNUI3eEIsRUFBS3l0QixFQUFNei9DLE9BQU82akQsSUFDbEJBLE9BRUE3eEIsRUFBSzJ0QixFQUNtQixJQUFwQndFLElBQXlCUSxHQUFTbkIsVUFJMUMxeEIsRUFBSzZ0QixFQVFQLE9BTkk3dEIsSUFBTzZ0QixJQUNNa0YsRUFDZi95QixFQUFLMnhCLEdBQVEzeEIsSUFFZit5QixFQUFLL3lCLEVBS1AsU0FBU2t6QixLQUNQLElBQUlILEVBQUkveUIsRUFnQlIsT0FkQSt5QixFQUFLaEIsR0FDREYsR0FBUTczRCxLQUFLMnpELEVBQU16L0MsT0FBTzZqRCxNQUM1Qi94QixFQUFLMnRCLEVBQU16L0MsT0FBTzZqRCxJQUNsQkEsT0FFQS94QixFQUFLNnRCLEVBQ21CLElBQXBCd0UsSUFBeUJRLEdBQVNmLEtBRXBDOXhCLElBQU82dEIsSUFDTWtGLEVBQ2YveUIsRUFBSzh3QixLQUVQaUMsRUFBSy95QixFQVlMLElBQUk5dUIsR0FBTyxDQUFDdGQsRUFBRSxTQUFTSCxFQUFFLFNBQVM2ckIsRUFBRSxvQkFBb0JwWixFQUFFLGtCQUFrQnJTLEVBQUUsVUFBVTBCLEVBQUUsaUJBQWlCc2dFLEVBQUUsb0JBQW9CbmhFLEVBQUUsMkJBQTJCdUQsRUFBRSxpQkFBaUI2OUQsRUFBRSxhQUNuTCxJQUFLLElBQUluNEMsTUFBUXpNLEdBQU1BLEdBQUt5TSxHQUFLczdCLGVBQWUvbkMsR0FBS3lNLElBQ3JELFNBQVMrNkIsR0FBUy82QixFQUFLOHdCLEdBQ2hCQSxJQUFNQSxFQUFLLENBQUMsS0FDakIsSUFBSyxJQUFJajdDLEVBQUVpN0MsRUFBS3YwQyxPQUFPMUcsS0FBSyxDQUMxQixJQUFJcWxELEVBQUksQ0FBQ2w3QixLQUFLQSxFQUFLbkcsUUFBUXRHLEdBQUt5TSxJQUVoQyxJQUFLLElBQUl5RyxLQURMekcsR0FBTUEsRUFBSzFqQixnQkFBZTQrQyxFQUFJRyxVQUFTLEdBQzdCdkssRUFBS2o3QyxHQUFJcWxELEVBQUl6MEIsR0FBR3FxQixFQUFLajdDLEdBQUc0d0IsR0FDdENxcUIsRUFBS2o3QyxHQUFLcWxELEVBRVosT0FBT3BLLEVBTVgsSUFGQW1mLEVBQWFLLE9BRU1KLEdBQWNrRSxLQUFnQnBFLEVBQU16ekQsT0FDckQsT0FBTzB6RCxFQU1QLE1BSklBLElBQWVDLEdBQWNrRSxHQUFjcEUsRUFBTXp6RCxRQUNuRDI0RCxHQTV2REssQ0FBRS84RCxLQUFNLFFBK3ZEVGc5RCxHQUNKVixHQUNBRCxHQUFpQnhFLEVBQU16ekQsT0FBU3l6RCxFQUFNei9DLE9BQU9pa0QsSUFBa0IsS0FDL0RBLEdBQWlCeEUsRUFBTXp6RCxPQUNuQnU0RCxHQUFvQk4sR0FBZ0JBLEdBQWlCLEdBQ3JETSxHQUFvQk4sR0FBZ0JBLFEsY0NwZ0U5QyxJQUFJNEQsRUFBcUMsb0JBQVosUUFBMkJDLE9BQU9ELGlCQUFtQkMsT0FBT0QsZ0JBQWdCL2dFLEtBQUtnaEUsU0FDbkUsb0JBQWQsVUFBdUUsbUJBQW5DNWlFLE9BQU82aUUsU0FBU0YsaUJBQWlDRSxTQUFTRixnQkFBZ0IvZ0UsS0FBS2loRSxVQUVoSixHQUFJRixFQUFpQixDQUVuQixJQUFJRyxFQUFRLElBQUkzM0QsV0FBVyxJQUUzQnRMLEVBQU9ELFFBQVUsV0FFZixPQURBK2lFLEVBQWdCRyxHQUNUQSxPQUVKLENBS0wsSUFBSXp4QixFQUFPLElBQUlobUMsTUFBTSxJQUVyQnhMLEVBQU9ELFFBQVUsV0FDZixJQUFLLElBQVdzQixFQUFQZCxFQUFJLEVBQU1BLEVBQUksR0FBSUEsSUFDTixJQUFWLEVBQUpBLEtBQWlCYyxFQUFvQixXQUFoQmlELEtBQUtvUixVQUMvQjg3QixFQUFLanhDLEdBQUtjLE1BQVksRUFBSmQsSUFBYSxHQUFLLElBR3RDLE9BQU9peEMsSyxjQzFCWCxJQURBLElBQUkweEIsRUFBWSxHQUNQM2lFLEVBQUksRUFBR0EsRUFBSSxNQUFPQSxFQUN6QjJpRSxFQUFVM2lFLElBQU1BLEVBQUksS0FBTzZILFNBQVMsSUFBSTRULE9BQU8sR0FpQmpEaGMsRUFBT0QsUUFkUCxTQUFxQnd4QyxFQUFLN2lDLEdBQ3hCLElBQUluTyxFQUFJbU8sR0FBVSxFQUNkeTBELEVBQU1ELEVBRVYsTUFBTyxDQUFFQyxFQUFJNXhCLEVBQUloeEMsTUFBTzRpRSxFQUFJNXhCLEVBQUloeEMsTUFDakM0aUUsRUFBSTV4QixFQUFJaHhDLE1BQU80aUUsRUFBSTV4QixFQUFJaHhDLE1BQU8sSUFDOUI0aUUsRUFBSTV4QixFQUFJaHhDLE1BQU80aUUsRUFBSTV4QixFQUFJaHhDLE1BQU8sSUFDOUI0aUUsRUFBSTV4QixFQUFJaHhDLE1BQU80aUUsRUFBSTV4QixFQUFJaHhDLE1BQU8sSUFDOUI0aUUsRUFBSTV4QixFQUFJaHhDLE1BQU80aUUsRUFBSTV4QixFQUFJaHhDLE1BQU8sSUFDOUI0aUUsRUFBSTV4QixFQUFJaHhDLE1BQU80aUUsRUFBSTV4QixFQUFJaHhDLE1BQ3ZCNGlFLEVBQUk1eEIsRUFBSWh4QyxNQUFPNGlFLEVBQUk1eEIsRUFBSWh4QyxNQUN2QjRpRSxFQUFJNXhCLEVBQUloeEMsTUFBTzRpRSxFQUFJNXhCLEVBQUloeEMsT0FBUTRGLEtBQUssTSw4QkNwQnJDLFlBUUEsR0FOQSxFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsS0FFSjVELEVBQU82Z0UsZUFDVCxNQUFNLElBQUl4M0MsTUFBTSxrREFFbEJycEIsRUFBTzZnRSxnQkFBaUIsRUFFeEIsSUFBSUMsRUFBa0IsaUJBQ3RCLFNBQVNwakUsRUFBT3FGLEVBQUd4RCxFQUFLTixHQUN0QjhELEVBQUV4RCxJQUFRYixPQUFPb2lFLEdBQWlCLzlELEVBQUd4RCxFQUFLLENBQ3hDcVEsVUFBVSxFQUNWRCxjQUFjLEVBQ2QxUSxNQUFPQSxJQUlYdkIsRUFBT21HLE9BQU9qRSxVQUFXLFVBQVcsR0FBR3VtQixVQUN2Q3pvQixFQUFPbUcsT0FBT2pFLFVBQVcsV0FBWSxHQUFHbWhFLFFBRXhDLGdNQUFnTXg5RCxNQUFNLEtBQUswSyxRQUFRLFNBQVUxTyxHQUMzTixHQUFHQSxJQUFRN0IsRUFBT3VMLE1BQU8xSixFQUFLaUMsU0FBU3JELEtBQUtxQixLQUFLLEdBQUdELFMsaUNDMUJ0RCxJQUFJc2EsRUFHSkEsRUFBSSxXQUNILE9BQU8vVixLQURKLEdBSUosSUFFQytWLEVBQUlBLEdBQUssSUFBSXJZLFNBQVMsY0FBYixHQUNSLE1BQU9XLEdBRWMsaUJBQVh2RSxTQUFxQmljLEVBQUlqYyxRQU9yQ0gsRUFBT0QsUUFBVXFjLEcsZ0JDbkJqQixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLElBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixF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UCxFQUFPLFNBQVNBLElBQzFCLE9BQVNuUCxFQUFJOFcsRUFBU3BRLFFBQ3BCLEdBQUlzMEUsRUFBTzc2RSxLQUFLMlcsRUFBVTlXLEdBR3hCLE9BRkFtUCxFQUFLbE8sTUFBUTZWLEVBQVM5VyxHQUN0Qm1QLEVBQUtDLE1BQU8sRUFDTEQsRUFPWCxPQUhBQSxFQUFLbE8sTUFBUXNDLEVBQ2I0TCxFQUFLQyxNQUFPLEVBRUxELEdBR1QsT0FBT0EsRUFBS0EsS0FBT0EsR0FLdkIsTUFBTyxDQUFFQSxLQUFNNHZFLEdBSWpCLFNBQVNBLElBQ1AsTUFBTyxDQUFFOTlFLE1BQU9zQyxFQUFXNkwsTUFBTSxJQWhnQnBDLENBOHNCQyxXQUFjLE9BQU90SixLQUFyQixJQUFrQ3RDLFNBQVMsY0FBVEEsSyxnQkNydEJwQyxFQUFRLEtBQ1IvRCxFQUFPRCxRQUFVLEVBQVEsSUFBdUJrWSxPQUFPaW9FLFEsZ0JDQXZELElBQUl0OUUsRUFBVSxFQUFRLEdBQ2xCdTlFLEVBQU0sRUFBUSxJQUFSLENBQXVCLHNCQUF1QixRQUV4RHY5RSxFQUFRQSxFQUFRVyxFQUFHLFNBQVUsQ0FBRTI4RSxPQUFRLFNBQWdCOTdFLEdBQU0sT0FBTys3RSxFQUFJLzdFLE8sY0NKeEVwRSxFQUFPRCxRQUFVLFNBQVVxZ0YsRUFBUXY1RSxHQUNqQyxJQUFJMCtELEVBQVcxK0QsSUFBWTVGLE9BQU80RixHQUFXLFNBQVV3NUUsR0FDckQsT0FBT3g1RSxFQUFRdzVFLElBQ2J4NUUsRUFDSixPQUFPLFNBQVV6QyxHQUNmLE9BQU9nQyxPQUFPaEMsR0FBSXlDLFFBQVF1NUUsRUFBUTdhIiwiZmlsZSI6ImNhbmlzX3Rvb2xraXQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJjYW5pc190b29sa2l0XCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImNhbmlzX3Rvb2xraXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiY2FuaXNfdG9vbGtpdFwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0NCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi45JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsImNsYXNzIFRpbWluZ1NwZWMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDsvL2RlZmF1bHQgb2ZmZnNldCBpcyAwXHJcbiAgICAgICAgdGhpcy5fcmVmZXJlbmNlID0gVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDsvL2RlZmF1bHQgb2Zmc2V0IHJlZmVyZW5jZSBpcyAncHJldmlvdXNfc3RhcnQnXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgcmVmZXJlbmNlKG9mZnNldFJlZikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0UmVmICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBsZXQgdG1wT2Zmc2V0UmVmU3RyID0gVGltaW5nU3BlYy50cmFuc1JlZihvZmZzZXRSZWYpO1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoVGltaW5nU3BlYy50aW1pbmdSZWYpLmluY2x1ZGVzKHRtcE9mZnNldFJlZlN0cikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlZmVyZW5jZSA9IG9mZnNldFJlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVmZXJlbmNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZlcmVuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG9mZnNldChvZnN0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvZnN0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9mc3QgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBNYXRoLmZsb29yKG9mc3QgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpICogKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvZnN0ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2ZzdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IG9mc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBvZmZzZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldDtcclxuICAgIH1cclxuICAgIC8qKioqKiBlbmQgZ2V0dGVycyBhbmQgc2V0dGVycyAqKioqKi9cclxuXHJcbiAgICByZXBsYWNlT2Zmc2V0Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMgPSB7fSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vZmZzZXQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldCkgPT09ICd1bmRlZmluZWQnKSB7Ly9jaGVjayBlcnJvciBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGl0IGlzIGFuIGVxdWF0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXQuaW5kZXhPZihcImNhbGNcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMub2Zmc2V0LnN1YnN0cmluZygwLCB0aGlzLm9mZnNldC5sZW5ndGggLSAxKS5zdWJzdHJpbmcoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLmZvckVhY2goKHZhbHVlLCBrZXksIG1hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXQuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMub2Zmc2V0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnbScpLCAnJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ09mZnNldCBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgbnVtZXJpYyB0eXBlIGNvbnN0YW50LicsIGVyclNwZWM6ICdcIm9mZnNldFwiOlwiJyArIHRoaXMub2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tFcXVhdGlvbih0aGlzLm9mZnNldCwgY29uc3RhbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGV2YWwodGhpcy5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBlcXVhdGlvbi4nLCBlcnJTcGVjOiAnXCJvZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1dyb25nIHJlZmVyZW5jZSBvZiB0aGUgY29uc3RhbnQgdmFyaWFibGVzLicsIGVyclNwZWM6ICdcIm9mZnNldFwiOlwiJyArIHRoaXMub2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7Ly9yZXBsYWNlXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQpID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdPZmZzZXQgbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJvZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9mZnNldCAmJiB0eXBlb2YgdGhpcy5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vZmZzZXQubWluT2Zmc2V0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0Lm1pbk9mZnNldCkgPT09ICd1bmRlZmluZWQnKSB7Ly9jaGVjayBlcnJvciBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdCBpcyBhbiBlcXVhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9mZnNldC5taW5PZmZzZXQuaW5kZXhPZihcImNhbGNcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQubWluT2Zmc2V0ID0gdGhpcy5vZmZzZXQubWluT2Zmc2V0LnN1YnN0cmluZygwLCB0aGlzLm9mZnNldC5taW5PZmZzZXQubGVuZ3RoIC0gMSkuc3Vic3RyaW5nKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdGFudHMuZm9yRWFjaCgodmFsdWUsIGtleSwgbWFwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vZmZzZXQubWluT2Zmc2V0LmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5taW5PZmZzZXQgPSB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2dtJyksICcnICsgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdNaW5PZmZzZXQgbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJtaW5PZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tFcXVhdGlvbih0aGlzLm9mZnNldC5taW5PZmZzZXQsIGNvbnN0YW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Lm1pbk9mZnNldCA9IGV2YWwodGhpcy5vZmZzZXQubWluT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBlcXVhdGlvbi4nLCBlcnJTcGVjOiAnXCJtaW5PZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJtaW5PZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldC5taW5PZmZzZXQpID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldC5taW5PZmZzZXQgPSBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0Lm1pbk9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ01pbk9mZnNldCBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgbnVtZXJpYyB0eXBlIGNvbnN0YW50LicsIGVyclNwZWM6ICdcIm1pbk9mZnNldFwiOlwiJyArIHRoaXMub2Zmc2V0Lm1pbk9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWxFTGVPZmZzZXRUaW1lKGRvbU1hcmtzKSB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGxldCBpdGVtc1N0YXJ0ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICAvL2lmIHRoZSBvZmZzZXQgaXMgYW4gb2JqZWN0LCBmaW5kIHRoZSBtaW4gdmFsdWUgb2YgdGhlIGZpZWxkIGluIG9mZnNldFxyXG4gICAgICAgIGxldCBtaW5BdHRyVmFsdWUgPSAxMDAwMDAwO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGRvbU1hcmtzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtaW5BdHRyVmFsdWUgPiBwYXJzZUZsb2F0KGF0dHJzWydkYXRhLWRhdHVtJ11bdGhhdC5vZmZzZXQuZmllbGRdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkF0dHJWYWx1ZSA9IHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9tTWFya3MuZm9yRWFjaChmdW5jdGlvbiAoYXR0cnMsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0VmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAvL2p1ZGdlIHRoZSB0eXBlIG9mIG9mZnNldDogbnVtYmVyIG9yIG9iamVjdFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQub2Zmc2V0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0VmFsdWUgPSB0aGF0Lm9mZnNldDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhhdC5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHRoYXQub2Zmc2V0Lm1pbk9mZnNldCAqIHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pIC8gbWluQXR0clZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgb2Zmc2V0VmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgLy8gc3dpdGNoICh0aGF0LnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0OlxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgbGFzdFN0YXJ0ICsgb2Zmc2V0VmFsdWUgLSBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgLy8gICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBsYXN0RW5kICsgb2Zmc2V0VmFsdWUgLSBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgLy8gICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBvZmZzZXRWYWx1ZSArIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvLyAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgLy8gICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIGxhc3RTdGFydCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiBpdGVtc1N0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIG9mZnNldCBzdGFydCB0aW1lXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdFN0YXJ0IDogc3RhcnQgdGltZSBvZiB0aGUgbGFzdCBpdGVtXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEVuZCA6IGVuZCB0aW1lIG9mIHRoZSBsYXN0IGl0ZW1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbGxJdGVtc1N0YXJ0IDogc3RhcnQgdGltZSBvZiBhbGwgdGhlIGl0ZW1zIFxyXG4gICAgICogQHBhcmFtIHtNYXB9IGRvbU1hcmtzIDoga2V5OiBtYXJrSWQsIHZhbHVlOiBhdHRyc1xyXG4gICAgICovXHJcbiAgICBjYWxPZmZzZXRUaW1lKGxhc3RTdGFydCwgbGFzdEVuZCwgYWxsSXRlbXNTdGFydCA9IDAsIGRvbU1hcmtzID0gbmV3IE1hcCgpKSB7XHJcbiAgICAgICAgaWYgKGRvbU1hcmtzLnNpemUgPT09IDApIHsvL2NvbXB1dGluZyBhY3Rpb24gb2Zmc2V0IHRpbWUsIHJldHVybiBhIG51bWJlclxyXG4gICAgICAgICAgICBsZXQgaXRlbVN0YXJ0ID0gMDtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TdGFydCA9IGxhc3RTdGFydCArIHRoaXMub2Zmc2V0IC0gYWxsSXRlbXNTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0YXJ0ID0gbGFzdEVuZCArIHRoaXMub2Zmc2V0IC0gYWxsSXRlbXNTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0YXJ0ID0gdGhpcy5vZmZzZXQgKyBhbGxJdGVtc1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpdGVtU3RhcnQgPSBsYXN0U3RhcnQgKyB0aGlzLm9mZnNldCAtIGFsbEl0ZW1zU3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1TdGFydDtcclxuICAgICAgICB9IGVsc2Ugey8vY29tcHV0aW5nIGFuaW1hdGlvbiBvZmZzZXQgdGltZSwgcmV0dXJuIGEgbWFwXHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IGl0ZW1zU3RhcnQgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgICAgICAvL2lmIHRoZSBvZmZzZXQgaXMgYW4gb2JqZWN0LCBmaW5kIHRoZSBtaW4gdmFsdWUgb2YgdGhlIGZpZWxkIGluIG9mZnNldFxyXG4gICAgICAgICAgICBsZXQgbWluQXR0clZhbHVlID0gMTAwMDAwMDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9mZnNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGRvbU1hcmtzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWluQXR0clZhbHVlID4gcGFyc2VGbG9hdChhdHRyc1snZGF0YS1kYXR1bSddW3RoYXQub2Zmc2V0LmZpZWxkXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluQXR0clZhbHVlID0gcGFyc2VGbG9hdChhdHRyc1snZGF0YS1kYXR1bSddW3RoYXQub2Zmc2V0LmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZG9tTWFya3MuZm9yRWFjaChmdW5jdGlvbiAoYXR0cnMsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldFZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgIC8vanVkZ2UgdGhlIHR5cGUgb2Ygb2Zmc2V0OiBudW1iZXIgb3Igb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQub2Zmc2V0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFZhbHVlID0gdGhhdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Lm9mZnNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHRoYXQub2Zmc2V0Lm1pbk9mZnNldCAqIHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pIC8gbWluQXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhhdC5yZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgbGFzdFN0YXJ0ICsgb2Zmc2V0VmFsdWUgLSBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c0VuZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBsYXN0RW5kICsgb2Zmc2V0VmFsdWUgLSBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5hYnNvbHV0ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBvZmZzZXRWYWx1ZSArIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIGxhc3RTdGFydCArIG9mZnNldFZhbHVlIC0gYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtc1N0YXJ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zUmVmKHJlZlN0cikge1xyXG4gICAgICAgIHN3aXRjaCAocmVmU3RyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAncHJldmlvdXNTdGFydCc7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3ByZXZpb3VzRW5kJztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLnRpbWluZ1JlZi5hYnNvbHV0ZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnYWJzb2x1dGUnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuVGltaW5nU3BlYy5GUkFNRV9SQVRFID0gMjA7XHJcblRpbWluZ1NwZWMudGltaW5nUmVmID0ge1xyXG4gICAgcHJldmlvdXNTdGFydDogJ3N0YXJ0IHdpdGggcHJldmlvdXMnLFxyXG4gICAgcHJldmlvdXNFbmQ6ICdzdGFydCBhZnRlciBwcmV2aW91cycsXHJcbiAgICBhYnNvbHV0ZTogJ2Fic29sdXRlJ1xyXG59O1xyXG5UaW1pbmdTcGVjLmRhdGFCaW5kQXR0cnMgPSBbJ2ZpZWxkJywgJ21pbk9mZnNldCcsICdtaW5EdXJhdGlvbiddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGltaW5nU3BlYzsiLCJpbXBvcnQgeyBQYXRoTWFrZXIgfSBmcm9tICdqc21vdmluJztcclxuaW1wb3J0IHsgcGFyc2VTVkcgfSBmcm9tICdzdmctcGF0aC1wYXJzZXInXHJcbmltcG9ydCBBY3Rpb25TcGVjIGZyb20gJy4uL0FjdGlvblNwZWMnO1xyXG5pbXBvcnQgQ2hhcnRTcGVjIGZyb20gJy4uL0NoYXJ0U3BlYyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuaXNVdGlsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjaGVjayB3aGV0aGVyIGFycjIgaXMgY29udGFpbmVkIGluIGFycjFcclxuICAgICAqIEBwYXJhbSB7Kn0gYXJyMSBcclxuICAgICAqIEBwYXJhbSB7Kn0gYXJyMiBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFycklzQ29udGFpbmVkKGFycjEsIGFycjIpIHtcclxuICAgICAgICBpZiAoYXJyMi5sZW5ndGggPiBhcnIxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycjIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCFhcnIxLmluY2x1ZGVzKGFycjJbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjaGVja0VxdWF0aW9uKHN0cmluZywgY29uc3RhbnRzKSB7XHJcbiAgICAgICAgLy8g5YmU6Zmk56m655m956ymXHJcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jOepuuWtl+espuS4slxyXG4gICAgICAgIGlmIChcIlwiID09PSBzdHJpbmcpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL15bXFx4XFzDt1xcK1xcLVxcKlxcL10vLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCYgYW1wOyBxdW90OyDov5DnrpfnrKblvIDlpLQgJiBhbXA7IHF1b3Q7KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/plJnor6/mg4XlhrXvvIzov5DnrpfnrKbnu5PlsL5cclxuICAgICAgICBpZiAoL1tcXHhcXMO3XFwrXFwtXFwqXFwvXSQvLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCYgYW1wOyBxdW90OyDov5DnrpfnrKbnu5PlsL4gJiBhbXA7IHF1b3Q7KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6ZSZ6K+v5oOF5Ya177yMKOWQjumdouaYr+i/kOeul+espuaIluiAhSlcclxuICAgICAgICBpZiAoL1xcKFtcXHhcXMO3XFwrXFwtXFwqXFwvXS8udGVzdChzdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJiBhbXA7IHF1b3Q7ICjlkI7pnaLmmK/ov5DnrpfnrKbmiJbogIUpICYgYW1wOyBxdW90Oyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6ZSZ6K+v5oOF5Ya177yM6L+Q566X56ym6L+e57utXHJcbiAgICAgICAgaWYgKC9bXFx4XFzDt1xcK1xcLVxcKlxcL117Mix9Ly50ZXN0KHN0cmluZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g56m65ous5Y+3XHJcbiAgICAgICAgaWYgKC9cXChcXCkvLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIzmi6zlj7fkuI3phY3lr7lcclxuICAgICAgICB2YXIgc3RhY2sgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaXRlbTsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpdGVtID0gc3RyaW5nLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgaWYgKCcoJyA9PT0gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaCgnKCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCcpJyA9PT0gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoMCAhPT0gc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmUmeivr+aDheWGte+8jCjlkI7pnaLmmK/ov5DnrpfnrKYgXHJcbiAgICAgICAgaWYgKC9cXChbXFx4XFzDt1xcK1xcLVxcKlxcL10vLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIwp5YmN6Z2i5piv6L+Q566X56ymXHJcbiAgICAgICAgaWYgKC9bXFx4XFzDt1xcK1xcLVxcKlxcL11cXCkvLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIwo5YmN6Z2i5LiN5piv6L+Q566X56ymXHJcbiAgICAgICAgaWYgKC9bXFx4XFzDt1xcK1xcLVxcKlxcL11cXCgvLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIwp5ZCO6Z2i5LiN5piv6L+Q566X56ymXHJcbiAgICAgICAgaWYgKC9cXClbXFx4XFzDt1xcK1xcLVxcKlxcL10vLnRlc3Qoc3RyaW5nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDplJnor6/mg4XlhrXvvIzlj5jph4/msqHmnInmnaXoh6rigJzlvoXpgInlhazlvI/lj5jph4/igJ1cclxuICAgICAgICB2YXIgdG1wU3RyID0gc3RyaW5nLnJlcGxhY2UoL1tcXChcXClcXHhcXMO3XFwrXFwtXFwqXFwvXXsxLH0vZywgJ2AnKTtcclxuICAgICAgICB2YXIgYXJyYXkgPSB0bXBTdHIuc3BsaXQoJywnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaXRlbTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBhcnJheVtpXTtcclxuICAgICAgICAgICAgaWYgKC9bQS1aXS9pLnRlc3QoaXRlbSkgJiYgJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIChjb25zdGFudHMuZ2V0KGl0ZW0pKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdHJpbmdhcnIgPSBzdHJpbmcuc3BsaXQoJywnKTtcclxuICAgICAgICAvLyBsZXQgb2JqYXJyID0gT2JqZWN0LmtleXMob2JqKTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RyaW5nYXJyLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQoc3RyaW5nYXJyW2luZGV4XSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RyaW5nYXJyW2luZGV4ICsgMV0gPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZ2FycltpbmRleCArIDFdICE9PSAnKycgJiYgc3RyaW5nYXJyW2luZGV4ICsgMV0gIT09ICcuJyAmJiBzdHJpbmdhcnJbaW5kZXggKyAxXSAhPT0gJy0nICYmIHN0cmluZ2FycltpbmRleCArIDFdICE9PSAneCcgJiYgc3RyaW5nYXJyW2luZGV4ICsgMV0gIT09ICfDtycgJiYgc3RyaW5nYXJyW2luZGV4ICsgMV0gIT09ICcoJyAmJiBzdHJpbmdhcnJbaW5kZXggKyAxXSAhPT0gJyknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZGVlcENsb25lKG9iaikge1xyXG4gICAgICAgIGlmICghb2JqIHx8IHRydWUgPT0gb2JqKSAvL3RoaXMgYWxzbyBoYW5kbGVzIGJvb2xlYW4gYXMgdHJ1ZSBhbmQgZmFsc2VcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB2YXIgb2JqVHlwZSA9IHR5cGVvZiAob2JqKTtcclxuICAgICAgICBpZiAoXCJudW1iZXJcIiA9PSBvYmpUeXBlIHx8IFwic3RyaW5nXCIgPT0gb2JqVHlwZSkgLy8gYWRkIHlvdXIgaW1tdXRhYmxlcyBoZXJlXHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge307XHJcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE1hcCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmtleXMoKS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleSA9IG9iai5rZXlzKClbaV07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGtleSwgdGhpcy5kZWVwQ2xvbmUob2JqLmdldChrZXkpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcclxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLmRlZXBDbG9uZShvYmpba2V5XSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXJyYXlJbnRlcnNhY3QoYXJyMSwgYXJyMikge1xyXG4gICAgICAgIHJldHVybiBhcnIxLmZpbHRlcih2ID0+IGFycjIuaW5jbHVkZXModikpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRUaW1lKHRpbWUpIHtcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVTID0gcGFyc2VJbnQodGltZSAvIDEwMDApO1xyXG4gICAgICAgIGxldCBjdXJyZW50VGltZU1TID0gcGFyc2VJbnQodGltZSAlIDEwMDAgLyAxMCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lU1N0ciA9IGN1cnJlbnRUaW1lUyA8IDEwID8gJzAnICsgY3VycmVudFRpbWVTIDogJycgKyBjdXJyZW50VGltZVM7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lTVNTdHIgPSBjdXJyZW50VGltZU1TIDwgMTAgPyAnMCcgKyBjdXJyZW50VGltZU1TIDogJycgKyBjdXJyZW50VGltZU1TO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50VGltZVNTdHIgKyAnOicgKyBjdXJyZW50VGltZU1TU3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb2xvcjJSR0IoY29sb3IpIHtcclxuICAgICAgICBpZiAoY29sb3IpIHtcclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuZnJvbSh0aGlzLmNvbG9yTmFtZXMua2V5cygpKS5pbmNsdWRlcyhjb2xvcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jb2xvck5hbWVzLmdldChjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKC9cXHMvZywgJycpO1xyXG4gICAgICAgICAgICBpZiAoY29sb3IuaW5kZXhPZigncmdiJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFN0ciA9IGNvbG9yLnN1YnN0cihjb2xvci5pbmRleE9mKCcoJykgKyAxKTtcclxuICAgICAgICAgICAgICAgIHRtcFN0ciA9IHRtcFN0ci5zdWJzdHJpbmcoMCwgdG1wU3RyLmluZGV4T2YoJyknKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmdiID0gdG1wU3RyLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmdiLmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJnYlszXSA9IDI1NTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbcGFyc2VJbnQocmdiWzBdKSwgcGFyc2VJbnQocmdiWzFdKSwgcGFyc2VJbnQocmdiWzJdKSwgcGFyc2VJbnQocmdiWzNdKV07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3IuaW5kZXhPZignIycpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkhFWDJSR0IoY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEhFWDJSR0IoaGV4KSB7XHJcbiAgICAgICAgaWYgKGhleC5jaGFyQXQoMCkgPT09ICcjJykge1xyXG4gICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGhleC5sZW5ndGggPCAyKSB8fCAoaGV4Lmxlbmd0aCA+IDYpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IGhleC5zcGxpdCgnJyksXHJcbiAgICAgICAgICAgIHIsXHJcbiAgICAgICAgICAgIGcsXHJcbiAgICAgICAgICAgIGIsXHJcbiAgICAgICAgICAgIGEgPSAyNTU7XHJcblxyXG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHIgPSBwYXJzZUludCh2YWx1ZXNbMF0udG9TdHJpbmcoKSArIHZhbHVlc1sxXS50b1N0cmluZygpLCAxNik7XHJcbiAgICAgICAgICAgIGcgPSByO1xyXG4gICAgICAgICAgICBiID0gcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICAgICAgciA9IHBhcnNlSW50KHZhbHVlc1swXS50b1N0cmluZygpICsgdmFsdWVzWzBdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgZyA9IHBhcnNlSW50KHZhbHVlc1sxXS50b1N0cmluZygpICsgdmFsdWVzWzFdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbHVlc1syXS50b1N0cmluZygpICsgdmFsdWVzWzJdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDYpIHtcclxuICAgICAgICAgICAgciA9IHBhcnNlSW50KHZhbHVlc1swXS50b1N0cmluZygpICsgdmFsdWVzWzFdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgZyA9IHBhcnNlSW50KHZhbHVlc1syXS50b1N0cmluZygpICsgdmFsdWVzWzNdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgYiA9IHBhcnNlSW50KHZhbHVlc1s0XS50b1N0cmluZygpICsgdmFsdWVzWzVdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbciwgZywgYiwgYV07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvTG90dGllUkdCQShjb2xvcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yMlJHQihjb2xvcikubWFwKChjKSA9PiBjIC8gMjU1KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9KU09OKG5vZGUpIHtcclxuICAgICAgICBub2RlID0gbm9kZSB8fCB0aGlzO1xyXG4gICAgICAgIGxldCBvYmogPSB7XHJcbiAgICAgICAgICAgIG5vZGVUeXBlOiBub2RlLm5vZGVUeXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAobm9kZS50YWdOYW1lKSB7XHJcbiAgICAgICAgICAgIG9iai50YWdOYW1lID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoubm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5vZGUubm9kZVZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9iai5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGlmIChhdHRycykge1xyXG4gICAgICAgICAgICBvYmouYXR0ciA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYXR0cjsgaSA8IGF0dHJzLmxlbmd0aCB8IChhdHRyID0gYXR0cnNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG9iai5hdHRyW2F0dHIubm9kZU5hbWVdID0gYXR0ci5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZDogZCBpbiBwYXRoXHJcbiAgICAgKiBAcGFyYW0gc3RlcE51bTogbnVtYmVyIG9mIHN0ZXBzIChwb2ludHMpXHJcbiAgICAgKiBAcmVzdWx0OiBwb2ludHMgb24gcGF0aCAoY2FuIGRvIG1vcnBoaW4pXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkaXNjcmV0aXplUGF0aFRvUG50cyhkLCBzdGVwTnVtKSB7XHJcbiAgICAgICAgbGV0IHRtcFBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuICAgICAgICB0bXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgZCk7XHJcbiAgICAgICAgbGV0IHRtcFBhdGhMZW4gPSB0bXBQYXRoLmdldFRvdGFsTGVuZ3RoKCk7XHJcbiAgICAgICAgbGV0IHBhdGhTdGVwTGVuID0gdG1wUGF0aExlbiAvIHN0ZXBOdW07XHJcbiAgICAgICAgbGV0IGRpc2NyaXRQYXRoID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwTnVtOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRtcFBudCA9IHRtcFBhdGguZ2V0UG9pbnRBdExlbmd0aChwYXRoU3RlcExlbiAqIGkpO1xyXG4gICAgICAgICAgICBkaXNjcml0UGF0aC5wdXNoKFt0bXBQbnQueCwgdG1wUG50LnldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRpc2NyaXRQYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjaGVja0RTYW1lU2hhcGUoZDEsIGQyKSB7XHJcbiAgICAgICAgbGV0IHNhbWVTaGFwZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZDEgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkMiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IGQxQ21kcyA9IFtdLCBkMkNtZHMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGNtZFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1ttTWxMaEh2VmNDc1NxUXRUYUF6Wl1bXm1NbExoSHZWY0NzU3FRdFRhQXpaXSovZyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZDEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBkMSA9IGQxLnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21NbExoSHZWY0NzU3FRdFRhQXpaXSkvZywgJycpLnJlcGxhY2UoLyg/PD1bbU1sTGhIdlZjQ3NTcVF0VGFBXSlcXHMoPz0oXFxkfFstK10pKS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcsJyk7XHJcbiAgICAgICAgICAgICAgICBkMUNtZHMgPSBkMS5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQxIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGQxQ21kcyA9IGQxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGQyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgZDIgPSBkMi5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgICAgICAgICAgZDJDbWRzID0gZDIubWF0Y2goY21kUmVnRXhwKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkMiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBkMkNtZHMgPSBkMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9jaGVjayBpZiB0aGV5IGFyZSBvZiBzYW1lIHNoYXBlXHJcbiAgICAgICAgICAgIHNhbWVTaGFwZSA9IGQxQ21kcy5sZW5ndGggPT09IGQyQ21kcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChzYW1lU2hhcGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZDFDbWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQxQ21kTmFtZSA9IGQxQ21kc1tpXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQyQ21kTmFtZSA9IGQyQ21kc1tpXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQxQ21kTmFtZSAhPT0gZDJDbWROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVTaGFwZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCd1bmRlZmluZWQgZCBpbiBjaGVja0RTYW1lU2hhcGUhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzYW1lU2hhcGVcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmluZERTdGFydEVuZChjbWRzKSB7XHJcbiAgICAgICAgbGV0IHN0YXJ0WCA9IDAsIHN0YXJ0WSA9IDAsIHJlbGF0aXZlRW5kWCA9IDAsIHJlbGF0aXZlRW5kWSA9IDAsIGVuZFggPSAwLCBlbmRZID0gMDsvL2VuZFggPSBzdGFydFggKyByZWxhdGl2ZUVuZFhcclxuICAgICAgICBpZiAoY21kcykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNtZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjbWROYW1lID0gY21kc1tpXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbWRWYWx1ZXMgPSBjbWRzW2ldLnN1YnN0cmluZygxKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChjbWROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WCA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRZID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kWCA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kWSA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlRW5kWCA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVFbmRZID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kWCA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlRW5kWCA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFkgPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZFkgPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRYID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRZID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVFbmRYID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZFkgPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1s1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRYID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRZID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdxJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVFbmRYID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZFkgPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1szXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZFggPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1swXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUVuZFkgPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1sxXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3dyb25nIGQgaW4gZmluZERTdGFydEVuZCEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhcnRYOiBzdGFydFgsXHJcbiAgICAgICAgICAgIHN0YXJ0WTogc3RhcnRZLFxyXG4gICAgICAgICAgICBlbmRYOiBlbmRYLFxyXG4gICAgICAgICAgICBlbmRZOiBlbmRZLFxyXG4gICAgICAgICAgICByZWxhdGl2ZUVuZFg6IHJlbGF0aXZlRW5kWCxcclxuICAgICAgICAgICAgcmVsYXRpdmVFbmRZOiByZWxhdGl2ZUVuZFlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNoZWNrVmFsaWRPZmZzZXREQ21kKG9mZnNldFZhbCwgc2NhbGVWYWwsIG9yaVZhbCwgdGFyZ2V0VmFsKSB7XHJcbiAgICAgICAgY29uc3QgdGhyID0gMTtcclxuICAgICAgICByZXR1cm4gKE1hdGguYWJzKHRhcmdldFZhbCAtIG9mZnNldFZhbCkgPCB0aHIgfHwgTWF0aC5hYnMob3JpVmFsIC0gb2Zmc2V0VmFsKSA8IHRociB8fCBNYXRoLmFicyh0YXJnZXRWYWwgLSBzY2FsZVZhbCAtIG9mZnNldFZhbCkgPCB0aHIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2sgd2hldGhlciAyIGQgYXJlIHRoZSBzYW1lIHNoYXBlXHJcbiAgICAgKiBpZiBzYW1lIHNoYXBlOlxyXG4gICAgICogIC0gY2FsY3VsYXRlIGRpZmZYIGFuZCBkaWZmWSB1c2luZyB0aGUgZmlyc3QgTSBjb21tYW5kXHJcbiAgICAgKiAgLSBjYWxjdWxhdGUgc2NhbGVYIGFuZCBzY2FsZVkgdXNpbmcgdGhlIGRpZmYgb2YgdGhlIGVuZCBwb2ludCBvZiB0aGUgY29ycmVzb25kaW5nIGNvbW1hbmRcclxuICAgICAqIGlmIGRpZmZlcmVudCBzaGFwZXM6XHJcbiAgICAgKiAgLSBqdXN0IGNhbGN1bGF0ZSBkaWZmWCBhbmQgZGlmZlkgdXNpbmcgdGhlIGZpcnN0IE0gY29tbWFuZFxyXG4gICAgICogIC0gbW9ycGhpblxyXG4gICAgICogQHBhcmFtIHsqfSBvcmlEIFxyXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXREIFxyXG4gICAgICogQHBhcmFtIHsqfSB0cmFuc1R5cGU6IFxyXG4gICAgICogQHJlc3VsdDogdHJhbnNsYXRlIHggY29vcmQgb2YgTVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZFRyYW5zKGNoYXJ0SWR4LCBtYXJrSWQsIG9yaUQsIHRhcmdldEQsIHByZXZpb3VzVHJhbnMsIGFjdGlvbkpzb24pIHtcclxuICAgICAgICBjb25zdCB0cmFuc1R5cGUgPSBhY3Rpb25Kc29uLnR5cGU7XHJcbiAgICAgICAgbGV0IG1lcmdlVHlwZSA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uSnNvbi5tZXJnZVR5cGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIG1lcmdlVHlwZSA9IGFjdGlvbkpzb24ubWVyZ2VUeXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXJnZVR5cGVbMF0gPSAodHJhbnNUeXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zbGF0ZVggfHwgdHJhbnNUeXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zbGF0ZVhZIHx8IG1lcmdlVHlwZVswXSk7Ly90cmFuc2xhdGUgWFxyXG4gICAgICAgIG1lcmdlVHlwZVsxXSA9ICh0cmFuc1R5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWSB8fCB0cmFuc1R5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWFkgfHwgbWVyZ2VUeXBlWzFdKTsvL3RyYW5zbGF0ZSBZXHJcbiAgICAgICAgbWVyZ2VUeXBlWzJdID0gKHRyYW5zVHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5zY2FsZVggfHwgdHJhbnNUeXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWFkgfHwgbWVyZ2VUeXBlWzJdKTsvL3NjYWxlIFhcclxuICAgICAgICBtZXJnZVR5cGVbM10gPSAodHJhbnNUeXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWSB8fCB0cmFuc1R5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVYWSB8fCBtZXJnZVR5cGVbM10pOy8vc2NhbGUgWVxyXG4gICAgICAgIG1lcmdlVHlwZVs0XSA9ICh0cmFuc1R5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZGF0YUNoYW5nZSB8fCBtZXJnZVR5cGVbNF0pOy8vZGF0YSBjaGFuZ2VcclxuICAgICAgICBjb25zb2xlLmxvZygnY3VycmVudCBtYXJrIHN0YXR1czogJywgLi4ubWVyZ2VUeXBlLCBDaGFydFNwZWMuY2hhcnRzW2NoYXJ0SWR4XS5tYXJrRGF0dW0uZ2V0KG1hcmtJZCksIENoYXJ0U3BlYy5jaGFydHNbY2hhcnRJZHhdLnNjYWxlcywgQ2hhcnRTcGVjLmNoYXJ0c1tjaGFydElkeF0udmlzdWFsTWFwcGluZ3MpO1xyXG5cclxuICAgICAgICBjb25zdCBzY2FsZUxhc3RDaGFydCA9IENoYXJ0U3BlYy5jaGFydHNbY2hhcnRJZHggLSAxXS5zY2FsZXM7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVDdXJyZW50Q2hhcnQgPSBDaGFydFNwZWMuY2hhcnRzW2NoYXJ0SWR4XS5zY2FsZXM7XHJcbiAgICAgICAgY29uc3QgZGF0YUxhc3RDaGFydCA9IENoYXJ0U3BlYy5jaGFydHNbY2hhcnRJZHggLSAxXS5tYXJrRGF0dW0uZ2V0KG1hcmtJZCk7XHJcbiAgICAgICAgY29uc3QgZGF0YUN1cnJlbnRDaGFydCA9IENoYXJ0U3BlYy5jaGFydHNbY2hhcnRJZHhdLm1hcmtEYXR1bS5nZXQobWFya0lkKTtcclxuICAgICAgICBjb25zdCB2bSA9IENoYXJ0U3BlYy5jaGFydHNbY2hhcnRJZHhdLnZpc3VhbE1hcHBpbmdzOy8vVE9ETzogY2hlY2sgd2hldGhlciBuZWVkIHRvIHN1cHBvcnQgdmlzdWFsIG1hcHBpbmcgY2hhbmdlXHJcblxyXG4gICAgICAgIGxldCByZXN1bHRDbWQgPSAnJztcclxuICAgICAgICBpZiAodHlwZW9mIG9yaUQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0YXJnZXREICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBvcmlEID0gb3JpRC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgICAgICB0YXJnZXREID0gdGFyZ2V0RC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgICAgICBsZXQgY21kUmVnRXhwID0gbmV3IFJlZ0V4cCgvW21NbExoSHZWY0NzU3FRdFRhQXpaXVtebU1sTGhIdlZjQ3NTcVF0VGFBelpdKi9nKTtcclxuICAgICAgICAgICAgbGV0IG9yaUNtZHMgPSBvcmlELm1hdGNoKGNtZFJlZ0V4cCk7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRDbWRzID0gdGFyZ2V0RC5tYXRjaChjbWRSZWdFeHApO1xyXG5cclxuICAgICAgICAgICAgLy9jaGVjayBpZiB0aGV5IGFyZSBvZiBzYW1lIHNoYXBlXHJcbiAgICAgICAgICAgIGxldCBzYW1lU2hhcGUgPSB0aGlzLmNoZWNrRFNhbWVTaGFwZShvcmlDbWRzLCB0YXJnZXRDbWRzKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhbWUgc2hhcGU6ICcsIHNhbWVTaGFwZSwgb3JpQ21kcywgdGFyZ2V0Q21kcyk7XHJcbiAgICAgICAgICAgIGlmIChzYW1lU2hhcGUpIHsvL3RyYW5zbGF0ZSBhY2NvcmRpbmcgdG8gdHJhbnNsYXRlLCBzY2FsZSwgb3IgbW9ycGhpbiBhcyBzcGVjaWZpZWQgXHJcbiAgICAgICAgICAgICAgICAvL2NhbGN1bGF0ZSBkaWZmIGZvciBib3RoIHRyYW5zbGF0ZSBhbmQgc2NhbGVcclxuICAgICAgICAgICAgICAgIC8vIGxldCBkaWZmWCA9IDAsIGRpZmZZID0gMCwgZGlmZlNjYWxlWCA9IDAsIGRpZmZTY2FsZVkgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpU3RhcnRFbmQgPSB0aGlzLmZpbmREU3RhcnRFbmQob3JpQ21kcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRTdGFydEVuZCA9IHRoaXMuZmluZERTdGFydEVuZCh0YXJnZXRDbWRzKTtcclxuICAgICAgICAgICAgICAgIC8vIGRpZmZYID0gdGFyZ2V0U3RhcnRFbmQuc3RhcnRYIC0gb3JpU3RhcnRFbmQuc3RhcnRYO1xyXG4gICAgICAgICAgICAgICAgLy8gZGlmZlkgPSB0YXJnZXRTdGFydEVuZC5zdGFydFkgLSBvcmlTdGFydEVuZC5zdGFydFk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBvcmlTdGFydEVuZC5yZWxhdGl2ZUVuZFggIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0YXJnZXRTdGFydEVuZC5yZWxhdGl2ZUVuZFggIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZGlmZlNjYWxlWCA9IHRhcmdldFN0YXJ0RW5kLnJlbGF0aXZlRW5kWCAtIG9yaVN0YXJ0RW5kLnJlbGF0aXZlRW5kWDtcclxuICAgICAgICAgICAgICAgIC8vICAgICBkaWZmU2NhbGVZID0gdGFyZ2V0U3RhcnRFbmQucmVsYXRpdmVFbmRZIC0gb3JpU3RhcnRFbmQucmVsYXRpdmVFbmRZO1xyXG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBkaWZmU2NhbGVYID0gdGFyZ2V0U3RhcnRFbmQuZW5kWCAtIG9yaVN0YXJ0RW5kLmVuZFggLSBkaWZmWDtcclxuICAgICAgICAgICAgICAgIC8vICAgICBkaWZmU2NhbGVZID0gdGFyZ2V0U3RhcnRFbmQuZW5kWSAtIG9yaVN0YXJ0RW5kLmVuZFkgLSBkaWZmWTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2NhbGN1bGF0ZSBvZmZzZXQgWCBhbmQgWSBmb3IgdGhlIGVuZCBwb2ludCBpbiBlYWNoIGNvbW1hbmQgaW4gZCBcclxuICAgICAgICAgICAgICAgIGlmIChtZXJnZVR5cGVbM10pIHsvL3NjYWxlIHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNUcmFuc1syXSkgey8vZGF0YSBoYXMgY2hhbmdlZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmdlVHlwZVs0XSkgey8vZGF0YSBpcyBjaGFuZ2luZyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsvL2RhdGEgaXMgbm90IGNoYW5nZWQgbm9yIGNoYW5naW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXNlIGRhdGEgbGFzdCBjaGFydCBhbmQgc2NhbGUgdGhpcyBjaGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeVNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUN1cnJlbnRDaGFydC5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PT0gJ3ktc2NhbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeVNjYWxlID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2bS5nZXQoJ2hlaWdodCcpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YUF0dHIgPSB2bS5nZXQoJ2hlaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YVZhbCA9IGRhdGFMYXN0Q2hhcnRbZGF0YUF0dHJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbGFzdCBjaGFydCBhbmQgc2NhbGUgdGhpcyBjaGFydDogJywgZGF0YVZhbCwgeVNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZtLmdldCgneScpICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhYnNYT2Zmc2V0ID0gbWVyZ2VUeXBlWzBdID8gKHRhcmdldFN0YXJ0RW5kLnN0YXJ0WCAtIG9yaVN0YXJ0RW5kLnN0YXJ0WCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGFic1lPZmZzZXQgPSBtZXJnZVR5cGVbMV0gPyAodGFyZ2V0U3RhcnRFbmQuc3RhcnRZIC0gb3JpU3RhcnRFbmQuc3RhcnRZKSA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVYT2Zmc2V0ID0gbWVyZ2VUeXBlWzBdID8gKHRhcmdldFN0YXJ0RW5kLnJlbGF0aXZlRW5kWCAtIG9yaVN0YXJ0RW5kLnJlbGF0aXZlRW5kWCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlWU9mZnNldCA9IG1lcmdlVHlwZVsxXSA/ICh0YXJnZXRTdGFydEVuZC5yZWxhdGl2ZUVuZFkgLSBvcmlTdGFydEVuZC5yZWxhdGl2ZUVuZFkpIDogMDtcclxuICAgICAgICAgICAgICAgIC8vIGlmIChtZXJnZVR5cGVbMl0pIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBhYnNYT2Zmc2V0ICs9IGRpZmZTY2FsZVg7XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAvLyBpZiAobWVyZ2VUeXBlWzNdKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYWJzWU9mZnNldCArPSBkaWZmU2NhbGVZO1xyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaWZmIFhZOiAnLCBhYnNYT2Zmc2V0LCBhYnNZT2Zmc2V0LCAnZGlmZiByZWxhdGl2ZSBYWTogJywgcmVsYXRpdmVYT2Zmc2V0LCByZWxhdGl2ZVlPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ21lcmdlIHR5cGU6ICcsIGFjdGlvbkpzb24ubWVyZ2VUeXBlLCBtZXJnZVR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vYWRkIHRoZSBvZmZzZXQgdG8gdGhlIGNvbW1hbmRzXHJcbiAgICAgICAgICAgICAgICBpZiAob3JpQ21kcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZE5hbWVSZWNvcmQgPSBbXSwgY21kVmFsUmVjb3JkID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmlDbWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZE5hbWUgPSBvcmlDbWRzW2ldLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY21kVmFsdWUgPSBvcmlDbWRzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q21kVmFsdWUgPSB0YXJnZXRDbWRzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGNtZE5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtcyA9IGNtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXROdW1zID0gdGFyZ2V0Q21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY21kTmFtZVJlY29yZC5wdXNoKGNtZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wVmFsUmVjb3JkID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY21kTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbU9mZnNldFhWYWwgPSBwYXJzZUZsb2F0KG51bXNbMF0pICsgYWJzWE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtT2Zmc2V0WVZhbCA9IHBhcnNlRmxvYXQobnVtc1sxXSkgKyBhYnNZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1WYWxpZFggPSB0aGlzLmNoZWNrVmFsaWRPZmZzZXREQ21kKG1PZmZzZXRYVmFsLCAwLCBwYXJzZUZsb2F0KG51bXNbMF0pLCBwYXJzZUZsb2F0KHRhcmdldE51bXNbMF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtVmFsaWRZID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZChtT2Zmc2V0WVZhbCwgMCwgcGFyc2VGbG9hdChudW1zWzFdKSwgcGFyc2VGbG9hdCh0YXJnZXROdW1zWzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChtVmFsaWRYID8gbU9mZnNldFhWYWwgOiB0YXJnZXROdW1zWzBdKSArICcsJyArIChtVmFsaWRZID8gbU9mZnNldFlWYWwgOiB0YXJnZXROdW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWxSZWNvcmQucHVzaChtVmFsaWRYID8gbU9mZnNldFhWYWwgOiB0YXJnZXROdW1zWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWxSZWNvcmQucHVzaChtVmFsaWRZID8gbU9mZnNldFlWYWwgOiB0YXJnZXROdW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGxPZmZzZXRYVmFsID0gcGFyc2VGbG9hdChudW1zWzBdKSArIGFic1hPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBsT2Zmc2V0WVZhbCA9IHBhcnNlRmxvYXQobnVtc1sxXSkgKyBhYnNZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgbFZhbGlkWCA9IHRoaXMuY2hlY2tWYWxpZE9mZnNldERDbWQobE9mZnNldFhWYWwsIDAsIHBhcnNlRmxvYXQobnVtc1swXSksIHBhcnNlRmxvYXQodGFyZ2V0TnVtc1swXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgbFZhbGlkWSA9IHRoaXMuY2hlY2tWYWxpZE9mZnNldERDbWQobE9mZnNldFlWYWwsIDAsIHBhcnNlRmxvYXQobnVtc1sxXSksIHBhcnNlRmxvYXQodGFyZ2V0TnVtc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChsVmFsaWRYID8gbE9mZnNldFhWYWwgOiB0YXJnZXROdW1zWzBdKSArICcsJyArIChsVmFsaWRZID8gbE9mZnNldFlWYWwgOiB0YXJnZXROdW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRtcFZhbFJlY29yZC5wdXNoKG1WYWxpZFggPyBtT2Zmc2V0WFZhbCA6IHRhcmdldE51bXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG1wVmFsUmVjb3JkLnB1c2gobVZhbGlkWSA/IG1PZmZzZXRZVmFsIDogdGFyZ2V0TnVtc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbHJPZmZzZXRYVmFsID0gcGFyc2VGbG9hdChudW1zWzBdKSArIHJlbGF0aXZlWE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsck9mZnNldFlWYWwgPSBwYXJzZUZsb2F0KG51bXNbMV0pICsgcmVsYXRpdmVZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxyVmFsaWRYID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZChsck9mZnNldFhWYWwsIGRpZmZTY2FsZVgsIHBhcnNlRmxvYXQobnVtc1swXSksIHBhcnNlRmxvYXQodGFyZ2V0TnVtc1swXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxyVmFsaWRZID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZChsck9mZnNldFlWYWwsIGRpZmZTY2FsZVksIHBhcnNlRmxvYXQobnVtc1sxXSksIHBhcnNlRmxvYXQodGFyZ2V0TnVtc1sxXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdENtZCArPSAobHJWYWxpZFggPyBsck9mZnNldFhWYWwgOiB0YXJnZXROdW1zWzBdKSArICcsJyArIChsclZhbGlkWSA/IGxyT2Zmc2V0WVZhbCA6IHRhcmdldE51bXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFZhbFJlY29yZC5wdXNoKGxyVmFsaWRYID8gbHJPZmZzZXRYVmFsIDogdGFyZ2V0TnVtc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVmFsUmVjb3JkLnB1c2gobHJWYWxpZFkgPyBsck9mZnNldFlWYWwgOiB0YXJnZXROdW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGVwID0gY21kTmFtZSA9PT0gJ0MnID8gMyA6IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtcy5mb3JFYWNoKChudW0sIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc09mZnNldFZhbCA9IDAsIHNTY2FsZVZhbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggJSAyID09PSAwKSB7Ly94XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzU2NhbGVWYWwgPSBkaWZmU2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCFtZXJnZVR5cGVbMl0pIHsvL25vdCBzY2FsaW5nIFhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNPZmZzZXRWYWwgPSBwYXJzZUZsb2F0KG51bSkgKyBhYnNYT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBzT2Zmc2V0VmFsID0gcGFyc2VGbG9hdChudW0pICsgKDEgKyBpZHggLyAyKSAqIGFic1hPZmZzZXQgLyBzdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNTY2FsZVZhbCA9ICgxICsgaWR4IC8gMikgKiBkaWZmU2NhbGVYIC8gc3RlcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNTY2FsZVZhbCA9IGRpZmZTY2FsZVk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoIW1lcmdlVHlwZVszXSkgey8vbm90IHNjYWxpbmcgWVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc09mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIGFic1lPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHNPZmZzZXRWYWwgPSBwYXJzZUZsb2F0KG51bSkgKyAoMSArIE1hdGguZmxvb3IoaWR4IC8gMikpICogYWJzWU9mZnNldCAvIHN0ZXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgc1NjYWxlVmFsID0gKDEgKyBNYXRoLmZsb29yKGlkeCAvIDIpKSAqIGFic1lPZmZzZXQgLyBzdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNWYWxpZFggPSB0aGlzLmNoZWNrVmFsaWRPZmZzZXREQ21kKHNPZmZzZXRWYWwsIDAsIHBhcnNlRmxvYXQobnVtKSwgcGFyc2VGbG9hdCh0YXJnZXROdW1zW2lkeF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChzVmFsaWRYID8gc09mZnNldFZhbCA6IHRhcmdldE51bXNbaWR4XSkgKyAoaWR4ID09PSBudW1zLmxlbmd0aCAtIDEgPyAnJyA6ICcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFZhbFJlY29yZC5wdXNoKHNWYWxpZFggPyBzT2Zmc2V0VmFsIDogdGFyZ2V0TnVtc1tpZHhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdxJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ZXAyID0gY21kTmFtZSA9PT0gJ2MnID8gMyA6IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtcy5mb3JFYWNoKChudW0sIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3JPZmZzZXRWYWwgPSAwLCBzclNjYWxlVmFsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyT2Zmc2V0VmFsID0gcGFyc2VGbG9hdChudW0pICsgKDEgKyBpZHggLyAyKSAqIHJlbGF0aXZlWE9mZnNldCAvIHN0ZXAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3JTY2FsZVZhbCA9ICgxICsgaWR4IC8gMikgKiByZWxhdGl2ZVhPZmZzZXQgLyBzdGVwMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyT2Zmc2V0VmFsID0gcGFyc2VGbG9hdChudW0pICsgKDEgKyBNYXRoLmZsb29yKGlkeCAvIDIpKSAqIHJlbGF0aXZlWU9mZnNldCAvIHN0ZXAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3JTY2FsZVZhbCA9ICgxICsgTWF0aC5mbG9vcihpZHggLyAyKSkgKiByZWxhdGl2ZVlPZmZzZXQgLyBzdGVwMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzclZhbGlkWCA9IHRoaXMuY2hlY2tWYWxpZE9mZnNldERDbWQoc3JPZmZzZXRWYWwsIDAsIHBhcnNlRmxvYXQobnVtKSwgcGFyc2VGbG9hdCh0YXJnZXROdW1zW2lkeF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChzclZhbGlkWCA/IHNyT2Zmc2V0VmFsIDogdGFyZ2V0TnVtc1tpZHhdKSArIChpZHggPT09IG51bXMubGVuZ3RoIC0gMSA/ICcnIDogJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVmFsUmVjb3JkLnB1c2goc3JWYWxpZFggPyBzck9mZnNldFZhbCA6IHRhcmdldE51bXNbaWR4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhPZmZzZXRYVmFsID0gcGFyc2VGbG9hdChjbWRWYWx1ZSkgKyBhYnNYT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhWYWxpZFggPSB0aGlzLmNoZWNrVmFsaWRPZmZzZXREQ21kKGhPZmZzZXRYVmFsLCAwLCBwYXJzZUZsb2F0KGNtZFZhbHVlKSwgcGFyc2VGbG9hdCh0YXJnZXRDbWRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdENtZCArPSAoaFZhbGlkWCA/IGhPZmZzZXRYVmFsIDogdGFyZ2V0Q21kVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFZhbFJlY29yZC5wdXNoKGhWYWxpZFggPyBoT2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhyT2Zmc2V0WFZhbCA9IHBhcnNlRmxvYXQoY21kVmFsdWUpICsgcmVsYXRpdmVYT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhyVmFsaWRYID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZChock9mZnNldFhWYWwsIDAsIHBhcnNlRmxvYXQoY21kVmFsdWUpLCBwYXJzZUZsb2F0KHRhcmdldENtZFZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChoclZhbGlkWCA/IGhyT2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWxSZWNvcmQucHVzaChoclZhbGlkWCA/IGhyT2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZPZmZzZXRYVmFsID0gcGFyc2VGbG9hdChjbWRWYWx1ZSkgKyBhYnNZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZWYWxpZFggPSB0aGlzLmNoZWNrVmFsaWRPZmZzZXREQ21kKHZPZmZzZXRYVmFsLCAwLCBwYXJzZUZsb2F0KGNtZFZhbHVlKSwgcGFyc2VGbG9hdCh0YXJnZXRDbWRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdENtZCArPSAodlZhbGlkWCA/IHZPZmZzZXRYVmFsIDogdGFyZ2V0Q21kVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFZhbFJlY29yZC5wdXNoKHZWYWxpZFggPyB2T2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZyT2Zmc2V0WFZhbCA9IHBhcnNlRmxvYXQoY21kVmFsdWUpICsgcmVsYXRpdmVZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZyVmFsaWRYID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZCh2ck9mZnNldFhWYWwsIDAsIHBhcnNlRmxvYXQoY21kVmFsdWUpLCBwYXJzZUZsb2F0KHRhcmdldENtZFZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9ICh2clZhbGlkWCA/IHZyT2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWxSZWNvcmQucHVzaCh2clZhbGlkWCA/IHZyT2Zmc2V0WFZhbCA6IHRhcmdldENtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bXMuZm9yRWFjaCgobnVtLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFPZmZzZXRWYWwgPSAwOy8vLCBhU2NhbGVWYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhU2NhbGVWYWwgPSBkaWZmU2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIGFic1hPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhU2NhbGVWYWwgPSBkaWZmU2NhbGVZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIGFic1lPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBpZiAoaWR4ID09PSAwICYmIG1lcmdlVHlwZVsyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYU9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIChkaWZmU2NhbGVYIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAoaWR4ID09PSAxICYmIG1lcmdlVHlwZVszXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYU9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIChkaWZmU2NhbGVZIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhVmFsaWRYID0gdGhpcy5jaGVja1ZhbGlkT2Zmc2V0RENtZChhT2Zmc2V0VmFsLCAwLCBwYXJzZUZsb2F0KG51bSksIHBhcnNlRmxvYXQodGFyZ2V0TnVtc1tpZHhdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdENtZCArPSAoYVZhbGlkWCA/IGFPZmZzZXRWYWwgOiB0YXJnZXROdW1zW2lkeF0pICsgKGlkeCA9PT0gbnVtcy5sZW5ndGggLSAxID8gJycgOiAnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWxSZWNvcmQucHVzaChhVmFsaWRYID8gYU9mZnNldFZhbCA6IHRhcmdldE51bXNbaWR4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bXMuZm9yRWFjaCgobnVtLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyT2Zmc2V0VmFsID0gMDsvLywgYXJTY2FsZVZhbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyU2NhbGVWYWwgPSBkaWZmU2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJPZmZzZXRWYWwgPSBwYXJzZUZsb2F0KG51bSkgKyByZWxhdGl2ZVhPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhclNjYWxlVmFsID0gZGlmZlNjYWxlWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyT2Zmc2V0VmFsID0gcGFyc2VGbG9hdChudW0pICsgcmVsYXRpdmVZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgaWYgKGlkeCA9PT0gMCAmJiBtZXJnZVR5cGVbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFyT2Zmc2V0VmFsID0gcGFyc2VGbG9hdChudW0pICsgKGRpZmZTY2FsZVggLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmIChpZHggPT09IDEgJiYgbWVyZ2VUeXBlWzNdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBhck9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKSArIChkaWZmU2NhbGVZIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhck9mZnNldFZhbCA9IHBhcnNlRmxvYXQobnVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhclZhbGlkWCA9IHRoaXMuY2hlY2tWYWxpZE9mZnNldERDbWQoYXJPZmZzZXRWYWwsIDAsIHBhcnNlRmxvYXQobnVtKSwgcGFyc2VGbG9hdCh0YXJnZXROdW1zW2lkeF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IChhclZhbGlkWCA/IGFyT2Zmc2V0VmFsIDogdGFyZ2V0TnVtc1tpZHhdKSArIChpZHggPT09IG51bXMubGVuZ3RoIC0gMSA/ICcnIDogJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVmFsUmVjb3JkLnB1c2goYXJWYWxpZFggPyBhck9mZnNldFZhbCA6IHRhcmdldE51bXNbaWR4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0Q21kICs9IGNtZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFZhbFJlY29yZC5wdXNoKGNtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY21kTmFtZS50b0xvd2VyQ2FzZSgpID09PSAneicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOy8vcmVtb3ZlIHJlZHVuZGVudCAnWidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWVSZWNvcmQucHVzaChjbWROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZFZhbFJlY29yZC5wdXNoKHRtcFZhbFJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7Ly90cmFuc2xhdGUgYWNjb3JkaW5nIHRvIHRyYW5zbGF0ZSwgbW9ycGhpbiBhcyBzcGVjaWZpZWRcclxuICAgICAgICAgICAgICAgIC8vVE9ETzogbWFyayB0eXBlIGNoYW5nZSB0cmFuc2l0aW9uIHN0YWdpbmcgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCd1bmRlZmluZWQgZCBpbiBkVHJhbnMhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXREO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0RPTShvYmopIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlLCBub2RlVHlwZSA9IG9iai5ub2RlVHlwZTtcclxuICAgICAgICBzd2l0Y2ggKG5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMTogLy9FTEVNRU5UX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgb2JqLnRhZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZXMgPSBvYmouYXR0ciB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBhdHRyOyBpIDwgT2JqZWN0LmtleXMoYXR0cmlidXRlcykubGVuZ3RoIHwgKGF0dHIgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKVtpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyVmFsdWUgPSB0eXBlb2YgYXR0cmlidXRlc1thdHRyXSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeShhdHRyaWJ1dGVzW2F0dHJdLCBudWxsLCAwKSA6IGF0dHJpYnV0ZXNbYXR0cl07XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBhdHRyLCBhdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzogLy9URVhUX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvYmoubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDg6IC8vQ09NTUVOVF9OT0RFXHJcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChvYmoubm9kZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDk6IC8vRE9DVU1FTlRfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxMDogLy9ET0NVTUVOVF9UWVBFX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVEb2N1bWVudFR5cGUob2JqLm5vZGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDExOiAvL0RPQ1VNRU5UX0ZSQUdNRU5UX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IG9iaiBBIHBhcnNlZCBzdmcganNvbiBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkaXNjcmV0aXplUGF0aChvYmopIHtcclxuICAgICAgICAvLyBub3JtYWxpemUgYXR0cmlidXRlc1xyXG4gICAgICAgIGlmIChvYmoudGFnTmFtZSAhPT0gJ3BhdGgnKSByZXR1cm4gbnVsbFxyXG4gICAgICAgIGxldCBhdHRyID0gb2JqLmF0dHIgfHwge31cclxuICAgICAgICBpZiAoIWF0dHIuZCkgcmV0dXJuIG51bGxcclxuICAgICAgICByZXR1cm4gdGhpcy5kaXNjcmV0aXplRChhdHRyLmQsIGF0dHIuZmlsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRpc2NyZXRpemVEKGQsIGZpbGxDb2xvcikge1xyXG4gICAgICAgIGxldCByZXN1bHRHcm91cCA9IFtdLFxyXG4gICAgICAgICAgICByZWcgPSAvW01tTGxIaFZ2WnpDY1NzUXFUdEFhXVteTW1MbEhoVnZaekNjU3NRcVR0QWFdKi9naSxcclxuICAgICAgICAgICAgZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgd2hpbGUgKChncm91cCA9IHJlZy5leGVjKGQpKSkge1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gcmVzdWx0R3JvdXAucmVkdWNlKChwLCBjKSA9PiBwICsgYy5sZW5ndGgsIDApO1xyXG4gICAgICAgICAgICByZXN1bHRHcm91cC5wdXNoKGQuc2xpY2Uob2Zmc2V0LCBncm91cC5pbmRleCkpO1xyXG4gICAgICAgICAgICByZXN1bHRHcm91cC5wdXNoKGdyb3VwWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdEdyb3VwXHJcbiAgICAgICAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IHguc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IHhcclxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMSlcclxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoL1sgLF0vKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIobiA9PiBuLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKG4gPT4gcGFyc2VGbG9hdChuKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZCA/IHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgIH0gOiBudWxsO1xyXG4gICAgICAgICAgICB9KS5maWx0ZXIoeCA9PiB4KVxyXG4gICAgICAgIC8vIHBvbHlsaW5lIHN0eWxlIHBhdGhcclxuICAgICAgICBpZiAocmVzdWx0LmV2ZXJ5KHggPT4gJ01tTGxIaFZ2Jy5pbmNsdWRlcyh4LmNvbW1hbmQpKSAmJiAhQ2FuaXNVdGlsLmNvbnZlcnRDb2xvcihmaWxsQ29sb3IpKSB7XHJcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IFtdXHJcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbnVsbFxyXG4gICAgICAgICAgICBsZXQgdmFsaWQgPSB0cnVlXHJcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICBpZiAoeC5jb21tYW5kID09PSAnTScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0geC5wYXJhbWV0ZXJzLnNsaWNlKC0yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2KSByZXR1cm4gdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgaWYgKHguY29tbWFuZCA9PT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHByZXYubWFwKCh2LCBpKSA9PiB2ICsgeC5wYXJhbWV0ZXJzW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0UG9pbnQgPSBwcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50ID0geC5jb21tYW5kID09PSB4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA/IHByZXYuc2xpY2UoKSA6IFswLCAwXVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHNlY29uZFBvaW50Lm1hcCgodiwgaSkgPT4gdiArIHgucGFyYW1ldGVyc1tpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdoJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnRbMF0gKz0geC5wYXJhbWV0ZXJzWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50WzFdID0gZmlyc3RQb2ludFsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludFsxXSArPSB4LnBhcmFtZXRlcnNbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnRbMF0gPSBmaXJzdFBvaW50WzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2Vjb25kUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKFtmaXJzdFBvaW50LCBzZWNvbmRQb2ludF0pXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHNlY29uZFBvaW50XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaWYgKHZhbGlkKSByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVzJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmVzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcGllIHN0eWxlIHBhdGhcclxuICAgICAgICBpZiAocmVzdWx0LmV2ZXJ5KHggPT4gJ01tTGxBYVp6Jy5pbmNsdWRlcyh4LmNvbW1hbmQpKSAmJiByZXN1bHQuZmlsdGVyKHggPT4geC5jb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09ICdhJykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBjaXJjbGVzID0gW11cclxuICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsXHJcbiAgICAgICAgICAgIGxldCB2YWxpZCA9IHRydWVcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm5cclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IHgucGFyYW1ldGVycy5zbGljZSgtMilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghcHJldikgcmV0dXJuIHZhbGlkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ3onKSByZXR1cm5cclxuICAgICAgICAgICAgICAgIGxldCBmaXJzdFBvaW50ID0gcHJldixcclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHguY29tbWFuZC50b0xvd2VyQ2FzZSgpID09PSB4LmNvbW1hbmQgPyBwcmV2LnNsaWNlKCkgOiBbMCwgMF1cclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXYgPSBzZWNvbmRQb2ludC5tYXAoKHYsIGkpID0+IHYgKyB4LnBhcmFtZXRlcnNbaV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWNvbmRQb2ludCA9IHNlY29uZFBvaW50Lm1hcCgodiwgaSkgPT4gdiArIHgucGFyYW1ldGVyc1tpICsgNV0pXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wID0gQ2FuaXNVdGlsLnN2Z0FyY1RvQ2VudGVyUGFyYW0uYXBwbHkobnVsbCwgZmlyc3RQb2ludC5jb25jYXQoeC5wYXJhbWV0ZXJzLnNsaWNlKDAsIDUpKS5jb25jYXQoc2Vjb25kUG9pbnQpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odG1wLmN4KSAmJiAhaXNOYU4odG1wLmN5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRtcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcng6IHgucGFyYW1ldGVyc1swXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnk6IHgucGFyYW1ldGVyc1sxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlOiB4LnBhcmFtZXRlcnNbMl1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJldiA9IHNlY29uZFBvaW50XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmIChjaXJjbGVzLmxlbmd0aCA8PSAwIHx8ICFjaXJjbGVzLmV2ZXJ5KHggPT4gWydjeCcsICdjeSddLnJlZHVjZSgocCwgYykgPT4gcCArIE1hdGguYWJzKHhbY10gLSBjaXJjbGVzWzBdW2NdKSwgMCkgPCAxZS0xKSkgdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjID0gY2lyY2xlcy5yZWR1Y2UoKHAsIGMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXApIHJldHVybiBjXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMucnggKyBjLnJ5ID4gcC5yeCArIHAucnkpIHJldHVybiBjXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBcclxuICAgICAgICAgICAgICAgIH0sIG51bGwpXHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0clJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGllcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjeDogYy5jeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3k6IGMuY3ksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGMuc3RhcnRBbmdsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQW5nbGU6IGMuZW5kQW5nbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb2Nrd2lzZTogYy5jbG9ja3dpc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogY2lyY2xlcy5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ4OiB4LnJ4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ5OiB4LnJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZTogeC5yb3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0clJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvdGhlciB1bmhhbmRsZWQgc3R5bGUgcGF0aFxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJhZGlhbih1eCwgdXksIHZ4LCB2eSkge1xyXG4gICAgICAgIHZhciBkb3QgPSB1eCAqIHZ4ICsgdXkgKiB2eTtcclxuICAgICAgICB2YXIgbW9kID0gTWF0aC5zcXJ0KCh1eCAqIHV4ICsgdXkgKiB1eSkgKiAodnggKiB2eCArIHZ5ICogdnkpKTtcclxuICAgICAgICB2YXIgcmFkID0gTWF0aC5hY29zKGRvdCAvIG1vZCk7XHJcbiAgICAgICAgaWYgKHV4ICogdnkgLSB1eSAqIHZ4IDwgMC4wKSB7XHJcbiAgICAgICAgICAgIHJhZCA9IC1yYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHN2Z0FyY1RvQ2VudGVyUGFyYW0oeDEsIHkxLCByeCwgcnksIHBoaSwgZkEsIGZTLCB4MiwgeTIpIHtcclxuICAgICAgICB2YXIgY3gsIGN5LCBzdGFydEFuZ2xlLCBkZWx0YUFuZ2xlLCBlbmRBbmdsZTtcclxuICAgICAgICB2YXIgUEl4MiA9IE1hdGguUEkgKiAyLjA7XHJcblxyXG4gICAgICAgIGlmIChyeCA8IDApIHtcclxuICAgICAgICAgICAgcnggPSAtcng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyeSA8IDApIHtcclxuICAgICAgICAgICAgcnkgPSAtcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIChyeCA9PSAwLjAgfHwgcnkgPT0gMC4wKSB7IC8vIGludmFsaWQgYXJndW1lbnRzXHJcbiAgICAgICAgLy8gICAgIHRocm93IEVycm9yKCdyeCBhbmQgcnkgY2FuIG5vdCBiZSAwJyk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB2YXIgc19waGkgPSBNYXRoLnNpbihwaGkpO1xyXG4gICAgICAgIHZhciBjX3BoaSA9IE1hdGguY29zKHBoaSk7XHJcbiAgICAgICAgdmFyIGhkX3ggPSAoeDEgLSB4MikgLyAyLjA7IC8vIGhhbGYgZGlmZiBvZiB4XHJcbiAgICAgICAgdmFyIGhkX3kgPSAoeTEgLSB5MikgLyAyLjA7IC8vIGhhbGYgZGlmZiBvZiB5XHJcbiAgICAgICAgdmFyIGhzX3ggPSAoeDEgKyB4MikgLyAyLjA7IC8vIGhhbGYgc3VtIG9mIHhcclxuICAgICAgICB2YXIgaHNfeSA9ICh5MSArIHkyKSAvIDIuMDsgLy8gaGFsZiBzdW0gb2YgeVxyXG5cclxuICAgICAgICAvLyBGNi41LjFcclxuICAgICAgICB2YXIgeDFfID0gY19waGkgKiBoZF94ICsgc19waGkgKiBoZF95O1xyXG4gICAgICAgIHZhciB5MV8gPSBjX3BoaSAqIGhkX3kgLSBzX3BoaSAqIGhkX3g7XHJcblxyXG4gICAgICAgIC8vIEYuNi42IENvcnJlY3Rpb24gb2Ygb3V0LW9mLXJhbmdlIHJhZGlpXHJcbiAgICAgICAgLy8gICBTdGVwIDM6IEVuc3VyZSByYWRpaSBhcmUgbGFyZ2UgZW5vdWdoXHJcbiAgICAgICAgdmFyIGxhbWJkYSA9ICh4MV8gKiB4MV8pIC8gKHJ4ICogcngpICsgKHkxXyAqIHkxXykgLyAocnkgKiByeSk7XHJcbiAgICAgICAgaWYgKGxhbWJkYSA+IDEpIHtcclxuICAgICAgICAgICAgcnggPSByeCAqIE1hdGguc3FydChsYW1iZGEpO1xyXG4gICAgICAgICAgICByeSA9IHJ5ICogTWF0aC5zcXJ0KGxhbWJkYSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcnhyeSA9IHJ4ICogcnk7XHJcbiAgICAgICAgdmFyIHJ4eTFfID0gcnggKiB5MV87XHJcbiAgICAgICAgdmFyIHJ5eDFfID0gcnkgKiB4MV87XHJcbiAgICAgICAgdmFyIHN1bV9vZl9zcSA9IHJ4eTFfICogcnh5MV8gKyByeXgxXyAqIHJ5eDFfOyAvLyBzdW0gb2Ygc3F1YXJlXHJcbiAgICAgICAgLy8gaWYgKCFzdW1fb2Zfc3EpIHtcclxuICAgICAgICAvLyAgICAgdGhyb3cgRXJyb3IoJ3N0YXJ0IHBvaW50IGNhbiBub3QgYmUgc2FtZSBhcyBlbmQgcG9pbnQnKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgdmFyIGNvZSA9IE1hdGguc3FydChNYXRoLmFicygocnhyeSAqIHJ4cnkgLSBzdW1fb2Zfc3EpIC8gc3VtX29mX3NxKSk7XHJcbiAgICAgICAgaWYgKGZBID09IGZTKSB7XHJcbiAgICAgICAgICAgIGNvZSA9IC1jb2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGNi41LjJcclxuICAgICAgICB2YXIgY3hfID0gY29lICogcnh5MV8gLyByeTtcclxuICAgICAgICB2YXIgY3lfID0gLWNvZSAqIHJ5eDFfIC8gcng7XHJcblxyXG4gICAgICAgIC8vIEY2LjUuM1xyXG4gICAgICAgIGN4ID0gY19waGkgKiBjeF8gLSBzX3BoaSAqIGN5XyArIGhzX3g7XHJcbiAgICAgICAgY3kgPSBzX3BoaSAqIGN4XyArIGNfcGhpICogY3lfICsgaHNfeTtcclxuXHJcbiAgICAgICAgdmFyIHhjcjEgPSAoeDFfIC0gY3hfKSAvIHJ4O1xyXG4gICAgICAgIHZhciB4Y3IyID0gKHgxXyArIGN4XykgLyByeDtcclxuICAgICAgICB2YXIgeWNyMSA9ICh5MV8gLSBjeV8pIC8gcnk7XHJcbiAgICAgICAgdmFyIHljcjIgPSAoeTFfICsgY3lfKSAvIHJ5O1xyXG5cclxuICAgICAgICAvLyBGNi41LjVcclxuICAgICAgICBzdGFydEFuZ2xlID0gQ2FuaXNVdGlsLnJhZGlhbigxLjAsIDAuMCwgeGNyMSwgeWNyMSk7XHJcblxyXG4gICAgICAgIC8vIEY2LjUuNlxyXG4gICAgICAgIGRlbHRhQW5nbGUgPSBDYW5pc1V0aWwucmFkaWFuKHhjcjEsIHljcjEsIC14Y3IyLCAteWNyMik7XHJcbiAgICAgICAgd2hpbGUgKGRlbHRhQW5nbGUgPiBQSXgyKSB7XHJcbiAgICAgICAgICAgIGRlbHRhQW5nbGUgLT0gUEl4MjtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGRlbHRhQW5nbGUgPCAwLjApIHtcclxuICAgICAgICAgICAgZGVsdGFBbmdsZSArPSBQSXgyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZlMgPT0gZmFsc2UgfHwgZlMgPT0gMCkge1xyXG4gICAgICAgICAgICBkZWx0YUFuZ2xlIC09IFBJeDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGRlbHRhQW5nbGU7XHJcbiAgICAgICAgd2hpbGUgKGVuZEFuZ2xlID4gUEl4Mikge1xyXG4gICAgICAgICAgICBlbmRBbmdsZSAtPSBQSXgyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoZW5kQW5nbGUgPCAwLjApIHtcclxuICAgICAgICAgICAgZW5kQW5nbGUgKz0gUEl4MjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvdXRwdXRPYmogPSB7XHJcbiAgICAgICAgICAgIC8qIGN4LCBjeSwgc3RhcnRBbmdsZSwgZGVsdGFBbmdsZSAqL1xyXG4gICAgICAgICAgICBjeCxcclxuICAgICAgICAgICAgY3ksXHJcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUsXHJcbiAgICAgICAgICAgIGRlbHRhQW5nbGUsXHJcbiAgICAgICAgICAgIGVuZEFuZ2xlLFxyXG4gICAgICAgICAgICBjbG9ja3dpc2U6IChmUyA9PSB0cnVlIHx8IGZTID09IDEpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0T2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb252ZXJ0Q29sb3Ioc3RyLCBmTW9kZSwgdE1vZGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHJldHVybiBzdHJcclxuICAgICAgICBpZiAoc3RyID09PSAnbm9uZScpIHJldHVybiBudWxsXHJcbiAgICAgICAgc3RyID0gc3RyLnRyaW0oKVxyXG4gICAgICAgIGxldCBtciA9IG51bGxcclxuICAgICAgICBpZiAodE1vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0TW9kZSA9IGZNb2RlXHJcbiAgICAgICAgICAgIGlmIChzdHIuc3RhcnRzV2l0aCgnIycpKSB7XHJcbiAgICAgICAgICAgICAgICBmTW9kZSA9ICdoZXgnXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyLnN0YXJ0c1dpdGgoJ3JnYicpKSB7XHJcbiAgICAgICAgICAgICAgICBmTW9kZSA9ICdyZ2InXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXNzdW1lIHVzZXIgaW5wdXQgaXMgdmFsaWRcclxuICAgICAgICBzd2l0Y2ggKGZNb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JnYic6XHJcbiAgICAgICAgICAgICAgICBtciA9IHN0ci5zcGxpdCgnKCcpWzFdLnNwbGl0KCcsJykubWFwKHggPT4gcGFyc2VGbG9hdCh4KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ2hleCc6XHJcbiAgICAgICAgICAgICAgICBtciA9IHN0ci5zbGljZSgxKS5tYXRjaCgvLnsxLDJ9L2cpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSlcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJcclxuICAgICAgICB9XHJcbiAgICAgICAgbXIgPSBtci5zbGljZSgwLCAzKVxyXG4gICAgICAgIHN3aXRjaCAodE1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaGV4JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnIycgKyBtci5tYXAoeCA9PiB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKVxyXG4gICAgICAgICAgICBjYXNlICdyZ2InOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGByZ2IoJHttci5qb2luKCcsJyl9KWBcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBvbGFyVG9DYXJ0ZXNpYW4oY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBhbmdsZUluUmFkaWFucykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IE1hdGgucm91bmQoKGNlbnRlclggKyAocmFkaXVzICogTWF0aC5jb3MoYW5nbGVJblJhZGlhbnMpKSkgKiAxMDApIC8gMTAwLFxyXG4gICAgICAgICAgICB5OiBNYXRoLnJvdW5kKChjZW50ZXJZICsgKHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlSW5SYWRpYW5zKSkpICogMTAwKSAvIDEwMFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBhcmMoeCwgeSwgaW5uZXJSYWRpdXMsIG91dHRlclJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICAgICAgICBzdGFydEFuZ2xlID0gc3RhcnRBbmdsZSA8IDAgPyBzdGFydEFuZ2xlICsgMiAqIE1hdGguUEkgOiBzdGFydEFuZ2xlO1xyXG4gICAgICAgIGVuZEFuZ2xlID0gZW5kQW5nbGUgPCAwIHx8IHN0YXJ0QW5nbGUgPiBlbmRBbmdsZSA/IGVuZEFuZ2xlICsgMiAqIE1hdGguUEkgOiBlbmRBbmdsZTtcclxuXHJcbiAgICAgICAgLy90byBnZW5lcmF0ZSBjb3ZlciwgbWFrZSB0aGUgY292ZXIgYSBsaXR0bGUgYmlnZ2VyXHJcbiAgICAgICAgaW5uZXJSYWRpdXMgPSBpbm5lclJhZGl1cyA9PT0gMCA/IDAgOiBpbm5lclJhZGl1cyAtIDE7XHJcbiAgICAgICAgb3V0dGVyUmFkaXVzICs9IDE7XHJcblxyXG4gICAgICAgIGxldCBsYXJnZUFyY0ZsYWcgPSBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSA/IDAgOiAxO1xyXG5cclxuICAgICAgICBsZXQgc3RhcnQxID0gQ2FuaXNVdGlsLnBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgb3V0dGVyUmFkaXVzLCBlbmRBbmdsZSk7XHJcbiAgICAgICAgbGV0IGVuZDEgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBvdXR0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUpO1xyXG4gICAgICAgIGxldCBzdGFydDIgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUpO1xyXG4gICAgICAgIGxldCBlbmQyID0gQ2FuaXNVdGlsLnBvbGFyVG9DYXJ0ZXNpYW4oeCwgeSwgaW5uZXJSYWRpdXMsIHN0YXJ0QW5nbGUpO1xyXG5cclxuICAgICAgICBsZXQgaXNSaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHN0YXJ0MS54ID09PSBlbmQxLnggJiYgc3RhcnQxLnkgPT09IGVuZDEueSkgey8vdGhpcyBpcyBhIHJpbmdcclxuICAgICAgICAgICAgZW5kMS55IC09IDE7XHJcbiAgICAgICAgICAgIGVuZDIueSAtPSAxO1xyXG4gICAgICAgICAgICBpc1JpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGQ7XHJcbiAgICAgICAgaWYgKCFpc1JpbmcpIHtcclxuICAgICAgICAgICAgZCA9IFtcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgc3RhcnQxLngsIHN0YXJ0MS55LFxyXG4gICAgICAgICAgICAgICAgXCJBXCIgKyBvdXR0ZXJSYWRpdXMsIG91dHRlclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAwLCBlbmQxLngsIGVuZDEueSxcclxuICAgICAgICAgICAgICAgIFwiTFwiICsgZW5kMi54LCBlbmQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAxLCBzdGFydDIueCwgc3RhcnQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkxcIiArIHN0YXJ0MS54LCBzdGFydDEueSArIFwiWlwiXHJcbiAgICAgICAgICAgIF0uam9pbihcIixcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZCA9IFtcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgc3RhcnQxLngsIHN0YXJ0MS55LFxyXG4gICAgICAgICAgICAgICAgXCJBXCIgKyBvdXR0ZXJSYWRpdXMsIG91dHRlclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAxLCBlbmQxLngsIGVuZDEueSxcclxuICAgICAgICAgICAgICAgIFwiTVwiICsgZW5kMi54LCBlbmQyLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cywgMCwgbGFyZ2VBcmNGbGFnLCAwLCBzdGFydDIueCwgc3RhcnQyLnkgKyBcIlpcIlxyXG4gICAgICAgICAgICBdLmpvaW4oXCIsXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogdHVybiBhIGRvbSBub2RlIHRvIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtET019IGRvbU5vZGUgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkb21Ob2RlVG9TdHJpbmcoZG9tTm9kZSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGRvbU5vZGUpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHR1cm4gYSBzdHJpbmcgdG8gZG9tIG5vZGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzdHJUb0RvbU5vZGUoc3RyKSB7XHJcbiAgICAgICAgbGV0IHRtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRtcERpdi5pbm5lckhUTUwgPSBzdHIudHJpbSgpO1xyXG4gICAgICAgIGxldCBkb20gPSB0bXBEaXYuZmlyc3RDaGlsZDtcclxuICAgICAgICByZXR1cm4gZG9tO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc1NoYXBlKHQsIHR4LCB0eSkge1xyXG4gICAgICAgIGlmICh0LnRhZ05hbWUgIT09ICdwYXRoJykge1xyXG4gICAgICAgICAgICBsZXQgaGFzUG9zaSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ3gnKSB8fCB0LmdldEF0dHJpYnV0ZSgneScpKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNQb3NpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd4JywgdC5nZXRBdHRyaWJ1dGUoJ3gnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3gnKSkgKyB0eCA6IHR4KTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd5JywgdC5nZXRBdHRyaWJ1dGUoJ3knKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3knKSkgKyB0eSA6IHR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ3gxJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3kxJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3gyJykgfHwgdC5nZXRBdHRyaWJ1dGUoJ3kyJykpIHtcclxuICAgICAgICAgICAgICAgIGhhc1Bvc2kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gxJywgdC5nZXRBdHRyaWJ1dGUoJ3gxJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd4MScpKSArIHR4IDogdHgpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gyJywgdC5nZXRBdHRyaWJ1dGUoJ3gyJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd4MicpKSArIHR4IDogdHgpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3kxJywgdC5nZXRBdHRyaWJ1dGUoJ3kxJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd5MScpKSArIHR5IDogdHkpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3kyJywgdC5nZXRBdHRyaWJ1dGUoJ3kyJykgPyBwYXJzZUZsb2F0KHQuZ2V0QXR0cmlidXRlKCd5MicpKSArIHR5IDogdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgnY3gnKSB8fCB0LmdldEF0dHJpYnV0ZSgnY3knKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzUG9zaSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3gnLCB0LmdldEF0dHJpYnV0ZSgnY3gnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ2N4JykpICsgdHggOiB0eCk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3knLCB0LmdldEF0dHJpYnV0ZSgnY3knKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ2N5JykpICsgdHkgOiB0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFoYXNQb3NpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC50YWdOYW1lID09PSAnY2lyY2xlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdjeCcsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnY3knLCB0eSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd4JywgdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd5JywgdHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHQuZ2V0QXR0cmlidXRlKCdkJykpIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRDbWQgPSBDYW5pc1V0aWwuc2V0UGF0aERWYWx1ZSh0LmdldEF0dHJpYnV0ZSgnZCcpLCBmYWxzZSwgdHgsIHR5KTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdkJywgcmVzdWx0Q21kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0LnNldEF0dHJpYnV0ZSgndHJhbnNYJywgdHgpO1xyXG4gICAgICAgIHQuc2V0QXR0cmlidXRlKCd0cmFuc1knLCB0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNwbGl0UGF0aChkKSB7XHJcbiAgICAgICAgbGV0IHRtcFBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuICAgICAgICB0bXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgZCk7XHJcbiAgICAgICAgbGV0IHRtcFBhdGhMZW4gPSB0bXBQYXRoLmdldFRvdGFsTGVuZ3RoKCk7XHJcbiAgICAgICAgbGV0IHN0ZXBOdW0gPSAzMDAsIHBhdGhTdGVwTGVuID0gdG1wUGF0aExlbiAvIHN0ZXBOdW07XHJcbiAgICAgICAgbGV0IGRpc2NyaXRQYXRoID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwTnVtOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRtcFBudCA9IHRtcFBhdGguZ2V0UG9pbnRBdExlbmd0aChwYXRoU3RlcExlbiAqIGkpO1xyXG4gICAgICAgICAgICBpID09PSAwID8gZGlzY3JpdFBhdGggKz0gJ00nICsgdG1wUG50LnggKyAnLCcgKyB0bXBQbnQueSA6IGRpc2NyaXRQYXRoICs9ICdMJyArIHRtcFBudC54ICsgJywnICsgdG1wUG50LnlcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlzY3JpdFBhdGggKz0gJ1onO1xyXG4gICAgICAgIHJldHVybiBkaXNjcml0UGF0aDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGF0aE9mZnNldChkKSB7XHJcbiAgICAgICAgY29uc3QgcGF0aERhdGEgPSBkXHJcbiAgICAgICAgY29uc3QgcGF0aERhdGFTZXJpZXMgPSBwYXJzZVNWRyhwYXRoRGF0YSlcclxuICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcclxuICAgICAgICBsZXQgcGF0aERhdGFXaXRoVHlwZTtcclxuICAgICAgICBwYXRoRGF0YVNlcmllcy5mb3JFYWNoKHBhdGhEYXRhSXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGF0aERhdGFJdGVtLmNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIubW92ZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdMJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5saW5lVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5ob3Jpem9udGFsVG8ocGF0aERhdGFXaXRoVHlwZS54KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmhvcml6b250YWxUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueClcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci52ZXJ0aWNhbFRvKHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci52ZXJ0aWNhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmN1YmljQmV6aWVyQ3VydmVUbyhwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdxJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5hcmNUbyhwYXRoRGF0YVdpdGhUeXBlLnJ4LCBwYXRoRGF0YVdpdGhUeXBlLnJ5LCBwYXRoRGF0YVdpdGhUeXBlLnhBeGlzUm90YXRpb24sIH5+cGF0aERhdGFXaXRoVHlwZS5sYXJnZUFyYywgfn5wYXRoRGF0YVdpdGhUeXBlLnN3ZWVwLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5hcmNUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdaJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocGF0aERhdGFJdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIHRoaXMgcGF0aCBjb21tYW5kLicpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiBbcGF0aE1ha2VyLm9mZnNldFgsIHBhdGhNYWtlci5vZmZzZXRZXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJhbnNEVG9Mb3R0aWVTcGVjKGQpIHtcclxuICAgICAgICBsZXQgcG9zaU9mZnNldCA9IHRoaXMuZ2V0UGF0aE9mZnNldChkKTtcclxuICAgICAgICBsZXQgcG0gPSBuZXcgUGF0aE1ha2VyKGQpO1xyXG4gICAgICAgIHBtLnVuaWZvcm0oKTtcclxuICAgICAgICByZXR1cm4gW3Bvc2lPZmZzZXQsIHBtXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGF0aFRvU2hhcGUoZCkge1xyXG4gICAgICAgIGQgPSBkLnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21NbExoSHZWY0NzU3FRdFRhQXpaXSkvZywgJycpLnJlcGxhY2UoLyg/PD1bbU1sTGhIdlZjQ3NTcVF0VGFBXSlcXHMoPz0oXFxkfFstK10pKS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcsJyk7XHJcbiAgICAgICAgbGV0IGNtZFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1ttTWxMaEh2VmNDc1NxUXRUYUF6Wl1bXm1NbExoSHZWY0NzU3FRdFRhQXpaXSovZyk7XHJcbiAgICAgICAgbGV0IGNtZHMgPSBkLm1hdGNoKGNtZFJlZ0V4cCk7XHJcbiAgICAgICAgaWYgKGNtZHMpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNSZWN0ID0gdGhpcy5wYXRoSXNSZWN0KGNtZHMpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncGF0aCBpcyByZWN0OiAnLCBpc1JlY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcGF0aElzUmVjdChjbWRzKSB7XHJcbiAgICAgICAgbGV0IHcgPSAwLCBoID0gMDtcclxuXHJcbiAgICAgICAgLy9yZW1vdmUgdGhlIGxhc3QgeiBjb21tYW5kXHJcbiAgICAgICAgaWYgKGNtZHNbY21kcy5sZW5ndGggLSAxXS50b0xvd2VyQ2FzZSgpID09PSAneicpIHtcclxuICAgICAgICAgICAgY21kcy5zcGxpY2UoY21kcy5sZW5ndGggLSAxLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbWRzLmxlbmd0aCAhPT0gNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB3LCBoXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBtdlZhbHVlcyA9IGNtZHNbMF0uc3Vic3RyaW5nKDEpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Q21kRGlyZWN0ID0gJycsIHRyYW5zQ29vcmRzID0geyB4OiAwLCB5OiAwIH07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY21kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21kTmFtZSA9IGNtZHNbaV0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21kVmFsdWUgPSBjbWRzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgIGlmIChjbWROYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd2JyAmJiAobGFzdENtZERpcmVjdCA9PT0gJ2gnIHx8IGxhc3RDbWREaXJlY3QgPT09ICcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDbWREaXJlY3QgPSAndic7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNDb29yZHMueSA9IGNtZE5hbWUgPT09ICdWJyA/IHBhcnNlRmxvYXQoY21kVmFsdWUpIDogcGFyc2VGbG9hdChjbWRWYWx1ZSkgKyB0cmFuc0Nvb3Jkcy55O1xyXG4gICAgICAgICAgICAgICAgICAgIGggPSBjbWROYW1lID09PSAnVicgPyAocGFyc2VGbG9hdChjbWRWYWx1ZSkgLSBwYXJzZUZsb2F0KG12VmFsdWVzWzFdKSkgOiBwYXJzZUZsb2F0KGNtZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY21kTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaCcgJiYgKGxhc3RDbWREaXJlY3QgPT09ICd2JyB8fCBsYXN0Q21kRGlyZWN0ID09PSAnJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q21kRGlyZWN0ID0gJ2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zQ29vcmRzLnggPSBjbWROYW1lID09PSAnSCcgPyBwYXJzZUZsb2F0KGNtZFZhbHVlKSA6IHBhcnNlRmxvYXQoY21kVmFsdWUpICsgdHJhbnNDb29yZHMueDtcclxuICAgICAgICAgICAgICAgICAgICB3ID0gY21kTmFtZSA9PT0gJ0gnID8gKHBhcnNlRmxvYXQoY21kVmFsdWUpIC0gcGFyc2VGbG9hdChtdlZhbHVlc1sxXSkpIDogcGFyc2VGbG9hdChjbWRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNtZE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2wnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpZmZYID0gMCwgZGlmZlkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbWROYW1lID09PSAnTCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY21kVmFsdWVzID0gY21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZlggPSBwYXJzZUZsb2F0KGNtZFZhbHVlc1swXSkgLSBwYXJzZUZsb2F0KG12VmFsdWVzWzBdKSAtIHRyYW5zQ29vcmRzLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZZID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMV0pIC0gcGFyc2VGbG9hdChtdlZhbHVlc1sxXSkgLSB0cmFuc0Nvb3Jkcy55O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtZFZhbHVlcyA9IGNtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZYID0gcGFyc2VGbG9hdChjbWRWYWx1ZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmWSA9IHBhcnNlRmxvYXQoY21kVmFsdWVzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWZmWCAhPT0gMCAmJiBkaWZmWSAhPT0gMCkgey8vbm90IHZlcnRpY2FsIG9yIGhvcml6b250YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdywgaF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmWCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdENtZERpcmVjdCA9PT0gJ2gnIHx8IGxhc3RDbWREaXJlY3QgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q21kRGlyZWN0ID0gJ3YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNDb29yZHMueSArPSBkaWZmWSArIHRyYW5zQ29vcmRzLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB3LCBoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Q21kRGlyZWN0ID09PSAndicgfHwgbGFzdENtZERpcmVjdCA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDbWREaXJlY3QgPSAnaCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc0Nvb3Jkcy54ICs9IGRpZmZYICsgdHJhbnNDb29yZHMueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHcsIGhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHcgPSBkaWZmWDtcclxuICAgICAgICAgICAgICAgICAgICBoID0gZGlmZlk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRyYW5zQ29vcmRzLnggIT09IDAgfHwgdHJhbnNDb29yZHMueSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgdywgaF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFt0cnVlLCBNYXRoLmFicyh3KSwgTWF0aC5hYnMoaCldO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXRQYXRoRFZhbHVlKGQsIHJlc2V0LCB0eCA9IDAsIHR5ID0gMCwgZGlmZkNtZHMgPSBuZXcgTWFwKCkpIHtcclxuICAgICAgICBkID0gZC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGxldCBjbWRSZWdFeHAgPSBuZXcgUmVnRXhwKC9bbU1sTGhIdlZjQ3NTcVF0VGFBelpdW15tTWxMaEh2VmNDc1NxUXRUYUF6Wl0qL2cpO1xyXG4gICAgICAgIGxldCByZXN1bHRDbWQgPSAnJztcclxuICAgICAgICBsZXQgY21kcyA9IGQubWF0Y2goY21kUmVnRXhwKTtcclxuICAgICAgICBpZiAoY21kcykge1xyXG4gICAgICAgICAgICAvL2dldCB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG1vdmUgY21kIGlmIHRoZXJlIGlzIG9uZVxyXG4gICAgICAgICAgICBsZXQgZmlyc3RDbWROYW1lID0gY21kc1swXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgIGxldCByZXNldFggPSAnMCcsIHJlc2V0WSA9ICcwJztcclxuICAgICAgICAgICAgaWYgKGZpcnN0Q21kTmFtZSA9PT0gJ20nIHx8IGZpcnN0Q21kTmFtZSA9PT0gJ00nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RDbWRWYWx1ZXMgPSBjbWRzWzBdLnN1YnN0cmluZygxKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRYID0gZmlyc3RDbWRWYWx1ZXNbMF07XHJcbiAgICAgICAgICAgICAgICByZXNldFkgPSBmaXJzdENtZFZhbHVlc1sxXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY21kTmFtZSA9IGNtZHNbaV0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNtZFZhbHVlID0gY21kc1tpXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gY21kTmFtZTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY21kTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGNtZFZhbHVlLCByZXNldCwgcmVzZXRYLCB0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGNtZFZhbHVlLCByZXNldCwgJzAnLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCByZXNldFksIHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCAnMCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdUJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bXMgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgbnVtcy5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSAlIDIgPT09IDApIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIG51bXNbbmldLCByZXNldCwgcmVzZXRYLCB0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgbnVtc1tuaV0sIHJlc2V0LCByZXNldFksIHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSAhPT0gbnVtcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0JzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdxJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG51bXMyID0gY21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbmkgPSAwOyBuaSA8IG51bXMyLmxlbmd0aDsgbmkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBudW1zMltuaV0sIHJlc2V0LCAnMCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5pICE9PSBudW1zMi5sZW5ndGggLSAxICYmIG51bXMyW25pXSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW51bXMgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgYW51bXMubGVuZ3RoOyBuaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmkgPT09IGFudW1zLmxlbmd0aCAtIDIpIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGFudW1zW25pXSwgcmVzZXQsIHBhcnNlRmxvYXQocmVzZXRYKSArIDEsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuaSA9PT0gYW51bXMubGVuZ3RoIC0gMSkgey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXNbbmldLCByZXNldCwgcGFyc2VGbG9hdChyZXNldFkpICsgMSwgdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gYW51bXNbbmldICsgJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW51bXMyID0gY21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbmkgPSAwOyBuaSA8IGFudW1zMi5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSA9PT0gYW51bXMyLmxlbmd0aCAtIDIpIHsvL3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIGFudW1zMltuaV0sIHJlc2V0LCAnMScsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5pID09PSBhbnVtczIubGVuZ3RoIC0gMSkgey8veVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXMyW25pXSwgcmVzZXQsICcxJywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSBhbnVtczJbbmldICsgJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiAoZC5jaGFyQXQoZC5sZW5ndGggLSAxKSA9PT0gJ3onIHx8IGQuY2hhckF0KGQubGVuZ3RoIC0gMSkgPT09ICdaJykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmVzdWx0Q21kICs9ICdaJztcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Q21kO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBjdXJyZW50Q21kSWR4LCBjbWROYW1lLCBjbWRWYWx1ZSwgcmVzZXQsIHJlc2V0VmFsLCB0VmFsKSB7XHJcbiAgICAgICAgY21kTmFtZSA9IGNtZE5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAocmVzZXQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWZmQ21kcy5nZXQoY21kTmFtZSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlmZkNtZElkeHMgPSBkaWZmQ21kcy5nZXQoY21kTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkaWZmQ21kSWR4cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWZmQ21kSWR4c1tqXS5jbWRJZHggPT09IGN1cnJlbnRDbWRJZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IHJlc2V0VmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGNtZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGNtZFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNtZFZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAocGFyc2VGbG9hdChjbWRWYWx1ZSkgKyB0VmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Q21kO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZG9pbmcgdHJhbnNpdGlvbiB3aXRoIHBhdGhcclxuICAgICAqIEBwYXJhbSB7Kn0gc3RhcnREIFxyXG4gICAgICogQHBhcmFtIHsqfSBlbmREIFxyXG4gICAgICogQHBhcmFtIHsqfSByYXRpbyBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbFRyYW5zRChzdGFydEQsIGVuZEQsIHJhdGlvLCBzdGFydERpc0QsIGVuZERpc0QpIHtcclxuICAgICAgICBzdGFydEQgPSBzdGFydEQucmVwbGFjZSgvKD88PVxcZClcXHMoPz1bbU1sTGhIdlZjQ3NTcVF0VGFBelpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttTWxMaEh2VmNDc1NxUXRUYUFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICBlbmREID0gZW5kRC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGxldCByZXN1bHRDbWQgPSAnJztcclxuICAgICAgICBpZiAocmF0aW8gPT09IDApIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kID0gc3RhcnREO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmF0aW8gPT09IDEpIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kID0gZW5kRDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3RhcnREaXNELmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gKGkgPT09IDAgPyAnTScgOiAnTCcpICsgKChlbmREaXNEW2ldWzBdIC0gc3RhcnREaXNEW2ldWzBdKSAqIHJhdGlvICsgc3RhcnREaXNEW2ldWzBdKSArICcsJyArICgoZW5kRGlzRFtpXVsxXSAtIHN0YXJ0RGlzRFtpXVsxXSkgKiByYXRpbyArIHN0YXJ0RGlzRFtpXVsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdGFydEQuY2hhckF0KHN0YXJ0RC5sZW5ndGggLSAxKSA9PT0gJ3onIHx8IHN0YXJ0RC5jaGFyQXQoc3RhcnRELmxlbmd0aCAtIDEpID09PSAnWicpIHtcclxuICAgICAgICAgICAgcmVzdWx0Q21kICs9ICdaJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdENtZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogc3RhcnRBbmdsZSBzaG91bGQgc21hbGxlciB0aGFuIGVuZEFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbVN0YXJ0QW5nbGUgc3RhcnQgc3RhdGUgb2Ygc3RhcnQgYW5nbGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tRW5kQW5nbGUgc3RhcnQgc3RhdGUgb2YgZW5kIGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9TdGFydEFuZ2xlIGVuZCBzdGF0ZSBvZiBzdGFydCBhbmdsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvRW5kQW5nbGUgZW5kIHN0YXRlIG9mIGVuZCBhbmdsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGlvIDAtMSBmbG9hdCBudW1iZXJcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb248bnVtYmVyLG51bWJlcixudW1iZXI+fSBpbnRlcnBvbGF0ZUZuIGN1c3RvbWl6ZSBpbnRlcnBvbGF0ZSBmdW5jdGlvbiwgaW5wdXQgaXMgKHN0YXJ0LCBlbmQsIHJhdGlvKSwgZGVmYXVsdCBpcyBsaW5lYXJcclxuICAgICAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSBbc3RhcnRBbmdsZSwgZW5kQW5nbGVdIG9mIGdpdmVuIHJhdGlvXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhcmNUcmFuc2l0aW9uKGZyb21TdGFydEFuZ2xlLCBmcm9tRW5kQW5nbGUsIHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSwgcmF0aW8sIGludGVycG9sYXRlRm4pIHtcclxuICAgICAgICBsZXQgdmFsaWRBbmdsZSA9IChzLCBlKSA9PiBlIDwgcyA/ICgoKSA9PiB7IHRocm93ICdzdGFydEFuZ2xlIHNob3VsZCBzbWFsbGVyIHRoYW4gZW5kQW5nbGUnIH0pKCkgOiBudWxsXHJcbiAgICAgICAgdmFsaWRBbmdsZShmcm9tU3RhcnRBbmdsZSwgZnJvbUVuZEFuZ2xlKVxyXG4gICAgICAgIHZhbGlkQW5nbGUodG9TdGFydEFuZ2xlLCB0b0VuZEFuZ2xlKVxyXG4gICAgICAgIGxldCBtaW5pbWFsQW5nbGUgPSAocywgZSkgPT4gZSAtIE1hdGguUEkgKiAyICogTWF0aC5mbG9vcigoZSAtIHMpIC8gTWF0aC5QSSAvIDIpXHJcbiAgICAgICAgLy8gdW5pZm9ybSBhbmdsZSBkb21haW4gd2l0aGluIDIqUElcclxuICAgICAgICBmcm9tRW5kQW5nbGUgPSBtaW5pbWFsQW5nbGUoZnJvbVN0YXJ0QW5nbGUsIGZyb21FbmRBbmdsZSlcclxuICAgICAgICB0b1N0YXJ0QW5nbGUgPSBtaW5pbWFsQW5nbGUoZnJvbVN0YXJ0QW5nbGUsIHRvU3RhcnRBbmdsZSlcclxuICAgICAgICB0b0VuZEFuZ2xlID0gbWluaW1hbEFuZ2xlKHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSlcclxuICAgICAgICAvLyBmaW5kIHRoZSBjbG9lc3QgZG9tYWluXHJcbiAgICAgICAgdG9TdGFydEFuZ2xlIC09IE1hdGguYWJzKHRvU3RhcnRBbmdsZSAtIGZyb21TdGFydEFuZ2xlKSArIE1hdGguYWJzKHRvRW5kQW5nbGUgLSBmcm9tRW5kQW5nbGUpIDwgMiAqIE1hdGguUEkgPyAwIDogTWF0aC5QSSAqIDJcclxuICAgICAgICB0b0VuZEFuZ2xlID0gbWluaW1hbEFuZ2xlKHRvU3RhcnRBbmdsZSwgdG9FbmRBbmdsZSlcclxuICAgICAgICBsZXQgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZUZuIHx8ICgocywgZSwgcikgPT4gciAqIChlIC0gcykgKyBzKVxyXG4gICAgICAgIHJldHVybiBbaW50ZXJwb2xhdGUoZnJvbVN0YXJ0QW5nbGUsIHRvU3RhcnRBbmdsZSwgcmF0aW8pLCBpbnRlcnBvbGF0ZShmcm9tRW5kQW5nbGUsIHRvRW5kQW5nbGUsIHJhdGlvKV1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmluZERpZmZDbWRzKG1hcmtTdGF0dXMpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIG1hcmtTdGF0dXMuZm9yRWFjaCgoc3RhdHVzQXJyLCBtYXJrSWQpID0+IHtcclxuICAgICAgICAgICAgbGV0IHRtcERSZWNvcmRlciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXR1c0Fyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0dXNBcnJbaV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRFJlY29yZGVyLnB1c2goIXN0YXR1c0FycltpXS5kID8gJ20wLDAnIDogc3RhdHVzQXJyW2ldLmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0bXBEUmVjb3JkZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgQ2FuaXNVdGlsLmNvbXBhcmVEKHRtcERSZWNvcmRlciwgcmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29tcGFyZUQoZEFyciwgcmVzdWx0KSB7XHJcbiAgICAgICAgbGV0IGNtZFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1ttbGh2Y3NxdGFdW15tbGh2Y3NxdGF6XSovZyk7XHJcbiAgICAgICAgbGV0IGZpcnN0RCA9IGRBcnJbMF07XHJcbiAgICAgICAgZmlyc3REID0gZmlyc3RELnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgZmlyc3REID0gZmlyc3RELnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21saHZjc3F0YXpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttbGh2Y3NxdGFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICBsZXQgZmlyc3REQ21kcyA9IGZpcnN0RC5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZEFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wRCA9IGRBcnJbaV07XHJcbiAgICAgICAgICAgIHRtcEQgPSB0bXBELnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIHRtcEQgPSB0bXBELnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21saHZjc3F0YXpdKS9nLCAnJykucmVwbGFjZSgvKD88PVttbGh2Y3NxdGFdKVxccyg/PShcXGR8Wy0rXSkpL2csICcnKS5yZXBsYWNlKC9cXHMvZywgJywnKTtcclxuICAgICAgICAgICAgbGV0IHRtcERDbWRzID0gdG1wRC5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpcnN0RENtZHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG1wRENtZHNbal0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNtZE5hbWUgPSBmaXJzdERDbWRzW2pdLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5nZXQoY21kTmFtZSkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoY21kTmFtZSwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmNtZElkeCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmRpZmZBdHRySWR4cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdERDbWRWYWx1ZSA9IGZpcnN0RENtZHNbal0uc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdERDbWRWYWx1ZXMgPSBmaXJzdERDbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgZmlyc3REQ21kVmFsdWVzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kaWZmQXR0cklkeHMucHVzaChtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdldChjbWROYW1lKS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbWROYW1lID0gdG1wRENtZHNbal0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBEQ21kVmFsdWUgPSB0bXBEQ21kc1tqXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpcnN0RENtZFZhbHVlID0gZmlyc3REQ21kc1tqXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRtcERDbWRWYWx1ZSAhPT0gZmlyc3REQ21kVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQuZ2V0KGNtZE5hbWUpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChjbWROYW1lLCBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouY21kSWR4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRpZmZBdHRySWR4cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRENtZFZhbHVlcyA9IHRtcERDbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3REQ21kVmFsdWVzID0gZmlyc3REQ21kVmFsdWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCB0bXBEQ21kVmFsdWVzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5mbG9vcihwYXJzZUZsb2F0KHRtcERDbWRWYWx1ZXNbbV0pICogMTAwMCkgIT09IE1hdGguZmxvb3IocGFyc2VGbG9hdChmaXJzdERDbWRWYWx1ZXNbbV0pICogMTAwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGlmZkF0dHJJZHhzLnB1c2gobSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIGhhdmUgYWxyZWFkeSBhZGRlZCB0aGlzIGNtZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFzRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IHJlc3VsdC5nZXQoY21kTmFtZSkubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZ2V0KGNtZE5hbWUpW21dLmNtZElkeCA9PT0gb2JqLmNtZElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5nZXQoY21kTmFtZSlbbV0uZGlmZkF0dHJJZHhzID0gWy4uLm5ldyBTZXQoWy4uLnJlc3VsdC5nZXQoY21kTmFtZSlbbV0uZGlmZkF0dHJJZHhzLCAuLi5vYmouZGlmZkF0dHJJZHhzXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdldChjbWROYW1lKS5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRUcmFuc2Zvcm1BdHRycyhkb20pIHtcclxuICAgICAgICBsZXQgdHIgPSBkb20uZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcclxuICAgICAgICBpZiAodHIpIHtcclxuICAgICAgICAgICAgdHIgPSB0ci5yZXBsYWNlKC90cmFuc2xhdGV8c2NhbGV8cm90YXRlfFxccy9nLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0gPT09ICcgJyA/ICcnIDogJ0AnICsgbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgvKF5AKil8KEAqJCkvZywgJycpLnNwbGl0KCdAJyk7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZVN0ciA9ICcnLCB0cmFuc1N0ciA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJbaV0uaW5kZXhPZigndHJhbnNsYXRlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyW2ldLmluZGV4T2YoJ3NjYWxlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRyYW5zUG9zaVN0ciA9IFsnMCcsICcwJ10sIHNjYWxlTnVtU3RyID0gJzEnO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNTdHIgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc1Bvc2lTdHIgPSB0cmFuc1N0ci5yZXBsYWNlKC90cmFuc2xhdGVcXCh8IHxcXCkvZywgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNjYWxlU3RyICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgc2NhbGVOdW1TdHIgPSBzY2FsZVN0ci5yZXBsYWNlKC9zY2FsZVxcKHwgfFxcKS9nLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHsgdHJhbnNOdW1zOiBbcGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMF0pLCBwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clsxXSldLCBzY2FsZU51bTogcGFyc2VGbG9hdChzY2FsZU51bVN0cikgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHJhbnNOdW1zOiBbMC4wLCAwLjBdLCBzY2FsZU51bTogMS4wIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjaGVjayBpZiB0aGUgaW5wdXQgcHJvcCBpcyBhIHZhbGlkIHByb3BlcnR5IG9mIHRoZSBpbnB1dCB0YWdcclxuICAgICAqIEBwYXJhbSB7Kn0gdGFnTmFtZSBcclxuICAgICAqIEBwYXJhbSB7Kn0gcHJvcE5hbWUgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjaGVja1ZhbGlkUHJvcCh0YWdOYW1lLCBwcm9wTmFtZSkge1xyXG4gICAgICAgIHN3aXRjaCAodGFnTmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlICdjaXJjbGUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICdjeCcsICdjeScsICdyJywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnZWxsaXBzZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ2N4JywgJ2N5JywgJ3J4JywgJ3J5JywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdocmVmJywgJ3hsaW5rOmhyZWYnLCAncHJlc2VydmVBc3BlY3RSYXRpbyddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAnbGluZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ3gxJywgJ3gyJywgJ3kxJywgJ3kyJywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAncGF0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ2QnLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdwb2x5Z29uJzpcclxuICAgICAgICAgICAgY2FzZSAncG9seWxpbmUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICdwb2ludHMnLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdyZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ29wYWNpdHknLCAneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdyeCcsICdyeScsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ2ZpbGwnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICd4JywgJ3knLCAnZHgnLCAnZHknLCAndGV4dENvbnRlbnQnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2sgaWYgYSBzdHJpbmcgY29udGFpbnMgaHRtbCB0YWdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNoZWNrSFRNTChzdHIpIHtcclxuICAgICAgICB2YXIgcmVnID0gLzxbXj5dKz4vZztcclxuICAgICAgICByZXR1cm4gcmVnLnRlc3Qoc3RyKTtcclxuICAgIH1cclxufVxyXG5cclxuQ2FuaXNVdGlsLmJhc2ljU2hhcGVzID0gbmV3IE1hcChbXHJcbiAgICBbJ3JlY3QnLCBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnLCAncngnLCAncnknXV0sXHJcbiAgICBbJ2NpcmNsZScsIFsnY3gnLCAnY3knLCAnciddXVxyXG5dKVxyXG5DYW5pc1V0aWwuY29sb3JOYW1lcyA9IG5ldyBNYXAoW1snYWxpY2VibHVlJywgJyNmMGY4ZmYnXSwgWydhbnRpcXVld2hpdGUnLCAnI2ZhZWJkNyddLCBbJ2FxdWEnLCAnIzAwZmZmZiddLCBbJ2FxdWFtYXJpbmUnLCAnIzdmZmZkNCddLCBbJ2F6dXJlJywgJyNmMGZmZmYnXSwgWydiZWlnZScsICcjZjVmNWRjJ10sIFsnYmlzcXVlJywgJyNmZmU0YzQnXSwgWydibGFjaycsICcjMDAwMDAwJ10sIFsnYmxhbmNoZWRhbG1vbmQnLCAnI2ZmZWJjZCddLCBbJ2JsdWUnLCAnIzAwMDBmZiddLCBbJ2JsdWV2aW9sZXQnLCAnIzhhMmJlMiddLCBbJ2Jyb3duJywgJyNhNTJhMmEnXSwgWydidXJseXdvb2QnLCAnI2RlYjg4NyddLCBbJ2NhZGV0Ymx1ZScsICcjNWY5ZWEwJ10sIFsnY2hhcnRyZXVzZScsICcjN2ZmZjAwJ10sIFsnY2hvY29sYXRlJywgJyNkMjY5MWUnXSwgWydjb3JhbCcsICcjZmY3ZjUwJ10sIFsnY29ybmZsb3dlcmJsdWUnLCAnIzY0OTVlZCddLCBbJ2Nvcm5zaWxrJywgJyNmZmY4ZGMnXSwgWydjcmltc29uJywgJyNkYzE0M2MnXSwgWydjeWFuJywgJyMwMGZmZmYnXSwgWydkYXJrYmx1ZScsICcjMDAwMDhiJ10sIFsnZGFya2N5YW4nLCAnIzAwOGI4YiddLCBbJ2Rhcmtnb2xkZW5yb2QnLCAnI2I4ODYwYiddLCBbJ2RhcmtncmF5JywgJyNhOWE5YTknXSwgWydkYXJrZ3JleScsICcjYTlhOWE5J10sIFsnZGFya2dyZWVuJywgJyMwMDY0MDAnXSwgWydkYXJra2hha2knLCAnI2JkYjc2YiddLCBbJ2RhcmttYWdlbnRhJywgJyM4YjAwOGInXSwgWydkYXJrb2xpdmVncmVlbicsICcjNTU2YjJmJ10sIFsnZGFya29yYW5nZScsICcjZmY4YzAwJ10sIFsnZGFya29yY2hpZCcsICcjOTkzMmNjJ10sIFsnZGFya3JlZCcsICcjOGIwMDAwJ10sIFsnZGFya3NhbG1vbicsICcjZTk5NjdhJ10sIFsnZGFya3NlYWdyZWVuJywgJyM4ZmJjOGYnXSwgWydkYXJrc2xhdGVibHVlJywgJyM0ODNkOGInXSwgWydkYXJrc2xhdGVncmF5JywgJyMyZjRmNGYnXSwgWydkYXJrc2xhdGVncmV5JywgJyMyZjRmNGYnXSwgWydkYXJrdHVycXVvaXNlJywgJyMwMGNlZDEnXSwgWydkYXJrdmlvbGV0JywgJyM5NDAwZDMnXSwgWydkZWVwcGluaycsICcjZmYxNDkzJ10sIFsnZGVlcHNreWJsdWUnLCAnIzAwYmZmZiddLCBbJ2RpbWdyYXknLCAnIzY5Njk2OSddLCBbJ2RpbWdyZXknLCAnIzY5Njk2OSddLCBbJ2RvZGdlcmJsdWUnLCAnIzFlOTBmZiddLCBbJ2ZpcmVicmljaycsICcjYjIyMjIyJ10sIFsnZmxvcmFsd2hpdGUnLCAnI2ZmZmFmMCddLCBbJ2ZvcmVzdGdyZWVuJywgJyMyMjhiMjInXSwgWydmdWNoc2lhJywgJyNmZjAwZmYnXSwgWydnYWluc2Jvcm8nLCAnI2RjZGNkYyddLCBbJ2dob3N0d2hpdGUnLCAnI2Y4ZjhmZiddLCBbJ2dvbGQnLCAnI2ZmZDcwMCddLCBbJ2dvbGRlbnJvZCcsICcjZGFhNTIwJ10sIFsnZ3JheScsICcjODA4MDgwJ10sIFsnZ3JleScsICcjODA4MDgwJ10sIFsnZ3JlZW4nLCAnIzAwODAwMCddLCBbJ2dyZWVueWVsbG93JywgJyNhZGZmMmYnXSwgWydob25leWRldycsICcjZjBmZmYwJ10sIFsnaG90cGluaycsICcjZmY2OWI0J10sIFsnaW5kaWFucmVkICcsICcjY2Q1YzVjJ10sIFsnaW5kaWdvICAnLCAnIzRiMDA4MiddLCBbJ2l2b3J5JywgJyNmZmZmZjAnXSwgWydraGFraScsICcjZjBlNjhjJ10sIFsnbGF2ZW5kZXInLCAnI2U2ZTZmYSddLCBbJ2xhdmVuZGVyYmx1c2gnLCAnI2ZmZjBmNSddLCBbJ2xhd25ncmVlbicsICcjN2NmYzAwJ10sIFsnbGVtb25jaGlmZm9uJywgJyNmZmZhY2QnXSwgWydsaWdodGJsdWUnLCAnI2FkZDhlNiddLCBbJ2xpZ2h0Y29yYWwnLCAnI2YwODA4MCddLCBbJ2xpZ2h0Y3lhbicsICcjZTBmZmZmJ10sIFsnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnLCAnI2ZhZmFkMiddLCBbJ2xpZ2h0Z3JheScsICcjZDNkM2QzJ10sIFsnbGlnaHRncmV5JywgJyNkM2QzZDMnXSwgWydsaWdodGdyZWVuJywgJyM5MGVlOTAnXSwgWydsaWdodHBpbmsnLCAnI2ZmYjZjMSddLCBbJ2xpZ2h0c2FsbW9uJywgJyNmZmEwN2EnXSwgWydsaWdodHNlYWdyZWVuJywgJyMyMGIyYWEnXSwgWydsaWdodHNreWJsdWUnLCAnIzg3Y2VmYSddLCBbJ2xpZ2h0c2xhdGVncmF5JywgJyM3Nzg4OTknXSwgWydsaWdodHNsYXRlZ3JleScsICcjNzc4ODk5J10sIFsnbGlnaHRzdGVlbGJsdWUnLCAnI2IwYzRkZSddLCBbJ2xpZ2h0eWVsbG93JywgJyNmZmZmZTAnXSwgWydsaW1lJywgJyMwMGZmMDAnXSwgWydsaW1lZ3JlZW4nLCAnIzMyY2QzMiddLCBbJ2xpbmVuJywgJyNmYWYwZTYnXSwgWydtYWdlbnRhJywgJyNmZjAwZmYnXSwgWydtYXJvb24nLCAnIzgwMDAwMCddLCBbJ21lZGl1bWFxdWFtYXJpbmUnLCAnIzY2Y2RhYSddLCBbJ21lZGl1bWJsdWUnLCAnIzAwMDBjZCddLCBbJ21lZGl1bW9yY2hpZCcsICcjYmE1NWQzJ10sIFsnbWVkaXVtcHVycGxlJywgJyM5MzcwZGInXSwgWydtZWRpdW1zZWFncmVlbicsICcjM2NiMzcxJ10sIFsnbWVkaXVtc2xhdGVibHVlJywgJyM3YjY4ZWUnXSwgWydtZWRpdW1zcHJpbmdncmVlbicsICcjMDBmYTlhJ10sIFsnbWVkaXVtdHVycXVvaXNlJywgJyM0OGQxY2MnXSwgWydtZWRpdW12aW9sZXRyZWQnLCAnI2M3MTU4NSddLCBbJ21pZG5pZ2h0Ymx1ZScsICcjMTkxOTcwJ10sIFsnbWludGNyZWFtJywgJyNmNWZmZmEnXSwgWydtaXN0eXJvc2UnLCAnI2ZmZTRlMSddLCBbJ21vY2Nhc2luJywgJyNmZmU0YjUnXSwgWyduYXZham93aGl0ZScsICcjZmZkZWFkJ10sIFsnbmF2eScsICcjMDAwMDgwJ10sIFsnb2xkbGFjZScsICcjZmRmNWU2J10sIFsnb2xpdmUnLCAnIzgwODAwMCddLCBbJ29saXZlZHJhYicsICcjNmI4ZTIzJ10sIFsnb3JhbmdlJywgJyNmZmE1MDAnXSwgWydvcmFuZ2VyZWQnLCAnI2ZmNDUwMCddLCBbJ29yY2hpZCcsICcjZGE3MGQ2J10sIFsncGFsZWdvbGRlbnJvZCcsICcjZWVlOGFhJ10sIFsncGFsZWdyZWVuJywgJyM5OGZiOTgnXSwgWydwYWxldHVycXVvaXNlJywgJyNhZmVlZWUnXSwgWydwYWxldmlvbGV0cmVkJywgJyNkYjcwOTMnXSwgWydwYXBheWF3aGlwJywgJyNmZmVmZDUnXSwgWydwZWFjaHB1ZmYnLCAnI2ZmZGFiOSddLCBbJ3BlcnUnLCAnI2NkODUzZiddLCBbJ3BpbmsnLCAnI2ZmYzBjYiddLCBbJ3BsdW0nLCAnI2RkYTBkZCddLCBbJ3Bvd2RlcmJsdWUnLCAnI2IwZTBlNiddLCBbJ3B1cnBsZScsICcjODAwMDgwJ10sIFsncmViZWNjYXB1cnBsZScsICcjNjYzMzk5J10sIFsncmVkJywgJyNmZjAwMDAnXSwgWydyb3N5YnJvd24nLCAnI2JjOGY4ZiddLCBbJ3JveWFsYmx1ZScsICcjNDE2OWUxJ10sIFsnc2FkZGxlYnJvd24nLCAnIzhiNDUxMyddLCBbJ3NhbG1vbicsICcjZmE4MDcyJ10sIFsnc2FuZHlicm93bicsICcjZjRhNDYwJ10sIFsnc2VhZ3JlZW4nLCAnIzJlOGI1NyddLCBbJ3NlYXNoZWxsJywgJyNmZmY1ZWUnXSwgWydzaWVubmEnLCAnI2EwNTIyZCddLCBbJ3NpbHZlcicsICcjYzBjMGMwJ10sIFsnc2t5Ymx1ZScsICcjODdjZWViJ10sIFsnc2xhdGVibHVlJywgJyM2YTVhY2QnXSwgWydzbGF0ZWdyYXknLCAnIzcwODA5MCddLCBbJ3NsYXRlZ3JleScsICcjNzA4MDkwJ10sIFsnc25vdycsICcjZmZmYWZhJ10sIFsnc3ByaW5nZ3JlZW4nLCAnIzAwZmY3ZiddLCBbJ3N0ZWVsYmx1ZScsICcjNDY4MmI0J10sIFsndGFuJywgJyNkMmI0OGMnXSwgWyd0ZWFsJywgJyMwMDgwODAnXSwgWyd0aGlzdGxlJywgJyNkOGJmZDgnXSwgWyd0b21hdG8nLCAnI2ZmNjM0NyddLCBbJ3R1cnF1b2lzZScsICcjNDBlMGQwJ10sIFsndmlvbGV0JywgJyNlZTgyZWUnXSwgWyd3aGVhdCcsICcjZjVkZWIzJ10sIFsnd2hpdGUnLCAnI2ZmZmZmZiddLCBbJ3doaXRlc21va2UnLCAnI2Y1ZjVmNSddLCBbJ3llbGxvdycsICcjZmZmZjAwJ10sIFsneWVsbG93Z3JlZW4nLCAnIzlhY2QzMiddXSlcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3cG9ydCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNoYXJ0V2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuY2hhcnRIZWlnaHQgPSAwO1xyXG4gICAgfVxyXG4gICAgc2V0Vmlld3BvcnQodywgaCkge1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aCA9IHc7XHJcbiAgICAgICAgdGhpcy5jaGFydEhlaWdodCA9IGg7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBc3NldFRlbXBsYXRlIHtcclxuICAgIGNvbnN0cnVjb3IodGFnTmFtZSwgdmlzdWFsUHJvcHMsIGFuaW1hdGVQcm9wcywgYm91bmRpbmdCb3gsIGpzTW92aW5MYXllcklkeCkge1xyXG4gICAgICAgIC8vdXNlIHRvIGNvbXBhcmVcclxuICAgICAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lO1xyXG4gICAgICAgIHRoaXMudmlzdWFsUHJvcHMgPSB2aXN1YWxQcm9wcztcclxuICAgICAgICB0aGlzLmFuaW1hdGVQcm9wcyA9IGFuaW1hdGVQcm9wcztcclxuICAgICAgICAvL3VzZSB0byBjYWxjdWxhdGUgb2Zmc2V0cyBhbmQgcmVmZXJlbmNlXHJcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94O1xyXG4gICAgICAgIHRoaXMuanNNb3ZpbkxheWVySWR4ID0ganNNb3ZpbkxheWVySWR4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29tcGFyZSB0aGUgbmV3IGFzc2V0IHRlbXBsYXRlIHdpdGggdGhlIGV4aXN0aW5nIHRlbXBhbHRlIFxyXG4gICAgICogQHBhcmFtIHsqfSBjYW5kaWRhdGVBdCA6IGNhbmRpZGF0ZSBhc3NldCB0ZW1wbGF0ZVxyXG4gICAgICogQHBhcmFtIHsqfSBhdCA6IGFzc2V0IHRlbXBsYXRlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjb21wYXJlVGVtcGxhdGUoY2FuZGlkYXRlQXQsIGF0KSB7XHJcbiAgICAgICAgaWYgKGNhbmRpZGF0ZUF0LnRhZ05hbWUgIT09IGF0LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuY29tcGFyZVZpc3VhbFByb3BzKGNhbmRpZGF0ZUF0LnZpc3VhbFByb3BzLCBhdC52aXN1YWxQcm9wcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29tcGFyZVZpc3VhbFByb3BzKHAxLCBwMikge1xyXG4gICAgICAgIGNvbnN0IHNhZmVQcm9wcyA9IFsneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdyJywgJ29wYWNpdHknLCAnZCddXHJcbiAgICAgICAgY29uc3QgYWxsS2V5cyA9IFsuLi5PYmplY3Qua2V5cyhwMSksIC4uLk9iamVjdC5rZXlzKHAyKV07XHJcbiAgICAgICAgY29uc3QgZGlmZmVyZW50S2V5cyA9IGFsbEtleXMuZmlsdGVyKChrKSA9PiB7XHJcbiAgICAgICAgICAgIHR5cGVvZiBwMVtrXSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHAyW2tdID09PSAndW5kZWZpbmVkJyB8fCBwMVtrXSAhPT0gcDJba107XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYgKGRpZmZlcmVudEtleXMuaW5jbHVkZXMoJ2QnKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVOdW1SZWdFeHAgPSBuZXcgUmVnRXhwKC9bMC05XFwuLFxcc10vZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBwMVsnZCddLnJlcGxhY2UocmVtb3ZlTnVtUmVnRXhwLCAnJykgPT09IHAyWydkJ10ucmVwbGFjZShyZW1vdmVOdW1SZWdFeHAsICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkaWZmZXJlbnRLZXlzLmV2ZXJ5KChrKSA9PiBzYWZlUHJvcHMuaW5kZXhPZihrKSA+PSAwKTtcclxuICAgIH1cclxufSIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJpbXBvcnQgeyBDYW5pc1V0aWwsIFZpZXdwb3J0IH0gZnJvbSBcIi4vdXRpbC9VdGlsXCI7XHJcbmltcG9ydCBGYWNldFNwZWMgZnJvbSBcIi4vRmFjZXRTcGVjXCI7XHJcbmltcG9ydCB7IGdsb2JhbFZhciB9IGZyb20gJy4vdXRpbC9HbG9iYWxWYXIuanMnO1xyXG5cclxuY2xhc3MgQ2hhcnRTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB0eXBlLCBzb3VyY2UpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2hhcnRQcmVQcm9jZXNzaW5nKGNoYXJ0U3BlY3MsIHN0YXR1cykge1xyXG4gICAgICAgIGxldCBpbnB1dFNwZWNzID0gW107XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydFNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dFNwZWMgPSBjaGFydFNwZWNzW2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0U3BlYy5zdGFydCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGlucHV0U3BlYy5lbmQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRJZHggPSBwYXJzZUludChpbnB1dFNwZWMuc3RhcnQpLCBlbmRJZHggPSBwYXJzZUludChpbnB1dFNwZWMuZW5kKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmRJZHggPCBzdGFydElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3Jvbmcgc3RhcnQgYW5kIGVuZCBjaGFydCBpbmRleC4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShpbnB1dFNwZWNzKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBCbG9ja3MgPSBpbnB1dFNwZWMuc291cmNlLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0TmFtZSA9IHR5cGVvZiBpbnB1dFNwZWMuaWQgPT09ICd1bmRlZmluZWQnID8gdG1wQmxvY2tzW3RtcEJsb2Nrcy5sZW5ndGggLSAxXSA6IGlucHV0U3BlYy5pZDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gc3RhcnRJZHg7IGogPD0gZW5kSWR4OyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTcGVjcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogY2hhcnROYW1lICsgaixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic291cmNlXCI6IGlucHV0U3BlYy5zb3VyY2UgKyBqICsgJy5kc3ZnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U3BlY3MucHVzaChpbnB1dFNwZWMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbaW5wdXRTcGVjcywgaGFzRXJyb3JdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsb2FkQ2hhcnRzKGNoYXJ0U3BlY3MsIGZhY2V0LCBzdGF0dXMpIHtcclxuICAgICAgICBsZXQgbmFtZUNoYXJ0cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBDaGFydFNwZWMuY2hhcnRzID0gW107XHJcbiAgICAgICAgbGV0IG51bGxDaGFydHMgPSBbXTtcclxuICAgICAgICBsZXQgZGVmYXVsdFdpZHRoID0gMDtcclxuICAgICAgICBsZXQgZGVmYXVsdEhlaWdodCA9IDA7XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydFNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFydFNwZWNzW2ldLnR5cGUgPT09IENoYXJ0U3BlYy5DSEFSVF9VUkwpIHsvL2xvYWQgY2hhcnQgd2l0aCB1cmxcclxuICAgICAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuICAgICAgICAgICAgICAgICAgICBva1N0YXR1cyA9IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID09PSBcImZpbGU6XCIgPyAwIDogMjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN2Z0NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgY2hhcnRTcGVjc1tpXS5zb3VyY2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9odG1sO2NoYXJzZXQ9dXRmLThcIik7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2VuZChudWxsKTtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSBva1N0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBEaXYuaW5uZXJIVE1MID0geGhyLnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBzdmdDb250ZW50ID0gdG1wRGl2LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2aWV3Qm94TnVtcyA9IHN2Z0NvbnRlbnQuZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0V2lkdGggPSBwYXJzZUZsb2F0KHZpZXdCb3hOdW1zWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SGVpZ2h0ID0gcGFyc2VGbG9hdCh2aWV3Qm94TnVtc1szXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0cy5wdXNoKG5ldyBDaGFydChzdmdDb250ZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUNoYXJ0cy5zZXQoY2hhcnRTcGVjc1tpXS5pZCwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVsbENoYXJ0cy51bnNoaWZ0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnXCJzb3VyY2VcIjonICsgY2hhcnRTcGVjc1tpXS5zb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdDYW4gbm90IGZpbmQgJyArIGNoYXJ0U3BlY3NbaV0uc291cmNlICsgJyAhIFBsZWFzZSBjaGVjayB0aGUgdXJsLicsIGVyclNwZWM6ICdcInNvdXJjZVwiOlwiJyArIGNoYXJ0U3BlY3NbaV0uc291cmNlLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndGVzdCBjaGFydCBzb3VyY2U6ICcsIGNoYXJ0U3BlY3NbaV0sIGNoYXJ0U3BlY3NbaV0uc291cmNlLCB0eXBlb2YgY2hhcnRTcGVjc1tpXS5zb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICB0bXBEaXYuaW5uZXJIVE1MID0gY2hhcnRTcGVjc1tpXS5zb3VyY2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdmdDb250ZW50ID0gdG1wRGl2LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZpZXdCb3hOdW1zID0gc3ZnQ29udGVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdFdpZHRoID0gcGFyc2VGbG9hdCh2aWV3Qm94TnVtc1syXSk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0SGVpZ2h0ID0gcGFyc2VGbG9hdCh2aWV3Qm94TnVtc1szXSk7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzLnB1c2gobmV3IENoYXJ0KHN2Z0NvbnRlbnQpKTtcclxuICAgICAgICAgICAgICAgIG5hbWVDaGFydHMuc2V0KGNoYXJ0U3BlY3NbaV0uaWQsIENoYXJ0U3BlYy5jaGFydHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcmVtb3ZlIHRoZSBlbXB0eSBjaGFydHMgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudWxsQ2hhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNoYXJ0U3BlY3Muc2xpY2UobnVsbENoYXJ0c1tpXSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2dlbmVyYXRlIGNoYXJ0IGZhY2V0c1xyXG4gICAgICAgIHR5cGVvZiBmYWNldCAhPT0gJ3VuZGVmaW5lZCcgPyBDaGFydFNwZWMuZmFjZXRWaWV3cyhuYW1lQ2hhcnRzLCBmYWNldCkgOiB0aGlzLnZpZXdwb3J0LnNldFZpZXdwb3J0KGRlZmF1bHRXaWR0aCwgZGVmYXVsdEhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBoYXNFcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlVHJhbnNBbmRNZXJnZSgpIHtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICBjb25zdCBkYXR1bU1hcmtNYXBwaW5nID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzW2ldLnN2Z0NvbnRlbnQuc2V0QXR0cmlidXRlKCd0cmFucycsICcwLDAnKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLnJlbW92ZVRyYW5zaXRpb25zKENoYXJ0U3BlYy5jaGFydHNbaV0uc3ZnQ29udGVudC5jaGlsZHJlblswXSwgaSwgZGF0dW1NYXJrTWFwcGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnY2hhcnRzIGFmdGVyIHJlbW92ZSB0cmFuc2l0aW9uIGFuZCBhZGRlZCBlbmNvZGluZycsIENoYXJ0U3BlYy5jaGFydHNbMF0sIENoYXJ0U3BlYy5jaGFydHNbMF0uc3ZnQ29udGVudCk7XHJcbiAgICAgICAgY29uc3QgZGF0dW1NYXJrQXJyID0gQXJyYXkuZnJvbShkYXR1bU1hcmtNYXBwaW5nKS5tYXAoaXRlbSA9PiBpdGVtWzFdKTtcclxuICAgICAgICBkYXR1bU1hcmtBcnIuZm9yRWFjaChtQXJyID0+IHtcclxuICAgICAgICAgICAgbUFyci5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lm1hcmtzV2l0aFNhbWVEYXR1bS5zZXQobUlkLCBtQXJyKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuc3ZnQ2hhcnQgPSBDaGFydFNwZWMubWVyZ2VDaGFydHMoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWVyZ2VkIGNoYXJ0OiAnLCB0aGlzLnN2Z0NoYXJ0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmFjZXRWaWV3cyhuYW1lQ2hhcnRzLCBmYWNldCkge1xyXG4gICAgICAgIGlmIChmYWNldC52aWV3cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBjaGFydHNUb0NvbWJpbmUgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmYWNldC52aWV3c1swXS5mcmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBSZWNvcmRlciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmYWNldC52aWV3cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydE5hbWUgPSBmYWNldC52aWV3c1tqXS5mcmFtZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lQ2hhcnRzLmdldChjaGFydE5hbWUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBSZWNvcmRlci5wdXNoKENoYXJ0U3BlYy5jaGFydHNbbmFtZUNoYXJ0cy5nZXQoY2hhcnROYW1lKV0uc3ZnQ29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2hhcnQgbmFtZSAnICsgY2hhcnROYW1lICsgJyBpcyB1bmRlZmluZWQgIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0bXBSZWNvcmRlci5sZW5ndGggPT09IGZhY2V0LnZpZXdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0c1RvQ29tYmluZS5wdXNoKHRtcFJlY29yZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDaGFydFNwZWMuY29tYmluZUNoYXJ0cyhmYWNldC50eXBlLCBmYWNldC52aWV3cy5sZW5ndGgsIGNoYXJ0c1RvQ29tYmluZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb21iaW5lQ2hhcnRzKGZhY2V0VHlwZSwgZmFjZXROdW0sIGNoYXJ0c1RvQ29tYmluZSkge1xyXG4gICAgICAgIGxldCByZXN1bHRDaGFydHMgPSBbXSxcclxuICAgICAgICAgICAgY2hhcnRNYXJnaW4gPSAyMCxcclxuICAgICAgICAgICAgb3JpV2lkdGggPSAwLCBvcmlIZWlnaHQgPSAwLFxyXG4gICAgICAgICAgICB3aWR0aEFmdGVyRmFjZXQgPSBvcmlXaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0QWZ0ZXJGYWNldCA9IG9yaUhlaWdodDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0c1RvQ29tYmluZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wQ2hhcnRzID0gY2hhcnRzVG9Db21iaW5lW2ldO1xyXG4gICAgICAgICAgICBvcmlXaWR0aCA9IHBhcnNlRmxvYXQodG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcbiAgICAgICAgICAgIG9yaUhlaWdodCA9IHBhcnNlRmxvYXQodG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpO1xyXG4gICAgICAgICAgICB3aWR0aEFmdGVyRmFjZXQgPSBvcmlXaWR0aDtcclxuICAgICAgICAgICAgaGVpZ2h0QWZ0ZXJGYWNldCA9IG9yaUhlaWdodDtcclxuICAgICAgICAgICAgbGV0IHZpZXdCb3hOdW1zID0gdG1wQ2hhcnRzWzBdLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgIGxldCB2aWV3Qm94VyA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbMl0pO1xyXG4gICAgICAgICAgICBsZXQgdmlld0JveEggPSBwYXJzZUZsb2F0KHZpZXdCb3hOdW1zWzNdKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjaGFydFRyYW5zRm9ybSA9IENhbmlzVXRpbC5nZXRUcmFuc2Zvcm1BdHRycyh0bXBDaGFydHNbMF0uY2hpbGRyZW5bMF0pO1xyXG4gICAgICAgICAgICB0bXBDaGFydHNbMF0uY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBjaGFydFRyYW5zRm9ybS50cmFuc051bXNbMF0gKyAnLCcgKyBjaGFydFRyYW5zRm9ybS50cmFuc051bXNbMV0gKyAnKScpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZhY2V0VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBGYWNldFNwZWMuZmFjZXRUeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRBZnRlckZhY2V0ICo9IHRtcENoYXJ0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgb3JpSGVpZ2h0ICogdG1wQ2hhcnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgJyArIHZpZXdCb3hXICsgJyAnICsgb3JpSGVpZ2h0ICogdG1wQ2hhcnRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZhY2V0U3BlYy5mYWNldFR5cGUuY29sOlxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoQWZ0ZXJGYWNldCAqPSB0bXBDaGFydHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcENoYXJ0c1swXS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgb3JpV2lkdGggKiB0bXBDaGFydHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBDaGFydHNbMF0uc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgb3JpV2lkdGggKiB0bXBDaGFydHMubGVuZ3RoICsgJyAnICsgdmlld0JveEgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRtcENoYXJ0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcENoYXJ0ID0gdG1wQ2hhcnRzW2pdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcE1hcmtzID0gdG1wQ2hhcnQucXVlcnlTZWxlY3RvckFsbCgnLm1hcmsnKTtcclxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0bXBNYXJrcywgKG0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWROdW0gPSBwYXJzZUludChtLmdldEF0dHJpYnV0ZSgnaWQnKS5zdWJzdHJpbmcoNCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG0uc2V0QXR0cmlidXRlKCdpZCcsICdtYXJrJyArIChpZE51bSArIGogKiAxMDAwMDApKTtcclxuICAgICAgICAgICAgICAgICAgICBtLmNsYXNzTGlzdC5hZGQoJ2ZhY2V0JyArIGopO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChqID4gMCkgey8vcHV0IHRoZSBtYXJrcyBpbiB0aGUgZm9sbG93aW5nIGNoYXJ0cyB0byB0aGUgMXN0IGNoYXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0Q29udGVudEcgPSB0bXBDaGFydC5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDaGlsZHJlbiA9IGNoYXJ0Q29udGVudEcuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBjaGFydENoaWxkcmVuLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBEb20gPSBjaGFydENoaWxkcmVuW21dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtQXR0cnMgPSBDYW5pc1V0aWwuZ2V0VHJhbnNmb3JtQXR0cnModG1wRG9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmYWNldFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmFjZXRTcGVjLmZhY2V0VHlwZS5yb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgdHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzBdICsgJywnICsgKHRyYW5zZm9ybUF0dHJzLnRyYW5zTnVtc1sxXSArIChvcmlIZWlnaHQgKyBjaGFydE1hcmdpbikgKiBqKSArICcpICcgKyAnc2NhbGUoJyArIHRyYW5zZm9ybUF0dHJzLnNjYWxlTnVtICsgJyknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmFjZXRTcGVjLmZhY2V0VHlwZS5jb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKHRyYW5zZm9ybUF0dHJzLnRyYW5zTnVtc1swXSArIChvcmlXaWR0aCArIGNoYXJ0TWFyZ2luKSAqIGopICsgJywnICsgdHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzFdICsgJykgJyArICdzY2FsZSgnICsgdHJhbnNmb3JtQXR0cnMuc2NhbGVOdW0gKyAnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcENoYXJ0c1swXS5jaGlsZHJlblswXS5hcHBlbmRDaGlsZCh0bXBEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHRDaGFydHMucHVzaChuZXcgQ2hhcnQodG1wQ2hhcnRzWzBdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIENoYXJ0U3BlYy5jaGFydHMgPSByZXN1bHRDaGFydHM7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydC5zZXRWaWV3cG9ydCh3aWR0aEFmdGVyRmFjZXQsIGhlaWdodEFmdGVyRmFjZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtZXJnZUNoYXJ0cygpIHtcclxuICAgICAgICBsZXQgYWxsTWFya3MgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IG1hcmtTdGF0dXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgbGV0IG1hcmtUZW1wbGV0ZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgbGV0IGF0dHJOYW1lcyA9IFsneCcsICd5JywgJ2N4JywgJ2N5JywgJ3gxJywgJ3kxJywgJ3gyJywgJ3kyJywgJ2QnLCAncicsICd3aWR0aCcsICdoZWlnaHQnLCAndGV4dENvbnRlbnQnLCAnZmlsbCcsICdzdHJva2UnLCAnb3BhY2l0eSddO1xyXG4gICAgICAgIGxldCBudWxsU3RhdHVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhdHRyTmFtZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbnVsbFN0YXR1c1thdHRyTmFtZXNbal1dID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2N1cnJlbnQgY2hhcnRzIHRvIG1lcmdlOiAnLCBDaGFydFNwZWMuY2hhcnRzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtTZXRzRHVyaW5nVHJhbnNbaV0gPSB7IGVudGVyOiBbXSwgdXBkYXRlOiBbXSwgZXhpdDogW10gfS8vaW5pdCBDaGFydFNwZWMubWFya1NldHNEdXJpbmdUcmFuc1xyXG4gICAgICAgICAgICBsZXQgdG1wQ2hhcnQgPSBDaGFydFNwZWMuY2hhcnRzW2ldLnN2Z0NvbnRlbnQ7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0bXBDaGFydDogJywgdG1wQ2hhcnQpO1xyXG4gICAgICAgICAgICBsZXQgbWFya3MgPSB0bXBDaGFydC5xdWVyeVNlbGVjdG9yQWxsKCcubWFyaycpO1xyXG4gICAgICAgICAgICBpZiAobWFya3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG1hcmtzLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWQgPSBtLmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsTWFya3MuYWRkKG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXR1c09iaiA9IHt9Oy8vc3RhdHVzIG9mIG9uZSBtYXJrIGluIGNoYXJ0IGlcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF0dHJOYW1lcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ck5hbWVzW2pdID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbYXR0ck5hbWVzW2pdXSA9IG0uaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqW2F0dHJOYW1lc1tqXV0gPSBtLmdldEF0dHJpYnV0ZShhdHRyTmFtZXNbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFya1N0YXR1cy5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5zZXQobWFya0lkLCBuZXcgQXJyYXkoQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGgpLmZpbGwobnVsbFN0YXR1cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5nZXQobWFya0lkKVtpXSA9IHN0YXR1c09iajtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrVGVtcGxldGVzLnNldChtYXJrSWQsIG0ub3V0ZXJIVE1MKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtYXJrIHN0YXR1cyB1c2VkIHRvIGNoZWNrIGNoYW5nZWQgYXR0cnM6ICcsIG1hcmtTdGF0dXMpO1xyXG5cclxuICAgICAgICAvL2ZpbmQgdGhlIGNoYW5nZWQgYXR0cmlidXRlc1xyXG4gICAgICAgIENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgYXR0ck5hbWVzQ29weSA9IENhbmlzVXRpbC5kZWVwQ2xvbmUoYXR0ck5hbWVzKTtcclxuICAgICAgICBtYXJrU3RhdHVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXR1c0FyciwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0ck5hbWVzQ29weS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBhcmVTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXR1c0Fyci5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdHVzQXJyW2pdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlU3RhdHVzID0gc3RhdHVzQXJyW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXR1c0Fyci5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdHVzQXJyW2pdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzQXJyW2pdW2F0dHJOYW1lc0NvcHlbaV1dICE9PSBjb21wYXJlU3RhdHVzW2F0dHJOYW1lc0NvcHlbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLnB1c2goYXR0ck5hbWVzQ29weVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lc0NvcHkuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy9maW5kIGRpZmZlcmVudCBjbWRzIGlmIHRoZXJlIGlzIGQgaW4gY2hhbmdlZEF0dHJzXHJcbiAgICAgICAgbGV0IGRpZmZDbWRzID0gbmV3IE1hcCgpOy8va2V5OmNtZCBuYW1lLCB2YWx1ZToge2NtZElkeCwgZGlmZkF0dHJJZHhzfVxyXG4gICAgICAgIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmluZGV4T2YoJ2QnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGRpZmZDbWRzID0gQ2FuaXNVdGlsLmZpbmREaWZmQ21kcyhtYXJrU3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2NoYW5nZWQgYXR0cmlidXRlczogJywgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycyk7XHJcblxyXG4gICAgICAgIC8vYWRkIG1pc3NpbmcgbWFya3MgdG8gZWFjaCBjaGFydFxyXG4gICAgICAgIGFsbE1hcmtzID0gQXJyYXkuZnJvbShhbGxNYXJrcyk7XHJcbiAgICAgICAgbGV0IG1hcmtFbnRlckV4aXQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWxsTWFya3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFya0VudGVyRXhpdC5nZXQoYWxsTWFya3Nbal0pID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtFbnRlckV4aXQuc2V0KGFsbE1hcmtzW2pdLCBmYWxzZSk7Ly9pbml0IG1hcmsgZW50ZXIgZXhpdCBzdGF0dXNcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoQ2hhcnRTcGVjLmNoYXJ0c1tpXS5zdmdDb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgYWxsTWFya3Nbal0pLmxlbmd0aCA9PT0gMCkgey8vY2hhcnQgaSBkb2VzIG5vdCBoYXZlIG1hcmsgalxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrRW50ZXJFeGl0LmdldChhbGxNYXJrc1tqXSkpIHsvL2l0IGV4aXN0cyBpbiBwcmV2aW91cyBjaGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtTZXRzRHVyaW5nVHJhbnNbaV0uZXhpdC5wdXNoKGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya0VudGVyRXhpdC5zZXQoYWxsTWFya3Nbal0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtTdHIgPSBtYXJrVGVtcGxldGVzLmdldChhbGxNYXJrc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcERpdi5pbm5lckhUTUwgPSBtYXJrU3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrID0gdG1wRGl2LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdGF0dXNPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL3NldCB0aGUgY2hhbmdlZCBhdHRyaWJ1dGVzIHRvIHRoZSBpbml0IHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmxlbmd0aDsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAneScgJiYgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5pbmRleE9mKCdoZWlnaHQnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya1kgPSAhbWFyay5nZXRBdHRyaWJ1dGUoJ3knKSA/IDAgOiBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCd5JykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtIZWlnaHQgPSAhbWFyay5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpID8gMCA6IHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRWYWx1ZSA9IG1hcmtZICsgbWFya0hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKCd5JywgdGFyZ2V0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqLnkgPSB0YXJnZXRWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAnZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHREO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsuZ2V0QXR0cmlidXRlKCdkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHREID0gQ2FuaXNVdGlsLnNldFBhdGhEVmFsdWUobWFyay5nZXRBdHRyaWJ1dGUoJ2QnKSwgdHJ1ZSwgMCwgMCwgZGlmZkNtZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoJ2QnLCByZXN1bHREKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09iai5kID0gcmVzdWx0RDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ2ZpbGwnIHx8IENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICdzdHJva2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1hcmsuZ2V0QXR0cmlidXRlKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0pID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0sICcjRkZGRkZGJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gPSBtYXJrLmdldEF0dHJpYnV0ZShDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ3gnLCAneScsICdjeCcsICdjeScsICd4MScsICd5MScsICd4MicsICd5MiddLmluY2x1ZGVzKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICd4MicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoJ3gyJywgcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgneDEnKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbJ3gyJ10gPSBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCd4MScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICd5MicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoJ3kyJywgcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgneTEnKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbJ3kyJ10gPSBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCd5MScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gPSBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuc2V0QXR0cmlidXRlKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtTdHIgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI1MDBcIiBoZWlnaHQ9XCI1MDBcIj4nICsgbWFyay5vdXRlckhUTUwgKyAnPC9zdmc+JztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdmdNYXJrID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhtYXJrU3RyLCBcImltYWdlL3N2Zyt4bWxcIikubGFzdENoaWxkLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5jaGFydHNbaV0uc3ZnQ29udGVudC5xdWVyeVNlbGVjdG9yKCcjY2hhcnRDb250ZW50JykuYXBwZW5kQ2hpbGQoc3ZnTWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5nZXQoYWxsTWFya3Nbal0pW2ldID0gc3RhdHVzT2JqO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsvL3RoaXMgbWFyayBpcyBpbiB0aGlzIGNoYXJ0IFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrRW50ZXJFeGl0LmdldChhbGxNYXJrc1tqXSkpIHsvL2l0IGV4aXN0cyBpbiBwcmV2aW91cyBjaGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtTZXRzRHVyaW5nVHJhbnNbaV0udXBkYXRlLnB1c2goYWxsTWFya3Nbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFya1NldHNEdXJpbmdUcmFuc1tpXS5lbnRlci5wdXNoKGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya0VudGVyRXhpdC5zZXQoYWxsTWFya3Nbal0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGFuZ2VkIGF0dHJzIHRvIHJlY29yZWQgaW4gZGF0YSB0cmFuczogJywgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21hcmsgc2V0cyBiZXR3ZWVuIGNoYXJ0czogJywgQ2hhcnRTcGVjLm1hcmtTZXRzRHVyaW5nVHJhbnMpO1xyXG5cclxuICAgICAgICAvL3NldCBkYXRhLXRyYW5zIG9mIGNoYXJ0IDBcclxuICAgICAgICBDaGFydFNwZWMuZGF0YVRyYW5zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWxsTWFya3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IHN0YXR1c0FyciA9IG1hcmtTdGF0dXMuZ2V0KGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgbGV0IGRhdGFUcmFuc0FyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgc2kgPSAwOyBzaSA8IHN0YXR1c0Fyci5sZW5ndGg7IHNpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBTdGF0dXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICdyJ10uaW5jbHVkZXMoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wU3RhdHVzW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gMTAwICogc3RhdHVzQXJyW3NpXVtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSAvIHN0YXR1c0FyclswXVtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBTdGF0dXNbQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gPSBzdGF0dXNBcnJbc2ldW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRhdGFUcmFuc0Fyci5wdXNoKHRtcFN0YXR1cyk7Ly9tYXJrIHN0YXR1cyBpbiBjaGFydHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2NvcHkgdGhlIHN0YXR1cyBvZiB0aGUgMXN0IGNoYXJ0IGFzIHRoZSBpbml0IHN0YXR1c1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuZGF0YVRyYW5zLnNldChhbGxNYXJrc1tqXSwgZGF0YVRyYW5zQXJyKTtcclxuICAgICAgICAgICAgbGV0IG1hcmtEb20gPSBDaGFydFNwZWMuY2hhcnRzWzBdLnN2Z0NvbnRlbnQucXVlcnlTZWxlY3RvcignIycgKyBhbGxNYXJrc1tqXSk7XHJcbiAgICAgICAgICAgIG1hcmtEb20uc2V0QXR0cmlidXRlKCdkYXRhLXRyYW5zaXRpb24nLCBKU09OLnN0cmluZ2lmeSh7IFwiZGF0YVRyYW5zXCI6IGRhdGFUcmFuc0FyciB9LCBudWxsLCAnXFx0JykpXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdtZXJnZWQgbWFyazogJywgbWFya0RvbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjaGFydCAwOiAnLCBDaGFydFNwZWMuY2hhcnRzWzBdKTtcclxuICAgICAgICByZXR1cm4gQ2hhcnRTcGVjLmNoYXJ0c1swXS5zdmdDb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRCQm94ZXMoKSB7XHJcbiAgICAgICAgLy8gbGV0IHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydENvbnRhaW5lcicpLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgIGxldCBzdmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlzQ2hhcnQnKTtcclxuICAgICAgICBsZXQgbWFya3MgPSBzdmcucXVlcnlTZWxlY3RvckFsbCgnW2lkXj1cIm1hcmtcIl0nKTtcclxuICAgICAgICBsZXQgYkJveGVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmIChtYXJrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChtYXJrcywgKG0pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBtYXJrSWQgPSBtLmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYkJveDtcclxuICAgICAgICAgICAgICAgIGlmIChtLnRhZ05hbWUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJCb3ggPSBtLmdldEJCb3goKTtcclxuICAgICAgICAgICAgICAgICAgICBiQm94LndpZHRoICs9IDEwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBiQm94ID0gbS5nZXRCQm94KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBiQm94ZXMuc2V0KG1hcmtJZCwgYkJveCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBiQm94ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlbW92ZVRyYW5zaXRpb25zKHQsIGNoYXJ0SWR4LCBkYXR1bU1hcmtNYXBwaW5nKSB7XHJcbiAgICAgICAgLy9leHRyYWN0IGZpbGwsIHN0cm9rZSBhbmQgc3Ryb2tlLXdpZHRoIG91dFxyXG4gICAgICAgIGlmICh0eXBlb2YgdC5zdHlsZS5maWxsICE9PSAndW5kZWZpbmVkJyAmJiB0LnN0eWxlLmZpbGwpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0LmdldEF0dHJpYnV0ZSgnZmlsbCcpID09PSAndW5kZWZpbmVkJyB8fCAhdC5nZXRBdHRyaWJ1dGUoJ2ZpbGwnKSkge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCB0LnN0eWxlLmZpbGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc3R5bGUuZmlsbCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdC5zdHlsZS5zdHJva2UgIT09ICd1bmRlZmluZWQnICYmIHQuc3R5bGUuc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdC5nZXRBdHRyaWJ1dGUoJ3N0cm9rZScpID09PSAndW5kZWZpbmVkJyB8fCAhdC5nZXRBdHRyaWJ1dGUoJ3N0cm9rZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdC5zdHlsZS5zdHJva2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc3R5bGUuc3Ryb2tlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0LnN0eWxlLnN0cm9rZVdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB0LnN0eWxlLnN0cm9rZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdC5nZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcpID09PSAndW5kZWZpbmVkJyB8fCAhdC5nZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcpKSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgdC5zdHlsZS5zdHJva2VXaWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdC5zdHlsZS5zdHJva2VXaWR0aCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgnc3Ryb2tlJykgPT09ICdub25lJykge1xyXG4gICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdHIgPSB0LmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyk7XHJcbiAgICAgICAgbGV0IHBhcmVudFRyYW5zID0gdC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgndHJhbnMnKS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGlmICh0LmNsYXNzTGlzdC5jb250YWlucygnbWFyaycpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFEYXR1bUF0dHJWYWx1ZVN0ciA9IHQuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdHVtJyk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhRGF0dW1BdHRyVmFsdWUgPSBKU09OLnBhcnNlKGRhdGFEYXR1bUF0dHJWYWx1ZVN0cik7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFEYXR1bUF0dHJWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZSA9IGRhdGFEYXR1bUF0dHJWYWx1ZVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2dldCBtc2hhcGUgdXNpbmcgdGhlIHR5cGUgaW4gY2xhc3MgbGlrZSBTaGFwZTEsIFN5bWJvbDFcclxuICAgICAgICAgICAgY29uc3QgdENsYXNzID0gdC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrcyA9IHRDbGFzcy5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICBsZXQgc2hhcGVOYW1lID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBibG9ja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9ja3NbaV0gPT09ICdtYXJrJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlTmFtZSA9IGJsb2Nrc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGF0YURhdHVtQXR0clZhbHVlWydtU2hhcGUnXSA9IHNoYXBlTmFtZTtcclxuICAgICAgICAgICAgbGV0IGlzTm9uRGF0YU1hcmsgPSBmYWxzZTtcclxuICAgICAgICAgICAgQXJyYXkuZnJvbSh0LmNsYXNzTGlzdCkuZm9yRWFjaCgoYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgYyA9IGMudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjLmluY2x1ZGVzKCdheGlzJykgfHwgYy5pbmNsdWRlcygnbGVnZW5kJykgfHwgYy5pbmNsdWRlcygndGl0bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTm9uRGF0YU1hcmsgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBjb25zdCB0bXBJZCA9IHQuZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICBpZiAoaXNOb25EYXRhTWFyaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub25EYXRhTWFya0RhdHVtLnNldCh0bXBJZCwgZGF0YURhdHVtQXR0clZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YU1hcmtEYXR1bS5zZXQodG1wSWQsIGRhdGFEYXR1bUF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzW2NoYXJ0SWR4XS5hZGRNYXJrRGF0dW0odG1wSWQsIGRhdGFEYXR1bUF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHVyZURhdHVtID0ge307XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhRGF0dW1BdHRyVmFsdWUpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ18nKSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXJlRGF0dW1ba2V5XSA9IGRhdGFEYXR1bUF0dHJWYWx1ZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBwdXJlRGF0dW0ubVNoYXBlID0gJyc7Ly9pZ25vcmUgdGhlIGRpZmZlcmVuY2Ugb2Ygc2hhcGUsIHRoaXMgaXMgZm9yIGFsaWdubWVudFxyXG4gICAgICAgICAgICAgICAgbGV0IHB1cmVEYXR1bVN0ciA9IEpTT04uc3RyaW5naWZ5KHB1cmVEYXR1bSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdHVtTWFya01hcHBpbmcuZ2V0KHB1cmVEYXR1bVN0cikgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0dW1NYXJrTWFwcGluZy5zZXQocHVyZURhdHVtU3RyLCBbXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkYXR1bU1hcmtNYXBwaW5nLmdldChwdXJlRGF0dW1TdHIpLnB1c2godG1wSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ2F4aXMnKSB8fCB0LmNsYXNzTGlzdC5jb250YWlucygnbGVnZW5kJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdHVtOiAnLCB0LmdldEF0dHJpYnV0ZSgnZGF0YS1kYXR1bScpKTtcclxuICAgICAgICAgICAgY29uc3QgdG1wRGF0YURhdHVtID0gSlNPTi5wYXJzZSh0LmdldEF0dHJpYnV0ZSgnZGF0YS1kYXR1bScpKTtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG1wRGF0YURhdHVtKSkge1xyXG4gICAgICAgICAgICAgICAgdG1wRGF0YURhdHVtID0gdG1wRGF0YURhdHVtWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmNsYXNzTGlzdC5jb250YWlucygnYXhpcycpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bS5wb3NpdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydFVuZGVyc3RhbmRpbmdbdG1wRGF0YURhdHVtLnBvc2l0aW9uXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydFVuZGVyc3RhbmRpbmdbdG1wRGF0YURhdHVtLnBvc2l0aW9uXS5wdXNoKCdwb3NpdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0bXBEYXRhRGF0dW0uZW5jb2RpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0c1tjaGFydElkeF0uYWRkRW5jb2RpbmcodG1wRGF0YURhdHVtLmVuY29kaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigndGhlcmUgaXMgbm8gYXhpcyBlbmNvZGluZyEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0LmNsYXNzTGlzdC5jb250YWlucygnbGVnZW5kJykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNoYW5uZWwgaW4gdG1wRGF0YURhdHVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNoYXJ0VW5kZXJzdGFuZGluZ1t0bXBEYXRhRGF0dW1bY2hhbm5lbF1dID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0VW5kZXJzdGFuZGluZ1t0bXBEYXRhRGF0dW1bY2hhbm5lbF1dID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bVtjaGFubmVsXV0ucHVzaChjaGFubmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vVE9ETzogYWRkIGxlZ2VuZCBlbmNvZGluZyBhbmFseXNpcyBsaWtlIGF4aXMgYWJvdmVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRyKSB7XHJcbiAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgvdHJhbnNsYXRlfHNjYWxlfHJvdGF0ZXxcXHMvZywgKG0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtID09PSAnICcgPyAnJyA6ICdAJyArIG07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0ciA9IHRyLnJlcGxhY2UoLyheQCopfChAKiQpL2csICcnKS5zcGxpdCgnQCcpO1xyXG4gICAgICAgICAgICBsZXQgc2NhbGVTdHIgPSAnJywgdHJhbnNTdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyW2ldLmluZGV4T2YoJ3RyYW5zbGF0ZScpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc1N0ciA9IHRyW2ldO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cltpXS5pbmRleE9mKCdzY2FsZScpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZVN0ciA9IHRyW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0cmFuc1Bvc2lTdHIgPSB0cmFuc1N0ci5yZXBsYWNlKC90cmFuc2xhdGVcXCh8IHxcXCkvZywgJycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBzY2FsZVN0cik7XHJcbiAgICAgICAgICAgIGlmICh0LnRhZ05hbWUgPT09ICdnJykge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zJywgKHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzBdKSArIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMF0pKSArICcsJyArIChwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clsxXSkgKyBwYXJzZUZsb2F0KHBhcmVudFRyYW5zWzFdKSkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgQ2FuaXNVdGlsLnRyYW5zU2hhcGUodCwgcGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMF0pICsgcGFyc2VGbG9hdChwYXJlbnRUcmFuc1swXSksIHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzFdKSArIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0LnRhZ05hbWUgPT09ICdnJykge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zJywgcGFyZW50VHJhbnMuam9pbignLCcpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIENhbmlzVXRpbC50cmFuc1NoYXBlKHQsIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMF0pLCBwYXJzZUZsb2F0KHBhcmVudFRyYW5zWzFdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5yZW1vdmVUcmFuc2l0aW9ucyh0LmNoaWxkcmVuW2ldLCBjaGFydElkeCwgZGF0dW1NYXJrTWFwcGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFkZExvdHRpZU1hcmtMYXllcnModCkge1xyXG4gICAgICAgIGlmICh0LnRhZ05hbWUgIT09ICdnJyAmJiB0LnRhZ05hbWUgIT09ICdzdmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0LmNsYXNzTGlzdC5jb250YWlucygnbWFyaycpKSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5zZXQodC5nZXRBdHRyaWJ1dGUoJ2lkJyksIGdsb2JhbFZhci5qc01vdmluLmFkZExheWVyKHQpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGdsb2JhbFZhci5qc01vdmluLmFkZExheWVyKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5hZGRMb3R0aWVNYXJrTGF5ZXJzKHQuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbkNoYXJ0U3BlYy5DSEFSVF9VUkwgPSAndXJsJztcclxuQ2hhcnRTcGVjLkNIQVJUX0NPTlRFTlQgPSAnY29udGVudCc7XHJcbkNoYXJ0U3BlYy5jaGFydHMgPSBbXTtcclxuQ2hhcnRTcGVjLmF0dHJzID0gWydpZCcsICdzb3VyY2UnLCAnc3RhcnQnLCAnZW5kJ107XHJcbkNoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMgPSBbXTtcclxuXHJcbkNoYXJ0U3BlYy52aWV3cG9ydCA9IG5ldyBWaWV3cG9ydCgpO1xyXG5DaGFydFNwZWMuZGF0YVRyYW5zID0gbmV3IE1hcCgpOy8va2V5Om1hcmtpZCwgdmFsdWU6YXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBjaGFydFxyXG5DaGFydFNwZWMubWFya1NldHNEdXJpbmdUcmFucyA9IFtdOyAvLyB2YWx1ZToge2VudGVyOiBtYXJraWQgYXJyYXksIHVwZGF0ZTogbWFya2lkIGFycmF5LCBleGl0OiBtYXJraWQgYXJyYXl9XHJcbkNoYXJ0U3BlYy5zdmdDaGFydDtcclxuQ2hhcnRTcGVjLmNoYXJ0VW5kZXJzdGFuZGluZyA9IHsgbVNoYXBlOiBbJ3NoYXBlJ10gfTtcclxuQ2hhcnRTcGVjLmRhdGFNYXJrRGF0dW0gPSBuZXcgTWFwKCk7XHJcbkNoYXJ0U3BlYy5tYXJrc1dpdGhTYW1lRGF0dW0gPSBuZXcgTWFwKCk7XHJcbkNoYXJ0U3BlYy5ub25EYXRhTWFya0RhdHVtID0gbmV3IE1hcCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRTcGVjO1xyXG5cclxuY2xhc3MgQ2hhcnQge1xyXG4gICAgY29uc3RydWN0b3Ioc3ZnQ29udGVudCkge1xyXG4gICAgICAgIHRoaXMuc3ZnQ29udGVudCA9IHN2Z0NvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5zY2FsZXMgPSBbXTsvL0FycmF5PHt0eXBlOnN0cmluZywgZG9tYWluOkFycmF5PG51bWJlcnxzdHJpbmc+LCByYW5nZTpBcnJheTxudW1iZXI+fT5cclxuICAgICAgICB0aGlzLnZpc3VhbE1hcHBpbmdzID0gbmV3IE1hcCgpOy8va2V5OmRhdGEgYXR0cmlidXRlLCB2YWx1ZTogdmlzdWFsIGNoYW5uZWxcclxuICAgICAgICB0aGlzLm1hcmtEYXR1bSA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvLyB0aGlzLm9yaUNvb3JkcyA9IHRoaXMuZmluZE9yaUNvb3JkcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZE1hcmtEYXR1bShtYXJrSWQsIG1hcmtEYXR1bSkge1xyXG4gICAgICAgIHRoaXMubWFya0RhdHVtLnNldChtYXJrSWQsIG1hcmtEYXR1bSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRW5jb2RpbmcoZW5jb2RpbmcpIHtcclxuICAgICAgICB0aGlzLmFkZFNjYWxlcyhlbmNvZGluZy5zY2FsZSk7XHJcbiAgICAgICAgdGhpcy5hZGRWaXN1YWxNYXBwaW5nKGVuY29kaW5nLnZpc3VhbENoYW5uZWwsIGVuY29kaW5nLmF0dHJpYnV0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2NhbGVzKHNjYWxlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzY2FsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZXMucHVzaChzY2FsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcigndW5kZWZpbmVkIHNjYWxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZFZpc3VhbE1hcHBpbmcoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlzdWFsTWFwcGluZ3Muc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3VuZGVmaW5lZCB2aXVzYWwgbWFwcGluZyAnLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMYXllckZhY3RvcnlcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX2xheWVyLkxheWVyRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFYXNpbmdGYWN0b3J5XCIsIHtcclxuICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgcmV0dXJuIF9lYXNpbmcuRWFzaW5nRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXRoTWFrZXJcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX3BhdGguUGF0aE1ha2VyO1xyXG4gIH1cclxufSk7XHJcbmV4cG9ydHMuTWFza1R5cGUgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcclxuXHJcbnZhciBfbGF5ZXIgPSByZXF1aXJlKFwiLi9sYXllclwiKTtcclxuXHJcbnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInV1aWQvdjRcIikpO1xyXG5cclxudmFyIF9lYXNpbmcgPSByZXF1aXJlKFwiLi9lYXNpbmdcIik7XHJcblxyXG52YXIgX3BhdGggPSByZXF1aXJlKFwiLi9wYXRoXCIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XHJcblxyXG52YXIgSlNNb3ZpbiA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB2aWV3cG9ydCAocHgpXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbigpIHtcclxuICAgIHZhciBmcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDMwO1xyXG4gICAgdmFyIHdpZHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA4MDA7XHJcbiAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA2MDA7XHJcblxyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW4pO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RcIiwgdm9pZCAwKTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSB7XHJcbiAgICAgIGZyOiBmcHMsXHJcbiAgICAgIHc6IHdpZHRoLFxyXG4gICAgICBoOiBoZWlnaHQsXHJcbiAgICAgIGRkZDogMCxcclxuICAgICAgbGF5ZXJzOiBbXSxcclxuICAgICAgYXNzZXRzOiBbXSxcclxuICAgICAgZm9udHM6IHtcclxuICAgICAgICBsaXN0OiBbXVxyXG4gICAgICB9LFxyXG4gICAgICBpcDogMCxcclxuICAgICAgb3A6IDBcclxuICAgIH07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICovXHJcblxyXG5cclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbiwgW3tcclxuICAgIGtleTogXCJzZXRGcmFtZVJhdGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGcmFtZVJhdGUoZnBzKSB7XHJcbiAgICAgIHRoaXMucm9vdC5mciA9IGZwcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgaGVpZ2h0IG9mIHZpZXdwb3J0IChweClcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2V0Vmlld3BvcnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaWV3cG9ydCh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMucm9vdC53ID0gd2lkdGg7XHJcbiAgICAgIHRoaXMucm9vdC5oID0gaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgYSBzaW1wbGUgZ3JhcGhpY2FsIGxheWVyXHJcbiAgICAgKiBAcGFyYW0gZG9tTGF5ZXJPckFzc2V0SWQgYSBTVkcgZWxlbWVudCBET00gb3IgSlNNb3ZpbkxheWVyIG9yIGFzc2V0IElEIG5lZWRzIHRvIGJlIGluc2VydGVkXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZExheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGF5ZXIoZG9tTGF5ZXJPckFzc2V0SWQpIHtcclxuICAgICAgdmFyIGxheWVyO1xyXG5cclxuICAgICAgaWYgKGRvbUxheWVyT3JBc3NldElkIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LmhpZXJhcmNoeShkb21MYXllck9yQXNzZXRJZCwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9tTGF5ZXJPckFzc2V0SWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LnJlZihkb21MYXllck9yQXNzZXRJZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXIgPSBkb21MYXllck9yQXNzZXRJZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UoMCwgMCwgbGF5ZXIucm9vdCk7XHJcbiAgICAgIHJldHVybiBsYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG1hc2tPckRvbSBhIFNWRyBlbGVtZW50IERPTSBvciBKU01vdmluTGF5ZXIgdG8gYmUgdGhlIG1hc2tcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gYmUgdGhlIG1hc2tlZCBsYXllclxyXG4gICAgICogQHBhcmFtIG1hc2tUeXBlIHdoaWNoIHR5cGUgb2YgbWFzayB0byB1c2UsIHVzZSBgTWFza1R5cGUuKmAgdG8gc3BlY2lmeVxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJhZGRNYXNrXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTWFzayhtYXNrT3JEb20sIGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbWFza1R5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICAgIGxheWVyUmVmLnJvb3QudHQgPSBtYXNrVHlwZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsYXllckluZGV4ID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIHRoaXMucm9vdC5sYXllcnNbbGF5ZXJJbmRleF0udHQgPSBtYXNrVHlwZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVySW5kZXggPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBsYXllciBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBKU01vdmluLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbWFza0xheWVyO1xyXG5cclxuICAgICAgaWYgKG1hc2tPckRvbSBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xyXG4gICAgICAgIG1hc2tMYXllciA9IF9sYXllci5MYXllckZhY3RvcnkuaGllcmFyY2h5KG1hc2tPckRvbSwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtYXNrTGF5ZXIgPSBtYXNrT3JEb207XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDAsIG1hc2tMYXllci5yb290KTtcclxuICAgICAgcmV0dXJuIG1hc2tMYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGxheWVyUmVmcyBhIHNldCBvZiBsYXllcnMgdG8gYmUgcGFja2VkIGFzIGFuIGFzc2V0XHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1ha2VBc3NldFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VBc3NldChsYXllclJlZnMpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIGxheWVyUmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIGlmIChsYXllci5yb290LnR0ID09IDEpIHtcclxuICAgICAgICAgIHZhciBsYXllckluZGV4ID0gX3RoaXMucm9vdC5sYXllcnMuaW5kZXhPZihsYXllci5yb290KTtcclxuXHJcbiAgICAgICAgICBpZiAobGF5ZXJJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1hc2sgPSBfdGhpcy5yb290LmxheWVyc1tsYXllckluZGV4IC0gMV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5uZXJJbmRleCA9PSAwIHx8IGxheWVyUmVmc1tpbm5lckluZGV4IC0gMV0ucm9vdCAhPSBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgbGF5ZXJSZWZzLnNwbGljZShpbm5lckluZGV4LCAwLCBuZXcgX2xheWVyLkpTTW92aW5MYXllcihtYXNrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMgPSBsYXllclJlZnMubWFwKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBsYXllcjogbGF5ZXIsXHJcbiAgICAgICAgICBpbm5lckluZGV4OiBpbm5lckluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBhSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGEubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHZhciBiSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGIubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhSW5kZXggLSBiSW5kZXggfHwgYS5pbm5lckluZGV4IC0gYi5pbm5lckluZGV4O1xyXG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKGxheWVyV3JhcHBlcikge1xyXG4gICAgICAgIHJldHVybiBsYXllcldyYXBwZXIubGF5ZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICB2YXIgbGF5ZXJJbmRleCA9IF90aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIGlmIChsYXllckluZGV4ID4gMCkge1xyXG4gICAgICAgICAgX3RoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGF5ZXIucm9vdC5vcCA9IDllOTtcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciByZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgIHRoaXMucm9vdC5hc3NldHMucHVzaCh7XHJcbiAgICAgICAgaWQ6IHJlZklkLFxyXG4gICAgICAgIGxheWVyczogbGF5ZXJSZWZzLm1hcChmdW5jdGlvbiAobGF5ZXJSZWYpIHtcclxuICAgICAgICAgIHJldHVybiBsYXllclJlZi5yb290O1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVmSWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZUxheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGF5ZXIobGF5ZXJSZWZPckluZGV4KSB7XHJcbiAgICAgIHZhciBsYXllclJlZjtcclxuICAgICAgdmFyIGxheWVySW5kZXg7XHJcblxyXG4gICAgICBpZiAobGF5ZXJSZWZPckluZGV4IGluc3RhbmNlb2YgX2xheWVyLkpTTW92aW5MYXllcikge1xyXG4gICAgICAgIGxheWVyUmVmID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIGxheWVySW5kZXggPSB0aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXJSZWYucm9vdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXJJbmRleCA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbWFzayBvciBtYXNrZWQgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZU1hc2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVNYXNrKGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxheWVySW5kZXggPSBsYXllclJlZk9ySW5kZXg7XHJcbiAgICAgICAgbGF5ZXJSZWYgPSBuZXcgX2xheWVyLkpTTW92aW5MYXllcih0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXhdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVyUmVmLnJvb3QudHQpIHtcclxuICAgICAgICBsYXllclJlZi5yb290LnR0ID0gMDtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzLnNwbGljZShsYXllckluZGV4IC0gMSwgMSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb290LmxheWVyc1tsYXllckluZGV4ICsgMV0udHQpIHtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXggKyAxXS50dCA9IDA7XHJcbiAgICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgbGF5ZXIgaXMgbm90IGEgbWFzayBvciBhIG1hc2tlZCBsYXllci4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjbGVhciBhbGwgbGF5ZXJzXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNsZWFyTGF5ZXJzXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJMYXllcnMoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhbGwgbGF5ZXJzIGVuZCBhdCBzYW1lIHRpbWVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidW5pZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm0oKSB7XHJcbiAgICAgIHZhciBtYXhUaW1lID0gdGhpcy5yb290LmxheWVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIHYpIHtcclxuICAgICAgICByZXR1cm4gcCA8IHYub3AgPyB2Lm9wIDogcDtcclxuICAgICAgfSwgMCk7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IG1heFRpbWU7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICByZXR1cm4gbGF5ZXIub3AgPSBtYXhUaW1lO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZXhwb3J0IExvdHRpZSBhcyBKYXZhU2NyaXB0IE9iamVjdCBcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidG9PYmplY3RcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b09iamVjdCgpIHtcclxuICAgICAgdGhpcy51bmlmb3JtKCk7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMudG9KU09OKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBleHBvcnQgTG90dGllIGFzIEpTT04gdGV4dFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ0b0pTT05cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XHJcbiAgICAgIHRoaXMudW5pZm9ybSgpO1xyXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yb290KTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluO1xyXG59KCk7XHJcblxyXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEpTTW92aW47XHJcbnZhciBNYXNrVHlwZTtcclxuZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlO1xyXG5cclxuKGZ1bmN0aW9uIChNYXNrVHlwZSkge1xyXG4gIE1hc2tUeXBlW01hc2tUeXBlW1wiQWxwaGFcIl0gPSAxXSA9IFwiQWxwaGFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEFscGhhXCJdID0gMl0gPSBcIkludmVydEFscGhhXCI7XHJcbiAgTWFza1R5cGVbTWFza1R5cGVbXCJMdW1hXCJdID0gM10gPSBcIkx1bWFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEx1bWFcIl0gPSA0XSA9IFwiSW52ZXJ0THVtYVwiO1xyXG59KShNYXNrVHlwZSB8fCAoZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlxYzIxdmRtbHVMblJ6SWwwc0ltNWhiV1Z6SWpwYklrcFRUVzkyYVc0aUxDSm1jSE1pTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSW5KdmIzUWlMQ0ptY2lJc0luY2lMQ0pvSWl3aVpHUmtJaXdpYkdGNVpYSnpJaXdpWVhOelpYUnpJaXdpWm05dWRITWlMQ0pzYVhOMElpd2lhWEFpTENKdmNDSXNJbVJ2YlV4aGVXVnlUM0pCYzNObGRFbGtJaXdpYkdGNVpYSWlMQ0pUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFpTENKTVlYbGxja1poWTNSdmNua2lMQ0pvYVdWeVlYSmphSGtpTENKeVpXWWlMQ0p6Y0d4cFkyVWlMQ0p0WVhOclQzSkViMjBpTENKc1lYbGxjbEpsWms5eVNXNWtaWGdpTENKdFlYTnJWSGx3WlNJc0lrMWhjMnRVZVhCbElpd2lRV3h3YUdFaUxDSnNZWGxsY2xKbFppSXNJbXhoZVdWeVNXNWtaWGdpTENKS1UwMXZkbWx1VEdGNVpYSWlMQ0pwYm1SbGVFOW1JaXdpZEhRaUxDSkZjbkp2Y2lJc0ltMWhjMnRNWVhsbGNpSXNJbXhoZVdWeVVtVm1jeUlzSW1admNrVmhZMmdpTENKcGJtNWxja2x1WkdWNElpd2liV0Z6YXlJc0ltMWhjQ0lzSW5OdmNuUWlMQ0poSWl3aVlpSXNJbUZKYm1SbGVDSXNJbUpKYm1SbGVDSXNJbXhoZVdWeVYzSmhjSEJsY2lJc0luSmxaa2xrSWl3aWNIVnphQ0lzSW1sa0lpd2liV0Y0VkdsdFpTSXNJbkpsWkhWalpTSXNJbkFpTENKMklpd2lkVzVwWm05eWJTSXNJa3BUVDA0aUxDSndZWEp6WlNJc0luUnZTbE5QVGlJc0luTjBjbWx1WjJsbWVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVOQk96dEJRVU5CT3p0QlFUQk5RVHM3UVVGRFFUczdPenM3T3pzN096czdPMGxCZWsxeFFrRXNUenM3TzBGQlIycENPenM3T3p0QlFVdEJMSEZDUVVGNVJUdEJRVUZCTEZGQlFUZEVReXhIUVVFMlJDeDFSVUZCTDBNc1JVRkJLME03UVVGQlFTeFJRVUV6UTBNc1MwRkJNa01zZFVWQlFUTkNMRWRCUVRKQ08wRkJRVUVzVVVGQmRFSkRMRTFCUVhOQ0xIVkZRVUZNTEVkQlFVczdPMEZCUVVFN08wRkJRVUU3TzBGQlEzSkZMRk5CUVV0RExFbEJRVXdzUjBGQldUdEJRVU5TUXl4TlFVRkJRU3hGUVVGRkxFVkJRVVZLTEVkQlJFazdRVUZGVWtzc1RVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TFFVWkxPMEZCUjFKTExFMUJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRklTenRCUVVsU1N5eE5RVUZCUVN4SFFVRkhMRVZCUVVVc1EwRktSenRCUVV0U1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk1RVHRCUVUxU1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk9RVHRCUVU5U1F5eE5RVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRTRU1zVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUkVnc1QwRlFRenRCUVZWU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVc1EwRldTVHRCUVZkU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVN1FVRllTU3hMUVVGYU8wRkJZVWc3UVVGRlJEczdPenM3T3p0cFEwRkhZV0lzUnl4RlFVRmhPMEZCUTNSQ0xGZEJRVXRITEVsQlFVd3NRMEZCVlVNc1JVRkJWaXhIUVVGbFNpeEhRVUZtTzBGQlEwZzdRVUZGUkRzN096czdPenRuUTBGSldVTXNTeXhGUVVGbFF5eE5MRVZCUVdkQ08wRkJRM1pETEZkQlFVdERMRWxCUVV3c1EwRkJWVVVzUTBGQlZpeEhRVUZqU2l4TFFVRmtPMEZCUTBFc1YwRkJTMFVzU1VGQlRDeERRVUZWUnl4RFFVRldMRWRCUVdOS0xFMUJRV1E3UVVGRFNEdEJRVVZFT3pzN096czdPelpDUVVsVFdTeHBRaXhGUVVGclJqdEJRVU4yUml4VlFVRkpReXhMUVVGS096dEJRVU5CTEZWQlFVbEVMR2xDUVVGcFFpeFpRVUZaUlN4clFrRkJha01zUlVGQmNVUTdRVUZEYWtSRUxGRkJRVUZCTEV0QlFVc3NSMEZCUjBVc2IwSkJRV0ZETEZOQlFXSXNRMEZCZFVKS0xHbENRVUYyUWl4RlFVRXdReXhMUVVGTFdDeEpRVUZNTEVOQlFWVk5MRTFCUVhCRUxFVkJRVFpFTEV0QlFVdE9MRWxCUVV3c1EwRkJWVThzUzBGQmRrVXNRMEZCVWp0QlFVTklMRTlCUmtRc1RVRkZUeXhKUVVGSkxFOUJRVkZKTEdsQ1FVRlNMRXRCUVN0Q0xGRkJRVzVETEVWQlFUWkRPMEZCUTJoRVF5eFJRVUZCUVN4TFFVRkxMRWRCUVVkRkxHOUNRVUZoUlN4SFFVRmlMRU5CUVdsQ1RDeHBRa0ZCYWtJc1EwRkJVanRCUVVOSUxFOUJSazBzVFVGSFJqdEJRVU5FUXl4UlFVRkJRU3hMUVVGTExFZEJRVWRFTEdsQ1FVRlNPMEZCUTBnN08wRkJRMFFzVjBGQlMxZ3NTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDV1N4TlFVRnNRaXhEUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhEUVVFMVFpeEZRVUVyUWt3c1MwRkJTeXhEUVVGRFdpeEpRVUZ5UXp0QlFVTkJMR0ZCUVU5WkxFdEJRVkE3UVVGRFNEdEJRVVZFT3pzN096czdPenMwUWtGTFVVMHNVeXhGUVVFNFEwTXNaU3hGUVVFMlJUdEJRVUZCTEZWQlFYSkRReXhSUVVGeFF5eDFSVUZCYUVKRExGRkJRVkVzUTBGQlEwTXNTMEZCVHp0QlFVTXZTQ3hWUVVGSlF5eFJRVUZLTzBGQlEwRXNWVUZCU1VNc1ZVRkJTanM3UVVGRFFTeFZRVUZKVEN4bFFVRmxMRmxCUVZsTkxHMUNRVUV2UWl4RlFVRTJRenRCUVVONlEwWXNVVUZCUVVFc1VVRkJVU3hIUVVGSFNpeGxRVUZZTzBGQlEwRkxMRkZCUVVGQkxGVkJRVlVzUjBGQlJ5eExRVUZMZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENjVUlzVDBGQmJFSXNRMEZCTUVKSUxGRkJRVkVzUTBGQlEzWkNMRWxCUVc1RExFTkJRV0k3UVVGRFFYVkNMRkZCUVVGQkxGRkJRVkVzUTBGQlEzWkNMRWxCUVZRc1EwRkJZekpDTEVWQlFXUXNSMEZCYlVKUUxGRkJRVzVDTzBGQlEwZ3NUMEZLUkN4TlFVbFBPMEZCUTBoSkxGRkJRVUZCTEZWQlFWVXNSMEZCUjB3c1pVRkJZanRCUVVOQkxHRkJRVXR1UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnRRaXhWUVVGc1FpeEZRVUU0UWtjc1JVRkJPVUlzUjBGQmJVTlFMRkZCUVc1RE8wRkJRMGc3TzBGQlEwUXNWVUZCU1Vrc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMRGhEUVVGV0xFTkJRVTQ3UVVGRFNEczdRVUZEUkN4VlFVRkpReXhUUVVGS096dEJRVU5CTEZWQlFVbFlMRk5CUVZNc1dVRkJXVXdzYTBKQlFYcENMRVZCUVRaRE8wRkJRM3BEWjBJc1VVRkJRVUVzVTBGQlV5eEhRVUZIWml4dlFrRkJZVU1zVTBGQllpeERRVUYxUWtjc1UwRkJka0lzUlVGQmEwTXNTMEZCUzJ4Q0xFbEJRVXdzUTBGQlZVMHNUVUZCTlVNc1JVRkJjVVFzUzBGQlMwNHNTVUZCVEN4RFFVRlZUeXhMUVVFdlJDeERRVUZhTzBGQlEwZ3NUMEZHUkN4TlFVVlBPMEZCUTBoelFpeFJRVUZCUVN4VFFVRlRMRWRCUVVkWUxGTkJRVm83UVVGRFNEczdRVUZEUkN4WFFVRkxiRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q1dTeE5RVUZzUWl4RFFVRjVRazhzVlVGQmVrSXNSVUZCY1VNc1EwRkJja01zUlVGQmQwTkxMRk5CUVZNc1EwRkJRemRDTEVsQlFXeEVPMEZCUTBFc1lVRkJUelpDTEZOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN09FSkJSMVZETEZNc1JVRkJkME03UVVGQlFUczdRVUZET1VOQkxFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZEYmtJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVOeVF5eFpRVUZKY0VJc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWY3lRaXhGUVVGWUxFbEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM0JDTEdOQlFVMUlMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeGpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHZENRVUZOVXl4SlFVRkpMRWRCUVVjc1MwRkJTU3hEUVVGRGFrTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVOQlFXSTdPMEZCUTBFc1owSkJRVWxSTEZWQlFWVXNTVUZCU1N4RFFVRmtMRWxCUVcxQ1JpeFRRVUZUTEVOQlFVTkZMRlZCUVZVc1IwRkJSeXhEUVVGa0xFTkJRVlFzUTBGQk1FSm9ReXhKUVVFeFFpeEpRVUZyUTJsRExFbEJRWHBFTEVWQlFTdEVPMEZCUXpORVNDeGpRVUZCUVN4VFFVRlRMRU5CUVVOaUxFMUJRVllzUTBGQmFVSmxMRlZCUVdwQ0xFVkJRVFpDTEVOQlFUZENMRVZCUVdkRExFbEJRVWxRTEcxQ1FVRktMRU5CUVdsQ1VTeEpRVUZxUWl4RFFVRm9RenRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEU5QlZrUTdRVUZYUVVnc1RVRkJRVUVzVTBGQlV5eEhRVUZIUVN4VFFVRlRMRU5CUVVOSkxFZEJRVllzUTBGQll5eFZRVUZEZEVJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVNM1F5eGxRVUZQTzBGQlEwaHdRaXhWUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUkVjN1FVRkZTRzlDTEZWQlFVRkJMRlZCUVZVc1JVRkJWa0U3UVVGR1J5eFRRVUZRTzBGQlNVZ3NUMEZNVnl4RlFVdFVSeXhKUVV4VExFTkJTMG9zVlVGQlEwTXNRMEZCUkN4RlFVRkpReXhEUVVGS0xFVkJRVlU3UVVGRFpDeFpRVUZOUXl4TlFVRk5MRWRCUVVjc1MwRkJTU3hEUVVGRGRFTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDY1VJc1QwRkJiRUlzUTBGQk1FSlZMRU5CUVVNc1EwRkJRM2hDTEV0QlFVWXNRMEZCVVZvc1NVRkJiRU1zUTBGQlpqczdRVUZEUVN4WlFVRk5kVU1zVFVGQlRTeEhRVUZITEV0QlFVa3NRMEZCUTNaRExFbEJRVXdzUTBGQlZVc3NUVUZCVml4RFFVRnJRbkZDTEU5QlFXeENMRU5CUVRCQ1Z5eERRVUZETEVOQlFVTjZRaXhMUVVGR0xFTkJRVkZhTEVsQlFXeERMRU5CUVdZN08wRkJRMEVzWlVGQlVYTkRMRTFCUVUwc1IwRkJSME1zVFVGQlZpeEpRVUZ6UWtnc1EwRkJReXhEUVVGRFNpeFZRVUZHTEVkQlFXVkxMRU5CUVVNc1EwRkJRMHdzVlVGQk9VTTdRVUZEU0N4UFFWUlhMRVZCVTFSRkxFZEJWRk1zUTBGVFRDeFZRVUZCVFN4WlFVRlpPMEZCUVVFc1pVRkJTVUVzV1VGQldTeERRVUZETlVJc1MwRkJha0k3UVVGQlFTeFBRVlJRTEVOQlFWbzdRVUZWUVd0Q0xFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZCYmtJc1MwRkJTeXhGUVVGSk8wRkJRM1pDTEZsQlFVMVpMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeFpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xGVkJRVUVzUzBGQlNTeERRVUZEZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENXU3hOUVVGc1FpeERRVUY1UWs4c1ZVRkJla0lzUlVGQmNVTXNRMEZCY2tNN1FVRkRTRHM3UVVGRFJGb3NVVUZCUVVFc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWZFZMRVZCUVZnc1IwRkJaMElzUjBGQmFFSTdRVUZEU0N4UFFVNUVPMEZCVDBFc1ZVRkJUU3RDTEV0QlFVc3NSMEZCUnl4dlFrRkJaRHRCUVVOQkxGZEJRVXQ2UXl4SlFVRk1MRU5CUVZWTkxFMUJRVllzUTBGQmEwSnZReXhKUVVGc1FpeERRVUYxUWp0QlFVTnVRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZSaXhMUVVSbE8wRkJSVzVDY0VNc1VVRkJRVUVzVFVGQlRTeEZRVUZGZVVJc1UwRkJVeXhEUVVGRFNTeEhRVUZXTEVOQlFXTXNWVUZCUVZnc1VVRkJVVHRCUVVGQkxHbENRVUZKUVN4UlFVRlJMRU5CUVVOMlFpeEpRVUZpTzBGQlFVRXNVMEZCZEVJN1FVRkdWeXhQUVVGMlFqdEJRVWxCTEdGQlFVOTVReXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3TzJkRFFVZFpkRUlzWlN4RlFVRjNRenRCUVVOb1JDeFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5JT3p0QlFVTkVMRmRCUVV0dVFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUY2UWl4RlFVRnhReXhEUVVGeVF6dEJRVU5JTzBGQlJVUTdPenM3T3pzclFrRkhWMHdzWlN4RlFVRjNRenRCUVVNdlF5eFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5CU1N4UlFVRkJRU3hSUVVGUkxFZEJRVWNzU1VGQlNVVXNiVUpCUVVvc1EwRkJhVUlzUzBGQlMzcENMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUW0xQ0xGVkJRV3hDTEVOQlFXcENMRU5CUVZnN1FVRkRTRHM3UVVGRFJDeFZRVUZKUkN4UlFVRlJMRU5CUVVOMlFpeEpRVUZVTEVOQlFXTXlRaXhGUVVGc1FpeEZRVUZ6UWp0QlFVTnNRa29zVVVGQlFVRXNVVUZCVVN4RFFVRkRka0lzU1VGQlZDeERRVUZqTWtJc1JVRkJaQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJMR0ZCUVVzelFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUZWTEVkQlFVY3NRMEZCZEVNc1JVRkJlVU1zUTBGQmVrTTdRVUZEU0N4UFFVaEVMRTFCUjA4c1NVRkJTU3hMUVVGTGVFSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGMFF5eEZRVUV3UXp0QlFVTTNReXhoUVVGTE0wSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGc1F5eEhRVUYxUXl4RFFVRjJRenRCUVVOQkxHRkJRVXN6UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSlpMRTFCUVd4Q0xFTkJRWGxDVHl4VlFVRjZRaXhGUVVGeFF5eERRVUZ5UXp0QlFVTklMRTlCU0Uwc1RVRkhRVHRCUVVOSUxHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMR3RFUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LTzBGQlJVUTdPenM3T3p0clEwRkhZenRCUVVOV0xGZEJRVXMxUWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUjBGQmJVSXNSVUZCYmtJN1FVRkRTRHRCUVVWRU96czdPenM3T0VKQlIxVTdRVUZEVGl4VlFVRkpkVU1zVDBGQlR5eEhRVUZITEV0QlFVczFReXhKUVVGTUxFTkJRVlZMTEUxQlFWWXNRMEZCYTBKM1F5eE5RVUZzUWl4RFFVRjVRaXhWUVVGRFF5eERRVUZFTEVWQlFVbERMRU5CUVVvN1FVRkJRU3hsUVVGVlJDeERRVUZETEVkQlFVZERMRU5CUVVNc1EwRkJRM0pETEVWQlFVNHNSMEZCV1hGRExFTkJRVU1zUTBGQlEzSkRMRVZCUVdRc1IwRkJiMEp2UXl4RFFVRTVRanRCUVVGQkxFOUJRWHBDTEVWQlFUQkVMRU5CUVRGRUxFTkJRV1E3UVVGRFFTeFhRVUZMT1VNc1NVRkJUQ3hEUVVGVlZTeEZRVUZXTEVkQlFXVnJReXhQUVVGbU8wRkJRMEVzVjBGQlN6VkRMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUWpCQ0xFOUJRV3hDTEVOQlFUQkNMRlZCUVVGdVFpeExRVUZMTzBGQlFVRXNaVUZCU1VFc1MwRkJTeXhEUVVGRFJpeEZRVUZPTEVkQlFWZHJReXhQUVVGbU8wRkJRVUVzVDBGQkwwSTdRVUZEU0R0QlFVVkVPenM3T3pzN0swSkJSMWM3UVVGRFVDeFhRVUZMU1N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZjc1MwRkJTME1zVFVGQlRDeEZRVUZZTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN05rSkJSMU03UVVGRFRDeFhRVUZMU0N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUnl4VFFVRk1MRU5CUVdVc1MwRkJTM0JFTEVsQlFYQkNMRU5CUVZBN1FVRkRTRHM3T3pzN096dEpRVTFQY1VJc1VUczdPMWRCUVVGQkxGRTdRVUZCUVVFc1JVRkJRVUVzVVN4RFFVRkJRU3hSTzBGQlFVRkJMRVZCUVVGQkxGRXNRMEZCUVVFc1VUdEJRVUZCUVN4RlFVRkJRU3hSTEVOQlFVRkJMRkU3UVVGQlFVRXNSVUZCUVVFc1VTeERRVUZCUVN4Uk8wZEJRVUZCTEZFc2QwSkJRVUZCTEZFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QkJibWx0WVhScGIyNHNJRk5vWVhCbFRHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNCY0lpNHZZVzVwYldGMGFXOXVYQ0k3WEc1cGJYQnZjblFnZXlCS1UwMXZkbWx1VEdGNVpYSXNJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1cGJYQnZjblFnZFhWcFpDQm1jbTl0SUNkMWRXbGtMM1kwSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nU2xOTmIzWnBiaUI3WEc0Z0lDQWdjSEpwZG1GMFpTQnliMjkwT2lCQmJtbHRZWFJwYjI0N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1puQnpJRzUxYldKbGNpQnZaaUJtY21GdFpYTWdjR1Z5SUhObFkyOXVaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjNhV1IwYUNCM2FXUjBhQ0J2WmlCMmFXVjNjRzl5ZENBb2NIZ3BYRzRnSUNBZ0lDb2dRSEJoY21GdElHaGxhV2RvZENCb1pXbG5hSFFnYjJZZ2RtbGxkM0J2Y25RZ0tIQjRLVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1p3Y3pvZ2JuVnRZbVZ5SUQwZ016QXNJSGRwWkhSb09pQnVkVzFpWlhJZ1BTQTRNREFzSUdobGFXZG9kRG9nYm5WdFltVnlJRDBnTmpBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5T2lCbWNITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM09pQjNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2c2SUdobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeWN6b2dXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjM05sZEhNNklGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBPaUJiWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCbWNITWdiblZ0WW1WeUlHOW1JR1p5WVcxbGN5QndaWElnYzJWamIyNWtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBSbkpoYldWU1lYUmxLR1p3Y3pvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNW1jaUE5SUdad2MxeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCM2FXUjBhQ0IzYVdSMGFDQnZaaUIyYVdWM2NHOXlkQ0FvY0hncFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdobGFXZG9kQ0JvWldsbmFIUWdiMllnZG1sbGQzQnZjblFnS0hCNEtWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGWnBaWGR3YjNKMEtIZHBaSFJvT2lCdWRXMWlaWElzSUdobGFXZG9kRG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEM1M0lEMGdkMmxrZEdoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MExtZ2dQU0JvWldsbmFIUmNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmhaR1FnWVNCemFXMXdiR1VnWjNKaGNHaHBZMkZzSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHUnZiVXhoZVdWeVQzSkJjM05sZEVsa0lHRWdVMVpISUdWc1pXMWxiblFnUkU5TklHOXlJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQmhjM05sZENCSlJDQnVaV1ZrY3lCMGJ5QmlaU0JwYm5ObGNuUmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRXhoZVdWeUtHUnZiVXhoZVdWeVQzSkJjM05sZEVsa09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUWdmQ0JLVTAxdmRtbHVUR0Y1WlhJZ2ZDQlNaV1psY21WdVkyVkpSQ2s2SUVwVFRXOTJhVzVNWVhsbGNpQjdYRzRnSUNBZ0lDQWdJR3hsZENCc1lYbGxjam9nU2xOTmIzWnBia3hoZVdWeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FnYVc1emRHRnVZMlZ2WmlCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlJRDBnVEdGNVpYSkdZV04wYjNKNUxtaHBaWEpoY21Ob2VTaGtiMjFNWVhsbGNrOXlRWE56WlhSSlpDd2dkR2hwY3k1eWIyOTBMbUZ6YzJWMGN5RXNJSFJvYVhNdWNtOXZkQzVtYjI1MGN5RXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JQ2hrYjIxTVlYbGxjazl5UVhOelpYUkpaQ2tnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjaUE5SUV4aGVXVnlSbUZqZEc5eWVTNXlaV1lvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2lBOUlHUnZiVXhoZVdWeVQzSkJjM05sZEVsa1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtEQXNJREFzSUd4aGVXVnlMbkp2YjNRcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1lYbGxjbHh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRZWE5yVDNKRWIyMGdZU0JUVmtjZ1pXeGxiV1Z1ZENCRVQwMGdiM0lnU2xOTmIzWnBia3hoZVdWeUlIUnZJR0psSUhSb1pTQnRZWE5yWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnNZWGxsY2lCMGJ5QmlaU0IwYUdVZ2JXRnphMlZrSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWhjMnRVZVhCbElIZG9hV05vSUhSNWNHVWdiMllnYldGemF5QjBieUIxYzJVc0lIVnpaU0JnVFdGemExUjVjR1V1S21BZ2RHOGdjM0JsWTJsbWVWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGa1pFMWhjMnNvYldGemEwOXlSRzl0T2lCS1UwMXZkbWx1VEdGNVpYSWdmQ0JUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFzSUd4aGVXVnlVbVZtVDNKSmJtUmxlRG9nYm5WdFltVnlJSHdnU2xOTmIzWnBia3hoZVdWeUxDQnRZWE5yVkhsd1pUb2dUV0Z6YTFSNWNHVWdQU0JOWVhOclZIbHdaUzVCYkhCb1lTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpTWldZNklFcFRUVzkyYVc1TVlYbGxjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpKYm1SbGVEb2diblZ0WW1WeVhHNGdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNsSmxaazl5U1c1a1pYZ2dhVzV6ZEdGdVkyVnZaaUJLVTAxdmRtbHVUR0Y1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlVbVZtSUQwZ2JHRjVaWEpTWldaUGNrbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnZEdocGN5NXliMjkwTG14aGVXVnljeUV1YVc1a1pYaFBaaWhzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1l1Y205dmRDNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVZ0c1lYbGxja2x1WkdWNFhTNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3hoZVdWeVNXNWtaWGdnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBkcGRtVnVJR3hoZVdWeUlHbHpJRzV2ZENCaElHMWxiV0psY2lCdlppQjBhR2x6SUVwVFRXOTJhVzR1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnYldGemEweGhlV1Z5T2lCS1UwMXZkbWx1VEdGNVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0cxaGMydFBja1J2YlNCcGJuTjBZVzVqWlc5bUlGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRnphMHhoZVdWeUlEMGdUR0Y1WlhKR1lXTjBiM0o1TG1ocFpYSmhjbU5vZVNodFlYTnJUM0pFYjIwc0lIUm9hWE11Y205dmRDNWhjM05sZEhNaExDQjBhR2x6TG5KdmIzUXVabTl1ZEhNaEtWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGemEweGhlV1Z5SUQwZ2JXRnphMDl5Ukc5dFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREFzSUcxaGMydE1ZWGxsY2k1eWIyOTBLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0Z6YTB4aGVXVnlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHeGhlV1Z5VW1WbWN5QmhJSE5sZENCdlppQnNZWGxsY25NZ2RHOGdZbVVnY0dGamEyVmtJR0Z6SUdGdUlHRnpjMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiV0ZyWlVGemMyVjBLR3hoZVdWeVVtVm1jem9nU2xOTmIzWnBia3hoZVdWeVcxMHBPaUJTWldabGNtVnVZMlZKUkNCN1hHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5NW1iM0pGWVdOb0tDaHNZWGxsY2l3Z2FXNXVaWEpKYm1SbGVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlMbkp2YjNRdWRIUWdQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlTVzVrWlhnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGMyc2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJVnRzWVhsbGNrbHVaR1Y0SUMwZ01WMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVibVZ5U1c1a1pYZ2dQVDBnTUNCOGZDQnNZWGxsY2xKbFpuTmJhVzV1WlhKSmJtUmxlQ0F0SURGZExuSnZiM1FnSVQwZ2JXRnpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG5Od2JHbGpaU2hwYm01bGNrbHVaR1Y0TENBd0xDQnVaWGNnU2xOTmIzWnBia3hoZVdWeUtHMWhjMnNnWVhNZ1UyaGhjR1ZNWVhsbGNpa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5QTlJR3hoZVdWeVVtVm1jeTV0WVhBb0tHeGhlV1Z5TENCcGJtNWxja2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhlV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWJtVnlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrdWMyOXlkQ2dvWVN3Z1lpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lVbHVaR1Y0SUQwZ2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lFdWFXNWtaWGhQWmloaExteGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpU1c1a1pYZ2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJUzVwYm1SbGVFOW1LR0l1YkdGNVpYSXVjbTl2ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9ZVWx1WkdWNElDMGdZa2x1WkdWNEtTQjhmQ0FvWVM1cGJtNWxja2x1WkdWNElDMGdZaTVwYm01bGNrbHVaR1Y0S1Z4dUlDQWdJQ0FnSUNCOUtTNXRZWEFvYkdGNVpYSlhjbUZ3Y0dWeUlEMCtJR3hoZVdWeVYzSmhjSEJsY2k1c1lYbGxjaWxjYmlBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG1admNrVmhZMmdvYkdGNVpYSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEpKYm1SbGVDQTlJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbWx1WkdWNFQyWW9iR0Y1WlhJdWNtOXZkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNrbHVaR1Y0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbk53YkdsalpTaHNZWGxsY2tsdVpHVjRMQ0F4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEl1Y205dmRDNXZjQ0E5SURsbE9WeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaV1pKWkNBOUlIVjFhV1FvS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdVlYTnpaWFJ6SVM1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ5WldaSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnljem9nYkdGNVpYSlNaV1p6TG0xaGNDaHNZWGxsY2xKbFppQTlQaUJzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZtU1dSY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGNVpYSlNaV1pQY2tsdVpHVjRJR0VnU2xOTmIzWnBia3hoZVdWeUlHOXlJR2x1WkdWNElHOW1JR3hoZVdWeUlIUnZJSEpsYlc5MlpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaVXhoZVdWeUtHeGhlV1Z5VW1WbVQzSkpibVJsZURvZ2JuVnRZbVZ5SUh3Z1NsTk5iM1pwYmt4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2xKbFpqb2dTbE5OYjNacGJreGhlV1Z5WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2tsdVpHVjRPaUJ1ZFcxaVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0d4aGVXVnlVbVZtVDNKSmJtUmxlQ0JwYm5OMFlXNWpaVzltSUVwVFRXOTJhVzVNWVhsbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEpTWldZZ1BTQnNZWGxsY2xKbFprOXlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeVNXNWtaWGdnUFNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVM1cGJtUmxlRTltS0d4aGVXVnlVbVZtTG5KdmIzUXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxja2x1WkdWNElEMGdiR0Y1WlhKU1pXWlBja2x1WkdWNFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREVwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnRZWE5ySUc5eUlHMWhjMnRsWkNCc1lYbGxjaUIwYnlCeVpXMXZkbVZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzF2ZG1WTllYTnJLR3hoZVdWeVVtVm1UM0pKYm1SbGVEb2diblZ0WW1WeUlId2dTbE5OYjNacGJreGhlV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNsSmxaam9nU2xOTmIzWnBia3hoZVdWeVhHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNrbHVaR1Y0T2lCdWRXMWlaWEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhlV1Z5VW1WbVQzSkpibVJsZUNCcGJuTjBZVzVqWlc5bUlFcFRUVzkyYVc1TVlYbGxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWWdQU0JzWVhsbGNsSmxaazl5U1c1a1pYaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5VW1WbUxuSnZiM1FwWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjbEpsWmlBOUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lGYmJHRjVaWEpKYm1SbGVGMGdZWE1nVTJoaGNHVk1ZWGxsY2lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYkdGNVpYSlNaV1l1Y205dmRDNTBkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWXVjbTl2ZEM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNElDMGdNU3dnTVNsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5KdmIzUXViR0Y1WlhKeklWdHNZWGxsY2tsdVpHVjRJQ3NnTVYwdWRIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaFcyeGhlV1Z5U1c1a1pYZ2dLeUF4WFM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNExDQXhLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdhVzV3ZFhRZ2JHRjVaWElnYVhNZ2JtOTBJR0VnYldGemF5QnZjaUJoSUcxaGMydGxaQ0JzWVhsbGNpNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTJ4bFlYSWdZV3hzSUd4aGVXVnljMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNaV0Z5VEdGNVpYSnpLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SUQwZ1cxMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnRZV3RsSUdGc2JDQnNZWGxsY25NZ1pXNWtJR0YwSUhOaGJXVWdkR2x0WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1YVdadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWGhVYVcxbElEMGdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjbVZrZFdObEtDaHdMQ0IyS1NBOVBpQndJRHdnZGk1dmNDRWdQeUIyTG05d0lTQTZJSEFzSURBcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXZjQ0E5SUcxaGVGUnBiV1ZjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwTG14aGVXVnljeUV1Wm05eVJXRmphQ2hzWVhsbGNpQTlQaUJzWVhsbGNpNXZjQ0E5SUcxaGVGUnBiV1VwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWlhod2IzSjBJRXh2ZEhScFpTQmhjeUJLWVhaaFUyTnlhWEIwSUU5aWFtVmpkQ0JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBiMDlpYW1WamRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9kR2hwY3k1MGIwcFRUMDRvS1NsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCbGVIQnZjblFnVEc5MGRHbGxJR0Z6SUVwVFQwNGdkR1Y0ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1YzNSeWFXNW5hV1o1S0hSb2FYTXVjbTl2ZENsY2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1bGVIQnZjblFnZXlCRllYTnBibWRHWVdOMGIzSjVJSDBnWm5KdmJTQW5MaTlsWVhOcGJtY25YRzVsZUhCdmNuUWdleUJRWVhSb1RXRnJaWElnZlNCbWNtOXRJQ2N1TDNCaGRHZ25YRzVsZUhCdmNuUWdaVzUxYlNCTllYTnJWSGx3WlNCN1hHNGdJQ0FnUVd4d2FHRWdQU0F4TEZ4dUlDQWdJRWx1ZG1WeWRFRnNjR2hoSUQwZ01peGNiaUFnSUNCTWRXMWhJRDBnTXl4Y2JpQWdJQ0JKYm5abGNuUk1kVzFoSUQwZ05GeHVmU0pkZlE9PSIsIi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmJ1bmRsZS5qcyc7XHJcbi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmpzJztcclxuaW1wb3J0IEpTTW92aW4gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5leHBvcnQgbGV0IGdsb2JhbFZhciA9IHtcclxuICAgIGpzTW92aW46IG5ldyBKU01vdmluKCksXHJcbiAgICBtYXJrTGF5ZXJzOiBuZXcgTWFwKClcclxuICAgIC8vIGFzc2V0czogXHJcbn07IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJpbXBvcnQgQ2hhcnRTcGVjIGZyb20gJy4vQ2hhcnRTcGVjLmpzJztcclxuaW1wb3J0IEFjdGlvblNwZWMgZnJvbSAnLi9BY3Rpb25TcGVjLmpzJztcclxuaW1wb3J0IEdyb3VwaW5nU3BlYyBmcm9tICcuL0dyb3VwaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCB7IENhbmlzVXRpbCB9IGZyb20gJy4vdXRpbC9VdGlsLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcbmltcG9ydCB7IGdldEJvdW5kaW5nQm94IH0gZnJvbSAnanNtb3Zpbi9iaW4vaGVscGVyJztcclxuaW1wb3J0IHsgTGF5ZXJGYWN0b3J5IH0gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5jbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5faWQ7XHJcbiAgICAgICAgdGhpcy5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuX2FsaWduID0gQW5pbWF0aW9uLmFsaWduVGFyZ2V0Lm9iamVjdDtcclxuICAgICAgICB0aGlzLmdyb3VwaW5nID0gbmV3IEdyb3VwaW5nU3BlYygpO1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAvL3NhdmUgYWxsIGRvbSBhdHRycyBvZiB0aGUgbWFya3Mgc2VsZWN0ZWQgaW4gdGhpcyBhbmltYXRpb25cclxuICAgICAgICAvLyBBbmltYXRpb24uZG9tTWFya3MgPSBuZXcgTWFwKCk7Ly9rZXk6IG1hcmtJZCwgdmFsdWU6IGRvbSBhdHRyc1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhcnRUaW1lID0gMTAwMDAwMDtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbkVuZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHt9O1xyXG4gICAgICAgIHRoaXMubGVhdmVzID0gW107XHJcbiAgICAgICAgLy8gdGhpcy5hbGxNYXJrc1RoaXNBbmkgPSBbXTtcclxuICAgICAgICB0aGlzLm1hcmtzSW5PcmRlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuYW5pc0FsaWduZWQgPSBbXTtcclxuICAgICAgICB0aGlzLmFsaWduT25EYXRhID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgaWQoaWQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2lkID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgICAgICAgICAgfSBlbHNlIHsvL2FkZCBkZWZhdWx0IGlkXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pZCA9ICdhbmknICsgQW5pbWF0aW9uLmFuaUlkeDtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmlJZHgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbmltYXRpb24gJyArIHRoaXMuX2lkICsgJyBhbHJlYWR5IGhhcyBhbiBpZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgYWxpZ24oYWxpZ24pIHtcclxuICAgICAgICBpZiAodHlwZW9mIGFsaWduICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYWxpZ24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FsaWduID0gYWxpZ247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhbGlnbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWxpZ247XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgcmVwbGFjZUNvbnN0YW50cyhjb25zdGFudHMsIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgLy9yZXBsYWNlIGNvbnN0YW50cyBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgdGhpcy5yZXBsYWNlT2Zmc2V0Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG5cclxuICAgICAgICAvL3JlcGxhY2UgY29uc3RhbnRzIGluIGdyb3VwaW5nIHRpbWluZ1xyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnJlcGxhY2VEZWxheUNvbnN0KGNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vcmVwbGFjZSBjb25zdGFudHMgaW4gYWN0aW9uIHRpbWluZ1xyXG4gICAgICAgIHRoaXMuYWN0aW9ucy5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICAgICAgICBhLnJlcGxhY2VPZmZzZXRDb25zdChjb25zdGFudHMsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIGEucmVwbGFjZUR1cmF0aW9uQ29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0cmFuc2xhdGUgZnJvbSBqc29uIG9iamVjdCB0byBBbmltYXRpb24gb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0pTT04gb2JqfSBhbmltYXRpb25Kc29uIFxyXG4gICAgICovXHJcbiAgICB0cmFuc2xhdGUoYW5pbWF0aW9uSnNvbiwgdXNlZENoYW5nZWRBdHRycywgdXBkYXRpbmcsIG1hcmtzVGhpc0FuaSwgc3RhdHVzID0ge30pIHtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gYW5pbWF0aW9uSnNvbi5jaGFydElkeDtcclxuICAgICAgICBpZiAoIXVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBhbmltYXRpb25Kc29uLnNlbGVjdG9yOy8vaW5pdCBzZWxlY3RvclxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlkID0gYW5pbWF0aW9uSnNvbi5pZDtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGFuaW1hdGlvbkpzb24ucmVmZXJlbmNlO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gYW5pbWF0aW9uSnNvbi5vZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5hbGlnbiA9IGFuaW1hdGlvbkpzb24uYWxpZ247XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhbmltYXRpb25Kc29uLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykgey8vaW5pdCBncm91cGluZ1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLmluaXRHcm91cGluZyhhbmltYXRpb25Kc29uLmdyb3VwaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdHJhbnNsYXRlIGFjdGlvbiBzcGVjcyBpbiB0aGUgYW5pbWF0aW9uIEpzb25cclxuICAgICAgICBpZiAodHlwZW9mIGFuaW1hdGlvbkpzb24uZWZmZWN0cyAhPT0gJ3VuZGVmaW5lZCcpIHsvL2luaXQgYWN0aW9uc1xyXG4gICAgICAgICAgICBpZiAodXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL21lcmdlIHN0YXJ0IHdpdGggdHJhbnNYLCB0cmFuc1ksIHNjYWxlWCBhbmQgc2NhbGVZXHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlSWR4cyA9IFtbXV07Ly9hcnJheSBvZiBhcnJheSwgbGlrZSBbWzAsIDFdLCBbMyw0LDVdXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGFjdGlvbkpzb247IGkgPCBhbmltYXRpb25Kc29uLmVmZmVjdHMubGVuZ3RoIHwgKGFjdGlvbkpzb24gPSBhbmltYXRpb25Kc29uLmVmZmVjdHNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25Kc29uLnJlZmVyZW5jZSA9PT0gVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydCB8fCB0eXBlb2YgYWN0aW9uSnNvbi5yZWZlcmVuY2UgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VJZHhzW21lcmdlSWR4cy5sZW5ndGggLSAxXS5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXJnZUlkeHMucHVzaChbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY3Rpb24gaW5kZXggdG8gbWVyZ2U6ICcsIG1lcmdlSWR4cyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZEFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2FibGVBY3Rpb25UeXBlcyA9IFtcclxuICAgICAgICAgICAgICAgIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWCxcclxuICAgICAgICAgICAgICAgIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWSxcclxuICAgICAgICAgICAgICAgIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWFksXHJcbiAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWCxcclxuICAgICAgICAgICAgICAgIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVZLFxyXG4gICAgICAgICAgICAgICAgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5zY2FsZVhZLFxyXG4gICAgICAgICAgICAgICAgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kYXRhQ2hhbmdlXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIG1lcmdlSWR4cy5mb3JFYWNoKChhY3Rpb25JZHhzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhlIHJlY29yZGVkIGFjdGlvbnMgY2FuIGJlIG1lcmdlZCBhY2NvcmRpbmcgdG8gdGhlaXIgZWZmZWN0IHR5cGVcclxuICAgICAgICAgICAgICAgIGxldCBtZXJnZWRBY3Rpb25Kc29uID0ge30sIG1lcmdlZCA9IGZhbHNlLCBjb3VudCA9IDAsIG1lcmdlVHlwZSA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdOy8vbWVyZ2VUeXBlOiBbdHJhbnNYLCB0cmFuc1ksIHNjYWxlWCwgc2NhbGVZLCBkYXRhQ2hhbmdlXSwgZmFsc2U6bm90IHRyYW5zaXRpbmcsIHRydWU6dHJhbnNpdGluZ1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uSWR4cy5mb3JFYWNoKGFJZHggPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcEFjdGlvbkpzb24gPSBhbmltYXRpb25Kc29uLmVmZmVjdHNbYUlkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lcmdhYmxlQWN0aW9uVHlwZXMuaW5jbHVkZXModG1wQWN0aW9uSnNvbi50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0bXBBY3Rpb25Kc29uKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkQWN0aW9uSnNvbltrXSA9IHRtcEFjdGlvbkpzb25ba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlVHlwZVswXSA9ICh0bXBBY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWCB8fCB0bXBBY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWFkgfHwgbWVyZ2VUeXBlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VUeXBlWzFdID0gKHRtcEFjdGlvbkpzb24udHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy50cmFuc2xhdGVZIHx8IHRtcEFjdGlvbkpzb24udHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy50cmFuc2xhdGVYWSB8fCBtZXJnZVR5cGVbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZVR5cGVbMl0gPSAodG1wQWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWCB8fCB0bXBBY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVYWSB8fCBtZXJnZVR5cGVbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZVR5cGVbM10gPSAodG1wQWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWSB8fCB0bXBBY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVYWSB8fCBtZXJnZVR5cGVbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZVR5cGVbNF0gPSAodG1wQWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLmRhdGFDaGFuZ2UgfHwgbWVyZ2VUeXBlWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRBY3Rpb25zLnB1c2godG1wQWN0aW9uSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChtZXJnZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZEFjdGlvbkpzb24udHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMubWVyZ2VkVHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkQWN0aW9uSnNvbi5tZXJnZVR5cGUgPSBtZXJnZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlZEFjdGlvbnMucHVzaChtZXJnZWRBY3Rpb25Kc29uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWVyZ2VkIGFjdGlvbnM6ICcsIG1lcmdlZEFjdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgLy90cmFuc2xhdGUgYWN0aW9ucyB0byB1cGRhdGVzIG9mIHZpc3VhbCBjaGFubmVsc1xyXG4gICAgICAgICAgICBsZXQgcHJldmlvdXNUcmFucyA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlXTsvL1tzY2FsZVgsIHNjYWxlWSwgZGF0YUNoYW5nZV1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGFjdGlvbkpzb247IGkgPCBtZXJnZWRBY3Rpb25zLmxlbmd0aCB8IChhY3Rpb25Kc29uID0gbWVyZ2VkQWN0aW9uc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkpzb24udHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5zY2FsZVggfHwgYWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWFkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1RyYW5zWzBdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWSB8fCBhY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVYWSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVHJhbnNbMV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuZGF0YUNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVHJhbnNbMl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uSnNvbi5tZXJnZVR5cGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNUcmFuc1swXSA9IChwcmV2aW91c1RyYW5zWzBdIHx8IGFjdGlvbkpzb24ubWVyZ2VUeXBlWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1RyYW5zWzFdID0gKHByZXZpb3VzVHJhbnNbMV0gfHwgYWN0aW9uSnNvbi5tZXJnZVR5cGVbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVHJhbnNbMl0gPSAocHJldmlvdXNUcmFuc1syXSB8fCBhY3Rpb25Kc29uLm1lcmdlVHlwZVs0XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25Kc29uLmNoYXJ0SWR4ID0gYW5pbWF0aW9uSnNvbi5jaGFydElkeDtcclxuICAgICAgICAgICAgICAgIGxldCB2aXNBdHRyQWN0aW9uSnNvbkFyciA9IEFjdGlvblNwZWMudHJhbnNUb1Zpc3VhbEF0dHJBY3Rpb24oYWN0aW9uSnNvbiwgcHJldmlvdXNUcmFucywgYW5pbWF0aW9uSnNvbi5jaGFydElkeCwgdXNlZENoYW5nZWRBdHRycywgbWFya3NUaGlzQW5pLCBzdGF0dXMpOy8vdHJhbnNsYXRlIHRlbXBsYXRlcyB0byBuby10ZW1wbGF0ZXNcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0cmFuc2xhdGVkIHZpc3VhbCBhY3Rpb246ICcsIHZpc0F0dHJBY3Rpb25Kc29uQXJyKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCB2aXNBdHRyQWN0aW9uSnNvbjsgaiA8IHZpc0F0dHJBY3Rpb25Kc29uQXJyLmxlbmd0aCB8ICh2aXNBdHRyQWN0aW9uSnNvbiA9IHZpc0F0dHJBY3Rpb25Kc29uQXJyW2pdKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvbiA9IG5ldyBBY3Rpb25TcGVjKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uLmluaXRBY3Rpb24odmlzQXR0ckFjdGlvbkpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKHRtcEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGN1bGF0ZSB0aW1pbmcgZm9yIGVhY2ggbWFyaztcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hcmtJZHMgOiBhcnJheSBvZiBtYXJrIGlkc1xyXG4gICAgICogQHBhcmFtIHtBbmltYXRpb259IGxhc3RBbmltYXRpb24gOiBsYXN0IGFuaW1hdGlvbiBpbiBvcmRlciB0byBjYWxjdWxhdGUgdGltZVxyXG4gICAgICovXHJcbiAgICAvLyBjYWxBbmlUaW1lKG1hcmtJZHMsIGxhc3RBbmltYXRpb24pIHtcclxuICAgIGNhbEFuaVRpbWUobWFya0lkcykge1xyXG4gICAgICAgIGxldCBsYXN0QW5pbWF0aW9uLCBhbGlnbmluZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgQW5pbWF0aW9uLmFuaW1hdGlvbnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxpZ24udGFyZ2V0ID09PSB2YWx1ZS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBbmltYXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbGlnbi50eXBlID09PSBBbmltYXRpb24uYWxpZ25UYXJnZXQud2l0aEVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VwaW5nID0gdmFsdWUuZ3JvdXBpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZ3JvdXBpbmcgPSB2YWx1ZS5ncm91cGluZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGxhc3RBbmltYXRpb24gIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5hbmlzQWxpZ25lZC5wdXNoKGAke3RoaXMuY2hhcnRJZHh9XyR7dGhpcy5zZWxlY3Rvcn1gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhlIGR1cmF0aW9ucyBvZiB0aGUgYWN0aW9ucyBhcmUgc2V0IHdpdGggdGhlIGRhdGEgdmFyaWFibGVzXHJcbiAgICAgICAgbGV0IGR1cmF0aW9uQXR0clZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbWFya0lkOyBpIDwgbWFya0lkcy5sZW5ndGggfCAobWFya0lkID0gbWFya0lkc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG1wQXR0clZhbHVlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGFjdGlvbjsgaiA8IHRoaXMuYWN0aW9ucy5sZW5ndGggfCAoYWN0aW9uID0gdGhpcy5hY3Rpb25zW2pdKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbi5kdXJhdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0dW0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2RhdGEtZGF0dW0nXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUZsb2F0KGRhdHVtW2FjdGlvbi5kdXJhdGlvbi5maWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtaW5EdXJhdGlvbiA9IHR5cGVvZiBhY3Rpb24uZHVyYXRpb24ubWluRHVyYXRpb24gPT0gJ3VuZGVmaW5lZCcgPyAzMDAgOiBhY3Rpb24uZHVyYXRpb24ubWluRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQXR0clZhbHVlcy5zZXQoYWN0aW9uLmR1cmF0aW9uLmZpZWxkLCBbdmFsdWUsIG1pbkR1cmF0aW9uXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZHVyYXRpb25BdHRyVmFsdWVzLnNldChtYXJrSWQsIHRtcEF0dHJWYWx1ZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgZHVyYXRpb24gb2YgYWxsIGFjdGlvbnNcclxuICAgICAgICBsZXQgW2FjdGlvbnNEdXJhdGlvbnMsIG1pblZhbHVlRWFjaEF0dHIsIHByb2Nlc3NlZEFjdGlvbnNdID0gQWN0aW9uU3BlYy5jYWxBY3Rpb25EdXJhdGlvbih0aGlzLmFjdGlvbnMsIGR1cmF0aW9uQXR0clZhbHVlcywgQW5pbWF0aW9uLmRvbU1hcmtzKTtcclxuICAgICAgICAvL2NvbnN0cnVjdCB0cmVlIHdoaWxlIG9yZGVyIHRoZSBtYXJrcyBhY2NvcmRpbmcgdG8gXCJzb3J0XCJcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY3VycmVudCBncm91cGlnOiAnLCB0aGlzLmdyb3VwaW5nKTtcclxuICAgICAgICBsZXQgdG1wTWFya3NJbk9yZGVyID0gW10sIGxlYXZlc09mQW5pbWF0aW9uID0gW107XHJcbiAgICAgICAgaWYgKGFsaWduaW5nKSB7XHJcbiAgICAgICAgICAgIFt0bXBNYXJrc0luT3JkZXIsIGxlYXZlc09mQW5pbWF0aW9uXSA9IHRoaXMuX2dyb3VwaW5nLmFycmFuZ2VPcmRlcihtYXJrSWRzLCBBbmltYXRpb24uZG9tTWFya3MsIHRoaXMucm9vdCwgdGhpcy5yZWZlcmVuY2UsIGFsaWduaW5nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBbdG1wTWFya3NJbk9yZGVyLCBsZWF2ZXNPZkFuaW1hdGlvbl0gPSB0aGlzLmdyb3VwaW5nLmFycmFuZ2VPcmRlcihtYXJrSWRzLCBBbmltYXRpb24uZG9tTWFya3MsIHRoaXMucm9vdCwgdGhpcy5yZWZlcmVuY2UsIGFsaWduaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFsaWduaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdC5jaGlsZHJlbiA9IGxlYXZlc09mQW5pbWF0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnYWZ0ZXIgZ3JvdXBpbmc6ICcsIHRoaXMuZ3JvdXBpbmcpO1xyXG4gICAgICAgIHRoaXMubWFya3NJbk9yZGVyID0gdG1wTWFya3NJbk9yZGVyO1xyXG4gICAgICAgIHRoaXMubGVhdmVzID0gbGVhdmVzT2ZBbmltYXRpb247XHJcblxyXG4gICAgICAgIGxldCBtYXJrQW5pID0gbmV3IE1hcCgpOy8vdGhlIHRpbWUgc3BlY3MgYW5kIGFjdGlvbiBzcGVjcyBvZiBlYWNoIG1hcmssIGZvciBub3cgdXNpbmcgTWFwLCBjaGVjayBsYXRlciB0byBzZWUgd2hldGhlciBpdCBpcyB3b3J0aHkgdG8gY2hhbmdlIHRvIEFycmF5XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG1hcmtJZDsgaSA8IHRoaXMubWFya3NJbk9yZGVyLmxlbmd0aCB8IChtYXJrSWQgPSB0aGlzLm1hcmtzSW5PcmRlcltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAvL3JlY29yZCB2aXN1YWwgc3RhdHVzIG9mIGFsbCBtYXJrc1xyXG4gICAgICAgICAgICBsZXQgdG1wT2JqID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCB2QXR0cjsgaiA8IEFuaW1hdGlvbi52aXN1YWxBdHRycy5sZW5ndGggfCAodkF0dHIgPSBBbmltYXRpb24udmlzdWFsQXR0cnNbal0pOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpW3ZBdHRyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZBdHRyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29wYWNpdHknOi8vZ2l2ZSBkZWZhdWx0IG9wYWNpdHkgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd2lkdGgnOi8vdXNlIHRoZSB3aWR0aCBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJXaWR0aCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hlaWdodCc6Ly91c2UgdGhlIGhlaWdodCBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJIZWlnaHQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzovL3VzZSB0aGUgcG9zaXRpb24geCBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJYJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneSc6Ly91c2UgdGhlIHBvc2l0aW9uIHkgb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiWSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N4JzovL3VzZSB0aGUgY2VudGVyIG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnY3gnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydjeCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYlgnXSArIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJXaWR0aCddIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjeSc6Ly91c2UgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2N5J10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnY3knXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJZJ10gKyBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiSGVpZ2h0J10gLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lubmVyUmFkaXVzJzovL2dpdmUgZGVmYXVsdCBpbm5lciByYWRpdXMgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2lubmVyUmFkaXVzJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnaW5uZXJSYWRpdXMnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvdXR0ZXJSYWRpdXMnOi8vdXNlIGhhbGYgb2YgdGhlIGRpYWdvbmFsIGxpbmUgb2YgdGhlIGJvdW5kaW5nIGJveFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ291dHRlclJhZGl1cyddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ291dHRlclJhZGl1cyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gTWF0aC5zcXJ0KE1hdGgucG93KEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJXaWR0aCddIC8gMiwgMikgKyBNYXRoLnBvdyhBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiSGVpZ2h0J10gLyAyLCAyKSkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0QW5nbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ3N0YXJ0QW5nbGUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydzdGFydEFuZ2xlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VuZEFuZ2xlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydlbmRBbmdsZSddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2VuZEFuZ2xlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBNYXRoLlBJICogMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVt2QXR0cl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZmluYWxTdGF0dXMuZ2V0KG1hcmtJZCkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uZmluYWxTdGF0dXMuc2V0KG1hcmtJZCwgW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbi5maW5hbFN0YXR1cy5nZXQobWFya0lkKS5wdXNoKHRtcE9iaik7XHJcblxyXG4gICAgICAgICAgICBtYXJrQW5pLnNldChtYXJrSWQsIHtcclxuICAgICAgICAgICAgICAgICdzdGFydFRpbWUnOiAwLCAvL3N0YXJ0IHRpbWUgb2YgdGhpcyBtYXJrIFxyXG4gICAgICAgICAgICAgICAgJ3RvdGFsRHVyYXRpb24nOiBhY3Rpb25zRHVyYXRpb25zLmdldChtYXJrSWQpLCAvL3RvdGFsIGR1cmF0aW9uIG9mIGFsbCB0aGUgYWN0aW9ucyBvZiB0aGlzIG1hcmtcclxuICAgICAgICAgICAgICAgICdhY3Rpb25BdHRycyc6IFtdIC8vYWN0aW9uIGF0dHJpYnV0ZXMgb2YgdGhpcyBtYXJrXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NhbGN1bGF0ZSB0aW1lIGFjY29yZGluZyB0byBncm91cGluZ1xyXG4gICAgICAgIGxldCB0aW1lRGlmZiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYWxpZ24gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5hbGlnbi50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoRWxlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmID0gdGhpcy5jYWxUaW1lQXNFbGUobWFya0FuaSwgbGFzdEFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoT2JqOlxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVEaWZmID0gdGhpcy5jYWxUaW1lQXNPYmoobWFya0FuaSwgbGFzdEFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Ugey8vZmlyc3QgYW5pbWF0aW9uIHVuaXRcclxuICAgICAgICAgICAgdGltZURpZmYgPSB0aGlzLmNhbFRpbWVBc09iaihtYXJrQW5pLCBsYXN0QW5pbWF0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBsZXQgdG1wT2JqID0geyAnc3RhcnRUaW1lJzogdmFsdWUuc3RhcnRUaW1lICsgdGltZURpZmYuZ2V0KG1hcmtJZCksICd0b3RhbER1cmF0aW9uJzogdmFsdWUudG90YWxEdXJhdGlvbiwgJ2FjdGlvbkF0dHJzJzogW10gfTtcclxuICAgICAgICAgICAgdGhhdC51cGRhdGVBbmlTdGFydEFuZEVuZFRpbWUodG1wT2JqKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGE7IGkgPCBwcm9jZXNzZWRBY3Rpb25zLmxlbmd0aCB8IChhID0gcHJvY2Vzc2VkQWN0aW9uc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvblNwZWMgPSBuZXcgQWN0aW9uU3BlYygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhhKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBhdHRyOyBqIDwga2V5cy5sZW5ndGggfCAoYXR0ciA9IGtleXNbal0pOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjW2F0dHJdID0gYVthdHRyXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PT0gJ19kdXJhdGlvbicgJiYgdHlwZW9mIGFbYXR0cl0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWluQXR0clZhbHVlID0gbWluVmFsdWVFYWNoQXR0ci5nZXQoYVthdHRyXS5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWNbYXR0cl0gPSBhW2F0dHJdLm1pbkR1cmF0aW9uICogcGFyc2VGbG9hdChkYXR1bVthW2F0dHJdLmZpZWxkXSkgLyBtaW5BdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyID09PSAnb2Zmc2V0U3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWNbYXR0cl0gPSBhW2F0dHJdLmdldChtYXJrSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiB0eXBlIGlzIGN1c3RvbSB0aGVuIGp1ZGdlIGlmIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIGFjdGlvbiBhYm91dCB0byBhZGQgaXMgYSB2YWxpZCBwcm9wZXJ0eSBvZiB0aGUgdGFyZ2V0IG1hcmtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBBY3Rpb25TcGVjLmFuaW1hdGlvblR5cGUgPT09IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jdXN0b20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrVmFsaWRQcm9wKEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsndGFnTmFtZSddLCB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZVswXS5hdHRyTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFjdGlvbkF0dHJzLnB1c2godG1wQWN0aW9uU3BlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYWN0aW9uQXR0cnMucHVzaCh0bXBBY3Rpb25TcGVjKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFya0FuaS5zZXQobWFya0lkLCB0bXBPYmopO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIG1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGUgc3RhcnQgdGltZSBvZiBhY3Rpb25zXHJcbiAgICAgICAgICAgIGxldCBmcmFtZVRpbWVQb2ludCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUuYWN0aW9uQXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSA9IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLm9mZnNldFN0YXJ0Oy8vYWJzb2x1dGUgc3RhcnQgdGltZVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLmR1cmF0aW9uID4gZnJhbWVUaW1lUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZVRpbWVQb2ludCA9IHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5zZXQobWFya0lkLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7Ly9tZXJnZSBhbmltYXRpb24gc3BlY3MgZm9yIHRoZSBzYW1lIG1hcmtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U3RhcnRUaW1lID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRFbmRUaW1lID0gY3VycmVudFN0YXJ0VGltZSArIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5zdGFydFRpbWUgPSBjdXJyZW50U3RhcnRUaW1lIDwgdmFsdWUuc3RhcnRUaW1lID8gY3VycmVudFN0YXJ0VGltZSA6IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBFbmRUaW1lID0gdmFsdWUuc3RhcnRUaW1lICsgdmFsdWUudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRFbmRUaW1lID0gY3VycmVudEVuZFRpbWUgPiB0bXBFbmRUaW1lID8gY3VycmVudEVuZFRpbWUgOiB0bXBFbmRUaW1lO1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkudG90YWxEdXJhdGlvbiA9IGN1cnJlbnRFbmRUaW1lIC0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkuYWN0aW9uQXR0cnMgPSBbLi4uQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkuYWN0aW9uQXR0cnMsIC4uLnZhbHVlLmFjdGlvbkF0dHJzXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2FsVGltZUFzRWxlKG1hcmtBbmksIGxhc3RBbmltYXRpb24pIHtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLnJvb3QuYWxpZ24gPSB0aGlzLmFsaWduO1xyXG4gICAgICAgIC8vcmVjb3JkIHRoZSBzdGFydCB0aW1lIGFuZCBkdXJhdGlvbiBvZiB0aGUgbGVhdmVzIGluIGxhc3QgYW5pbWF0aW9uXHJcbiAgICAgICAgbGFzdEFuaW1hdGlvbi5sZWF2ZXMuZm9yRWFjaChsID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWFya3NJbkxlYWYgPSBsLm1hcmtzO1xyXG4gICAgICAgICAgICBsLmxlYWZTdGFydCA9IDEwMDAwMDtcclxuICAgICAgICAgICAgbC5sZWFmRW5kID0gMDtcclxuICAgICAgICAgICAgbWFya3NJbkxlYWYuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wTUFuaSA9IEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpO1xyXG4gICAgICAgICAgICAgICAgdG1wTUFuaS5zdGFydFRpbWUgPCBsLmxlYWZTdGFydCA/IGwubGVhZlN0YXJ0ID0gdG1wTUFuaS5zdGFydFRpbWUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgKHRtcE1Bbmkuc3RhcnRUaW1lICsgdG1wTUFuaS50b3RhbER1cmF0aW9uKSA+IGwubGVhZkVuZCA/IGwubGVhZkVuZCA9ICh0bXBNQW5pLnN0YXJ0VGltZSArIHRtcE1BbmkudG90YWxEdXJhdGlvbikgOiBudWxsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLy9jaGVjayB3aGV0aGVyIGNhbiBhbGlnbiBiYXNlZCBvbiBkYXRhXHJcbiAgICAgICAgLy8gbGV0IGFsaWduT25EYXRhID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGxlYWZNYXBwaW5nID0gbmV3IE1hcCgpOy8va2V5OiBsZWFmIGluZGV4IGluIGN1cnJlbnQgYW5pbWF0aW9uLCB2YWx1ZTogaW5kZXggb2YgdGhlIGNvcnJlc3BvbmRpbmcgbGVhZiBpbiBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgIGxhc3RBbmltYXRpb24ubGVhdmVzLmZvckVhY2goKGwsIGxlYWZJZHgpID0+IHtcclxuICAgICAgICAgICAgbGV0IG1hcmtzU2FtZURhdHVtID0gW107XHJcbiAgICAgICAgICAgIGwubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBDaGFydFNwZWMubWFya3NXaXRoU2FtZURhdHVtLmdldChtSWQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtzU2FtZURhdHVtLnB1c2goLi4uQ2hhcnRTcGVjLm1hcmtzV2l0aFNhbWVEYXR1bS5nZXQobUlkKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIG1hcmtzU2FtZURhdHVtID0gWy4uLm5ldyBTZXQobWFya3NTYW1lRGF0dW0pXTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ21hcmtzIHNhbWUgZGF0dW06ICcsIG1hcmtzU2FtZURhdHVtLCB0aGF0LmxlYXZlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGF0LmxlYXZlcy5sZW5ndGgsIHRtcEw7IGkgPCBsZW4gfCAodG1wTCA9IHRoYXQubGVhdmVzW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxlYWZNYXBwaW5nLmdldChpKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWFmTWFwcGluZy5zZXQoaSwgW10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoZWNraW5nOiAnLCBtYXJrc1NhbWVEYXR1bSwgdG1wTC5tYXJrcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmFycklzQ29udGFpbmVkKG1hcmtzU2FtZURhdHVtLCB0bXBMLm1hcmtzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb250YWluZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBsZWFmTWFwcGluZy5nZXQoaSkucHVzaChsZWFmSWR4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmFsaWduT25EYXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3doZXRoZXIgYWxpZ24gb24gZGF0YTogJywgdGhpcywgdGhpcy5hbGlnbk9uRGF0YSwgdGhpcy5sZWF2ZXMpO1xyXG4gICAgICAgIGlmICghdGhpcy5hbGlnbk9uRGF0YSkgey8vYWxpZ24gb25lIGFmdGVyIGFub3RoZXJcclxuICAgICAgICAgICAgY29uc3QgbGVhZk51bSA9IHRoaXMubGVhdmVzLmxlbmd0aCA+IGxhc3RBbmltYXRpb24ubGVhdmVzLmxlbmd0aCA/IHRoaXMubGVhdmVzLmxlbmd0aCA6IGxhc3RBbmltYXRpb24ubGVhdmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IG9mc3RUaW1lID0gMDsvL3JlY29yZCB0aGUgdGltZSBvZmZzZXQgZm9yIGVhY2ggbGVhZiBvZiB0aGUgbGFzdCBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWFmTnVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGVhZkxhc3RBbmkgPSBsYXN0QW5pbWF0aW9uLmxlYXZlc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCBsYXN0bGVhZkN1cnJlbnRBbmkgPSB0aGlzLmxlYXZlc1tpIC0gMV07XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudExlYWZDdXJyZW50QW5pID0gdGhpcy5sZWF2ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBsZXQgYWxpZ25Ub0lkID0gJycsIGFsaWduV2l0aElkID0gJyc7XHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aW1pZyBvZiB0aGUgY3VycmVudCBsZWFmIGZyb20gY3VycmVudCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudExlYWZDdXJyZW50QW5pICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsaWduV2l0aElkID0gY3VycmVudExlYWZDdXJyZW50QW5pLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudExlYWZMYXN0QW5pID09PSAndW5kZWZpbmVkJykgey8vY2Fubm90IGZpbmQgdGhlIGNvcnJlc3BuZGluZyBsZWFmIGZyb20gbGFzdCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXN0bGVhZkN1cnJlbnRBbmkgIT09ICd1bmRlZmluZWQnKSB7Ly9hbGlnbiB3aXRoIGxhc3QgbGVhZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maW5kIHN0YXJ0IGFuZCBlbmQgb2YgbGFzdCBsZWFmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZlN0YXJ0ID0gMTAwMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZFbmQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdGxlYWZDdXJyZW50QW5pLm1hcmtzLmZvckVhY2gobUlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBNQW5pID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTUFuaS5zdGFydFRpbWUgPCBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZlN0YXJ0ID8gbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZTdGFydCA9IHRtcE1Bbmkuc3RhcnRUaW1lIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG1wTUFuaS5zdGFydFRpbWUgKyB0bXBNQW5pLnRvdGFsRHVyYXRpb24pID4gbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZFbmQgPyBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZkVuZCA9ICh0bXBNQW5pLnN0YXJ0VGltZSArIHRtcE1BbmkudG90YWxEdXJhdGlvbikgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZnN0VGltZSA9IHRoaXMuY2FsT2ZzdFRpbWVGb3JMYXN0QW5pKGN1cnJlbnRMZWFmQ3VycmVudEFuaSwgbGFzdGxlYWZDdXJyZW50QW5pLCBtYXJrQW5pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly9hbGlnbiB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGxlYWYgZnJvbSBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkN1cnJlbnRBbmkuYWxpZ25UbyA9IGN1cnJlbnRMZWFmTGFzdEFuaS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkxhc3RBbmkuYWxpZ25XaXRoTGVhdmVzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmTGFzdEFuaS5hbGlnbldpdGhMZWF2ZXMucHVzaChjdXJyZW50TGVhZkN1cnJlbnRBbmkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnblRvSWQgPSBjdXJyZW50TGVhZkxhc3RBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mc3RUaW1lID0gdGhpcy5jYWxPZnN0VGltZUZvckxhc3RBbmkoY3VycmVudExlYWZDdXJyZW50QW5pLCBjdXJyZW50TGVhZkxhc3RBbmksIG1hcmtBbmkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2ZzdFRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRpbWluZyBvZiB0aGUgY3VycmVudCBsZWFmIGZyb20gbGFzdCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHRtcEFuaUlkID0gYCR7dGhpcy5jaGFydElkeH1fIyR7dGhpcy5tYXJrc0luT3JkZXIuam9pbignLCAjJyl9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcEFuaUlkID0gYCR7dGhpcy5jaGFydElkeH1fJHt0aGlzLnNlbGVjdG9yfWA7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWxpZ24gb24gbm9uZGF0YTogYW5pSWQnLCB0bXBBbmlJZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmcobGFzdEFuaW1hdGlvbiwgY3VycmVudExlYWZMYXN0QW5pLCBvZnN0VGltZSwgYWxpZ25Ub0lkLCBhbGlnbldpdGhJZCwgdG1wQW5pSWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy51cGRhdGVMYXN0QW5pbWF0aW9uVGltaW5nKGxhc3RBbmltYXRpb24sIGN1cnJlbnRMZWFmTGFzdEFuaSwgb2ZzdFRpbWUsIGFsaWduVG9JZCwgYWxpZ25XaXRoSWQsIHRoaXMuaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbGVhZk51bSA9IHRoaXMubGVhdmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IG9mc3RUaW1lID0gMDsvL3JlY29yZCB0aGUgdGltZSBvZmZzZXQgZm9yIGVhY2ggbGVhZiBvZiB0aGUgbGFzdCBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWFmTnVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGVhZkxhc3RBbmkgPSBsYXN0QW5pbWF0aW9uLmxlYXZlc1tsZWFmTWFwcGluZy5nZXQoaSlbMF1dO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RsZWFmQ3VycmVudEFuaSA9IHRoaXMubGVhdmVzW2kgLSAxXTtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGVhZkN1cnJlbnRBbmkgPSB0aGlzLmxlYXZlc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbGlnbiByZWFsaW9uOiAnLCBjdXJyZW50TGVhZkN1cnJlbnRBbmksIGxhc3RsZWFmQ3VycmVudEFuaSwgY3VycmVudExlYWZMYXN0QW5pKTtcclxuICAgICAgICAgICAgICAgIGxldCBhbGlnblRvSWQgPSAnJywgYWxpZ25XaXRoSWQgPSAnJztcclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRpbWlnIG9mIHRoZSBjdXJyZW50IGxlYWYgZnJvbSBjdXJyZW50IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkN1cnJlbnRBbmkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25XaXRoSWQgPSBjdXJyZW50TGVhZkN1cnJlbnRBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkxhc3RBbmkgPT09ICd1bmRlZmluZWQnKSB7Ly9jYW5ub3QgZmluZCB0aGUgY29ycmVzcG5kaW5nIGxlYWYgZnJvbSBsYXN0IGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RsZWFmQ3VycmVudEFuaSAhPT0gJ3VuZGVmaW5lZCcpIHsvL2FsaWduIHdpdGggbGFzdCBsZWFmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbmQgc3RhcnQgYW5kIGVuZCBvZiBsYXN0IGxlYWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmU3RhcnQgPSAxMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bGVhZkN1cnJlbnRBbmkubGVhZkVuZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bGVhZkN1cnJlbnRBbmkubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcE1BbmkgPSBtYXJrQW5pLmdldChtSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE1Bbmkuc3RhcnRUaW1lIDwgbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZTdGFydCA/IGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmU3RhcnQgPSB0bXBNQW5pLnN0YXJ0VGltZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRtcE1Bbmkuc3RhcnRUaW1lICsgdG1wTUFuaS50b3RhbER1cmF0aW9uKSA+IGxhc3RsZWFmQ3VycmVudEFuaS5sZWFmRW5kID8gbGFzdGxlYWZDdXJyZW50QW5pLmxlYWZFbmQgPSAodG1wTUFuaS5zdGFydFRpbWUgKyB0bXBNQW5pLnRvdGFsRHVyYXRpb24pIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZzdFRpbWUgPSB0aGlzLmNhbE9mc3RUaW1lRm9yTGFzdEFuaShjdXJyZW50TGVhZkN1cnJlbnRBbmksIGxhc3RsZWFmQ3VycmVudEFuaSwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugey8vYWxpZ24gd2l0aCB0aGUgY29ycmVzcG9uZGluZyBsZWFmIGZyb20gbGFzdCBhbmltYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZDdXJyZW50QW5pLmFsaWduVG8gPSBjdXJyZW50TGVhZkxhc3RBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmTGFzdEFuaS5hbGlnbldpdGhMZWF2ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkxhc3RBbmkuYWxpZ25XaXRoTGVhdmVzLnB1c2goY3VycmVudExlYWZDdXJyZW50QW5pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25Ub0lkID0gY3VycmVudExlYWZMYXN0QW5pLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZnN0VGltZSA9IHRoaXMuY2FsT2ZzdFRpbWVGb3JMYXN0QW5pKGN1cnJlbnRMZWFmQ3VycmVudEFuaSwgY3VycmVudExlYWZMYXN0QW5pLCBtYXJrQW5pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mc3RUaW1lID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aW1pbmcgb2YgdGhlIGN1cnJlbnQgbGVhZiBmcm9tIGxhc3QgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCB0bXBBbmlJZCA9IGAke3RoaXMuY2hhcnRJZHh9XyMke3RoaXMubWFya3NJbk9yZGVyLmpvaW4oJywgIycpfWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0bXBBbmlJZCA9IGAke3RoaXMuY2hhcnRJZHh9XyR7dGhpcy5zZWxlY3Rvcn1gO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsaWduIG9uIGRhdGE6IGFuaUlkJywgdG1wQW5pSWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXN0QW5pbWF0aW9uVGltaW5nKGxhc3RBbmltYXRpb24sIGN1cnJlbnRMZWFmTGFzdEFuaSwgb2ZzdFRpbWUsIGFsaWduVG9JZCwgYWxpZ25XaXRoSWQsIHRtcEFuaUlkKTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMudXBkYXRlTGFzdEFuaW1hdGlvblRpbWluZyhsYXN0QW5pbWF0aW9uLCBjdXJyZW50TGVhZkxhc3RBbmksIG9mc3RUaW1lLCBhbGlnblRvSWQsIGFsaWduV2l0aElkLCB0aGlzLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsQW5pT2Zmc2V0KG1hcmtBbmksIHVuZGVmaW5lZCwgQW5pbWF0aW9uLmFsaWduVGFyZ2V0LndpdGhFbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbE9mc3RUaW1lRm9yTGFzdEFuaShsZWFmLCBsZWFmVG9BbGlnbiwgbWFya0FuaSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjYWwgb2Zmc2V0IHRpbWU6ICcsIGxlYWYsIGxlYWZUb0FsaWduKTtcclxuICAgICAgICBsZXQgdG1wT2ZzdFRpbWUgPSAwO1xyXG4gICAgICAgIGxlYWYuc3RhcnQgPSAxMDAwMDAwO1xyXG4gICAgICAgIGxlYWYuZW5kID0gMDtcclxuICAgICAgICBsZXQgbVN0YXJ0VGltZSA9IDA7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICBtU3RhcnRUaW1lID0gbGVhZlRvQWxpZ24ubGVhZlN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgbGVhZi5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbUR1cmF0aW9uID0gbWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lID0gbVN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobVN0YXJ0VGltZSArIG1EdXJhdGlvbiAtIGxlYWZUb0FsaWduLmxlYWZFbmQgPiB0bXBPZnN0VGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBPZnN0VGltZSA9IG1TdGFydFRpbWUgKyBtRHVyYXRpb24gLSBsZWFmVG9BbGlnbi5sZWFmRW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobVN0YXJ0VGltZSA8IGxlYWYuc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZi5zdGFydCA9IG1TdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lICsgbUR1cmF0aW9uID4gbGVhZi5lbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZi5lbmQgPSBtU3RhcnRUaW1lICsgbUR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdG1wT2ZzdFRpbWU7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICBtU3RhcnRUaW1lID0gbGVhZlRvQWxpZ24ubGVhZkVuZDtcclxuICAgICAgICAgICAgICAgIGxlYWZUb0FsaWduLmFsaWduV2l0aExlYXZlcy5mb3JFYWNoKGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC5sZWFmRW5kICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobC5sZWFmRW5kID4gbVN0YXJ0VGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbVN0YXJ0VGltZSA9IGwubGVhZkVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtRW5kVGltZSA9IEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSArIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1FbmRUaW1lID4gbVN0YXJ0VGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtU3RhcnRUaW1lID0gbUVuZFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgbGVhZi5tYXJrcy5mb3JFYWNoKG1JZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbUR1cmF0aW9uID0gbWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lID0gbVN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobVN0YXJ0VGltZSArIG1EdXJhdGlvbiA+IHRtcE9mc3RUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9mc3RUaW1lID0gbUR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobVN0YXJ0VGltZSA8IGxlYWYuc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZi5zdGFydCA9IG1TdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtU3RhcnRUaW1lICsgbUR1cmF0aW9uID4gbGVhZi5lbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZi5lbmQgPSBtU3RhcnRUaW1lICsgbUR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdG1wT2ZzdFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmcobGFzdEFuaW1hdGlvbiwgY3VycmVudExlYWZMYXN0QW5pLCBvZnN0VGltZSwgYWxpZ25Ub0lkLCBhbGlnbldpdGhJZCwgYWxpZ25XaXRoQW5pSWQsIGtlZXBVcGRhdGluZyA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICAvLyBsZXQgdG1wQWxpZ25Ub0lkID0gJyc7XHJcbiAgICAgICAgaWYgKGFsaWduVG9JZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5sZWF2ZXMuZm9yRWFjaChsID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChsLmlkID09PSBhbGlnblRvSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGwuYWxpZ25XaXRoID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmFsaWduV2l0aCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsLmFsaWduV2l0aC5wdXNoKGFsaWduV2l0aEFuaUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGwuYWxpZ25XaXRoSWRzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmFsaWduV2l0aElkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsLmFsaWduV2l0aElkcy5wdXNoKGFsaWduV2l0aElkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50TGVhZkxhc3RBbmkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAvL2ZpbmQgdGhlIGxlYXZlcyBmcm9tIGxhc3QgYW5pbWF0aW9uIHdpdGggdGhlIHNhbWUgc3RhcnQgdGltZSBhcyBjdXJyZW50TGVhZkxhc3RBbmlcclxuICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5sZWF2ZXMuZm9yRWFjaChsID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGVhZkxhc3RBbmlTdGFydCA9IGN1cnJlbnRMZWFmTGFzdEFuaS5sZWFmU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0ID0gMTAwMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExlYWZMYXN0QW5pLm1hcmtzLmZvckVhY2gobUlkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSA8IGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGVhZkxhc3RBbmlTdGFydCA9IEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGwubGVhZlN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsLmxlYWZTdGFydCA+IGN1cnJlbnRMZWFmTGFzdEFuaVN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBMZWFmU3RhcnQgPSAxMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lICs9IG9mc3RUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSA8IHRtcExlYWZTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcExlYWZTdGFydCA9IEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgKyBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uID4gbC5sZWFmRW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5sZWFmRW5kID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lICsgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkudG90YWxEdXJhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGwubGVhZkVuZCA+IGxhc3RBbmltYXRpb24uYW5pbWF0aW9uRW5kVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBbmltYXRpb24uYW5pbWF0aW9uRW5kVGltZSA9IGwubGVhZkVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLmFjdGlvbkF0dHJzLmZvckVhY2goYSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zdGFydFRpbWUgKz0gb2ZzdFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsLmxlYWZTdGFydCA9IHRtcExlYWZTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGwubWFya3MuZm9yRWFjaChtSWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lID4gY3VycmVudExlYWZMYXN0QW5pU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLnN0YXJ0VGltZSArPSBvZnN0VGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS5zdGFydFRpbWUgKyBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobUlkKS50b3RhbER1cmF0aW9uID4gbGFzdEFuaW1hdGlvbi5hbmltYXRpb25FbmRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFuaW1hdGlvbi5hbmltYXRpb25FbmRUaW1lID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkuc3RhcnRUaW1lICsgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1JZCkudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtSWQpLmFjdGlvbkF0dHJzLmZvckVhY2goYSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zdGFydFRpbWUgKz0gb2ZzdFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGVyZSBhcmUgb3RoZXIgYW5pcyBhbGlnbmVkIHRvIHRoaXMgb25lXHJcbiAgICAgICAgICAgIGlmIChsYXN0QW5pbWF0aW9uLmFuaXNBbGlnbmVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxhc3RBbmltYXRpb24uYW5pc0FsaWduZWQuZm9yRWFjaChhbmlJZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaUlkICE9PSBgJHt0aGF0LmNoYXJ0SWR4fV8ke3RoYXQuc2VsZWN0b3J9YCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmlBbGlnbmVkID0gQW5pbWF0aW9uLmFuaW1hdGlvbnMuZ2V0KGFuaUlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRsZWFmQWxpZ25lZEFuaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGN1cnJlbnRMZWFmTGFzdEFuaS5hbGlnbldpdGhMZWF2ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBMZWFmID0gY3VycmVudExlYWZMYXN0QW5pLmFsaWduV2l0aExlYXZlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4yID0gYW5pQWxpZ25lZC5sZWF2ZXMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcExlYWYuaWQgPT09IGFuaUFsaWduZWQubGVhdmVzW2pdLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRsZWFmQWxpZ25lZEFuaSA9IHRtcExlYWY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudGxlYWZBbGlnbmVkQW5pICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlTGFzdEFuaW1hdGlvblRpbWluZyhhbmlBbGlnbmVkLCBjdXJyZW50bGVhZkFsaWduZWRBbmksIG9mc3RUaW1lLCAnJywgJycsICcnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIG5lZWQgdG8ga2VlcCB1cGRhdGluZyBcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXN0QW5pbWF0aW9uLmFsaWduICE9PSAndW5kZWZpbmVkJyAmJiBrZWVwVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0QW5pbWF0aW9uLmFsaWduLnR5cGUgPT09IEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoRWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFuaTtcclxuICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uYW5pbWF0aW9ucy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QW5pbWF0aW9uLmFsaWduLnRhcmdldCA9PT0gdmFsdWUuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFuaSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVwZGF0ZUxhc3RBbmltYXRpb25UaW1pbmcodG1wQW5pLCBjdXJyZW50TGVhZkxhc3RBbmksIG9mc3RUaW1lLCAnJywgJycsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWxUaW1lQXNPYmoobWFya0FuaSwgbGFzdEFuaW1hdGlvbikge1xyXG4gICAgICAgIHRoaXMuZ3JvdXBpbmcuY2FsVGltZVdpdGhUcmVlKHRoaXMucm9vdCwgLTEsIC0xLCBtYXJrQW5pKTtcclxuICAgICAgICB0aGlzLnJvb3QudGltaW5nUmVmID0gdGhpcy5yZWZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy5yb290Lm9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIHRoaXMucm9vdC5hbGlnbiA9IHRoaXMuYWxpZ247XHJcbiAgICAgICAgdGhpcy5yb290LmFuaUlkID0gdGhpcy5pZDtcclxuICAgICAgICAvL3VwZGF0ZSB0aW1lIGFjY29yZGluZyB0byB0aGUgdGltZSBzcGVjIG9mIGFuaW1hdGlvblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbEFuaU9mZnNldChtYXJrQW5pLCBsYXN0QW5pbWF0aW9uLCBBbmltYXRpb24uYWxpZ25UYXJnZXQud2l0aE9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsQW5pT2Zmc2V0KG1hcmtBbmksIGxhc3RBbmltYXRpb24sIHR5cGUpIHtcclxuICAgICAgICBsZXQgdG1wQWxsU3RhcnQgPSAxMDAwMDtcclxuICAgICAgICBtYXJrQW5pLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXJ0VGltZSA8IHRtcEFsbFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICB0bXBBbGxTdGFydCA9IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoRWxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbEVMZU9mZnNldFRpbWUoQW5pbWF0aW9uLmRvbU1hcmtzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGxhc3RBbmltYXRpb24gPT09ICd1bmRlZmluZWQnID8gdGhpcy5jYWxPZmZzZXRUaW1lKDAsIDAsIHRtcEFsbFN0YXJ0LCBBbmltYXRpb24uZG9tTWFya3MpIDogdGhpcy5jYWxPZmZzZXRUaW1lKGxhc3RBbmltYXRpb24uYW5pbWF0aW9uU3RhcnRUaW1lLCBsYXN0QW5pbWF0aW9uLmFuaW1hdGlvbkVuZFRpbWUsIHRtcEFsbFN0YXJ0LCBBbmltYXRpb24uZG9tTWFya3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVBbmlTdGFydEFuZEVuZFRpbWUoYW5pT2JqKSB7XHJcbiAgICAgICAgaWYgKGFuaU9iai5zdGFydFRpbWUgPCB0aGlzLmFuaW1hdGlvblN0YXJ0VGltZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblN0YXJ0VGltZSA9IGFuaU9iai5zdGFydFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhbmlPYmouc3RhcnRUaW1lICsgYW5pT2JqLnRvdGFsRHVyYXRpb24gPiB0aGlzLmFuaW1hdGlvbkVuZFRpbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25FbmRUaW1lID0gYW5pT2JqLnN0YXJ0VGltZSArIGFuaU9iai50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGN1bGF0ZSB0aW1pbmcgZm9yIGVhY2ggYWN0aW9uIHRoZW4gcmVuZGVyIGFuaW1hdGlvbiBieSBzbGljaW5nIHRoZSBhY3Rpb24gc3BlY3MgaW50byBmcmFtZXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJlbmRlckFuaW1hdGlvbihzdGF0dXMgPSB7fSkge1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLmFsbE1hcmtBbmkuZm9yRWFjaCgodmFsdWUsIG1hcmtJZCkgPT4ge1xyXG4gICAgICAgICAgICAvL3JlY29yZCB0aGUgZW5kIHRpbWUgb2YgdGhlIGVudGlyZSBhbmltYXRpb24sIGFuZCByZWNvcmQgdGhlIGluaXQgc3RhdHVzIG9mIGVhY2ggbWFya1xyXG4gICAgICAgICAgICBpZiAodGhhdC53aG9sZUVuZFRpbWUgPCB2YWx1ZS5zdGFydFRpbWUgKyB2YWx1ZS50b3RhbER1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lndob2xlRW5kVGltZSA9IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIHN0YXR1cy5pbmZvID0gJ1RoZSBkdXJhdGlvbiBvZiB0aGUgZ2VuZXJhdGVkIGFuaW1hdGlvbiBpczogJyArIHRoaXMud2hvbGVFbmRUaW1lICsgJ21zJztcclxuXHJcbiAgICAgICAgLy9yZXBsYWNlIHRoZSAnd2hvbGVFbmQnIHBsYWNlIGhvbGRlciBpbiBkdXJhdGlvblxyXG4gICAgICAgIHRoaXMuYWxsTWFya0FuaS5mb3JFYWNoKCh2YWx1ZSwgYSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaXRlbTsgaSA8IHZhbHVlLmFjdGlvbkF0dHJzLmxlbmd0aCB8IChpdGVtID0gdmFsdWUuYWN0aW9uQXR0cnNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmR1cmF0aW9uID09PSAnd2hvbGVFbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kdXJhdGlvbiA9IHRoYXQud2hvbGVFbmRUaW1lIC0gaXRlbS5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc2xhdGVUb0xvdHRpZUNoYW5uZWwoYXR0ck5hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29wYWNpdHknOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eSddXHJcbiAgICAgICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgICBjYXNlICdjeCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd4J107XHJcbiAgICAgICAgICAgIGNhc2UgJ3knOlxyXG4gICAgICAgICAgICBjYXNlICdjeSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd5J107XHJcbiAgICAgICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc2NhbGVYJywgJ3NjYWxlWSddO1xyXG4gICAgICAgICAgICBjYXNlICd3aWR0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzY2FsZVgnXTtcclxuICAgICAgICAgICAgY2FzZSAnaGVpZ2h0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3NjYWxlWSddO1xyXG4gICAgICAgICAgICBjYXNlICdkJzpcclxuICAgICAgICAgICAgY2FzZSAneDEnOlxyXG4gICAgICAgICAgICBjYXNlICd4Mic6XHJcbiAgICAgICAgICAgIGNhc2UgJ3kxJzpcclxuICAgICAgICAgICAgY2FzZSAneTInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc2hhcGUnXTtcclxuICAgICAgICAgICAgY2FzZSAndGV4dENvbnRlbnQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsndGV4dCddO1xyXG4gICAgICAgICAgICBjYXNlICdmaWxsJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2ZpbGxDb2xvciddO1xyXG4gICAgICAgICAgICBjYXNlICdzdHJva2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc3Ryb2tlQ29sb3InXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG1hcFRvTG90dGllU3BlYygpIHtcclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dvaW5nIHRvIG1hcCB0byBsb3R0aWUgc3BlYzogJywgdGhpcy5hbGxNYXJrQW5pKTtcclxuICAgICAgICB0aGlzLmFsbE1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmFjdGlvbkF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQWN0aW9uU3BlYyA9IHZhbHVlLmFjdGlvbkF0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRtcEFjdGlvblNwZWMuZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldE1hcmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpOy8vVE9ETzogcGFzcyBkb20gaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0bXBBY3Rpb25TcGVjLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogY29uc2lkZXIgJ2N1c3RvbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0RnJhbWUgPSBNYXRoLmNlaWwodG1wQWN0aW9uU3BlYy5zdGFydFRpbWUgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kRnJhbWUgPSBNYXRoLmNlaWwoKHRtcEFjdGlvblNwZWMuc3RhcnRUaW1lICsgdG1wQWN0aW9uU3BlYy5kdXJhdGlvbikgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZS5mb3JFYWNoKChhdHRyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wQWN0aW9uU3BlYy5hbmltYXRpb25UeXBlID09PSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXQgYW5jaG9yIGZvciByIGFuZCB0ZXh0IHBvc2l0aW9uIGNoYW5naW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLmF0dHJOYW1lID09PSAncicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQmJveCA9IGdldEJvdW5kaW5nQm94KHRhcmdldE1hcmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRTdGF0aWNQcm9wZXJ0eSgnYW5jaG9yWCcsIHRtcEJib3hbMl0gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclknLCB0bXBCYm94WzNdIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpLnRhZ05hbWUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRTdGF0aWNQcm9wZXJ0eSgnYW5jaG9yWScsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFuc2xhdGUgdmlzdWFsIGNoYW5uZWxzIHRvIGxvdHRpZSBjaGFubmVsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb3R0aWVDaGFubmVscyA9IEFuaW1hdGlvbi50cmFuc2xhdGVUb0xvdHRpZUNoYW5uZWwoYXR0ci5hdHRyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0ci50bykpIHsvL2RvaW5nIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyb21WYWx1ZSA9IDAsIHRvVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF0dHIudG8ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLnRvW2pdWzBdID09PSBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tVmFsdWUgPSBhdHRyLmZyb21bal1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSA9IGF0dHIudG9bal1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdHRpZUNoYW5uZWxzLmZvckVhY2goKGxjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGMgPT09ICdzaGFwZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYW5zZm9ybSB0aGUgc3RhcnQgZCBhbmQgZW5kIGQgdG8gc2hhcGUgc3BlY2lmaWNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcm9tUG9zaSA9IFswLCAwXSwgdG9Qb3NpID0gWzAsIDBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0cmFuc2xhdGluZyBkIHRvIGxvdHRpZSBzcGVjOiAnLCBmcm9tVmFsdWUsIHRvVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtmcm9tUG9zaSwgZnJvbVZhbHVlXSA9IENhbmlzVXRpbC50cmFuc0RUb0xvdHRpZVNwZWMoZnJvbVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdG9Qb3NpLCB0b1ZhbHVlXSA9IENhbmlzVXRpbC50cmFuc0RUb0xvdHRpZVNwZWModG9WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tUG9zaVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qb3NpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Qb3NpWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1Bvc2lbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYyA9PT0gJ2ZpbGxDb2xvcicgfHwgbGMgPT09ICdzdHJva2VDb2xvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbVZhbHVlICYmIHRvVmFsdWUgJiYgZnJvbVZhbHVlICE9PSAnbm9uZScgJiYgdG9WYWx1ZSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IENhbmlzVXRpbC50b0xvdHRpZVJHQkEoZnJvbVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSA9IENhbmlzVXRpbC50b0xvdHRpZVJHQkEodG9WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gdG9WYWx1ZSA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYyA9PT0gJ29wYWNpdHknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlICo9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1ZhbHVlICo9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvdHRpZUNoYW5uZWxzLmZvckVhY2goKGxjKSA9PiB7Ly9UT0RPOiBkaWZmZXJlbmNlIGZyb20gYW5kIHRvIHN0cmF0ZWd5IHdpdGggcG9zaXRpb25zIGFuZCBjaGFubmVscyBsaWtlIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5tYXJrTGF5ZXJzLmdldChtYXJrSWQpLnNldEFuaW1hdGFibGVQcm9wZXJ0eShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZnJvbSAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnRvICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsvL2lmIG5vdCBjdXN0b20sIHRoZW4gYXR0ck5hbWUgaXMgYWxyZWFkeSBsb3R0aWUgY2hhbm5lbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuYXR0ck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmZyb20gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIudG8gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG1wQWN0aW9uU3BlYy50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFza0xheWVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBCYm94ID0gZ2V0Qm91bmRpbmdCb3godGFyZ2V0TWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnb3V0dGVyUmFkaXVzJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodG1wQWN0aW9uU3BlYy5hbmltYXRpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSByZWN0IG1hc2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5tb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuYXBwZWFyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllciA9IExheWVyRmFjdG9yeS5ib3VuZGluZ0JveCh0YXJnZXRNYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGNpcmNsZSBtYXNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jaXJjbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyID0gTGF5ZXJGYWN0b3J5LmVsbGlwc2UodG1wQmJveFswXSArIHRtcEJib3hbMl0sIHRtcEJib3hbMV0gKyB0bXBCYm94WzNdLCByLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclgnLCB0bXBCYm94WzJdIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdhbmNob3JZJywgdG1wQmJveFszXSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgY2lyY2xlIG1hc2sgd2l0aCB0aGljayBib3JkZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndoZWVsOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb2luZyB0byBnZXQgcGF0aCBvZmZzZXQ6ICcsIGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoT2Zmc2V0ID0gQ2FuaXNVdGlsLmdldFBhdGhPZmZzZXQodGFyZ2V0TWFyay5nZXRBdHRyaWJ1dGUoJ2QnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcE9mZnNldFggPSB0aGF0LmZpbmFsU3RhdHVzLmdldChtYXJrSWQpW3RtcEFjdGlvblNwZWMuY2hhcnRJZHhdWydjeCddICsgdG1wQmJveFswXSAtIHBhdGhPZmZzZXRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcE9mZnNldFkgPSB0aGF0LmZpbmFsU3RhdHVzLmdldChtYXJrSWQpW3RtcEFjdGlvblNwZWMuY2hhcnRJZHhdWydjeSddICsgdG1wQmJveFsxXSAtIHBhdGhPZmZzZXRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyID0gTGF5ZXJGYWN0b3J5LmVsbGlwc2UodG1wT2Zmc2V0WCwgdG1wT2Zmc2V0WSwgciwgcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBTdGFydEFuZ2xlID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnc3RhcnRBbmdsZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBFbmRBbmdsZSA9IHRoYXQuZmluYWxTdGF0dXMuZ2V0KG1hcmtJZClbdG1wQWN0aW9uU3BlYy5jaGFydElkeF1bJ2VuZEFuZ2xlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCd0cmltT2Zmc2V0JywgLXRtcFN0YXJ0QW5nbGUgLyBNYXRoLlBJIC8gMiAqIDM2MCAtIDM2MCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWMuYXR0cmlidXRlWzBdLnRvID0gMSAtICgodG1wRW5kQW5nbGUgLSB0bXBTdGFydEFuZ2xlKSAlIChNYXRoLlBJICogMikpIC8gKE1hdGguUEkgKiAyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdzdHJva2VXaWR0aCcsIDIgKiByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIuc2V0U3RhdGljUHJvcGVydHkoJ2ZpbGxPcGFjaXR5JywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBwYXRoIG1hc2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRGcmFtZSA9IE1hdGguY2VpbCh0bXBBY3Rpb25TcGVjLnN0YXJ0VGltZSAvICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRGcmFtZSA9IE1hdGguY2VpbCgodG1wQWN0aW9uU3BlYy5zdGFydFRpbWUgKyB0bXBBY3Rpb25TcGVjLmR1cmF0aW9uKSAvICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWMuYXR0cmlidXRlLmZvckVhY2goKGF0dHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllci5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5hdHRyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZnJvbSAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnRvICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvblNwZWMudHJhbnNUb0xvdHRpZUFjdGlvbih0bXBBY3Rpb25TcGVjLmVhc2luZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5qc01vdmluLmFkZE1hc2sobWFza0xheWVyLCBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKSwgdG1wQWN0aW9uU3BlYy5tYXNrVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigndW5rb253biBhY3Rpb25zIHRhcmdldDogJywgdG1wQWN0aW9uU3BlYy50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc0FsaWduKGFsaWduU3RyKSB7XHJcbiAgICAgICAgc3dpdGNoIChhbGlnblN0cikge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuYWxpZ25UYXJnZXQud2l0aEVsZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnd2l0aEVsZSc7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy5hbGlnblRhcmdldC53aXRoT2JqOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd3aXRoT2JqJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9pZiB0aGUgY2hhcnRzIGNoYW5nZWQsIHRoZW4gZG8gcmVzZXRcclxuICAgIHN0YXRpYyByZXNldEFsbCgpIHtcclxuICAgICAgICB0aGlzLndob2xlRW5kVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5hbGxNYXJrQW5pLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5hbGxNYXJrQW5pVHJhbnMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmZyYW1lVGltZS5jbGVhcigpO1xyXG4gICAgICAgIC8vIHRoaXMuZG9tTWFya3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmZpbmFsU3RhdHVzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICAgICAgQW5pbWF0aW9uLmFuaUlkeCA9IDA7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5BbmltYXRpb24uRklSU1RfQU5JX0lEID0gJ2FuaTAnO1xyXG5BbmltYXRpb24uYW5pSWR4ID0gMDtcclxuQW5pbWF0aW9uLmFsaWduVGFyZ2V0ID0ge1xyXG4gICAgd2l0aEVsZTogJ2VsZW1lbnQnLFxyXG4gICAgd2l0aE9iajogJ29iamVjdCdcclxufVxyXG5BbmltYXRpb24uYWxpZ25BdHRycyA9IFsndGFyZ2V0JywgJ3R5cGUnXTsvL2ZvciBlcnJvciBjaGVja1xyXG5BbmltYXRpb24udmlzdWFsQXR0cnMgPSBbJ3gnLCAneScsICdjeCcsICdjeScsICdpbm5lclJhZGl1cycsICdvdXR0ZXJSYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScsICd3aWR0aCcsICdoZWlnaHQnLCAnb3BhY2l0eScsICdmaWxsJywgJ3N0cm9rZScsICdjb250ZW50JywgJ3N0cm9rZS1kYXNoYXJyYXknLCAnc3Ryb2tlLWRhc2hvZmZzZXQnXTtcclxuQW5pbWF0aW9uLmRvbU1hcmtzID0gbmV3IE1hcCgpO1xyXG5BbmltYXRpb24ubWFya0NsYXNzID0gbmV3IE1hcCgpOy8va2V5OiBtYXJrSWQsIHZhbHVlOiBjbGFzc1xyXG5BbmltYXRpb24uYWxsTWFya3MgPSBbXTtcclxuQW5pbWF0aW9uLmF0dHJzID0gWydpZCcsICdzZWxlY3RvcicsICdncm91cGluZycsICdlZmZlY3RzJywgJ29mZnNldCcsICdyZWZlcmVuY2UnLCAnYWxpZ24nXVxyXG5BbmltYXRpb24ud2hvbGVFbmRUaW1lID0gMDtcclxuQW5pbWF0aW9uLmZyYW1lVGltZSA9IG5ldyBNYXAoKTsvL2tleTogdGltZSwgdmFsdWU6IHdoZXRoZXIgdGhpcyB0aW1lIHBvaW50IGlzIGEga2V5ZnJhbWVcclxuQW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBuZXcgTWFwKCk7Ly9yZWNvcmQgYWxsIGFuaW1hdGlvbnMsIGtleTosIHZhbHVlOiBhbmltYXRpb24gb2JqXHJcbkFuaW1hdGlvbi5maW5hbFN0YXR1cyA9IG5ldyBNYXAoKTsvL3JlY29yZCB0aGUgZmluYWwgdmlzdWFsIHN0YXR1cyBvZiBlYWNoIG1hcmssIGVnOiBrZXk6bWFyazEsIHZhbHVlOiB7b3BhY2l0eTogMSwgaGVpZ2h0OiAyMjZ9XHJcbkFuaW1hdGlvbi5hbGxNYXJrQW5pID0gbmV3IE1hcCgpO1xyXG5BbmltYXRpb24uYWxsTWFya0FuaVRyYW5zID0gbmV3IE1hcCgpOy8va2V5OiBtYXJrSWQsIHZhbHVlOiBBcnJheTx7fT5cclxuLy8gQW5pbWF0aW9uLmVhc2VGdW5jcyA9IHtcclxuLy8gICAgIGVhc2VJblF1YWQ6IChwKSA9PiB7XHJcbi8vICAgICAgICAgcmV0dXJuIHAgKiBwO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VPdXRRdWFkOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiAtIHAgKiAocCAtIDIpO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VJbk91dFF1YWQ6IChwKSA9PiB7XHJcbi8vICAgICAgICAgaWYgKChwIC8gMikgPCAxKSByZXR1cm4gMSAvIDIgKiBwICogcDtcclxuLy8gICAgICAgICByZXR1cm4gLSAoKC0tcCkgKiAocCAtIDIpIC0gMSkgLyAyO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGVhc2VJbkN1YmljOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiBwICogcCAqIHA7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgZWFzZU91dEN1YmljOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIHJldHVybiAocCA9IHAgLSAxKSAqIHAgKiBwICsgMTtcclxuLy8gICAgIH0sXHJcbi8vICAgICBlYXNlSW5PdXRDdWJpYzogKHApID0+IHtcclxuLy8gICAgICAgICBpZiAoKHAgLz0gMC41KSA8IDEpIHJldHVybiBwICogcCAqIHAgLyAyO1xyXG4vLyAgICAgICAgIHJldHVybiAoKHAgLT0gMikgKiBwICogcCArIDIpIC8gMjtcclxuLy8gICAgIH0sXHJcbi8vICAgICBlYXNlT3V0Qm91bmNlOiAocCkgPT4ge1xyXG4vLyAgICAgICAgIGxldCByYXRpbyA9IDA7XHJcbi8vICAgICAgICAgaWYgKHAgPCAoMSAvIDIuNzUpKSB7XHJcbi8vICAgICAgICAgICAgIHJhdGlvID0gNy41NjI1ICogcCAqIHA7XHJcbi8vICAgICAgICAgfSBlbHNlIGlmIChwIDwgKDIgLyAyLjc1KSkge1xyXG4vLyAgICAgICAgICAgICByYXRpbyA9IDcuNTYyNSAqIChwIC09ICgxLjUgLyAyLjc1KSkgKiBwICsgMC43NTtcclxuLy8gICAgICAgICB9IGVsc2UgaWYgKHAgPCAoMi41IC8gMi43NSkpIHtcclxuLy8gICAgICAgICAgICAgcmF0aW8gPSA3LjU2MjUgKiAocCAtPSAoMi4yNSAvIDIuNzUpKSAqIHAgKyAwLjkzNzU7XHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcmF0aW8gPSA3LjU2MjUgKiAocCAtPSAoMi42MjUgLyAyLjc1KSkgKiBwICsgMC45ODQzNzU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiByYXRpbztcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuUGF0aE1ha2VyID0gdm9pZCAwO1xyXG5cclxudmFyIF9zdmdQYXRoUGFyc2VyID0gcmVxdWlyZShcInN2Zy1wYXRoLXBhcnNlclwiKTtcclxuXHJcbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxyXG5cclxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cclxuXHJcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XHJcblxyXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XHJcblxyXG52YXIgUGF0aE1ha2VyID1cclxuLyojX19QVVJFX18qL1xyXG5mdW5jdGlvbiAoKSB7XHJcbiAgLy8gZm9yIGRpc2NvbnRpbnVvdXMgcGF0aHNcclxuICBmdW5jdGlvbiBQYXRoTWFrZXIocGF0aERhdGEpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXRoTWFrZXIpO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhdGhcIiwge1xyXG4gICAgICBjOiBmYWxzZSxcclxuICAgICAgaTogW10sXHJcbiAgICAgIG86IFtdLFxyXG4gICAgICB2OiBbXVxyXG4gICAgfSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY3VycmVudFhcIiwgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY3VycmVudFlcIiwgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib2Zmc2V0WFwiLCBJbmZpbml0eSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib2Zmc2V0WVwiLCBJbmZpbml0eSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGF0aFJlYWR5XCIsIGZhbHNlKTtcclxuXHJcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXRoU3RhcnRcIiwgWzAsIDBdKTtcclxuXHJcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXRoQ2hhaW5cIiwgW10pO1xyXG5cclxuICAgIGlmIChwYXRoRGF0YSkge1xyXG4gICAgICB0aGlzLnBhcnNlKHBhdGhEYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhQYXRoTWFrZXIsIFt7XHJcbiAgICBrZXk6IFwidXBkYXRlWFlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVYWSh4LCB5KSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFggPSB4O1xyXG4gICAgICB0aGlzLmN1cnJlbnRZID0geTtcclxuICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4odGhpcy5vZmZzZXRYLCB4KTtcclxuICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY2FsY3VsYXRlQmV6aWVyTWluTWF4XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQmV6aWVyTWluTWF4KHAwLCBwMSwgcDIsIHAzKSB7XHJcbiAgICAgIHZhciBhID0gMyAqIChwMyAtIDMgKiBwMiArIDMgKiBwMSAtIHAwKTtcclxuICAgICAgdmFyIGIgPSA2ICogKHAyIC0gMiAqIHAxICsgcDApO1xyXG4gICAgICB2YXIgYyA9IDMgKiAocDEgLSBwMCk7XHJcbiAgICAgIHZhciBtaW4gPSBJbmZpbml0eSxcclxuICAgICAgICAgIG1heCA9IC1JbmZpbml0eTtcclxuXHJcbiAgICAgIGlmIChiICogYiAtIDQgKiBhICogYyA+PSAwKSB7XHJcbiAgICAgICAgdmFyIHNxcnQgPSBNYXRoLnNxcnQoYiAqIGIgLSA0ICogYSAqIGMpO1xyXG4gICAgICAgIHZhciByb290cyA9IFsxLCAtMV0ubWFwKGZ1bmN0aW9uIChtdWx0aSkge1xyXG4gICAgICAgICAgcmV0dXJuIChtdWx0aSAqIHNxcnQgLSBiKSAvIDIgLyBhO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvb3RzLmZvckVhY2goZnVuY3Rpb24gKHJvb3QpIHtcclxuICAgICAgICAgIGlmIChyb290ID4gMCAmJiByb290IDwgMSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLnBvdygxIC0gcm9vdCwgMykgKiBwMCArIDMgKiBNYXRoLnBvdygxIC0gcm9vdCwgMikgKiByb290ICogcDEgKyAzICogKDEgLSByb290KSAqIHJvb3QgKiByb290ICogcDIgKyBNYXRoLnBvdyhyb290LCAzKSAqIHAzO1xyXG4gICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHZhbHVlKTtcclxuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB2YWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcDAsIHAzKTtcclxuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBwMCwgcDMpO1xyXG4gICAgICByZXR1cm4gW21pbiwgbWF4XTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY2FsY3VsYXRlSGlnaGx5T3JkZXJcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVIaWdobHlPcmRlcihhcnIsIHJhdGlvKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuICAgICAgICBpZiAoaSA+PSBhLmxlbmd0aCAtIDEpIHJldHVybjtcclxuICAgICAgICByZXN1bHQucHVzaCh2ICogKDEgLSByYXRpbykgKyBhW2kgKyAxXSAqIHJhdGlvKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNhbGN1bGF0ZUJlemllclNwbGl0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlQmV6aWVyU3BsaXQocmF0aW8pIHtcclxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9yZGVyMCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICAgICAgb3JkZXIwW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG9yZGVyMSA9IHRoaXMuY2FsY3VsYXRlSGlnaGx5T3JkZXIob3JkZXIwLCByYXRpbyk7XHJcbiAgICAgIHZhciBvcmRlcjIgPSB0aGlzLmNhbGN1bGF0ZUhpZ2hseU9yZGVyKG9yZGVyMSwgcmF0aW8pO1xyXG4gICAgICB2YXIgb3JkZXIzID0gdGhpcy5jYWxjdWxhdGVIaWdobHlPcmRlcihvcmRlcjIsIHJhdGlvKTtcclxuICAgICAgcmV0dXJuIFtvcmRlcjFbMF0sIG9yZGVyMlswXSwgb3JkZXIzWzBdLCBvcmRlcjJbMV0sIG9yZGVyMVsyXSwgb3JkZXIwWzNdXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwibW92ZVRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvKHgsIHkpIHtcclxuICAgICAgaWYgKCF0aGlzLnBhdGhSZWFkeSkge1xyXG4gICAgICAgIHRoaXMucGF0aC5jID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXRoLmkgPSBbWzAsIDBdXTtcclxuICAgICAgICB0aGlzLnBhdGgubyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGF0aC52ID0gW1t4LCB5XV07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WCA9IHg7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WSA9IHk7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRYID0geDtcclxuICAgICAgICB0aGlzLm9mZnNldFkgPSB5O1xyXG4gICAgICAgIHRoaXMucGF0aFJlYWR5ID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmxpbmVUby5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wYXRoU3RhcnQpKTtcclxuICAgICAgICB0aGlzLmxpbmVUbyh4LCB5KTtcclxuICAgICAgICB0aGlzLnBhdGhDaGFpbi5wdXNoKHRoaXMucGF0aFN0YXJ0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wYXRoU3RhcnQgPSBbeCwgeV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1vdmVUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRvUmVsYXRpdmUoeCwgeSkge1xyXG4gICAgICB0aGlzLm1vdmVUbyh0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJsaW5lVG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lVG8oeCwgeSkge1xyXG4gICAgICB0aGlzLnBhdGguaS5wdXNoKFswLCAwXSk7XHJcbiAgICAgIHRoaXMucGF0aC5vLnB1c2goWzAsIDBdKTtcclxuICAgICAgdGhpcy5wYXRoLnYucHVzaChbeCwgeV0pO1xyXG4gICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJsaW5lVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVUb1JlbGF0aXZlKHgsIHkpIHtcclxuICAgICAgdGhpcy5saW5lVG8odGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiaG9yaXpvbnRhbFRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaG9yaXpvbnRhbFRvKHgpIHtcclxuICAgICAgdGhpcy5saW5lVG8oeCwgdGhpcy5jdXJyZW50WSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImhvcml6b250YWxUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaG9yaXpvbnRhbFRvUmVsYXRpdmUoeCkge1xyXG4gICAgICB0aGlzLmhvcml6b250YWxUbyh0aGlzLmN1cnJlbnRYICsgeCk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInZlcnRpY2FsVG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJ0aWNhbFRvKHkpIHtcclxuICAgICAgdGhpcy5saW5lVG8odGhpcy5jdXJyZW50WCwgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInZlcnRpY2FsVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZlcnRpY2FsVG9SZWxhdGl2ZSh5KSB7XHJcbiAgICAgIHRoaXMudmVydGljYWxUbyh0aGlzLmN1cnJlbnRZICsgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImN1YmljQmV6aWVyQ3VydmVUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGN1YmljQmV6aWVyQ3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpIHtcclxuICAgICAgdGhpcy5wYXRoLmkucHVzaChbYzJ4IC0geCwgYzJ5IC0geV0pO1xyXG4gICAgICB0aGlzLnBhdGguby5wdXNoKFtjMXggLSB0aGlzLmN1cnJlbnRYLCBjMXkgLSB0aGlzLmN1cnJlbnRZXSk7XHJcbiAgICAgIHRoaXMucGF0aC52LnB1c2goW3gsIHldKTtcclxuICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW3RoaXMub2Zmc2V0WF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRYLCBjMXgsIGMyeCwgeCkpKSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgYzF5LCBjMnksIHkpKSkpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSkge1xyXG4gICAgICB0aGlzLmN1YmljQmV6aWVyQ3VydmVUbyh0aGlzLmN1cnJlbnRYICsgYzF4LCB0aGlzLmN1cnJlbnRZICsgYzF5LCB0aGlzLmN1cnJlbnRYICsgYzJ4LCB0aGlzLmN1cnJlbnRZICsgYzJ5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVhZHJhdGljQmV6aWVyQ3VydmVUbyhjeCwgY3ksIHgsIHkpIHtcclxuICAgICAgdGhpcy5wYXRoLmkucHVzaChbY3ggLSB4LCBjeSAtIHldKTtcclxuICAgICAgdGhpcy5wYXRoLm8ucHVzaChbY3ggLSB0aGlzLmN1cnJlbnRYLCBjeSAtIHRoaXMuY3VycmVudFldKTtcclxuICAgICAgdGhpcy5wYXRoLnYucHVzaChbeCwgeV0pO1xyXG4gICAgICB0aGlzLm9mZnNldFggPSBNYXRoLm1pbi5hcHBseShNYXRoLCBbdGhpcy5vZmZzZXRYXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFgsIGN4LCBjeCwgeCkpKSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgY3ksIGN5LCB5KSkpKTtcclxuICAgICAgdGhpcy51cGRhdGVYWSh4LCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKGN4LCBjeSwgeCwgeSkge1xyXG4gICAgICB0aGlzLnF1YWRyYXRpY0JlemllckN1cnZlVG8odGhpcy5jdXJyZW50WCArIGN4LCB0aGlzLmN1cnJlbnRZICsgY3ksIHRoaXMuY3VycmVudFggKyB4LCB0aGlzLmN1cnJlbnRZICsgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFyY1RvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXJjVG8ocngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgeCwgeSkge1xyXG4gICAgICB2YXIgY1NlcmllcyA9IFBhdGhNYWtlci5hMmModGhpcy5jdXJyZW50WCwgdGhpcy5jdXJyZW50WSwgcngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgeCwgeSk7XHJcblxyXG4gICAgICB3aGlsZSAoY1Nlcmllcy5sZW5ndGggPj0gNikge1xyXG4gICAgICAgIHZhciBpb3ZMaXN0ID0gY1Nlcmllcy5zcGxpY2UoMCwgNik7XHJcbiAgICAgICAgdGhpcy5wYXRoLmkucHVzaChbaW92TGlzdFsyXSAtIGlvdkxpc3RbNF0sIGlvdkxpc3RbM10gLSBpb3ZMaXN0WzVdXSk7XHJcbiAgICAgICAgdGhpcy5wYXRoLm8ucHVzaChbaW92TGlzdFswXSAtIHRoaXMuY3VycmVudFgsIGlvdkxpc3RbMV0gLSB0aGlzLmN1cnJlbnRZXSk7XHJcbiAgICAgICAgdGhpcy5wYXRoLnYucHVzaChbaW92TGlzdFs0XSwgaW92TGlzdFs1XV0pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WCwgaW92TGlzdFswXSwgaW92TGlzdFsyXSwgaW92TGlzdFs0XSkpKSk7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW3RoaXMub2Zmc2V0WV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBpb3ZMaXN0WzFdLCBpb3ZMaXN0WzNdLCBpb3ZMaXN0WzVdKSkpKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVhZKGlvdkxpc3RbNF0sIGlvdkxpc3RbNV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFyY1RvUmVsYXRpdmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcmNUb1JlbGF0aXZlKHJ4LCByeSwgeEF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcclxuICAgICAgdGhpcy5hcmNUbyhyeCwgcnksIHhBeGlzUm90YXRpb24sIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjbG9zZVBhdGhcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBhdGgoKSB7XHJcbiAgICAgIHRoaXMucGF0aC5jID0gdHJ1ZTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidW5pZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm0oKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAodGhpcy5wYXRoQ2hhaW4ubGVuZ3RoICYmICEodGhpcy5jdXJyZW50WCA9PSB0aGlzLnBhdGhTdGFydFswXSAmJiB0aGlzLmN1cnJlbnRZID09IHRoaXMucGF0aFN0YXJ0WzFdKSkge1xyXG4gICAgICAgIHRoaXMubGluZVRvLmFwcGx5KHRoaXMsIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnBhdGhTdGFydCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB3aGlsZSAodGhpcy5wYXRoQ2hhaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHBhdGhSZWYgPSB0aGlzLnBhdGhDaGFpbi5wb3AoKTtcclxuICAgICAgICB0aGlzLmxpbmVUby5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkocGF0aFJlZikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB3aGlsZSAodGhpcy5wYXRoLm8ubGVuZ3RoIDwgdGhpcy5wYXRoLmkubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5wYXRoLm8ucHVzaChbMCwgMF0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnBhdGgudi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlWzBdIC09IF90aGlzLm9mZnNldFg7XHJcbiAgICAgICAgdmFsdWVbMV0gLT0gX3RoaXMub2Zmc2V0WTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WCA9IDA7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IDA7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInBhcnNlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2UocGF0aERhdGEpIHtcclxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XHJcblxyXG4gICAgICB2YXIgcGF0aERhdGFTZXJpZXMgPSAoMCwgX3N2Z1BhdGhQYXJzZXIucGFyc2VTVkcpKHBhdGhEYXRhKTtcclxuICAgICAgdmFyIHBhdGhEYXRhV2l0aFR5cGU7XHJcbiAgICAgIHBhdGhEYXRhU2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKHBhdGhEYXRhSXRlbSkge1xyXG4gICAgICAgIHN3aXRjaCAocGF0aERhdGFJdGVtLmNvZGUpIHtcclxuICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLm1vdmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5tb3ZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIubGluZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmxpbmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmhvcml6b250YWxUbyhwYXRoRGF0YVdpdGhUeXBlLngpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIuaG9yaXpvbnRhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnZlcnRpY2FsVG8ocGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnZlcnRpY2FsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIuY3ViaWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnF1YWRyYXRpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIucXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmFyY1RvKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmFyY1RvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICAgICAgX3RoaXMyLmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihwYXRoRGF0YUl0ZW0pO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciB0aGlzIHBhdGggY29tbWFuZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ1cHNhbXBsZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwc2FtcGxlKHJhdGlvKSB7XHJcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgLy8gdXNlIERlIENhc3RlbGphdSdzIGFsZ29yaXRobSB0byBkbyB0aGUgdXBzYW1wbGluZ1xyXG4gICAgICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlX0Nhc3RlbGphdSUyN3NfYWxnb3JpdGhtXHJcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyYXRpbykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB1cHNhbXBsaW5nIHJhdGlvIHNob3VsZCBiZSBhbiBpbnRlZ2VyLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVuaWZvcm0oKTtcclxuICAgICAgaWYgKHJhdGlvIDw9IDEpIHJldHVybjtcclxuICAgICAgdmFyIGNvcHlQYXRoID0ge1xyXG4gICAgICAgIGM6IHRoaXMucGF0aC5jLFxyXG4gICAgICAgIGk6IFtdLFxyXG4gICAgICAgIG86IFtdLFxyXG4gICAgICAgIHY6IFtdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMucGF0aC52LmZvckVhY2goZnVuY3Rpb24gKHYsIGksIGEpIHtcclxuICAgICAgICBpZiAoaSA8PSAwKSB7XHJcbiAgICAgICAgICBjb3B5UGF0aC52LnB1c2godik7XHJcbiAgICAgICAgICBjb3B5UGF0aC5pLnB1c2goX3RoaXMzLnBhdGguaVtpXSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb0FycmF5ID0gX3RoaXMzLnBhdGgubztcclxuICAgICAgICB2YXIgaUFycmF5ID0gX3RoaXMzLnBhdGguaTtcclxuICAgICAgICB2YXIgeEFycmF5ID0gW2FbaSAtIDFdWzBdLCBvQXJyYXlbaSAtIDFdWzBdICsgYVtpIC0gMV1bMF0sIGlBcnJheVtpXVswXSArIHZbMF0sIHZbMF1dO1xyXG4gICAgICAgIHZhciB5QXJyYXkgPSBbYVtpIC0gMV1bMV0sIG9BcnJheVtpIC0gMV1bMV0gKyBhW2kgLSAxXVsxXSwgaUFycmF5W2ldWzFdICsgdlsxXSwgdlsxXV07XHJcblxyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCByYXRpbzsgaW5kZXgrKykge1xyXG4gICAgICAgICAgdmFyIHN0ZXBSYXRpbyA9IDEgLyAocmF0aW8gLSBpbmRleCArIDEpO1xyXG5cclxuICAgICAgICAgIHZhciB4U3BsaXRBcnJheSA9IF90aGlzMy5jYWxjdWxhdGVCZXppZXJTcGxpdC5hcHBseShfdGhpczMsIFtzdGVwUmF0aW9dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoeEFycmF5KSkpO1xyXG5cclxuICAgICAgICAgIHZhciB5U3BsaXRBcnJheSA9IF90aGlzMy5jYWxjdWxhdGVCZXppZXJTcGxpdC5hcHBseShfdGhpczMsIFtzdGVwUmF0aW9dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoeUFycmF5KSkpO1xyXG5cclxuICAgICAgICAgIHZhciBfcDB4ID0geEFycmF5WzBdLFxyXG4gICAgICAgICAgICAgIF9wMXggPSB4U3BsaXRBcnJheS5zaGlmdCgpIC0gX3AweCxcclxuICAgICAgICAgICAgICBfcDN4ID0geFNwbGl0QXJyYXlbMV0sXHJcbiAgICAgICAgICAgICAgX3AyeCA9IHhTcGxpdEFycmF5LnNoaWZ0KCkgLSBfcDN4LFxyXG4gICAgICAgICAgICAgIF9wMHkgPSB5QXJyYXlbMF0sXHJcbiAgICAgICAgICAgICAgX3AxeSA9IHlTcGxpdEFycmF5LnNoaWZ0KCkgLSBfcDB5LFxyXG4gICAgICAgICAgICAgIF9wM3kgPSB5U3BsaXRBcnJheVsxXSxcclxuICAgICAgICAgICAgICBfcDJ5ID0geVNwbGl0QXJyYXkuc2hpZnQoKSAtIF9wM3k7XHJcblxyXG4gICAgICAgICAgY29weVBhdGguby5wdXNoKFtfcDF4LCBfcDF5XSk7XHJcbiAgICAgICAgICBjb3B5UGF0aC5pLnB1c2goW19wMngsIF9wMnldKTtcclxuICAgICAgICAgIGNvcHlQYXRoLnYucHVzaChbX3AzeCwgX3AzeV0pO1xyXG4gICAgICAgICAgeEFycmF5ID0geFNwbGl0QXJyYXk7XHJcbiAgICAgICAgICB5QXJyYXkgPSB5U3BsaXRBcnJheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwMHggPSB4QXJyYXkuc2hpZnQoKSxcclxuICAgICAgICAgICAgcDF4ID0geEFycmF5LnNoaWZ0KCkgLSBwMHgsXHJcbiAgICAgICAgICAgIHAzeCA9IHhBcnJheVsxXSxcclxuICAgICAgICAgICAgcDJ4ID0geEFycmF5LnNoaWZ0KCkgLSBwM3gsXHJcbiAgICAgICAgICAgIHAweSA9IHlBcnJheS5zaGlmdCgpLFxyXG4gICAgICAgICAgICBwMXkgPSB5QXJyYXkuc2hpZnQoKSAtIHAweSxcclxuICAgICAgICAgICAgcDN5ID0geUFycmF5WzFdLFxyXG4gICAgICAgICAgICBwMnkgPSB5QXJyYXkuc2hpZnQoKSAtIHAzeTtcclxuICAgICAgICBjb3B5UGF0aC5vLnB1c2goW3AxeCwgcDF5XSk7XHJcbiAgICAgICAgY29weVBhdGguaS5wdXNoKFtwMngsIHAyeV0pO1xyXG4gICAgICAgIGNvcHlQYXRoLnYucHVzaChbcDN4LCBwM3ldKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucGF0aCA9IGNvcHlQYXRoO1xyXG4gICAgICB0aGlzLnVuaWZvcm0oKTtcclxuICAgIH1cclxuICB9XSwgW3tcclxuICAgIGtleTogXCJhMmNcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBhMmMoeDEsIHkxLCByeCwgcnksIGFuZ2xlLCBsYXJnZV9hcmNfZmxhZywgc3dlZXBfZmxhZywgeDIsIHkyLCByZWN1cnNpdmUpIHtcclxuICAgICAgLy8gZm9yIG1vcmUgaW5mb3JtYXRpb24gb2Ygd2hlcmUgdGhpcyBNYXRoIGNhbWUgZnJvbSB2aXNpdDpcclxuICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXHJcbiAgICAgIHZhciBfMTIwID0gTWF0aC5QSSAqIDEyMCAvIDE4MCxcclxuICAgICAgICAgIHJhZCA9IE1hdGguUEkgLyAxODAgKiAoK2FuZ2xlIHx8IDApLFxyXG4gICAgICAgICAgcmVzID0gW10sXHJcbiAgICAgICAgICB4eSxcclxuICAgICAgICAgIHJvdGF0ZSA9IGZ1bmN0aW9uIHJvdGF0ZSh4LCB5LCByYWQpIHtcclxuICAgICAgICB2YXIgWCA9IHggKiBNYXRoLmNvcyhyYWQpIC0geSAqIE1hdGguc2luKHJhZCksXHJcbiAgICAgICAgICAgIFkgPSB4ICogTWF0aC5zaW4ocmFkKSArIHkgKiBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB4OiBYLFxyXG4gICAgICAgICAgeTogWVxyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoIXJ4IHx8ICFyeSkge1xyXG4gICAgICAgIHJldHVybiBbeDEsIHkxLCB4MiwgeTIsIHgyLCB5Ml07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghcmVjdXJzaXZlKSB7XHJcbiAgICAgICAgeHkgPSByb3RhdGUoeDEsIHkxLCAtcmFkKTtcclxuICAgICAgICB4MSA9IHh5Lng7XHJcbiAgICAgICAgeTEgPSB4eS55O1xyXG4gICAgICAgIHh5ID0gcm90YXRlKHgyLCB5MiwgLXJhZCk7XHJcbiAgICAgICAgeDIgPSB4eS54O1xyXG4gICAgICAgIHkyID0geHkueTtcclxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSxcclxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSxcclxuICAgICAgICAgICAgeCA9ICh4MSAtIHgyKSAvIDIsXHJcbiAgICAgICAgICAgIHkgPSAoeTEgLSB5MikgLyAyO1xyXG4gICAgICAgIHZhciBoID0geCAqIHggLyAocnggKiByeCkgKyB5ICogeSAvIChyeSAqIHJ5KTtcclxuXHJcbiAgICAgICAgaWYgKGggPiAxKSB7XHJcbiAgICAgICAgICBoID0gTWF0aC5zcXJ0KGgpO1xyXG4gICAgICAgICAgcnggPSBoICogcng7XHJcbiAgICAgICAgICByeSA9IGggKiByeTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByeDIgPSByeCAqIHJ4LFxyXG4gICAgICAgICAgICByeTIgPSByeSAqIHJ5LFxyXG4gICAgICAgICAgICBrID0gKGxhcmdlX2FyY19mbGFnID09IHN3ZWVwX2ZsYWcgPyAtMSA6IDEpICogTWF0aC5zcXJ0KE1hdGguYWJzKChyeDIgKiByeTIgLSByeDIgKiB5ICogeSAtIHJ5MiAqIHggKiB4KSAvIChyeDIgKiB5ICogeSArIHJ5MiAqIHggKiB4KSkpLFxyXG4gICAgICAgICAgICBjeCA9IGsgKiByeCAqIHkgLyByeSArICh4MSArIHgyKSAvIDIsXHJcbiAgICAgICAgICAgIGN5ID0gayAqIC1yeSAqIHggLyByeCArICh5MSArIHkyKSAvIDIsXHJcbiAgICAgICAgICAgIGYxID0gTWF0aC5hc2luKCh5MSAtIGN5KSAvIHJ5KSxcclxuICAgICAgICAgICAgZjIgPSBNYXRoLmFzaW4oKHkyIC0gY3kpIC8gcnkpO1xyXG4gICAgICAgIGYxID0geDEgPCBjeCA/IE1hdGguUEkgLSBmMSA6IGYxO1xyXG4gICAgICAgIGYyID0geDIgPCBjeCA/IE1hdGguUEkgLSBmMiA6IGYyO1xyXG4gICAgICAgIGYxIDwgMCAmJiAoZjEgPSBNYXRoLlBJICogMiArIGYxKTtcclxuICAgICAgICBmMiA8IDAgJiYgKGYyID0gTWF0aC5QSSAqIDIgKyBmMik7XHJcblxyXG4gICAgICAgIGlmIChzd2VlcF9mbGFnICYmIGYxID4gZjIpIHtcclxuICAgICAgICAgIGYxID0gZjEgLSBNYXRoLlBJICogMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3dlZXBfZmxhZyAmJiBmMiA+IGYxKSB7XHJcbiAgICAgICAgICBmMiA9IGYyIC0gTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGYxID0gcmVjdXJzaXZlWzBdO1xyXG4gICAgICAgIGYyID0gcmVjdXJzaXZlWzFdO1xyXG4gICAgICAgIGN4ID0gcmVjdXJzaXZlWzJdO1xyXG4gICAgICAgIGN5ID0gcmVjdXJzaXZlWzNdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZGYgPSBmMiAtIGYxO1xyXG5cclxuICAgICAgaWYgKE1hdGguYWJzKGRmKSA+IF8xMjApIHtcclxuICAgICAgICB2YXIgZjJvbGQgPSBmMixcclxuICAgICAgICAgICAgeDJvbGQgPSB4MixcclxuICAgICAgICAgICAgeTJvbGQgPSB5MjtcclxuICAgICAgICBmMiA9IGYxICsgXzEyMCAqIChzd2VlcF9mbGFnICYmIGYyID4gZjEgPyAxIDogLTEpO1xyXG4gICAgICAgIHgyID0gY3ggKyByeCAqIE1hdGguY29zKGYyKTtcclxuICAgICAgICB5MiA9IGN5ICsgcnkgKiBNYXRoLnNpbihmMik7XHJcbiAgICAgICAgcmVzID0gdGhpcy5hMmMoeDIsIHkyLCByeCwgcnksIGFuZ2xlLCAwLCBzd2VlcF9mbGFnLCB4Mm9sZCwgeTJvbGQsIFtmMiwgZjJvbGQsIGN4LCBjeV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkZiA9IGYyIC0gZjE7XHJcbiAgICAgIHZhciBjMSA9IE1hdGguY29zKGYxKSxcclxuICAgICAgICAgIHMxID0gTWF0aC5zaW4oZjEpLFxyXG4gICAgICAgICAgYzIgPSBNYXRoLmNvcyhmMiksXHJcbiAgICAgICAgICBzMiA9IE1hdGguc2luKGYyKSxcclxuICAgICAgICAgIHQgPSBNYXRoLnRhbihkZiAvIDQpLFxyXG4gICAgICAgICAgaHggPSA0IC8gMyAqIHJ4ICogdCxcclxuICAgICAgICAgIGh5ID0gNCAvIDMgKiByeSAqIHQsXHJcbiAgICAgICAgICBtMSA9IFt4MSwgeTFdLFxyXG4gICAgICAgICAgbTIgPSBbeDEgKyBoeCAqIHMxLCB5MSAtIGh5ICogYzFdLFxyXG4gICAgICAgICAgbTMgPSBbeDIgKyBoeCAqIHMyLCB5MiAtIGh5ICogYzJdLFxyXG4gICAgICAgICAgbTQgPSBbeDIsIHkyXTtcclxuICAgICAgbTJbMF0gPSAyICogbTFbMF0gLSBtMlswXTtcclxuICAgICAgbTJbMV0gPSAyICogbTFbMV0gLSBtMlsxXTtcclxuXHJcbiAgICAgIGlmIChyZWN1cnNpdmUpIHtcclxuICAgICAgICByZXR1cm4gW20yLCBtMywgbTRdLmNvbmNhdChyZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcyA9IFttMiwgbTMsIG00XS5jb25jYXQocmVzKS5qb2luKCkuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoeCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG5ld3JlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgbmV3cmVzW2ldID0gaSAlIDIgPyByb3RhdGUocmVzW2kgLSAxXSwgcmVzW2ldLCByYWQpLnkgOiByb3RhdGUocmVzW2ldLCByZXNbaSArIDFdLCByYWQpLng7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3cmVzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gUGF0aE1ha2VyO1xyXG59KCk7XHJcblxyXG5leHBvcnRzLlBhdGhNYWtlciA9IFBhdGhNYWtlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl3WVhSb0xuUnpJbDBzSW01aGJXVnpJanBiSWxCaGRHaE5ZV3RsY2lJc0luQmhkR2hFWVhSaElpd2lZeUlzSW1raUxDSnZJaXdpZGlJc0lrbHVabWx1YVhSNUlpd2ljR0Z5YzJVaUxDSjRJaXdpZVNJc0ltTjFjbkpsYm5SWUlpd2lZM1Z5Y21WdWRGa2lMQ0p2Wm1aelpYUllJaXdpVFdGMGFDSXNJbTFwYmlJc0ltOW1abk5sZEZraUxDSndNQ0lzSW5BeElpd2ljRElpTENKd015SXNJbUVpTENKaUlpd2liV0Y0SWl3aWMzRnlkQ0lzSW5KdmIzUnpJaXdpYldGd0lpd2liWFZzZEdraUxDSm1iM0pGWVdOb0lpd2ljbTl2ZENJc0luWmhiSFZsSWl3aWNHOTNJaXdpWVhKeUlpd2ljbUYwYVc4aUxDSnlaWE4xYkhRaUxDSnNaVzVuZEdnaUxDSndkWE5vSWl3aWIzSmtaWEl3SWl3aWIzSmtaWEl4SWl3aVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSWlMQ0p2Y21SbGNqSWlMQ0p2Y21SbGNqTWlMQ0p3WVhSb1VtVmhaSGtpTENKd1lYUm9JaXdpYkdsdVpWUnZJaXdpY0dGMGFGTjBZWEowSWl3aWNHRjBhRU5vWVdsdUlpd2liVzkyWlZSdklpd2lkWEJrWVhSbFdGa2lMQ0pvYjNKcGVtOXVkR0ZzVkc4aUxDSjJaWEowYVdOaGJGUnZJaXdpWXpGNElpd2lZekY1SWl3aVl6SjRJaXdpWXpKNUlpd2lZMkZzWTNWc1lYUmxRbVY2YVdWeVRXbHVUV0Y0SWl3aVkzVmlhV05DWlhwcFpYSkRkWEoyWlZSdklpd2lZM2dpTENKamVTSXNJbkYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsVkc4aUxDSnllQ0lzSW5KNUlpd2llRUY0YVhOU2IzUmhkR2x2YmlJc0lteGhjbWRsUVhKalJteGhaeUlzSW5OM1pXVndSbXhoWnlJc0ltTlRaWEpwWlhNaUxDSmhNbU1pTENKcGIzWk1hWE4wSWl3aWMzQnNhV05sSWl3aVlYSmpWRzhpTENKd1lYUm9VbVZtSWl3aWNHOXdJaXdpY0dGMGFFUmhkR0ZUWlhKcFpYTWlMQ0p3WVhSb1JHRjBZVmRwZEdoVWVYQmxJaXdpY0dGMGFFUmhkR0ZKZEdWdElpd2lZMjlrWlNJc0ltMXZkbVZVYjFKbGJHRjBhWFpsSWl3aWJHbHVaVlJ2VW1Wc1lYUnBkbVVpTENKb2IzSnBlbTl1ZEdGc1ZHOVNaV3hoZEdsMlpTSXNJblpsY25ScFkyRnNWRzlTWld4aGRHbDJaU0lzSW5neElpd2llVEVpTENKNE1pSXNJbmt5SWl3aVkzVmlhV05DWlhwcFpYSkRkWEoyWlZSdlVtVnNZWFJwZG1VaUxDSnhkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVlJ2VW1Wc1lYUnBkbVVpTENKc1lYSm5aVUZ5WXlJc0luTjNaV1Z3SWl3aVlYSmpWRzlTWld4aGRHbDJaU0lzSW1Oc2IzTmxVR0YwYUNJc0ltTnZibk52YkdVaUxDSmxjbkp2Y2lJc0lrVnljbTl5SWl3aVRuVnRZbVZ5SWl3aWFYTkpiblJsWjJWeUlpd2lkVzVwWm05eWJTSXNJbU52Y0hsUVlYUm9JaXdpYjBGeWNtRjVJaXdpYVVGeWNtRjVJaXdpZUVGeWNtRjVJaXdpZVVGeWNtRjVJaXdpYVc1a1pYZ2lMQ0p6ZEdWd1VtRjBhVzhpTENKNFUzQnNhWFJCY25KaGVTSXNJbU5oYkdOMWJHRjBaVUpsZW1sbGNsTndiR2wwSWl3aWVWTndiR2wwUVhKeVlYa2lMQ0p3TUhnaUxDSndNWGdpTENKemFHbG1kQ0lzSW5BemVDSXNJbkF5ZUNJc0luQXdlU0lzSW5BeGVTSXNJbkF6ZVNJc0luQXllU0lzSW1GdVoyeGxJaXdpYkdGeVoyVmZZWEpqWDJac1lXY2lMQ0p6ZDJWbGNGOW1iR0ZuSWl3aWNtVmpkWEp6YVhabElpd2lYekV5TUNJc0lsQkpJaXdpY21Ga0lpd2ljbVZ6SWl3aWVIa2lMQ0p5YjNSaGRHVWlMQ0pZSWl3aVkyOXpJaXdpYzJsdUlpd2lXU0lzSW1naUxDSnllRElpTENKeWVUSWlMQ0pySWl3aVlXSnpJaXdpWmpFaUxDSmhjMmx1SWl3aVpqSWlMQ0prWmlJc0ltWXliMnhrSWl3aWVESnZiR1FpTENKNU1tOXNaQ0lzSW1NeElpd2ljekVpTENKak1pSXNJbk15SWl3aWRDSXNJblJoYmlJc0ltaDRJaXdpYUhraUxDSnRNU0lzSW0weUlpd2liVE1pTENKdE5DSXNJbU52Ym1OaGRDSXNJbXB2YVc0aUxDSnpjR3hwZENJc0luQmhjbk5sUm14dllYUWlMQ0p1WlhkeVpYTWlMQ0pwYVNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3U1VGRllVRXNVenM3TzBGQllWUTdRVUZMUVN4eFFrRkJXVU1zVVVGQldpeEZRVUVyUWp0QlFVRkJPenRCUVVGQkxHdERRV3BDVWp0QlFVTnVRa01zVFVGQlFVRXNRMEZCUXl4RlFVRkZMRXRCUkdkQ08wRkJSVzVDUXl4TlFVRkJRU3hEUVVGRExFVkJRVVVzUlVGR1owSTdRVUZIYmtKRExFMUJRVUZCTEVOQlFVTXNSVUZCUlN4RlFVaG5RanRCUVVsdVFrTXNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJTbWRDTEV0QmFVSlJPenRCUVVGQkxITkRRVlpLTEVOQlZVazdPMEZCUVVFc2MwTkJWRW9zUTBGVFNUczdRVUZCUVN4eFEwRlNURU1zVVVGUlN6czdRVUZCUVN4eFEwRlFURUVzVVVGUFN6czdRVUZCUVN4MVEwRktXQ3hMUVVsWE96dEJRVUZCTEhWRFFVaFBMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUTBGSFVEczdRVUZCUVN4MVEwRkdVeXhGUVVWVU96dEJRVU16UWl4UlFVRkpUQ3hSUVVGS0xFVkJRV003UVVGRFZpeFhRVUZMVFN4TFFVRk1MRU5CUVZkT0xGRkJRVmc3UVVGRFNEdEJRVU5LT3pzN096WkNRVVZuUWs4c1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGJrTXNWMEZCUzBNc1VVRkJUQ3hIUVVGblFrWXNRMEZCYUVJN1FVRkRRU3hYUVVGTFJ5eFJRVUZNTEVkQlFXZENSaXhEUVVGb1FqdEJRVU5CTEZkQlFVdEhMRTlCUVV3c1IwRkJaVU1zU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNc1MwRkJTMFlzVDBGQlpDeEZRVUYxUWtvc1EwRkJka0lzUTBGQlpqdEJRVU5CTEZkQlFVdFBMRTlCUVV3c1IwRkJaVVlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNc1MwRkJTME1zVDBGQlpDeEZRVUYxUWs0c1EwRkJka0lzUTBGQlpqdEJRVU5JT3pzN01FTkJSVFpDVHl4RkxFVkJRVmxETEVVc1JVRkJXVU1zUlN4RlFVRlpReXhGTEVWQlFUaENPMEZCUXpWR0xGVkJRVTFETEVOQlFVTXNSMEZCUnl4TFFVRkxSQ3hGUVVGRkxFZEJRVWNzU1VGQlNVUXNSVUZCVkN4SFFVRmpMRWxCUVVsRUxFVkJRV3hDTEVkQlFYVkNSQ3hGUVVFMVFpeERRVUZXTzBGQlEwRXNWVUZCVFVzc1EwRkJReXhIUVVGSExFdEJRVXRJTEVWQlFVVXNSMEZCUnl4SlFVRkpSQ3hGUVVGVUxFZEJRV05FTEVWQlFXNUNMRU5CUVZZN1FVRkRRU3hWUVVGTlpDeERRVUZETEVkQlFVY3NTMEZCUzJVc1JVRkJSU3hIUVVGSFJDeEZRVUZXTEVOQlFWWTdRVUZEUVN4VlFVRkpSaXhIUVVGSExFZEJRVWRTTEZGQlFWWTdRVUZCUVN4VlFVRnZRbWRDTEVkQlFVY3NSMEZCUnl4RFFVRkRhRUlzVVVGQk0wSTdPMEZCUTBFc1ZVRkJTV1VzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWRCUVZFc1NVRkJTVVFzUTBGQlNpeEhRVUZSYkVJc1EwRkJhRUlzU1VGQmNVSXNRMEZCZWtJc1JVRkJORUk3UVVGRGVFSXNXVUZCVFhGQ0xFbEJRVWtzUjBGQlIxWXNTVUZCU1N4RFFVRkRWU3hKUVVGTUxFTkJRVlZHTEVOQlFVTXNSMEZCUjBFc1EwRkJTaXhIUVVGUkxFbEJRVWxFTEVOQlFVb3NSMEZCVVd4Q0xFTkJRVEZDTEVOQlFXSTdRVUZEUVN4WlFVRk5jMElzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVNc1EwRkJUQ3hGUVVGUlF5eEhRVUZTTEVOQlFWa3NWVUZCUVVNc1MwRkJTenRCUVVGQkxHbENRVUZKTEVOQlFVTkJMRXRCUVVzc1IwRkJSMGdzU1VGQlVpeEhRVUZsUml4RFFVRm9RaXhKUVVGeFFpeERRVUZ5UWl4SFFVRjVRa1FzUTBGQk4wSTdRVUZCUVN4VFFVRnFRaXhEUVVGa08wRkJRMEZKTEZGQlFVRkJMRXRCUVVzc1EwRkJRMGNzVDBGQlRpeERRVUZqTEZWQlFVRkRMRWxCUVVrc1JVRkJTVHRCUVVOc1FpeGpRVUZKUVN4SlFVRkpMRWRCUVVjc1EwRkJVQ3hKUVVGWlFTeEpRVUZKTEVkQlFVY3NRMEZCZGtJc1JVRkJNRUk3UVVGRGRFSXNaMEpCUVUxRExFdEJRVXNzUjBGQlIyaENMRWxCUVVrc1EwRkJRMmxDTEVkQlFVd3NRMEZCVXl4SlFVRkpSaXhKUVVGaUxFVkJRVzFDTEVOQlFXNUNMRWxCUVhkQ1dpeEZRVUY0UWl4SFFVRTJRaXhKUVVGSlNDeEpRVUZKTEVOQlFVTnBRaXhIUVVGTUxFTkJRVk1zU1VGQlNVWXNTVUZCWWl4RlFVRnRRaXhEUVVGdVFpeERRVUZLTEVkQlFUUkNRU3hKUVVFMVFpeEhRVUZ0UTFnc1JVRkJhRVVzUjBGQmNVVXNTMEZCU3l4SlFVRkpWeXhKUVVGVUxFbEJRV2xDUVN4SlFVRnFRaXhIUVVGM1FrRXNTVUZCZUVJc1IwRkJLMEpXTEVWQlFYQkhMRWRCUVhsSFRDeEpRVUZKTEVOQlFVTnBRaXhIUVVGTUxFTkJRVk5HTEVsQlFWUXNSVUZCWlN4RFFVRm1MRWxCUVc5Q1ZDeEZRVUV6U1R0QlFVTkJUQ3haUVVGQlFTeEhRVUZITEVkQlFVZEVMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUUVN4SFFVRlVMRVZCUVdObExFdEJRV1FzUTBGQlRqdEJRVU5CVUN4WlFVRkJRU3hIUVVGSExFZEJRVWRVTEVsQlFVa3NRMEZCUTFNc1IwRkJUQ3hEUVVGVFFTeEhRVUZVTEVWQlFXTlBMRXRCUVdRc1EwRkJUanRCUVVOSU8wRkJRMG9zVTBGT1JEdEJRVTlJT3p0QlFVTkVaaXhOUVVGQlFTeEhRVUZITEVkQlFVZEVMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUUVN4SFFVRlVMRVZCUVdORkxFVkJRV1FzUlVGQmEwSkhMRVZCUVd4Q0xFTkJRVTQ3UVVGRFFVY3NUVUZCUVVFc1IwRkJSeXhIUVVGSFZDeEpRVUZKTEVOQlFVTlRMRWRCUVV3c1EwRkJVMEVzUjBGQlZDeEZRVUZqVGl4RlFVRmtMRVZCUVd0Q1J5eEZRVUZzUWl4RFFVRk9PMEZCUTBFc1lVRkJUeXhEUVVGRFRDeEhRVUZFTEVWQlFVMVJMRWRCUVU0c1EwRkJVRHRCUVVOSU96czdlVU5CUlRSQ1V5eEhMRVZCUVdWRExFc3NSVUZCZVVJN1FVRkRha1VzVlVGQlNVTXNUVUZCWjBJc1IwRkJSeXhGUVVGMlFqdEJRVU5CUml4TlFVRkJRU3hIUVVGSExFTkJRVU5LTEU5QlFVb3NRMEZCV1N4VlFVRkRkRUlzUTBGQlJDeEZRVUZKUml4RFFVRktMRVZCUVU5cFFpeERRVUZRTEVWQlFXRTdRVUZEY2tJc1dVRkJTV3BDTEVOQlFVTXNTVUZCU1dsQ0xFTkJRVU1zUTBGQlEyTXNUVUZCUml4SFFVRlhMRU5CUVhCQ0xFVkJRWFZDTzBGQlEzWkNSQ3hSUVVGQlFTeE5RVUZOTEVOQlFVTkZMRWxCUVZBc1EwRkJXVGxDTEVOQlFVTXNTVUZCU1N4SlFVRkpNa0lzUzBGQlVpeERRVUZFTEVkQlFXdENXaXhEUVVGRExFTkJRVU5xUWl4RFFVRkRMRWRCUVVjc1EwRkJUQ3hEUVVGRUxFZEJRVmMyUWl4TFFVRjZRenRCUVVOSUxFOUJTRVE3UVVGSlFTeGhRVUZQUXl4TlFVRlFPMEZCUTBnN096dDVRMEZGTkVKRUxFc3NSVUZCT0VNN1FVRkJRU3gzUTBGQk5VSkpMRTFCUVRSQ08wRkJRVFZDUVN4UlFVRkJRU3hOUVVFMFFqdEJRVUZCT3p0QlFVTjJSU3hWUVVGSlF5eE5RVUZOTEVkQlFVY3NTMEZCUzBNc2IwSkJRVXdzUTBGQk1FSkdMRTFCUVRGQ0xFVkJRV3REU2l4TFFVRnNReXhEUVVGaU8wRkJRMEVzVlVGQlNVOHNUVUZCVFN4SFFVRkhMRXRCUVV0RUxHOUNRVUZNTEVOQlFUQkNSQ3hOUVVFeFFpeEZRVUZyUTB3c1MwRkJiRU1zUTBGQllqdEJRVU5CTEZWQlFVbFJMRTFCUVUwc1IwRkJSeXhMUVVGTFJpeHZRa0ZCVEN4RFFVRXdRa01zVFVGQk1VSXNSVUZCYTBOUUxFdEJRV3hETEVOQlFXSTdRVUZEUVN4aFFVRlBMRU5CUVVOTExFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFWQXNSVUZCV1VVc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQmJFSXNSVUZCZFVKRExFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFUZENMRVZCUVd0RFJDeE5RVUZOTEVOQlFVTXNRMEZCUkN4RFFVRjRReXhGUVVFMlEwWXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJia1FzUlVGQmQwUkVMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVGxFTEVOQlFWQTdRVUZEU0RzN096SkNRVVZoTlVJc1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGFFTXNWVUZCU1N4RFFVRkRMRXRCUVV0blF5eFRRVUZXTEVWQlFYRkNPMEZCUTJwQ0xHRkJRVXRETEVsQlFVd3NRMEZCVlhoRExFTkJRVllzUjBGQll5eExRVUZrTzBGQlEwRXNZVUZCUzNkRExFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1IwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCUkN4RFFVRmtPMEZCUTBFc1lVRkJTM1ZETEVsQlFVd3NRMEZCVlhSRExFTkJRVllzUjBGQll5eEZRVUZrTzBGQlEwRXNZVUZCUzNORExFbEJRVXdzUTBGQlZYSkRMRU5CUVZZc1IwRkJZeXhEUVVGRExFTkJRVU5ITEVOQlFVUXNSVUZCU1VNc1EwRkJTaXhEUVVGRUxFTkJRV1E3UVVGRFFTeGhRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeERRVUZvUWp0QlFVTkJMR0ZCUVV0SExGRkJRVXdzUjBGQlowSkdMRU5CUVdoQ08wRkJRMEVzWVVGQlMwY3NUMEZCVEN4SFFVRmxTaXhEUVVGbU8wRkJRMEVzWVVGQlMwOHNUMEZCVEN4SFFVRmxUaXhEUVVGbU8wRkJRMEVzWVVGQlMyZERMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEU0N4UFFWWkVMRTFCVlU4N1FVRkRTQ3hoUVVGTFJTeE5RVUZNTEdkRFFVRmxMRXRCUVV0RExGTkJRWEJDTzBGQlEwRXNZVUZCUzBRc1RVRkJUQ3hEUVVGWmJrTXNRMEZCV2l4RlFVRmxReXhEUVVGbU8wRkJRMEVzWVVGQlMyOURMRk5CUVV3c1EwRkJaVllzU1VGQlppeERRVUZ2UWl4TFFVRkxVeXhUUVVGNlFqdEJRVU5JT3p0QlFVTkVMRmRCUVV0QkxGTkJRVXdzUjBGQmFVSXNRMEZCUTNCRExFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRnFRanRCUVVOSU96czdiVU5CUTNGQ1JDeERMRVZCUVZkRExFTXNSVUZCVnp0QlFVTjRReXhYUVVGTGNVTXNUVUZCVEN4RFFVRlpMRXRCUVV0d1F5eFJRVUZNTEVkQlFXZENSaXhEUVVFMVFpeEZRVUVyUWl4TFFVRkxSeXhSUVVGTUxFZEJRV2RDUml4RFFVRXZRenRCUVVOSU96czdNa0pCUTJGRUxFTXNSVUZCVjBNc1F5eEZRVUZYTzBGQlEyaERMRmRCUVV0cFF5eEpRVUZNTEVOQlFWVjJReXhEUVVGV0xFTkJRV0ZuUXl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCYkVJN1FVRkRRU3hYUVVGTFR5eEpRVUZNTEVOQlFWVjBReXhEUVVGV0xFTkJRV0VyUWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NRMEZCYkVJN1FVRkRRU3hYUVVGTFR5eEpRVUZNTEVOQlFWVnlReXhEUVVGV0xFTkJRV0U0UWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU16UWl4RFFVRkVMRVZCUVVsRExFTkJRVW9zUTBGQmJFSTdRVUZEUVN4WFFVRkxjME1zVVVGQlRDeERRVUZqZGtNc1EwRkJaQ3hGUVVGcFFrTXNRMEZCYWtJN1FVRkRTRHM3TzIxRFFVTnhRa1FzUXl4RlFVRlhReXhETEVWQlFWYzdRVUZEZUVNc1YwRkJTMnRETEUxQlFVd3NRMEZCV1N4TFFVRkxha01zVVVGQlRDeEhRVUZuUWtZc1EwRkJOVUlzUlVGQkswSXNTMEZCUzBjc1VVRkJUQ3hIUVVGblFrWXNRMEZCTDBNN1FVRkRTRHM3TzJsRFFVTnRRa1FzUXl4RlFVRlhPMEZCUXpOQ0xGZEJRVXR0UXl4TlFVRk1MRU5CUVZsdVF5eERRVUZhTEVWQlFXVXNTMEZCUzBjc1VVRkJjRUk3UVVGRFNEczdPM2xEUVVNeVFrZ3NReXhGUVVGWE8wRkJRMjVETEZkQlFVdDNReXhaUVVGTUxFTkJRV3RDTEV0QlFVdDBReXhSUVVGTUxFZEJRV2RDUml4RFFVRnNRenRCUVVOSU96czdLMEpCUTJsQ1F5eERMRVZCUVZjN1FVRkRla0lzVjBGQlMydERMRTFCUVV3c1EwRkJXU3hMUVVGTGFrTXNVVUZCYWtJc1JVRkJNa0pFTEVOQlFUTkNPMEZCUTBnN096dDFRMEZEZVVKQkxFTXNSVUZCVnp0QlFVTnFReXhYUVVGTGQwTXNWVUZCVEN4RFFVRm5RaXhMUVVGTGRFTXNVVUZCVEN4SFFVRm5Ra1lzUTBGQmFFTTdRVUZEU0RzN08zVkRRVVZIZVVNc1J5eEZRVU5CUXl4SExFVkJRMEZETEVjc1JVRkRRVU1zUnl4RlFVTkJOME1zUXl4RlFVTkJReXhETEVWQlEwWTdRVUZEUlN4WFFVRkxhVU1zU1VGQlRDeERRVUZWZGtNc1EwRkJWaXhEUVVGaFowTXNTVUZCWWl4RFFVRnJRaXhEUVVGRGFVSXNSMEZCUnl4SFFVRkhOVU1zUTBGQlVDeEZRVUZWTmtNc1IwRkJSeXhIUVVGSE5VTXNRMEZCYUVJc1EwRkJiRUk3UVVGRFFTeFhRVUZMYVVNc1NVRkJUQ3hEUVVGVmRFTXNRMEZCVml4RFFVRmhLMElzU1VGQllpeERRVUZyUWl4RFFVRkRaU3hIUVVGSExFZEJRVWNzUzBGQlMzaERMRkZCUVZvc1JVRkJjMEo1UXl4SFFVRkhMRWRCUVVjc1MwRkJTM2hETEZGQlFXcERMRU5CUVd4Q08wRkJRMEVzVjBGQlN5dENMRWxCUVV3c1EwRkJWWEpETEVOQlFWWXNRMEZCWVRoQ0xFbEJRV0lzUTBGQmEwSXNRMEZCUXpOQ0xFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRnNRanRCUVVOQkxGZEJRVXRITEU5QlFVd3NSMEZCWlVNc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEU5QlFVRkVMRWxCUVVrc1IwRkJTeXhMUVVGTFJDeFBRVUZXTERSQ1FVRnpRaXhMUVVGTE1FTXNjVUpCUVV3c1EwRkJNa0lzUzBGQlN6VkRMRkZCUVdoRExFVkJRVEJEZDBNc1IwRkJNVU1zUlVGQkswTkZMRWRCUVM5RExFVkJRVzlFTlVNc1EwRkJjRVFzUTBGQmRFSXNSMEZCYmtJN1FVRkRRU3hYUVVGTFR5eFBRVUZNTEVkQlFXVkdMRWxCUVVrc1EwRkJRME1zUjBGQlRDeFBRVUZCUkN4SlFVRkpMRWRCUVVzc1MwRkJTMFVzVDBGQlZpdzBRa0ZCYzBJc1MwRkJTM1ZETEhGQ1FVRk1MRU5CUVRKQ0xFdEJRVXN6UXl4UlFVRm9ReXhGUVVFd1EzZERMRWRCUVRGRExFVkJRU3REUlN4SFFVRXZReXhGUVVGdlJEVkRMRU5CUVhCRUxFTkJRWFJDTEVkQlFXNUNPMEZCUTBFc1YwRkJTM05ETEZGQlFVd3NRMEZCWTNaRExFTkJRV1FzUlVGQmFVSkRMRU5CUVdwQ08wRkJRMGc3T3pzclEwRkZSM2xETEVjc1JVRkRRVU1zUnl4RlFVTkJReXhITEVWQlEwRkRMRWNzUlVGRFFUZERMRU1zUlVGRFFVTXNReXhGUVVOR08wRkJRMFVzVjBGQlN6aERMR3RDUVVGTUxFTkJRWGRDTEV0QlFVczNReXhSUVVGTUxFZEJRV2RDZDBNc1IwRkJlRU1zUlVGQk5rTXNTMEZCUzNaRExGRkJRVXdzUjBGQlowSjNReXhIUVVFM1JDeEZRVUZyUlN4TFFVRkxla01zVVVGQlRDeEhRVUZuUWpCRExFZEJRV3hHTEVWQlFYVkdMRXRCUVV0NlF5eFJRVUZNTEVkQlFXZENNRU1zUjBGQmRrY3NSVUZCTkVjc1MwRkJTek5ETEZGQlFVd3NSMEZCWjBKR0xFTkJRVFZJTEVWQlFTdElMRXRCUVV0SExGRkJRVXdzUjBGQlowSkdMRU5CUVM5Sk8wRkJRMGc3T3pzeVEwRkROa0lyUXl4RkxFVkJRVmxETEVVc1JVRkJXV3BFTEVNc1JVRkJWME1zUXl4RlFVRlhPMEZCUTNoRkxGZEJRVXRwUXl4SlFVRk1MRU5CUVZWMlF5eERRVUZXTEVOQlFXRm5ReXhKUVVGaUxFTkJRV3RDTEVOQlFVTnhRaXhGUVVGRkxFZEJRVWRvUkN4RFFVRk9MRVZCUVZOcFJDeEZRVUZGTEVkQlFVZG9SQ3hEUVVGa0xFTkJRV3hDTzBGQlEwRXNWMEZCUzJsRExFbEJRVXdzUTBGQlZYUkRMRU5CUVZZc1EwRkJZU3RDTEVsQlFXSXNRMEZCYTBJc1EwRkJRM0ZDTEVWQlFVVXNSMEZCUnl4TFFVRkxPVU1zVVVGQldDeEZRVUZ4UWl0RExFVkJRVVVzUjBGQlJ5eExRVUZMT1VNc1VVRkJMMElzUTBGQmJFSTdRVUZEUVN4WFFVRkxLMElzU1VGQlRDeERRVUZWY2tNc1EwRkJWaXhEUVVGaE9FSXNTVUZCWWl4RFFVRnJRaXhEUVVGRE0wSXNRMEZCUkN4RlFVRkpReXhEUVVGS0xFTkJRV3hDTzBGQlEwRXNWMEZCUzBjc1QwRkJUQ3hIUVVGbFF5eEpRVUZKTEVOQlFVTkRMRWRCUVV3c1QwRkJRVVFzU1VGQlNTeEhRVUZMTEV0QlFVdEVMRTlCUVZZc05FSkJRWE5DTEV0QlFVc3dReXh4UWtGQlRDeERRVUV5UWl4TFFVRkxOVU1zVVVGQmFFTXNSVUZCTUVNNFF5eEZRVUV4UXl4RlFVRTRRMEVzUlVGQk9VTXNSVUZCYTBSb1JDeERRVUZzUkN4RFFVRjBRaXhIUVVGdVFqdEJRVU5CTEZkQlFVdFBMRTlCUVV3c1IwRkJaVVlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRTlCUVVGRUxFbEJRVWtzUjBGQlN5eExRVUZMUlN4UFFVRldMRFJDUVVGelFpeExRVUZMZFVNc2NVSkJRVXdzUTBGQk1rSXNTMEZCU3pORExGRkJRV2hETEVWQlFUQkRPRU1zUlVGQk1VTXNSVUZCT0VOQkxFVkJRVGxETEVWQlFXdEVhRVFzUTBGQmJFUXNRMEZCZEVJc1IwRkJia0k3UVVGRFFTeFhRVUZMYzBNc1VVRkJUQ3hEUVVGamRrTXNRMEZCWkN4RlFVRnBRa01zUTBGQmFrSTdRVUZEU0RzN08yMUVRVU54UXl0RExFVXNSVUZCV1VNc1JTeEZRVUZaYWtRc1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGFFWXNWMEZCUzJsRUxITkNRVUZNTEVOQlFUUkNMRXRCUVV0b1JDeFJRVUZNTEVkQlFXZENPRU1zUlVGQk5VTXNSVUZCWjBRc1MwRkJTemRETEZGQlFVd3NSMEZCWjBJNFF5eEZRVUZvUlN4RlFVRnZSU3hMUVVGTEwwTXNVVUZCVEN4SFFVRm5Ra1lzUTBGQmNFWXNSVUZCZFVZc1MwRkJTMGNzVVVGQlRDeEhRVUZuUWtZc1EwRkJka2M3UVVGRFNEczdPekJDUVVWSGEwUXNSU3hGUVVOQlF5eEZMRVZCUTBGRExHRXNSVUZEUVVNc1dTeEZRVU5CUXl4VExFVkJRMEYyUkN4RExFVkJRMEZETEVNc1JVRkRSanRCUVVORkxGVkJRVTExUkN4UFFVRlBMRWRCUVVkb1JTeFRRVUZUTEVOQlFVTnBSU3hIUVVGV0xFTkJRV01zUzBGQlMzWkVMRkZCUVc1Q0xFVkJRVFpDTEV0QlFVdERMRkZCUVd4RExFVkJRVFJEWjBRc1JVRkJOVU1zUlVGQlowUkRMRVZCUVdoRUxFVkJRVzlFUXl4aFFVRndSQ3hGUVVGdFJVTXNXVUZCYmtVc1JVRkJhVVpETEZOQlFXcEdMRVZCUVRSR2RrUXNRMEZCTlVZc1JVRkJLMFpETEVOQlFTOUdMRU5CUVdoQ096dEJRVU5CTEdGQlFVOTFSQ3hQUVVGUExFTkJRVU01UWl4TlFVRlNMRWxCUVd0Q0xFTkJRWHBDTEVWQlFUUkNPMEZCUTNoQ0xGbEJRVTFuUXl4UFFVRlBMRWRCUVVkR0xFOUJRVThzUTBGQlEwY3NUVUZCVWl4RFFVRmxMRU5CUVdZc1JVRkJhMElzUTBGQmJFSXNRMEZCYUVJN1FVRkRRU3hoUVVGTGVrSXNTVUZCVEN4RFFVRlZka01zUTBGQlZpeERRVUZoWjBNc1NVRkJZaXhEUVVGclFpeERRVUZESzBJc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEZRVUV3UWtFc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVFNVF5eERRVUZzUWp0QlFVTkJMR0ZCUVV0NFFpeEpRVUZNTEVOQlFWVjBReXhEUVVGV0xFTkJRV0VyUWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1yUWl4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGUUxFZEJRV0VzUzBGQlMzaEVMRkZCUVc1Q0xFVkJRVFpDZDBRc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoTEV0QlFVdDJSQ3hSUVVFdlF5eERRVUZzUWp0QlFVTkJMR0ZCUVVzclFpeEpRVUZNTEVOQlFWVnlReXhEUVVGV0xFTkJRV0U0UWl4SlFVRmlMRU5CUVd0Q0xFTkJRVU1yUWl4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGU0xFVkJRV0ZCTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVhCQ0xFTkJRV3hDTzBGQlEwRXNZVUZCUzNSRUxFOUJRVXdzUjBGQlpVTXNTVUZCU1N4RFFVRkRReXhIUVVGTUxFOUJRVUZFTEVsQlFVa3NSMEZCU3l4TFFVRkxSQ3hQUVVGV0xEUkNRVUZ6UWl4TFFVRkxNRU1zY1VKQlFVd3NRMEZCTWtJc1MwRkJTelZETEZGQlFXaERMRVZCUVRCRGQwUXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJha1FzUlVGQmMwUkJMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRVGRFTEVWQlFXdEZRU3hQUVVGUExFTkJRVU1zUTBGQlJDeERRVUY2UlN4RFFVRjBRaXhIUVVGdVFqdEJRVU5CTEdGQlFVdHVSQ3hQUVVGTUxFZEJRV1ZHTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hQUVVGQlJDeEpRVUZKTEVkQlFVc3NTMEZCUzBVc1QwRkJWaXcwUWtGQmMwSXNTMEZCUzNWRExIRkNRVUZNTEVOQlFUSkNMRXRCUVVzelF5eFJRVUZvUXl4RlFVRXdRM1ZFTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVdwRUxFVkJRWE5FUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVFM1JDeEZRVUZyUlVFc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQmVrVXNRMEZCZEVJc1IwRkJia0k3UVVGRFFTeGhRVUZMYmtJc1VVRkJUQ3hEUVVGamJVSXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJja0lzUlVGQk1FSkJMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRV3BETzBGQlEwZzdRVUZEU2pzN08ydERRVVZIVUN4RkxFVkJRMEZETEVVc1JVRkRRVU1zWVN4RlFVTkJReXhaTEVWQlEwRkRMRk1zUlVGRFFYWkVMRU1zUlVGRFFVTXNReXhGUVVOR08wRkJRMFVzVjBGQlN6SkVMRXRCUVV3c1EwRkJWMVFzUlVGQldDeEZRVUZsUXl4RlFVRm1MRVZCUVcxQ1F5eGhRVUZ1UWl4RlFVRnJRME1zV1VGQmJFTXNSVUZCWjBSRExGTkJRV2hFTEVWQlFUSkVMRXRCUVV0eVJDeFJRVUZNTEVkQlFXZENSaXhEUVVFelJTeEZRVUU0UlN4TFFVRkxSeXhSUVVGTUxFZEJRV2RDUml4RFFVRTVSanRCUVVOSU96czdaME5CSzBaclFqdEJRVU5tTEZkQlFVdHBReXhKUVVGTUxFTkJRVlY0UXl4RFFVRldMRWRCUVdNc1NVRkJaRHRCUVVOSU96czdPRUpCUldkQ08wRkJRVUU3TzBGQlEySXNWVUZCU1N4TFFVRkxNa01zVTBGQlRDeERRVUZsV0N4TlFVRm1MRWxCUVhsQ0xFVkJRVVVzUzBGQlMzaENMRkZCUVV3c1NVRkJhVUlzUzBGQlMydERMRk5CUVV3c1EwRkJaU3hEUVVGbUxFTkJRV3BDTEVsQlFYTkRMRXRCUVV0cVF5eFJRVUZNTEVsQlFXbENMRXRCUVV0cFF5eFRRVUZNTEVOQlFXVXNRMEZCWml4RFFVRjZSQ3hEUVVFM1FpeEZRVUV3Unp0QlFVTjBSeXhoUVVGTFJDeE5RVUZNTEdkRFFVRmxMRXRCUVV0RExGTkJRWEJDTzBGQlEwZzdPMEZCUTBRc1lVRkJUeXhMUVVGTFF5eFRRVUZNTEVOQlFXVllMRTFCUVhSQ0xFVkJRVGhDTzBGQlF6RkNMRmxCUVUxdFF5eFBRVUZQTEVkQlFVY3NTMEZCUzNoQ0xGTkJRVXdzUTBGQlpYbENMRWRCUVdZc1JVRkJhRUk3UVVGRFFTeGhRVUZMTTBJc1RVRkJUQ3huUTBGQlpUQkNMRTlCUVdZN1FVRkRTRHM3UVVGRFJDeGhRVUZQTEV0QlFVc3pRaXhKUVVGTUxFTkJRVlYwUXl4RFFVRldMRU5CUVdFNFFpeE5RVUZpTEVkQlFYTkNMRXRCUVV0UkxFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1EwRkJZU3RDTEUxQlFURkRPMEZCUTBrc1lVRkJTMUVzU1VGQlRDeERRVUZWZEVNc1EwRkJWaXhEUVVGaEswSXNTVUZCWWl4RFFVRnJRaXhEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVOQlFXeENPMEZCUkVvN08wRkJSVUVzVjBGQlMwOHNTVUZCVEN4RFFVRlZja01zUTBGQlZpeERRVUZoYzBJc1QwRkJZaXhEUVVGeFFpeFZRVUZCUlN4TFFVRkxMRVZCUVVrN1FVRkRNVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRVXdzU1VGQldTeExRVUZKTEVOQlFVTnFRaXhQUVVGcVFqdEJRVU5CYVVJc1VVRkJRVUVzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4SlFVRlpMRXRCUVVrc1EwRkJRMlFzVDBGQmFrSTdRVUZEU0N4UFFVaEVPMEZCU1VFc1YwRkJTMGdzVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4WFFVRkxSeXhQUVVGTUxFZEJRV1VzUTBGQlpqdEJRVU5JT3pzN01FSkJSVmxrTEZFc1JVRkJhMEk3UVVGQlFUczdRVUZETTBJc1ZVRkJUWE5GTEdOQlFXTXNSMEZCUnl3MlFrRkJVM1JGTEZGQlFWUXNRMEZCZGtJN1FVRkRRU3hWUVVGSmRVVXNaMEpCUVVvN1FVRkRRVVFzVFVGQlFVRXNZMEZCWXl4RFFVRkROVU1zVDBGQlppeERRVUYxUWl4VlFVRkJPRU1zV1VGQldTeEZRVUZKTzBGQlEyNURMR2RDUVVGUlFTeFpRVUZaTEVOQlFVTkRMRWxCUVhKQ08wRkJRMGtzWlVGQlN5eEhRVUZNTzBGQlEwbEdMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRek5DTEUxQlFVd3NRMEZCV1RCQ0xHZENRVUZuUWl4RFFVRkRhRVVzUTBGQk4wSXNSVUZCWjBOblJTeG5Ra0ZCWjBJc1EwRkJReTlFTEVOQlFXcEVPenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkpLMFFzV1VGQlFVRXNaMEpCUVdkQ0xFZEJRVWRETEZsQlFXNUNPenRCUVVOQkxGbEJRVUVzVFVGQlNTeERRVUZEUlN4alFVRk1MRU5CUVc5Q1NDeG5Ra0ZCWjBJc1EwRkJRMmhGTEVOQlFYSkRMRVZCUVhkRFowVXNaMEpCUVdkQ0xFTkJRVU12UkN4RFFVRjZSRHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlF6bENMRTFCUVV3c1EwRkJXVFpDTEdkQ1FVRm5RaXhEUVVGRGFFVXNRMEZCTjBJc1JVRkJaME5uUlN4blFrRkJaMElzUTBGQlF5OUVMRU5CUVdwRU96dEJRVU5CT3p0QlFVTktMR1ZCUVVzc1IwRkJURHRCUVVOSkswUXNXVUZCUVVFc1owSkJRV2RDTEVkQlFVZERMRmxCUVc1Q096dEJRVU5CTEZsQlFVRXNUVUZCU1N4RFFVRkRSeXhqUVVGTUxFTkJRVzlDU2l4blFrRkJaMElzUTBGQlEyaEZMRU5CUVhKRExFVkJRWGREWjBVc1owSkJRV2RDTEVOQlFVTXZSQ3hEUVVGNlJEczdRVUZEUVRzN1FVRkRTaXhsUVVGTExFZEJRVXc3UVVGRFNTdEVMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRM3BDTEZsQlFVd3NRMEZCYTBKM1FpeG5Ra0ZCWjBJc1EwRkJRMmhGTEVOQlFXNURPenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkpaMFVzV1VGQlFVRXNaMEpCUVdkQ0xFZEJRVWRETEZsQlFXNUNPenRCUVVOQkxGbEJRVUVzVFVGQlNTeERRVUZEU1N4dlFrRkJUQ3hEUVVFd1Frd3NaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRXpRenM3UVVGRFFUczdRVUZEU2l4bFFVRkxMRWRCUVV3N1FVRkRTV2RGTEZsQlFVRkJMR2RDUVVGblFpeEhRVUZIUXl4WlFVRnVRanM3UVVGRFFTeFpRVUZCTEUxQlFVa3NRMEZCUTNoQ0xGVkJRVXdzUTBGQlowSjFRaXhuUWtGQlowSXNRMEZCUXk5RUxFTkJRV3BET3p0QlFVTkJPenRCUVVOS0xHVkJRVXNzUjBGQlREdEJRVU5KSzBRc1dVRkJRVUVzWjBKQlFXZENMRWRCUVVkRExGbEJRVzVDT3p0QlFVTkJMRmxCUVVFc1RVRkJTU3hEUVVGRFN5eHJRa0ZCVEN4RFFVRjNRazRzWjBKQlFXZENMRU5CUVVNdlJDeERRVUY2UXpzN1FVRkRRVHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlEyeENMR3RDUVVGTUxFTkJRWGRDYVVJc1owSkJRV2RDTEVOQlFVTlBMRVZCUVhwRExFVkJRVFpEVUN4blFrRkJaMElzUTBGQlExRXNSVUZCT1VRc1JVRkJhMFZTTEdkQ1FVRm5RaXhEUVVGRFV5eEZRVUZ1Uml4RlFVRjFSbFFzWjBKQlFXZENMRU5CUVVOVkxFVkJRWGhITEVWQlFUUkhWaXhuUWtGQlowSXNRMEZCUTJoRkxFTkJRVGRJTEVWQlFXZEpaMFVzWjBKQlFXZENMRU5CUVVNdlJDeERRVUZxU2pzN1FVRkRRVHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1N0RUxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlExVXNNRUpCUVV3c1EwRkJaME5ZTEdkQ1FVRm5RaXhEUVVGRFR5eEZRVUZxUkN4RlFVRnhSRkFzWjBKQlFXZENMRU5CUVVOUkxFVkJRWFJGTEVWQlFUQkZVaXhuUWtGQlowSXNRMEZCUTFNc1JVRkJNMFlzUlVGQkswWlVMR2RDUVVGblFpeERRVUZEVlN4RlFVRm9TQ3hGUVVGdlNGWXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRnlTU3hGUVVGM1NXZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJla283TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVObUxITkNRVUZNTEVOQlFUUkNZeXhuUWtGQlowSXNRMEZCUTA4c1JVRkJOME1zUlVGQmFVUlFMR2RDUVVGblFpeERRVUZEVVN4RlFVRnNSU3hGUVVGelJWSXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRjJSaXhGUVVFd1JtZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJNMGM3TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVOWExEaENRVUZNTEVOQlFXOURXaXhuUWtGQlowSXNRMEZCUTA4c1JVRkJja1FzUlVGQmVVUlFMR2RDUVVGblFpeERRVUZEVVN4RlFVRXhSU3hGUVVFNFJWSXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRXZSaXhGUVVGclIyZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJia2c3TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVOTUxFdEJRVXdzUTBGQlYwa3NaMEpCUVdkQ0xFTkJRVU5pTEVWQlFUVkNMRVZCUVdkRFlTeG5Ra0ZCWjBJc1EwRkJRMW9zUlVGQmFrUXNSVUZCY1VSWkxHZENRVUZuUWl4RFFVRkRXQ3hoUVVGMFJTeEZRVUZ4Uml4RFFVRkRMRU5CUVVOWExHZENRVUZuUWl4RFFVRkRZU3hSUVVGNFJ5eEZRVUZyU0N4RFFVRkRMRU5CUVVOaUxHZENRVUZuUWl4RFFVRkRZeXhMUVVGeVNTeEZRVUUwU1dRc1owSkJRV2RDTEVOQlFVTm9SU3hEUVVFM1NpeEZRVUZuUzJkRkxHZENRVUZuUWl4RFFVRkRMMFFzUTBGQmFrdzdPMEZCUTBFN08wRkJRMG9zWlVGQlN5eEhRVUZNTzBGQlEwa3JSQ3haUVVGQlFTeG5Ra0ZCWjBJc1IwRkJSME1zV1VGQmJrSTdPMEZCUTBFc1dVRkJRU3hOUVVGSkxFTkJRVU5qTEdGQlFVd3NRMEZCYlVKbUxHZENRVUZuUWl4RFFVRkRZaXhGUVVGd1F5eEZRVUYzUTJFc1owSkJRV2RDTEVOQlFVTmFMRVZCUVhwRUxFVkJRVFpFV1N4blFrRkJaMElzUTBGQlExZ3NZVUZCT1VVc1JVRkJOa1lzUTBGQlF5eERRVUZEVnl4blFrRkJaMElzUTBGQlEyRXNVVUZCYUVnc1JVRkJNRWdzUTBGQlF5eERRVUZEWWl4blFrRkJaMElzUTBGQlEyTXNTMEZCTjBrc1JVRkJiMHBrTEdkQ1FVRm5RaXhEUVVGRGFFVXNRMEZCY2tzc1JVRkJkMHRuUlN4blFrRkJaMElzUTBGQlF5OUVMRU5CUVhwTU96dEJRVU5CT3p0QlFVTktMR1ZCUVVzc1IwRkJURHRCUVVOQkxHVkJRVXNzUjBGQlREdEJRVU5KTEZsQlFVRXNUVUZCU1N4RFFVRkRLMFVzVTBGQlREczdRVUZEUVRzN1FVRkRTanRCUVVOSlF5eFpRVUZCUVN4UFFVRlBMRU5CUVVORExFdEJRVklzUTBGQlkycENMRmxCUVdRN1FVRkRRU3hyUWtGQlRTeEpRVUZKYTBJc1MwRkJTaXhEUVVGVkxHZEVRVUZXTEVOQlFVNDdRVUU1UkZJN1FVRm5SVWdzVDBGcVJVUTdRVUZyUlVnN096czJRa0ZGWlRORUxFc3NSVUZCWlR0QlFVRkJPenRCUVVNelFqdEJRVU5CTzBGQlJVRXNWVUZCU1N4RFFVRkRORVFzVFVGQlRTeERRVUZEUXl4VFFVRlFMRU5CUVdsQ04wUXNTMEZCYWtJc1EwRkJUQ3hGUVVFNFFqdEJRVU14UWl4alFVRk5MRWxCUVVreVJDeExRVUZLTEVOQlFWVXNORU5CUVZZc1EwRkJUanRCUVVOSU96dEJRVU5FTEZkQlFVdEhMRTlCUVV3N1FVRkRRU3hWUVVGSk9VUXNTMEZCU3l4SlFVRkpMRU5CUVdJc1JVRkJaMEk3UVVGRGFFSXNWVUZCVFN0RUxGRkJRV2xDTEVkQlFVYzdRVUZEZEVJM1JpeFJRVUZCUVN4RFFVRkRMRVZCUVVVc1MwRkJTM2RETEVsQlFVd3NRMEZCVlhoRExFTkJSRk03UVVGRmRFSkRMRkZCUVVGQkxFTkJRVU1zUlVGQlJTeEZRVVp0UWp0QlFVZDBRa01zVVVGQlFVRXNRMEZCUXl4RlFVRkZMRVZCU0cxQ08wRkJTWFJDUXl4UlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGS2JVSXNUMEZCTVVJN1FVRk5RU3hYUVVGTGNVTXNTVUZCVEN4RFFVRlZja01zUTBGQlZpeERRVUZoYzBJc1QwRkJZaXhEUVVGeFFpeFZRVUZEZEVJc1EwRkJSQ3hGUVVGSlJpeERRVUZLTEVWQlFVOXBRaXhEUVVGUUxFVkJRV0U3UVVGRE9VSXNXVUZCU1dwQ0xFTkJRVU1zU1VGQlNTeERRVUZVTEVWQlFWazdRVUZEVWpSR0xGVkJRVUZCTEZGQlFWRXNRMEZCUXpGR0xFTkJRVlFzUTBGQldUaENMRWxCUVZvc1EwRkJhVUk1UWl4RFFVRnFRanRCUVVOQk1FWXNWVUZCUVVFc1VVRkJVU3hEUVVGRE5VWXNRMEZCVkN4RFFVRlpaME1zU1VGQldpeERRVUZwUWl4TlFVRkpMRU5CUVVOUExFbEJRVXdzUTBGQlZYWkRMRU5CUVZZc1EwRkJZVUVzUTBGQllpeERRVUZxUWp0QlFVTkJPMEZCUTBnN08wRkJRMFFzV1VGQlRUWkdMRTFCUVUwc1IwRkJSeXhOUVVGSkxFTkJRVU4wUkN4SlFVRk1MRU5CUVZWMFF5eERRVUY2UWp0QlFVTkJMRmxCUVUwMlJpeE5RVUZOTEVkQlFVY3NUVUZCU1N4RFFVRkRka1FzU1VGQlRDeERRVUZWZGtNc1EwRkJla0k3UVVGRFFTeFpRVUZKSzBZc1RVRkJUU3hIUVVGSExFTkJRVU01UlN4RFFVRkRMRU5CUVVOcVFpeERRVUZETEVkQlFVY3NRMEZCVEN4RFFVRkVMRU5CUVZNc1EwRkJWQ3hEUVVGRUxFVkJRV00yUml4TlFVRk5MRU5CUVVNM1JpeERRVUZETEVkQlFVY3NRMEZCVEN4RFFVRk9MRU5CUVdNc1EwRkJaQ3hKUVVGdFFtbENMRU5CUVVNc1EwRkJRMnBDTEVOQlFVTXNSMEZCUnl4RFFVRk1MRU5CUVVRc1EwRkJVeXhEUVVGVUxFTkJRV3BETEVWQlFUaERPRVlzVFVGQlRTeERRVUZET1VZc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZpeEpRVUZsUlN4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVFNVJDeEZRVUZ0UlVFc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQmNFVXNRMEZCWWp0QlFVTkJMRmxCUVVrNFJpeE5RVUZOTEVkQlFVY3NRMEZCUXk5RkxFTkJRVU1zUTBGQlEycENMRU5CUVVNc1IwRkJSeXhEUVVGTUxFTkJRVVFzUTBGQlV5eERRVUZVTEVOQlFVUXNSVUZCWXpaR0xFMUJRVTBzUTBGQlF6ZEdMRU5CUVVNc1IwRkJSeXhEUVVGTUxFTkJRVTRzUTBGQll5eERRVUZrTEVsQlFXMUNhVUlzUTBGQlF5eERRVUZEYWtJc1EwRkJReXhIUVVGSExFTkJRVXdzUTBGQlJDeERRVUZUTEVOQlFWUXNRMEZCYWtNc1JVRkJPRU00Uml4TlFVRk5MRU5CUVVNNVJpeERRVUZFTEVOQlFVNHNRMEZCVlN4RFFVRldMRWxCUVdWRkxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFUbEVMRVZCUVcxRlFTeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRndSU3hEUVVGaU96dEJRVU5CTEdGQlFVc3NTVUZCU1N0R0xFdEJRVXNzUjBGQlJ5eERRVUZxUWl4RlFVRnZRa0VzUzBGQlN5eEhRVUZIY0VVc1MwRkJOVUlzUlVGQmJVTnZSU3hMUVVGTExFVkJRWGhETEVWQlFUUkRPMEZCUTNoRExHTkJRVTFETEZOQlFWTXNSMEZCUnl4TFFVRkxja1VzUzBGQlN5eEhRVUZIYjBVc1MwRkJVaXhIUVVGblFpeERRVUZ5UWl4RFFVRnNRanM3UVVGRFFTeGpRVUZOUlN4WFFVRlhMRWRCUVVjc1RVRkJTU3hEUVVGRFF5eHZRa0ZCVEN4UFFVRkJMRTFCUVVrc1IwRkJjMEpHTEZOQlFYUkNMRFJDUVVGdlEwZ3NUVUZCY0VNc1IwRkJlRUk3TzBGQlEwRXNZMEZCVFUwc1YwRkJWeXhIUVVGSExFMUJRVWtzUTBGQlEwUXNiMEpCUVV3c1QwRkJRU3hOUVVGSkxFZEJRWE5DUml4VFFVRjBRaXcwUWtGQmIwTkdMRTFCUVhCRExFZEJRWGhDT3p0QlFVTkJMR05CUVUxTkxFbEJRVWNzUjBGQlIxQXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJiRUk3UVVGQlFTeGpRVUYxUWxFc1NVRkJSeXhIUVVGSFNpeFhRVUZYTEVOQlFVTkxMRXRCUVZvc1MwRkJkVUpHTEVsQlFYQkVPMEZCUVVFc1kwRkJlVVJITEVsQlFVY3NSMEZCUjA0c1YwRkJWeXhEUVVGRExFTkJRVVFzUTBGQk1VVTdRVUZCUVN4alFVRXJSVThzU1VGQlJ5eEhRVUZIVUN4WFFVRlhMRU5CUVVOTExFdEJRVm9zUzBGQmRVSkRMRWxCUVRWSE8wRkJRVUVzWTBGRFNVVXNTVUZCUnl4SFFVRkhXQ3hOUVVGTkxFTkJRVU1zUTBGQlJDeERRVVJvUWp0QlFVRkJMR05CUTNGQ1dTeEpRVUZITEVkQlFVZFFMRmRCUVZjc1EwRkJRMGNzUzBGQldpeExRVUYxUWtjc1NVRkViRVE3UVVGQlFTeGpRVU4xUkVVc1NVRkJSeXhIUVVGSFVpeFhRVUZYTEVOQlFVTXNRMEZCUkN4RFFVUjRSVHRCUVVGQkxHTkJRelpGVXl4SlFVRkhMRWRCUVVkVUxGZEJRVmNzUTBGQlEwY3NTMEZCV2l4TFFVRjFRa3NzU1VGRU1VYzdPMEZCUlVGcVFpeFZRVUZCUVN4UlFVRlJMRU5CUVVNelJpeERRVUZVTEVOQlFWa3JRaXhKUVVGYUxFTkJRV2xDTEVOQlFVTjFSU3hKUVVGRUxFVkJRVTFMTEVsQlFVNHNRMEZCYWtJN1FVRkRRV2hDTEZWQlFVRkJMRkZCUVZFc1EwRkJRelZHTEVOQlFWUXNRMEZCV1dkRExFbEJRVm9zUTBGQmFVSXNRMEZCUXpCRkxFbEJRVVFzUlVGQlRVa3NTVUZCVGl4RFFVRnFRanRCUVVOQmJFSXNWVUZCUVVFc1VVRkJVU3hEUVVGRE1VWXNRMEZCVkN4RFFVRlpPRUlzU1VGQldpeERRVUZwUWl4RFFVRkRlVVVzU1VGQlJDeEZRVUZOU1N4SlFVRk9MRU5CUVdwQ08wRkJRMEZrTEZWQlFVRkJMRTFCUVUwc1IwRkJSMGtzVjBGQlZEdEJRVU5CU0N4VlFVRkJRU3hOUVVGTkxFZEJRVWRMTEZkQlFWUTdRVUZEU0RzN1FVRkRSQ3haUVVGTlF5eEhRVUZITEVkQlFVZFFMRTFCUVUwc1EwRkJRMU1zUzBGQlVDeEZRVUZhTzBGQlFVRXNXVUZCTmtKRUxFZEJRVWNzUjBGQlIxSXNUVUZCVFN4RFFVRkRVeXhMUVVGUUxFdEJRV3RDUml4SFFVRnlSRHRCUVVGQkxGbEJRVEJFUnl4SFFVRkhMRWRCUVVkV0xFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFYUkZPMEZCUVVFc1dVRkJNa1ZYTEVkQlFVY3NSMEZCUjFnc1RVRkJUU3hEUVVGRFV5eExRVUZRTEV0QlFXdENReXhIUVVGdVJ6dEJRVUZCTEZsQlEwbEZMRWRCUVVjc1IwRkJSMWdzVFVGQlRTeERRVUZEVVN4TFFVRlFMRVZCUkZZN1FVRkJRU3haUVVNeVFra3NSMEZCUnl4SFFVRkhXaXhOUVVGTkxFTkJRVU5STEV0QlFWQXNTMEZCYTBKSExFZEJSRzVFTzBGQlFVRXNXVUZEZDBSRkxFZEJRVWNzUjBGQlIySXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkVjRVU3UVVGQlFTeFpRVU41UldNc1IwRkJSeXhIUVVGSFpDeE5RVUZOTEVOQlFVTlJMRXRCUVZBc1MwRkJhMEpMTEVkQlJHcEhPMEZCUlVGcVFpeFJRVUZCUVN4UlFVRlJMRU5CUVVNelJpeERRVUZVTEVOQlFWa3JRaXhKUVVGYUxFTkJRV2xDTEVOQlFVTjFSU3hIUVVGRUxFVkJRVTFMTEVkQlFVNHNRMEZCYWtJN1FVRkRRV2hDTEZGQlFVRkJMRkZCUVZFc1EwRkJRelZHTEVOQlFWUXNRMEZCV1dkRExFbEJRVm9zUTBGQmFVSXNRMEZCUXpCRkxFZEJRVVFzUlVGQlRVa3NSMEZCVGl4RFFVRnFRanRCUVVOQmJFSXNVVUZCUVVFc1VVRkJVU3hEUVVGRE1VWXNRMEZCVkN4RFFVRlpPRUlzU1VGQldpeERRVUZwUWl4RFFVRkRlVVVzUjBGQlJDeEZRVUZOU1N4SFFVRk9MRU5CUVdwQ08wRkJRMGdzVDBFelFrUTdRVUUwUWtFc1YwRkJTM1JGTEVsQlFVd3NSMEZCV1hGRUxGRkJRVm83UVVGRFFTeFhRVUZMUkN4UFFVRk1PMEZCUTBnN096dDNRa0YyVDJ0Q1ppeEZMRVZCUVZsRExFVXNSVUZCV1hKQ0xFVXNSVUZCV1VNc1JTeEZRVUZaYzBRc1N5eEZRVUZsUXl4akxFVkJRWGRDUXl4VkxFVkJRVzlDYmtNc1JTeEZRVUZaUXl4RkxFVkJRVmx0UXl4VExFVkJRVFpETzBGQlF5OU1PMEZCUTBFN1FVRkRRU3hWUVVGSlF5eEpRVUZKTEVkQlFVZDZSeXhKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZVc1IwRkJWaXhIUVVGblFpeEhRVUV6UWp0QlFVRkJMRlZCUTBsRExFZEJRVWNzUjBGQlJ6TkhMRWxCUVVrc1EwRkJRekJITEVWQlFVd3NSMEZCVlN4SFFVRldMRWxCUVdsQ0xFTkJRVU5NTEV0QlFVUXNTVUZCVlN4RFFVRXpRaXhEUVVSV08wRkJRVUVzVlVGRlNVOHNSMEZCWVN4SFFVRkhMRVZCUm5CQ08wRkJRVUVzVlVGSFNVTXNSVUZJU2p0QlFVRkJMRlZCU1VsRExFMUJRVTBzUjBGQlJ5eFRRVUZVUVN4TlFVRlRMRU5CUVVOdVNDeERRVUZFTEVWQlFWbERMRU5CUVZvc1JVRkJkVUlyUnl4SFFVRjJRaXhGUVVGMVF6dEJRVU0xUXl4WlFVRkpTU3hEUVVGRExFZEJRVWR3U0N4RFFVRkRMRWRCUVVkTExFbEJRVWtzUTBGQlEyZElMRWRCUVV3c1EwRkJVMHdzUjBGQlZDeERRVUZLTEVkQlFXOUNMMGNzUTBGQlF5eEhRVUZIU1N4SlFVRkpMRU5CUVVOcFNDeEhRVUZNTEVOQlFWTk9MRWRCUVZRc1EwRkJhRU03UVVGQlFTeFpRVU5KVHl4RFFVRkRMRWRCUVVkMlNDeERRVUZETEVkQlFVZExMRWxCUVVrc1EwRkJRMmxJTEVkQlFVd3NRMEZCVTA0c1IwRkJWQ3hEUVVGS0xFZEJRVzlDTDBjc1EwRkJReXhIUVVGSFNTeEpRVUZKTEVOQlFVTm5TQ3hIUVVGTUxFTkJRVk5NTEVkQlFWUXNRMEZFYUVNN1FVRkZRU3hsUVVGUE8wRkJRVVZvU0N4VlFVRkJRU3hEUVVGRExFVkJRVVZ2U0N4RFFVRk1PMEZCUVZGdVNDeFZRVUZCUVN4RFFVRkRMRVZCUVVWelNEdEJRVUZZTEZOQlFWQTdRVUZEU0N4UFFWSk1PenRCUVZOQkxGVkJRVWtzUTBGQlEzQkZMRVZCUVVRc1NVRkJUeXhEUVVGRFF5eEZRVUZhTEVWQlFXZENPMEZCUTFvc1pVRkJUeXhEUVVGRGJVSXNSVUZCUkN4RlFVRkxReXhGUVVGTUxFVkJRVk5ETEVWQlFWUXNSVUZCWVVNc1JVRkJZaXhGUVVGcFFrUXNSVUZCYWtJc1JVRkJjVUpETEVWQlFYSkNMRU5CUVZBN1FVRkRTRHM3UVVGRFJDeFZRVUZKTEVOQlFVTnRReXhUUVVGTUxFVkJRV2RDTzBGQlExcExMRkZCUVVGQkxFVkJRVVVzUjBGQlIwTXNUVUZCVFN4RFFVRkROVU1zUlVGQlJDeEZRVUZMUXl4RlFVRk1MRVZCUVZNc1EwRkJRM2RETEVkQlFWWXNRMEZCV0R0QlFVTkJla01zVVVGQlFVRXNSVUZCUlN4SFFVRkhNa01zUlVGQlJTeERRVUZEYkVnc1EwRkJVanRCUVVOQmQwVXNVVUZCUVVFc1JVRkJSU3hIUVVGSE1FTXNSVUZCUlN4RFFVRkRha2dzUTBGQlVqdEJRVU5CYVVnc1VVRkJRVUVzUlVGQlJTeEhRVUZIUXl4TlFVRk5MRU5CUVVNeFF5eEZRVUZFTEVWQlFVdERMRVZCUVV3c1JVRkJVeXhEUVVGRGMwTXNSMEZCVml4RFFVRllPMEZCUTBGMlF5eFJRVUZCUVN4RlFVRkZMRWRCUVVkNVF5eEZRVUZGTEVOQlFVTnNTQ3hEUVVGU08wRkJRMEV3UlN4UlFVRkJRU3hGUVVGRkxFZEJRVWQzUXl4RlFVRkZMRU5CUVVOcVNDeERRVUZTTzBGQlEwRXNXVUZCU1c5SUxFZEJRVWNzUjBGQlIyaElMRWxCUVVrc1EwRkJRMmRJTEVkQlFVd3NRMEZCVTJoSUxFbEJRVWtzUTBGQlF6QkhMRVZCUVV3c1IwRkJWU3hIUVVGV0xFZEJRV2RDVEN4TFFVRjZRaXhEUVVGV08wRkJRVUVzV1VGRFNWa3NSMEZCUnl4SFFVRkhha2dzU1VGQlNTeERRVUZEYVVnc1IwRkJUQ3hEUVVGVGFrZ3NTVUZCU1N4RFFVRkRNRWNzUlVGQlRDeEhRVUZWTEVkQlFWWXNSMEZCWjBKTUxFdEJRWHBDTEVOQlJGWTdRVUZCUVN4WlFVVkpNVWNzUTBGQlF5eEhRVUZITEVOQlFVTjFSU3hGUVVGRkxFZEJRVWRGTEVWQlFVNHNTVUZCV1N4RFFVWndRanRCUVVGQkxGbEJSMGw0UlN4RFFVRkRMRWRCUVVjc1EwRkJRM1ZGTEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhKUVVGWkxFTkJTSEJDTzBGQlNVRXNXVUZCU1RoRExFTkJRVU1zUjBGQlIzaElMRU5CUVVNc1IwRkJSMEVzUTBGQlNpeEpRVUZUYlVRc1JVRkJSU3hIUVVGSFFTeEZRVUZrTEVsQlFXOUNiRVFzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWxCUVZOdFJDeEZRVUZGTEVkQlFVZEJMRVZCUVdRc1EwRkJOVUk3TzBGQlEwRXNXVUZCU1c5RkxFTkJRVU1zUjBGQlJ5eERRVUZTTEVWQlFWYzdRVUZEVUVFc1ZVRkJRVUVzUTBGQlF5eEhRVUZIYmtnc1NVRkJTU3hEUVVGRFZTeEpRVUZNTEVOQlFWVjVSeXhEUVVGV0xFTkJRVW83UVVGRFFYSkZMRlZCUVVGQkxFVkJRVVVzUjBGQlIzRkZMRU5CUVVNc1IwRkJSM0pGTEVWQlFWUTdRVUZEUVVNc1ZVRkJRVUVzUlVGQlJTeEhRVUZIYjBVc1EwRkJReXhIUVVGSGNFVXNSVUZCVkR0QlFVTklPenRCUVVORUxGbEJRVWx4UlN4SFFVRkhMRWRCUVVkMFJTeEZRVUZGTEVkQlFVZEJMRVZCUVdZN1FVRkJRU3haUVVOSmRVVXNSMEZCUnl4SFFVRkhkRVVzUlVGQlJTeEhRVUZIUVN4RlFVUm1PMEZCUVVFc1dVRkZTWFZGTEVOQlFVTXNSMEZCUnl4RFFVRkRhRUlzWTBGQll5eEpRVUZKUXl4VlFVRnNRaXhIUVVFclFpeERRVUZETEVOQlFXaERMRWRCUVc5RExFTkJRWEpETEVsQlEwRjJSeXhKUVVGSkxFTkJRVU5WTEVsQlFVd3NRMEZCVlZZc1NVRkJTU3hEUVVGRGRVZ3NSMEZCVEN4RFFVRlRMRU5CUVVOSUxFZEJRVWNzUjBGQlIwTXNSMEZCVGl4SFFVRlpSQ3hIUVVGSExFZEJRVWQ0U0N4RFFVRk9MRWRCUVZWQkxFTkJRWFJDTEVkQlFUQkNlVWdzUjBGQlJ5eEhRVUZITVVnc1EwRkJUaXhIUVVGVlFTeERRVUZ5UXl4TFFVRXlRM2xJTEVkQlFVY3NSMEZCUjNoSUxFTkJRVTRzUjBGQlZVRXNRMEZCVml4SFFVRmplVWdzUjBGQlJ5eEhRVUZITVVnc1EwRkJUaXhIUVVGVlFTeERRVUZ1UlN4RFFVRlVMRU5CUVZZc1EwRklVanRCUVVGQkxGbEJTVWxuUkN4RlFVRkZMRWRCUVVjeVJTeERRVUZETEVkQlFVZDRSU3hGUVVGS0xFZEJRVk5zUkN4RFFVRlVMRWRCUVdGdFJDeEZRVUZpTEVkQlFXdENMRU5CUVVOdFFpeEZRVUZGTEVkQlFVZEZMRVZCUVU0c1NVRkJXU3hEUVVwMlF6dEJRVUZCTEZsQlMwbDRRaXhGUVVGRkxFZEJRVWN3UlN4RFFVRkRMRWRCUVVjc1EwRkJRM1pGTEVWQlFVd3NSMEZCVlhCRUxFTkJRVllzUjBGQlkyMUVMRVZCUVdRc1IwRkJiVUlzUTBGQlEzRkNMRVZCUVVVc1IwRkJSMFVzUlVGQlRpeEpRVUZaTEVOQlRIaERPMEZCUVVFc1dVRk5TVzFFTEVWQlFVVXNSMEZCUjNoSUxFbEJRVWtzUTBGQlEzbElMRWxCUVV3c1EwRkJWU3hEUVVGRGRFUXNSVUZCUlN4SFFVRkhka0lzUlVGQlRpeEpRVUZaUnl4RlFVRjBRaXhEUVU1VU8wRkJRVUVzV1VGUFNUSkZMRVZCUVVVc1IwRkJSekZJTEVsQlFVa3NRMEZCUTNsSUxFbEJRVXdzUTBGQlZTeERRVUZEY0VRc1JVRkJSU3hIUVVGSGVrSXNSVUZCVGl4SlFVRlpSeXhGUVVGMFFpeERRVkJVTzBGQlUwRjVSU3hSUVVGQlFTeEZRVUZGTEVkQlFVZDBSQ3hGUVVGRkxFZEJRVWQyUWl4RlFVRk1MRWRCUVZVelF5eEpRVUZKTEVOQlFVTXdSeXhGUVVGTUxFZEJRVlZqTEVWQlFYQkNMRWRCUVhsQ1FTeEZRVUU1UWp0QlFVTkJSU3hSUVVGQlFTeEZRVUZGTEVkQlFVZDBSQ3hGUVVGRkxFZEJRVWQ2UWl4RlFVRk1MRWRCUVZVelF5eEpRVUZKTEVOQlFVTXdSeXhGUVVGTUxFZEJRVlZuUWl4RlFVRndRaXhIUVVGNVFrRXNSVUZCT1VJN1FVRkRRVVlzVVVGQlFVRXNSVUZCUlN4SFFVRkhMRU5CUVV3c1MwRkJWMEVzUlVGQlJTeEhRVUZIZUVnc1NVRkJTU3hEUVVGRE1FY3NSVUZCVEN4SFFVRlZMRU5CUVZZc1IwRkJZMk1zUlVGQk9VSTdRVUZEUVVVc1VVRkJRVUVzUlVGQlJTeEhRVUZITEVOQlFVd3NTMEZCVjBFc1JVRkJSU3hIUVVGSE1VZ3NTVUZCU1N4RFFVRkRNRWNzUlVGQlRDeEhRVUZWTEVOQlFWWXNSMEZCWTJkQ0xFVkJRVGxDT3p0QlFVTkJMRmxCUVVsdVFpeFZRVUZWTEVsQlFVbHBRaXhGUVVGRkxFZEJRVWRGTEVWQlFYWkNMRVZCUVRKQ08wRkJRM1pDUml4VlFVRkJRU3hGUVVGRkxFZEJRVWRCTEVWQlFVVXNSMEZCUjNoSUxFbEJRVWtzUTBGQlF6QkhMRVZCUVV3c1IwRkJWU3hEUVVGd1FqdEJRVU5JT3p0QlFVTkVMRmxCUVVrc1EwRkJRMGdzVlVGQlJDeEpRVUZsYlVJc1JVRkJSU3hIUVVGSFJpeEZRVUY0UWl4RlFVRTBRanRCUVVONFFrVXNWVUZCUVVFc1JVRkJSU3hIUVVGSFFTeEZRVUZGTEVkQlFVY3hTQ3hKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZVc1EwRkJjRUk3UVVGRFNEdEJRVU5LTEU5QmNFTkVMRTFCYjBOUE8wRkJRMGhqTEZGQlFVRkJMRVZCUVVVc1IwRkJSMmhDTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRV3RDTEZGQlFVRkJMRVZCUVVVc1IwRkJSMnhDTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRVGRFTEZGQlFVRkJMRVZCUVVVc1IwRkJSelpFTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRRVFZFTEZGQlFVRkJMRVZCUVVVc1IwRkJSelJFTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVdRN1FVRkRTRHM3UVVGRFJDeFZRVUZKYlVJc1JVRkJSU3hIUVVGSFJDeEZRVUZGTEVkQlFVZEdMRVZCUVdRN08wRkJRMEVzVlVGQlNYaElMRWxCUVVrc1EwRkJRM1ZJTEVkQlFVd3NRMEZCVTBrc1JVRkJWQ3hKUVVGbGJFSXNTVUZCYmtJc1JVRkJlVUk3UVVGRGNrSXNXVUZCU1cxQ0xFdEJRVXNzUjBGQlIwWXNSVUZCV2p0QlFVRkJMRmxCUTBsSExFdEJRVXNzUjBGQlIzcEVMRVZCUkZvN1FVRkJRU3haUVVWSk1FUXNTMEZCU3l4SFFVRkhla1FzUlVGR1dqdEJRVWRCY1VRc1VVRkJRVUVzUlVGQlJTeEhRVUZIUml4RlFVRkZMRWRCUVVkbUxFbEJRVWtzU1VGQlNVWXNWVUZCVlN4SlFVRkpiVUlzUlVGQlJTeEhRVUZIUml4RlFVRnVRaXhIUVVGM1FpeERRVUY0UWl4SFFVRTBRaXhEUVVGRExFTkJRV3BETEVOQlFXUTdRVUZEUVhCRUxGRkJRVUZCTEVWQlFVVXNSMEZCUjNwQ0xFVkJRVVVzUjBGQlIwY3NSVUZCUlN4SFFVRkhPVU1zU1VGQlNTeERRVUZEWjBnc1IwRkJUQ3hEUVVGVFZTeEZRVUZVTEVOQlFXWTdRVUZEUVhKRUxGRkJRVUZCTEVWQlFVVXNSMEZCUjNwQ0xFVkJRVVVzUjBGQlIwY3NSVUZCUlN4SFFVRkhMME1zU1VGQlNTeERRVUZEYVVnc1IwRkJUQ3hEUVVGVFV5eEZRVUZVTEVOQlFXWTdRVUZEUVdRc1VVRkJRVUVzUjBGQlJ5eEhRVUZITEV0QlFVdDRSQ3hIUVVGTUxFTkJRVk5uUWl4RlFVRlVMRVZCUVdGRExFVkJRV0lzUlVGQmFVSjJRaXhGUVVGcVFpeEZRVUZ4UWtNc1JVRkJja0lzUlVGQmVVSnpSQ3hMUVVGNlFpeEZRVUZuUXl4RFFVRm9ReXhGUVVGdFEwVXNWVUZCYmtNc1JVRkJLME56UWl4TFFVRXZReXhGUVVGelJFTXNTMEZCZEVRc1JVRkJOa1FzUTBGQlEwb3NSVUZCUkN4RlFVRkxSU3hMUVVGTUxFVkJRVmxxUml4RlFVRmFMRVZCUVdkQ1F5eEZRVUZvUWl4RFFVRTNSQ3hEUVVGT08wRkJRMGc3TzBGQlEwUXJSU3hOUVVGQlFTeEZRVUZGTEVkQlFVZEVMRVZCUVVVc1IwRkJSMFlzUlVGQlZqdEJRVU5CTEZWQlFVbFBMRVZCUVVVc1IwRkJSeTlJTEVsQlFVa3NRMEZCUTJkSUxFZEJRVXdzUTBGQlUxRXNSVUZCVkN4RFFVRlVPMEZCUVVFc1ZVRkRTVkVzUlVGQlJTeEhRVUZIYUVrc1NVRkJTU3hEUVVGRGFVZ3NSMEZCVEN4RFFVRlRUeXhGUVVGVUxFTkJSRlE3UVVGQlFTeFZRVVZKVXl4RlFVRkZMRWRCUVVkcVNTeEpRVUZKTEVOQlFVTm5TQ3hIUVVGTUxFTkJRVk5WTEVWQlFWUXNRMEZHVkR0QlFVRkJMRlZCUjBsUkxFVkJRVVVzUjBGQlIyeEpMRWxCUVVrc1EwRkJRMmxJTEVkQlFVd3NRMEZCVTFNc1JVRkJWQ3hEUVVoVU8wRkJRVUVzVlVGSlNWTXNRMEZCUXl4SFFVRkhia2tzU1VGQlNTeERRVUZEYjBrc1IwRkJUQ3hEUVVGVFZDeEZRVUZGTEVkQlFVY3NRMEZCWkN4RFFVcFNPMEZCUVVFc1ZVRkxTVlVzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCU2l4SFFVRlJka1lzUlVGQlVpeEhRVUZoY1VZc1EwRk1kRUk3UVVGQlFTeFZRVTFKUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGS0xFZEJRVkYyUml4RlFVRlNMRWRCUVdGdlJpeERRVTUwUWp0QlFVRkJMRlZCVDBsSkxFVkJRVVVzUjBGQlJ5eERRVUZEY2tVc1JVRkJSQ3hGUVVGTFF5eEZRVUZNTEVOQlVGUTdRVUZCUVN4VlFWRkpjVVVzUlVGQlJTeEhRVUZITEVOQlFVTjBSU3hGUVVGRkxFZEJRVWR0UlN4RlFVRkZMRWRCUVVkTUxFVkJRVmdzUlVGQlpUZEVMRVZCUVVVc1IwRkJSMjFGTEVWQlFVVXNSMEZCUjFBc1JVRkJla0lzUTBGU1ZEdEJRVUZCTEZWQlUwbFZMRVZCUVVVc1IwRkJSeXhEUVVGRGNrVXNSVUZCUlN4SFFVRkhhVVVzUlVGQlJTeEhRVUZIU0N4RlFVRllMRVZCUVdVM1JDeEZRVUZGTEVkQlFVZHBSU3hGUVVGRkxFZEJRVWRNTEVWQlFYcENMRU5CVkZRN1FVRkJRU3hWUVZWSlV5eEZRVUZGTEVkQlFVY3NRMEZCUTNSRkxFVkJRVVFzUlVGQlMwTXNSVUZCVEN4RFFWWlVPMEZCVjBGdFJTeE5RVUZCUVN4RlFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGR0xFZEJRVkVzU1VGQlNVUXNSVUZCUlN4RFFVRkRMRU5CUVVRc1EwRkJUaXhIUVVGWlF5eEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRjBRanRCUVVOQlFTeE5RVUZCUVN4RlFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGR0xFZEJRVkVzU1VGQlNVUXNSVUZCUlN4RFFVRkRMRU5CUVVRc1EwRkJUaXhIUVVGWlF5eEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRjBRanM3UVVGRFFTeFZRVUZKYUVNc1UwRkJTaXhGUVVGbE8wRkJRMWdzWlVGQlR5eERRVUZEWjBNc1JVRkJSQ3hGUVVGTFF5eEZRVUZNTEVWQlFWTkRMRVZCUVZRc1JVRkJZVU1zVFVGQllpeERRVUZ2UWk5Q0xFZEJRWEJDTEVOQlFWQTdRVUZEU0N4UFFVWkVMRTFCUlU4N1FVRkRTRUVzVVVGQlFVRXNSMEZCUnl4SFFVRkhMRU5CUVVNMFFpeEZRVUZFTEVWQlFVdERMRVZCUVV3c1JVRkJVME1zUlVGQlZDeEZRVUZoUXl4TlFVRmlMRU5CUVc5Q0wwSXNSMEZCY0VJc1JVRkJlVUpuUXl4SlFVRjZRaXhIUVVGblEwTXNTMEZCYUVNc1EwRkJjME1zUjBGQmRFTXNSVUZCTWtOcVNTeEhRVUV6UXl4RFFVRXJReXhWUVVGQmFrSXNRMEZCUXp0QlFVRkJMR2xDUVVGSmJVb3NWVUZCVlN4RFFVRkRia29zUTBGQlJDeERRVUZrTzBGQlFVRXNVMEZCYUVRc1EwRkJUanRCUVVOQkxGbEJRVWx2U2l4TlFVRk5MRWRCUVVjc1JVRkJZanM3UVVGRFFTeGhRVUZMTEVsQlFVbDZTaXhEUVVGRExFZEJRVWNzUTBGQlVpeEZRVUZYTUVvc1JVRkJSU3hIUVVGSGNFTXNSMEZCUnl4RFFVRkRka1lzVFVGQmVrSXNSVUZCYVVNdlFpeERRVUZETEVkQlFVY3dTaXhGUVVGeVF5eEZRVUY1UXpGS0xFTkJRVU1zUlVGQk1VTXNSVUZCT0VNN1FVRkRNVU41U2l4VlFVRkJRU3hOUVVGTkxFTkJRVU42U2l4RFFVRkVMRU5CUVU0c1IwRkJXVUVzUTBGQlF5eEhRVUZITEVOQlFVb3NSMEZCVVhkSUxFMUJRVTBzUTBGQlEwWXNSMEZCUnl4RFFVRkRkRWdzUTBGQlF5eEhRVUZITEVOQlFVd3NRMEZCU2l4RlFVRmhjMGdzUjBGQlJ5eERRVUZEZEVnc1EwRkJSQ3hEUVVGb1FpeEZRVUZ4UW5GSUxFZEJRWEpDTEVOQlFVNHNRMEZCWjBNdlJ5eERRVUY0UXl4SFFVRTBRMnRJTEUxQlFVMHNRMEZCUTBZc1IwRkJSeXhEUVVGRGRFZ3NRMEZCUkN4RFFVRktMRVZCUVZOelNDeEhRVUZITEVOQlFVTjBTQ3hEUVVGRExFZEJRVWNzUTBGQlRDeERRVUZhTEVWQlFYRkNjVWdzUjBGQmNrSXNRMEZCVGl4RFFVRm5RMmhJTEVOQlFYaEdPMEZCUTBnN08wRkJRMFFzWlVGQlQyOUtMRTFCUVZBN1FVRkRTRHRCUVVOS0lpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dVR0YwYUVSbFppQjlJR1p5YjIwZ0p5NHZZVzVwYldGMGFXOXVKMXh1YVcxd2IzSjBJSHNnY0dGeWMyVlRWa2NzSUUxdmRtVlViME52YlcxaGJtUXNJRXhwYm1WVWIwTnZiVzFoYm1Rc0lFaHZjbWw2YjI1MFlXeE1hVzVsVkc5RGIyMXRZVzVrTENCV1pYSjBhV05oYkV4cGJtVlViME52YlcxaGJtUXNJRU4xY25abFZHOURiMjF0WVc1a0xDQlJkV0ZrY21GMGFXTkRkWEoyWlZSdlEyOXRiV0Z1WkN3Z1JXeHNhWEIwYVdOaGJFRnlZME52YlcxaGJtUWdmU0JtY205dElDZHpkbWN0Y0dGMGFDMXdZWEp6WlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VHRjBhRTFoYTJWeUlIdGNiaUFnSUNCd2RXSnNhV01nY0dGMGFEb2dVR0YwYUVSbFppQTlJSHRjYmlBZ0lDQWdJQ0FnWXpvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdrNklGdGRMRnh1SUNBZ0lDQWdJQ0J2T2lCYlhTeGNiaUFnSUNBZ0lDQWdkam9nVzExY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY0hKcGRtRjBaU0JqZFhKeVpXNTBXRG9nYm5WdFltVnlJRDBnTUR0Y2JpQWdJQ0J3Y21sMllYUmxJR04xY25KbGJuUlpPaUJ1ZFcxaVpYSWdQU0F3TzF4dUlDQWdJSEJ5YVhaaGRHVWdiMlptYzJWMFdEb2diblZ0WW1WeUlEMGdTVzVtYVc1cGRIazdYRzRnSUNBZ2NISnBkbUYwWlNCdlptWnpaWFJaT2lCdWRXMWlaWElnUFNCSmJtWnBibWwwZVR0Y2JseHVJQ0FnSUM4dklHWnZjaUJrYVhOamIyNTBhVzUxYjNWeklIQmhkR2h6WEc0Z0lDQWdjSEpwZG1GMFpTQndZWFJvVW1WaFpIa2dQU0JtWVd4elpWeHVJQ0FnSUhCeWFYWmhkR1VnY0dGMGFGTjBZWEowT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkSUQwZ1d6QXNJREJkWEc0Z0lDQWdjSEpwZG1GMFpTQndZWFJvUTJoaGFXNDZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMWJYU0E5SUZ0ZFhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdZWFJvUkdGMFlUODZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRjBhRVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0Z5YzJVb2NHRjBhRVJoZEdFcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCd2NtbDJZWFJsSUhWd1pHRjBaVmhaS0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZnZ1BTQjRYRzRnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZrZ1BTQjVYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwV0NBOUlFMWhkR2d1YldsdUtIUm9hWE11YjJabWMyVjBXQ3dnZUNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQjVLVnh1SUNBZ0lIMWNibHh1SUNBZ0lIQnlhWFpoZEdVZ1kyRnNZM1ZzWVhSbFFtVjZhV1Z5VFdsdVRXRjRLSEF3T2lCdWRXMWlaWElzSUhBeE9pQnVkVzFpWlhJc0lIQXlPaUJ1ZFcxaVpYSXNJSEF6T2lCdWRXMWlaWElwT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVNBOUlETWdLaUFvY0RNZ0xTQXpJQ29nY0RJZ0t5QXpJQ29nY0RFZ0xTQndNQ2xjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZaUE5SURZZ0tpQW9jRElnTFNBeUlDb2djREVnS3lCd01DbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1l5QTlJRE1nS2lBb2NERWdMU0J3TUNsY2JpQWdJQ0FnSUNBZ2JHVjBJRzFwYmlBOUlFbHVabWx1YVhSNUxDQnRZWGdnUFNBdFNXNW1hVzVwZEhsY2JpQWdJQ0FnSUNBZ2FXWWdLR0lnS2lCaUlDMGdOQ0FxSUdFZ0tpQmpJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE54Y25RZ1BTQk5ZWFJvTG5OeGNuUW9ZaUFxSUdJZ0xTQTBJQ29nWVNBcUlHTXBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5YjI5MGN5QTlJRnN4TENBdE1WMHViV0Z3S0cxMWJIUnBJRDArSUNodGRXeDBhU0FxSUhOeGNuUWdMU0JpS1NBdklESWdMeUJoS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbTl2ZEhNdVptOXlSV0ZqYUNoeWIyOTBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbTl2ZENBK0lEQWdKaVlnY205dmRDQThJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCTllYUm9MbkJ2ZHlneElDMGdjbTl2ZEN3Z015a2dLaUJ3TUNBcklETWdLaUJOWVhSb0xuQnZkeWd4SUMwZ2NtOXZkQ3dnTWlrZ0tpQnliMjkwSUNvZ2NERWdLeUF6SUNvZ0tERWdMU0J5YjI5MEtTQXFJSEp2YjNRZ0tpQnliMjkwSUNvZ2NESWdLeUJOWVhSb0xuQnZkeWh5YjI5MExDQXpLU0FxSUhBelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmlBOUlFMWhkR2d1YldsdUtHMXBiaXdnZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVDQTlJRTFoZEdndWJXRjRLRzFoZUN3Z2RtRnNkV1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdGFXNGdQU0JOWVhSb0xtMXBiaWh0YVc0c0lIQXdMQ0J3TXlsY2JpQWdJQ0FnSUNBZ2JXRjRJRDBnVFdGMGFDNXRZWGdvYldGNExDQndNQ3dnY0RNcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmJXbHVMQ0J0WVhoZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hKcGRtRjBaU0JqWVd4amRXeGhkR1ZJYVdkb2JIbFBjbVJsY2loaGNuSTZJRzUxYldKbGNsdGRMQ0J5WVhScGJ6b2diblZ0WW1WeUtUb2diblZ0WW1WeVcxMGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnpkV3gwT2lCdWRXMWlaWEpiWFNBOUlGdGRYRzRnSUNBZ0lDQWdJR0Z5Y2k1bWIzSkZZV05vS0NoMkxDQnBMQ0JoS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0ErUFNCaExteGxibWQwYUNBdElERXBJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2RpQXFJQ2d4SUMwZ2NtRjBhVzhwSUNzZ1lWdHBJQ3NnTVYwZ0tpQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEZ4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdZMkZzWTNWc1lYUmxRbVY2YVdWeVUzQnNhWFFvY21GMGFXODZJRzUxYldKbGNpd2dMaTR1YjNKa1pYSXdPaUJ1ZFcxaVpYSmJYU2s2SUc1MWJXSmxjbHRkSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU1TQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJd0xDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU1pQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJeExDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2JHVjBJRzl5WkdWeU15QTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFNHbG5hR3g1VDNKa1pYSW9iM0prWlhJeUxDQnlZWFJwYnlsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0dmNtUmxjakZiTUYwc0lHOXlaR1Z5TWxzd1hTd2diM0prWlhJeld6QmRMQ0J2Y21SbGNqSmJNVjBzSUc5eVpHVnlNVnN5WFN3Z2IzSmtaWEl3V3pOZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhCMVlteHBZeUJ0YjNabFZHOG9lRG9nYm5WdFltVnlMQ0I1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuQmhkR2hTWldGa2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtTWdQU0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG1rZ1BTQmJXekFzSURCZFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG04Z1BTQmJYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xuWWdQU0JiVzNnc0lIbGRYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqZFhKeVpXNTBXQ0E5SUhoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZrZ1BTQjVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRGZ2dQU0I0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkRmtnUFNCNVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2hTWldGa2VTQTlJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJHbHVaVlJ2S0M0dUxuUm9hWE11Y0dGMGFGTjBZWEowS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c2FXNWxWRzhvZUN3Z2VTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUVOb1lXbHVMbkIxYzJnb2RHaHBjeTV3WVhSb1UzUmhjblFwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb1UzUmhjblFnUFNCYmVDd2dlVjFjYmlBZ0lDQjlYRzRnSUNBZ2NIVmliR2xqSUcxdmRtVlViMUpsYkdGMGFYWmxLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MlpWUnZLSFJvYVhNdVkzVnljbVZ1ZEZnZ0t5QjRMQ0IwYUdsekxtTjFjbkpsYm5SWklDc2dlU2xjYmlBZ0lDQjlYRzRnSUNBZ2NIVmliR2xqSUd4cGJtVlVieWg0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ3VhU0V1Y0hWemFDaGJNQ3dnTUYwcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFDNXZJUzV3ZFhOb0tGc3dMQ0F3WFNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xuWWhMbkIxYzJnb1czZ3NJSGxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWaFpLSGdzSUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5QnNhVzVsVkc5U1pXeGhkR2wyWlNoNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnloMGFHbHpMbU4xY25KbGJuUllJQ3NnZUN3Z2RHaHBjeTVqZFhKeVpXNTBXU0FySUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5Qm9iM0pwZW05dWRHRnNWRzhvZURvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdsdVpWUnZLSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJvYjNKcGVtOXVkR0ZzVkc5U1pXeGhkR2wyWlNoNE9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b2IzSnBlbTl1ZEdGc1ZHOG9kR2hwY3k1amRYSnlaVzUwV0NBcklIZ3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUIyWlhKMGFXTmhiRlJ2S0hrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVlVieWgwYUdsekxtTjFjbkpsYm5SWUxDQjVLVnh1SUNBZ0lIMWNiaUFnSUNCd2RXSnNhV01nZG1WeWRHbGpZV3hVYjFKbGJHRjBhWFpsS0hrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5abGNuUnBZMkZzVkc4b2RHaHBjeTVqZFhKeVpXNTBXU0FySUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5QmpkV0pwWTBKbGVtbGxja04xY25abFZHOG9YRzRnSUNBZ0lDQWdJR014ZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCak1YazZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdZeko0T2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUdNeWVUb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1YVNFdWNIVnphQ2hiWXpKNElDMGdlQ3dnWXpKNUlDMGdlVjBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUM1dklTNXdkWE5vS0Z0ak1YZ2dMU0IwYUdsekxtTjFjbkpsYm5SWUxDQmpNWGtnTFNCMGFHbHpMbU4xY25KbGJuUlpYU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG5ZaExuQjFjMmdvVzNnc0lIbGRLVnh1SUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZnZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG05bVpuTmxkRmdzSUM0dUxuUm9hWE11WTJGc1kzVnNZWFJsUW1WNmFXVnlUV2x1VFdGNEtIUm9hWE11WTNWeWNtVnVkRmdzSUdNeGVDd2dZeko0TENCNEtTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1dlptWnpaWFJaSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTV2Wm1aelpYUlpMQ0F1TGk1MGFHbHpMbU5oYkdOMWJHRjBaVUpsZW1sbGNrMXBiazFoZUNoMGFHbHpMbU4xY25KbGJuUlpMQ0JqTVhrc0lHTXllU3dnZVNrcFhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxXRmtvZUN3Z2VTbGNiaUFnSUNCOVhHNGdJQ0FnY0hWaWJHbGpJR04xWW1salFtVjZhV1Z5UTNWeWRtVlViMUpsYkdGMGFYWmxLRnh1SUNBZ0lDQWdJQ0JqTVhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ1l6RjVPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJR015ZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCak1uazZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpkV0pwWTBKbGVtbGxja04xY25abFZHOG9kR2hwY3k1amRYSnlaVzUwV0NBcklHTXhlQ3dnZEdocGN5NWpkWEp5Wlc1MFdTQXJJR014ZVN3Z2RHaHBjeTVqZFhKeVpXNTBXQ0FySUdNeWVDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklHTXllU3dnZEdocGN5NWpkWEp5Wlc1MFdDQXJJSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa2dLeUI1S1Z4dUlDQWdJSDFjYmlBZ0lDQndkV0pzYVdNZ2NYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVlVieWhqZURvZ2JuVnRZbVZ5TENCamVUb2diblZ0WW1WeUxDQjRPaUJ1ZFcxaVpYSXNJSGs2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWFTRXVjSFZ6YUNoYlkzZ2dMU0I0TENCamVTQXRJSGxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWJ5RXVjSFZ6YUNoYlkzZ2dMU0IwYUdsekxtTjFjbkpsYm5SWUxDQmplU0F0SUhSb2FYTXVZM1Z5Y21WdWRGbGRLVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1ZGlFdWNIVnphQ2hiZUN3Z2VWMHBYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyWm1jMlYwV0NBOUlFMWhkR2d1YldsdUtIUm9hWE11YjJabWMyVjBXQ3dnTGk0dWRHaHBjeTVqWVd4amRXeGhkR1ZDWlhwcFpYSk5hVzVOWVhnb2RHaHBjeTVqZFhKeVpXNTBXQ3dnWTNnc0lHTjRMQ0I0S1NsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQXVMaTUwYUdsekxtTmhiR04xYkdGMFpVSmxlbWxsY2sxcGJrMWhlQ2gwYUdsekxtTjFjbkpsYm5SWkxDQmplU3dnWTNrc0lIa3BLVnh1SUNBZ0lDQWdJQ0IwYUdsekxuVndaR0YwWlZoWktIZ3NJSGtwWEc0Z0lDQWdmVnh1SUNBZ0lIQjFZbXhwWXlCeGRXRmtjbUYwYVdOQ1pYcHBaWEpEZFhKMlpWUnZVbVZzWVhScGRtVW9ZM2c2SUc1MWJXSmxjaXdnWTNrNklHNTFiV0psY2l3Z2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXhkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVlJ2S0hSb2FYTXVZM1Z5Y21WdWRGZ2dLeUJqZUN3Z2RHaHBjeTVqZFhKeVpXNTBXU0FySUdONUxDQjBhR2x6TG1OMWNuSmxiblJZSUNzZ2VDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklIa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJoY21OVWJ5aGNiaUFnSUNBZ0lDQWdjbmc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnY25rNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VFRjRhWE5TYjNSaGRHbHZiam9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JzWVhKblpVRnlZMFpzWVdjNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2MzZGxaWEJHYkdGbk9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTlRaWEpwWlhNZ1BTQlFZWFJvVFdGclpYSXVZVEpqS0hSb2FYTXVZM1Z5Y21WdWRGZ3NJSFJvYVhNdVkzVnljbVZ1ZEZrc0lISjRMQ0J5ZVN3Z2VFRjRhWE5TYjNSaGRHbHZiaXdnYkdGeVoyVkJjbU5HYkdGbkxDQnpkMlZsY0Vac1lXY3NJSGdzSUhrcElHRnpJRzUxYldKbGNsdGRYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGpVMlZ5YVdWekxteGxibWQwYUNBK1BTQTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGIzWk1hWE4wSUQwZ1kxTmxjbWxsY3k1emNHeHBZMlVvTUN3Z05pbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUM1cElTNXdkWE5vS0Z0cGIzWk1hWE4wV3pKZElDMGdhVzkyVEdsemRGczBYU3dnYVc5MlRHbHpkRnN6WFNBdElHbHZka3hwYzNSYk5WMWRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtOGhMbkIxYzJnb1cybHZka3hwYzNSYk1GMGdMU0IwYUdsekxtTjFjbkpsYm5SWUxDQnBiM1pNYVhOMFd6RmRJQzBnZEdocGN5NWpkWEp5Wlc1MFdWMHBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWRpRXVjSFZ6YUNoYmFXOTJUR2x6ZEZzMFhTd2dhVzkyVEdsemRGczFYVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkRmdnUFNCTllYUm9MbTFwYmloMGFHbHpMbTltWm5ObGRGZ3NJQzR1TG5Sb2FYTXVZMkZzWTNWc1lYUmxRbVY2YVdWeVRXbHVUV0Y0S0hSb2FYTXVZM1Z5Y21WdWRGZ3NJR2x2ZGt4cGMzUmJNRjBzSUdsdmRreHBjM1JiTWwwc0lHbHZka3hwYzNSYk5GMHBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUlpJRDBnVFdGMGFDNXRhVzRvZEdocGN5NXZabVp6WlhSWkxDQXVMaTUwYUdsekxtTmhiR04xYkdGMFpVSmxlbWxsY2sxcGJrMWhlQ2gwYUdsekxtTjFjbkpsYm5SWkxDQnBiM1pNYVhOMFd6RmRMQ0JwYjNaTWFYTjBXek5kTENCcGIzWk1hWE4wV3pWZEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFdGa29hVzkyVEdsemRGczBYU3dnYVc5MlRHbHpkRnMxWFNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J3ZFdKc2FXTWdZWEpqVkc5U1pXeGhkR2wyWlNoY2JpQWdJQ0FnSUNBZ2NuZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdjbms2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZUVGNGFYTlNiM1JoZEdsdmJqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQnNZWEpuWlVGeVkwWnNZV2M2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnYzNkbFpYQkdiR0ZuT2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VUb2diblZ0WW1WeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVhKalZHOG9jbmdzSUhKNUxDQjRRWGhwYzFKdmRHRjBhVzl1TENCc1lYSm5aVUZ5WTBac1lXY3NJSE4zWldWd1JteGhaeXdnZEdocGN5NWpkWEp5Wlc1MFdDQXJJSGdzSUhSb2FYTXVZM1Z5Y21WdWRGa2dLeUI1S1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdjM1JoZEdsaklHRXlZeWg0TVRvZ2JuVnRZbVZ5TENCNU1Ub2diblZ0WW1WeUxDQnllRG9nYm5WdFltVnlMQ0J5ZVRvZ2JuVnRZbVZ5TENCaGJtZHNaVG9nYm5WdFltVnlMQ0JzWVhKblpWOWhjbU5mWm14aFp6b2diblZ0WW1WeUxDQnpkMlZsY0Y5bWJHRm5PaUJ1ZFcxaVpYSXNJSGd5T2lCdWRXMWlaWElzSUhreU9pQnVkVzFpWlhJc0lISmxZM1Z5YzJsMlpUODZJRzUxYldKbGNsdGRLVG9nYm5WdFltVnlXMTBnZkNCdWRXMWlaWEpiWFZ0ZElIdGNiaUFnSUNBZ0lDQWdMeThnWm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0Z2IyWWdkMmhsY21VZ2RHaHBjeUJOWVhSb0lHTmhiV1VnWm5KdmJTQjJhWE5wZERwY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2VTFaSE1URXZhVzF3Ykc1dmRHVXVhSFJ0YkNOQmNtTkpiWEJzWlcxbGJuUmhkR2x2Yms1dmRHVnpYRzRnSUNBZ0lDQWdJSFpoY2lCZk1USXdJRDBnVFdGMGFDNVFTU0FxSURFeU1DQXZJREU0TUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpoWkNBOUlFMWhkR2d1VUVrZ0x5QXhPREFnS2lBb0syRnVaMnhsSUh4OElEQXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpPaUJ1ZFcxaVpYSmJYU0E5SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZUhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5YjNSaGRHVWdQU0FvZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJc0lISmhaRG9nYm5WdFltVnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRmdnUFNCNElDb2dUV0YwYUM1amIzTW9jbUZrS1NBdElIa2dLaUJOWVhSb0xuTnBiaWh5WVdRcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JaSUQwZ2VDQXFJRTFoZEdndWMybHVLSEpoWkNrZ0t5QjVJQ29nVFdGMGFDNWpiM01vY21Ga0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QjRPaUJZTENCNU9pQlpJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYSjRJSHg4SUNGeWVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0NE1Td2dlVEVzSUhneUxDQjVNaXdnZURJc0lIa3lYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9JWEpsWTNWeWMybDJaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlSGtnUFNCeWIzUmhkR1VvZURFc0lIa3hMQ0F0Y21Ga0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhneElEMGdlSGt1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGt4SUQwZ2VIa3VlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaDVJRDBnY205MFlYUmxLSGd5TENCNU1pd2dMWEpoWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0TWlBOUlIaDVMbmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVNaUE5SUhoNUxuazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMjl6SUQwZ1RXRjBhQzVqYjNNb1RXRjBhQzVRU1NBdklERTRNQ0FxSUdGdVoyeGxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVc0Z1BTQk5ZWFJvTG5OcGJpaE5ZWFJvTGxCSklDOGdNVGd3SUNvZ1lXNW5iR1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhnZ1BTQW9lREVnTFNCNE1pa2dMeUF5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrZ1BTQW9lVEVnTFNCNU1pa2dMeUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdnZ1BTQjRJQ29nZUNBdklDaHllQ0FxSUhKNEtTQXJJSGtnS2lCNUlDOGdLSEo1SUNvZ2Nua3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhQ0E5SUUxaGRHZ3VjM0Z5ZENob0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnllQ0E5SUdnZ0tpQnllRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZVNBOUlHZ2dLaUJ5ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5ZURJZ1BTQnllQ0FxSUhKNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjVNaUE5SUhKNUlDb2djbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDaHNZWEpuWlY5aGNtTmZabXhoWnlBOVBTQnpkMlZsY0Y5bWJHRm5JRDhnTFRFZ09pQXhLU0FxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2d1YzNGeWRDaE5ZWFJvTG1GaWN5Z29jbmd5SUNvZ2Nua3lJQzBnY25neUlDb2dlU0FxSUhrZ0xTQnllVElnS2lCNElDb2dlQ2tnTHlBb2NuZ3lJQ29nZVNBcUlIa2dLeUJ5ZVRJZ0tpQjRJQ29nZUNrcEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmplQ0E5SUdzZ0tpQnllQ0FxSUhrZ0x5QnllU0FySUNoNE1TQXJJSGd5S1NBdklESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM2tnUFNCcklDb2dMWEo1SUNvZ2VDQXZJSEo0SUNzZ0tIa3hJQ3NnZVRJcElDOGdNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTVNBOUlFMWhkR2d1WVhOcGJpZ29lVEVnTFNCamVTa2dMeUJ5ZVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pqSWdQU0JOWVhSb0xtRnphVzRvS0hreUlDMGdZM2twSUM4Z2Nua3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1NU0E5SUhneElEd2dZM2dnUHlCTllYUm9MbEJKSUMwZ1pqRWdPaUJtTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1l5SUQwZ2VESWdQQ0JqZUNBL0lFMWhkR2d1VUVrZ0xTQm1NaUE2SUdZeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWmpFZ1BDQXdJQ1ltSUNobU1TQTlJRTFoZEdndVVFa2dLaUF5SUNzZ1pqRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pqSWdQQ0F3SUNZbUlDaG1NaUE5SUUxaGRHZ3VVRWtnS2lBeUlDc2daaklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOM1pXVndYMlpzWVdjZ0ppWWdaakVnUGlCbU1pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1l4SUQwZ1pqRWdMU0JOWVhSb0xsQkpJQ29nTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzNkbFpYQmZabXhoWnlBbUppQm1NaUErSUdZeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaklnUFNCbU1pQXRJRTFoZEdndVVFa2dLaUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pqRWdQU0J5WldOMWNuTnBkbVZiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtTWlBOUlISmxZM1Z5YzJsMlpWc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjRJRDBnY21WamRYSnphWFpsV3pKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNrZ1BTQnlaV04xY25OcGRtVmJNMTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJR1JtSUQwZ1pqSWdMU0JtTVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLR1JtS1NBK0lGOHhNakFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbU1tOXNaQ0E5SUdZeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3liMnhrSUQwZ2VESXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVEp2YkdRZ1BTQjVNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWXlJRDBnWmpFZ0t5QmZNVEl3SUNvZ0tITjNaV1Z3WDJac1lXY2dKaVlnWmpJZ1BpQm1NU0EvSURFZ09pQXRNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRNaUE5SUdONElDc2djbmdnS2lCTllYUm9MbU52Y3lobU1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNU1pQTlJR041SUNzZ2Nua2dLaUJOWVhSb0xuTnBiaWhtTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQjBhR2x6TG1FeVl5aDRNaXdnZVRJc0lISjRMQ0J5ZVN3Z1lXNW5iR1VzSURBc0lITjNaV1Z3WDJac1lXY3NJSGd5YjJ4a0xDQjVNbTlzWkN3Z1cyWXlMQ0JtTW05c1pDd2dZM2dzSUdONVhTa2dZWE1nYm5WdFltVnlXMTA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHWWdQU0JtTWlBdElHWXhPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1l6RWdQU0JOWVhSb0xtTnZjeWhtTVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6TVNBOUlFMWhkR2d1YzJsdUtHWXhLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTXlJRDBnVFdGMGFDNWpiM01vWmpJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY3pJZ1BTQk5ZWFJvTG5OcGJpaG1NaWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBJRDBnVFdGMGFDNTBZVzRvWkdZZ0x5QTBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaDRJRDBnTkNBdklETWdLaUJ5ZUNBcUlIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VTQTlJRFFnTHlBeklDb2djbmtnS2lCMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlRFZ1BTQmJlREVzSUhreFhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcweUlEMGdXM2d4SUNzZ2FIZ2dLaUJ6TVN3Z2VURWdMU0JvZVNBcUlHTXhYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMHpJRDBnVzNneUlDc2dhSGdnS2lCek1pd2dlVElnTFNCb2VTQXFJR015WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzAwSUQwZ1czZ3lMQ0I1TWwwN1hHNGdJQ0FnSUNBZ0lHMHlXekJkSUQwZ01pQXFJRzB4V3pCZElDMGdiVEpiTUYwN1hHNGdJQ0FnSUNBZ0lHMHlXekZkSUQwZ01pQXFJRzB4V3pGZElDMGdiVEpiTVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldOMWNuTnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJiVElzSUcwekxDQnRORjB1WTI5dVkyRjBLSEpsY3lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQmJiVElzSUcwekxDQnRORjB1WTI5dVkyRjBLSEpsY3lrdWFtOXBiaWdwTG5Od2JHbDBLRndpTEZ3aUtTNXRZWEFvZUNBOVBpQndZWEp6WlVac2IyRjBLSGdwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVpYZHlaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYVNBOUlISmxjeTVzWlc1bmRHZzdJR2tnUENCcGFUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjNjbVZ6VzJsZElEMGdhU0FsSURJZ1B5QnliM1JoZEdVb2NtVnpXMmtnTFNBeFhTd2djbVZ6VzJsZExDQnlZV1FwTG5rZ09pQnliM1JoZEdVb2NtVnpXMmxkTENCeVpYTmJhU0FySURGZExDQnlZV1FwTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNjbVZ6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hWaWJHbGpJR05zYjNObFVHRjBhQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtTWdQU0IwY25WbFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY0hWaWJHbGpJSFZ1YVdadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CaGRHaERhR0ZwYmk1c1pXNW5kR2dnSmlZZ0lTaDBhR2x6TG1OMWNuSmxiblJZSUQwOUlIUm9hWE11Y0dGMGFGTjBZWEowV3pCZElDWW1JSFJvYVhNdVkzVnljbVZ1ZEZrZ1BUMGdkR2hwY3k1d1lYUm9VM1JoY25SYk1WMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtVlVieWd1TGk1MGFHbHpMbkJoZEdoVGRHRnlkQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NXdZWFJvUTJoaGFXNHViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3WVhSb1VtVm1JRDBnZEdocGN5NXdZWFJvUTJoaGFXNHVjRzl3S0NraFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnlndUxpNXdZWFJvVW1WbUtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaDBhR2x6TG5CaGRHZ3VieUV1YkdWdVozUm9JRHdnZEdocGN5NXdZWFJvTG1raExteGxibWQwYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHRjBhQzV2SVM1d2RYTm9LRnN3TENBd1hTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MblloTG1admNrVmhZMmdvZG1Gc2RXVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWYk1GMGdMVDBnZEdocGN5NXZabVp6WlhSWVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpWc3hYU0F0UFNCMGFHbHpMbTltWm5ObGRGbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXZabVp6WlhSWUlEMGdNRnh1SUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZrZ1BTQXdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NIVmliR2xqSUhCaGNuTmxLSEJoZEdoRVlYUmhPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjR0YwYUVSaGRHRlRaWEpwWlhNZ1BTQndZWEp6WlZOV1J5aHdZWFJvUkdGMFlTbGNiaUFnSUNBZ0lDQWdiR1YwSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1U3WEc0Z0lDQWdJQ0FnSUhCaGRHaEVZWFJoVTJWeWFXVnpMbVp2Y2tWaFkyZ29jR0YwYUVSaGRHRkpkR1Z0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvY0dGMGFFUmhkR0ZKZEdWdExtTnZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2ROSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5Qk5iM1psVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MlpWUnZLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlQ3dnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjBuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvUkdGMFlWZHBkR2hVZVhCbElEMGdjR0YwYUVSaGRHRkpkR1Z0SUdGeklFMXZkbVZVYjBOdmJXMWhibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNabFZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZE1KenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCTWFXNWxWRzlEYjIxdFlXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViR2x1WlZSdktIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVDd2djR0YwYUVSaGRHRlhhWFJvVkhsd1pTNTVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9SR0YwWVZkcGRHaFVlWEJsSUQwZ2NHRjBhRVJoZEdGSmRHVnRJR0Z6SUV4cGJtVlViME52YlcxaGJtUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5nc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkSUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaU0E5SUhCaGRHaEVZWFJoU1hSbGJTQmhjeUJJYjNKcGVtOXVkR0ZzVEdsdVpWUnZRMjl0YldGdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaHZjbWw2YjI1MFlXeFVieWh3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5hQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVZ1BTQndZWFJvUkdGMFlVbDBaVzBnWVhNZ1NHOXlhWHB2Ym5SaGJFeHBibVZVYjBOdmJXMWhibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYjNKcGVtOXVkR0ZzVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5ncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuVmljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVWdQU0J3WVhSb1JHRjBZVWwwWlcwZ1lYTWdWbVZ5ZEdsallXeE1hVzVsVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRHbGpZV3hVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5rcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZGljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVWdQU0J3WVhSb1JHRjBZVWwwWlcwZ1lYTWdWbVZ5ZEdsallXeE1hVzVsVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRHbGpZV3hVYjFKbGJHRjBhWFpsS0hCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RESnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QkRkWEoyWlZSdlEyOXRiV0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OMVltbGpRbVY2YVdWeVEzVnlkbVZVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmd5TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5reUxDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCRGRYSjJaVlJ2UTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xWW1salFtVjZhV1Z5UTNWeWRtVlViMUpsYkdGMGFYWmxLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlREVzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVRFc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVESXNJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlVElzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUN3Z2NHRjBhRVJoZEdGWGFYUm9WSGx3WlM1NUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjFFbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxJRDBnY0dGMGFFUmhkR0ZKZEdWdElHRnpJRkYxWVdSeVlYUnBZME4xY25abFZHOURiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNYVmhaSEpoZEdsalFtVjZhV1Z5UTNWeWRtVlVieWh3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmd4TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5reExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHhKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCUmRXRmtjbUYwYVdORGRYSjJaVlJ2UTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkYxWVdSeVlYUnBZMEpsZW1sbGNrTjFjblpsVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RCSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QkZiR3hwY0hScFkyRnNRWEpqUTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZ5WTFSdktIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWNuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVjbmtzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUVGNGFYTlNiM1JoZEdsdmJpd2dmbjV3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbXhoY21kbFFYSmpMQ0IrZm5CaGRHaEVZWFJoVjJsMGFGUjVjR1V1YzNkbFpYQXNJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlQ3dnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMkVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvUkdGMFlWZHBkR2hVZVhCbElEMGdjR0YwYUVSaGRHRkpkR1Z0SUdGeklFVnNiR2x3ZEdsallXeEJjbU5EYjIxdFlXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWEpqVkc5U1pXeGhkR2wyWlNod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5KNExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuSjVMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmhCZUdselVtOTBZWFJwYjI0c0lINStjR0YwYUVSaGRHRlhhWFJvVkhsd1pTNXNZWEpuWlVGeVl5d2dmbjV3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbk4zWldWd0xDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGFKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZDZKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYkc5elpWQmhkR2dvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvY0dGMGFFUmhkR0ZKZEdWdEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDV2SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1p2ZFc1a0lHWnZjaUIwYUdseklIQmhkR2dnWTI5dGJXRnVaQzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEIxWW14cFl5QjFjSE5oYlhCc1pTaHlZWFJwYnpvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSFZ6WlNCRVpTQkRZWE4wWld4cVlYVW5jeUJoYkdkdmNtbDBhRzBnZEc4Z1pHOGdkR2hsSUhWd2MyRnRjR3hwYm1kY2JpQWdJQ0FnSUNBZ0x5OGdVbVZtWlhKbGJtTmxPaUJvZEhSd2N6b3ZMMlZ1TG5kcGEybHdaV1JwWVM1dmNtY3ZkMmxyYVM5RVpWOURZWE4wWld4cVlYVWxNamR6WDJGc1oyOXlhWFJvYlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh5WVhScGJ5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZHaGxJSFZ3YzJGdGNHeHBibWNnY21GMGFXOGdjMmh2ZFd4a0lHSmxJR0Z1SUdsdWRHVm5aWEl1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5WdWFXWnZjbTBvS1Z4dUlDQWdJQ0FnSUNCcFppQW9jbUYwYVc4Z1BEMGdNU2tnY21WMGRYSnVYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZjSGxRWVhSb09pQlFZWFJvUkdWbUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1l6b2dkR2hwY3k1d1lYUm9MbU1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBPaUJiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzg2SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZGpvZ1cxMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1ZGlFdVptOXlSV0ZqYUNnb2Rpd2dhU3dnWVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUEQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0hsUVlYUm9MblloTG5CMWMyZ29kaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzVwSVM1d2RYTm9LSFJvYVhNdWNHRjBhQzVwSVZ0cFhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5QmNuSmhlU0E5SUhSb2FYTXVjR0YwYUM1dklWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhVUZ5Y21GNUlEMGdkR2hwY3k1d1lYUm9MbWtoWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUVGeWNtRjVJRDBnVzJGYmFTQXRJREZkV3pCZExDQnZRWEp5WVhsYmFTQXRJREZkV3pCZElDc2dZVnRwSUMwZ01WMWJNRjBzSUdsQmNuSmhlVnRwWFZzd1hTQXJJSFpiTUYwc0lIWmJNRjFkWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZVVGeWNtRjVJRDBnVzJGYmFTQXRJREZkV3pGZExDQnZRWEp5WVhsYmFTQXRJREZkV3pGZElDc2dZVnRwSUMwZ01WMWJNVjBzSUdsQmNuSmhlVnRwWFZzeFhTQXJJSFpiTVYwc0lIWmJNVjFkWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNBOUlERTdJR2x1WkdWNElEd2djbUYwYVc4N0lHbHVaR1Y0S3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHVndVbUYwYVc4Z1BTQXhJQzhnS0hKaGRHbHZJQzBnYVc1a1pYZ2dLeUF4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGhUY0d4cGRFRnljbUY1SUQwZ2RHaHBjeTVqWVd4amRXeGhkR1ZDWlhwcFpYSlRjR3hwZENoemRHVndVbUYwYVc4c0lDNHVMbmhCY25KaGVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCNVUzQnNhWFJCY25KaGVTQTlJSFJvYVhNdVkyRnNZM1ZzWVhSbFFtVjZhV1Z5VTNCc2FYUW9jM1JsY0ZKaGRHbHZMQ0F1TGk1NVFYSnlZWGtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjREI0SUQwZ2VFRnljbUY1V3pCZExDQndNWGdnUFNCNFUzQnNhWFJCY25KaGVTNXphR2xtZENncElTQXRJSEF3ZUN3Z2NETjRJRDBnZUZOd2JHbDBRWEp5WVhsYk1WMHNJSEF5ZUNBOUlIaFRjR3hwZEVGeWNtRjVMbk5vYVdaMEtDa2hJQzBnY0RONExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3TUhrZ1BTQjVRWEp5WVhsYk1GMHNJSEF4ZVNBOUlIbFRjR3hwZEVGeWNtRjVMbk5vYVdaMEtDa2hJQzBnY0RCNUxDQndNM2tnUFNCNVUzQnNhWFJCY25KaGVWc3hYU3dnY0RKNUlEMGdlVk53YkdsMFFYSnlZWGt1YzJocFpuUW9LU0VnTFNCd00zbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiM0I1VUdGMGFDNXZJUzV3ZFhOb0tGdHdNWGdzSUhBeGVWMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVZCaGRHZ3VhU0V1Y0hWemFDaGJjREo0TENCd01ubGRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0hsUVlYUm9MblloTG5CMWMyZ29XM0F6ZUN3Z2NETjVYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0UVhKeVlYa2dQU0I0VTNCc2FYUkJjbkpoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhsQmNuSmhlU0E5SUhsVGNHeHBkRUZ5Y21GNVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd01IZ2dQU0I0UVhKeVlYa3VjMmhwWm5Rb0tTRXNJSEF4ZUNBOUlIaEJjbkpoZVM1emFHbG1kQ2dwSVNBdElIQXdlQ3dnY0RONElEMGdlRUZ5Y21GNVd6RmRMQ0J3TW5nZ1BTQjRRWEp5WVhrdWMyaHBablFvS1NFZ0xTQndNM2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0RCNUlEMGdlVUZ5Y21GNUxuTm9hV1owS0NraExDQndNWGtnUFNCNVFYSnlZWGt1YzJocFpuUW9LU0VnTFNCd01Ia3NJSEF6ZVNBOUlIbEJjbkpoZVZzeFhTd2djREo1SUQwZ2VVRnljbUY1TG5Ob2FXWjBLQ2toSUMwZ2NETjVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVVR0YwYUM1dklTNXdkWE5vS0Z0d01YZ3NJSEF4ZVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzVwSVM1d2RYTm9LRnR3TW5nc0lIQXllVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1VUdGMGFDNTJJUzV3ZFhOb0tGdHdNM2dzSUhBemVWMHBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUNBOUlHTnZjSGxRWVhSb1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1cFptOXliU2dwWEc0Z0lDQWdmVnh1WEc1OUlsMTkiLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5jYWxjdWxhdGVCYXNlVHJhbnNmb3JtID0gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybTtcclxuZXhwb3J0cy5nZXRCb3VuZGluZ0JveCA9IGdldEJvdW5kaW5nQm94O1xyXG5leHBvcnRzLmdldExlYWZOb2RlcyA9IGdldExlYWZOb2RlcztcclxuZXhwb3J0cy5nZXRCYXNlbGluZUhlaWdodCA9IGdldEJhc2VsaW5lSGVpZ2h0O1xyXG5leHBvcnRzLmVuY29kZUxpbmVDYXAgPSBlbmNvZGVMaW5lQ2FwO1xyXG5leHBvcnRzLmVuY29kZUxpbmVKb2luID0gZW5jb2RlTGluZUpvaW47XHJcbmV4cG9ydHMuZW5jb2RlVGV4dEFuY2hvciA9IGVuY29kZVRleHRBbmNob3I7XHJcbmV4cG9ydHMuZ3JlYXRlc3RDb21tb25EaXZpc29yID0gZ3JlYXRlc3RDb21tb25EaXZpc29yO1xyXG5leHBvcnRzLmxlYXN0Q29tbW9uTXVsdGlwbGUgPSBsZWFzdENvbW1vbk11bHRpcGxlO1xyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybShkb20sIHJvb3QpIHtcclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZGFncmVqcy9kYWdyZS1kMy9pc3N1ZXMvMjAyXHJcbiAgcmV0dXJuIHJvb3QuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpLm11bHRpcGx5KGRvbS5nZXRTY3JlZW5DVE0oKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJvdW5kaW5nQm94KGRvbSkge1xyXG4gIHZhciBzdmdSb290ID0gZG9tO1xyXG5cclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgaWYgKHN2Z1Jvb3QucGFyZW50RWxlbWVudCBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xyXG4gICAgICBzdmdSb290ID0gc3ZnUm9vdC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgYmFzZUJveCA9IGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0oZG9tLCBzdmdSb290KTtcclxuICB2YXIgcmVmQkJveCA9IGRvbS5nZXRCQm94KCk7XHJcbiAgdmFyIGNvb3JkaW5hdGUgPSBbYmFzZUJveC5lICsgcmVmQkJveC54LCBiYXNlQm94LmYgKyByZWZCQm94LnksIHJlZkJCb3gud2lkdGggKyAxLCByZWZCQm94LmhlaWdodCArIDFdO1xyXG4gIHJldHVybiBjb29yZGluYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRMZWFmTm9kZXMobWFzdGVyKSB7XHJcbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIyODkzOTEvaG93LXRvLWNyZWF0ZS1hbi1hcnJheS1vZi1sZWFmLW5vZGVzLW9mLWFuLWh0bWwtZG9tLXVzaW5nLWphdmFzY3JpcHRcclxuICB2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtYXN0ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLCAwKTtcclxuICB2YXIgbGVhZk5vZGVzID0gbm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICBpZiAoZWxlbS5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgLy8gc2VlIGlmIGFueSBvZiB0aGUgY2hpbGQgbm9kZXMgYXJlIGVsZW1lbnRzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAvLyB0aGVyZSBpcyBhIGNoaWxkIGVsZW1lbnQsIHNvIHJldHVybiBmYWxzZSB0byBub3QgaW5jbHVkZVxyXG4gICAgICAgICAgLy8gdGhpcyBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0pO1xyXG4gIHJldHVybiBsZWFmTm9kZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEJhc2VsaW5lSGVpZ2h0KGRvbSkge1xyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvbSk7XHJcbiAgdmFyIGZvbnRTZXR0aW5ncyA9IGNvbXB1dGVkU3R5bGUuZm9udDtcclxuICBjdHguZm9udCA9IGZvbnRTZXR0aW5ncztcclxuICB2YXIgdGV4dE1ldHJpeCA9IGN0eC5tZWFzdXJlVGV4dCgneXBmZ2rilognKTtcclxuICByZXR1cm4gdGV4dE1ldHJpeC5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQgfHwgMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlTGluZUNhcCh0eXBlKSB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdzcXVhcmUnOlxyXG4gICAgICByZXR1cm4gMztcclxuXHJcbiAgICBjYXNlICdidXR0JzpcclxuICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIDI7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVMaW5lSm9pbih0eXBlKSB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdtaXRlcic6XHJcbiAgICAgIHJldHVybiAxO1xyXG5cclxuICAgIGNhc2UgJ2JldmVsJzpcclxuICAgICAgcmV0dXJuIDM7XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIDI7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVUZXh0QW5jaG9yKHR5cGUpIHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgJ21pZGRsZSc6XHJcbiAgICAgIHJldHVybiAyO1xyXG5cclxuICAgIGNhc2UgJ2VuZCc6XHJcbiAgICAgIHJldHVybiAxO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ3JlYXRlc3RDb21tb25EaXZpc29yKHgsIHkpIHtcclxuICB4ID0gTWF0aC5hYnMoeCk7XHJcbiAgeSA9IE1hdGguYWJzKHkpO1xyXG5cclxuICB3aGlsZSAoeSkge1xyXG4gICAgdmFyIHQgPSB5O1xyXG4gICAgeSA9IHggJSB5O1xyXG4gICAgeCA9IHQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4geDtcclxufVxyXG5cclxuZnVuY3Rpb24gbGVhc3RDb21tb25NdWx0aXBsZSh4LCB5KSB7XHJcbiAgcmV0dXJuICF4IHx8ICF5ID8gMCA6IE1hdGguYWJzKHggKiB5IC8gZ3JlYXRlc3RDb21tb25EaXZpc29yKHgsIHkpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OW9aV3h3WlhJdWRITWlYU3dpYm1GdFpYTWlPbHNpWTJGc1kzVnNZWFJsUW1GelpWUnlZVzV6Wm05eWJTSXNJbVJ2YlNJc0luSnZiM1FpTENKblpYUlRZM0psWlc1RFZFMGlMQ0pwYm5abGNuTmxJaXdpYlhWc2RHbHdiSGtpTENKblpYUkNiM1Z1WkdsdVowSnZlQ0lzSW5OMloxSnZiM1FpTENKd1lYSmxiblJGYkdWdFpXNTBJaXdpVTFaSFIzSmhjR2hwWTNORmJHVnRaVzUwSWl3aVltRnpaVUp2ZUNJc0luSmxaa0pDYjNnaUxDSm5aWFJDUW05NElpd2lZMjl2Y21ScGJtRjBaU0lzSW1VaUxDSjRJaXdpWmlJc0lua2lMQ0ozYVdSMGFDSXNJbWhsYVdkb2RDSXNJbWRsZEV4bFlXWk9iMlJsY3lJc0ltMWhjM1JsY2lJc0ltNXZaR1Z6SWl3aVFYSnlZWGtpTENKd2NtOTBiM1I1Y0dVaUxDSnpiR2xqWlNJc0ltTmhiR3dpTENKblpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTSXNJbXhsWVdaT2IyUmxjeUlzSW1acGJIUmxjaUlzSW1Wc1pXMGlMQ0pvWVhORGFHbHNaRTV2WkdWeklpd2lhU0lzSW1Ob2FXeGtUbTlrWlhNaUxDSnNaVzVuZEdnaUxDSnViMlJsVkhsd1pTSXNJbWRsZEVKaGMyVnNhVzVsU0dWcFoyaDBJaXdpWTJGdWRtRnpJaXdpWkc5amRXMWxiblFpTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWTNSNElpd2laMlYwUTI5dWRHVjRkQ0lzSW1OdmJYQjFkR1ZrVTNSNWJHVWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpWm05dWRGTmxkSFJwYm1keklpd2labTl1ZENJc0luUmxlSFJOWlhSeWFYZ2lMQ0p0WldGemRYSmxWR1Y0ZENJc0ltRmpkSFZoYkVKdmRXNWthVzVuUW05NFJHVnpZMlZ1ZENJc0ltVnVZMjlrWlV4cGJtVkRZWEFpTENKMGVYQmxJaXdpWlc1amIyUmxUR2x1WlVwdmFXNGlMQ0psYm1OdlpHVlVaWGgwUVc1amFHOXlJaXdpWjNKbFlYUmxjM1JEYjIxdGIyNUVhWFpwYzI5eUlpd2lUV0YwYUNJc0ltRmljeUlzSW5RaUxDSnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3UVVGQlR5eFRRVUZUUVN4elFrRkJWQ3hEUVVGblEwTXNSMEZCYUVNc1JVRkJlVVJETEVsQlFYcEVMRVZCUVcxR08wRkJRM1JHTzBGQlJVRXNVMEZCVDBFc1NVRkJTU3hEUVVGRFF5eFpRVUZNTEVkQlFYRkNReXhQUVVGeVFpeEhRVUVyUWtNc1VVRkJMMElzUTBGQmQwTktMRWRCUVVjc1EwRkJRMFVzV1VGQlNpeEZRVUY0UXl4RFFVRlFPMEZCUTBnN08wRkJSVTBzVTBGQlUwY3NZMEZCVkN4RFFVRjNRa3dzUjBGQmVFSXNSVUZCYVVRN1FVRkRjRVFzVFVGQlNVMHNUMEZCTWtJc1IwRkJSMDRzUjBGQmJFTTdPMEZCUTBFc1UwRkJUeXhKUVVGUUxFVkJRV0U3UVVGRFZDeFJRVUZKVFN4UFFVRlBMRU5CUVVORExHRkJRVklzV1VGQmFVTkRMR3RDUVVGeVF5eEZRVUY1UkR0QlFVTnlSRVlzVFVGQlFVRXNUMEZCVHl4SFFVRkhRU3hQUVVGUExFTkJRVU5ETEdGQlFXeENPMEZCUTBnc1MwRkdSQ3hOUVVWUE8wRkJRMGc3UVVGRFNEdEJRVU5LT3p0QlFVTkVMRTFCUVUxRkxFOUJRVThzUjBGQlIxWXNjMEpCUVhOQ0xFTkJRVU5ETEVkQlFVUXNSVUZCVFUwc1QwRkJUaXhEUVVGMFF6dEJRVU5CTEUxQlFVMUpMRTlCUVU4c1IwRkJSMVlzUjBGQlJ5eERRVUZEVnl4UFFVRktMRVZCUVdoQ08wRkJRMEVzVFVGQlRVTXNWVUZCTkVNc1IwRkJSeXhEUVVGRFNDeFBRVUZQTEVOQlFVTkpMRU5CUVZJc1IwRkJXVWdzVDBGQlR5eERRVUZEU1N4RFFVRnlRaXhGUVVGM1Frd3NUMEZCVHl4RFFVRkRUU3hEUVVGU0xFZEJRVmxNTEU5QlFVOHNRMEZCUTAwc1EwRkJOVU1zUlVGQkswTk9MRTlCUVU4c1EwRkJRMDhzUzBGQlVpeEhRVUZuUWl4RFFVRXZSQ3hGUVVGclJWQXNUMEZCVHl4RFFVRkRVU3hOUVVGU0xFZEJRV2xDTEVOQlFXNUdMRU5CUVhKRU8wRkJRMEVzVTBGQlQwNHNWVUZCVUR0QlFVTklPenRCUVVWTkxGTkJRVk5QTEZsQlFWUXNRMEZCYzBKRExFMUJRWFJDTEVWQlFYZEZPMEZCUXpORk8wRkJSVUVzVFVGQlNVTXNTMEZCU3l4SFFVRkhReXhMUVVGTExFTkJRVU5ETEZOQlFVNHNRMEZCWjBKRExFdEJRV2hDTEVOQlFYTkNReXhKUVVGMFFpeERRVUV5UWt3c1RVRkJUU3hEUVVGRFRTeHZRa0ZCVUN4RFFVRTBRaXhIUVVFMVFpeERRVUV6UWl4RlFVRTJSQ3hEUVVFM1JDeERRVUZhTzBGQlEwRXNUVUZCU1VNc1UwRkJVeXhIUVVGSFRpeExRVUZMTEVOQlFVTlBMRTFCUVU0c1EwRkJZU3hWUVVGVlF5eEpRVUZXTEVWQlFXZENPMEZCUTNwRExGRkJRVWxCTEVsQlFVa3NRMEZCUTBNc1lVRkJUQ3hGUVVGS0xFVkJRVEJDTzBGQlEzUkNPMEZCUTBFc1YwRkJTeXhKUVVGSlF5eERRVUZETEVkQlFVY3NRMEZCWWl4RlFVRm5Ra0VzUTBGQlF5eEhRVUZIUml4SlFVRkpMRU5CUVVOSExGVkJRVXdzUTBGQlowSkRMRTFCUVhCRExFVkJRVFJEUml4RFFVRkRMRVZCUVRkRExFVkJRV2xFTzBGQlF6ZERMRmxCUVVsR0xFbEJRVWtzUTBGQlEwY3NWVUZCVEN4RFFVRm5Ra1FzUTBGQmFFSXNSVUZCYlVKSExGRkJRVzVDTEVsQlFTdENMRU5CUVc1RExFVkJRWE5ETzBGQlEyeERPMEZCUTBFN1FVRkRRU3hwUWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktPenRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVkQldtVXNRMEZCYUVJN1FVRmhRU3hUUVVGUFVDeFRRVUZRTzBGQlEwZzdPMEZCUlUwc1UwRkJVMUVzYVVKQlFWUXNRMEZCTWtKdVF5eEhRVUV6UWl4RlFVRm5SRHRCUVVOdVJDeE5RVUZOYjBNc1RVRkJUU3hIUVVGSFF5eFJRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCWmp0QlFVTkJMRTFCUVUxRExFZEJRVWNzUjBGQlIwZ3NUVUZCVFN4RFFVRkRTU3hWUVVGUUxFTkJRV3RDTEVsQlFXeENMRU5CUVZvN1FVRkRRU3hOUVVGTlF5eGhRVUZoTEVkQlFVZERMR2RDUVVGblFpeERRVUZETVVNc1IwRkJSQ3hEUVVGMFF6dEJRVU5CTEUxQlFVMHlReXhaUVVGWkxFZEJRVWRHTEdGQlFXRXNRMEZCUTBjc1NVRkJia003UVVGRlFVd3NSVUZCUVVFc1IwRkJSeXhEUVVGRFN5eEpRVUZLTEVkQlFWZEVMRmxCUVZnN1FVRkRRU3hOUVVGTlJTeFZRVUZWTEVkQlFVZE9MRWRCUVVjc1EwRkJRMDhzVjBGQlNpeERRVUZuUWl4UlFVRm9RaXhEUVVGdVFqdEJRVU5CTEZOQlFVOUVMRlZCUVZVc1EwRkJRMFVzZDBKQlFWZ3NTVUZCZFVNc1EwRkJPVU03UVVGRFNEczdRVUZGVFN4VFFVRlRReXhoUVVGVUxFTkJRWFZDUXl4SlFVRjJRaXhGUVVGeFJEdEJRVU40UkN4VlFVRlJRU3hKUVVGU08wRkJRMGtzVTBGQlN5eFJRVUZNTzBGQlEwa3NZVUZCVHl4RFFVRlFPenRCUVVOS0xGTkJRVXNzVFVGQlREdEJRVU5KTEdGQlFVOHNRMEZCVURzN1FVRkRTanRCUVVOSkxHRkJRVThzUTBGQlVEdEJRVTVTTzBGQlVVZzdPMEZCUlUwc1UwRkJVME1zWTBGQlZDeERRVUYzUWtRc1NVRkJlRUlzUlVGQmMwUTdRVUZEZWtRc1ZVRkJVVUVzU1VGQlVqdEJRVU5KTEZOQlFVc3NUMEZCVER0QlFVTkpMR0ZCUVU4c1EwRkJVRHM3UVVGRFNpeFRRVUZMTEU5QlFVdzdRVUZEU1N4aFFVRlBMRU5CUVZBN08wRkJRMG83UVVGRFNTeGhRVUZQTEVOQlFWQTdRVUZPVWp0QlFWRklPenRCUVVWTkxGTkJRVk5GTEdkQ1FVRlVMRU5CUVRCQ1JpeEpRVUV4UWl4RlFVRjNSRHRCUVVNelJDeFZRVUZSUVN4SlFVRlNPMEZCUTBrc1UwRkJTeXhSUVVGTU8wRkJRMGtzWVVGQlR5eERRVUZRT3p0QlFVTktMRk5CUVVzc1MwRkJURHRCUVVOSkxHRkJRVThzUTBGQlVEczdRVUZEU2p0QlFVTkpMR0ZCUVU4c1EwRkJVRHRCUVU1U08wRkJVVWc3TzBGQlJVMHNVMEZCVTBjc2NVSkJRVlFzUTBGQkswSjBReXhEUVVFdlFpeEZRVUV3UTBVc1EwRkJNVU1zUlVGQk5rUTdRVUZEYUVWR0xFVkJRVUZCTEVOQlFVTXNSMEZCUjNWRExFbEJRVWtzUTBGQlEwTXNSMEZCVEN4RFFVRlRlRU1zUTBGQlZDeERRVUZLTzBGQlEwRkZMRVZCUVVGQkxFTkJRVU1zUjBGQlIzRkRMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUZEVNc1EwRkJWQ3hEUVVGS096dEJRVU5CTEZOQlFVOUJMRU5CUVZBc1JVRkJWVHRCUVVOT0xGRkJRVWwxUXl4RFFVRkRMRWRCUVVkMlF5eERRVUZTTzBGQlEwRkJMRWxCUVVGQkxFTkJRVU1zUjBGQlIwWXNRMEZCUXl4SFFVRkhSU3hEUVVGU08wRkJRMEZHTEVsQlFVRkJMRU5CUVVNc1IwRkJSM2xETEVOQlFVbzdRVUZEU0RzN1FVRkRSQ3hUUVVGUGVrTXNRMEZCVUR0QlFVTklPenRCUVVWTkxGTkJRVk13UXl4dFFrRkJWQ3hEUVVFMlFqRkRMRU5CUVRkQ0xFVkJRWGREUlN4RFFVRjRReXhGUVVFeVJEdEJRVU01UkN4VFFVRlJMRU5CUVVOR0xFTkJRVVFzU1VGQlRTeERRVUZEUlN4RFFVRlNMRWRCUVdFc1EwRkJZaXhIUVVGcFFuRkRMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZWZUVNc1EwRkJReXhIUVVGSFJTeERRVUZNTEVkQlFWVnZReXh4UWtGQmNVSXNRMEZCUTNSRExFTkJRVVFzUlVGQlNVVXNRMEZCU2l4RFFVRjRReXhEUVVGNFFqdEJRVU5JSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMG9aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lISnZiM1E2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUM4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWtZV2R5WldwekwyUmhaM0psTFdRekwybHpjM1ZsY3k4eU1ESmNibHh1SUNBZ0lISmxkSFZ5YmlCeWIyOTBMbWRsZEZOamNtVmxia05VVFNncElTNXBiblpsY25ObEtDa3ViWFZzZEdsd2JIa29aRzl0TG1kbGRGTmpjbVZsYmtOVVRTZ3BJU2xjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRUp2ZFc1a2FXNW5RbTk0S0dSdmJUb2dVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBLU0I3WEc0Z0lDQWdiR1YwSUhOMloxSnZiM1E2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENBOUlHUnZiVnh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkbWRTYjI5MExuQmhjbVZ1ZEVWc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMloxSnZiM1FnUFNCemRtZFNiMjkwTG5CaGNtVnVkRVZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWW1GelpVSnZlQ0E5SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMG9aRzl0TENCemRtZFNiMjkwS1Z4dUlDQWdJR052Ym5OMElISmxaa0pDYjNnZ1BTQmtiMjB1WjJWMFFrSnZlQ2dwWEc0Z0lDQWdZMjl1YzNRZ1kyOXZjbVJwYm1GMFpUb2dXMjUxYldKbGNpd2diblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2wwZ1BTQmJZbUZ6WlVKdmVDNWxJQ3NnY21WbVFrSnZlQzU0TENCaVlYTmxRbTk0TG1ZZ0t5QnlaV1pDUW05NExua3NJSEpsWmtKQ2IzZ3VkMmxrZEdnZ0t5QXhMQ0J5WldaQ1FtOTRMbWhsYVdkb2RDQXJJREZkWEc0Z0lDQWdjbVYwZFhKdUlHTnZiM0prYVc1aGRHVmNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFeGxZV1pPYjJSbGN5aHRZWE4wWlhJNklGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDazZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkRnRkSUh0Y2JpQWdJQ0F2THlCb2RIUndjem92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4eU1qSTRPVE01TVM5b2IzY3RkRzh0WTNKbFlYUmxMV0Z1TFdGeWNtRjVMVzltTFd4bFlXWXRibTlrWlhNdGIyWXRZVzR0YUhSdGJDMWtiMjB0ZFhOcGJtY3RhbUYyWVhOamNtbHdkRnh1WEc0Z0lDQWdkbUZ5SUc1dlpHVnpJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvYldGemRHVnlMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0Z3aUtsd2lLU3dnTUNrN1hHNGdJQ0FnZG1GeUlHeGxZV1pPYjJSbGN5QTlJRzV2WkdWekxtWnBiSFJsY2lobWRXNWpkR2x2YmlBb1pXeGxiU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aV3hsYlM1b1lYTkRhR2xzWkU1dlpHVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObFpTQnBaaUJoYm5rZ2IyWWdkR2hsSUdOb2FXeGtJRzV2WkdWeklHRnlaU0JsYkdWdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmxiR1Z0TG1Ob2FXeGtUbTlrWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXeGxiUzVqYUdsc1pFNXZaR1Z6VzJsZExtNXZaR1ZVZVhCbElEMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdobGNtVWdhWE1nWVNCamFHbHNaQ0JsYkdWdFpXNTBMQ0J6YnlCeVpYUjFjbTRnWm1Gc2MyVWdkRzhnYm05MElHbHVZMngxWkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnZEdocGN5QndZWEpsYm5RZ1pXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUJzWldGbVRtOWtaWE03WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJDWVhObGJHbHVaVWhsYVdkb2RDaGtiMjA2SUZOV1IxUmxlSFJGYkdWdFpXNTBLU0I3WEc0Z0lDQWdZMjl1YzNRZ1kyRnVkbUZ6SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWTJGdWRtRnpKeWxjYmlBZ0lDQmpiMjV6ZENCamRIZ2dQU0JqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2duTW1RbktTRmNiaUFnSUNCamIyNXpkQ0JqYjIxd2RYUmxaRk4wZVd4bElEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGtiMjBwWEc0Z0lDQWdZMjl1YzNRZ1ptOXVkRk5sZEhScGJtZHpJRDBnWTI5dGNIVjBaV1JUZEhsc1pTNW1iMjUwWEc1Y2JpQWdJQ0JqZEhndVptOXVkQ0E5SUdadmJuUlRaWFIwYVc1bmMxeHVJQ0FnSUdOdmJuTjBJSFJsZUhSTlpYUnlhWGdnUFNCamRIZ3ViV1ZoYzNWeVpWUmxlSFFvSjNsd1ptZHE0cGFJSnlsY2JpQWdJQ0J5WlhSMWNtNGdkR1Y0ZEUxbGRISnBlQzVoWTNSMVlXeENiM1Z1WkdsdVowSnZlRVJsYzJObGJuUWdmSHdnTUZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaVzVqYjJSbFRHbHVaVU5oY0NoMGVYQmxQem9nYzNSeWFXNW5JSHdnYm5Wc2JDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM054ZFdGeVpTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RpZFhSMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF4WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01seHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1Z1WTI5a1pVeHBibVZLYjJsdUtIUjVjR1UvT2lCemRISnBibWNnZkNCdWRXeHNLVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYldsMFpYSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURGY2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWW1WMlpXd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUROY2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXlYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlc1amIyUmxWR1Y0ZEVGdVkyaHZjaWgwZVhCbFB6b2djM1J5YVc1bklId2diblZzYkNrNklHNTFiV0psY2lCN1hHNGdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyMXBaR1JzWlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNbHh1SUNBZ0lDQWdJQ0JqWVhObElDZGxibVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERmNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ozSmxZWFJsYzNSRGIyMXRiMjVFYVhacGMyOXlLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0I0SUQwZ1RXRjBhQzVoWW5Nb2VDazdYRzRnSUNBZ2VTQTlJRTFoZEdndVlXSnpLSGtwTzF4dUlDQWdJSGRvYVd4bElDaDVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBJRDBnZVR0Y2JpQWdJQ0FnSUNBZ2VTQTlJSGdnSlNCNU8xeHVJQ0FnSUNBZ0lDQjRJRDBnZER0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIZzdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCc1pXRnpkRU52YlcxdmJrMTFiSFJwY0d4bEtIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLVG9nYm5WdFltVnlJSHRjYmlBZ0lDQnlaWFIxY200Z0tDRjRJSHg4SUNGNUtTQS9JREFnT2lCTllYUm9MbUZpY3lnb2VDQXFJSGtwSUM4Z1ozSmxZWFJsYzNSRGIyMXRiMjVFYVhacGMyOXlLSGdzSUhrcEtUdGNibjBpWFgwPSIsImltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBDaGFydFNwZWMgZnJvbSAnLi9DaGFydFNwZWMuanMnO1xyXG5pbXBvcnQgeyBnbG9iYWxWYXIgfSBmcm9tICcuL3V0aWwvR2xvYmFsVmFyLmpzJztcclxuaW1wb3J0IHsgRWFzaW5nRmFjdG9yeSwgTWFza1R5cGUgfSBmcm9tICdqc21vdmluJztcclxuaW1wb3J0IHsgQ2FuaXNVdGlsIH0gZnJvbSAnLi91dGlsL1V0aWwuanMnO1xyXG5cclxuY2xhc3MgQWN0aW9uU3BlYyBleHRlbmRzIFRpbWluZ1NwZWMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gMDtcclxuICAgICAgICB0aGlzLl9leHRlbmQgPSAnJztcclxuICAgICAgICB0aGlzLl90eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5hcHBlYXI7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25UeXBlID0gJyc7Ly9ub3Qgc2V0IGJ5IHRoZSB1c2VyXHJcbiAgICAgICAgdGhpcy5fZWFzaW5nID0gQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VMaW5lYXI7XHJcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lOy8vbm90IHNldCBieSB0aGUgdXNlclxyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlID0gW107XHJcbiAgICAgICAgdGhpcy5vcmlBY3Rpb25UeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKiBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgLy8gc2V0IFxyXG4gICAgc2V0IHR5cGUodHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5hY3Rpb25UeXBlcykuaW5jbHVkZXModHApKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3R5cGVcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBlYXNpbmcoZXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5lYXNpbmdUeXBlKS5pbmNsdWRlcyhlcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2luZyA9IGVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ3RoZSBcXCdlYXNpbmdcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBlYXNpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vhc2luZztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZHVyYXRpb24oZHJ0bikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZHJ0biA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKGRydG4gLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpICogKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRydG4gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBkcnRuID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGRydG47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBkdXJhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0IGFjdGlvbiB1c2luZyBqc29uIG9ialxyXG4gICAgICogQHBhcmFtIHtKU09OIG9ian0gYWN0aW9uSnNvblxyXG4gICAgICovXHJcbiAgICBpbml0QWN0aW9uKGFjdGlvbkpzb24pIHtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gYWN0aW9uSnNvbi5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBhY3Rpb25Kc29uLnR5cGU7Ly9hY3Rpb24gdHlwZVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVHlwZSA9IGFjdGlvbkpzb24uYW5pbWF0aW9uVHlwZTsvL2FuaW1hdGlvbiB0eXBlXHJcbiAgICAgICAgdGhpcy5tYXNrVHlwZSA9IHR5cGVvZiBhY3Rpb25Kc29uLm1hc2tUeXBlID09PSAndW5kZWZpbmVkJyA/IE1hc2tUeXBlLkFscGhhIDogYWN0aW9uSnNvbi5tYXNrVHlwZTtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGFjdGlvbkpzb24ucmVmZXJlbmNlOy8vdGltaW5nU3BlYyByZWZlcmVuY2VcclxuICAgICAgICB0aGlzLm9mZnNldCA9IGFjdGlvbkpzb24uZGVsYXk7Ly90aW1pbmdTcGVjIGRlbGF5XHJcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGFjdGlvbkpzb24uZHVyYXRpb247Ly9hY3Rpb24gZHVyYXRpb25cclxuICAgICAgICB0aGlzLmVhc2luZyA9IGFjdGlvbkpzb24uZWFzaW5nO1xyXG4gICAgICAgIHRoaXMub3JpQWN0aW9uVHlwZSA9IGFjdGlvbkpzb24ub3JpQWN0aW9uVHlwZTtcclxuXHJcbiAgICAgICAgLy9hdHRyaWJ1dGVzIG9ubHkgdGFrZSBlZmZlY3Qgd2hlbiB0eXBlIGlzIGN1c3RvbVxyXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uSnNvbi5hdHRyaWJ1dGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbkpzb24uYXR0cmlidXRlLmZvckVhY2goKGF0dHIpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBdHRyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyLmF0dHJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IGF0dHIuZnJvbSxcclxuICAgICAgICAgICAgICAgICAgICB0bzogYXR0ci50b1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlLnB1c2godG1wQXR0cik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VEdXJhdGlvbkNvbnN0KGNvbnN0YW50cywgc3RhdHVzID0ge30pIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZHVyYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLmR1cmF0aW9uKSA9PT0gJ3VuZGVmaW5lZCcpIHsvL2NoZWNrIGVycm9yIGluIGFuaW1hdGlvbiB0aW1pbmdcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXQgaXMgYW4gZXF1YXRpb25cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmR1cmF0aW9uLmluZGV4T2YoXCJjYWxjXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24uc3Vic3RyaW5nKDAsIHRoaXMuZHVyYXRpb24ubGVuZ3RoIC0gMSkuc3Vic3RyaW5nKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50cy5mb3JFYWNoKCh2YWx1ZSwga2V5LCBtYXApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbi5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZ20nKSwgJycgKyB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdEdXJhdGlvbiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgbnVtZXJpYyB0eXBlIGNvbnN0YW50LicsIGVyclNwZWM6ICdcImR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrRXF1YXRpb24odGhpcy5kdXJhdGlvbiwgY29uc3RhbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gZXZhbCh0aGlzLmR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgZXF1YXRpb24uJywgZXJyU3BlYzogJ1wiZHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnV3JvbmcgcmVmZXJlbmNlIG9mIHRoZSBjb25zdGFudCB2YXJpYWJsZXMuJywgZXJyU3BlYzogJ1wiZHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7Ly9yZXBsYWNlXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbikgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdEdXJhdGlvbiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgbnVtZXJpYyB0eXBlIGNvbnN0YW50LicsIGVyclNwZWM6ICdcImR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmR1cmF0aW9uICYmIHR5cGVvZiB0aGlzLmR1cmF0aW9uID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbikgPT09ICd1bmRlZmluZWQnKSB7Ly9jaGVjayBlcnJvciBpbiBhbmltYXRpb24gdGltaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdCBpcyBhbiBlcXVhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLmluZGV4T2YoXCJjYWxjXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnN1YnN0cmluZygwLCB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLmxlbmd0aCAtIDEpLnN1YnN0cmluZyg1KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLmZvckVhY2goKHZhbHVlLCBrZXksIG1hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24uaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnbScpLCAnJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnRHVyYXRpb24gbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJtaW5EdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tFcXVhdGlvbih0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLCBjb25zdGFudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID0gZXZhbCh0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBlcXVhdGlvbi4nLCBlcnJTcGVjOiAnXCJtaW5EdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJtaW5EdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uKSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbiA9IGNvbnN0YW50cy5nZXQodGhpcy5kdXJhdGlvbi5taW5EdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ01pbkR1cmF0aW9uIG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wibWluRHVyYXRpb25cIjpcIicgKyB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3NpZ25BY3Rpb25UbXBscyhhY3Rpb25UbXBsSnNvbiwgc3RhdHVzID0ge30pIHtcclxuICAgICAgICAvL2Fzc2lnbiBBbmltYXRpb24gYWN0aW9uIHRlbXBsYXRlc1xyXG4gICAgICAgIHRoaXMuYWN0aW9uVG1wbHMuY2xlYXIoKTtcclxuICAgICAgICBhY3Rpb25UbXBsSnNvbi5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWEubmFtZSB8fCB0eXBlb2YgYS5uYW1lID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgYS5uYW1lID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25UbXBscy5zZXQoYS5uYW1lLCBhKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vcmVwbGFjZSB0aGUgdGVtcGxhdGVzIHJlZmVyZW5jZSBpbnNpZGUgdGhlIHRlbXBsYXRlc1xyXG4gICAgICAgIHRoaXMuYWN0aW9uVG1wbHMuZm9yRWFjaCgoY3VycmVudFRtcGwsIGN1cnJlbnROYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4dGVuZE5hbWUgPSBjdXJyZW50VG1wbC5leHRlbmQ7XHJcbiAgICAgICAgICAgIGlmIChleHRlbmROYW1lICYmIHR5cGVvZiBleHRlbmROYW1lICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXh0ZW5kVG1wbCA9IHRoaXMuYWN0aW9uVG1wbHMuZ2V0KGV4dGVuZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRlbmRUbXBsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGV4dGVuZFRtcGwpLmZvckVhY2goayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrICE9PSAnbmFtZScgJiYgdHlwZW9mIGN1cnJlbnRUbXBsW2tdID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRtcGxba10gPSBleHRlbmRUbXBsW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3VycmVudFRtcGwuZXh0ZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uVG1wbHMuc2V0KGN1cnJlbnROYW1lLCBjdXJyZW50VG1wbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdjYW5ub3QgZmluZCB0aGUgaW5oZXJpdGVkIHRlbXBsYXRlLicsIGVyclNwZWM6ICdcImV4dGVuZFwiOlwiJyArIGV4dGVuZE5hbWUgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZXBsYWNlQWN0aW9uVG1wbHMoYWN0aW9uSnNvbiwgc3RhdHVzID0ge30pIHtcclxuICAgICAgICBpZiAoYWN0aW9uSnNvbi5leHRlbmQgJiYgdHlwZW9mIGFjdGlvbkpzb24uZXh0ZW5kICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zdCBleHRlbmRUbXBsID0gdGhpcy5hY3Rpb25UbXBscy5nZXQoYWN0aW9uSnNvbi5leHRlbmQpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuZFRtcGwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhleHRlbmRUbXBsKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrICE9PSAnbmFtZScgJiYgdHlwZW9mIGFjdGlvbkpzb25ba10gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkpzb25ba10gPSBleHRlbmRUbXBsW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYWN0aW9uSnNvbi5leHRlbmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uSnNvbjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdjYW5ub3QgZmluZCB0aGUgaW5oZXJpdGVkIHRlbXBsYXRlLicsIGVyclNwZWM6ICdcImV4dGVuZFwiOlwiJyArIGFjdGlvbkpzb24uZXh0ZW5kICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbkpzb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbkpzb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0cmFuc2xhdGUgdGVtcGxhdGUgYW5pbWF0aW9ucyB0byAnY3VzdG9tJyB0eXBlIHdpdGggdGhlIHRyYW5zaXRpb24gb24gc29tZSB2aXN1YWwgYXR0cmlidXRlc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdHJhbnNUb1Zpc3VhbEF0dHJBY3Rpb24oYWN0aW9uSnNvbiwgcHJldmlvdXNUcmFucywgY2hhcnRJZHgsIGNoYW5nZWRBdHRycywgbWFya0lkcywgc3RhdHVzID0ge30pIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZ29pbmcgdG8gY2hhbmdlIGFjdGlvbiBpbnRvIHZpc3VhbCBhdHRyaWJ1dGUgY2hhbmdlczogJywgYWN0aW9uSnNvbiwgcHJldmlvdXNUcmFucywgY2hhcnRJZHgsIG1hcmtJZHMpO1xyXG4gICAgICAgIC8vcmVwYWxjZSBhY3Rpb24gdGVtcGxhdGVzIGlmIHRoZXJlIGlzIGFueVxyXG4gICAgICAgIGFjdGlvbkpzb24gPSB0aGlzLnJlcGxhY2VBY3Rpb25UbXBscyhhY3Rpb25Kc29uKTtcclxuXHJcbiAgICAgICAgLy90cmFucyB0byB2aXN1YWwgYXR0cnNcclxuICAgICAgICBsZXQgYWN0aW9uSnNvbkFyciA9IFtdO1xyXG5cclxuICAgICAgICAvL2dlbmVyYXRlIHByZS1yZW5kZXIgYWN0aW9uc1xyXG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgIGxldCBjaGFuZ2VkQXR0ciA9IGNoYW5nZWRBdHRyc1tpXTtcclxuICAgICAgICAvLyAgICAgbGV0IGZyb21BcnIgPSBbXSwgdG9BcnIgPSBbXTtcclxuICAgICAgICAvLyAgICAgZGF0YVRyYW5zLmZvckVhY2goZnVuY3Rpb24gKHRyYW5zQXJyLCBtYXJrSWQpIHtcclxuICAgICAgICAvLyAgICAgICAgIGlmIChjaGFydElkeCArIDEgPCB0cmFuc0Fyci5sZW5ndGgpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoY2hhbmdlZEF0dHIgPT09ICdkJyB8fCBjaGFuZ2VkQXR0ciA9PT0gJ3RleHRDb250ZW50JyB8fCBjaGFuZ2VkQXR0ciA9PT0gJ2ZpbGwnIHx8IGNoYW5nZWRBdHRyID09PSAnc3Ryb2tlJykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBsZXQgdG1wRnJvbUl0ZW0gPSBbbWFya0lkLCAhdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSA/IChjaGFuZ2VkQXR0ciA9PT0gJ2QnID8gJ20wLDAnIDogdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSkgOiB0cmFuc0FycltjaGFydElkeF1bY2hhbmdlZEF0dHJdXSxcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRtcFRvSXRlbSA9IFttYXJrSWQsICF0cmFuc0FycltjaGFydElkeCArIDFdW2NoYW5nZWRBdHRyXSA/IChjaGFuZ2VkQXR0ciA9PT0gJ2QnID8gJ20wLDAnIDogdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0pIDogdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl1dO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZEF0dHIgPT09ICdkJykge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21QYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyksXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdG1wVG9QYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0bXBGcm9tUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICF0cmFuc0FycltjaGFydElkeF1bY2hhbmdlZEF0dHJdID8gJ20wLDAnIDogdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0bXBUb1BhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAhdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0gPyAnbTAsMCcgOiB0cmFuc0FycltjaGFydElkeCArIDFdW2NoYW5nZWRBdHRyXSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRnJvbVBhdGhMZW4gPSB0bXBGcm9tUGF0aC5nZXRUb3RhbExlbmd0aCgpLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFRvUGF0aExlbiA9IHRtcFRvUGF0aC5nZXRUb3RhbExlbmd0aCgpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXBOdW0gPSAzMDAsIGZyb21QYXRoU3RlcExlbiA9IHRtcEZyb21QYXRoTGVuIC8gc3RlcE51bSwgdG9QYXRoU3RlcExlbiA9IHRtcFRvUGF0aExlbiAvIHN0ZXBOdW07XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbURpc2NyaXRQYXRoID0gW10sIHRvRGlzY3JpdFBhdGggPSBbXTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcE51bTsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21QbnQgPSB0bXBGcm9tUGF0aC5nZXRQb2ludEF0TGVuZ3RoKGZyb21QYXRoU3RlcExlbiAqIGkpLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb1BudCA9IHRtcFRvUGF0aC5nZXRQb2ludEF0TGVuZ3RoKHRvUGF0aFN0ZXBMZW4gKiBpKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tRGlzY3JpdFBhdGgucHVzaChbdG1wRnJvbVBudC54LCB0bXBGcm9tUG50LnldKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0b0Rpc2NyaXRQYXRoLnB1c2goW3RtcFRvUG50LngsIHRtcFRvUG50LnldKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRtcEZyb21JdGVtLnB1c2goZnJvbURpc2NyaXRQYXRoKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRtcFRvSXRlbS5wdXNoKHRvRGlzY3JpdFBhdGgpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGZyb21BcnIucHVzaCh0bXBGcm9tSXRlbSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHRvQXJyLnB1c2godG1wVG9JdGVtKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBmcm9tQXJyLnB1c2goW21hcmtJZCwgcGFyc2VGbG9hdCh0cmFuc0FycltjaGFydElkeF1bY2hhbmdlZEF0dHJdKV0pO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB0b0Fyci5wdXNoKFttYXJrSWQsIHBhcnNlRmxvYXQodHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0pXSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgIC8vICAgICBsZXQgcHJlT2JqID0ge1xyXG4gICAgICAgIC8vICAgICAgICAgY2hhcnRJZHg6IGFjdGlvbkpzb24uY2hhcnRJZHgsXHJcbiAgICAgICAgLy8gICAgICAgICByZWZlcmVuY2U6IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQsXHJcbiAgICAgICAgLy8gICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgLy8gICAgICAgICBkdXJhdGlvbjogYWN0aW9uSnNvbi50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zaXRpb24gPyBhY3Rpb25Kc29uLmR1cmF0aW9uIDogMCxcclxuICAgICAgICAvLyAgICAgICAgIHR5cGU6IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrLFxyXG4gICAgICAgIC8vICAgICAgICAgb3JpQWN0aW9uVHlwZTogQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5jdXN0b20sXHJcbiAgICAgICAgLy8gICAgICAgICBhbmltYXRpb25UeXBlOiBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tLFxyXG4gICAgICAgIC8vICAgICAgICAgYXR0cmlidXRlOiBbe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGF0dHJOYW1lOiBjaGFuZ2VkQXR0cixcclxuICAgICAgICAvLyAgICAgICAgICAgICBmcm9tOiBmcm9tQXJyLFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRvOiB0b0FyclxyXG4gICAgICAgIC8vICAgICAgICAgfV1cclxuICAgICAgICAvLyAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgYWN0aW9uSnNvbkFyci5wdXNoKHByZU9iaik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBpZiAoYWN0aW9uSnNvbi50eXBlICE9PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgbGV0IHRtcE9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGNoYXJ0SWR4OiBhY3Rpb25Kc29uLmNoYXJ0SWR4LFxyXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlOiBhY3Rpb25Kc29uLnJlZmVyZW5jZSwvL3RpbWluZ1NwZWMgb2Zmc2V0IHJlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBhY3Rpb25Kc29uLm9mZnNldCxcclxuICAgICAgICAgICAgICAgIGVhc2luZzogYWN0aW9uSnNvbi5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdHlwZW9mIGFjdGlvbkpzb24uZHVyYXRpb24gPT09ICd1bmRlZmluZWQnID8gVGltaW5nU3BlYy5GUkFNRV9SQVRFIDogYWN0aW9uSnNvbi5kdXJhdGlvbixcclxuICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXNrLFxyXG4gICAgICAgICAgICAgICAgb3JpQWN0aW9uVHlwZTogYWN0aW9uSnNvbi50eXBlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIGxldCB0bXBPYmoyO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25Kc29uLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5hcHBlYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmR1cmF0aW9uID0gMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kaXNhcHBlYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmR1cmF0aW9uID0gMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5mYWRlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmZhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5mYWRlT3V0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmZhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5ncm93OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuZ3JvdztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICd0cmltRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kZWdyb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5ncm93O1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3RyaW1FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVCb3R0b206XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZU91dEZyb21Ub3A6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVUb3A6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVPdXRGcm9tQm90dG9tOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlTGVmdDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZU91dEZyb21SaWdodDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZVJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlT3V0RnJvbUxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLmNpcmNsZTpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jaXJjbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5jaXJjbGVPdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY2lyY2xlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2hlZWw6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2hlZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAndHJpbUVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2hlZWxPdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2hlZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAndHJpbUVuZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNsYXRlWDpcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy50cmFuc2xhdGVZOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zbGF0ZVhZOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnNjYWxlWDpcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5zY2FsZVk6XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuc2NhbGVYWTpcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kYXRhQ2hhbmdlOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLm1lcmdlZFRyYW5zaXRpb246XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rlc3QgdHJhbnNpdGlvbjogJywgQ2hhcnRTcGVjLmRhdGFUcmFucywgY2hhcnRJZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmN1c3RvbTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoudHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXJrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZ2VuZXJhdGUgZnJvbSBhbmQgdG8gYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbUFyciA9IFtdLCB0b0FyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5kYXRhVHJhbnMuZm9yRWFjaChmdW5jdGlvbiAodHJhbnNBcnIsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnRJZHggPCB0cmFuc0Fyci5sZW5ndGggJiYgbWFya0lkcy5pbmNsdWRlcyhtYXJrSWQpKSB7Ly9tYXJrIGlzIHNlbGVjdGVkIGluIHRoaXMgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc0Zyb21EID0gdHJhbnNBcnJbY2hhcnRJZHggLSAxXVsnZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNUb0QgPSB0cmFuc0FycltjaGFydElkeF1bJ2QnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxjdWxhdGluZyBkdHJhbnM6ICcsIG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGVkRCA9IENhbmlzVXRpbC5kVHJhbnMoY2hhcnRJZHgsIG1hcmtJZCwgdHJhbnNGcm9tRCwgdHJhbnNUb0QsIHByZXZpb3VzVHJhbnMsIGFjdGlvbkpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtJZCA9PT0gJ21hcmsxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0cmFucyBmcm9tJywgdHJhbnNGcm9tRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RyYW5zIHRvJywgdHJhbnNUb0QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0cmFuc2VkJywgdHJhbnNsYXRlZEQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyci5wdXNoKFttYXJrSWQsIHRyYW5zRnJvbURdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQXJyLnB1c2goW21hcmtJZCwgdHJhbnNsYXRlZERdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zQXJyW2NoYXJ0SWR4IC0gMV1bJ2QnXSA9IHRyYW5zbGF0ZWREO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmRhdGFUcmFucy5zZXQobWFya0lkLCB0cmFuc0Fycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0cmFuc2xhdGVkICcsIENoYXJ0U3BlYy5kYXRhVHJhbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ2QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tQXJyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogdG9BcnJcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuY3VzdG9tOlxyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRtcE9iai5hdHRyaWJ1dGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBpZiAodHlwZW9mIGFjdGlvbkpzb24uYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGF0dHJOYW1lOiBhY3Rpb25Kc29uLmF0dHJpYnV0ZS5hdHRyTmFtZSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGZyb206IGFjdGlvbkpzb24uYXR0cmlidXRlLmZyb20sXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0bzogYWN0aW9uSnNvbi5hdHRyaWJ1dGUudG9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aW9uSnNvbkFyci5wdXNoKHRtcE9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnYWN0aW9uIGpzb24gaW4gYXR0cmlidXRlczogJywgYWN0aW9uSnNvbkFycik7XHJcblxyXG4gICAgICAgIHJldHVybiBhY3Rpb25Kc29uQXJyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGN1bGF0ZSB0aGUgdG90YWwgZHVyYXRpb24gb2YgYWxsIHRoZSBhY3Rpb25zXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFjdGlvblNwZWM+fSBhY3Rpb25BcnIgXHJcbiAgICAgKiBAcGFyYW0ge01hcH0gZHVyYXRpb25BdHRyVmFsdWVzOiBrZXk6IGRhdGEgYXR0ciBuYW1lLCB2YWx1ZSBNYXB7a2V5OiBtYXJrSWQsIHZhbHVlOiBhdHRyIHZhbHVlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2FsQWN0aW9uRHVyYXRpb24oYWN0aW9uQXJyLCBkdXJhdGlvbkF0dHJWYWx1ZXMsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgbGV0IHdob2xlU3RhcnQgPSAwLCB3aG9sZUVuZCA9IC0xMDAwMDA7Ly9zdGFydCB0aW1lIG9mIHRoZSBlYXJsaWVzdCBhY3Rpb24gYW5kIGVuZCB0aW1lIG9mIHRoZSBsYXN0c3QgYWN0aW9uXHJcbiAgICAgICAgbGV0IGxhc3RTdGFydCA9IDAsIGxhc3RFbmQgPSAwO1xyXG4gICAgICAgIGxldCBkdXJhdGlvbldpdGhBdHRyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aW9uQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBTdGFydE1hcCwgdG1wRW5kTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICB0bXBTdGFydE1hcCA9IGFjdGlvbkFycltpXS5jYWxPZmZzZXRUaW1lKGxhc3RTdGFydCwgbGFzdEVuZCwgMCwgZG9tTWFya3MpOy8vY2hhbmdlIHRvIHJldHVuciB2YWx1ZSBvZiBNYXBcclxuXHJcbiAgICAgICAgICAgIC8vaWdub3JlIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIGFuaW1hdGlvbiBmb3IgdGhlIGJvdW5kYXJ5IG9mIHRoZSBtYXNrXHJcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkFycltpIC0gMV0uYW5pbWF0aW9uVHlwZSA9PT0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLm1pc3Rha2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBTdGFydE1hcC5mb3JFYWNoKGZ1bmN0aW9uICh0bXBTdGFydCwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFN0YXJ0TWFwLnNldChtYXJrSWQsIHRtcFN0YXJ0IC0gYWN0aW9uQXJyW2kgLSAxXS5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBtaW5UbXBTdGFydCA9IDEwMDAwMDAsIG1heFRtcEVuZCA9IC0xMDAwMDA7XHJcbiAgICAgICAgICAgIGFjdGlvbkFycltpXS5vZmZzZXRTdGFydCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgdG1wU3RhcnRNYXAuZm9yRWFjaChmdW5jdGlvbiAodG1wU3RhcnQsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEVuZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbkFycltpXS5kdXJhdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbldpdGhBdHRyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBFbmQgPSB0bXBTdGFydDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbkFycltpXS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBFbmQgPSB0bXBTdGFydCArIGFjdGlvbkFycltpXS5kdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRtcEVuZE1hcC5zZXQobWFya0lkLCB0bXBFbmQpO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uQXJyW2ldLm9mZnNldFN0YXJ0LnNldChtYXJrSWQsIHRtcFN0YXJ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodG1wU3RhcnQgPCBtaW5UbXBTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pblRtcFN0YXJ0ID0gdG1wU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wRW5kID4gbWF4VG1wRW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4VG1wRW5kID0gdG1wRW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRtcFN0YXJ0IDwgd2hvbGVTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdob2xlU3RhcnQgPSB0bXBTdGFydDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0bXBFbmQgPiB3aG9sZUVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdob2xlRW5kID0gdG1wRW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgbGFzdFN0YXJ0ID0gbWluVG1wU3RhcnQ7XHJcbiAgICAgICAgICAgIGxhc3RFbmQgPSBtYXhUbXBFbmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdG1wUmVzdWx0RHVyYXRpb24gPSB3aG9sZUVuZCAtIHdob2xlU3RhcnQ7XHJcbiAgICAgICAgbGV0IHJlc3VsdER1cmF0aW9ucyA9IG5ldyBNYXAoKTsvL2tleTogbWFya0lkLCB2YWx1ZTogZHVyYWl0b24gb2YgdGhpcyBtYXJrXHJcbiAgICAgICAgbGV0IG1pblZhbHVlRWFjaEF0dHIgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uV2l0aEF0dHIpIHsvL2FkZCBkdXJhdGlvbiB3aXRoIHRoZSBhdHRyaWJ1dGUgdmFsdWVzXHJcbiAgICAgICAgICAgIC8vZmluZCB0aGUgbWluIHZhbHVlIGZvciBlYWNoIGF0dHJcclxuICAgICAgICAgICAgZHVyYXRpb25BdHRyVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJWYWx1ZSwgYXR0ck5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1pblZhbHVlRWFjaEF0dHIuZ2V0KGF0dHJOYW1lKSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXR0clZhbHVlWzBdIDwgbWluVmFsdWVFYWNoQXR0ci5nZXQoYXR0ck5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlRWFjaEF0dHIuc2V0KGF0dHJOYW1lLCBhdHRyVmFsdWVbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGR1cmF0aW9uQXR0clZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRycywgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wRXh0cmFEdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyVmFsdWUsIGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkF0dHJWYWx1ZSA9IG1pblZhbHVlRWFjaEF0dHIuZ2V0KGF0dHJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRXh0cmFEdXJhdGlvbiArPSBhdHRyVmFsdWVbMV0gKiBhdHRyVmFsdWVbMF0gLyBtaW5BdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0RHVyYXRpb25zLnNldChtYXJrSWQsIHRtcFJlc3VsdER1cmF0aW9uICsgdG1wRXh0cmFEdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHsvL2RpcmVjdGx5IHNldCB0aGUgZHVyYXRpb24gb2YgZWFjaCBtYXJrIHdpdGggdG1wUmVzdWx0RHVyYXRpb25cclxuICAgICAgICAgICAgZHVyYXRpb25BdHRyVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdER1cmF0aW9ucy5zZXQobWFya0lkLCB0bXBSZXN1bHREdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbcmVzdWx0RHVyYXRpb25zLCBtaW5WYWx1ZUVhY2hBdHRyLCBhY3Rpb25BcnJdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc1RvTG90dGllQWN0aW9uKGVhc2luZ05hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKGVhc2luZ05hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZUxpbmVhcjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmxpbmVhcigpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlSW5RdWFkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluUXVhZCgpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlT3V0UXVhZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VPdXRRdWFkKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbk91dFF1YWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nRmFjdG9yeS5lYXNlSW5PdXRRdWFkKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbkN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluQ3ViaWMoKTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZU91dEN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZU91dEN1YmljKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbk91dEN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluT3V0Q3ViaWMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkFjdGlvblNwZWMuYWN0aW9uVG1wbHMgPSBuZXcgTWFwKCk7Ly9yZWNvcmQgYWxsIGFjdGlvbiB0ZW1wbGF0ZXMsIGtleTogdG1wbGF0ZSBuYW1lLCB2YWx1ZTogYWN0aW9uIG9ialxyXG5BY3Rpb25TcGVjLmF0dHJzID0gWydleHRlbmQnLCAndHlwZScsICdvZmZzZXQnLCAncmVmZXJlbmNlJywgJ2Vhc2luZycsICdkdXJhdGlvbiddO1xyXG5cclxuQWN0aW9uU3BlYy5hY3Rpb25UeXBlcyA9IHtcclxuICAgIGZhZGU6ICdmYWRlJyxcclxuICAgIHdpcGVCb3R0b206ICd3aXBlIGJvdHRvbScsXHJcbiAgICB3aXBlVG9wOiAnd2lwZSB0b3AnLFxyXG4gICAgd2lwZUxlZnQ6ICd3aXBlIGxlZnQnLFxyXG4gICAgd2lwZVJpZ2h0OiAnd2lwZSByaWdodCcsXHJcbiAgICB3aGVlbDogJ3doZWVsJyxcclxuICAgIGFwcGVhcjogJ2FwcGVhcicsXHJcbiAgICB0ZXN0OiAndGVzdCcsXHJcbiAgICBkaXNhcHBlYXI6ICdkaXNhcHBlYXInLFxyXG4gICAgY2lyY2xlOiAnY2lyY2xlJyxcclxuICAgIGdyb3c6ICdncm93JyxcclxuICAgIGN1c3RvbTogJ2N1c3RvbScsXHJcbiAgICB0cmFuc2xhdGVYOiAndHJhbnNsYXRlIFgnLFxyXG4gICAgdHJhbnNsYXRlWTogJ3RyYW5zbGF0ZSBZJyxcclxuICAgIHRyYW5zbGF0ZVhZOiAndHJhbnNsYXRlIFhZJyxcclxuICAgIHNjYWxlWDogJ3NjYWxlIFgnLFxyXG4gICAgc2NhbGVZOiAnc2NhbGUgWScsXHJcbiAgICBzY2FsZVhZOiAnc2NhbGUgWFknLFxyXG4gICAgZGF0YUNoYW5nZTogJ2RhdGEgY2hhbmdlJyxcclxuICAgIHRleHQ6ICd0ZXh0JyxcclxuICAgIG1lcmdlZFRyYW5zaXRpb246ICdtZXJnZSB0cmFuc2l0aW9uJyxcclxuICAgIGZhZGVPdXQ6ICdmYWRlIG91dCcsXHJcbiAgICB3aXBlT3V0RnJvbUxlZnQ6ICd3aXBlIG91dCBmcm9tIGxlZnQnLFxyXG4gICAgd2lwZU91dEZyb21Ub3A6ICd3aXBlIG91dCBmcm9tIHRvcCcsXHJcbiAgICB3aXBlT3V0RnJvbVJpZ2h0OiAnd2lwZSBvdXQgZnJvbSByaWdodCcsXHJcbiAgICB3aXBlT3V0RnJvbUJvdHRvbTogJ3dpcGUgb3V0IGZyb20gYm90dG9tJyxcclxuICAgIHdoZWVsT3V0OiAnd2hlZWwgb3V0JyxcclxuICAgIGNpcmNsZU91dDogJ2NpcmNsZSBvdXQnLFxyXG4gICAgZGVncm93OiAnZGVncm93JyxcclxuICAgIHRyYW5zaXRpb246ICdtYWdpYyBtb3ZlJyxcclxuICAgIHpvb206ICd6b29tJyxcclxuICAgIG1hcms6ICdtYXNrJyxcclxuICAgIG1hc2s6ICdtYXJrJ1xyXG59XHJcblxyXG5BY3Rpb25TcGVjLmFjdGlvblRhcmdldHMgPSB7XHJcbiAgICBtYXJrOiAnbWFyaycsXHJcbiAgICBtYXNrOiAnbWFzaydcclxufVxyXG5cclxuQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlID0ge1xyXG4gICAgZmFkZTogJ2ZhZGUnLFxyXG4gICAgd2lwZTogJ3dpcGUnLFxyXG4gICAgbW92ZTogJ21vdmUnLFxyXG4gICAgd2hlZWw6ICd3aGVlbCcsXHJcbiAgICBjaXJjbGU6ICdjaXJjbGUnLFxyXG4gICAgYXBwZWFyOiAnYXBwZWFyJyxcclxuICAgIHRlc3Q6ICd0ZXN0JyxcclxuICAgIGdyb3c6ICdncm93JyxcclxuICAgIGN1c3RvbTogJ2N1c3RvbScsXHJcbiAgICBtaXN0YWtlOiAnbWlzdGFrZSdcclxufVxyXG5cclxuQWN0aW9uU3BlYy5lYXNpbmdUeXBlID0ge1xyXG4gICAgZWFzZUxpbmVhcjogJ2Vhc2VMaW5lYXInLFxyXG4gICAgZWFzZUluUXVhZDogJ2Vhc2VJblF1YWQnLFxyXG4gICAgZWFzZU91dFF1YWQ6ICdlYXNlT3V0UXVhZCcsXHJcbiAgICBlYXNlSW5PdXRRdWFkOiAnZWFzZUluT3V0UXVhZCcsXHJcbiAgICBlYXNlSW5DdWJpYzogJ2Vhc2VJbkN1YmljJyxcclxuICAgIGVhc2VPdXRDdWJpYzogJ2Vhc2VPdXRDdWJpYycsXHJcbiAgICBlYXNlSW5PdXRDdWJpYzogJ2Vhc2VJbk91dEN1YmljJyxcclxuICAgIGVhc2VPdXRCb3VuY2U6ICdlYXNlT3V0Qm91bmNlJ1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25TcGVjOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsImltcG9ydCBDaGFydFNwZWMgZnJvbSAnLi9DaGFydFNwZWMuanMnO1xyXG5pbXBvcnQgRmFjZXRTcGVjIGZyb20gJy4vRmFjZXRTcGVjLmpzJztcclxuaW1wb3J0IFRpbWluZ1NwZWMgZnJvbSAnLi9UaW1pbmdTcGVjLmpzJztcclxuaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiLi9BbmltYXRpb25TcGVjLmpzXCI7XHJcbmltcG9ydCB7IENhbmlzVXRpbCB9IGZyb20gJy4vdXRpbC9VdGlsLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xyXG5pbXBvcnQgR3JvdXBpbmdTcGVjIGZyb20gJy4vR3JvdXBpbmdTcGVjLmpzJztcclxuaW1wb3J0IEFjdGlvblNwZWMgZnJvbSAnLi9BY3Rpb25TcGVjLmpzJztcclxuXHJcbmNsYXNzIENhbmlzU3BlYyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTcGVjID0ge307XHJcbiAgICAgICAgdGhpcy5jYW5pc09iaiA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAvLyB0aGlzLl9hY3Rpb25UbXBscyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmNoYXJ0U3BlY3M7XHJcbiAgICAgICAgdGhpcy5mYWNldDtcclxuICAgICAgICB0aGlzLl9hbmltYXRpb25zO1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aDtcclxuICAgICAgICB0aGlzLmNoYXJ0SGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY29uc3RhbnRzKGNvbkFycikge1xyXG4gICAgICAgIHRoaXMuX2NvbnN0YW50cy5jbGVhcigpO1xyXG4gICAgICAgIGNvbkFyci5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9jb25zdGFudHMuc2V0KGMubmFtZSwgYy52YWx1ZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29uc3RhbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25zdGFudHM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0IGFjdGlvblRtcGxzKGFjdGlvbkFycikge1xyXG4gICAgLy8gICAgIHRoaXMuX2FjdGlvblRtcGxzLmNsZWFyKCk7XHJcbiAgICAvLyAgICAgYWN0aW9uQXJyLmZvckVhY2goYSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmKCFhLm5hbWUgfHwgdHlwZW9mIGEubmFtZSA9PT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgLy8gICAgICAgICAgICAgYS5uYW1lID0gJyc7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgdGhpcy5fYWN0aW9uVG1wbHMuc2V0KGEubmFtZSwgYSk7XHJcbiAgICAvLyAgICAgfSlcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBnZXQgYWN0aW9uVG1wbHMoKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuX2FjdGlvblRtcGxzO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHNldCBhbmltYXRpb25zKGFuaUpzb24pIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnYXNzaWduaW5nIGFuaW1hdGlvbnM6ICcsIHRoaXMuY2hhcnRTcGVjcywgYW5pSnNvbik7XHJcbiAgICAgICAgbGV0IGlkeEFuaUpzb24gPSBhbmlKc29uLm1hcCh0bXBBbmkgPT4ge1xyXG4gICAgICAgICAgICB0bXBBbmkuY2hhcnRJZHggPSAwXHJcbiAgICAgICAgICAgIHJldHVybiB0bXBBbmk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGNoYXJ0TnVtID0gMDsvL251bWJlciBvZiBjaGFydHNcclxuICAgICAgICBpZiAodGhpcy5mYWNldCkge1xyXG4gICAgICAgICAgICBjaGFydE51bSA9IHRoaXMuZmFjZXQudmlld3NbMF0uZnJhbWVzLmxlbmd0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFydE51bSA9IHRoaXMuY2hhcnRTcGVjcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhc3NpZ25pbmcgYW5pbWF0aW9uczogJywgY2hhcnROdW0sIEpTT04uc3RyaW5naWZ5KGFuaUpzb24sIG51bGwsIDIpKTtcclxuICAgICAgICBpZiAoY2hhcnROdW0gPiAxKSB7Ly9tb3JlIHRoYW4gMSBpbnB1dCBjaGFydFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZ29pbmcgdG8gY2xvbmUgYW5pbWF0aW9uczogJywgY2hhcnROdW0sIGFuaUpzb24pO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoYXJ0TnVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBbmlKc29uID0gQ2FuaXNVdGlsLmRlZXBDbG9uZShhbmlKc29uKTtcclxuICAgICAgICAgICAgICAgIHRtcEFuaUpzb25bMF0ucmVmZXJlbmNlID0gVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ7XHJcbiAgICAgICAgICAgICAgICAvL3JlY29yZCBhbmltYXRpb24gaWQgYW5kIHJlcGxhY2UgaXQgaW4gYWxpZ24gcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBbmlJZHggPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkTWFwcGluZyA9IG5ldyBNYXAoKTsgLy9rZXk6IHByZXZpb3VzIGFuaW1hdGlvbiBpZCwgdmFsdWU6IG5ldyBhbmltYXRpb24gaWRcclxuICAgICAgICAgICAgICAgIGxldCB0bXBJZHhBbmlKc29uID0gdG1wQW5pSnNvbi5tYXAodG1wQW5pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBbmkuY2hhcnRJZHggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG1wQW5pLmlkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBuZXdJZCA9ICdfYW5pXycgKyBpICsgJ18nICsgdG1wQW5pSWR4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJZCA9IGkgKyAnLicgKyB0bXBBbmkuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkTWFwcGluZy5zZXQodG1wQW5pLmlkLCBuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFuaS5pZCA9IG5ld0lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcEFuaS5hbGlnbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpZE1hcHBpbmcuZ2V0KHRtcEFuaS5hbGlnbi50YXJnZXQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQW5pLmFsaWduLnRhcmdldCA9IGlkTWFwcGluZy5nZXQodG1wQW5pLmFsaWduLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FsaWduaW5nIHdpdGggYW4gaWQgdGhhdCBkb2VzIG5vdCBleGlzdCEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG1wQW5pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwdXNoaW5nJywgaSwgSlNPTi5zdHJpbmdpZnkodG1wSWR4QW5pSnNvbiwgbnVsbCwgMikpO1xyXG4gICAgICAgICAgICAgICAgaWR4QW5pSnNvbi5wdXNoKC4uLnRtcElkeEFuaUpzb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhc3NpZ25lZCBhbmltYXRpb25zOiAnLCBKU09OLnN0cmluZ2lmeShpZHhBbmlKc29uLCBudWxsLCAyKSk7XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucyA9IGlkeEFuaUpzb247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFuaW1hdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcHJvY2Vzc0NoYXJ0cyhzcGVjLCBkaWZmQ2hhcnQsIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS50aW1lKCdwcmVwZW9jZXNzIGNoYXJ0cycpO1xyXG4gICAgICAgIGxldCBjYW5pc09iaiA9IHNwZWM7XHJcblxyXG4gICAgICAgIC8vIGlmIChkaWZmQ2hhcnQpIHsvL3VzaW5nIGRpZmZlcmVudCBjaGFydCwgcHJvY2Vzc2luZyBjaGFydHNcclxuICAgICAgICB0aGlzLmNoYXJ0U3BlY3MgPSBbXTtcclxuICAgICAgICBbY2FuaXNPYmouY2hhcnRzLCB0aGlzLmhhc0Vycm9yXSA9IENoYXJ0U3BlYy5jaGFydFByZVByb2Nlc3NpbmcoY2FuaXNPYmouY2hhcnRzLCBzdGF0dXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSByZXR1cm4gY2FuaXNPYmo7XHJcbiAgICAgICAgLy9kZWFsIHdpdGggaW5wdXQgY2hhcnRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5pc09iai5jaGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhcnROYW1lID0gdHlwZW9mIGNhbmlzT2JqLmNoYXJ0c1tpXS5pZCA9PT0gJ3VuZGVmaW5lZCcgPyAnY2hhcnQnICsgaSA6IGNhbmlzT2JqLmNoYXJ0c1tpXS5pZDtcclxuICAgICAgICAgICAgY29uc3QgY2hhcnRUeXBlID0gdHlwZW9mIGNhbmlzT2JqLmNoYXJ0c1tpXS50eXBlID09PSAndW5kZWZpbmVkJyA/IENoYXJ0U3BlYy5DSEFSVF9VUkwgOiBjYW5pc09iai5jaGFydHNbaV0udHlwZTtcclxuICAgICAgICAgICAgY29uc3QgdG1wQ2hhcnQgPSBuZXcgQ2hhcnRTcGVjKGNoYXJ0TmFtZSwgY2hhcnRUeXBlLCBjYW5pc09iai5jaGFydHNbaV0uc291cmNlKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFydFNwZWNzLnB1c2godG1wQ2hhcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2luaXQgZmFjZXRcclxuICAgICAgICBpZiAoY2FuaXNPYmouZmFjZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5mYWNldCA9IG5ldyBGYWNldFNwZWMoY2FuaXNPYmouZmFjZXQudHlwZSwgY2FuaXNPYmouZmFjZXQudmlld3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gQ2hhcnRTcGVjLmxvYWRDaGFydHModGhpcy5jaGFydFNwZWNzLCB0aGlzLmZhY2V0LCBzdGF0dXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSByZXR1cm4gY2FuaXNPYmo7XHJcblxyXG4gICAgICAgIC8vc2V0IHZpZXdwb3J0IGZvciBqc21vdmluXHJcbiAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uc2V0Vmlld3BvcnQoQ2hhcnRTcGVjLnZpZXdwb3J0LmNoYXJ0V2lkdGgsIENoYXJ0U3BlYy52aWV3cG9ydC5jaGFydEhlaWdodCk7XHJcblxyXG4gICAgICAgIENoYXJ0U3BlYy5yZW1vdmVUcmFuc0FuZE1lcmdlKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykuYXBwZW5kQ2hpbGQoQ2hhcnRTcGVjLnN2Z0NoYXJ0KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uY2xlYXJMYXllcnMoKTtcclxuICAgICAgICBDaGFydFNwZWMuYWRkTG90dGllTWFya0xheWVycyhDaGFydFNwZWMuc3ZnQ2hhcnQpO1xyXG5cclxuICAgICAgICAvL3BhcnNlIHRoZSBhbmltYXRpb25zLCBzcGxpdCB0aGUgYW5pbWF0aW9uIGpzb24gYWNjb3JkaW5nIHRvIHRoZSBtYXJrIHNldHMgKGVudGVyLCB1cGRhdGUsIGV4aXQpXHJcbiAgICAgICAgLy8xLiBzcGxpdCB0aGUgYW5pdW5pdCBhY2NvcmRpbmcgdG8gKGVudGVyLCB1cGRhdGUsIGV4aXQpXHJcbiAgICAgICAgLy8yLiBkdXBsaWNhdGUgYW5pdW5pdHMgYWNjb3JkaW5nIHRvIG51bWJlciBvZiBjaGFydHMgYW5kIHRoZSBtYXJrIHNldHMgYmV0d2VlbiBjaGFydHNcclxuICAgICAgICAvL1RPRE86IG1hcmtzIHNob3VsZCBiZSBzZWxlY3RlZCBhY2NvcmRpbmcgdG8gdGhlIG1hcmsgc2V0cyAoZW50ZXIsIHVwZGF0ZSwgZXhpdClcclxuICAgICAgICBsZXQgdG1wQW5pSnNvbnMgPSBbXVxyXG4gICAgICAgIGNhbmlzT2JqLmFuaW1hdGlvbnMuZm9yRWFjaCh0bXBBbmlKc29uID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0bXBBbmlKc29uLmVsZW1lbnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpSWQgPSB0eXBlb2YgdG1wQW5pSnNvbi5pZCA9PT0gJ3VuZGVmaW5lZCcgPyB0bXBBbmlKc29uLnNlbGVjdG9yIDogdG1wQW5pSnNvbi5pZDtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IG1hcmtTZXRUeXBlcyA9IFsnZW50ZXInLCAndXBkYXRlJywgJ2V4aXQnXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtTZXRUeXBlcyA9IE9iamVjdC5rZXlzKHRtcEFuaUpzb24uZWxlbWVudHMpO1xyXG4gICAgICAgICAgICAgICAgbWFya1NldFR5cGVzLmZvckVhY2gobXN0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRtcEFuaUpzb24uZWxlbWVudHNbbXN0XSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVudGVyQW5pSnNvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvcmlJZC5jb25jYXQoJy4nLCBtc3QsICcuZWZmZWN0c1snLCAwLCAnXScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3NldFR5cGU6IG1zdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiB0bXBBbmlKc29uLnNlbGVjdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModG1wQW5pSnNvbi5lbGVtZW50c1ttc3RdKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJBbmlKc29uW2tdID0gdG1wQW5pSnNvbi5lbGVtZW50c1ttc3RdW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBBbmlKc29ucy5wdXNoKGVudGVyQW5pSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRtcEFuaUpzb25zLnB1c2godG1wQW5pSnNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIGxldCB0bXBBbmlKc29uc0NvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRtcEFuaUpzb25zKSk7XHJcbiAgICAgICAgLy8gdG1wQW5pSnNvbnNDb3B5WzBdLnJlZmVyZW5jZSA9IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzRW5kO1xyXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKCdwYXJzZWQgYW5pdW5pdHM6ICcsIHRtcEFuaUpzb25zLCBDaGFydFNwZWMubWFya1NldHNEdXJpbmdUcmFucywgdG1wQW5pSnNvbnNDb3B5KTtcclxuICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IENoYXJ0U3BlYy5jaGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG1wQW5pSnNvbnNDb3B5Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgLy8gICAgICAgICB0bXBBbmlKc29uc0NvcHlbal0uY2hhcnRJZHggPSBpICsgMTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0bXBBbmlKc29uc0NvcHkpKTtcclxuICAgICAgICAvLyAgICAgdG1wQW5pSnNvbnMgPSBbLi4udG1wQW5pSnNvbnMsIC4uLnRtcEFuaUpzb25zQ29weV07XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwYXJzZWQgYW5pdW5pdHM6ICcsIHRtcEFuaUpzb25zKTtcclxuICAgICAgICBjYW5pc09iai5hbmltYXRpb25zID0gdG1wQW5pSnNvbnM7XHJcbiAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKCdwcmVwZW9jZXNzIGNoYXJ0cycpO1xyXG4gICAgICAgIHJldHVybiBjYW5pc09iajtcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlU3BlYyhzcGVjKSB7XHJcbiAgICAgICAgbGV0IGRpZmZDaGFydCA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb21wYXJpbmc6ICcsIHRoaXMuY3VycmVudFNwZWMuY2hhcnRzLCBzcGVjLmNoYXJzdCk7XHJcbiAgICAgICAgaWYgKCh0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5jb25zdGFudHMgIT09ICd1bmRlZmluZWQnICYmIEpTT04uc3RyaW5naWZ5KHNwZWMuY29uc3RhbnRzKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5jdXJyZW50U3BlYy5jb25zdGFudHMpKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHRoaXMuY3VycmVudFNwZWMuY2hhcnRzICE9PSAndW5kZWZpbmVkJyAmJiBKU09OLnN0cmluZ2lmeShzcGVjLmNoYXJ0cykgIT09IEpTT04uc3RyaW5naWZ5KHRoaXMuY3VycmVudFNwZWMuY2hhcnRzKSkgfHxcclxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuY3VycmVudFNwZWMuY2hhcnRzID09PSAndW5kZWZpbmVkJyB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHNwZWMuZmFjZXQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmZhY2V0ICE9PSAndW5kZWZpbmVkJyAmJiBKU09OLnN0cmluZ2lmeShzcGVjLmZhY2V0KSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5jdXJyZW50U3BlYy5mYWNldCkpIHx8XHJcbiAgICAgICAgICAgICgodHlwZW9mIHRoaXMuY3VycmVudFNwZWMuZmFjZXQgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBzcGVjLmZhY2V0ID09PSAndW5kZWZpbmVkJykgJiYgISh0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5mYWNldCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHNwZWMuZmFjZXQgPT09ICd1bmRlZmluZWQnKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgZGlmZkNoYXJ0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpZmZDaGFydCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hhcnRzIGFyZSBkaWZmZXJlbnQnKTtcclxuICAgICAgICAgICAgQW5pbWF0aW9uLmRvbU1hcmtzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrcyA9IFtdO1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuZGF0YU1hcmtEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICBDaGFydFNwZWMubWFya3NXaXRoU2FtZURhdHVtLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIENoYXJ0U3BlYy5ub25EYXRhTWFya0RhdHVtLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIENoYXJ0U3BlYy5jaGFydFVuZGVyc3RhbmRpbmcgPSB7IG1TaGFwZTogWydzaGFwZSddIH07XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbi5tYXJrQ2xhc3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgQWN0aW9uU3BlYy5hY3Rpb25UbXBscy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRTcGVjID0gc3BlYztcclxuICAgICAgICByZXR1cm4gZGlmZkNoYXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQXR0cnMobGVnYWxBdHRycywgb2JqLCBzdGF0dXMpIHtcclxuICAgICAgICBjb25zdCBhdHRycyA9IE9iamVjdC5rZXlzKG9iaik7XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSBhdHRycy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKCFsZWdhbEF0dHJzLmluY2x1ZGVzKGF0dHJzW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wVmFsdWUgPSBvYmpbYXR0cnNbal1dO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVyclNwZWNTdHIgPSAnXCInICsgYXR0cnNbal0gKyAnXCI6JztcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRtcFZhbHVlKSkpIHsvL3RoZSB2YWx1ZSBpcyBhIG51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgIGVyclNwZWNTdHIgKz0gJycgKyB0bXBWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRtcFZhbHVlID09PSAnb2JqZWN0Jykgey8vdGhlIHZhbHVlIGlzIGFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyU3BlY1N0ciArPSBKU09OLnN0cmluZ2lmeSh0bXBWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Ugey8vdGhlIHZhbHVlIGlzIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGVyclNwZWNTdHIgKz0gJ1wiJyArIHRtcFZhbHVlICsgJ1wiJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdJbGxlZ2FsIGF0dHJpYnV0ZSBuYW1lIFwiJyArIGF0dHJzW2pdICsgJ1wiLicsIGVyclNwZWM6IGVyclNwZWNTdHIucmVwbGFjZSgvXFxzL2csICcnKSB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2sgdGhlIHZhbGlkYXR5IG9mIHRoZSBzcGVjXHJcbiAgICAgKiBAcGFyYW0geyp9IHNwZWMgXHJcbiAgICAgKi9cclxuICAgIGNoZWNrU3BlYyhzcGVjLCBzdGF0dXMpIHtcclxuICAgICAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAvL2NoZWNrIGNoYXJ0c1xyXG4gICAgICAgIGlmIChzcGVjLmNoYXJ0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnVGhlcmUgYXJlIG5vIGlucHV0IGNoYXJ0cy4nLCBlcnJTcGVjOiAnXCJjaGFydHNcIjpbXScgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaGVjayBjaGFydCBzb3VyY2VcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3BlYy5jaGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhDaGFydFNwZWMuYXR0cnMsIHNwZWMuY2hhcnRzW2ldLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNwZWMuY2hhcnRzW2ldLnNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGNoYXJ0IHNvdXJjZSBmb3VuZCBpbiBjaGFydCBpdGVtLicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuY2hhcnRzW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZVN0ciA9IHNwZWMuY2hhcnRzW2ldLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VTdHIuaW5kZXhPZignLmRzdmcnKSA8IDAgJiYgIShzcGVjLmNoYXJ0c1tpXS5zdGFydCAmJiBzcGVjLmNoYXJ0c1tpXS5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyByYW5nZSBzcGVjaWZpY2F0aW9uIGZvdW5kIGZvciBpbnB1dCBjaGFydCBpbmRleCAuJywgZXJyU3BlYzogSlNPTi5zdHJpbmdpZnkoc3BlYy5jaGFydHNbaV0pLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NoZWNrIGFuaW1hdGlvblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzcGVjLmFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhBbmltYXRpb24uYXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXSwgc3RhdHVzKTtcclxuICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyBzZWxlY3RvciBmb3VuZCBpbiBhbmltYXRpb24gdW5pdC4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShzcGVjLmFuaW1hdGlvbnNbaV0pLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0cykge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGVmZmVjdHMgZm91bmQgaW4gYW5pbWF0aW9uIHVuaXQuJywgZXJyU3BlYzogSlNPTi5zdHJpbmdpZnkoc3BlYy5hbmltYXRpb25zW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoVGltaW5nU3BlYy50aW1pbmdSZWYpLmluY2x1ZGVzKFRpbWluZ1NwZWMudHJhbnNSZWYoc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIGhhcyB0byBiZSBvbmUgb2Y6IHN0YXJ0IHdpdGggcHJldmlvdXMgb3Igc3RhcnQgYWZ0ZXIgcHJldmlvdXMuJywgZXJyU3BlYzogJ1wicmVmZXJlbmNlXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAvL2NoZWNrIGFsaWduXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAoc3BlYy5hbmltYXRpb25zW2ldLmFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgaWYgKCFPYmplY3Qua2V5cyhBbmltYXRpb24uYWxpZ25UYXJnZXQpLmluY2x1ZGVzKEFuaW1hdGlvbi50cmFuc0FsaWduKHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbikpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiBhbGlnbiBoYXMgdG8gYmUgb25lIG9mOiBlbGVtZW50IG9yIG9iamVjdC4nLCBlcnJTcGVjOiAnXCJhbGlnblwiOlwiJyArIHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGFsaWduXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLmFsaWduICYmIHR5cGVvZiBzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoQW5pbWF0aW9uLmFsaWduQXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXS5hbGlnbiwgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgYWxpZ24gdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLmFsaWduLnR5cGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoQW5pbWF0aW9uLmFsaWduVGFyZ2V0KS5pbmNsdWRlcyhBbmltYXRpb24udHJhbnNBbGlnbihzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24udHlwZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnVGhlIHZhbHVlIG9mIGFsaWduIGhhcyB0byBiZSBvbmUgb2Y6IGVsZW1lbnQgb3Igb2JqZWN0LicsIGVyclNwZWM6ICdcInR5cGVcIjpcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uYWxpZ24udHlwZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIG9mZnNldCBvYmplY3RcclxuICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0ub2Zmc2V0ICYmIHR5cGVvZiBzcGVjLmFuaW1hdGlvbnNbaV0ub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLm9mZnNldCwgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBncm91cGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5ncm91cGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0dyb3VwaW5nU3BlYyhzcGVjLmFuaW1hdGlvbnNbaV0uZ3JvdXBpbmcsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgZWZmZWN0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0cy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciB3cm9uZyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoQWN0aW9uU3BlYy5hdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGVmZmVjdCB0eXBlIGZvdW5kIGluIGVmZmVjdCBpdGVtLicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC52YWx1ZXMoQWN0aW9uU3BlYy5hY3Rpb25UeXBlcykuaW5jbHVkZXMoc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0udHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnSW52YWxpZCBlZmZlY3QgdHlwZSBcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlICsgJ1wiLicsIGVyclNwZWM6ICdcInR5cGVcIjpcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0ub2Zmc2V0ICYmIHR5cGVvZiBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0ub2Zmc2V0LCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5kdXJhdGlvbiAmJiB0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZHVyYXRpb24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZHVyYXRpb24sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmVhc2luZyAmJiAhT2JqZWN0LnZhbHVlcyhBY3Rpb25TcGVjLmVhc2luZ1R5cGUpLmluY2x1ZGVzKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmVhc2luZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnSW52YWxpZCBlYXNpbmcgdHlwZSBcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5lYXNpbmcgKyAnXCIuJywgZXJyU3BlYzogJ1wiZWFzaW5nXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZWFzaW5nLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzRXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tHcm91cGluZ1NwZWMoZ3JvdXBpbmdTcGVjLCBzdGF0dXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyU3RyID0gdHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ251bWJlcicgPyAnXCJncm91cGluZ1wiOicgKyBncm91cGluZ1NwZWMgOiAnXCJncm91cGluZ1wiOlwiJyArIGdyb3VwaW5nU3BlYy5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJztcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgZ3JvdXBpbmcgdmFsdWUuJywgZXJyU3BlYzogZXJyU3RyIH07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgIGxldCBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhHcm91cGluZ1NwZWMuYXR0cnMsIGdyb3VwaW5nU3BlYywgc3RhdHVzKTtcclxuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ3JvdXBpbmdTcGVjLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyhUaW1pbmdTcGVjLnRyYW5zUmVmKGdyb3VwaW5nU3BlYy5yZWZlcmVuY2UpKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIGhhcyB0byBiZSBvbmUgb2Y6IHN0YXJ0IHdpdGggcHJldmlvdXMgb3Igc3RhcnQgYWZ0ZXIgcHJldmlvdXMuJywgZXJyU3BlYzogJ1wicmVmZXJlbmNlXCI6XCInICsgZ3JvdXBpbmdTcGVjLnJlZmVyZW5jZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdyb3VwaW5nU3BlYy5zb3J0ICYmIHR5cGVvZiBncm91cGluZ1NwZWMuc29ydCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgbGV0IHNvcnRIYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhHcm91cGluZ1NwZWMuc29ydEF0dHJzLCBncm91cGluZ1NwZWMuc29ydCwgc3RhdHVzKTtcclxuICAgICAgICAgICAgaWYgKHNvcnRIYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBncm91cGluZ1NwZWMuc29ydCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgc29ydCB2YWx1ZS4nLCBlcnJTcGVjOiAnXCJzb3J0XCI6JyArIGdyb3VwaW5nU3BlYy5zb3J0IH07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ3JvdXBpbmdTcGVjLmdyb3VwaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrR3JvdXBpbmdTcGVjKGdyb3VwaW5nU3BlYy5ncm91cGluZywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGluaXQoc3BlYywgc3RhdHVzID0ge30pIHtcclxuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoc3RhdHVzKSAhPT0gJ3t9Jykge1xyXG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaGFzRXJyb3IgPSB0aGlzLmNoZWNrU3BlYyhzcGVjLCBzdGF0dXMpOy8vVE9ETzogYWRkIGNoZWNrIHN1bGVzIGZvciB0aGUgbmV3IHNwZWNcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgQW5pbWF0aW9uLnJlc2V0QWxsKCk7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgaWYgKHNwZWMuY2hhcnRzLmxlbmd0aCA9PT0gMCkgey8vbm8gY2hhcnRzIHNwZWNpZmllZFxyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmRvbU1hcmtzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5kYXRhTWFya0RhdHVtLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMubm9uRGF0YU1hcmtEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0VW5kZXJzdGFuZGluZyA9IHsgbVNoYXBlOiBbJ3NoYXBlJ10gfTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24ubWFya0NsYXNzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLmFjdGlvblRtcGxzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vc2V0IGZyYW1lcmF0ZSBmb3IganNtb3ZpblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uc2V0RnJhbWVSYXRlKFRpbWluZ1NwZWMuRlJBTUVfUkFURSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZkNoYXJ0ID0gdGhpcy5jb21wYXJlU3BlYyhzcGVjKTtcclxuICAgICAgICAgICAgICAgIGxldCBjYW5pc09iaiA9IGF3YWl0IHRoaXMucHJlcHJvY2Vzc0NoYXJ0cyhzcGVjLCBkaWZmQ2hhcnQsIHN0YXR1cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pbml0IHVzZXIgZGVmaW5lZCB2YXJpYWJsZXNcclxuICAgICAgICAgICAgICAgIGlmIChjYW5pc09iai5jb25zdGFudHMgJiYgdHlwZW9mIGNhbmlzT2JqLmNvbnN0YW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0YW50cyA9IGNhbmlzT2JqLmNvbnN0YW50cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjYW5pc09iai5lZmZlY3RUbXBscyAmJiB0eXBlb2YgY2FuaXNPYmouZWZmZWN0VG1wbHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQWN0aW9uU3BlYy5hc3NpZ25BY3Rpb25UbXBscyhjYW5pc09iai5lZmZlY3RUbXBscywgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2RlYWwgd2l0aCBhbmltYXRpb25zXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBjYW5pc09iai5hbmltYXRpb25zO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FuaW1hdGlvbnMgaW4gY2FuaXNPYmonLCB0aGlzLmFuaW1hdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5hbmltYXRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsYXN0QW5pbWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGFuaUlkeCA9IDA7IGFuaUlkeCA8IHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg7IGFuaUlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb25Kc29uID0gdGhpcy5hbmltYXRpb25zW2FuaUlkeF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLnRpbWUoJ3VzaW5nIGRvbScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VzZSB0aGUgc2VsZWN0b3IgaW4gYW5pbWF0aW9uIHRvIHNlbGVjdCBtYXJrcyBhbmQgcmVjb3JkIGRvbSBhdHRyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLnRpbWUoJ3F1ZXJ5IGRvbScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG1wQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ29udGFpbmVyLmlubmVySFRNTCA9IENoYXJ0U3BlYy5jaGFydHNbYW5pbWF0aW9uSnNvbi5jaGFydElkeF0uc3ZnQ29udGVudC5vdXRlckhUTUw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYW5pbWF0aW9uIGpzb24gZ29pbmcgdG8gcHJvY2VzczogJywgYW5pbWF0aW9uSnNvbiwgQ2hhcnRTcGVjLm1hcmtTZXRzRHVyaW5nVHJhbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxsVGFyZ2V0TWFya3MgPSB0bXBDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChhbmltYXRpb25Kc29uLnNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50aXJlTWFya1NldCA9IENoYXJ0U3BlYy5tYXJrU2V0c0R1cmluZ1RyYW5zW2FuaW1hdGlvbkpzb24uY2hhcnRJZHhdW2FuaW1hdGlvbkpzb24ubWFya3NldFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0lkcyA9IFtdLCBtYXJrcyA9IFtdLCBuZXdTZWxlY3RvciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsVGFyZ2V0TWFya3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGFsbFRhcmdldE1hcmtzLCAobSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1JZCA9IG0uZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW50aXJlTWFya1NldCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudGlyZU1hcmtTZXQuaW5jbHVkZXMobUlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2VsZWN0b3IgPSBuZXdTZWxlY3Rvci5jb25jYXQoJyMnLCBtSWQsICcsJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtJZHMucHVzaChtSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3MucHVzaChtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Ugey8vbmVlZCB0byBkZWxldGUgdGhpcyBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG1hcmtJZHMucHVzaChtSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBtYXJrcy5wdXNoKG0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JlcGxhY2Ugc2VsZWN0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2VsZWN0b3IgPSBuZXdTZWxlY3Rvci5zdWJzdHJpbmcoMCwgbmV3U2VsZWN0b3IubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGUgc2VsZWN0b3IgaXM6ICcsIG5ld1NlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zW2FuaUlkeF0uc2VsZWN0b3IgPSBuZXdTZWxlY3RvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ21hcmtzIGluIHRoaXMgYW5pdW5pdDogJywgbWFya0lkcywgbmV3U2VsZWN0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFsbE1hcmtzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCh0bXBDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLm1hcmsnKSwgZnVuY3Rpb24gKHRtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBBbGxNYXJrcy5wdXNoKHRtLmdldEF0dHJpYnV0ZSgnaWQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbUNsYXNzID0gdG0uZ2V0QXR0cmlidXRlKCdjbGFzcycpLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya1R5cGUgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtQ2xhc3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobUNsYXNzW2ldID09PSAnbWFyaycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya1R5cGUgPSBtQ2xhc3NbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5tYXJrQ2xhc3Muc2V0KHRtLmdldEF0dHJpYnV0ZSgnaWQnKSwgbWFya1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya3MgPSBbLi4ubmV3IFNldChbLi4uQW5pbWF0aW9uLmFsbE1hcmtzLCAuLi50bXBBbGxNYXJrc10pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbmltYXRpb25Kc29uLnNlbGVjdG9yID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdUaGUgc2VsZWN0b3IgbmVlZCB0byBiZSBhIENTUyBzZWxlY3RvcicsIGVyclNwZWM6ICdcInNlbGVjdG9yXCI6JyArIGFuaW1hdGlvbkpzb24uc2VsZWN0b3IgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSBzZWxlY3RvciAnICsgYW5pbWF0aW9uSnNvbi5zZWxlY3RvciArICcgc2VsZWN0cyBubyBtYXJrcycsIGVyclNwZWM6ICdcInNlbGVjdG9yXCI6XCInICsgYW5pbWF0aW9uSnNvbi5zZWxlY3Rvci5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKCdxdWVyeSBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uSnNvbi5zZWxlY3RvciA9IHRoaXMuc29ydFNlbGVjdG9yKGFuaW1hdGlvbkpzb24uc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVzZWRDaGFuZ2VkQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkQ2hhbmdlZEF0dHJzLnB1c2goQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgYW5pbWF0aW9uIGlzIGV4aXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiByZW1vdmUgbm9uIGV4aXN0ZWQgYW5pbWF0aW9ucyBpbiB0aGUgY3VycmVudCBzcGVjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW5pS2V5ID0gYW5pbWF0aW9uSnNvbi5jaGFydElkeCArICdfJyArIGFuaW1hdGlvbkpzb24uc2VsZWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmlLZXkgPT09ICcwXy5tYXJrJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pS2V5ID0gYDBfIyR7QW5pbWF0aW9uLmFsbE1hcmtzLmpvaW4oJywgIycpfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uYW5pbWF0aW9ucy5nZXQoYW5pS2V5KSAhPT0gJ3VuZGVmaW5lZCcpIHsvL2FscmVhZHkgaGF2ZSB0aGlzIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gQW5pbWF0aW9uLmFuaW1hdGlvbnMuZ2V0KGFuaUtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udHJhbnNsYXRlKGFuaW1hdGlvbkpzb24sIHVzZWRDaGFuZ2VkQXR0cnMsIHRydWUsIG1hcmtJZHMsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udHJhbnNsYXRlKGFuaW1hdGlvbkpzb24sIHVzZWRDaGFuZ2VkQXR0cnMsIGZhbHNlLCBtYXJrSWRzLCBzdGF0dXMpOy8vdHJhbnNsYXRlIGZyb20ganNvbiBvYmogdG8gQW5pbWF0aW9uIG9ialxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFuaW1hdGlvbnMuc2V0KGFuaUtleSwgYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2F1dG8gZmlsbCBhbGlnbiBwcm9wZXJ0eSBmb3IgYW5pbWF0aW9ucyBleGNlcHQgdGhlIGZpcnN0IG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFuaW1hdGlvbi5hbGlnbiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxhc3RBbmltYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uYWxpZ24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBsYXN0QW5pbWF0aW9uLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFuaW1hdGlvbi5hbGlnblRhcmdldC53aXRoT2JqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXBsYWNlIGNvbnRhbnQgdmFyaWFibGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0YW50cy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlcGxhY2VDb25zdGFudHModGhpcy5jb25zdGFudHMsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUudGltZUVuZCgndXNpbmcgZG9tJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxldCBtYXJrSWRzID0gW107Ly9yZWNvcmQgYWxsIGlkcyBvZiBzZWxlY3RlZCBtYXJrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWR4Rm9yRWFjaENscyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChtYXJrcywgZnVuY3Rpb24gKG1hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmsnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0lkID0gbWFyay5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrQ2xzID0gbWFyay5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaWR4Rm9yRWFjaENscy5nZXQobWFya0NscykgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHhGb3JFYWNoQ2xzLnNldChtYXJrQ2xzLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeEZvckVhY2hDbHMuc2V0KG1hcmtDbHMsIGlkeEZvckVhY2hDbHMuZ2V0KG1hcmtDbHMpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFya0lkcy5wdXNoKG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wcm9jZXNzIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrLnRhZ05hbWUgPT09ICdwYXRoJykgey8vY29uc2lkZXIgdGhlIGxpbmthZ2Ugc2hhcGUgbGF0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0pTT04gPSBDYW5pc1V0aWwudG9KU09OKG1hcmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZEF0dHJzID0gQ2FuaXNVdGlsLmRpc2NyZXRpemVQYXRoKG1hcmtKU09OKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkQXR0cnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkQXR0cnMudHlwZSA9PT0gJ2xpbmVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFuc2Zvcm1lZEF0dHJzLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyWyd4JyArICgxICsgMiAqIGkpXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVtpXVswXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyWyd5JyArICgxICsgMiAqIGkpXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVtpXVswXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyWyd4JyArICgyICsgMiAqIGkpXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVtpXVsxXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyWyd5JyArICgyICsgMiAqIGkpXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVtpXVsxXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZkF0dHJzRGF0YUtleXMgPSBPYmplY3Qua2V5cyh0cmFuc2Zvcm1lZEF0dHJzLmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGZBdHRyc0RhdGFLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRBdHRyID0gdGZBdHRyc0RhdGFLZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0QXR0ciA9PT0gJ3JhZGl1cycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkQXR0cnMuZGF0YVt0QXR0cl0ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0ci5pbm5lclJhZGl1cyA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVt0QXR0cl1bMF0ucnggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0ci5vdXR0ZXJSYWRpdXMgPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdWzFdLnJ4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIuaW5uZXJSYWRpdXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0ci5vdXR0ZXJSYWRpdXMgPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdWzBdLnJ4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHJbdEF0dHJdID0gdHJhbnNmb3JtZWRBdHRycy5kYXRhW3RBdHRyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayA9IENhbmlzVXRpbC50b0RPTShtYXJrSlNPTik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBEb21BdHRyT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ckFyciA9IFsuLi5tYXJrLmF0dHJpYnV0ZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJOYW1lID0gYXR0ckFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqW2F0dHJOYW1lLm5hbWVdID0gbWFyay5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYldpZHRoJ10gPSBtYXJrRG9tLmdldEJCb3goKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2JiSGVpZ2h0J10gPSBtYXJrRG9tLmdldEJCb3goKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYlgnXSA9IG1hcmtEb20uZ2V0QkJveCgpLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYlknXSA9IG1hcmtEb20uZ2V0QkJveCgpLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydjb250ZW50J10gPSBtYXJrLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnaWQnXSA9IG1hcmtJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhRGF0dW1BdHRyVmFsdWUgPSBKU09OLnBhcnNlKG1hcmsuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdHVtJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YURhdHVtQXR0clZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZSA9IGRhdGFEYXR1bUF0dHJWYWx1ZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZS5jbHNJZHggPSBgYSR7aWR4Rm9yRWFjaENscy5nZXQobWFya0Nscyl9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0uZ2V0KG1hcmtJZCkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0uZ2V0KG1hcmtJZCkuY2xzSWR4ID0gYGEke2lkeEZvckVhY2hDbHMuZ2V0KG1hcmtDbHMpfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydkYXRhLWRhdHVtJ10gPSBkYXRhRGF0dW1BdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYW5pc1NwZWMubWFya0RhdGEuc2V0KG1hcmtJZCwgZGF0YURhdHVtQXR0clZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ3RhZ05hbWUnXSA9IG1hcmsudGFnTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrLnRhZ05hbWUgPT09ICdwYXRoJyB8fCBtYXJrLnRhZ05hbWUgPT09ICdsaW5lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ3N0cm9rZS1kYXNoYXJyYXknXSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcmtJZCkuZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydzdHJva2UtZGFzaG9mZnNldCddID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFya0lkKS5nZXRUb3RhbExlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrLnRhZ05hbWUgPT09ICdwYXRoJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGlzY0QgPSBDYW5pc1V0aWwuZGlzY3JldGl6ZUQobWFyay5nZXRBdHRyaWJ1dGUoJ2QnKSwgJyMwMDAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkaXNjRCAhPT0gJ3VuZGVmaW5lZCcgJiYgZGlzY0QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNjRC50eXBlID09PSAncGllcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydjeCddID0gZGlzY0QuZGF0YS5jeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydjeSddID0gZGlzY0QuZGF0YS5jeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydzdGFydEFuZ2xlJ10gPSAoZGlzY0QuZGF0YS5jbG9ja3dpc2UgPyBkaXNjRC5kYXRhLnN0YXJ0QW5nbGUgOiBkaXNjRC5kYXRhLmVuZEFuZ2xlKSAtIDEgLyAoTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2VuZEFuZ2xlJ10gPSAoIWRpc2NELmRhdGEuY2xvY2t3aXNlID8gZGlzY0QuZGF0YS5zdGFydEFuZ2xlIDogZGlzY0QuZGF0YS5lbmRBbmdsZSkgKyBNYXRoLlBJICogNCArIDEgLyAoTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNjRC5kYXRhLnJhZGl1cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2lubmVyUmFkaXVzJ10gPSBkaXNjRC5kYXRhLnJhZGl1c1swXS5yeCA+IGRpc2NELmRhdGEucmFkaXVzWzFdLnJ4ID8gZGlzY0QuZGF0YS5yYWRpdXNbMV0ucnggOiBkaXNjRC5kYXRhLnJhZGl1c1swXS5yeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnb3V0dGVyUmFkaXVzJ10gPSBkaXNjRC5kYXRhLnJhZGl1c1swXS5yeCA+IGRpc2NELmRhdGEucmFkaXVzWzFdLnJ4ID8gZGlzY0QuZGF0YS5yYWRpdXNbMF0ucnggOiBkaXNjRC5kYXRhLnJhZGl1c1sxXS5yeDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnb3V0dGVyUmFkaXVzJ10rKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydpbm5lclJhZGl1cyddID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnb3V0dGVyUmFkaXVzJ10gPSBkaXNjRC5kYXRhLnJhZGl1c1swXS5yeCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmRvbU1hcmtzLnNldChtYXJrSWQsIHRtcERvbUF0dHJPYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWZ0ZXInLCBBbmltYXRpb24uZG9tTWFya3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuaW1hdGlvbi5jYWxBbmlUaW1lKG1hcmtJZHMsIGxhc3RBbmltYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FsQW5pVGltZShtYXJrSWRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQW5pbWF0aW9uLmFuaW1hdGlvbnMuZ2V0KGFuaUtleSkuYWxpZ25PbkRhdGEgPSBhbmltYXRpb24uYWxpZ25PbkRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBbmltYXRpb24gPSBhbmltYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodG1wQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rlc3QgbWFya3MgaW4gb3JkZXIgaW4gdGhlIGVuZDogJywgYW5pbWF0aW9uLm1hcmtzSW5PcmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBzb3J0U2VsZWN0b3Ioc2VsZWN0b3IpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RvckJsb2NrcyA9IHNlbGVjdG9yLnNwbGl0KCcsICcpOy8vc2hvdWxkIGJlIGluIHRoZSBmb3JtICNtYXJrMSAjbWFyazIgLi4uXHJcbiAgICAgICAgaWYgKHNlbGVjdG9yQmxvY2tzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2JlZm9yZSBzb3J0IHNlbGVjdG9yOiAnLCBzZWxlY3RvckJsb2Nrcyk7XHJcbiAgICAgICAgICAgIHNlbGVjdG9yQmxvY2tzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG51bUEgPSBwYXJzZUludChhLnN1YnN0cmluZyg1KSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1CID0gcGFyc2VJbnQoYi5zdWJzdHJpbmcoNSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bUEgLSBudW1CO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWZ0ZXIgc29ydCBzZWVsY3RvcicsIHNlbGVjdG9yQmxvY2tzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yQmxvY2tzLmpvaW4oJywgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoY2FsbGJhY2ssIHN0YXR1cyA9IHt9KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS50aW1lKCdyZW5kZXJpbmcnKTtcclxuICAgICAgICBBbmltYXRpb24ucmVuZGVyQW5pbWF0aW9uKHN0YXR1cyk7XHJcbiAgICAgICAgLy8gQW5pbWF0aW9uLmZpbmRLZXlmcmFtZXMoKTtcclxuICAgICAgICAvL21hcCBhbmltYXRpb24ga2V5ZnJhbWVzIHRvIGxvdHRpZSBzcGVjXHJcbiAgICAgICAgQW5pbWF0aW9uLm1hcFRvTG90dGllU3BlYygpO1xyXG5cclxuICAgICAgICAvL2V4cG9ydCBsb3R0aWUgSlNPTlxyXG4gICAgICAgIGxldCBsb3R0aWVKU09OID0gZ2xvYmFsVmFyLmpzTW92aW4udG9KU09OKCk7XHJcbiAgICAgICAgQ2FuaXNTcGVjLmxvdHRpZUpTT04gPSBsb3R0aWVKU09OO1xyXG4gICAgICAgIC8vIGNvbnNvbGUudGltZUVuZCgncmVuZGVyaW5nJyk7XHJcbiAgICAgICAgaWYgKHN0YXR1cykge1xyXG4gICAgICAgICAgICBzdGF0dXMuaW5mbyA9ICdEb25lIHJlbmRlcmluZy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvdHRpZUpTT04pO1xyXG4gICAgfVxyXG59XHJcblxyXG5DYW5pc1NwZWMubG90dGllSlNPTiA9ICcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FuaXNTcGVjOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuRWFzaW5nRmFjdG9yeSA9IHZvaWQgMDtcclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuLy8gcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSBodHRwczovL2Vhc2luZ3MubmV0L1xyXG52YXIgRWFzaW5nRmFjdG9yeSA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIEVhc2luZ0ZhY3RvcnkoKSB7XHJcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRWFzaW5nRmFjdG9yeSk7XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlQ2xhc3MoRWFzaW5nRmFjdG9yeSwgbnVsbCwgW3tcclxuICAgIGtleTogXCJsaW5lYXJcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lYXIoKSB7XHJcbiAgICAgIHJldHVybiBbW1sxXSwgWzFdXSwgW1swXSwgWzBdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblNpbmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5TaW5lKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC40N10sIFswXV0sIFtbMC43NDVdLCBbMC43MTVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRTaW5lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFNpbmUoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjM5XSwgWzAuNTc1XV0sIFtbMC41NjVdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0U2luZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dFNpbmUoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjQ0NV0sIFswLjA1XV0sIFtbMC41NV0sIFswLjk1XV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5RdWFkXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluUXVhZCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuNTVdLCBbMC4wODVdXSwgW1swLjY4XSwgWzAuNTNdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRRdWFkXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFF1YWQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjI1XSwgWzAuNDZdXSwgW1swLjQ1XSwgWzAuOTRdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dFF1YWRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRRdWFkKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC40NTVdLCBbMC4wM11dLCBbWzAuNTE1XSwgWzAuOTU1XV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5DdWJpY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkN1YmljKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC41NV0sIFswLjA1NV1dLCBbWzAuNjc1XSwgWzAuMTldXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRDdWJpY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRDdWJpYygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMjE1XSwgWzAuNjFdXSwgW1swLjM1NV0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRDdWJpY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC42NDVdLCBbMC4wNDVdXSwgW1swLjM1NV0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5RdWFydFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJblF1YXJ0KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC44OTVdLCBbMC4wM11dLCBbWzAuNjg1XSwgWzAuMjJdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRRdWFydFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRRdWFydCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMTY1XSwgWzAuODRdXSwgW1swLjQ0XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dFF1YXJ0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0UXVhcnQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjc3XSwgWzBdXSwgW1swLjE3NV0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5RdWludFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJblF1aW50KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC43NTVdLCBbMC4wNV1dLCBbWzAuODU1XSwgWzAuMDZdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRRdWludFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRRdWludCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMjNdLCBbMV1dLCBbWzAuMzJdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0UXVpbnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRRdWludCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuODZdLCBbMF1dLCBbWzAuMDddLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluRXhwb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkV4cG8oKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjk1XSwgWzAuMDVdXSwgW1swLjc5NV0sIFswLjAzNV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dEV4cG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0RXhwbygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMTldLCBbMV1dLCBbWzAuMjJdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0RXhwb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dEV4cG8oKSB7XHJcbiAgICAgIHJldHVybiBbW1sxXSwgWzBdXSwgW1swXSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbkNpcmNcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5DaXJjKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC42XSwgWzAuMDRdXSwgW1swLjk4XSwgWzAuMzM1XV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlT3V0Q2lyY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRDaXJjKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4wNzVdLCBbMC44Ml1dLCBbWzAuMTY1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dENpcmNcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRDaXJjKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC43ODVdLCBbMC4xMzVdXSwgW1swLjE1XSwgWzAuODZdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbkJhY2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5CYWNrKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC42XSwgWy0wLjI4XV0sIFtbMC43MzVdLCBbMC4wNDVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRCYWNrXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dEJhY2soKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjE3NV0sIFswLjg4NV1dLCBbWzAuMzJdLCBbMS4yNzVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dEJhY2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRCYWNrKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC42OF0sIFstMC41NV1dLCBbWzAuMjY1XSwgWzEuNTVdXV07XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gRWFzaW5nRmFjdG9yeTtcclxufSgpO1xyXG5cclxuZXhwb3J0cy5FYXNpbmdGYWN0b3J5ID0gRWFzaW5nRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlsWVhOcGJtY3VkSE1pWFN3aWJtRnRaWE1pT2xzaVJXRnphVzVuUm1GamRHOXllU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenRCUVVGQk8wbEJTV0ZCTEdFN096czdPenM3T3pzMlFrRkRkVUk3UVVGRE5VSXNZVUZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRUxFTkJRVVFzUlVGQlRTeERRVUZETEVOQlFVUXNRMEZCVGl4RFFVRkVMRVZCUVdFc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlJDeEZRVUZOTEVOQlFVTXNRMEZCUkN4RFFVRk9MRU5CUVdJc1EwRkJVRHRCUVVOSU96czdhVU5CUlcxRE8wRkJRMmhETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRm5RaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJhRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YjBOQlJYTkRPMEZCUTI1RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eEpRVUZFTEVOQlFWUXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdhVU5CUlcxRE8wRkJRMmhETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eExRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdFFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhKUVVGRUxFTkJRVlFzUTBGQmJrSXNRMEZCVUR0QlFVTklPenM3YjBOQlJYTkRPMEZCUTI1RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eExRVUZFTEVOQlFWWXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdhME5CUlc5RE8wRkJRMnBETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eExRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2JVTkJSWEZETzBGQlEyeERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3Y1VOQlJYVkRPMEZCUTNCRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhMUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ4UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCY2tJc1EwRkJVRHRCUVVOSU96czdhME5CUlc5RE8wRkJRMnBETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2JVTkJSWEZETzBGQlEyeERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3Y1VOQlJYVkRPMEZCUTNCRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdhME5CUlc5RE8wRkJRMnBETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2JVTkJSWEZETzBGQlEyeERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGblFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQmFFSXNRMEZCVUR0QlFVTklPenM3Y1VOQlJYVkRPMEZCUTNCRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdhVU5CUlcxRE8wRkJRMmhETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eEpRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRnRRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJia0lzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGblFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQmFFSXNRMEZCVUR0QlFVTklPenM3YjBOQlJYTkRPMEZCUTI1RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRVZCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlJDeEZRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1JVRkJUU3hEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZpTEVOQlFWQTdRVUZEU0RzN08ybERRVVZ0UXp0QlFVTm9ReXhoUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVUXNRMEZCUkN4RlFVRlJMRU5CUVVNc1NVRkJSQ3hEUVVGU0xFTkJRVVFzUlVGQmEwSXNRMEZCUXl4RFFVRkRMRWxCUVVRc1EwRkJSQ3hGUVVGVExFTkJRVU1zUzBGQlJDeERRVUZVTEVOQlFXeENMRU5CUVZBN1FVRkRTRHM3TzJ0RFFVVnZRenRCUVVOcVF5eGhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVRc1EwRkJSQ3hGUVVGVkxFTkJRVU1zU1VGQlJDeERRVUZXTEVOQlFVUXNSVUZCYjBJc1EwRkJReXhEUVVGRExFdEJRVVFzUTBGQlJDeEZRVUZWTEVOQlFVTXNRMEZCUkN4RFFVRldMRU5CUVhCQ0xFTkJRVkE3UVVGRFNEczdPMjlEUVVWelF6dEJRVU51UXl4aFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVVFzUTBGQlJDeEZRVUZWTEVOQlFVTXNTMEZCUkN4RFFVRldMRU5CUVVRc1JVRkJjVUlzUTBGQlF5eERRVUZETEVsQlFVUXNRMEZCUkN4RlFVRlRMRU5CUVVNc1NVRkJSQ3hEUVVGVUxFTkJRWEpDTEVOQlFWQTdRVUZEU0RzN08ybERRVVZ0UXp0QlFVTm9ReXhoUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVUXNRMEZCUkN4RlFVRlJMRU5CUVVNc1EwRkJReXhKUVVGR0xFTkJRVklzUTBGQlJDeEZRVUZ0UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eExRVUZFTEVOQlFWWXNRMEZCYmtJc1EwRkJVRHRCUVVOSU96czdhME5CUlc5RE8wRkJRMnBETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eExRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnhRaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJja0lzUTBGQlVEdEJRVU5JT3pzN2IwTkJSWE5ETzBGQlEyNURMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkRMRWxCUVVZc1EwRkJWQ3hEUVVGRUxFVkJRVzlDTEVOQlFVTXNRMEZCUXl4TFFVRkVMRU5CUVVRc1JVRkJWU3hEUVVGRExFbEJRVVFzUTBGQlZpeERRVUZ3UWl4RFFVRlFPMEZCUTBnaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJ3WVhKaGJXVjBaWEp6SUdWNGRISmhZM1JsWkNCbWNtOXRJR2gwZEhCek9pOHZaV0Z6YVc1bmN5NXVaWFF2WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRVZoYzJsdVowWjFibU4wYVc5dUlEMGdiblZ0WW1WeVcxMWJYVnRkWEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJGWVhOcGJtZEdZV04wYjNKNUlIdGNiaUFnSUNCemRHRjBhV01nYkdsdVpXRnlLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pGZExDQmJNVjFkTENCYld6QmRMQ0JiTUYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVRhVzVsS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVORGRkTENCYk1GMWRMQ0JiV3pBdU56UTFYU3dnV3pBdU56RTFYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZQZFhSVGFXNWxLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU16bGRMQ0JiTUM0MU56VmRYU3dnVzFzd0xqVTJOVjBzSUZzeFhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpiazkxZEZOcGJtVW9LVG9nUldGemFXNW5SblZ1WTNScGIyNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXRiTUM0ME5EVmRMQ0JiTUM0d05WMWRMQ0JiV3pBdU5UVmRMQ0JiTUM0NU5WMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxTVzVSZFdGa0tDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TlRWZExDQmJNQzR3T0RWZFhTd2dXMXN3TGpZNFhTd2dXekF1TlROZFhWMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWldGelpVOTFkRkYxWVdRb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzR5TlYwc0lGc3dMalEyWFYwc0lGdGJNQzQwTlYwc0lGc3dMamswWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrOTFkRkYxWVdRb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQwTlRWZExDQmJNQzR3TTExZExDQmJXekF1TlRFMVhTd2dXekF1T1RVMVhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpia04xWW1saktDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TlRWZExDQmJNQzR3TlRWZFhTd2dXMXN3TGpZM05WMHNJRnN3TGpFNVhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVlBkWFJEZFdKcFl5Z3BPaUJGWVhOcGJtZEdkVzVqZEdsdmJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJXMXN3TGpJeE5WMHNJRnN3TGpZeFhWMHNJRnRiTUM0ek5UVmRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVBkWFJEZFdKcFl5Z3BPaUJGWVhOcGJtZEdkVzVqZEdsdmJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJXMXN3TGpZME5WMHNJRnN3TGpBME5WMWRMQ0JiV3pBdU16VTFYU3dnV3pGZFhWMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWldGelpVbHVVWFZoY25Rb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQ0T1RWZExDQmJNQzR3TTExZExDQmJXekF1TmpnMVhTd2dXekF1TWpKZFhWMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWldGelpVOTFkRkYxWVhKMEtDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TVRZMVhTd2dXekF1T0RSZFhTd2dXMXN3TGpRMFhTd2dXekZkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlVsdVQzVjBVWFZoY25Rb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQzTjEwc0lGc3dYVjBzSUZ0Yk1DNHhOelZkTENCYk1WMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxTVzVSZFdsdWRDZ3BPaUJGWVhOcGJtZEdkVzVqZEdsdmJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJXMXN3TGpjMU5WMHNJRnN3TGpBMVhWMHNJRnRiTUM0NE5UVmRMQ0JiTUM0d05sMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxUM1YwVVhWcGJuUW9LVG9nUldGemFXNW5SblZ1WTNScGIyNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXRiTUM0eU0xMHNJRnN4WFYwc0lGdGJNQzR6TWwwc0lGc3hYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZKYms5MWRGRjFhVzUwS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVPRFpkTENCYk1GMWRMQ0JiV3pBdU1EZGRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNUZlSEJ2S0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVPVFZkTENCYk1DNHdOVjFkTENCYld6QXVOemsxWFN3Z1d6QXVNRE0xWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWUGRYUkZlSEJ2S0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVNVGxkTENCYk1WMWRMQ0JiV3pBdU1qSmRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVBkWFJGZUhCdktDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekZkTENCYk1GMWRMQ0JiV3pCZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1RGFYSmpLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU5sMHNJRnN3TGpBMFhWMHNJRnRiTUM0NU9GMHNJRnN3TGpNek5WMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxUM1YwUTJseVl5Z3BPaUJGWVhOcGJtZEdkVzVqZEdsdmJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJXMXN3TGpBM05WMHNJRnN3TGpneVhWMHNJRnRiTUM0eE5qVmRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVBkWFJEYVhKaktDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TnpnMVhTd2dXekF1TVRNMVhWMHNJRnRiTUM0eE5WMHNJRnN3TGpnMlhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpia0poWTJzb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQyWFN3Z1d5MHdMakk0WFYwc0lGdGJNQzQzTXpWZExDQmJNQzR3TkRWZFhWMWNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWldGelpVOTFkRUpoWTJzb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzR4TnpWZExDQmJNQzQ0T0RWZFhTd2dXMXN3TGpNeVhTd2dXekV1TWpjMVhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpiazkxZEVKaFkyc29LVG9nUldGemFXNW5SblZ1WTNScGIyNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXRiTUM0Mk9GMHNJRnN0TUM0MU5WMWRMQ0JiV3pBdU1qWTFYU3dnV3pFdU5UVmRYVjFjYmlBZ0lDQjlYRzU5SWwxOSIsIi8vIHYxLjAgZXhwb3J0ZWQganVzdCB0aGUgcGFyc2VyIGZ1bmN0aW9uLiBUbyBtYWludGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSxcbi8vIHdlIGV4cG9ydCBhZGRpdGlvbmFsIG5hbWVkIGZlYXR1cmVzIGFzIHByb3BlcnRpZXMgb2YgdGhhdCBmdW5jdGlvbi5cbnZhciBwYXJzZXJGdW5jdGlvbiA9IHJlcXVpcmUoJy4vcGFyc2VyLmpzJykucGFyc2U7XG5wYXJzZXJGdW5jdGlvbi5wYXJzZVNWRyA9IHBhcnNlckZ1bmN0aW9uO1xucGFyc2VyRnVuY3Rpb24ubWFrZUFic29sdXRlID0gbWFrZVNWR1BhdGhDb21tYW5kc0Fic29sdXRlO1xubW9kdWxlLmV4cG9ydHMgPSBwYXJzZXJGdW5jdGlvbjtcblxuZnVuY3Rpb24gbWFrZVNWR1BhdGhDb21tYW5kc0Fic29sdXRlKGNvbW1hbmRzKSB7XG5cdHZhciBzdWJwYXRoU3RhcnQsIHByZXZDbWQ9e3g6MCx5OjB9O1xuXHR2YXIgYXR0ciA9IHt4Oid4MCcseToneTAnLHgxOid4MCcseTE6J3kwJyx4MjoneDAnLHkyOid5MCd9O1xuXHRjb21tYW5kcy5mb3JFYWNoKGZ1bmN0aW9uKGNtZCkge1xuXHRcdGlmIChjbWQuY29tbWFuZD09PSdtb3ZldG8nKSBzdWJwYXRoU3RhcnQ9Y21kO1xuXHRcdGNtZC54MD1wcmV2Q21kLng7IGNtZC55MD1wcmV2Q21kLnk7XG5cdFx0Zm9yICh2YXIgYSBpbiBhdHRyKSBpZiAoYSBpbiBjbWQpIGNtZFthXSArPSBjbWQucmVsYXRpdmUgPyBjbWRbYXR0clthXV0gOiAwO1xuXHRcdGlmICghKCd4JyBpbiBjbWQpKSBjbWQueCA9IHByZXZDbWQueDsgLy8gVlxuXHRcdGlmICghKCd5JyBpbiBjbWQpKSBjbWQueSA9IHByZXZDbWQueTsgLy8gWFxuXHRcdGNtZC5yZWxhdGl2ZSA9IGZhbHNlO1xuXHRcdGNtZC5jb2RlID0gY21kLmNvZGUudG9VcHBlckNhc2UoKTtcblx0XHRpZiAoY21kLmNvbW1hbmQ9PSdjbG9zZXBhdGgnKSB7XG5cdFx0XHRjbWQueCA9IHN1YnBhdGhTdGFydC54O1xuXHRcdFx0Y21kLnkgPSBzdWJwYXRoU3RhcnQueTtcblx0XHR9XG5cdFx0cHJldkNtZCA9IGNtZDtcblx0fSk7XG5cdHJldHVybiBjb21tYW5kcztcbn1cbiIsImNsYXNzIEZhY2V0U3BlYyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCB2aWV3cykge1xyXG4gICAgICAgIHRoaXMuX3R5cGU7XHJcbiAgICAgICAgdGhpcy5fdmlld3M7XHJcbiAgICAgICAgdGhpcy52aWV3cyA9IHZpZXdzO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHR5cGUodHlwZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKEZhY2V0U3BlYy5mYWNldFR5cGUpLmluY2x1ZGVzKHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndGhlIGZhY2V0IHR5cGUgaGFzIHRvIGJlIG9uZSBvZiBcInJvd1wiIG9yIFwiY29sdW1uXCIsIHNldHRpbmcgdG8gZGVmYXVsdCB2YWx1ZSBcImNvbHVtblwiLicpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gRmFjZXRTcGVjLmZhY2V0VHlwZS5jb2w7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHZpZXdzKHZpZXdzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgLy90cmFuc2xhdGUgXCJyYW5nZVwiIHRvIFwiZnJhbWVzXCJcclxuICAgICAgICAgICAgbGV0IGZyYW1lVmlld3MgPSB2aWV3cy5tYXAodmlldyA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZpZXcucmFuZ2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayByYW5nZSBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZW5kID0gbmV3IFJlZ0V4cChcIlxcXFxkKyRcIik7IFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5nZVN0YXJ0TmFtZSA9IHZpZXcucmFuZ2VbMF0ucmVwbGFjZShyZWdlbmQsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbmROYW1lID0gdmlldy5yYW5nZVsxXS5yZXBsYWNlKHJlZ2VuZCwgJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gdmlldy5yYW5nZVswXS5tYXRjaChyZWdlbmQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHZpZXcucmFuZ2VbMV0ubWF0Y2gocmVnZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydE5hbWUgPT09IHJhbmdlRW5kTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmZyYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcmFuZ2VTdGFydDsgaSA8PSByYW5nZUVuZDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmZyYW1lcy5wdXNoKHJhbmdlU3RhcnROYW1lICsgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3LmZyYW1lcyA9IFt2aWV3LnJhbmdlWzBdLCB2aWV3LnJhbmdlWzFdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdyYW5nZSBzdGFydCBhbmQgZW5kIG1pc21hdGNoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvL2ZpbmQgdGhlIG1heCBudW1iZXIgb2YgY2hhcnRzIGluIHZpZXdzXHJcbiAgICAgICAgICAgIGxldCBtYXhMZW4gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lVmlld3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGggPiBtYXhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhMZW4gPSBmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVZpZXdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVWaWV3c1tpXS5mcmFtZXMubGVuZ3RoIDwgbWF4TGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RJdGVtID0gZnJhbWVWaWV3c1tpXS5mcmFtZXNbZnJhbWVWaWV3c1tpXS5mcmFtZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bURpZmYgPSBtYXhMZW4gLSBmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG51bURpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lVmlld3NbaV0uZnJhbWVzLnB1c2gobGFzdEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1EaWZmLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdzID0gZnJhbWVWaWV3cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZpZXdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3cztcclxuICAgIH1cclxufVxyXG5cclxuRmFjZXRTcGVjLmZhY2V0VHlwZSA9IHtcclxuICAgIHJvdzogJ3JvdycsXHJcbiAgICBjb2w6ICdjb2x1bW4nXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZhY2V0U3BlYzsiLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMuanMnO1xyXG5pbXBvcnQgeyBDYW5pc1V0aWwgfSBmcm9tICcuL3V0aWwvVXRpbC5qcyc7XHJcblxyXG5jbGFzcyBHcm91cGluZ1NwZWMgZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBCeSA9ICdpZCc7IC8vb3B0aW9uYWxcclxuICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0O1xyXG4gICAgICAgIHRoaXMuX2RlbGF5ID0gMDtcclxuICAgICAgICB0aGlzLmRlZmluZWRCeUlkID0gZmFsc2U7Ly90cnVlIGRlZmluZWQgYnkgdXNlciwgZmFsc2U6IG5vdCBkZWZpbmVkIGJ5IHVzZXJcclxuICAgICAgICB0aGlzLnNvcnQgPSB7fTtcclxuICAgICAgICAvLyB0aGlzLnJvb3QgPSB7fTtcclxuICAgICAgICB0aGlzLmdyb3VwaW5nOy8vb3B0aW9uYWwsIGFub3RoZXIgR3JvdXBpbmdTcGVjIG9iamVjdCBpbmRpY2F0aW5nIG1vcmUgZ3JvdXBpbmdzXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgZ3JvdXBCeShnYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ2IgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB0aGlzLl9ncm91cEJ5ID0gZ2I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdyb3VwQnkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwQnk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJlZmVyZW5jZShyZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IHRtcFJlZlN0ciA9IFRpbWluZ1NwZWMudHJhbnNSZWYocmVmKTtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyh0bXBSZWZTdHIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSByZWY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3JlZmVyZW5jZVxcJyBvZiBUaW1pbmdTcGVjIGhhcyB0byBiZSBvbmUgb2YgXFwncHJldmlvdXNTdGFydFxcJywgXFwncHJldmlvdXNFbmRcXCcgb3IgXFwnYWJzb2x1dGVcXCcuICcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlZmVyZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZWxheShkbHkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRseSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgaWYgKGRseSA+PSAxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFIHx8IGRseSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsYXkgPSBkbHk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxheSA9IDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkbHkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGF5ID0gZGx5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVsYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xyXG4gICAgfVxyXG4gICAgLyoqKioqIGVuZCBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgcmVwbGFjZURlbGF5Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMgPSB7fSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kZWxheSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZGVsYXkpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiBpdCBpcyBhbiBlcXVhdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVsYXkuaW5kZXhPZihcImNhbGNcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ID0gdGhpcy5kZWxheS5zdWJzdHJpbmcoMCwgdGhpcy5kZWxheS5sZW5ndGggLSAxKS5zdWJzdHJpbmcoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLmZvckVhY2goKHZhbHVlLCBrZXksIG1hcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWxheS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXkgPSB0aGlzLmRlbGF5LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnbScpLCAnJyArIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0RlbGF5IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wiZGVsYXlcIjpcIicgKyB0aGlzLmRlbGF5LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDYW5pc1V0aWwuY2hlY2tFcXVhdGlvbih0aGlzLmRlbGF5LCBjb25zdGFudHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBldmFsKHRoaXMuZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBlcXVhdGlvbi4nLCBlcnJTcGVjOiAnXCJkZWxheVwiOlwiJyArIHRoaXMuZGVsYXkucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJkZWxheVwiOlwiJyArIHRoaXMuZGVsYXkucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHsvL3JlcGxhY2VcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLmRlbGF5KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ID0gY29uc3RhbnRzLmdldCh0aGlzLmRlbGF5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0RlbGF5IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wiZGVsYXlcIjpcIicgKyB0aGlzLmRlbGF5LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnJlcGxhY2VEZWxheUNvbnN0KGNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0IG5lc3RlZCBncm91cGluZyBhbmQgYWN0aW9ucyB1c2luZyBqc29uIG9ialxyXG4gICAgICogQHBhcmFtIHtKU09OIG9ian0gZ3JvdXBpbmdKc29uIFxyXG4gICAgICovXHJcbiAgICBpbml0R3JvdXBpbmcoZ3JvdXBpbmdKc29uKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cEJ5ID0gZ3JvdXBpbmdKc29uLmdyb3VwQnk7XHJcbiAgICAgICAgaWYgKGdyb3VwaW5nSnNvbi5ncm91cEJ5ID09PSAnaWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lZEJ5SWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGdyb3VwaW5nSnNvbi5yZWZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy5kZWxheSA9IGdyb3VwaW5nSnNvbi5kZWxheTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBncm91cGluZ0pzb24uc29ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3J0LmZpZWxkID0gZ3JvdXBpbmdKc29uLnNvcnQuZmllbGQ7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydC5vcmRlciA9IGdyb3VwaW5nSnNvbi5zb3J0Lm9yZGVyO1xyXG4gICAgICAgICAgICB0aGlzLnNvcnQuZXhwciA9IGdyb3VwaW5nSnNvbi5zb3J0LmV4cHI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyb3VwaW5nSnNvbi5ncm91cGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZyA9IG5ldyBHcm91cGluZ1NwZWMoKTtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5pbml0R3JvdXBpbmcoZ3JvdXBpbmdKc29uLmdyb3VwaW5nKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBncm91cGluZ0pzb24uZ3JvdXBpbmcgPT09ICd1bmRlZmluZWQnICYmIGdyb3VwaW5nSnNvbi5ncm91cEJ5ICE9PSAnaWQnKSB7XHJcbiAgICAgICAgICAgIC8vZGlkbm90IGdvcnVwaW5nIHRvIGlkLCBhZGQgZXh0cmEgZ3JvdXBpbmcgYnkgaWRcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZyA9IG5ldyBHcm91cGluZ1NwZWMoKTtcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5ncm91cEJ5ID0gJ2lkJztcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5kZWZpbmVkQnlJZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlT3JkZXIobWFya0lkcywgZG9tTWFya3MsIHJvb3QsIHRpbWluZ1JlZiwgYWxpZ25pbmcpIHtcclxuICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzLmNsZWFyKCk7XHJcbiAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuY2xlYXIoKTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMocm9vdCkubGVuZ3RoID09PSAwKSB7Ly8gZ2VuZXJhdGUgbmV3IHRyZWVcclxuICAgICAgICAgICAgcm9vdC5ncm91cFJlZiA9ICdyb290JztcclxuICAgICAgICAgICAgcm9vdC5pZCA9IEdyb3VwaW5nU3BlYy5ub2RlSWQ7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuc2V0KEdyb3VwaW5nU3BlYy5ub2RlSWQsIHRydWUpO1xyXG4gICAgICAgICAgICBHcm91cGluZ1NwZWMubm9kZUlkKys7XHJcbiAgICAgICAgICAgIHJvb3QuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgcm9vdC5tYXJrcyA9IG1hcmtJZHM7XHJcbiAgICAgICAgICAgIHJvb3QudGltaW5nUmVmID0gdHlwZW9mIHRpbWluZ1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0IDogdGltaW5nUmVmO1xyXG4gICAgICAgICAgICByb290LmRlbGF5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVRyZWUocm9vdCwgZG9tTWFya3MpO1xyXG4gICAgICAgIH0gZWxzZSB7Ly8gdXBkYXRlIHRoZSBjdXJyZW50IHRyZWVcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUcmVlKHJvb3QsIGRvbU1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFya09yZGVyQW5kTGVhdmVzKHJvb3QsIGFsaWduaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVUcmVlKHQsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3VwZGF0aW5nIHRyZWUhJyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zdCBncm91cEJ5UmVmID0gdGhpcy5ncm91cEJ5O1xyXG4gICAgICAgICAgICBjb25zdCB0aW1pbmdSZWYgPSB0aGlzLnJlZmVyZW5jZTtcclxuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLmRlbGF5O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2FtZUdyb3VwaW5nID0gZmFsc2U7Ly93aGV0aGVyIHRoaXMgaXMgdGhlIHNhbWUgZ3JvdXBpbmdcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5jaGlsZHJlblswXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzYW1lR3JvdXBpbmcgPSB0LmNoaWxkcmVuWzBdLmdyb3VwUmVmID09PSBncm91cEJ5UmVmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzYW1lR3JvdXBpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWwgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHRtcE5vZGU7IGkgPCB0LmNoaWxkcmVuLmxlbmd0aCB8ICh0bXBOb2RlID0gdC5jaGlsZHJlbltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwaW5nLnVwZGF0ZVRyZWUodG1wTm9kZSwgZG9tTWFya3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbC5zZXQodG1wTm9kZS5yZWZWYWx1ZSwgdG1wTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUudGltaW5nUmVmID0gdGltaW5nUmVmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vcmUtc29ydCB0aGUgY2hpbGRyZW4gb2YgdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydE5vZGVzKHRoaXMuc29ydCwgdCwgbm9kZXNUaGlzTGV2ZWwsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUcmVlKHQsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5ncm91cGluZyA9PT0gJ3VuZGVmaW5lZCcgJiYgdC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7Ly9ubyBtb3JlIGdyb3VwaW5nIGlzIGRlZmluZWQsIGJ1dCB0aGUgb3JpIHRyZWUgaGFzIGRlZXBlciBoaWVyYXJjaHlcclxuICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVRyZWUodCwgZG9tTWFya3MpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZ2VuZXJhdGluZyB0cmVlISEnKTtcclxuICAgICAgICBjb25zdCBncm91cEJ5UmVmID0gdGhpcy5ncm91cEJ5O1xyXG4gICAgICAgIGNvbnN0IHRpbWluZ1JlZiA9IHRoaXMucmVmZXJlbmNlO1xyXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5kZWxheTtcclxuICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWwgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG1hcmtJZDsgaSA8IHQubWFya3MubGVuZ3RoIHwgKG1hcmtJZCA9IHQubWFya3NbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGRhdHVtID0gZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2RhdGEtZGF0dW0nXTsvL2RhdHVtIHN0b3JlZCBpbiB0aGUgdGFnXHJcbiAgICAgICAgICAgIGxldCByZWZWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb21NYXJrcy5nZXQobWFya0lkKVtncm91cEJ5UmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHJlZlZhbHVlID0gZG9tTWFya3MuZ2V0KG1hcmtJZClbZ3JvdXBCeVJlZl07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQpW2dyb3VwQnlSZWZdID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGF0dW1bZ3JvdXBCeVJlZl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZWZWYWx1ZSA9IGRhdHVtW2dyb3VwQnlSZWZdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdlcnJvcjogZ3JvdXBpbmcgYnkgYW4gdW5rbm93biBhdHRyaWJ1dGUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKS5tYXJrcy5wdXNoKG1hcmtJZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouaWQgPSBHcm91cGluZ1NwZWMubm9kZUlkO1xyXG4gICAgICAgICAgICAgICAgR3JvdXBpbmdTcGVjLm5vZGVJZCsrO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmdyb3VwUmVmID0gZ3JvdXBCeVJlZjtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBPYmouZ3JvdXBSZWYgPT09ICdpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouZGVmaW5lZEJ5SWQgPSB0aGlzLmRlZmluZWRCeUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG1wT2JqLnJlZlZhbHVlID0gcmVmVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmoudGltaW5nUmVmID0gdGltaW5nUmVmO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRtcE9iai5tYXJrcyA9IFttYXJrSWRdO1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuc2V0KHJlZlZhbHVlLCB0bXBPYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vb3JkZXIgbm9kZXMgb2YgdGhpcyBsZXZlbCBhY2NvcmRpbmcgdG8gdGhlICdzb3J0JyBzcGVjXHJcbiAgICAgICAgdGhpcy5zb3J0Tm9kZXModGhpcy5zb3J0LCB0LCBub2Rlc1RoaXNMZXZlbCwgZG9tTWFya3MpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdub2RlcyB0aGlzIGxldmVsOiAnLCB0aGlzLnNvcnQsIG5vZGVzVGhpc0xldmVsLCB0KTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCB0bXBOb2RlOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGggfCAodG1wTm9kZSA9IHQuY2hpbGRyZW5baV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBpbmcuZ2VuZXJhdGVUcmVlKHRtcE5vZGUsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzb3J0Tm9kZXMoc3BlY1NvcnQsIHQsIG5vZGVzVGhpc0xldmVsLCBkb21NYXJrcykge1xyXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBzcGVjU29ydC5vcmRlcikge1xyXG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOi8vQXJyYXlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnZW5lcmF0aW5nIGNoaWxkcmVuOiAnLCB0LCBub2Rlc1RoaXNMZXZlbCwgc3BlY1NvcnQub3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFwcGVuZE51bSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgcmVmVmFsdWU7IGkgPCBzcGVjU29ydC5vcmRlci5sZW5ndGggfCAocmVmVmFsdWUgPSBzcGVjU29ydC5vcmRlcltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHJlZlZhbHVlKSkpIHsvLyB0aGlzIHJlZnZhbHVlIGlzIG5vdCBudW1iZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZlZhbHVlTnVtID0gTnVtYmVyKHJlZlZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWVOdW0pICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5wdXNoKG5vZGVzVGhpc0xldmVsLmdldChyZWZWYWx1ZU51bSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTnVtKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5wdXNoKG5vZGVzVGhpc0xldmVsLmdldChyZWZWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmROdW0rKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzovLydhc2NlbmRpbmcnIHwgJ2Rlc2NlbmRpbmcnXHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgaGF2ZSBjb21lIHRvIHRoZSBsb3dlc3QgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGxldCBoYXNTaW5nbGVNYXJrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCByZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWFya3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNTaW5nbGVNYXJrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvL29ubHkgdGFrZSBlZmZlY3Qgd2hlbiBhIHNwZWNpZmljIGZpZWxkIGlzIHNwZWNpZmllZCBhbmQgYXJlIG9uIHRoZSBsb3dlc3QgbGV2ZWxcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3BlY1NvcnQuZmllbGQgIT09ICd1bmRlZmluZWQnICYmIGhhc1NpbmdsZU1hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJSZWYgPSBzcGVjU29ydC5maWVsZDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWxBcnIgPSBbLi4ubm9kZXNUaGlzTGV2ZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmRlclR5cGUgPSBzcGVjU29ydC5vcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbEFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWQxID0gYVsxXS5tYXJrc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJZDIgPSBiWzFdLm1hcmtzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJSZWZWYWx1ZTEgPSAnJywgb3JkZXJSZWZWYWx1ZTIgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtMSA9IGRvbU1hcmtzLmdldChtYXJrSWQxKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0dW0yID0gZG9tTWFya3MuZ2V0KG1hcmtJZDIpWydkYXRhLWRhdHVtJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9tTWFya3MuZ2V0KG1hcmtJZDIpW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gZG9tTWFya3MuZ2V0KG1hcmtJZDIpW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9tTWFya3MuZ2V0KG1hcmtJZDEpW29yZGVyUmVmXSA9PT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBkYXR1bTFbb3JkZXJSZWZdICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQyKVtvcmRlclJlZl0gPT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgZGF0dW0yW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gZGF0dW0xW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gZGF0dW0yW29yZGVyUmVmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KG9yZGVyUmVmVmFsdWUxKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUxID0gcGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KG9yZGVyUmVmVmFsdWUyKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyUmVmVmFsdWUyID0gcGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclR5cGUgPT09IEdyb3VwaW5nU3BlYy5vcmRlclR5cGVzLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyUmVmVmFsdWUxID49IG9yZGVyUmVmVmFsdWUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmRlclR5cGUgPT09IEdyb3VwaW5nU3BlYy5vcmRlclR5cGVzLmRlc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclJlZlZhbHVlMiA+PSBvcmRlclJlZlZhbHVlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3JkZXJUeXBlID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5yYW5kb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCB0bXBOb2RlOyBpIDwgbm9kZXNUaGlzTGV2ZWxBcnIubGVuZ3RoIHwgKHRtcE5vZGUgPSBub2Rlc1RoaXNMZXZlbEFycltpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0LmFwcGVuZEZyYW1lKHQuaWQsIHRtcE5vZGUuaWQsIGksIG5vZGVzVGhpc0xldmVsQXJyLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4ucHVzaCh0bXBOb2RlWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBub2Rlc1RoaXNMZXZlbEFyciA9IFsuLi5ub2Rlc1RoaXNMZXZlbF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWNTb3J0Lm9yZGVyID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5hc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFbMF0gPj0gYlswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjU29ydC5vcmRlciA9PT0gR3JvdXBpbmdTcGVjLm9yZGVyVHlwZXMuZGVzY2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbEFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYlswXSA+PSBhWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNTb3J0Lm9yZGVyID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5yYW5kb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPj0gMC41ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdG1wTm9kZTsgaSA8IG5vZGVzVGhpc0xldmVsQXJyLmxlbmd0aCB8ICh0bXBOb2RlID0gbm9kZXNUaGlzTGV2ZWxBcnJbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdC5hcHBlbmRGcmFtZSh0LmlkLCB0bXBOb2RlLmlkLCBpLCBub2Rlc1RoaXNMZXZlbEFyci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2godG1wTm9kZVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsLmZvckVhY2goZnVuY3Rpb24gKHRtcE5vZGUsIHJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4ucHVzaCh0bXBOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0LmFwcGVuZEZyYW1lKHQuaWQsIHRtcE5vZGUuaWQsIGNvdW50LCBub2Rlc1RoaXNMZXZlbC5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXBwZW5kRnJhbWUocGFyZW50SWQsIG5vZGVJZCwgbm9kZUlkeCwgbm9kZXNOdW0pIHtcclxuICAgICAgICBpZiAoR3JvdXBpbmdTcGVjLmZyYW1lcy5nZXQocGFyZW50SWQpICYmIChub2RlSWR4ID09PSAwIHx8IG5vZGVJZHggPT09IG5vZGVzTnVtIC0gMSkpIHtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lcy5zZXQobm9kZUlkLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzLnNldChub2RlSWQsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgdGhlIGFuaW1hdGlvbiBvcmRlciBvZiBtYXJrc1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyciBcclxuICAgICAqL1xyXG4gICAgZ2V0TWFya09yZGVyQW5kTGVhdmVzKHQsIGFsaWduaW5nKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2dldHRpbmcgbGVhdmVzOiAnLCB0KTtcclxuICAgICAgICBsZXQgb3JkZXJlZE1hcmtzID0gW10sIGxlYXZlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHF1ZXVlID0gW107XHJcbiAgICAgICAgICAgIHQucGFyZW50R3JvdXBSZWYgPSBbXTtcclxuICAgICAgICAgICAgdC5wYXJlbnRHcm91cFJlZlZhbHVlID0gW107XHJcbiAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQodCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2N1cnJlbnQgaXRlbTogJywgaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZGVmaW5lZEJ5SWQgfHwgKCFpdGVtLmRlZmluZWRCeUlkICYmIGl0ZW0ucGFyZW50R3JvdXBSZWYubGVuZ3RoID09PSAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpZ25pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucGFyZW50R3JvdXBSZWYgPSBbaXRlbS5wYXJlbnRHcm91cFJlZlswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEdyb3VwUmVmVmFsdWUgPSBbaXRlbS5wYXJlbnRHcm91cFJlZlZhbHVlWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZ3JvdXBSZWYgPSAnaWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5yZWZWYWx1ZSA9IGl0ZW0ubWFya3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmVzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyZWRNYXJrcyA9IFsuLi5vcmRlcmVkTWFya3MsIC4uLml0ZW0ubWFya3NdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5jaGlsZHJlblswXS5ncm91cFJlZiA9PT0gJ2lkJyAmJiBpdGVtLmdyb3VwUmVmICE9PSAncm9vdCcgJiYgIWl0ZW0uY2hpbGRyZW5bMF0uZGVmaW5lZEJ5SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsaWduaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEdyb3VwUmVmID0gW2l0ZW0ucGFyZW50R3JvdXBSZWZbMF1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5wYXJlbnRHcm91cFJlZlZhbHVlID0gW2l0ZW0ucGFyZW50R3JvdXBSZWZWYWx1ZVswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmdyb3VwUmVmID0gJ2lkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVmVmFsdWUgPSBpdGVtLm1hcmtzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXZlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldLnBhcmVudEdyb3VwUmVmID0gWy4uLml0ZW0ucGFyZW50R3JvdXBSZWYsIGl0ZW0uZ3JvdXBSZWZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbltpXS5wYXJlbnRHcm91cFJlZlZhbHVlID0gWy4uLml0ZW0ucGFyZW50R3JvdXBSZWZWYWx1ZSwgaXRlbS5yZWZWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtvcmRlcmVkTWFya3MsIGxlYXZlc107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxjdWxhdGUgdGhlIHRpbWUgb2YgZWFjaCBtYXJrIGJhc2VkIG9uIHRoZSBncm91cGluZyBzdHJ1Y3R1cmVcclxuICAgICAqIEBwYXJhbSB7Kn0gdCBcclxuICAgICAqIEBwYXJhbSB7Kn0gbGFzdEdyb3VwU3RhcnQgXHJcbiAgICAgKiBAcGFyYW0geyp9IGxhc3RHcm91cEVuZCBcclxuICAgICAqIEBwYXJhbSB7Kn0gbWFya0FuaSBcclxuICAgICAqL1xyXG4gICAgY2FsVGltZVdpdGhUcmVlKHQsIGxhc3RHcm91cFN0YXJ0LCBsYXN0R3JvdXBFbmQsIG1hcmtBbmkpIHtcclxuICAgICAgICBpZiAodC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxUaW1lV2l0aFRyZWUodC5jaGlsZHJlbltpXSwgdC5jaGlsZHJlbltpIC0gMV0uc3RhcnQsIHQuY2hpbGRyZW5baSAtIDFdLmVuZCwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsVGltZVdpdGhUcmVlKHQuY2hpbGRyZW5baV0sIC0xLCAtMSwgbWFya0FuaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoICh0LnRpbWluZ1JlZikge1xyXG4gICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gbGFzdEdyb3VwU3RhcnQgKyB0LmRlbGF5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gbGFzdEdyb3VwRW5kICsgdC5kZWxheTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAgICAgdC5zdGFydCA9IHQuZGVsYXk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHQuc3RhcnQgPSBsYXN0R3JvdXBTdGFydCArIHQuZGVsYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0R3JvdXBTdGFydCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdC5zdGFydCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHQuZW5kID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQubWFya3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWFya0FuaS5nZXQodC5tYXJrc1tpXSkuc3RhcnRUaW1lICs9IHQuc3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS5zdGFydFRpbWUgKyBtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS50b3RhbER1cmF0aW9uID4gdC5lbmQpIHtcclxuICAgICAgICAgICAgICAgIHQuZW5kID0gbWFya0FuaS5nZXQodC5tYXJrc1tpXSkuc3RhcnRUaW1lICsgbWFya0FuaS5nZXQodC5tYXJrc1tpXSkudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHQubWFya3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcE1hcmtJZCA9IHQubWFya3NbMF07XHJcbiAgICAgICAgICAgIGlmIChHcm91cGluZ1NwZWMuZnJhbWVzLmdldCh0LmlkKSkge1xyXG4gICAgICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuc2V0KHRtcE1hcmtJZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrLmdldCh0bXBNYXJrSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrLnNldCh0bXBNYXJrSWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLmF0dHJzID0gWydncm91cEJ5JywgJ3JlZmVyZW5jZScsICdkZWxheScsICdzb3J0JywgJ2dyb3VwaW5nJ107XHJcbkdyb3VwaW5nU3BlYy5zb3J0QXR0cnMgPSBbJ29yZGVyJywgJ2ZpZWxkJ107XHJcbkdyb3VwaW5nU3BlYy5vcmRlclR5cGVzID0ge1xyXG4gICAgYXNjZW5kaW5nOiAnYXNjZW5kaW5nJyxcclxuICAgIGRlc2NlbmRpbmc6ICdkZXNjZW5kaW5nJyxcclxuICAgIHJhbmRvbTogJ3JhbmRvbSdcclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLm5vZGVJZCA9IDA7XHJcbkdyb3VwaW5nU3BlYy5mcmFtZXMgPSBuZXcgTWFwKCk7Ly9rZXk6IG5vZGVJZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyBpcyBhIGtleWZyYW1lXHJcbkdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrID0gbmV3IE1hcCgpOy8va2V5ZnJhbWU6IG1hcmtpZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyB0aW1lIHBvaW50IGlzIGEga2V5ZnJhbWVcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBHcm91cGluZ1NwZWM7IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMnO1xyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4vQW5pbWF0aW9uU3BlYyc7XHJcbmltcG9ydCBDYW5pc1NwZWMgZnJvbSAnLi9DYW5pc1NwZWMnO1xyXG5cclxud2luZG93LmNhbmlzID0ge1xyXG4gICAgY2FuaXNPYmo6IHt9LFxyXG4gICAgZnJhbWVSYXRlOiBUaW1pbmdTcGVjLkZSQU1FX1JBVEUsXHJcbiAgICBkdXJhdGlvbjogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb24ud2hvbGVFbmRUaW1lO1xyXG4gICAgfSxcclxuICAgIHJlbmRlclNwZWM6IChzcGVjLCBzdGF0dXMsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdjbGVhcicsIG1zZzogJ3JlbmRlcmluZy4uLicgfTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2FuaXMuY2FuaXNPYmopLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYW5pcy5jYW5pc09iaiA9IG5ldyBDYW5pc1NwZWMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLmluaXQoc3BlYywgc3RhdHVzKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjYW5pcy5jYW5pc09iai5oYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLnJlbmRlcihjYWxsYmFjaywgc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBbmltYXRpb24ucmVzZXRBbGwoKTtcclxuICAgIH0sXHJcbiAgICBleHBvcnRKU09OOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIENhbmlzU3BlYy5sb3R0aWVKU09OO1xyXG4gICAgfSxcclxuICAgIHRlc3Q6IGZ1bmN0aW9uIChzcGVjKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgYSB0ZXN0ISAnLCBzcGVjKTtcclxuICAgIH1cclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuTGF5ZXJGYWN0b3J5ID0gZXhwb3J0cy5KU01vdmluTGF5ZXIgPSB2b2lkIDA7XHJcblxyXG52YXIgX2Vhc2luZyA9IHJlcXVpcmUoXCIuL2Vhc2luZ1wiKTtcclxuXHJcbnZhciBfcmVuZGVyID0gcmVxdWlyZShcIi4vcmVuZGVyXCIpO1xyXG5cclxudmFyIF9oZWxwZXIgPSByZXF1aXJlKFwiLi9oZWxwZXJcIik7XHJcblxyXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1dWlkL3Y0XCIpKTtcclxuXHJcbnZhciBfcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxyXG5cclxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cclxuXHJcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XHJcblxyXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cclxuXHJcbnZhciBKU01vdmluTGF5ZXIgPVxyXG4vKiNfX1BVUkVfXyovXHJcbmZ1bmN0aW9uICgpIHtcclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbkxheWVyLCBbe1xyXG4gICAga2V5OiBcImdldERlZmF1bHRQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wZXJ0eShrZXkpIHtcclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICBjYXNlICdwJzpcclxuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGtleSA9PSAnYScgPyB0aGlzLmFuY2hvciA6IHRoaXMucG9zaXRpb24pKTtcclxuXHJcbiAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICByZXR1cm4gWzEwMCwgMTAwLCAxMDBdO1xyXG5cclxuICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgIHJldHVybiAxMDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RtJzpcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHM6IHtcclxuICAgICAgICAgICAgICBrOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGU6IHtcclxuICAgICAgICAgICAgICBrOiAxMDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbzoge1xyXG4gICAgICAgICAgICAgIGs6IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNvbnZlcnRUb1N0YXRpY1Byb3BlcnR5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRvU3RhdGljUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSkge1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHJhbnNmb3JtW2tleV0uYSA9PSAxKSB7XHJcbiAgICAgICAgdmFyIHN0YXRpY1ZhbHVlID0gdHJhbnNmb3JtW2tleV0ua1swXS5zO1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHN0YXRpY1ZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSB8fCAhdHJhbnNmb3JtW2tleV0uYSkge1xyXG4gICAgICAgIGlmIChrZXkgPT0gJ2EnKSB7XHJcbiAgICAgICAgICB0aGlzLmFuY2hvciA9IHRyYW5zZm9ybVtrZXldID8gdHJhbnNmb3JtW2tleV0uayA6IFswLCAwLCAwXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT0gJ3AnKSB7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdHJhbnNmb3JtW2tleV0gPyB0cmFuc2Zvcm1ba2V5XS5rIDogWzAsIDAsIDBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB7XHJcbiAgICAgICAgICBhOiAxLFxyXG4gICAgICAgICAgazogW11cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZEtleWZyYW1lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkS2V5ZnJhbWUodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgdmFyIGlkeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogLTE7XHJcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgZWFzaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB3cmFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB0cnVlO1xyXG4gICAgICB2YXIgZXhpc3RLZXlmcmFtZSA9IHRyYW5zZm9ybVtrZXldLmsuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHgudCA9PSB0aW1lO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHJlYWR5VG9TZXQ7XHJcblxyXG4gICAgICBpZiAoZXhpc3RLZXlmcmFtZS5sZW5ndGgpIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0gZXhpc3RLZXlmcmFtZVswXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0ge1xyXG4gICAgICAgICAgdDogdGltZSxcclxuICAgICAgICAgIHM6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBwcmV2aW91c0tleWZyYW1lQ291bnQgPSB0cmFuc2Zvcm1ba2V5XS5rLnJlZHVjZShmdW5jdGlvbiAocCwgeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHgudCA8IHRpbWUgPyBwICsgMSA6IHA7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0uay5zcGxpY2UocHJldmlvdXNLZXlmcmFtZUNvdW50LCAwLCByZWFkeVRvU2V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVhc2luZykge1xyXG4gICAgICAgIHJlYWR5VG9TZXQubyA9IHtcclxuICAgICAgICAgIHg6IGVhc2luZ1swXVswXSxcclxuICAgICAgICAgIHk6IGVhc2luZ1swXVsxXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZHlUb1NldC5pID0ge1xyXG4gICAgICAgICAgeDogZWFzaW5nWzFdWzBdLFxyXG4gICAgICAgICAgeTogZWFzaW5nWzFdWzFdXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkeCA+PSAwKSB7XHJcbiAgICAgICAgcmVhZHlUb1NldC5zW2lkeF0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0LnMgPSB3cmFwICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgPyBbdmFsdWVdIDogdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZmluZFByb3BlcnR5Q29uZmlnXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5yb290LnNoYXBlc1swXS5pdC5maW5kKGZ1bmN0aW9uIChzaGFwZSkge1xyXG4gICAgICAgIHJldHVybiBzaGFwZS50eSA9PSBrZXk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJmaW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZ1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICB2YXIgZmluZCA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKGtleSk7XHJcbiAgICAgIGlmIChmaW5kKSByZXR1cm4gZmluZDtcclxuICAgICAgdmFyIGhhc1RyYW5zZm9ybSA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKCd0cicpO1xyXG5cclxuICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe1xyXG4gICAgICAgIHR5OiBrZXlcclxuICAgICAgfSwgdGhpcy5nZXREZWZhdWx0UHJvcGVydHkoa2V5KSk7XHJcblxyXG4gICAgICBpZiAoaGFzVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwU2hhcGVzID0gdGhpcy5yb290LnNoYXBlc1swXS5pdDtcclxuICAgICAgICBncm91cFNoYXBlcy5zcGxpY2UoZ3JvdXBTaGFwZXMubGVuZ3RoIC0gMSwgMCwgY29uZmlnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJvb3Quc2hhcGVzWzBdLml0LnB1c2goY29uZmlnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY29tbW9uUHJvcGVydHlNYXBwaW5nXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSkge1xyXG4gICAgICB2YXIgYmFzZSwgaywgaW5kZXg7XHJcblxyXG4gICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgJ3NjYWxlWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdzJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzY2FsZVknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IDE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnYW5jaG9yWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdhJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdhbmNob3JZJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3Qua3M7XHJcbiAgICAgICAgICBrID0gJ2EnO1xyXG4gICAgICAgICAgaW5kZXggPSAxO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncCc7XHJcbiAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdwJztcclxuICAgICAgICAgIGluZGV4ID0gMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdyb3RhdGUnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncic7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ29wYWNpdHknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1TdGFydCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZygndG0nKTtcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1FbmQnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMuZmluZE9ySW5zZXJ0UHJvcGVydHlDb25maWcoJ3RtJyk7XHJcbiAgICAgICAgICBrID0gJ2UnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICd0cmltT2Zmc2V0JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKCd0bScpO1xyXG4gICAgICAgICAgayA9ICdvJztcclxuICAgICAgICAgIGluZGV4ID0gLTE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnZmlsbENvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnZmwnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZUNvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZVdpZHRoJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAndyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3NoYXBlJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc2gnKTtcclxuICAgICAgICAgIGsgPSAna3MnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdmaWxsT3BhY2l0eSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kUHJvcGVydHlDb25maWcoJ2ZsJyk7XHJcbiAgICAgICAgICBrID0gJ28nO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzdHJva2VPcGFjaXR5JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBbYmFzZSwgaywgaW5kZXhdO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ1cGRhdGVUaW1lUmFuZ2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUaW1lUmFuZ2UoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QudmFsdWVzKHRoaXMudGltZVJhbmdlKSkuY29uY2F0KFsxXSkpO1xyXG4gICAgfVxyXG4gIH1dKTtcclxuXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbkxheWVyKHJlZikge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW5MYXllcik7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdFwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFuY2hvclwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBvc2l0aW9uXCIsIHZvaWQgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidGltZVJhbmdlXCIsIHt9KTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSByZWY7XHJcbiAgICB0aGlzLmFuY2hvciA9IFswLCAwLCAwXTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMCwgMCwgMF07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBrZXkgdGhlIG5hbWUgb2YgcHJvcGVydHkgdG8gYmUgc2V0XHJcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBzZXRcclxuICAgKi9cclxuXHJcblxyXG4gIF9jcmVhdGVDbGFzcyhKU01vdmluTGF5ZXIsIFt7XHJcbiAgICBrZXk6IFwic2V0U3RhdGljUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGF0aWNQcm9wZXJ0eShrZXksIHZhbHVlKSB7XHJcbiAgICAgIHRoaXMudGltZVJhbmdlW2tleV0gPSAxO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgdmFsdWUudW5pZm9ybSgpO1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUucGF0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGJhc2UsIGssIGluZGV4O1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TSA9IHRoaXMuY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSk7XHJcblxyXG4gICAgICB2YXIgX3RoaXMkY29tbW9uUHJvcGVydHlNMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJGNvbW1vblByb3BlcnR5TSwgMyk7XHJcblxyXG4gICAgICBiYXNlID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlswXTtcclxuICAgICAgayA9IF90aGlzJGNvbW1vblByb3BlcnR5TTJbMV07XHJcbiAgICAgIGluZGV4ID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlsyXTtcclxuXHJcbiAgICAgIGlmICghayB8fCBpbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5yb290LnR5ID09IDUpIHtcclxuICAgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5yb290LnQuZDtcclxuICAgICAgICAgICAgICBkb2MuayA9IFtkb2Mua1swXV07XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0udCA9IDA7XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0ucy50ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9TdGF0aWNQcm9wZXJ0eShiYXNlLCBrKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkgYmFzZVtrXS5rW2luZGV4XSA9IHZhbHVlO2Vsc2UgYmFzZVtrXS5rID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ga2V5IHRoZSBuYW1lIG9mIHByb3BlcnR5IHRvIGJlIHNldFxyXG4gICAgICogQHBhcmFtIHN0YXJ0RnJhbWUgZnJhbWUgbnVtYmVyIHRvIHN0YXJ0IHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRGcmFtZSBmcmFtZSBudW1iZXIgdG8gZW5kIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIHZhbHVlIHRvIGJlIHNldCBpbiBzdGFydCBvZiBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSB2YWx1ZSB0byBiZSBzZXQgaW4gZW5kIG9mIGFuaW1hdGlvblxyXG4gICAgICogQHBhcmFtIGVhc2luZyBlYXNpbmcgZnVuY3Rpb24sIGRlZmF1bHQgaXMgbGluZWFyXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInNldEFuaW1hdGFibGVQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFuaW1hdGFibGVQcm9wZXJ0eShrZXksIHN0YXJ0RnJhbWUsIGVuZEZyYW1lLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZWFzaW5nKSB7XHJcbiAgICAgIGlmIChlbmRGcmFtZSA8PSBzdGFydEZyYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmQgZnJhbWUgc2hvdWxkIGJlIGxhcmdlciB0aGFuIHN0YXJ0IGZyYW1lLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRpbWVSYW5nZVtrZXldID0gTWF0aC5tYXgodGhpcy50aW1lUmFuZ2Vba2V5XSB8fCAwLCBlbmRGcmFtZSArIDEpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKCFlYXNpbmcpIHtcclxuICAgICAgICBlYXNpbmcgPSBfZWFzaW5nLkVhc2luZ0ZhY3RvcnkubGluZWFyKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGFydFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyIHx8IGVuZFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICByZXR1cm4gdiBpbnN0YW5jZW9mIF9wYXRoLlBhdGhNYWtlciAmJiB2LnVuaWZvcm0oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0VmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIgJiYgZW5kVmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIpIHtcclxuICAgICAgICAgIHZhciBzdGFydExpbmVDb3VudCA9IHN0YXJ0VmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICB2YXIgZW5kTGluZUNvdW50ID0gZW5kVmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgaWYgKCEoc3RhcnRMaW5lQ291bnQgPD0gMCAmJiBlbmRMaW5lQ291bnQgPD0gMCkpIHtcclxuICAgICAgICAgICAgaWYgKE1hdGgubWluKHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpIDw9IDAgJiYgTWF0aC5tYXgoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG5lZWRDb3B5ID0gc3RhcnRMaW5lQ291bnQgPD0gMCA/IHN0YXJ0VmFsdWUgOiBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICB2YXIgbmVlZExlbmd0aCA9IE1hdGgubWF4KHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpO1xyXG4gICAgICAgICAgICAgIFsnaScsICdvJywgJ3YnXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIG5lZWRDb3B5LnBhdGhba2V5XSA9IEFycmF5KG5lZWRMZW5ndGgpLmZpbGwobmVlZENvcHkucGF0aFtrZXldLmxlbmd0aCA/IG5lZWRDb3B5LnBhdGhba2V5XVswXSA6IFswLCAwXSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNvbW1vbk11bHRpcGxlID0gKDAsIF9oZWxwZXIubGVhc3RDb21tb25NdWx0aXBsZSkoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCk7XHJcbiAgICAgICAgICAgICAgc3RhcnRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gc3RhcnRMaW5lQ291bnQpKTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gZW5kTGluZUNvdW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfbWFwID0gW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5tYXAoZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgIHJldHVybiB2IGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyID8gdi5wYXRoIDogdjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XHJcblxyXG4gICAgICAgIHN0YXJ0VmFsdWUgPSBfbWFwMlswXTtcclxuICAgICAgICBlbmRWYWx1ZSA9IF9tYXAyWzFdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgIHdyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTMgPSB0aGlzLmNvbW1vblByb3BlcnR5TWFwcGluZyhrZXkpO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRjb21tb25Qcm9wZXJ0eU0zLCAzKTtcclxuXHJcbiAgICAgIGJhc2UgPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzBdO1xyXG4gICAgICBrID0gX3RoaXMkY29tbW9uUHJvcGVydHlNNFsxXTtcclxuICAgICAgaW5kZXggPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzJdO1xyXG5cclxuICAgICAgaWYgKCFrIHx8IGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QudHkgPT0gNSkge1xyXG4gICAgICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3QudDtcclxuICAgICAgICAgICAgICB2YXIgdGV4dFByb3AgPSBiYXNlLmQua1swXS5zO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBTdGFydFZhbHVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0ZXh0UHJvcCkpO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBFbmRWYWx1ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGV4dFByb3ApKTtcclxuICAgICAgICAgICAgICB0bXBTdGFydFZhbHVlLnQgPSBzdGFydFZhbHVlO1xyXG4gICAgICAgICAgICAgIHRtcEVuZFZhbHVlLnQgPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICBzdGFydFZhbHVlID0gdG1wU3RhcnRWYWx1ZTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IHRtcEVuZFZhbHVlO1xyXG4gICAgICAgICAgICAgIGsgPSAnZCc7XHJcbiAgICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICB3cmFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGVhc2luZyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkoYmFzZSwgayk7XHJcbiAgICAgICAgdGhpcy5hZGRLZXlmcmFtZShiYXNlLCBrLCBpbmRleCwgc3RhcnRGcmFtZSwgc3RhcnRWYWx1ZSwgZWFzaW5nLCB3cmFwKTtcclxuICAgICAgICB0aGlzLmFkZEtleWZyYW1lKGJhc2UsIGssIGluZGV4LCBlbmRGcmFtZSwgZW5kVmFsdWUsIF9lYXNpbmcuRWFzaW5nRmFjdG9yeS5saW5lYXIoKSwgd3JhcCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluTGF5ZXI7XHJcbn0oKTtcclxuXHJcbmV4cG9ydHMuSlNNb3ZpbkxheWVyID0gSlNNb3ZpbkxheWVyO1xyXG5cclxudmFyIExheWVyRmFjdG9yeSA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIExheWVyRmFjdG9yeSgpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXllckZhY3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKExheWVyRmFjdG9yeSwgbnVsbCwgW3tcclxuICAgIGtleTogXCJnZW5lcmF0ZVRyYW5zZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlVHJhbnNmb3JtKGNvb3JkaW5hdGUpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBvOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICByOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcDoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFtjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYToge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFswLCAwLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgczoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFsxMDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlIHRoZSBib3VuZGluZyBib3ggb2Ygc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZHMgdG8gY2FsY3VsYXRlIHRoZSBib3VuZGluZyBib3hcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiYm91bmRpbmdCb3hcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBib3VuZGluZ0JveChkb20pIHtcclxuICAgICAgdmFyIGJvdW5kaW5nQm94ID0gKDAsIF9oZWxwZXIuZ2V0Qm91bmRpbmdCb3gpKGRvbSkubWFwKGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIGkgPCAyID8gdiAtIDEgOiB2ICsgMTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlY3QuYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KGJvdW5kaW5nQm94KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSB0aGUgc2FtZSBzaGFwZSBvZiBzdmcgcGF0aFxyXG4gICAgICogQHBhcmFtIGRvbSBzdmcgcGF0aCBlbGVtZW50IHJlcHJlc2VudCB0aGUgc2hhcGVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2hhcGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGFwZShkb20pIHtcclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShjb29yZGluYXRlKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICBzaGFwZXM6ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIHJlY3RhbmdsZVxyXG4gICAgICogQHBhcmFtIGxlZnQgbGVmdCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gdG9wIHRvcCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgcmVjdFxyXG4gICAgICogQHBhcmFtIGhlaWdodCBoZWlnaHQgb2YgcmVjdFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJyZWN0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShbbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ3JlY3QnLCBbd2lkdGgsIGhlaWdodF0pXVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSBjeCB4IGNlbnRlciBvZiBlbGxpcHNlXHJcbiAgICAgKiBAcGFyYW0gY3kgeSBjZW50ZXIgb2YgZWxsaXBzZVxyXG4gICAgICogQHBhcmFtIHJ4IHggcmFkaXVzIG9mIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSByeSB5IHJhZGl1cyBvZiBlbGxpcHNlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVsbGlwc2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbGxpcHNlKGN4LCBjeSwgcngsIHJ5KSB7XHJcbiAgICAgIHZhciBsYXllciA9IHtcclxuICAgICAgICB0eTogNCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oW2N4IC0gcngsIGN5IC0gcnksIDIgKiByeCwgMiAqIHJ5XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ2VsbGlwc2UnLCBbcngsIHJ5XSldXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhIGxheWVyIGJ5IGFzc2V0IElEXHJcbiAgICAgKiBAcGFyYW0gaWQgYXNzZXQgcmVmZXJlbmNlIElEXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlZlwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZihpZCkge1xyXG4gICAgICB2YXIgbGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKHtcclxuICAgICAgICB0eTogMCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oWzAsIDAsIDAsIDBdKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICB3OiA5ZTksXHJcbiAgICAgICAgaDogOWU5LFxyXG4gICAgICAgIHJlZklkOiBpZFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGxheWVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBtYWtlIGEgY29tcGxleCBsYXllciBieSBhbiBhcmJpdHJhcnkgc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZCB0byBiZSBwYXJzZWRcclxuICAgICAqIEBwYXJhbSBhc3NldExpc3QgYSBsaXN0IGNvbnRhaW5zIGltYWdlL2xheWVyIGFzc2V0XHJcbiAgICAgKiBAcGFyYW0gZm9udExpc3QgYSBsaXN0IGNvbnRhaW5zIGZvbnQgYXNzZXRcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiaGllcmFyY2h5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGllcmFyY2h5KGRvbSwgYXNzZXRMaXN0LCBmb250TGlzdCkge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGRvbVR5cGU7XHJcblxyXG4gICAgICBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHVGV4dEVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gNTtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gMjtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xyXG4gICAgICAgIGRvbVR5cGUgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvbVR5cGUgPSA0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbGF5ZXIgPSB7XHJcbiAgICAgICAgdHk6IGRvbVR5cGUsXHJcbiAgICAgICAgZGRkOiAwLFxyXG4gICAgICAgIHNyOiAxLFxyXG4gICAgICAgIGFvOiAwLFxyXG4gICAgICAgIGtzOiB0aGlzLmdlbmVyYXRlVHJhbnNmb3JtKGRvbVR5cGUgPT0gMCA/IFswLCAwLCAwLCAwXSA6IGNvb3JkaW5hdGUpLFxyXG4gICAgICAgIGlwOiAwLFxyXG4gICAgICAgIG9wOiAxLFxyXG4gICAgICAgIHN0OiAwLFxyXG4gICAgICAgIGJtOiAwXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzd2l0Y2ggKGRvbVR5cGUpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICB2YXIgZG9tTGVhdmVzID0gKDAsIF9oZWxwZXIuZ2V0TGVhZk5vZGVzKShkb20pO1xyXG5cclxuICAgICAgICAgIGlmIChkb21MZWF2ZXMuZmlsdGVyKGZ1bmN0aW9uIChkb20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvbSBpbnN0YW5jZW9mIFNWR1RleHRFbGVtZW50IHx8IGRvbSBpbnN0YW5jZW9mIFNWR0ltYWdlRWxlbWVudDtcclxuICAgICAgICAgIH0pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcHJlY29tcExheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgICAgIHZhciBwcmVDb21wQXNzZXQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHByZUNvbXBSZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgICAgICAgIGRvbUxlYXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQgJiYgIShkIGluc3RhbmNlb2YgU1ZHR0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVDb21wQXNzZXQudW5zaGlmdChfdGhpcy5oaWVyYXJjaHkoZCwgYXNzZXRMaXN0LCBmb250TGlzdCkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByZUNvbXBBc3NldC5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgIGxheWVyLnJvb3Qub3AgPSA5ZTk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcmVjb21wTGF5ZXIudyA9IGNvb3JkaW5hdGVbMF0gKyBjb29yZGluYXRlWzJdICsgMTtcclxuICAgICAgICAgICAgcHJlY29tcExheWVyLmggPSBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSArIDE7XHJcbiAgICAgICAgICAgIHByZWNvbXBMYXllci5yZWZJZCA9IHByZUNvbXBSZWZJZDtcclxuICAgICAgICAgICAgYXNzZXRMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgIGlkOiBwcmVDb21wUmVmSWQsXHJcbiAgICAgICAgICAgICAgbGF5ZXJzOiBwcmVDb21wQXNzZXQubWFwKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxheWVyLnJvb3Q7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgX3NoYXBlTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgX3NoYXBlTGF5ZXIudHkgPSA0O1xyXG4gICAgICAgICAgICBfc2hhcGVMYXllci5rcyA9IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oY29vcmRpbmF0ZSk7XHJcbiAgICAgICAgICAgIF9zaGFwZUxheWVyLnNoYXBlcyA9ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgdmFyIGltYWdlTGF5ZXIgPSBsYXllcjtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlckltYWdlID0gKDAsIF9yZW5kZXIucmVuZGVySW1hZ2UpKGRvbSwgYXNzZXRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVySW1hZ2UyID0gX3NsaWNlZFRvQXJyYXkoX3JlbmRlckltYWdlLCAyKSxcclxuICAgICAgICAgICAgICBpbWFnZVJlZklkID0gX3JlbmRlckltYWdlMlswXSxcclxuICAgICAgICAgICAgICBpbWFnZUFzc2V0ID0gX3JlbmRlckltYWdlMlsxXTtcclxuXHJcbiAgICAgICAgICBpbWFnZUxheWVyLnJlZklkID0gaW1hZ2VSZWZJZDtcclxuICAgICAgICAgIGlmICghYXNzZXRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCA9PSBpbWFnZVJlZklkO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBhc3NldExpc3QucHVzaChpbWFnZUFzc2V0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICB2YXIgc2hhcGVMYXllciA9IGxheWVyO1xyXG4gICAgICAgICAgc2hhcGVMYXllci5zaGFwZXMgPSAoMCwgX3JlbmRlci5yZW5kZXIpKGRvbSk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgdmFyIHRleHRMYXllciA9IGxheWVyOyAvLyBtb3ZlIHRleHRMYXllcidzIHBvc2l0aW9uIHRvIHRleHQtYW5jaG9yLXJlbGF0ZWRcclxuXHJcbiAgICAgICAgICB2YXIgYmFzZUxpbmVIZWlnaHQgPSAoMCwgX2hlbHBlci5nZXRCYXNlbGluZUhlaWdodCkoZG9tKTtcclxuICAgICAgICAgIHZhciB0ZXh0QW5jaG9yID0gKDAsIF9oZWxwZXIuZW5jb2RlVGV4dEFuY2hvcikoZ2V0Q29tcHV0ZWRTdHlsZShkb20pLnRleHRBbmNob3IpO1xyXG4gICAgICAgICAgdmFyIHRleHRBbmNob3JXZWlnaHQgPSBbMCwgMSwgMC41XVt0ZXh0QW5jaG9yXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5wLmsgPSBbY29vcmRpbmF0ZVswXSArIGNvb3JkaW5hdGVbMl0gKiB0ZXh0QW5jaG9yV2VpZ2h0LCBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSAtIGJhc2VMaW5lSGVpZ2h0LCAwXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5vLmsgPSB+fihwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUoZG9tKS5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwKTtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlclRleHQgPSAoMCwgX3JlbmRlci5yZW5kZXJUZXh0KShkb20sIGZvbnRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVyVGV4dDIgPSBfc2xpY2VkVG9BcnJheShfcmVuZGVyVGV4dCwgMiksXHJcbiAgICAgICAgICAgICAgdGV4dERhdGEgPSBfcmVuZGVyVGV4dDJbMF0sXHJcbiAgICAgICAgICAgICAgZm9udCA9IF9yZW5kZXJUZXh0MlsxXTtcclxuXHJcbiAgICAgICAgICB0ZXh0TGF5ZXIudCA9IHRleHREYXRhO1xyXG4gICAgICAgICAgaWYgKCFmb250TGlzdC5saXN0LmZpbHRlcihmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZi5mTmFtZSA9PSBmb250LmZOYW1lO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBmb250TGlzdC5saXN0LnB1c2goZm9udCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG1vdmluTGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgICAgcmV0dXJuIG1vdmluTGF5ZXI7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gTGF5ZXJGYWN0b3J5O1xyXG59KCk7XHJcblxyXG5leHBvcnRzLkxheWVyRmFjdG9yeSA9IExheWVyRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlzWVhsbGNpNTBjeUpkTENKdVlXMWxjeUk2V3lKS1UwMXZkbWx1VEdGNVpYSWlMQ0pyWlhraUxDSktVMDlPSWl3aWNHRnljMlVpTENKemRISnBibWRwWm5raUxDSmhibU5vYjNJaUxDSndiM05wZEdsdmJpSXNJbk1pTENKcklpd2laU0lzSW04aUxDSjBjbUZ1YzJadmNtMGlMQ0poSWl3aVoyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUlpd2ljM1JoZEdsalZtRnNkV1VpTENKcFpIZ2lMQ0owYVcxbElpd2lkbUZzZFdVaUxDSmxZWE5wYm1jaUxDSjNjbUZ3SWl3aVpYaHBjM1JMWlhsbWNtRnRaU0lzSW1acGJIUmxjaUlzSW5naUxDSjBJaXdpY21WaFpIbFViMU5sZENJc0lteGxibWQwYUNJc0luQnlaWFpwYjNWelMyVjVabkpoYldWRGIzVnVkQ0lzSW5KbFpIVmpaU0lzSW5BaUxDSnpjR3hwWTJVaUxDSjVJaXdpYVNJc0lrRnljbUY1SWl3aWNtOXZkQ0lzSW5Ob1lYQmxjeUlzSW1sMElpd2labWx1WkNJc0luTm9ZWEJsSWl3aWRIa2lMQ0ptYVc1a1VISnZjR1Z5ZEhsRGIyNW1hV2NpTENKb1lYTlVjbUZ1YzJadmNtMGlMQ0pqYjI1bWFXY2lMQ0puY205MWNGTm9ZWEJsY3lJc0luQjFjMmdpTENKaVlYTmxJaXdpYVc1a1pYZ2lMQ0pyY3lJc0ltWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbklpd2liM0FpTENKTllYUm9JaXdpYldGNElpd2lUMkpxWldOMElpd2lkbUZzZFdWeklpd2lkR2x0WlZKaGJtZGxJaXdpY21WbUlpd2lkWEJrWVhSbFZHbHRaVkpoYm1kbElpd2lVR0YwYUUxaGEyVnlJaXdpZFc1cFptOXliU0lzSW5CaGRHZ2lMQ0pqYjIxdGIyNVFjbTl3WlhKMGVVMWhjSEJwYm1jaUxDSjFibVJsWm1sdVpXUWlMQ0prYjJNaUxDSmtJaXdpWTI5dWMyOXNaU0lzSW1WeWNtOXlJaXdpUlhKeWIzSWlMQ0pqYjI1MlpYSjBWRzlUZEdGMGFXTlFjbTl3WlhKMGVTSXNJbk4wWVhKMFJuSmhiV1VpTENKbGJtUkdjbUZ0WlNJc0luTjBZWEowVm1Gc2RXVWlMQ0psYm1SV1lXeDFaU0lzSWtWaGMybHVaMFpoWTNSdmNua2lMQ0pzYVc1bFlYSWlMQ0ptYjNKRllXTm9JaXdpZGlJc0luTjBZWEowVEdsdVpVTnZkVzUwSWl3aVpXNWtUR2x1WlVOdmRXNTBJaXdpYldsdUlpd2libVZsWkVOdmNIa2lMQ0p1WldWa1RHVnVaM1JvSWl3aVptbHNiQ0lzSW1OdmJXMXZiazExYkhScGNHeGxJaXdpZFhCellXMXdiR1VpTENKeWIzVnVaQ0lzSW0xaGNDSXNJblJsZUhSUWNtOXdJaXdpZEcxd1UzUmhjblJXWVd4MVpTSXNJblJ0Y0VWdVpGWmhiSFZsSWl3aVkyOXVkbVZ5ZEZSdlFXNXBiV0YwWVdKc1pWQnliM0JsY25SNUlpd2lZV1JrUzJWNVpuSmhiV1VpTENKTVlYbGxja1poWTNSdmNua2lMQ0pqYjI5eVpHbHVZWFJsSWl3aWNpSXNJbVJ2YlNJc0ltSnZkVzVrYVc1blFtOTRJaXdpY21WamRDSXNJbXhoZVdWeUlpd2laR1JrSWl3aWMzSWlMQ0poYnlJc0ltZGxibVZ5WVhSbFZISmhibk5tYjNKdElpd2lhWEFpTENKemRDSXNJbUp0SWl3aWJHVm1kQ0lzSW5SdmNDSXNJbmRwWkhSb0lpd2lhR1ZwWjJoMElpd2lZM2dpTENKamVTSXNJbko0SWl3aWNua2lMQ0pwWkNJc0luY2lMQ0pvSWl3aWNtVm1TV1FpTENKaGMzTmxkRXhwYzNRaUxDSm1iMjUwVEdsemRDSXNJbVJ2YlZSNWNHVWlMQ0pUVmtkVVpYaDBSV3hsYldWdWRDSXNJbE5XUjBsdFlXZGxSV3hsYldWdWRDSXNJbE5XUjBkRmJHVnRaVzUwSWl3aVpHOXRUR1ZoZG1Weklpd2ljSEpsWTI5dGNFeGhlV1Z5SWl3aWNISmxRMjl0Y0VGemMyVjBJaXdpY0hKbFEyOXRjRkpsWmtsa0lpd2lVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBJaXdpZFc1emFHbG1kQ0lzSW1ocFpYSmhjbU5vZVNJc0lteGhlV1Z5Y3lJc0luTm9ZWEJsVEdGNVpYSWlMQ0pwYldGblpVeGhlV1Z5SWl3aWFXMWhaMlZTWldaSlpDSXNJbWx0WVdkbFFYTnpaWFFpTENKMFpYaDBUR0Y1WlhJaUxDSmlZWE5sVEdsdVpVaGxhV2RvZENJc0luUmxlSFJCYm1Ob2IzSWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpZEdWNGRFRnVZMmh2Y2xkbGFXZG9kQ0lzSW5CaGNuTmxSbXh2WVhRaUxDSm1hV3hzVDNCaFkybDBlU0lzSW5SbGVIUkVZWFJoSWl3aVptOXVkQ0lzSW14cGMzUWlMQ0ptSWl3aVprNWhiV1VpTENKdGIzWnBia3hoZVdWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJTV0ZCTEZrN096czdPM1ZEUVV0clFrTXNSeXhGUVVGaE8wRkJRM0JETEdOQlFWRkJMRWRCUVZJN1FVRkRTU3hoUVVGTExFZEJRVXc3UVVGRFFTeGhRVUZMTEVkQlFVdzdRVUZEU1N4cFFrRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxTQ3hIUVVGSExFbEJRVWtzUjBGQlVDeEhRVUZoTEV0QlFVdEpMRTFCUVd4Q0xFZEJRVEpDTEV0QlFVdERMRkZCUVM5RExFTkJRVmdzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWRCUVV3N1FVRkRTU3hwUWtGQlR5eERRVUZETEVkQlFVUXNSVUZCVFN4SFFVRk9MRVZCUVZjc1IwRkJXQ3hEUVVGUU96dEJRVU5LTEdGQlFVc3NSMEZCVER0QlFVTkpMR2xDUVVGUExFZEJRVkE3TzBGQlEwb3NZVUZCU3l4SFFVRk1PMEZCUTBrc2FVSkJRVThzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWxCUVV3N1FVRkRTU3hwUWtGQlR6dEJRVU5JUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwTXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGRVFUdEJRVWxJUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwUXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGS1FUdEJRVTlJUlN4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwWXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW83UVVGUVFTeFhRVUZRT3p0QlFWZEtPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRWFpDVWp0QlFYbENTRHM3T3pSRFFVTXJRa2NzVXl4RlFVRm5RbFlzUnl4RlFVRmhPMEZCUTNwRUxGVkJRVWtzUTBGQlExVXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRV1FzUlVGQmNVSTdRVUZEYWtKVkxGRkJRVUZCTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFZEJRV2xDTzBGQlEySlhMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeERRVVJWTzBGQlJXSktMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeExRVUZMU3l4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJN1FVRkdWU3hUUVVGcVFqdEJRVWxJT3p0QlFVTkVMRlZCUVVsVkxGTkJRVk1zUTBGQlExWXNSMEZCUkN4RFFVRlVMRU5CUVdWWExFTkJRV1lzU1VGQmIwSXNRMEZCZUVJc1JVRkJNa0k3UVVGRGRrSXNXVUZCVFVVc1YwRkJWeXhIUVVGSFNDeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDUkN4RFFVRjRRenRCUVVOQlNTeFJRVUZCUVN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWp0QlFVTmlWeXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFVlR0QlFVVmlTaXhWUVVGQlFTeERRVUZETEVWQlFVVk5PMEZCUmxVc1UwRkJha0k3UVVGSlNEdEJRVU5LT3pzN1owUkJRMjFEU0N4VExFVkJRV2RDVml4SExFVkJRV0U3UVVGRE4wUXNWVUZCU1N4RFFVRkRWU3hUUVVGVExFTkJRVU5XTEVkQlFVUXNRMEZCVml4SlFVRnRRaXhEUVVGRFZTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFZ5eERRVUYyUXl4RlFVRXdRenRCUVVOMFF5eFpRVUZKV0N4SFFVRkhMRWxCUVVrc1IwRkJXQ3hGUVVGblFqdEJRVU5hTEdWQlFVdEpMRTFCUVV3c1IwRkJZMDBzVTBGQlV5eERRVUZEVml4SFFVRkVMRU5CUVZRc1IwRkJhVUpWTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFTkJRV1ZQTEVOQlFXaERMRWRCUVc5RExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFMRU5CUVd4RU8wRkJRMGc3TzBGQlEwUXNXVUZCU1ZBc1IwRkJSeXhKUVVGSkxFZEJRVmdzUlVGQlowSTdRVUZEV2l4bFFVRkxTeXhSUVVGTUxFZEJRV2RDU3l4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWxVc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJhRU1zUjBGQmIwTXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGQmNFUTdRVUZEU0RzN1FVRkRSRWNzVVVGQlFVRXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRVlFzUjBGQmFVSTdRVUZEWWxjc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlJGVTdRVUZGWWtvc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlJsVXNVMEZCYWtJN1FVRkpTRHRCUVVOS096czdaME5CUTIxQ1J5eFRMRVZCUVdkQ1ZpeEhMRVZCUVN0SE8wRkJRVUVzVlVGQmJFZGpMRWRCUVd0SExIVkZRVUZ3Uml4RFFVRkRMRU5CUVcxR08wRkJRVUVzVlVGQmFFWkRMRWxCUVdkR08wRkJRVUVzVlVGQmJFVkRMRXRCUVd0Rk8wRkJRVUVzVlVGQkwwTkRMRTFCUVN0RE8wRkJRVUVzVlVGQmRFSkRMRWxCUVhOQ0xIVkZRVUZPTEVsQlFVMDdRVUZETDBrc1ZVRkJUVU1zWVVGQllTeEhRVUZIVkN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeERRVUZsVHl4RFFVRm1MRU5CUVdsQ1lTeE5RVUZxUWl4RFFVRjNRaXhWUVVGRFF5eERRVUZFTzBGQlFVRXNaVUZCV1VFc1EwRkJReXhEUVVGRFF5eERRVUZHTEVsQlFVOVFMRWxCUVc1Q08wRkJRVUVzVDBGQmVFSXNRMEZCZEVJN1FVRkRRU3hWUVVGSlVTeFZRVUZLT3p0QlFVTkJMRlZCUVVsS0xHRkJRV0VzUTBGQlEwc3NUVUZCYkVJc1JVRkJNRUk3UVVGRGRFSkVMRkZCUVVGQkxGVkJRVlVzUjBGQlIwb3NZVUZCWVN4RFFVRkRMRU5CUVVRc1EwRkJNVUk3UVVGRFNDeFBRVVpFTEUxQlJVODdRVUZEU0Vrc1VVRkJRVUVzVlVGQlZTeEhRVUZITzBGQlExUkVMRlZCUVVGQkxFTkJRVU1zUlVGQlJWQXNTVUZFVFR0QlFVVlVWQ3hWUVVGQlFTeERRVUZETEVWQlFVVXNTMEZCUzAwc2EwSkJRVXdzUTBGQmQwSmFMRWRCUVhoQ08wRkJSazBzVTBGQllqdEJRVWxCTEZsQlFVMTVRaXh4UWtGQmNVSXNSMEZCUjJZc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJaaXhEUVVGcFFtMUNMRTFCUVdwQ0xFTkJRWGRDTEZWQlFVTkRMRU5CUVVRc1JVRkJXVTRzUTBGQldqdEJRVUZCTEdsQ1FVRjFRa0VzUTBGQlF5eERRVUZEUXl4RFFVRkdMRWRCUVUxUUxFbEJRVTRzUjBGQllWa3NRMEZCUXl4SFFVRkhMRU5CUVdwQ0xFZEJRWEZDUVN4RFFVRTFRenRCUVVGQkxGTkJRWGhDTEVWQlFYVkZMRU5CUVhaRkxFTkJRVGxDTzBGQlEwRnFRaXhSUVVGQlFTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENjVUlzVFVGQmFrSXNRMEZCZDBKSUxIRkNRVUY0UWl4RlFVRXJReXhEUVVFdlF5eEZRVUZyUkVZc1ZVRkJiRVE3UVVGRFNEczdRVUZEUkN4VlFVRkpUaXhOUVVGS0xFVkJRVms3UVVGRFVrMHNVVUZCUVVFc1ZVRkJWU3hEUVVGRFpDeERRVUZZTEVkQlFXVTdRVUZEV0Zrc1ZVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZpeERRVVJSTzBGQlJWaFpMRlZCUVVGQkxFTkJRVU1zUlVGQlJWb3NUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVkxFTkJRVlk3UVVGR1VTeFRRVUZtTzBGQlNVRk5MRkZCUVVGQkxGVkJRVlVzUTBGQlEwOHNRMEZCV0N4SFFVRmxPMEZCUTFoVUxGVkJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZWTEVOQlFWWXNRMEZFVVR0QlFVVllXU3hWUVVGQlFTeERRVUZETEVWQlFVVmFMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlZTeERRVUZXTzBGQlJsRXNVMEZCWmp0QlFVbElPenRCUVVORUxGVkJRVWxJTEVkQlFVY3NTVUZCU1N4RFFVRllMRVZCUVdNN1FVRkRWbE1zVVVGQlFVRXNWVUZCVlN4RFFVRkRha0lzUTBGQldDeERRVUZoVVN4SFFVRmlMRWxCUVc5Q1JTeExRVUZ3UWp0QlFVTklMRTlCUmtRc1RVRkZUenRCUVVOSVR5eFJRVUZCUVN4VlFVRlZMRU5CUVVOcVFpeERRVUZZTEVkQlFXVlpMRWxCUVVrc1NVRkJTU3hGUVVGRlJpeExRVUZMTEZsQlFWbGxMRXRCUVc1Q0xFTkJRVklzUjBGQmIwTXNRMEZCUTJZc1MwRkJSQ3hEUVVGd1F5eEhRVUU0UTBFc1MwRkJOMFE3UVVGRFNEdEJRVU5LT3pzN2RVTkJRekJDYUVJc1J5eEZRVUZoTzBGQlEzQkRMR0ZCUVZNc1MwRkJTMmRETEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhKRUxFTkJRWGxFUXl4SlFVRjZSQ3hEUVVFNFJDeFZRVUZCUXl4TFFVRkxPMEZCUVVFc1pVRkRkRVZCTEV0QlFVc3NRMEZCUTBNc1JVRkJUaXhKUVVGWmNrTXNSMEZFTUVRN1FVRkJRU3hQUVVGdVJTeERRVUZRTzBGQlIwZzdPenNyUTBGRGEwTkJMRWNzUlVGQllUdEJRVU0xUXl4VlFVRk5iVU1zU1VGQlNTeEhRVUZITEV0QlFVdEhMR3RDUVVGTUxFTkJRWGRDZEVNc1IwRkJlRUlzUTBGQllqdEJRVU5CTEZWQlFVbHRReXhKUVVGS0xFVkJRVlVzVDBGQlQwRXNTVUZCVUR0QlFVTldMRlZCUVUxSkxGbEJRVmtzUjBGQlJ5eExRVUZMUkN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRnlRanM3UVVGRFFTeFZRVUZOUlN4TlFVRk5PMEZCUTFKSUxGRkJRVUZCTEVWQlFVVXNSVUZCUlhKRE8wRkJSRWtzVTBGRlRDeExRVUZMV1N4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJc1EwRkdTeXhEUVVGYU96dEJRVWxCTEZWQlFVbDFReXhaUVVGS0xFVkJRV3RDTzBGQlEyUXNXVUZCVFVVc1YwRkJWeXhIUVVGTExFdEJRVXRVTEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhwRk8wRkJRMEZQTEZGQlFVRkJMRmRCUVZjc1EwRkJRMklzVFVGQldpeERRVUZ0UW1Fc1YwRkJWeXhEUVVGRGFrSXNUVUZCV2l4SFFVRnhRaXhEUVVGNFF5eEZRVUV5UXl4RFFVRXpReXhGUVVFNFEyZENMRTFCUVRsRE8wRkJRMGdzVDBGSVJDeE5RVWRQTzBGQlEwUXNZVUZCUzFJc1NVRkJUaXhEUVVFd1FrTXNUVUZCTVVJc1EwRkJhME1zUTBGQmJFTXNRMEZCUkN4RFFVRnhSRU1zUlVGQmNrUXNRMEZCZVVSUkxFbEJRWHBFTEVOQlFUaEVSaXhOUVVFNVJEdEJRVU5JT3p0QlFVTkVMR0ZCUVU5QkxFMUJRVkE3UVVGRFNEczdPekJEUVVNMlFuaERMRWNzUlVGQmFVVTdRVUZETTBZc1ZVRkJTVEpETEVsQlFVb3NSVUZCWlhCRExFTkJRV1lzUlVGQmMwTnhReXhMUVVGMFF6czdRVUZEUVN4alFVRlJOVU1zUjBGQlVqdEJRVU5KTEdGQlFVc3NVVUZCVER0QlFVTkpNa01zVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0WUxFbEJRVXdzUTBGQlZXRXNSVUZCYWtJN1FVRkRRWFJETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlVqdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1VVRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMWdzU1VGQlRDeERRVUZWWVN4RlFVRnFRanRCUVVOQmRFTXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZTTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhUUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFdDeEpRVUZNTEVOQlFWVmhMRVZCUVdwQ08wRkJRMEYwUXl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFWSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExGTkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRZTEVsQlFVd3NRMEZCVldFc1JVRkJha0k3UVVGRFFYUkRMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCVWp0QlFVTkJPenRCUVVOS0xHRkJRVXNzUjBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMxZ3NTVUZCVEN4RFFVRlZZU3hGUVVGcVFqdEJRVU5CZEVNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRlNPMEZCUTBFN08wRkJRMG9zWVVGQlN5eEhRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMV0N4SlFVRk1MRU5CUVZWaExFVkJRV3BDTzBGQlEwRjBReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVZJN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZGQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdFlMRWxCUVV3c1EwRkJWV0VzUlVGQmFrSTdRVUZEUVhSRExGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4VFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZoTEVWQlFXcENPMEZCUTBGMFF5eFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1YwRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMGNzTUVKQlFVd3NRMEZCWjBNc1NVRkJhRU1zUTBGQlVEdEJRVU5CZGtNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVZRN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZOQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdEhMREJDUVVGTUxFTkJRV2RETEVsQlFXaERMRU5CUVZBN1FVRkRRWFpETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZVTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhaUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFJ5d3dRa0ZCVEN4RFFVRm5ReXhKUVVGb1F5eERRVUZRTzBGQlEwRjJReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJWRHRCUVVOQk96dEJRVU5LTEdGQlFVc3NWMEZCVER0QlFVTkpSQ3hWUVVGQlFTeEpRVUZKTEVkQlFVY3NTMEZCUzB3c2EwSkJRVXdzUTBGQmQwSXNTVUZCZUVJc1EwRkJVRHRCUVVOQkwwSXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFWUTdRVUZEUVRzN1FVRkRTaXhoUVVGTExHRkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRNTEd0Q1FVRk1MRU5CUVhkQ0xFbEJRWGhDTEVOQlFWQTdRVUZEUVM5Q0xGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4aFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxUQ3hyUWtGQlRDeERRVUYzUWl4SlFVRjRRaXhEUVVGUU8wRkJRMEV2UWl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJPenRCUVVOS0xHRkJRVXNzVDBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMwd3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNRMEZCVUR0QlFVTkJMMElzVlVGQlFVRXNRMEZCUXl4SFFVRkhMRWxCUVVvN1FVRkRRWEZETEZWQlFVRkJMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVlE3UVVGRFFUczdRVUZEU2l4aFFVRkxMR0ZCUVV3N1FVRkRTVVFzVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0TUxHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFTkJRVkE3UVVGRFFTOUNMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRlVPMEZCUTBFN08wRkJRMG9zWVVGQlN5eGxRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMVEN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRlFPMEZCUTBFdlFpeFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CTzBGQmNrWlNPenRCUVhWR1FTeGhRVUZQTEVOQlFVTkVMRWxCUVVRc1JVRkJUM0JETEVOQlFWQXNSVUZCVlhGRExFdEJRVllzUTBGQlVEdEJRVU5JT3pzN2MwTkJRM2xDTzBGQlEzUkNMRmRCUVV0YUxFbEJRVXdzUTBGQlZXVXNSVUZCVml4SFFVRmxReXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NUMEZCUVVRc1NVRkJTU3h4UWtGQlVVVXNUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zUzBGQlMwTXNVMEZCYmtJc1EwRkJVaXhWUVVGMVF5eERRVUYyUXl4SFFVRnVRanRCUVVOSU96czdRVUZGUkN4M1FrRkJXVU1zUjBGQldpeEZRVUZ4UlR0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQkxIVkRRVEZOZEVJc1JVRXdUWE5DT3p0QlFVTnFSU3hUUVVGTGNrSXNTVUZCVEN4SFFVRlpjVUlzUjBGQldqdEJRVU5CTEZOQlFVdHFSQ3hOUVVGTUxFZEJRV01zUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJaRHRCUVVOQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNRMEZCYUVJN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN2MwTkJTMnRDVEN4SExFVkJRV3RDWjBJc1N5eEZRVUZaTzBGQlF6VkRMRmRCUVV0dlF5eFRRVUZNTEVOQlFXVndSQ3hIUVVGbUxFbEJRWE5DTEVOQlFYUkNPMEZCUTBFc1YwRkJTM05FTEdWQlFVdzdPMEZCUTBFc1ZVRkJTWFJETEV0QlFVc3NXVUZCV1hWRExHVkJRWEpDTEVWQlFXZERPMEZCUXpWQ2RrTXNVVUZCUVVFc1MwRkJTeXhEUVVGRGQwTXNUMEZCVGp0QlFVTkJlRU1zVVVGQlFVRXNTMEZCU3l4SFFVRkhRU3hMUVVGTExFTkJRVU41UXl4SlFVRmtPMEZCUTBnN08wRkJRMFFzVlVGQlNXUXNTVUZCU2l4RlFVRmxjRU1zUTBGQlppeEZRVUZ6UTNGRExFdEJRWFJET3p0QlFWQTBReXhyUTBGUmVrSXNTMEZCUzJNc2NVSkJRVXdzUTBGQk1rSXhSQ3hIUVVFelFpeERRVko1UWpzN1FVRkJRVHM3UVVGUk0wTXlReXhOUVVGQlFTeEpRVkl5UXp0QlFWRnlRM0JETEUxQlFVRkJMRU5CVW5GRE8wRkJVV3hEY1VNc1RVRkJRVUVzUzBGU2EwTTdPMEZCVXpWRExGVkJRVWtzUTBGQlEzSkRMRU5CUVVRc1NVRkJUWEZETEV0QlFVc3NTMEZCUzJVc1UwRkJjRUlzUlVGQkswSTdRVUZETTBJc1owSkJRVkV6UkN4SFFVRlNPMEZCUTBrc1pVRkJTeXhOUVVGTU8wRkJRMGtzWjBKQlFVa3NTMEZCUzJkRExFbEJRVXdzUTBGQlZVc3NSVUZCVml4SlFVRm5RaXhEUVVGd1FpeEZRVUYxUWp0QlFVTnVRaXhyUWtGQlRYVkNMRWRCUVVjc1IwRkJSeXhMUVVGTE5VSXNTVUZCVEN4RFFVRlZWaXhEUVVGV0xFTkJRV0YxUXl4RFFVRjZRanRCUVVOQlJDeGpRVUZCUVN4SFFVRkhMRU5CUVVOeVJDeERRVUZLTEVkQlFWRXNRMEZCUTNGRUxFZEJRVWNzUTBGQlEzSkVMRU5CUVVvc1EwRkJUeXhEUVVGUUxFTkJRVVFzUTBGQlVqdEJRVU5CY1VRc1kwRkJRVUVzUjBGQlJ5eERRVUZEY2tRc1EwRkJTaXhEUVVGTkxFTkJRVTRzUlVGQlUyVXNRMEZCVkN4SFFVRmhMRU5CUVdJN1FVRkRRWE5ETEdOQlFVRkJMRWRCUVVjc1EwRkJRM0pFTEVOQlFVb3NRMEZCVFN4RFFVRk9MRVZCUVZORUxFTkJRVlFzUTBGQldXZENMRU5CUVZvc1IwRkJaMEpPTEV0QlFXaENPMEZCUTBnN08wRkJRMFE3TzBGQlEwbzdRVUZEU1RoRExGbEJRVUZCTEU5QlFVOHNRMEZCUTBNc1MwRkJVaXhEUVVGakwwUXNSMEZCWkN4RlFVRnRRbWRDTEV0QlFXNUNPMEZCUTBFc2EwSkJRVTBzU1VGQlNXZEVMRXRCUVVvc1EwRkJWU3hyUWtGQlZpeERRVUZPTzBGQldGSTdRVUZoU0RzN1FVRkRSQ3hWUVVGSmNrSXNTVUZCU1N4SlFVRkpjRU1zUTBGQlVpeEpRVUZoY1VNc1MwRkJTeXhMUVVGTFpTeFRRVUV6UWl4RlFVRnpRenRCUVVOc1F5eGhRVUZMVFN4MVFrRkJUQ3hEUVVFMlFuUkNMRWxCUVRkQ0xFVkJRVzFEY0VNc1EwRkJia003UVVGRFFTeFpRVUZKY1VNc1MwRkJTeXhKUVVGSkxFTkJRV0lzUlVGRFNVUXNTVUZCU1N4RFFVRkRjRU1zUTBGQlJDeERRVUZLTEVOQlFWRkJMRU5CUVZJc1EwRkJWWEZETEV0QlFWWXNTVUZCYlVJMVFpeExRVUZ1UWl4RFFVUktMRXRCUjBreVFpeEpRVUZKTEVOQlFVTndReXhEUVVGRUxFTkJRVW9zUTBGQlVVRXNRMEZCVWl4SFFVRlpVeXhMUVVGYU8wRkJRMUE3UVVGRFNqdEJRVVZFT3pzN096czdPenM3T3pzN01FTkJVM05DYUVJc1J5eEZRVUZyUW10RkxGVXNSVUZCYjBKRExGRXNSVUZCYTBKRExGVXNSVUZCYVVKRExGRXNSVUZCWlhCRUxFMHNSVUZCZVVJN1FVRkRia2tzVlVGQlNXdEVMRkZCUVZFc1NVRkJTVVFzVlVGQmFFSXNSVUZCTkVJN1FVRkRlRUlzWTBGQlRTeEpRVUZKUml4TFFVRktMRU5CUVZVc09FTkJRVllzUTBGQlRqdEJRVU5JT3p0QlFVTkVMRmRCUVV0YUxGTkJRVXdzUTBGQlpYQkVMRWRCUVdZc1NVRkJjMEpuUkN4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlV5eExRVUZMUnl4VFFVRk1MRU5CUVdWd1JDeEhRVUZtTEV0QlFYVkNMRU5CUVdoRExFVkJRVzFEYlVVc1VVRkJVU3hIUVVGSExFTkJRVGxETEVOQlFYUkNPMEZCUTBFc1YwRkJTMklzWlVGQlREczdRVUZEUVN4VlFVRkpMRU5CUVVOeVF5eE5RVUZNTEVWQlFXRTdRVUZEVkVFc1VVRkJRVUVzVFVGQlRTeEhRVUZIY1VRc2MwSkJRV05ETEUxQlFXUXNSVUZCVkR0QlFVTklPenRCUVVORUxGVkJRVWxJTEZWQlFWVXNXVUZCV1dJc1pVRkJkRUlzU1VGQmJVTmpMRkZCUVZFc1dVRkJXV1FzWlVGQk0wUXNSVUZCYzBVN1FVRkRiRVVzVTBGQlEyRXNWVUZCUkN4RlFVRmhReXhSUVVGaUxFVkJRWFZDUnl4UFFVRjJRaXhEUVVFclFpeFZRVUZCUXl4RFFVRkRPMEZCUVVFc2FVSkJRVWxCTEVOQlFVTXNXVUZCV1d4Q0xHVkJRV0lzU1VGQk1FSnJRaXhEUVVGRExFTkJRVU5xUWl4UFFVRkdMRVZCUVRsQ08wRkJRVUVzVTBGQmFFTTdPMEZCUTBFc1dVRkJTVmtzVlVGQlZTeFpRVUZaWWl4bFFVRjBRaXhKUVVGdFEyTXNVVUZCVVN4WlFVRlpaQ3hsUVVFelJDeEZRVUZ6UlR0QlFVTnNSU3hqUVVGTmJVSXNZMEZCWXl4SFFVRkhUaXhWUVVGVkxFTkJRVU5ZTEVsQlFWZ3NRMEZCWjBKblFpeERRVUZvUWl4RFFVRnRRbXBFTEUxQlFXNUNMRWRCUVRSQ0xFTkJRVzVFTzBGQlEwRXNZMEZCVFcxRUxGbEJRVmtzUjBGQlIwNHNVVUZCVVN4RFFVRkRXaXhKUVVGVUxFTkJRV05uUWl4RFFVRmtMRU5CUVdsQ2FrUXNUVUZCYWtJc1IwRkJNRUlzUTBGQkwwTTdPMEZCUTBFc1kwRkJTU3hGUVVGRmEwUXNZMEZCWXl4SlFVRkpMRU5CUVd4Q0xFbEJRWFZDUXl4WlFVRlpMRWxCUVVrc1EwRkJla01zUTBGQlNpeEZRVUZwUkR0QlFVTTNReXhuUWtGQlNUTkNMRWxCUVVrc1EwRkJRelJDTEVkQlFVd3NRMEZCVTBZc1kwRkJWQ3hGUVVGNVFrTXNXVUZCZWtJc1MwRkJNRU1zUTBGQk1VTXNTVUZCSzBNelFpeEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVM2xDTEdOQlFWUXNSVUZCZVVKRExGbEJRWHBDTEVsQlFYbERMRU5CUVRWR0xFVkJRU3RHTzBGQlF6TkdMR3RDUVVGSlJTeFJRVUZSTEVkQlFVZElMR05CUVdNc1NVRkJTU3hEUVVGc1FpeEhRVUZ6UWs0c1ZVRkJkRUlzUjBGQmJVTkRMRkZCUVd4RU8wRkJRMEVzYTBKQlFVbFRMRlZCUVZVc1IwRkJSemxDTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVGVVSXNZMEZCVkN4RlFVRjVRa01zV1VGQmVrSXNRMEZCYWtJN1FVRkRRU3hsUVVGRExFZEJRVVFzUlVGQlRTeEhRVUZPTEVWQlFWY3NSMEZCV0N4RlFVRm5Ra2dzVDBGQmFFSXNRMEZCZDBJc1ZVRkJRWGhGTEVkQlFVY3NSVUZCU1R0QlFVTXpRalpGTEdkQ1FVRkJRU3hSUVVGUkxFTkJRVU53UWl4SlFVRlVMRU5CUVdONlJDeEhRVUZrTEVsQlFYRkNLMElzUzBGQlN5eERRVUZESzBNc1ZVRkJSQ3hEUVVGTUxFTkJRV3RDUXl4SlFVRnNRaXhEUVVGMVFrWXNVVUZCVVN4RFFVRkRjRUlzU1VGQlZDeERRVUZqZWtRc1IwRkJaQ3hGUVVGdFFuZENMRTFCUVc1Q0xFZEJRVFJDY1VRc1VVRkJVU3hEUVVGRGNFSXNTVUZCVkN4RFFVRmpla1FzUjBGQlpDeEZRVUZ0UWl4RFFVRnVRaXhEUVVFMVFpeEhRVUZ2UkN4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRVE5GTEVOQlFYSkNPMEZCUTBnc1pVRkdSRHRCUVVkSUxHRkJUa1FzVFVGTlR6dEJRVU5JTEd0Q1FVRk5aMFlzWTBGQll5eEhRVUZITEdsRFFVRnZRazRzWTBGQmNFSXNSVUZCYjBORExGbEJRWEJETEVOQlFYWkNPMEZCUTBGUUxHTkJRVUZCTEZWQlFWVXNRMEZCUTJFc1VVRkJXQ3hEUVVGdlFtcERMRWxCUVVrc1EwRkJRMnRETEV0QlFVd3NRMEZCVjBZc1kwRkJZeXhIUVVGSFRpeGpRVUUxUWl4RFFVRndRanRCUVVOQlRDeGpRVUZCUVN4UlFVRlJMRU5CUVVOWkxGRkJRVlFzUTBGQmEwSnFReXhKUVVGSkxFTkJRVU5yUXl4TFFVRk1MRU5CUVZkR0xHTkJRV01zUjBGQlIwd3NXVUZCTlVJc1EwRkJiRUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCYkVKcFJTeHRRa0Z0UW5wRExFTkJRVU5RTEZWQlFVUXNSVUZCWVVNc1VVRkJZaXhGUVVGMVFtTXNSMEZCZGtJc1EwRkJNa0lzVlVGQlFWWXNRMEZCUXp0QlFVRkJMR2xDUVVGSlFTeERRVUZETEZsQlFWbHNRaXhsUVVGaUxFZEJRWGxDYTBJc1EwRkJReXhEUVVGRGFFSXNTVUZCTTBJc1IwRkJhME5uUWl4RFFVRjBRenRCUVVGQkxGTkJRVFZDTEVOQmJrSjVRenM3UVVGQlFUczdRVUZ0UW1wRlRDeFJRVUZCUVN4VlFXNUNhVVU3UVVGdFFuSkVReXhSUVVGQlFTeFJRVzVDY1VRN1FVRnZRbkpGT3p0QlFVTkVMRlZCUVVreFFpeEpRVUZLTzBGQlFVRXNWVUZCWlhCRExFTkJRV1k3UVVGQlFTeFZRVUZ6UTNGRExFdEJRWFJETzBGQlFVRXNWVUZCYVVVeFFpeEpRVUZKTEVkQlFVY3NTVUZCZUVVN08wRkJPVUp0U1N4dFEwRXJRbWhJTEV0QlFVdDNReXh4UWtGQlRDeERRVUV5UWpGRUxFZEJRVE5DTEVOQkwwSm5TRHM3UVVGQlFUczdRVUVyUW14Sk1rTXNUVUZCUVVFc1NVRXZRbXRKTzBGQkswSTFTSEJETEUxQlFVRkJMRU5CTDBJMFNEdEJRU3RDZWtoeFF5eE5RVUZCUVN4TFFTOUNlVWc3TzBGQlowTnVTU3hWUVVGSkxFTkJRVU55UXl4RFFVRkVMRWxCUVUxeFF5eExRVUZMTEV0QlFVdGxMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6TkNMR2RDUVVGUk0wUXNSMEZCVWp0QlFVTkpMR1ZCUVVzc1RVRkJURHRCUVVOSkxHZENRVUZKTEV0QlFVdG5ReXhKUVVGTUxFTkJRVlZMTEVWQlFWWXNTVUZCWjBJc1EwRkJjRUlzUlVGQmRVSTdRVUZEYmtKTkxHTkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZXTEVOQlFXcENPMEZCUTBFc2EwSkJRVWs0UkN4UlFVRlJMRWRCUVVkNlF5eEpRVUZKTEVOQlFVTnJRaXhEUVVGTUxFTkJRVTkwUkN4RFFVRlFMRU5CUVZNc1EwRkJWQ3hGUVVGWlJDeERRVUV6UWp0QlFVTkJMR3RDUVVGSkswVXNZVUZCWVN4SFFVRkhjRVlzU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxhVVlzVVVGQlppeERRVUZZTEVOQlFYQkNPMEZCUTBFc2EwSkJRVWxGTEZkQlFWY3NSMEZCUjNKR0xFbEJRVWtzUTBGQlEwTXNTMEZCVEN4RFFVRlhSQ3hKUVVGSkxFTkJRVU5GTEZOQlFVd3NRMEZCWldsR0xGRkJRV1lzUTBGQldDeERRVUZzUWp0QlFVTkJReXhqUVVGQlFTeGhRVUZoTEVOQlFVTXZSQ3hEUVVGa0xFZEJRV3RDT0VNc1ZVRkJiRUk3UVVGRFFXdENMR05CUVVGQkxGZEJRVmNzUTBGQlEyaEZMRU5CUVZvc1IwRkJaMElyUXl4UlFVRm9RanRCUVVOQlJDeGpRVUZCUVN4VlFVRlZMRWRCUVVkcFFpeGhRVUZpTzBGQlEwRm9RaXhqUVVGQlFTeFJRVUZSTEVkQlFVZHBRaXhYUVVGWU8wRkJRMEV2UlN4alFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1kwRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJNVUlzWTBGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVZBN1FVRkRTRHM3UVVGRFJEczdRVUZEU2p0QlFVTkpORU1zV1VGQlFVRXNUMEZCVHl4RFFVRkRReXhMUVVGU0xFTkJRV012UkN4SFFVRmtMRVZCUVcxQ2EwVXNWVUZCYmtJc1JVRkJLMEpETEZGQlFTOUNMRVZCUVhsRFF5eFZRVUY2UXl4RlFVRnhSRU1zVVVGQmNrUXNSVUZCSzBSd1JDeE5RVUV2UkR0QlFVTkJMR3RDUVVGTkxFbEJRVWtyUXl4TFFVRktMRU5CUVZVc2EwSkJRVllzUTBGQlRqdEJRV3hDVWp0QlFXOUNTRHM3UVVGRFJDeFZRVUZKY2tJc1NVRkJTU3hKUVVGSmNFTXNRMEZCVWl4SlFVRmhjVU1zUzBGQlN5eExRVUZMWlN4VFFVRXpRaXhGUVVGelF6dEJRVU5zUXl4aFFVRkxORUlzTWtKQlFVd3NRMEZCYVVNMVF5eEpRVUZxUXl4RlFVRjFRM0JETEVOQlFYWkRPMEZCUTBFc1lVRkJTMmxHTEZkQlFVd3NRMEZCYVVJM1F5eEpRVUZxUWl4RlFVRjFRbkJETEVOQlFYWkNMRVZCUVRCQ2NVTXNTMEZCTVVJc1JVRkJhVU56UWl4VlFVRnFReXhGUVVFMlEwVXNWVUZCTjBNc1JVRkJlVVJ1UkN4TlFVRjZSQ3hGUVVGcFJVTXNTVUZCYWtVN1FVRkRRU3hoUVVGTGMwVXNWMEZCVEN4RFFVRnBRamRETEVsQlFXcENMRVZCUVhWQ2NFTXNRMEZCZGtJc1JVRkJNRUp4UXl4TFFVRXhRaXhGUVVGcFEzVkNMRkZCUVdwRExFVkJRVEpEUlN4UlFVRXpReXhGUVVGeFJFTXNjMEpCUVdORExFMUJRV1FzUlVGQmNrUXNSVUZCTmtWeVJDeEpRVUUzUlR0QlFVTklPMEZCUTBvN096czdPenM3TzBsQlIxRjFSU3haT3pzN096czdPenM3YzBOQlEzZENReXhWTEVWQlFXbERPMEZCUXpsRUxHRkJRVTg3UVVGRFNHcEdMRkZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUlN4VlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGRVNqdEJRVVZEU2l4VlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGR1NpeFRRVVJCTzBGQlMwaHZSaXhSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZEUTJoR0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVWktMRk5CVEVFN1FVRlRTRzlDTEZGQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORGFFSXNWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJSRW83UVVGRlEwb3NWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRME50Uml4VlFVRlZMRU5CUVVNc1EwRkJSQ3hEUVVSWUxFVkJSVU5CTEZWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUmxnc1JVRkhReXhEUVVoRU8wRkJSa29zVTBGVVFUdEJRV2xDU0M5RkxGRkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRRU3hWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFU2p0QlFVVkRTaXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZEUXl4RFFVUkVMRVZCUlVNc1EwRkdSQ3hGUVVkRExFTkJTRVE3UVVGR1NpeFRRV3BDUVR0QlFYbENTRVFzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBOTExGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVTkRMRWRCUkVRc1JVRkZReXhIUVVaRUxFVkJSME1zUjBGSVJEdEJRVVpLTzBGQmVrSkJMRTlCUVZBN1FVRnJRMGc3UVVGRlJEczdPenM3T3p0blEwRkpiVUp4Uml4SExFVkJRWGxDTzBGQlEzaERMRlZCUVUxRExGZEJRVmNzUjBGQlJ5dzBRa0ZCWlVRc1IwRkJaaXhGUVVGdlFsUXNSMEZCY0VJc1EwRkJkMElzVlVGQlExWXNRMEZCUkN4RlFVRkpNME1zUTBGQlNqdEJRVUZCTEdWQlFWVkJMRU5CUVVNc1IwRkJSeXhEUVVGS0xFZEJRVkV5UXl4RFFVRkRMRWRCUVVjc1EwRkJXaXhIUVVGblFrRXNRMEZCUXl4SFFVRkhMRU5CUVRsQ08wRkJRVUVzVDBGQmVFSXNRMEZCY0VJN1FVRkRRU3hoUVVGUExFdEJRVXR4UWl4SlFVRk1MR2REUVVGaFJDeFhRVUZpTEVWQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096QkNRVWxoUkN4SExFVkJRWEZDTzBGQlF6bENMRlZCUVUxR0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVMUhMRXRCUVdsQ0xFZEJRVWM3UVVGRGRFSXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZFYTBJN1FVRkZkRUl5UkN4UlFVRkJRU3hIUVVGSExFVkJRVVVzUTBGR2FVSTdRVUZIZEVKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVaHJRanRCUVVsMFFrTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTbXRDTzBGQlMzUkNja1FzVVVGQlFVRXNSVUZCUlN4RlFVRkZMRXRCUVV0elJDeHBRa0ZCVEN4RFFVRjFRbFFzVlVGQmRrSXNRMEZNYTBJN1FVRk5kRUpWTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVU1clFqdEJRVTkwUW5KRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFWQnJRanRCUVZGMFFuTkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkpyUWp0QlFWTjBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CVkd0Q08wRkJWWFJDY2tVc1VVRkJRVUVzVFVGQlRTeEZRVUZGTEc5Q1FVRlBNa1FzUjBGQlVEdEJRVlpqTEU5QlFURkNPMEZCWVVFc1lVRkJUeXhKUVVGSk4wWXNXVUZCU2l4RFFVRnBRbWRITEV0QlFXcENMRU5CUVZBN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN08zbENRVTlaVVN4SkxFVkJRV05ETEVjc1JVRkJZVU1zU3l4RlFVRmxReXhOTEVWQlFXZENPMEZCUTJ4RkxGVkJRVTFZTEV0QlFXbENMRWRCUVVjN1FVRkRkRUl4UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGRWEwSTdRVUZGZEVJeVJDeFJRVUZCUVN4SFFVRkhMRVZCUVVVc1EwRkdhVUk3UVVGSGRFSkRMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVWhyUWp0QlFVbDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU210Q08wRkJTM1JDY2tRc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEV0QlFVdHpSQ3hwUWtGQlRDeERRVUYxUWl4RFFVRkRTU3hKUVVGRUxFVkJRVTlETEVkQlFWQXNSVUZCV1VNc1MwRkJXaXhGUVVGdFFrTXNUVUZCYmtJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKT0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRTFCUVdwQ0xFVkJRWGxDTEVOQlFVTjNSU3hMUVVGRUxFVkJRVkZETEUxQlFWSXNRMEZCZWtJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpNMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096czdPelJDUVU5bFdTeEZMRVZCUVZsRExFVXNSVUZCV1VNc1JTeEZRVUZaUXl4RkxFVkJRVms3UVVGRE0wUXNWVUZCVFdZc1MwRkJhVUlzUjBGQlJ6dEJRVU4wUWpGRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVUnJRanRCUVVWMFFqSkVMRkZCUVVGQkxFZEJRVWNzUlVGQlJTeERRVVpwUWp0QlFVZDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU0d0Q08wRkJTWFJDUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGS2EwSTdRVUZMZEVKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1MwRkJTM05FTEdsQ1FVRk1MRU5CUVhWQ0xFTkJRVU5STEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhGUVVGVlJDeEZRVUZGTEVkQlFVZEZMRVZCUVdZc1JVRkJiVUlzU1VGQlNVUXNSVUZCZGtJc1JVRkJNa0lzU1VGQlNVTXNSVUZCTDBJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKV0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRk5CUVdwQ0xFVkJRVFJDTEVOQlFVTTBSU3hGUVVGRUxFVkJRVXRETEVWQlFVd3NRMEZCTlVJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpMMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN08zZENRVWxYWjBJc1JTeEZRVUZwUWp0QlFVTjRRaXhWUVVGTmFFSXNTMEZCU3l4SFFVRkhMRWxCUVVsb1J5eFpRVUZLTEVOQlFXbENPMEZCUXpOQ2MwTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJSSFZDTzBGQlJUTkNNa1FzVVVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUm5OQ08wRkJSek5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGSWRVSTdRVUZKTTBKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVcDFRanRCUVVzelFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeExRVUZMYzBRc2FVSkJRVXdzUTBGQmRVSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQlFYWkNMRU5CVEhWQ08wRkJUVE5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGT2RVSTdRVUZQTTBKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRlFkVUk3UVVGUk0wSnpSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZTZFVJN1FVRlRNMEpETEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZSMVFqdEJRVlV6UWxVc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVkQlZuZENPMEZCVnpOQ1F5eFJRVUZCUVN4RFFVRkRMRVZCUVVVc1IwRllkMEk3UVVGWk0wSkRMRkZCUVVGQkxFdEJRVXNzUlVGQlJVZzdRVUZhYjBJc1QwRkJha0lzUTBGQlpEdEJRV05CTEdGQlFVOW9RaXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3T3pzN096aENRVTFwUWtnc1J5eEZRVUY1UW5WQ0xGTXNSVUZCYlVKRExGRXNSVUZCYVVJN1FVRkJRVHM3UVVGRE1VVXNWVUZCVFRGQ0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVbDVRaXhQUVVGS096dEJRVU5CTEZWQlFVbDZRaXhIUVVGSExGbEJRVmt3UWl4alFVRnVRaXhGUVVGdFF6dEJRVU12UWtRc1VVRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFWWTdRVUZEU0N4UFFVWkVMRTFCUlU4c1NVRkJTWHBDTEVkQlFVY3NXVUZCV1RKQ0xHVkJRVzVDTEVWQlFXOURPMEZCUTNaRFJpeFJRVUZCUVN4UFFVRlBMRWRCUVVjc1EwRkJWanRCUVVOSUxFOUJSazBzVFVGRlFTeEpRVUZKZWtJc1IwRkJSeXhaUVVGWk5FSXNWMEZCYmtJc1JVRkJaME03UVVGRGJrTklMRkZCUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZXTzBGQlEwZ3NUMEZHVFN4TlFVVkJPMEZCUTBoQkxGRkJRVUZCTEU5QlFVOHNSMEZCUnl4RFFVRldPMEZCUTBnN08wRkJRMFFzVlVGQlRYUkNMRXRCUVhsRUxFZEJRVWM3UVVGRE9VUXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVm5SaXhQUVVRd1JEdEJRVVU1UkhKQ0xGRkJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVWjVSRHRCUVVjNVJFTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTREJFTzBGQlNUbEVReXhSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZLTUVRN1FVRkxPVVJ5UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUzBGQlMzTkVMR2xDUVVGTUxFTkJRWFZDYTBJc1QwRkJUeXhKUVVGSkxFTkJRVmdzUjBGQlpTeERRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRVZCUVU4c1EwRkJVQ3hGUVVGVkxFTkJRVllzUTBGQlppeEhRVUU0UWpOQ0xGVkJRWEpFTEVOQlREQkVPMEZCVFRsRVZTeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRk9NRVE3UVVGUE9VUnlSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZRTUVRN1FVRlJPVVJ6UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGU01FUTdRVUZUT1VSRExGRkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFWUXdSQ3hQUVVGc1JUczdRVUZYUVN4alFVRlJaU3hQUVVGU08wRkJRMGtzWVVGQlN5eERRVUZNTzBGQlEwa3NZMEZCVFVrc1UwRkJVeXhIUVVGSExEQkNRVUZoTjBJc1IwRkJZaXhEUVVGc1FqczdRVUZEUVN4alFVRkpOa0lzVTBGQlV5eERRVUZEY2tjc1RVRkJWaXhEUVVGcFFpeFZRVUZCZDBVc1IwRkJSenRCUVVGQkxHMUNRVUZKUVN4SFFVRkhMRmxCUVZrd1FpeGpRVUZtTEVsQlFXbERNVUlzUjBGQlJ5eFpRVUZaTWtJc1pVRkJjRVE3UVVGQlFTeFhRVUZ3UWl4RlFVRjVSaTlHTEUxQlFUZEdMRVZCUVhGSE8wRkJRMnBITEdkQ1FVRk5hMGNzV1VGQldTeEhRVUZITTBJc1MwRkJja0k3UVVGRFFTeG5Ra0ZCVFRSQ0xGbEJRVFJDTEVkQlFVY3NSVUZCY2tNN1FVRkRRU3huUWtGQlRVTXNXVUZCV1N4SFFVRkhMRzlDUVVGeVFqdEJRVU5CU0N4WlFVRkJRU3hUUVVGVExFTkJRVU5xUkN4UFFVRldMRU5CUVd0Q0xGVkJRVUZZTEVOQlFVTXNSVUZCU1R0QlFVTnVRaXhyUWtGQlNVRXNRMEZCUXl4WlFVRlpaMFVzYTBKQlFXSXNTVUZCYlVNc1JVRkJSV2hGTEVOQlFVTXNXVUZCV1RKRUxGZEJRV1lzUTBGQmRrTXNSVUZCYjBVN1FVRkRhRVZITEdkQ1FVRkJRU3haUVVGWkxFTkJRVU5ITEU5QlFXSXNRMEZCY1VJc1MwRkJTU3hEUVVGRFF5eFRRVUZNTEVOQlFXVnNSU3hEUVVGbUxFVkJRV3RDYzBRc1UwRkJiRUlzUlVGQk5rSkRMRkZCUVRkQ0xFTkJRWEpDTzBGQlEwZzdRVUZEU2l4aFFVcEVPMEZCUzBGUExGbEJRVUZCTEZsQlFWa3NRMEZCUTI1RUxFOUJRV0lzUTBGQmNVSXNWVUZCUVhWQ0xFdEJRVXNzUlVGQlNUdEJRVU14UWtFc1kwRkJRVUVzUzBGQlN5eERRVUZETDBRc1NVRkJUaXhEUVVGWFpTeEZRVUZZTEVkQlFXZENMRWRCUVdoQ08wRkJRMGdzWVVGR1JEdEJRVWRCTWtVc1dVRkJRVUVzV1VGQldTeERRVUZEVml4RFFVRmlMRWRCUVdsQ2RFSXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJWaXhIUVVGblFrRXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJNVUlzUjBGQlowTXNRMEZCYWtRN1FVRkRRV2RETEZsQlFVRkJMRmxCUVZrc1EwRkJRMVFzUTBGQllpeEhRVUZwUW5aQ0xGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNSMEZCWjBKQkxGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFURkNMRWRCUVdkRExFTkJRV3BFTzBGQlEwRm5ReXhaUVVGQlFTeFpRVUZaTEVOQlFVTlNMRXRCUVdJc1IwRkJjVUpWTEZsQlFYSkNPMEZCUTBGVUxGbEJRVUZCTEZOQlFWTXNRMEZCUTNwRkxFbEJRVllzUTBGQlpUdEJRVU5ZY1VVc1kwRkJRVUVzUlVGQlJTeEZRVUZGWVN4WlFVUlBPMEZCUlZoSkxHTkJRVUZCTEUxQlFVMHNSVUZCUlV3c1dVRkJXU3hEUVVGRGVFTXNSMEZCWWl4RFFVRnBRaXhWUVVGQldTeExRVUZMTzBGQlFVRXNkVUpCUVVsQkxFdEJRVXNzUTBGQlF5OUVMRWxCUVZZN1FVRkJRU3hsUVVGMFFqdEJRVVpITEdGQlFXWTdRVUZKU0N4WFFXNUNSQ3hOUVcxQ1R6dEJRVU5JTEdkQ1FVRk5hVWNzVjBGQlZTeEhRVUZIYkVNc1MwRkJia0k3UVVGRFFXdERMRmxCUVVGQkxGZEJRVlVzUTBGQlF6VkdMRVZCUVZnc1IwRkJaMElzUTBGQmFFSTdRVUZEUVRSR0xGbEJRVUZCTEZkQlFWVXNRMEZCUTNCR0xFVkJRVmdzUjBGQlowSXNTMEZCUzNORUxHbENRVUZNTEVOQlFYVkNWQ3hWUVVGMlFpeERRVUZvUWp0QlFVTkJkVU1zV1VGQlFVRXNWMEZCVlN4RFFVRkRhRWNzVFVGQldDeEhRVUZ2UWl4dlFrRkJUekpFTEVkQlFWQXNRMEZCY0VJN1FVRkRTRHM3UVVGRFJEczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTmMwTXNWVUZCVlN4SFFVRkhia01zUzBGQmJrSTdPMEZCUkVvc05rSkJSWEZETEhsQ1FVRlpTQ3hIUVVGYUxFVkJRVzlEZFVJc1UwRkJjRU1zUTBGR2NrTTdRVUZCUVR0QlFVRkJMR05CUlZkblFpeFZRVVpZTzBGQlFVRXNZMEZGZFVKRExGVkJSblpDT3p0QlFVZEpSaXhWUVVGQlFTeFZRVUZWTEVOQlFVTm9RaXhMUVVGWUxFZEJRVzFDYVVJc1ZVRkJia0k3UVVGRFFTeGpRVUZKTEVOQlFVTm9RaXhUUVVGVExFTkJRVU12Uml4TlFVRldMRU5CUVdsQ0xGVkJRVUZVTEVOQlFVTTdRVUZCUVN4dFFrRkJTVUVzUTBGQlF5eERRVUZEYjBjc1JVRkJSaXhKUVVGUmIwSXNWVUZCV2p0QlFVRkJMRmRCUVd4Q0xFVkJRVEJETTBjc1RVRkJMME1zUlVGRFNUSkdMRk5CUVZNc1EwRkJRM3BGTEVsQlFWWXNRMEZCWlRCR0xGVkJRV1k3UVVGRFNqczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTlNDeFZRVUZWTEVkQlFVZHNReXhMUVVGdVFqdEJRVU5CYTBNc1ZVRkJRVUVzVlVGQlZTeERRVUZEYUVjc1RVRkJXQ3hIUVVGdlFpeHZRa0ZCVHpKRUxFZEJRVkFzUTBGQmNFSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExFTkJRVXc3UVVGRFNTeGpRVUZOZVVNc1UwRkJVeXhIUVVGSGRFTXNTMEZCYkVJc1EwRkVTaXhEUVVkSk96dEJRVU5CTEdOQlFVMTFReXhqUVVGakxFZEJRVWNzSzBKQlFXdENNVU1zUjBGQmJFSXNRMEZCZGtJN1FVRkRRU3hqUVVGTk1rTXNWVUZCVlN4SFFVRkhMRGhDUVVGcFFrTXNaMEpCUVdkQ0xFTkJRVU0xUXl4SFFVRkVMRU5CUVdoQ0xFTkJRWE5DTWtNc1ZVRkJka01zUTBGQmJrSTdRVUZEUVN4alFVRk5SU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUjBGQlVDeEZRVUZaUml4VlFVRmFMRU5CUVhwQ08wRkJRMEZHTEZWQlFVRkJMRk5CUVZNc1EwRkJRM2hHTEVWQlFWWXNRMEZCWTJ4Q0xFTkJRV1FzUTBGQmFVSndRaXhEUVVGcVFpeEhRVUZ4UWl4RFFVRkRiVVlzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5Ra0VzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5RaXRETEdkQ1FVRnFReXhGUVVGdFJDOURMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUjBGQlowSkJMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVEZDTEVkQlFXZERORU1zWTBGQmJrWXNSVUZCYlVjc1EwRkJia2NzUTBGQmNrSTdRVUZEUVVRc1ZVRkJRVUVzVTBGQlV5eERRVUZEZUVZc1JVRkJWaXhEUVVGamNFTXNRMEZCWkN4RFFVRnBRa1lzUTBGQmFrSXNSMEZCY1VJc1EwRkJReXhGUVVGRmJVa3NWVUZCVlN4RFFVRkRSaXhuUWtGQlowSXNRMEZCUXpWRExFZEJRVVFzUTBGQmFFSXNRMEZCYzBJclF5eFhRVUYwUWl4SlFVRnhReXhIUVVGMFF5eERRVUZXTEVkQlFYVkVMRWRCUVhwRUxFTkJRWFJDT3p0QlFWSktMRFJDUVZVMlFpeDNRa0ZCVnk5RExFZEJRVmdzUlVGQmEwTjNRaXhSUVVGc1F5eERRVlkzUWp0QlFVRkJPMEZCUVVFc1kwRlZWM2RDTEZGQlZsZzdRVUZCUVN4alFWVnhRa01zU1VGV2NrSTdPMEZCVjBsU0xGVkJRVUZCTEZOQlFWTXNRMEZCUXk5SExFTkJRVllzUjBGQlkzTklMRkZCUVdRN1FVRkRRU3hqUVVGSkxFTkJRVU40UWl4UlFVRlJMRU5CUVVNd1FpeEpRVUZVTEVOQlFXVXhTQ3hOUVVGbUxFTkJRWE5DTEZWQlFVRXlTQ3hEUVVGRE8wRkJRVUVzYlVKQlFVbEJMRU5CUVVNc1EwRkJRME1zUzBGQlJpeEpRVUZYU0N4SlFVRkpMRU5CUVVOSExFdEJRWEJDTzBGQlFVRXNWMEZCZGtJc1JVRkJhMFI0U0N4TlFVRjJSQ3hGUVVOSk5FWXNVVUZCVVN4RFFVRkRNRUlzU1VGQlZDeERRVUZsY0Vjc1NVRkJaaXhEUVVGdlFtMUhMRWxCUVhCQ08wRkJRMG83UVVGMFJGSTdPMEZCZDBSQkxGVkJRVTFKTEZWQlFWVXNSMEZCUnl4SlFVRkpiRW9zV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFXNUNPMEZCUTBFc1lVRkJUMnRFTEZWQlFWQTdRVUZEU0NJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lGTm9ZWEJsVEdGNVpYSXNJRlJsZUhSTVlYbGxjaXdnU1cxaFoyVk1ZWGxsY2l3Z1ZISmhibk5tYjNKdExDQkJjM05sZEhNc0lFWnZiblJ6TENCSGNtOTFjRk5vWVhCbExDQlFjbVZEYjIxd1RHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNBbkxpOWhibWx0WVhScGIyNG5YRzVwYlhCdmNuUWdleUJGWVhOcGJtZEdkVzVqZEdsdmJpd2dSV0Z6YVc1blJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dlpXRnphVzVuSjF4dWFXMXdiM0owSUhzZ2NtVnVaR1Z5VkdWNGRDd2djbVZ1WkdWeUxDQnlaVzVrWlhKSmJXRm5aU3dnY21WdVpHVnlVR3hoYVc1SGJIbHdhQ0I5SUdaeWIyMGdKeTR2Y21WdVpHVnlKenRjYm1sdGNHOXlkQ0I3SUdkbGRFSnZkVzVrYVc1blFtOTRMQ0JuWlhSTVpXRm1UbTlrWlhNc0lHZGxkRUpoYzJWc2FXNWxTR1ZwWjJoMExDQmxibU52WkdWVVpYaDBRVzVqYUc5eUxDQnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxJSDBnWm5KdmJTQW5MaTlvWld4d1pYSW5YRzVwYlhCdmNuUWdkWFZwWkNCbWNtOXRJQ2QxZFdsa0wzWTBKenRjYm1sdGNHOXlkQ0I3SUZCaGRHaE5ZV3RsY2lCOUlHWnliMjBnSnk0dmNHRjBhQ2M3WEc1Y2JuUjVjR1VnVTJWMFlXSnNaVXRsZVhNZ1BTQmNJbk5qWVd4bFdGd2lJSHdnWENKelkyRnNaVmxjSWlCOElGd2lZVzVqYUc5eVdGd2lJSHdnWENKaGJtTm9iM0paWENJZ2ZDQmNJbmhjSWlCOElGd2llVndpSUh3Z1hDSnliM1JoZEdWY0lpQjhJRndpYjNCaFkybDBlVndpSUh3Z0ozTm9ZWEJsSnlCOElDZG1hV3hzUTI5c2IzSW5JSHdnSjNSeWFXMVRkR0Z5ZENjZ2ZDQW5kSEpwYlVWdVpDY2dmQ0FuZEhKcGJVOW1abk5sZENjZ2ZDQW5jM1J5YjJ0bFEyOXNiM0luSUh3Z0ozTjBjbTlyWlZkcFpIUm9KeUI4SUNkMFpYaDBKeUI4SUNkbWFXeHNUM0JoWTJsMGVTY2dmQ0FuYzNSeWIydGxUM0JoWTJsMGVTZGNibHh1Wlhod2IzSjBJR05zWVhOeklFcFRUVzkyYVc1TVlYbGxjaUI3WEc0Z0lDQWdjSFZpYkdsaklISmxZV1J2Ym14NUlISnZiM1E2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlPMXh1SUNBZ0lIQnlhWFpoZEdVZ1lXNWphRzl5T2lCdWRXMWlaWEpiWFZ4dUlDQWdJSEJ5YVhaaGRHVWdjRzl6YVhScGIyNDZJRzUxYldKbGNsdGRYRzRnSUNBZ2NISnBkbUYwWlNCMGFXMWxVbUZ1WjJVNklIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ2JuVnRZbVZ5SUgwZ1BTQjdmVnh1SUNBZ0lIQnlhWFpoZEdVZ1oyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUtHdGxlVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RoSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozQW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHdGxlU0E5UFNBbllTY2dQeUIwYUdsekxtRnVZMmh2Y2lBNklIUm9hWE11Y0c5emFYUnBiMjRwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmN5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGc3hNREFzSURFd01Dd2dNVEF3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJ5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERXdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY2ljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURCY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozUnRKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoMGNtRnVjMlp2Y20wNklHRnVlU3dnYTJWNU9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGNtRnVjMlp2Y20xYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRXMnRsZVYwZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQjBhR2x6TG1kbGRFUmxabUYxYkhSUWNtOXdaWEowZVNoclpYa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSeVlXNXpabTl5YlZ0clpYbGRMbUVnUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGRHbGpWbUZzZFdVZ1BTQjBjbUZ1YzJadmNtMWJhMlY1WFM1cld6QmRMbk5jYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJWdHJaWGxkSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ2MzUmhkR2xqVm1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J3Y21sMllYUmxJR052Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwY21GdWMyWnZjbTFiYTJWNVhTQjhmQ0FoZEhKaGJuTm1iM0p0VzJ0bGVWMHVZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQTlQU0FuWVNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GdVkyaHZjaUE5SUhSeVlXNXpabTl5YlZ0clpYbGRJRDhnZEhKaGJuTm1iM0p0VzJ0bGVWMHVheUE2SUZzd0xDQXdMQ0F3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3RsZVNBOVBTQW5jQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVJRDBnZEhKaGJuTm1iM0p0VzJ0bGVWMGdQeUIwY21GdWMyWnZjbTFiYTJWNVhTNXJJRG9nV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xYmEyVjVYU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaE9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3M2SUZ0ZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmhaR1JMWlhsbWNtRnRaU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNzSUdsa2VEb2diblZ0WW1WeUlEMGdMVEVzSUhScGJXVTZJRzUxYldKbGNpd2dkbUZzZFdVNklFRnljbUY1UEdGdWVUNHNJR1ZoYzJsdVp6ODZJRVZoYzJsdVowWjFibU4wYVc5dUxDQjNjbUZ3T2lCaWIyOXNaV0Z1SUQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsZUdsemRFdGxlV1p5WVcxbElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NW1hV3gwWlhJb0tIZzZJR0Z1ZVNrZ1BUNGdlQzUwSUQwOUlIUnBiV1VwSUdGeklHRnVlVnRkWEc0Z0lDQWdJQ0FnSUd4bGRDQnlaV0ZrZVZSdlUyVjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYaHBjM1JMWlhsbWNtRnRaUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUWdQU0JsZUdsemRFdGxlV1p5WVcxbFd6QmRYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtlVlJ2VTJWMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFE2SUhScGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjem9nZEdocGN5NW5aWFJFWldaaGRXeDBVSEp2Y0dWeWRIa29hMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NXlaV1IxWTJVb0tIQTZJRzUxYldKbGNpd2dlRG9nWVc1NUtTQTlQaUI0TG5RZ1BDQjBhVzFsSUQ4Z2NDQXJJREVnT2lCd0xDQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFcydGxlVjB1YXk1emNHeHBZMlVvY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MExDQXdMQ0J5WldGa2VWUnZVMlYwS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsWVhOcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUXVieUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQmxZWE5wYm1kYk1GMWJNRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ1pXRnphVzVuV3pCZFd6RmRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGa2VWUnZVMlYwTG1rZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRG9nWldGemFXNW5XekZkV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIazZJR1ZoYzJsdVoxc3hYVnN4WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHBaSGdnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaSGxVYjFObGRDNXpXMmxrZUYwZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkhsVWIxTmxkQzV6SUQwZ2QzSmhjQ0FtSmlBaEtIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUQ4Z1czWmhiSFZsWFNBNklIWmhiSFZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQm1hVzVrVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNnb2RHaHBjeTV5YjI5MElHRnpJRk5vWVhCbFRHRjVaWElwTG5Ob1lYQmxjeUZiTUYwZ1lYTWdSM0p2ZFhCVGFHRndaU2t1YVhRaExtWnBibVFvYzJoaGNHVWdQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsTG5SNUlEMDlJR3RsZVZ4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdabWx1WkU5eVNXNXpaWEowVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm1sdVpDQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktHdGxlU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBibVFwSUhKbGRIVnliaUJtYVc1a1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdoaGMxUnlZVzV6Wm05eWJTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBjaWNwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Ym1acFp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVPaUJyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1MGFHbHpMbWRsZEVSbFptRjFiSFJRY205d1pYSjBlU2hyWlhrcElHRnpJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTlVjbUZ1YzJadmNtMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdkeWIzVndVMmhoY0dWeklEMGdLQ2gwYUdsekxuSnZiM1FnWVhNZ1UyaGhjR1ZNWVhsbGNpa3VjMmhoY0dWeklWc3dYU0JoY3lCSGNtOTFjRk5vWVhCbEtTNXBkQ0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3VTJoaGNHVnpMbk53YkdsalpTaG5jbTkxY0ZOb1lYQmxjeTVzWlc1bmRHZ2dMU0F4TENBd0xDQmpiMjVtYVdjcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS0hSb2FYTXVjbTl2ZENCaGN5QlRhR0Z3WlV4aGVXVnlLUzV6YUdGd1pYTWhXekJkSUdGeklFZHliM1Z3VTJoaGNHVXBMbWwwSVM1d2RYTm9LR052Ym1acFp5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sblhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdZMjl0Ylc5dVVISnZjR1Z5ZEhsTllYQndhVzVuS0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1wT2lCYllXNTVMQ0J6ZEhKcGJtY2dmQ0IxYm1SbFptbHVaV1FzSUc1MWJXSmxjaUI4SUhWdVpHVm1hVzVsWkYwZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWW1GelpUb2dZVzU1TENCck9pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJR2x1WkdWNE9pQnVkVzFpWlhJZ2ZDQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTmpZV3hsV0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaU0E5SUhSb2FYTXVjbTl2ZEM1cmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzJOaGJHVlpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1eWIyOTBMbXR6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHpKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGhibU5vYjNKWUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkaEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkaGJtTm9iM0paSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RoSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q0SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R5YjNSaGRHVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVhM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0ozSW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHZjR0ZqYVhSNUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRISnBiVk4wWVhKMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTVtYVc1a1QzSkpibk5sY25SUWNtOXdaWEowZVVOdmJtWnBaeWduZEcwbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SUMweFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSeWFXMUZibVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaGMyVWdQU0IwYUdsekxtWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBiU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZGxKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kSEpwYlU5bVpuTmxkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRTl5U1c1elpYSjBVSEp2Y0dWeWRIbERiMjVtYVdjb0ozUnRKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyOG5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZG1hV3hzUTI5c2IzSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG1acGJtUlFjbTl3WlhKMGVVTnZibVpwWnlnblptd25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3NnUFNBbll5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlDMHhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTjBjbTlyWlVOdmJHOXlKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1bWFXNWtVSEp2Y0dWeWRIbERiMjVtYVdjb0ozTjBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyTW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHpkSEp2YTJWWGFXUjBhQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZDNKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jMmhoY0dVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlVnUFNCMGFHbHpMbVpwYm1SUWNtOXdaWEowZVVOdmJtWnBaeWduYzJnbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuYTNNblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdnUFNBdE1WeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkbWFXeHNUM0JoWTJsMGVTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlNBOUlIUm9hWE11Wm1sdVpGQnliM0JsY25SNVEyOXVabWxuS0NkbWJDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmMzUnliMnRsVDNCaFkybDBlU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHZKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJZbUZ6WlN3Z2F5d2dhVzVrWlhoZFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdkWEJrWVhSbFZHbHRaVkpoYm1kbEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1F1YjNBZ1BTQk5ZWFJvTG0xaGVDZ3VMaTVQWW1wbFkzUXVkbUZzZFdWektIUm9hWE11ZEdsdFpWSmhibWRsS1N3Z01TbGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHlaV1k2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZENBOUlISmxabHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnVZMmh2Y2lBOUlGc3dMQ0F3TENBd1hWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1SUQwZ1d6QXNJREFzSURCZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd0bGVTQjBhR1VnYm1GdFpTQnZaaUJ3Y205d1pYSjBlU0IwYnlCaVpTQnpaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ2RHaGxJSFpoYkhWbElIUnZJR0psSUhObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGTjBZWFJwWTFCeWIzQmxjblI1S0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1zSUhaaGJIVmxPaUJoYm5rcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxVbUZ1WjJWYmEyVjVYU0E5SURGY2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlVhVzFsVW1GdVoyVW9LVnh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMblZ1YVdadmNtMG9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzV3WVhSb1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUdKaGMyVTZJR0Z1ZVN3Z2F6b2djM1J5YVc1bklId2dkVzVrWldacGJtVmtMQ0JwYm1SbGVEb2diblZ0WW1WeUlId2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJRnRpWVhObExDQnJMQ0JwYm1SbGVGMGdQU0IwYUdsekxtTnZiVzF2YmxCeWIzQmxjblI1VFdGd2NHbHVaeWhyWlhrcFhHNGdJQ0FnSUNBZ0lHbG1JQ2doYXlCOGZDQnBibVJsZUNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1JsZUhRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5YjI5MExuUjVJRDA5SURVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSdll5QTlJSFJvYVhNdWNtOXZkQzUwSVM1a0lWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXNnUFNCYlpHOWpMbXNoV3pCZFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXRiTUYwdWRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WXk1cld6QmRMbk1oTG5RZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaHJaWGtzSUhaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dmRDQmhJSFpoYkdsa0lHdGxlUzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaGlZWE5sSUNZbUlHc2dKaVlnYVc1a1pYZ2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoaVlYTmxMQ0JyS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDQ5SURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVnRyWFM1clcybHVaR1Y0WFNBOUlIWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpWdHJYUzVySUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhrZ2RHaGxJRzVoYldVZ2IyWWdjSEp2Y0dWeWRIa2dkRzhnWW1VZ2MyVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZWEowUm5KaGJXVWdabkpoYldVZ2JuVnRZbVZ5SUhSdklITjBZWEowSUhSb1pTQmhibWx0WVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pXNWtSbkpoYldVZ1puSmhiV1VnYm5WdFltVnlJSFJ2SUdWdVpDQjBhR1VnWVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVhKMFZtRnNkV1VnZG1Gc2RXVWdkRzhnWW1VZ2MyVjBJR2x1SUhOMFlYSjBJRzltSUdGdWFXMWhkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsYm1SV1lXeDFaU0IyWVd4MVpTQjBieUJpWlNCelpYUWdhVzRnWlc1a0lHOW1JR0Z1YVcxaGRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxZWE5wYm1jZ1pXRnphVzVuSUdaMWJtTjBhVzl1TENCa1pXWmhkV3gwSUdseklHeHBibVZoY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVGdWFXMWhkR0ZpYkdWUWNtOXdaWEowZVNoclpYazZJRk5sZEdGaWJHVkxaWGx6TENCemRHRnlkRVp5WVcxbE9pQnVkVzFpWlhJc0lHVnVaRVp5WVcxbE9pQnVkVzFpWlhJc0lITjBZWEowVm1Gc2RXVTZJR0Z1ZVN3Z1pXNWtWbUZzZFdVNklHRnVlU3dnWldGemFXNW5Qem9nUldGemFXNW5SblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVaRVp5WVcxbElEdzlJSE4wWVhKMFJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SVzVrSUdaeVlXMWxJSE5vYjNWc1pDQmlaU0JzWVhKblpYSWdkR2hoYmlCemRHRnlkQ0JtY21GdFpTNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlZKaGJtZGxXMnRsZVYwZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5ScGJXVlNZVzVuWlZ0clpYbGRJSHg4SURBc0lHVnVaRVp5WVcxbElDc2dNU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWVWFXMWxVbUZ1WjJVb0tWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWaGMybHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV0Z6YVc1bklEMGdSV0Z6YVc1blJtRmpkRzl5ZVM1c2FXNWxZWElvS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGeWRGWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlIeDhJR1Z1WkZaaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGMGFFMWhhMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JiYzNSaGNuUldZV3gxWlN3Z1pXNWtWbUZzZFdWZExtWnZja1ZoWTJnb2RpQTlQaUIySUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlDWW1JSFl1ZFc1cFptOXliU2dwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYSjBWbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdKaVlnWlc1a1ZtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRnlkRXhwYm1WRGIzVnVkQ0E5SUhOMFlYSjBWbUZzZFdVdWNHRjBhQzUySVM1c1pXNW5kR2dnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlc1a1RHbHVaVU52ZFc1MElEMGdaVzVrVm1Gc2RXVXVjR0YwYUM1MklTNXNaVzVuZEdnZ0xTQXhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb2MzUmhjblJNYVc1bFEyOTFiblFnUEQwZ01DQW1KaUJsYm1STWFXNWxRMjkxYm5RZ1BEMGdNQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0UxaGRHZ3ViV2x1S0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcElEdzlJREFnSmlZZ1RXRjBhQzV0WVhnb2MzUmhjblJNYVc1bFEyOTFiblFzSUdWdVpFeHBibVZEYjNWdWRDa2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibVZsWkVOdmNIa2dQU0J6ZEdGeWRFeHBibVZEYjNWdWRDQThQU0F3SUQ4Z2MzUmhjblJXWVd4MVpTQTZJR1Z1WkZaaGJIVmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WbFpFeGxibWQwYUNBOUlFMWhkR2d1YldGNEtITjBZWEowVEdsdVpVTnZkVzUwTENCbGJtUk1hVzVsUTI5MWJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXeWRwSnl3Z0oyOG5MQ0FuZGlkZExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMGdQU0JCY25KaGVTaHVaV1ZrVEdWdVozUm9LUzVtYVd4c0tHNWxaV1JEYjNCNUxuQmhkR2hiYTJWNVhTNXNaVzVuZEdnZ1B5QnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMWJNRjBnT2lCYk1Dd2dNRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dGJXOXVUWFZzZEdsd2JHVWdQU0JzWldGemRFTnZiVzF2YmsxMWJIUnBjR3hsS0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbExuVndjMkZ0Y0d4bEtFMWhkR2d1Y205MWJtUW9ZMjl0Ylc5dVRYVnNkR2x3YkdVZ0x5QnpkR0Z5ZEV4cGJtVkRiM1Z1ZENrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlM1MWNITmhiWEJzWlNoTllYUm9Mbkp2ZFc1a0tHTnZiVzF2YmsxMWJIUnBjR3hsSUM4Z1pXNWtUR2x1WlVOdmRXNTBLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRnR6ZEdGeWRGWmhiSFZsTENCbGJtUldZV3gxWlYwZ1BTQmJjM1JoY25SV1lXeDFaU3dnWlc1a1ZtRnNkV1ZkTG0xaGNDaDJJRDArSUhZZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdQeUIyTG5CaGRHZ2dPaUIyS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0JpWVhObE9pQmhibmtzSUdzNklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDd2dhVzVrWlhnNklHNTFiV0psY2lCOElIVnVaR1ZtYVc1bFpDd2dkM0poY0NBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUZ0aVlYTmxMQ0JyTENCcGJtUmxlRjBnUFNCMGFHbHpMbU52YlcxdmJsQnliM0JsY25SNVRXRndjR2x1WnloclpYa3BYRzRnSUNBZ0lDQWdJR2xtSUNnaGF5QjhmQ0JwYm1SbGVDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSbGVIUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1eWIyOTBMblI1SUQwOUlEVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSbGVIUlFjbTl3SUQwZ1ltRnpaUzVrTG10Yk1GMHVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSdGNGTjBZWEowVm1Gc2RXVWdQU0JLVTA5T0xuQmhjbk5sS0VwVFQwNHVjM1J5YVc1bmFXWjVLSFJsZUhSUWNtOXdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGJYQkZibVJXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29kR1Y0ZEZCeWIzQXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3VTNSaGNuUldZV3gxWlM1MElEMGdjM1JoY25SV1lXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3Ulc1a1ZtRnNkV1V1ZENBOUlHVnVaRlpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbElEMGdkRzF3VTNSaGNuUldZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCMGJYQkZibVJXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0F0TVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKaGNDQTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR3RsZVN3Z2MzUmhjblJHY21GdFpTd2daVzVrUm5KaGJXVXNJSE4wWVhKMFZtRnNkV1VzSUdWdVpGWmhiSFZsTENCbFlYTnBibWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblRtOTBJR0VnZG1Gc2FXUWdhMlY1TGljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJVZ0ppWWdheUFtSmlCcGJtUmxlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2hpWVhObExDQnJLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSTFpYbG1jbUZ0WlNoaVlYTmxMQ0JyTENCcGJtUmxlQ3dnYzNSaGNuUkdjbUZ0WlN3Z2MzUmhjblJXWVd4MVpTd2daV0Z6YVc1bkxDQjNjbUZ3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUkxaWGxtY21GdFpTaGlZWE5sTENCckxDQnBibVJsZUN3Z1pXNWtSbkpoYldVc0lHVnVaRlpoYkhWbExDQkZZWE5wYm1kR1lXTjBiM0o1TG14cGJtVmhjaWdwTENCM2NtRndLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdGNVpYSkdZV04wYjNKNUlIdGNiaUFnSUNCd2NtbDJZWFJsSUhOMFlYUnBZeUJuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hqYjI5eVpHbHVZWFJsT2lCdWRXMWlaWEpiWFNrNklGUnlZVzV6Wm05eWJTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pGZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVRBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCamNtVmhkR1VnZEdobElHSnZkVzVrYVc1bklHSnZlQ0J2WmlCemRtY2daV3hsYldWdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUdWc1pXMWxiblFnYm1WbFpITWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQmliM1Z1WkdsdVp5QmliM2hjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1ltOTFibVJwYm1kQ2IzZ29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ltOTFibVJwYm1kQ2IzZ2dQU0JuWlhSQ2IzVnVaR2x1WjBKdmVDaGtiMjBwTG0xaGNDZ29kaXdnYVNrZ1BUNGdhU0E4SURJZ1B5QjJJQzBnTVNBNklIWWdLeUF4S1NCaGN5QmJiblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2l3Z2JuVnRZbVZ5WFZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaV04wS0M0dUxtSnZkVzVrYVc1blFtOTRLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQjBhR1VnYzJGdFpTQnphR0Z3WlNCdlppQnpkbWNnY0dGMGFGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUhCaGRHZ2daV3hsYldWdWRDQnlaWEJ5WlhObGJuUWdkR2hsSUhOb1lYQmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUhOb1lYQmxLR1J2YlRvZ1UxWkhVR0YwYUVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUnBibUYwWlNBOUlHZGxkRUp2ZFc1a2FXNW5RbTk0S0dSdmJTbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEk2SUZOb1lYQmxUR0Y1WlhJZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVUb2dOQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE55T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc4NklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcmN6b2dkR2hwY3k1blpXNWxjbUYwWlZSeVlXNXpabTl5YlNoamIyOXlaR2x1WVhSbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsd09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p0T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVnpPaUJ5Wlc1a1pYSW9aRzl0S1Z4dVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2JHRjVaWElwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTNKbFlYUmxJR0VnY21WamRHRnVaMnhsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hsWm5RZ2JHVm1kQ0J2WmlCeVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIUnZjQ0IwYjNBZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzYVdSMGFDQjNhV1IwYUNCdlppQnlaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2hsYVdkb2RDQm9aV2xuYUhRZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5QnlaV04wS0d4bFpuUTZJRzUxYldKbGNpd2dkRzl3T2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSXNJR2hsYVdkb2REb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGhlV1Z5T2lCVGFHRndaVXhoZVdWeUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIazZJRFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaR1E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y2pvZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdk9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EzTTZJSFJvYVhNdVoyVnVaWEpoZEdWVWNtRnVjMlp2Y20wb1cyeGxablFzSUhSdmNDd2dkMmxrZEdnc0lHaGxhV2RvZEYwcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTA2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pYTTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSlFiR0ZwYmtkc2VYQm9LQ2R5WldOMEp5d2dXM2RwWkhSb0xDQm9aV2xuYUhSZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbE5OYjNacGJreGhlV1Z5S0d4aGVXVnlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQmhJR1ZzYkdsd2MyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kzZ2dlQ0JqWlc1MFpYSWdiMllnWld4c2FYQnpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmplU0I1SUdObGJuUmxjaUJ2WmlCbGJHeHBjSE5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEo0SUhnZ2NtRmthWFZ6SUc5bUlHVnNiR2x3YzJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY25rZ2VTQnlZV1JwZFhNZ2IyWWdaV3hzYVhCelpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMFlYUnBZeUJsYkd4cGNITmxLR040T2lCdWRXMWlaWElzSUdONU9pQnVkVzFpWlhJc0lISjRPaUJ1ZFcxaVpYSXNJSEo1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGNVpYSTZJRk5vWVhCbFRHRjVaWElnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVRvZ05DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSa1pEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITnlPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzg2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyY3pvZ2RHaHBjeTVuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hiWTNnZ0xTQnllQ3dnWTNrZ0xTQnllU3dnTWlBcUlISjRMQ0F5SUNvZ2NubGRLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZERvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdE9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1Z6T2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5VUd4aGFXNUhiSGx3YUNnblpXeHNhWEJ6WlNjc0lGdHllQ3dnY25sZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbE5OYjNacGJreGhlV1Z5S0d4aGVXVnlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRzFoYTJVZ1lTQnNZWGxsY2lCaWVTQmhjM05sZENCSlJGeHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQmhjM05sZENCeVpXWmxjbVZ1WTJVZ1NVUmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nY21WbUtHbGtPaUJTWldabGNtVnVZMlZKUkNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUc1bGR5QktVMDF2ZG1sdVRHRjVaWElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGs2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWkdRNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemNqb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnZPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhM002SUhSb2FYTXVaMlZ1WlhKaGRHVlVjbUZ1YzJadmNtMG9XekFzSURBc0lEQXNJREJkS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x3T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNBNklERXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemREb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnRPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkem9nT1dVNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYURvZ09XVTVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1TV1E2SUdsa1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNZWGxsY2x4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUcxaGEyVWdZU0JqYjIxd2JHVjRJR3hoZVdWeUlHSjVJR0Z1SUdGeVltbDBjbUZ5ZVNCemRtY2daV3hsYldWdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUdWc1pXMWxiblFnYm1WbFpDQjBieUJpWlNCd1lYSnpaV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZWE56WlhSTWFYTjBJR0VnYkdsemRDQmpiMjUwWVdsdWN5QnBiV0ZuWlM5c1lYbGxjaUJoYzNObGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbWIyNTBUR2x6ZENCaElHeHBjM1FnWTI5dWRHRnBibk1nWm05dWRDQmhjM05sZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5Qm9hV1Z5WVhKamFIa29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lHRnpjMlYwVEdsemREb2dRWE56WlhSekxDQm1iMjUwVEdsemREb2dSbTl1ZEhNcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXZjbVJwYm1GMFpTQTlJR2RsZEVKdmRXNWthVzVuUW05NEtHUnZiU2xjYmlBZ0lDQWdJQ0FnYkdWMElHUnZiVlI1Y0dVNklESWdmQ0EwSUh3Z05TQjhJREE3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFVaWGgwUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaRzl0Vkhsd1pTQTlJRFZjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoa2IyMGdhVzV6ZEdGdVkyVnZaaUJUVmtkSmJXRm5aVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZiVlI1Y0dVZ1BTQXlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWkc5dElHbHVjM1JoYm1ObGIyWWdVMVpIUjBWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2YlZSNWNHVWdQU0F3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMjFVZVhCbElEMGdORnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3hoZVdWeU9pQlRhR0Z3WlV4aGVXVnlJSHdnU1cxaFoyVk1ZWGxsY2lCOElGUmxlSFJNWVhsbGNpQjhJRkJ5WlVOdmJYQk1ZWGxsY2lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNU9pQmtiMjFVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdSa09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiem9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3R6T2lCMGFHbHpMbWRsYm1WeVlYUmxWSEpoYm5ObWIzSnRLR1J2YlZSNWNHVWdQVDBnTUNBL0lGc3dMQ0F3TENBd0xDQXdYU0E2SUdOdmIzSmthVzVoZEdVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTA2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHUnZiVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtiMjFNWldGMlpYTWdQU0JuWlhSTVpXRm1UbTlrWlhNb1pHOXRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa2IyMU1aV0YyWlhNdVptbHNkR1Z5S0dSdmJTQTlQaUJrYjIwZ2FXNXpkR0Z1WTJWdlppQlRWa2RVWlhoMFJXeGxiV1Z1ZENCOGZDQmtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZEpiV0ZuWlVWc1pXMWxiblFwTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVmpiMjF3VEdGNVpYSWdQU0JzWVhsbGNpQmhjeUJRY21WRGIyMXdUR0Y1WlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISmxRMjl0Y0VGemMyVjBPaUJLVTAxdmRtbHVUR0Y1WlhKYlhTQTlJRnRkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpVTnZiWEJTWldaSlpDQTlJSFYxYVdRb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjIxTVpXRjJaWE11Wm05eVJXRmphQ2hrSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrSUdsdWMzUmhibU5sYjJZZ1UxWkhSM0poY0docFkzTkZiR1Z0Wlc1MElDWW1JQ0VvWkNCcGJuTjBZVzVqWlc5bUlGTldSMGRGYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaVU52YlhCQmMzTmxkQzUxYm5Ob2FXWjBLSFJvYVhNdWFHbGxjbUZ5WTJoNUtHUXNJR0Z6YzJWMFRHbHpkQ3dnWm05dWRFeHBjM1FwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVkRiMjF3UVhOelpYUXVabTl5UldGamFDaHNZWGxsY2lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2k1eWIyOTBMbTl3SUQwZ09XVTVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1M0lEMGdZMjl2Y21ScGJtRjBaVnN3WFNBcklHTnZiM0prYVc1aGRHVmJNbDBnS3lBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1b0lEMGdZMjl2Y21ScGJtRjBaVnN4WFNBcklHTnZiM0prYVc1aGRHVmJNMTBnS3lBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1eVpXWkpaQ0E5SUhCeVpVTnZiWEJTWldaSlpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYzNObGRFeHBjM1F1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nY0hKbFEyOXRjRkpsWmtsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEp6T2lCd2NtVkRiMjF3UVhOelpYUXViV0Z3S0d4aGVXVnlJRDArSUd4aGVXVnlMbkp2YjNRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJoaGNHVk1ZWGxsY2lBOUlHeGhlV1Z5SUdGeklGTm9ZWEJsVEdGNVpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVk1ZWGxsY2k1MGVTQTlJRFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1ZNWVhsbGNpNXJjeUE5SUhSb2FYTXVaMlZ1WlhKaGRHVlVjbUZ1YzJadmNtMG9ZMjl2Y21ScGJtRjBaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1ZNWVhsbGNpNXphR0Z3WlhNZ1BTQnlaVzVrWlhJb1pHOXRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbHRZV2RsVEdGNVpYSWdQU0JzWVhsbGNpQmhjeUJKYldGblpVeGhlV1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdXMmx0WVdkbFVtVm1TV1FzSUdsdFlXZGxRWE56WlhSZElEMGdjbVZ1WkdWeVNXMWhaMlVvWkc5dElHRnpJRk5XUjBsdFlXZGxSV3hsYldWdWRDd2dZWE56WlhSTWFYTjBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x0WVdkbFRHRjVaWEl1Y21WbVNXUWdQU0JwYldGblpWSmxaa2xrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmhjM05sZEV4cGMzUXVabWxzZEdWeUtHRWdQVDRnWVM1cFpDQTlQU0JwYldGblpWSmxaa2xrS1M1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpjMlYwVEdsemRDNXdkWE5vS0dsdFlXZGxRWE56WlhRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J6YUdGd1pVeGhlV1Z5SUQwZ2JHRjVaWElnWVhNZ1UyaGhjR1ZNWVhsbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsVEdGNVpYSXVjMmhoY0dWeklEMGdjbVZ1WkdWeUtHUnZiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTFPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxlSFJNWVhsbGNpQTlJR3hoZVdWeUlHRnpJRlJsZUhSTVlYbGxjbHh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXOTJaU0IwWlhoMFRHRjVaWEluY3lCd2IzTnBkR2x2YmlCMGJ5QjBaWGgwTFdGdVkyaHZjaTF5Wld4aGRHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ltRnpaVXhwYm1WSVpXbG5hSFFnUFNCblpYUkNZWE5sYkdsdVpVaGxhV2RvZENoa2IyMGdZWE1nVTFaSFZHVjRkRVZzWlcxbGJuUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRkRUZ1WTJodmNpQTlJR1Z1WTI5a1pWUmxlSFJCYm1Ob2IzSW9aMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGtiMjBwTG5SbGVIUkJibU5vYjNJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWNGRFRnVZMmh2Y2xkbGFXZG9kQ0E5SUZzd0xDQXhMQ0F3TGpWZFczUmxlSFJCYm1Ob2IzSmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEV4aGVXVnlMbXR6SVM1d0lTNXJJRDBnVzJOdmIzSmthVzVoZEdWYk1GMGdLeUJqYjI5eVpHbHVZWFJsV3pKZElDb2dkR1Y0ZEVGdVkyaHZjbGRsYVdkb2RDd2dZMjl2Y21ScGJtRjBaVnN4WFNBcklHTnZiM0prYVc1aGRHVmJNMTBnTFNCaVlYTmxUR2x1WlVobGFXZG9kQ3dnTUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1WlhJdWEzTWhMbThoTG1zZ1BTQitmaWh3WVhKelpVWnNiMkYwS0dkbGRFTnZiWEIxZEdWa1UzUjViR1VvWkc5dEtTNW1hV3hzVDNCaFkybDBlU0I4ZkNBbk1TY3BJQ29nTVRBd0tWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1czUmxlSFJFWVhSaExDQm1iMjUwWFNBOUlISmxibVJsY2xSbGVIUW9aRzl0SUdGeklGTldSMVJsZUhSRmJHVnRaVzUwTENCbWIyNTBUR2x6ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1WlhJdWRDQTlJSFJsZUhSRVlYUmhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbWIyNTBUR2x6ZEM1c2FYTjBJUzVtYVd4MFpYSW9aaUE5UGlCbUxtWk9ZVzFsSUQwOUlHWnZiblF1Wms1aGJXVXBMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRFeHBjM1F1YkdsemRDRXVjSFZ6YUNobWIyNTBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXOTJhVzVNWVhsbGNpQTlJRzVsZHlCS1UwMXZkbWx1VEdGNVpYSW9iR0Y1WlhJcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdGIzWnBia3hoZVdWeVhHNGdJQ0FnZlZ4dWZTSmRmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XHJcbmV4cG9ydHMucmVuZGVyUGxhaW5HbHlwaCA9IHJlbmRlclBsYWluR2x5cGg7XHJcbmV4cG9ydHMucmVuZGVyVGV4dCA9IHJlbmRlclRleHQ7XHJcbmV4cG9ydHMucmVuZGVySW1hZ2UgPSByZW5kZXJJbWFnZTtcclxuXHJcbnZhciBfcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XHJcblxyXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1dWlkL3Y0XCIpKTtcclxuXHJcbnZhciBfaGVscGVyID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxyXG5cclxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cclxuXHJcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSkgeyByZXR1cm47IH0gdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XHJcblxyXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlcihkb20sIGJhc2VEb20pIHtcclxuICBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHVGV4dEVsZW1lbnQgfHwgZG9tIGluc3RhbmNlb2YgU1ZHSW1hZ2VFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIHJlbmRlckdyb3VwKGRvbSwgYmFzZURvbSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiByZW5kZXJHbHlwaChkb20sIGJhc2VEb20pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVmlzdWFsRW5jb2RpbmdzKGl0ZW1zLCBzdHlsZXMsIGRvbSwgYmFzZURvbSkge1xyXG4gIGlmIChzdHlsZXMuc3Ryb2tlICYmIHN0eWxlcy5zdHJva2UgIT09ICdub25lJykge1xyXG4gICAgaXRlbXMucHVzaCh7XHJcbiAgICAgIHR5OiAnc3QnLFxyXG4gICAgICBjOiB7XHJcbiAgICAgICAgazogc3R5bGVzLnN0cm9rZS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJhdykgLyAyNTU7XHJcbiAgICAgICAgfSkuY29uY2F0KDEpXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5zdHJva2VPcGFjaXR5IHx8ICcxJykgKiAxMDBcclxuICAgICAgfSxcclxuICAgICAgdzoge1xyXG4gICAgICAgIGs6IHBhcnNlRmxvYXQoc3R5bGVzLnN0cm9rZVdpZHRoIHx8ICcxJylcclxuICAgICAgfSxcclxuICAgICAgbGM6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVDYXApKHN0eWxlcy5zdHJva2VMaW5lY2FwKSxcclxuICAgICAgbGo6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVKb2luKShzdHlsZXMuc3Ryb2tlTGluZWpvaW4pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmIChzdHlsZXMuZmlsbCAmJiBzdHlsZXMuZmlsbCAhPT0gJ25vbmUnKSB7XHJcbiAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgdHk6ICdmbCcsXHJcbiAgICAgIGM6IHtcclxuICAgICAgICBrOiBzdHlsZXMuZmlsbC5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJhdykgLyAyNTU7XHJcbiAgICAgICAgfSkuY29uY2F0KDEpXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBvc1ggPSAwLFxyXG4gICAgICBwb3NZID0gMCxcclxuICAgICAgb3BhY2l0eSA9IDEwMDtcclxuXHJcbiAgaWYgKGRvbSAmJiBiYXNlRG9tKSB7XHJcbiAgICB2YXIgYmFzZVRyYW5zZm9ybSA9ICgwLCBfaGVscGVyLmNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0pKGRvbSwgYmFzZURvbSk7XHJcbiAgICB2YXIgYmFzZUJCb3ggPSBiYXNlRG9tLmdldEJCb3goKTtcclxuICAgIHZhciByZWZCQm94ID0gZG9tLmdldEJCb3goKTtcclxuICAgIHBvc1ggPSBiYXNlVHJhbnNmb3JtLmUgKyByZWZCQm94LnggLSBiYXNlQkJveC54O1xyXG4gICAgcG9zWSA9IGJhc2VUcmFuc2Zvcm0uZiArIHJlZkJCb3gueSAtIGJhc2VCQm94Lnk7XHJcbiAgICBvcGFjaXR5ID0gcGFyc2VGbG9hdChzdHlsZXMub3BhY2l0eSB8fCAnMScpICogMTAwO1xyXG4gIH1cclxuXHJcbiAgaXRlbXMucHVzaCh7XHJcbiAgICB0eTogXCJ0clwiLFxyXG4gICAgcDoge1xyXG4gICAgICBrOiBbcG9zWCwgcG9zWV1cclxuICAgIH0sXHJcbiAgICBhOiB7XHJcbiAgICAgIGs6IFswLCAwXVxyXG4gICAgfSxcclxuICAgIHM6IHtcclxuICAgICAgazogWzEwMCwgMTAwXVxyXG4gICAgfSxcclxuICAgIHI6IHtcclxuICAgICAgazogMFxyXG4gICAgfSxcclxuICAgIG86IHtcclxuICAgICAgazogb3BhY2l0eVxyXG4gICAgfSxcclxuICAgIHNrOiB7XHJcbiAgICAgIGs6IDBcclxuICAgIH0sXHJcbiAgICBzYToge1xyXG4gICAgICBrOiAwXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckdseXBoKGRvbSwgYmFzZURvbSkge1xyXG4gIHZhciBncm91cCA9IHtcclxuICAgIHR5OiBcImdyXCIsXHJcbiAgICBpdDogW10sXHJcbiAgICBibTogMCxcclxuICAgIGhkOiBmYWxzZVxyXG4gIH07XHJcblxyXG4gIHZhciBwb3N0QWN0aW9ucyA9IGZ1bmN0aW9uIHBvc3RBY3Rpb25zKHBhdGhNYWtlcikge1xyXG4gICAgcGF0aE1ha2VyLnVuaWZvcm0oKTtcclxuICAgIGdyb3VwLml0LnB1c2goe1xyXG4gICAgICB0eTogJ3NoJyxcclxuICAgICAga3M6IHtcclxuICAgICAgICBrOiBwYXRoTWFrZXIucGF0aCxcclxuICAgICAgICBhOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIG5tOiBkb20uaWQsXHJcbiAgICAgIGhkOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tKTtcclxuICAgIGFkZFZpc3VhbEVuY29kaW5ncyhncm91cC5pdCwgc3R5bGVzLCBkb20sIGJhc2VEb20pO1xyXG4gIH07XHJcblxyXG4gIGlmIChkb20gaW5zdGFuY2VvZiBTVkdDaXJjbGVFbGVtZW50KSB7XHJcbiAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tLnIuYmFzZVZhbDtcclxuICAgIHN2Z0xlbmd0aC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpO1xyXG4gICAgdmFyIHIgPSBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgdmFyIHBhdGhNYWtlciA9IG5ldyBfcGF0aC5QYXRoTWFrZXIoKTtcclxuICAgIHBhdGhNYWtlci5tb3ZlVG8ociwgMCk7XHJcbiAgICBwYXRoTWFrZXIuYXJjVG8ociwgciwgMCwgMSwgMCwgciwgMiAqIHIpO1xyXG4gICAgcGF0aE1ha2VyLmFyY1RvKHIsIHIsIDAsIDEsIDAsIHIsIDApO1xyXG4gICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG4gICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKTtcclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0VsbGlwc2VFbGVtZW50KSB7XHJcbiAgICB2YXIgbWFwS2V5ID0gWydyeCcsICdyeSddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5JG1hcCA9IG1hcEtleS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbDtcclxuICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWCk7XHJcbiAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgfSksXHJcbiAgICAgICAgX21hcEtleSRtYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcEtleSRtYXAsIDIpLFxyXG4gICAgICAgIHJ4ID0gX21hcEtleSRtYXAyWzBdLFxyXG4gICAgICAgIHJ5ID0gX21hcEtleSRtYXAyWzFdO1xyXG5cclxuICAgIHZhciBfcGF0aE1ha2VyID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgIF9wYXRoTWFrZXIubW92ZVRvKHJ4LCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyLmFyY1RvKHJ4LCByeSwgMCwgMSwgMCwgcngsIDIgKiByeSk7XHJcblxyXG4gICAgX3BhdGhNYWtlci5hcmNUbyhyeCwgcnksIDAsIDEsIDAsIHJ4LCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG5cclxuICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXIpO1xyXG4gIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHTGluZUVsZW1lbnQpIHtcclxuICAgIHZhciBfbWFwS2V5ID0gWyd4MScsICd4MicsICd5MScsICd5MiddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5JG1hcDMgPSBfbWFwS2V5Lm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHZhciBzdmdMZW5ndGggPSBkb21ba2V5XS5iYXNlVmFsO1xyXG4gICAgICBzdmdMZW5ndGguY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKTtcclxuICAgICAgcmV0dXJuIHN2Z0xlbmd0aC52YWx1ZUluU3BlY2lmaWVkVW5pdHM7XHJcbiAgICB9KSxcclxuICAgICAgICBfbWFwS2V5JG1hcDQgPSBfc2xpY2VkVG9BcnJheShfbWFwS2V5JG1hcDMsIDQpLFxyXG4gICAgICAgIHgxID0gX21hcEtleSRtYXA0WzBdLFxyXG4gICAgICAgIHgyID0gX21hcEtleSRtYXA0WzFdLFxyXG4gICAgICAgIHkxID0gX21hcEtleSRtYXA0WzJdLFxyXG4gICAgICAgIHkyID0gX21hcEtleSRtYXA0WzNdO1xyXG5cclxuICAgIHZhciBvZmZzZXRYID0gTWF0aC5taW4oeDEsIHgyKTtcclxuICAgIHZhciBvZmZzZXRZID0gTWF0aC5taW4oeTEsIHkyKTtcclxuXHJcbiAgICB2YXIgX3BhdGhNYWtlcjIgPSBuZXcgX3BhdGguUGF0aE1ha2VyKCk7XHJcblxyXG4gICAgX3BhdGhNYWtlcjIubW92ZVRvKHgxIC0gb2Zmc2V0WCwgeTEgLSBvZmZzZXRZKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyMi5saW5lVG8oeDIgLSBvZmZzZXRYLCB5MiAtIG9mZnNldFkpO1xyXG5cclxuICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXIyKTtcclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1BhdGhFbGVtZW50KSB7XHJcbiAgICB2YXIgcGF0aERhdGEgPSBkb20uZ2V0QXR0cmlidXRlKCdkJykgfHwgJyc7XHJcblxyXG4gICAgdmFyIF9wYXRoTWFrZXIzID0gbmV3IF9wYXRoLlBhdGhNYWtlcihwYXRoRGF0YSk7XHJcblxyXG4gICAgcG9zdEFjdGlvbnMoX3BhdGhNYWtlcjMpO1xyXG4gIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHUG9seWdvbkVsZW1lbnQgfHwgZG9tIGluc3RhbmNlb2YgU1ZHUG9seWxpbmVFbGVtZW50KSB7XHJcbiAgICB2YXIgcG9pbnRzID0gZG9tLnBvaW50cztcclxuXHJcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICB2YXIgaXRlcmFibGVQb2ludHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwb2ludHMpO1xyXG5cclxuICAgICAgdmFyIF9vZmZzZXRYID0gaXRlcmFibGVQb2ludHMucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHAsIHYueCk7XHJcbiAgICAgIH0sIDApO1xyXG5cclxuICAgICAgdmFyIF9vZmZzZXRZID0gaXRlcmFibGVQb2ludHMucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHAsIHYueSk7XHJcbiAgICAgIH0sIDApO1xyXG5cclxuICAgICAgdmFyIF9wYXRoTWFrZXI0ID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgICAgX3BhdGhNYWtlcjQubW92ZVRvKHBvaW50c1swXS54IC0gX29mZnNldFgsIHBvaW50c1swXS55IC0gX29mZnNldFkpO1xyXG5cclxuICAgICAgaXRlcmFibGVQb2ludHMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xyXG4gICAgICAgIGlmIChpIDw9IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgX3BhdGhNYWtlcjQubGluZVRvKHYueCAtIF9vZmZzZXRYLCB2LnkgLSBfb2Zmc2V0WSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1BvbHlnb25FbGVtZW50KSB7XHJcbiAgICAgICAgX3BhdGhNYWtlcjQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXI0KTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1JlY3RFbGVtZW50KSB7XHJcbiAgICB2YXIgX21hcEtleTIgPSBbJ3dpZHRoJywgJ2hlaWdodCddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5MiRtYXAgPSBfbWFwS2V5Mi5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbDtcclxuICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWCk7XHJcbiAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgfSksXHJcbiAgICAgICAgX21hcEtleTIkbWFwMiA9IF9zbGljZWRUb0FycmF5KF9tYXBLZXkyJG1hcCwgMiksXHJcbiAgICAgICAgd2lkdGggPSBfbWFwS2V5MiRtYXAyWzBdLFxyXG4gICAgICAgIGhlaWdodCA9IF9tYXBLZXkyJG1hcDJbMV07XHJcblxyXG4gICAgdmFyIF9wYXRoTWFrZXI1ID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgIF9wYXRoTWFrZXI1Lm1vdmVUbygwLCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5saW5lVG8od2lkdGgsIDApO1xyXG5cclxuICAgIF9wYXRoTWFrZXI1LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5saW5lVG8oMCwgaGVpZ2h0KTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBwb3N0QWN0aW9ucyhfcGF0aE1ha2VyNSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZG9tKTtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIHN2ZyBncmFwaGljcyBlbGVtZW50LicpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtncm91cF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckdyb3VwKGRvbSwgYmFzZURvbSkge1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGRvbS5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XHJcbiAgICAgIGl0ZW1zID0gcmVuZGVyKG5vZGUsIGJhc2VEb20gfHwgZG9tKS5jb25jYXQoaXRlbXMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBpdGVtcztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyUGxhaW5HbHlwaCh0eXBlLCBhcmdzKSB7XHJcbiAgdmFyIGdyb3VwID0ge1xyXG4gICAgdHk6IFwiZ3JcIixcclxuICAgIGl0OiBbe1xyXG4gICAgICB0eTogJ3NoJyxcclxuICAgICAga3M6IHtcclxuICAgICAgICBrOiBudWxsLFxyXG4gICAgICAgIGE6IDBcclxuICAgICAgfSxcclxuICAgICAgaGQ6IGZhbHNlXHJcbiAgICB9LCB7XHJcbiAgICAgIHR5OiAnc3QnLFxyXG4gICAgICBjOiB7XHJcbiAgICAgICAgazogWzEsIDEsIDEsIDFdXHJcbiAgICAgIH0sXHJcbiAgICAgIHc6IHtcclxuICAgICAgICBrOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiAxMDBcclxuICAgICAgfSxcclxuICAgICAgbGM6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVDYXApKCdidXR0JyksXHJcbiAgICAgIGxqOiAoMCwgX2hlbHBlci5lbmNvZGVMaW5lSm9pbikoJ21pdGVyJylcclxuICAgIH0sIHtcclxuICAgICAgdHk6ICdmbCcsXHJcbiAgICAgIGM6IHtcclxuICAgICAgICBrOiBbMSwgMSwgMSwgMV1cclxuICAgICAgfSxcclxuICAgICAgbzoge1xyXG4gICAgICAgIGs6IDEwMFxyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIHR5OiAndHInLFxyXG4gICAgICBwOiB7XHJcbiAgICAgICAgazogWzAsIDBdXHJcbiAgICAgIH0sXHJcbiAgICAgIGE6IHtcclxuICAgICAgICBrOiBbMCwgMF1cclxuICAgICAgfSxcclxuICAgICAgczoge1xyXG4gICAgICAgIGs6IFsxMDAsIDEwMF1cclxuICAgICAgfSxcclxuICAgICAgcjoge1xyXG4gICAgICAgIGs6IDBcclxuICAgICAgfSxcclxuICAgICAgbzoge1xyXG4gICAgICAgIGs6IDEwMFxyXG4gICAgICB9LFxyXG4gICAgICBzazoge1xyXG4gICAgICAgIGs6IDBcclxuICAgICAgfSxcclxuICAgICAgc2E6IHtcclxuICAgICAgICBrOiAwXHJcbiAgICAgIH1cclxuICAgIH1dLFxyXG4gICAgYm06IDAsXHJcbiAgICBoZDogZmFsc2VcclxuICB9O1xyXG4gIHZhciBwYXRoTWFrZXIgPSBuZXcgX3BhdGguUGF0aE1ha2VyKCk7XHJcblxyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAncmVjdCc6XHJcbiAgICAgIHBhdGhNYWtlci5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oYXJnc1swXSwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oYXJnc1swXSwgYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oMCwgYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKTtcclxuICAgICAgYnJlYWs7XHJcblxyXG4gICAgY2FzZSAnZWxsaXBzZSc6XHJcbiAgICAgIHBhdGhNYWtlci5tb3ZlVG8oYXJnc1swXSwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAyICogYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAwKTtcclxuICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG4gIH1cclxuXHJcbiAgcGF0aE1ha2VyLnVuaWZvcm0oKTtcclxuICBncm91cC5pdFswXS5rcy5rID0gcGF0aE1ha2VyLnBhdGg7XHJcbiAgcmV0dXJuIGdyb3VwO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJUZXh0KGRvbSwgZm9udExpc3QpIHtcclxuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9tKTtcclxuICB2YXIgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZm9udFNpemUpLFxyXG4gICAgICBmb250RmFtaWx5ID0gY29tcHV0ZWRTdHlsZS5mb250RmFtaWx5LnNwbGl0KCcsJylbMF0udHJpbSgpLFxyXG4gICAgICBmb250U3R5bGUgPSBjb21wdXRlZFN0eWxlLmZvbnRTdHlsZSxcclxuICAgICAgZm9udFdlaWdodCA9IGNvbXB1dGVkU3R5bGUuZm9udFdlaWdodCxcclxuICAgICAgZm9udENvbG9yID0gKGNvbXB1dGVkU3R5bGUuZmlsbCB8fCAncmdiKDAsMCwwKScpLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaSkge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KGkpIC8gMjU1O1xyXG4gIH0pLFxyXG4gICAgICB0ZXh0QW5jaG9yID0gY29tcHV0ZWRTdHlsZS50ZXh0QW5jaG9yO1xyXG4gIHZhciBmb250TmFtZSA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcblxyXG4gIGlmIChmb250TGlzdCkge1xyXG4gICAgdmFyIGZvbnRFeGlzdCA9IGZvbnRMaXN0Lmxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmb250KSB7XHJcbiAgICAgIHJldHVybiBmb250LmZGYW1pbHkgPT0gZm9udEZhbWlseSAmJiBmb250LmZTdHlsZSA9PSBmb250U3R5bGUgJiYgZm9udC5mV2VpZ2h0ID09IGZvbnRXZWlnaHQ7XHJcbiAgICB9KTtcclxuICAgIGlmIChmb250RXhpc3QubGVuZ3RoKSBmb250TmFtZSA9IGZvbnRFeGlzdFswXS5mTmFtZTtcclxuICB9XHJcblxyXG4gIHZhciB0ZXh0RGF0YSA9IHtcclxuICAgIGQ6IHtcclxuICAgICAgazogW3tcclxuICAgICAgICB0OiAwLFxyXG4gICAgICAgIHM6IHtcclxuICAgICAgICAgIHM6IGZvbnRTaXplLFxyXG4gICAgICAgICAgZjogZm9udE5hbWUsXHJcbiAgICAgICAgICB0OiBkb20uaW5uZXJIVE1MLFxyXG4gICAgICAgICAgajogKDAsIF9oZWxwZXIuZW5jb2RlVGV4dEFuY2hvcikodGV4dEFuY2hvciksXHJcbiAgICAgICAgICB0cjogMCxcclxuICAgICAgICAgIGxzOiAwLFxyXG4gICAgICAgICAgZmM6IGZvbnRDb2xvclxyXG4gICAgICAgIH1cclxuICAgICAgfV1cclxuICAgIH0sXHJcbiAgICBwOiB7fSxcclxuICAgIG06IHtcclxuICAgICAgYToge1xyXG4gICAgICAgIGs6IFswLCAwXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYTogW11cclxuICB9O1xyXG4gIHZhciBmb250RGVmID0ge1xyXG4gICAgZkZhbWlseTogZm9udEZhbWlseSxcclxuICAgIGZXZWlnaHQ6IFwiXCIuY29uY2F0KGZvbnRXZWlnaHQpLFxyXG4gICAgZlN0eWxlOiBmb250U3R5bGUsXHJcbiAgICBmTmFtZTogZm9udE5hbWVcclxuICB9O1xyXG4gIHJldHVybiBbdGV4dERhdGEsIGZvbnREZWZdO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJJbWFnZShkb20sIGFzc2V0TGlzdCkge1xyXG4gIHZhciBpZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgdmFyIGRvbUhlaWdodFZhbCA9IGRvbS5oZWlnaHQuYmFzZVZhbDtcclxuICBkb21IZWlnaHRWYWwuY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKTtcclxuICB2YXIgZG9tV2lkdGhWYWwgPSBkb20ud2lkdGguYmFzZVZhbDtcclxuICBkb21XaWR0aFZhbC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpO1xyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgY2FudmFzLndpZHRoID0gZG9tV2lkdGhWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzICogMztcclxuICBjYW52YXMuaGVpZ2h0ID0gZG9tSGVpZ2h0VmFsLnZhbHVlSW5TcGVjaWZpZWRVbml0cyAqIDM7XHJcbiAgY3R4LmRyYXdJbWFnZShkb20sIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgdmFyIGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcblxyXG4gIGlmIChhc3NldExpc3QpIHtcclxuICAgIHZhciBhc3NldEV4aXN0ID0gYXNzZXRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYXNzZXQpIHtcclxuICAgICAgcmV0dXJuIGFzc2V0LnAgPT0gZGF0YVVybDtcclxuICAgIH0pO1xyXG4gICAgaWYgKGFzc2V0RXhpc3QubGVuZ3RoKSBpZCA9IGFzc2V0RXhpc3RbMF0uaWQ7XHJcbiAgfVxyXG5cclxuICB2YXIgYXNzZXQgPSB7XHJcbiAgICBoOiBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxyXG4gICAgdzogZG9tV2lkdGhWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxyXG4gICAgaWQ6IGlkLFxyXG4gICAgcDogZGF0YVVybCxcclxuICAgIGU6IDFcclxuICB9O1xyXG4gIHJldHVybiBbaWQsIGFzc2V0XTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXlaVzVrWlhJdWRITWlYU3dpYm1GdFpYTWlPbHNpY21WdVpHVnlJaXdpWkc5dElpd2lZbUZ6WlVSdmJTSXNJbE5XUjFSbGVIUkZiR1Z0Wlc1MElpd2lVMVpIU1cxaFoyVkZiR1Z0Wlc1MElpd2lVMVpIUjBWc1pXMWxiblFpTENKeVpXNWtaWEpIY205MWNDSXNJbkpsYm1SbGNrZHNlWEJvSWl3aVlXUmtWbWx6ZFdGc1JXNWpiMlJwYm1keklpd2lhWFJsYlhNaUxDSnpkSGxzWlhNaUxDSnpkSEp2YTJVaUxDSndkWE5vSWl3aWRIa2lMQ0pqSWl3aWF5SXNJbk53YkdsMElpd2ljMnhwWTJVaUxDSnRZWEFpTENKeVlYY2lMQ0p3WVhKelpVbHVkQ0lzSW1OdmJtTmhkQ0lzSW04aUxDSndZWEp6WlVac2IyRjBJaXdpYzNSeWIydGxUM0JoWTJsMGVTSXNJbmNpTENKemRISnZhMlZYYVdSMGFDSXNJbXhqSWl3aWMzUnliMnRsVEdsdVpXTmhjQ0lzSW14cUlpd2ljM1J5YjJ0bFRHbHVaV3B2YVc0aUxDSm1hV3hzSWl3aVptbHNiRTl3WVdOcGRIa2lMQ0p3YjNOWUlpd2ljRzl6V1NJc0ltOXdZV05wZEhraUxDSmlZWE5sVkhKaGJuTm1iM0p0SWl3aVltRnpaVUpDYjNnaUxDSm5aWFJDUW05NElpd2ljbVZtUWtKdmVDSXNJbVVpTENKNElpd2laaUlzSW5raUxDSndJaXdpWVNJc0luTWlMQ0p5SWl3aWMyc2lMQ0p6WVNJc0ltZHliM1Z3SWl3aWFYUWlMQ0ppYlNJc0ltaGtJaXdpY0c5emRFRmpkR2x2Ym5NaUxDSndZWFJvVFdGclpYSWlMQ0oxYm1sbWIzSnRJaXdpYTNNaUxDSndZWFJvSWl3aWJtMGlMQ0pwWkNJc0luZHBibVJ2ZHlJc0ltZGxkRU52YlhCMWRHVmtVM1I1YkdVaUxDSlRWa2REYVhKamJHVkZiR1Z0Wlc1MElpd2ljM1puVEdWdVozUm9JaXdpWW1GelpWWmhiQ0lzSW1OdmJuWmxjblJVYjFOd1pXTnBabWxsWkZWdWFYUnpJaXdpVTFaSFRHVnVaM1JvSWl3aVUxWkhYMHhGVGtkVVNGUlpVRVZmVUZnaUxDSjJZV3gxWlVsdVUzQmxZMmxtYVdWa1ZXNXBkSE1pTENKUVlYUm9UV0ZyWlhJaUxDSnRiM1psVkc4aUxDSmhjbU5VYnlJc0ltTnNiM05sVUdGMGFDSXNJbE5XUjBWc2JHbHdjMlZGYkdWdFpXNTBJaXdpYldGd1MyVjVJaXdpYTJWNUlpd2ljbmdpTENKeWVTSXNJbE5XUjB4cGJtVkZiR1Z0Wlc1MElpd2llREVpTENKNE1pSXNJbmt4SWl3aWVUSWlMQ0p2Wm1aelpYUllJaXdpVFdGMGFDSXNJbTFwYmlJc0ltOW1abk5sZEZraUxDSnNhVzVsVkc4aUxDSlRWa2RRWVhSb1JXeGxiV1Z1ZENJc0luQmhkR2hFWVhSaElpd2laMlYwUVhSMGNtbGlkWFJsSWl3aVUxWkhVRzlzZVdkdmJrVnNaVzFsYm5RaUxDSlRWa2RRYjJ4NWJHbHVaVVZzWlcxbGJuUWlMQ0p3YjJsdWRITWlMQ0pzWlc1bmRHZ2lMQ0pwZEdWeVlXSnNaVkJ2YVc1MGN5SXNJa0Z5Y21GNUlpd2ljSEp2ZEc5MGVYQmxJaXdpWTJGc2JDSXNJbkpsWkhWalpTSXNJbllpTENKbWIzSkZZV05vSWl3aWFTSXNJbE5XUjFKbFkzUkZiR1Z0Wlc1MElpd2lkMmxrZEdnaUxDSm9aV2xuYUhRaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSkZjbkp2Y2lJc0ltTm9hV3hrVG05a1pYTWlMQ0p1YjJSbElpd2lVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBJaXdpY21WdVpHVnlVR3hoYVc1SGJIbHdhQ0lzSW5SNWNHVWlMQ0poY21keklpd2ljbVZ1WkdWeVZHVjRkQ0lzSW1admJuUk1hWE4wSWl3aVkyOXRjSFYwWldSVGRIbHNaU0lzSW1admJuUlRhWHBsSWl3aVptOXVkRVpoYldsc2VTSXNJblJ5YVcwaUxDSm1iMjUwVTNSNWJHVWlMQ0ptYjI1MFYyVnBaMmgwSWl3aVptOXVkRU52Ykc5eUlpd2lkR1Y0ZEVGdVkyaHZjaUlzSW1admJuUk9ZVzFsSWl3aVptOXVkRVY0YVhOMElpd2liR2x6ZENJc0ltWnBiSFJsY2lJc0ltWnZiblFpTENKbVJtRnRhV3g1SWl3aVpsTjBlV3hsSWl3aVpsZGxhV2RvZENJc0ltWk9ZVzFsSWl3aWRHVjRkRVJoZEdFaUxDSmtJaXdpZENJc0ltbHVibVZ5U0ZSTlRDSXNJbW9pTENKMGNpSXNJbXh6SWl3aVptTWlMQ0p0SWl3aVptOXVkRVJsWmlJc0luSmxibVJsY2tsdFlXZGxJaXdpWVhOelpYUk1hWE4wSWl3aVpHOXRTR1ZwWjJoMFZtRnNJaXdpWkc5dFYybGtkR2hXWVd3aUxDSmpZVzUyWVhNaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmpkSGdpTENKblpYUkRiMjUwWlhoMElpd2laSEpoZDBsdFlXZGxJaXdpWkdGMFlWVnliQ0lzSW5SdlJHRjBZVlZTVENJc0ltRnpjMlYwUlhocGMzUWlMQ0poYzNObGRDSXNJbWdpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096czdPMEZCUjA4c1UwRkJVMEVzVFVGQlZDeERRVUZuUWtNc1IwRkJhRUlzUlVGQmVVTkRMRTlCUVhwRExFVkJRWEZHTzBGQlEzaEdMRTFCUVVsRUxFZEJRVWNzV1VGQldVVXNZMEZCWml4SlFVRnBRMFlzUjBGQlJ5eFpRVUZaUnl4bFFVRndSQ3hGUVVGeFJUdEJRVU5xUlN4WFFVRlBMRVZCUVZBN1FVRkRTQ3hIUVVaRUxFMUJSVThzU1VGQlNVZ3NSMEZCUnl4WlFVRlpTU3hYUVVGdVFpeEZRVUZuUXp0QlFVTnVReXhYUVVGUFF5eFhRVUZYTEVOQlFVTk1MRWRCUVVRc1JVRkJUVU1zVDBGQlRpeERRVUZzUWp0QlFVTklMRWRCUmswc1RVRkZRVHRCUVVOSUxGZEJRVTlMTEZkQlFWY3NRMEZCUTA0c1IwRkJSQ3hGUVVGTlF5eFBRVUZPTEVOQlFXeENPMEZCUTBnN1FVRkRTanM3UVVGSlJDeFRRVUZUVFN4clFrRkJWQ3hEUVVFMFFrTXNTMEZCTlVJc1JVRkJjMFJETEUxQlFYUkVMRVZCUVcxR1ZDeEhRVUZ1Uml4RlFVRTJSME1zVDBGQk4wY3NSVUZCTWtrN1FVRkRka2tzVFVGQlNWRXNUVUZCVFN4RFFVRkRReXhOUVVGUUxFbEJRV2xDUkN4TlFVRk5MRU5CUVVORExFMUJRVkFzUzBGQmEwSXNUVUZCZGtNc1JVRkJLME03UVVGRE0wTkdMRWxCUVVGQkxFdEJRVXNzUTBGQlEwY3NTVUZCVGl4RFFVRlhPMEZCUTFCRExFMUJRVUZCTEVWQlFVVXNSVUZCUlN4SlFVUkhPMEZCUlZCRExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRReXhSUVVGQlFTeERRVUZETEVWQlFVVk1MRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZsU3l4TFFVRm1MRU5CUVhGQ0xFZEJRWEpDTEVWQlFUQkNMRU5CUVRGQ0xFVkJRVFpDUVN4TFFVRTNRaXhEUVVGdFF5eEhRVUZ1UXl4RlFVRjNReXhEUVVGNFF5eEZRVUV5UTBFc1MwRkJNME1zUTBGQmFVUXNSMEZCYWtRc1JVRkJjMFJETEV0QlFYUkVMRU5CUVRSRUxFTkJRVFZFTEVWQlFTdEVMRU5CUVM5RUxFVkJRV3RGUXl4SFFVRnNSU3hEUVVGelJTeFZRVUZEUXl4SFFVRkVPMEZCUVVFc2FVSkJRV2xDUXl4UlFVRlJMRU5CUVVORUxFZEJRVVFzUTBGQlVpeEhRVUZuUWl4SFFVRnFRenRCUVVGQkxGTkJRWFJGTEVWQlFUUkhSU3hOUVVFMVJ5eERRVUZ0U0N4RFFVRnVTRHRCUVVSS0xFOUJSa2s3UVVGTFVFTXNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME5RTEZGQlFVRkJMRU5CUVVNc1JVRkJSVkVzVlVGQlZTeERRVUZEWWl4TlFVRk5MRU5CUVVOakxHRkJRVkFzU1VGQmQwSXNSMEZCZWtJc1EwRkJWaXhIUVVFd1F6dEJRVVE1UXl4UFFVeEpPMEZCVVZCRExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRWaXhSUVVGQlFTeERRVUZETEVWQlFVVlJMRlZCUVZVc1EwRkJRMklzVFVGQlRTeERRVUZEWjBJc1YwRkJVQ3hKUVVGelFpeEhRVUYyUWp0QlFVUmtMRTlCVWtrN1FVRlhVRU1zVFVGQlFVRXNSVUZCUlN4RlFVRkZMREpDUVVGamFrSXNUVUZCVFN4RFFVRkRhMElzWVVGQmNrSXNRMEZZUnp0QlFWbFFReXhOUVVGQlFTeEZRVUZGTEVWQlFVVXNORUpCUVdWdVFpeE5RVUZOTEVOQlFVTnZRaXhqUVVGMFFqdEJRVnBITEV0QlFWZzdRVUZqU0RzN1FVRkRSQ3hOUVVGSmNFSXNUVUZCVFN4RFFVRkRjVUlzU1VGQlVDeEpRVUZsY2tJc1RVRkJUU3hEUVVGRGNVSXNTVUZCVUN4TFFVRm5RaXhOUVVGdVF5eEZRVUV5UXp0QlFVTjJRM1JDTEVsQlFVRkJMRXRCUVVzc1EwRkJRMGNzU1VGQlRpeERRVUZYTzBGQlExQkRMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJITzBGQlJWQkRMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUXl4UlFVRkJRU3hEUVVGRExFVkJRVVZNTEUxQlFVMHNRMEZCUTNGQ0xFbEJRVkFzUTBGQllXWXNTMEZCWWl4RFFVRnRRaXhIUVVGdVFpeEZRVUYzUWl4RFFVRjRRaXhGUVVFeVFrRXNTMEZCTTBJc1EwRkJhVU1zUjBGQmFrTXNSVUZCYzBNc1EwRkJkRU1zUlVGQmVVTkJMRXRCUVhwRExFTkJRU3RETEVkQlFTOURMRVZCUVc5RVF5eExRVUZ3UkN4RFFVRXdSQ3hEUVVFeFJDeEZRVUUyUkN4RFFVRTNSQ3hGUVVGblJVTXNSMEZCYUVVc1EwRkJiMFVzVlVGQlEwTXNSMEZCUkR0QlFVRkJMR2xDUVVGcFFrTXNVVUZCVVN4RFFVRkRSQ3hIUVVGRUxFTkJRVklzUjBGQlowSXNSMEZCYWtNN1FVRkJRU3hUUVVGd1JTeEZRVUV3UjBVc1RVRkJNVWNzUTBGQmFVZ3NRMEZCYWtnN1FVRkVTaXhQUVVaSk8wRkJTMUJETEUxQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORFVDeFJRVUZCUVN4RFFVRkRMRVZCUVVWUkxGVkJRVlVzUTBGQlEySXNUVUZCVFN4RFFVRkRjMElzVjBGQlVDeEpRVUZ6UWl4SFFVRjJRaXhEUVVGV0xFZEJRWGRETzBGQlJEVkRPMEZCVEVrc1MwRkJXRHRCUVZOSU96dEJRVU5FTEUxQlFVbERMRWxCUVVrc1IwRkJSeXhEUVVGWU8wRkJRVUVzVFVGQlkwTXNTVUZCU1N4SFFVRkhMRU5CUVhKQ08wRkJRVUVzVFVGQmQwSkRMRTlCUVU4c1IwRkJSeXhIUVVGc1F6czdRVUZEUVN4TlFVRkpiRU1zUjBGQlJ5eEpRVUZKUXl4UFFVRllMRVZCUVc5Q08wRkJRMmhDTEZGQlFVMXJReXhoUVVGaExFZEJRVWNzYjBOQlFYVkNia01zUjBGQmRrSXNSVUZCTkVKRExFOUJRVFZDTEVOQlFYUkNPMEZCUTBFc1VVRkJUVzFETEZGQlFWRXNSMEZCUjI1RExFOUJRVThzUTBGQlEyOURMRTlCUVZJc1JVRkJha0k3UVVGRFFTeFJRVUZOUXl4UFFVRlBMRWRCUVVkMFF5eEhRVUZITEVOQlFVTnhReXhQUVVGS0xFVkJRV2hDTzBGQlEwRk1MRWxCUVVGQkxFbEJRVWtzUjBGQlIwY3NZVUZCWVN4RFFVRkRTU3hEUVVGa0xFZEJRV3RDUkN4UFFVRlBMRU5CUVVORkxFTkJRVEZDTEVkQlFUaENTaXhSUVVGUkxFTkJRVU5KTEVOQlFUbERPMEZCUTBGUUxFbEJRVUZCTEVsQlFVa3NSMEZCUjBVc1lVRkJZU3hEUVVGRFRTeERRVUZrTEVkQlFXdENTQ3hQUVVGUExFTkJRVU5KTEVOQlFURkNMRWRCUVRoQ1RpeFJRVUZSTEVOQlFVTk5MRU5CUVRsRE8wRkJRMEZTTEVsQlFVRkJMRTlCUVU4c1IwRkJSMW9zVlVGQlZTeERRVUZEWWl4TlFVRk5MRU5CUVVONVFpeFBRVUZRTEVsQlFXdENMRWRCUVc1Q0xFTkJRVllzUjBGQmIwTXNSMEZCT1VNN1FVRkRTRHM3UVVGRFJERkNMRVZCUVVGQkxFdEJRVXNzUTBGQlEwY3NTVUZCVGl4RFFVRlhPMEZCUTFCRExFbEJRVUZCTEVWQlFVVXNSVUZCUlN4SlFVUkhPMEZCUlZBclFpeEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRemRDTEUxQlFVRkJMRU5CUVVNc1JVRkJSU3hEUVVORGEwSXNTVUZFUkN4RlFVVkRReXhKUVVaRU8wRkJSRW9zUzBGR1NUdEJRVkZRVnl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFF6bENMRTFCUVVGQkxFTkJRVU1zUlVGQlJTeERRVU5ETEVOQlJFUXNSVUZGUXl4RFFVWkVPMEZCUkVvc1MwRlNTVHRCUVdOUUswSXNTVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME12UWl4TlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGRFF5eEhRVVJFTEVWQlJVTXNSMEZHUkR0QlFVUktMRXRCWkVrN1FVRnZRbEJuUXl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEyaERMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVVJLTEV0QmNFSkpPMEZCZFVKUVR5eEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRMUFzVFVGQlFVRXNRMEZCUXl4RlFVRkZiMEk3UVVGRVNpeExRWFpDU1R0QlFUQkNVR0VzU1VGQlFVRXNSVUZCUlN4RlFVRkZPMEZCUTBGcVF5eE5RVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkVTQ3hMUVRGQ1J6dEJRVFpDVUd0RExFbEJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJiRU1zVFVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUkVnN1FVRTNRa2NzUjBGQldEdEJRV3REU0RzN1FVRkZSQ3hUUVVGVFVpeFhRVUZVTEVOQlFYRkNUaXhIUVVGeVFpeEZRVUU0UTBNc1QwRkJPVU1zUlVGQk1FWTdRVUZEZEVZc1RVRkJUV2RFTEV0QlFXbENMRWRCUVVjN1FVRkRkRUp5UXl4SlFVRkJRU3hGUVVGRkxFVkJRVVVzU1VGRWEwSTdRVUZGZEVKelF5eEpRVUZCUVN4RlFVRkZMRVZCUVVVc1JVRkdhMEk3UVVGSGRFSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJTeERRVWhyUWp0QlFVbDBRa01zU1VGQlFVRXNSVUZCUlN4RlFVRkZPMEZCU210Q0xFZEJRVEZDT3p0QlFVMUJMRTFCUVUxRExGZEJRVmNzUjBGQlJ5eFRRVUZrUVN4WFFVRmpMRU5CUVVORExGTkJRVVFzUlVGQk1FSTdRVUZETVVOQkxFbEJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWanRCUVVOQlRpeEpRVUZCUVN4TFFVRkxMRU5CUVVORExFVkJRVTRzUTBGQlZYWkRMRWxCUVZZc1EwRkJaVHRCUVVOWVF5eE5RVUZCUVN4RlFVRkZMRVZCUVVVc1NVRkVUenRCUVVWWU5FTXNUVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJRMEV4UXl4UlFVRkJRU3hEUVVGRExFVkJRVVYzUXl4VFFVRlRMRU5CUVVOSExFbEJSR0k3UVVGRlFXSXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSa2dzVDBGR1R6dEJRVTFZWXl4TlFVRkJRU3hGUVVGRkxFVkJRVVV4UkN4SFFVRkhMRU5CUVVNeVJDeEZRVTVITzBGQlQxaFFMRTFCUVVGQkxFVkJRVVVzUlVGQlJUdEJRVkJQTEV0QlFXWTdRVUZUUVN4UlFVRk5NME1zVFVGQlRTeEhRVUZIYlVRc1RVRkJUU3hEUVVGRFF5eG5Ra0ZCVUN4RFFVRjNRamRFTEVkQlFYaENMRU5CUVdZN1FVRkRRVThzU1VGQlFVRXNhMEpCUVd0Q0xFTkJRVU13UXl4TFFVRkxMRU5CUVVORExFVkJRVkFzUlVGQmFVTjZReXhOUVVGcVF5eEZRVUY1UTFRc1IwRkJla01zUlVGQk9FTkRMRTlCUVRsRExFTkJRV3hDTzBGQlEwZ3NSMEZpUkRzN1FVRmpRU3hOUVVGSlJDeEhRVUZITEZsQlFWazRSQ3huUWtGQmJrSXNSVUZCY1VNN1FVRkRha01zVVVGQlRVTXNVMEZCVXl4SFFVRkhMMFFzUjBGQlJ5eERRVUZET0VNc1EwRkJTaXhEUVVGTmEwSXNUMEZCZUVJN1FVRkRRVVFzU1VGQlFVRXNVMEZCVXl4RFFVRkRSU3gxUWtGQlZpeERRVUZyUTBNc1UwRkJVeXhEUVVGRFF5eHBRa0ZCTlVNN1FVRkRRU3hSUVVGTmNrSXNRMEZCUXl4SFFVRkhhVUlzVTBGQlV5eERRVUZEU3l4eFFrRkJjRUk3UVVGRFFTeFJRVUZOWkN4VFFVRlRMRWRCUVVjc1NVRkJTV1VzWlVGQlNpeEZRVUZzUWp0QlFVTkJaaXhKUVVGQlFTeFRRVUZUTEVOQlFVTm5RaXhOUVVGV0xFTkJRV2xDZUVJc1EwRkJha0lzUlVGQmIwSXNRMEZCY0VJN1FVRkRRVkVzU1VGQlFVRXNVMEZCVXl4RFFVRkRhVUlzUzBGQlZpeERRVUZuUW5wQ0xFTkJRV2hDTEVWQlFXMUNRU3hEUVVGdVFpeEZRVUZ6UWl4RFFVRjBRaXhGUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhEUVVFMVFpeEZRVUVyUWtFc1EwRkJMMElzUlVGQmEwTXNTVUZCU1VFc1EwRkJkRU03UVVGRFFWRXNTVUZCUVVFc1UwRkJVeXhEUVVGRGFVSXNTMEZCVml4RFFVRm5RbnBDTEVOQlFXaENMRVZCUVcxQ1FTeERRVUZ1UWl4RlFVRnpRaXhEUVVGMFFpeEZRVUY1UWl4RFFVRjZRaXhGUVVFMFFpeERRVUUxUWl4RlFVRXJRa0VzUTBGQkwwSXNSVUZCYTBNc1EwRkJiRU03UVVGRFFWRXNTVUZCUVVFc1UwRkJVeXhEUVVGRGEwSXNVMEZCVmp0QlFVTkJia0lzU1VGQlFVRXNWMEZCVnl4RFFVRkRReXhUUVVGRUxFTkJRVmc3UVVGRFNDeEhRVlpFTEUxQlZVOHNTVUZCU1hSRUxFZEJRVWNzV1VGQldYbEZMR2xDUVVGdVFpeEZRVUZ6UXp0QlFVTjZReXhSUVVGTlF5eE5RVUYxUWl4SFFVRkhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUTBGQmFFTTdPMEZCUkhsRExITkNRVVY0UWtFc1RVRkJUU3hEUVVGRGVrUXNSMEZCVUN4RFFVRlhMRlZCUVVFd1JDeEhRVUZITEVWQlFVazdRVUZETDBJc1ZVRkJUVm9zVTBGQlV5eEhRVUZITDBRc1IwRkJSeXhEUVVGRE1rVXNSMEZCUkN4RFFVRklMRU5CUVZOWUxFOUJRVE5DTzBGQlEwRkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEwVXNkVUpCUVZZc1EwRkJhME5ETEZOQlFWTXNRMEZCUTBNc2FVSkJRVFZETzBGQlEwRXNZVUZCVDBvc1UwRkJVeXhEUVVGRFN5eHhRa0ZCYWtJN1FVRkRTQ3hMUVVwblFpeERRVVozUWp0QlFVRkJPMEZCUVVFc1VVRkZiRU5STEVWQlJtdERPMEZCUVVFc1VVRkZPVUpETEVWQlJqaENPenRCUVU5NlF5eFJRVUZOZGtJc1ZVRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEZtTEVsQlFVRkJMRlZCUVZNc1EwRkJRMmRDTEUxQlFWWXNRMEZCYVVKTkxFVkJRV3BDTEVWQlFYRkNMRU5CUVhKQ096dEJRVU5CZEVJc1NVRkJRVUVzVlVGQlV5eERRVUZEYVVJc1MwRkJWaXhEUVVGblFrc3NSVUZCYUVJc1JVRkJiMEpETEVWQlFYQkNMRVZCUVhkQ0xFTkJRWGhDTEVWQlFUSkNMRU5CUVROQ0xFVkJRVGhDTEVOQlFUbENMRVZCUVdsRFJDeEZRVUZxUXl4RlFVRnhReXhKUVVGSlF5eEZRVUY2UXpzN1FVRkRRWFpDTEVsQlFVRkJMRlZCUVZNc1EwRkJRMmxDTEV0QlFWWXNRMEZCWjBKTExFVkJRV2hDTEVWQlFXOUNReXhGUVVGd1FpeEZRVUYzUWl4RFFVRjRRaXhGUVVFeVFpeERRVUV6UWl4RlFVRTRRaXhEUVVFNVFpeEZRVUZwUTBRc1JVRkJha01zUlVGQmNVTXNRMEZCY2tNN08wRkJRMEYwUWl4SlFVRkJRU3hWUVVGVExFTkJRVU5yUWl4VFFVRldPenRCUVVOQmJrSXNTVUZCUVVFc1YwRkJWeXhEUVVGRFF5eFZRVUZFTEVOQlFWZzdRVUZEU0N4SFFXSk5MRTFCWVVFc1NVRkJTWFJFTEVkQlFVY3NXVUZCV1RoRkxHTkJRVzVDTEVWQlFXMURPMEZCUTNSRExGRkJRVTFLTEU5QlFYRkRMRWRCUVVjc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNSVUZCYlVJc1NVRkJia0lzUTBGQk9VTTdPMEZCUkhORExIVkNRVVZpUVN4UFFVRk5MRU5CUVVONlJDeEhRVUZRTEVOQlFWY3NWVUZCUVRCRUxFZEJRVWNzUlVGQlNUdEJRVU4yUXl4VlFVRk5XaXhUUVVGVExFZEJRVWN2UkN4SFFVRkhMRU5CUVVNeVJTeEhRVUZFTEVOQlFVZ3NRMEZCVTFnc1QwRkJNMEk3UVVGRFFVUXNUVUZCUVVFc1UwRkJVeXhEUVVGRFJTeDFRa0ZCVml4RFFVRnJRME1zVTBGQlV5eERRVUZEUXl4cFFrRkJOVU03UVVGRFFTeGhRVUZQU2l4VFFVRlRMRU5CUVVOTExIRkNRVUZxUWp0QlFVTklMRXRCU25kQ0xFTkJSbUU3UVVGQlFUdEJRVUZCTEZGQlJTOUNWeXhGUVVZclFqdEJRVUZCTEZGQlJUTkNReXhGUVVZeVFqdEJRVUZCTEZGQlJYWkNReXhGUVVaMVFqdEJRVUZCTEZGQlJXNUNReXhGUVVadFFqczdRVUZQZEVNc1VVRkJUVU1zVDBGQlR5eEhRVUZIUXl4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlUwNHNSVUZCVkN4RlFVRmhReXhGUVVGaUxFTkJRV2hDTzBGQlEwRXNVVUZCVFUwc1QwRkJUeXhIUVVGSFJpeEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVMG9zUlVGQlZDeEZRVUZoUXl4RlFVRmlMRU5CUVdoQ096dEJRVU5CTEZGQlFVMDFRaXhYUVVGVExFZEJRVWNzU1VGQlNXVXNaVUZCU2l4RlFVRnNRanM3UVVGRFFXWXNTVUZCUVVFc1YwRkJVeXhEUVVGRFowSXNUVUZCVml4RFFVRnBRbE1zUlVGQlJTeEhRVUZIU1N4UFFVRjBRaXhGUVVFclFrWXNSVUZCUlN4SFFVRkhTeXhQUVVGd1F6czdRVUZEUVdoRExFbEJRVUZCTEZkQlFWTXNRMEZCUTJsRExFMUJRVllzUTBGQmFVSlFMRVZCUVVVc1IwRkJSMGNzVDBGQmRFSXNSVUZCSzBKRUxFVkJRVVVzUjBGQlIwa3NUMEZCY0VNN08wRkJRMEZxUXl4SlFVRkJRU3hYUVVGWExFTkJRVU5ETEZkQlFVUXNRMEZCV0R0QlFVTklMRWRCWWswc1RVRmhRU3hKUVVGSmRFUXNSMEZCUnl4WlFVRlpkMFlzWTBGQmJrSXNSVUZCYlVNN1FVRkRkRU1zVVVGQlRVTXNVVUZCVVN4SFFVRkhla1lzUjBGQlJ5eERRVUZETUVZc1dVRkJTaXhEUVVGcFFpeEhRVUZxUWl4TFFVRjVRaXhGUVVFeFF6czdRVUZEUVN4UlFVRk5jRU1zVjBGQlV5eEhRVUZITEVsQlFVbGxMR1ZCUVVvc1EwRkJZMjlDTEZGQlFXUXNRMEZCYkVJN08wRkJRMEZ3UXl4SlFVRkJRU3hYUVVGWExFTkJRVU5ETEZkQlFVUXNRMEZCV0R0QlFVTklMRWRCU2swc1RVRkpRU3hKUVVGSmRFUXNSMEZCUnl4WlFVRlpNa1lzYVVKQlFXWXNTVUZCYjBNelJpeEhRVUZITEZsQlFWazBSaXhyUWtGQmRrUXNSVUZCTWtVN1FVRkRPVVVzVVVGQlRVTXNUVUZCVFN4SFFVRkhOMFlzUjBGQlJ5eERRVUZETmtZc1RVRkJia0k3TzBGQlEwRXNVVUZCU1VFc1RVRkJUU3hEUVVGRFF5eE5RVUZZTEVWQlFXMUNPMEZCUTJZc1ZVRkJUVU1zWTBGQk1FSXNSMEZCUjBNc1MwRkJTeXhEUVVGRFF5eFRRVUZPTEVOQlFXZENha1lzUzBGQmFFSXNRMEZCYzBKclJpeEpRVUYwUWl4RFFVRXlRa3dzVFVGQk0wSXNRMEZCYmtNN08wRkJRMEVzVlVGQlRWWXNVVUZCVHl4SFFVRkhXU3hqUVVGakxFTkJRVU5KTEUxQlFXWXNRMEZCYzBJc1ZVRkJRM2hFTEVOQlFVUXNSVUZCU1hsRUxFTkJRVW83UVVGQlFTeGxRVUZWYUVJc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEVOQlFWTXhReXhEUVVGVUxFVkJRVmw1UkN4RFFVRkRMRU5CUVVNMVJDeERRVUZrTEVOQlFWWTdRVUZCUVN4UFFVRjBRaXhGUVVGclJDeERRVUZzUkN4RFFVRm9RanM3UVVGRFFTeFZRVUZOT0VNc1VVRkJUeXhIUVVGSFV5eGpRVUZqTEVOQlFVTkpMRTFCUVdZc1EwRkJjMElzVlVGQlEzaEVMRU5CUVVRc1JVRkJTWGxFTEVOQlFVbzdRVUZCUVN4bFFVRlZhRUlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNeFF5eERRVUZVTEVWQlFWbDVSQ3hEUVVGRExFTkJRVU14UkN4RFFVRmtMRU5CUVZZN1FVRkJRU3hQUVVGMFFpeEZRVUZyUkN4RFFVRnNSQ3hEUVVGb1FqczdRVUZEUVN4VlFVRk5XU3hYUVVGVExFZEJRVWNzU1VGQlNXVXNaVUZCU2l4RlFVRnNRanM3UVVGRFFXWXNUVUZCUVVFc1YwRkJVeXhEUVVGRFowSXNUVUZCVml4RFFVRnBRblZDTEUxQlFVMHNRMEZCUXl4RFFVRkVMRU5CUVU0c1EwRkJWWEpFTEVOQlFWWXNSMEZCWXpKRExGRkJRUzlDTEVWQlFYZERWU3hOUVVGTkxFTkJRVU1zUTBGQlJDeERRVUZPTEVOQlFWVnVSQ3hEUVVGV0xFZEJRV00wUXl4UlFVRjBSRHM3UVVGRFFWTXNUVUZCUVVFc1kwRkJZeXhEUVVGRFRTeFBRVUZtTEVOQlFYVkNMRlZCUVVORUxFTkJRVVFzUlVGQlNVVXNRMEZCU2l4RlFVRlZPMEZCUXpkQ0xGbEJRVWxCTEVOQlFVTXNTVUZCU1N4RFFVRlVMRVZCUVZrN08wRkJRMXBvUkN4UlFVRkJRU3hYUVVGVExFTkJRVU5wUXl4TlFVRldMRU5CUVdsQ1lTeERRVUZETEVOQlFVTTFSQ3hEUVVGR0xFZEJRVTB5UXl4UlFVRjJRaXhGUVVGblEybENMRU5CUVVNc1EwRkJRekZFTEVOQlFVWXNSMEZCVFRSRExGRkJRWFJETzBGQlEwZ3NUMEZJUkRzN1FVRkpRU3hWUVVGSmRFWXNSMEZCUnl4WlFVRlpNa1lzYVVKQlFXNUNMRVZCUVhORE8wRkJRMnhEY2tNc1VVRkJRVUVzVjBGQlV5eERRVUZEYTBJc1UwRkJWanRCUVVOSU96dEJRVU5FYmtJc1RVRkJRVUVzVjBGQlZ5eERRVUZEUXl4WFFVRkVMRU5CUVZnN1FVRkRTRHRCUVVOS0xFZEJha0pOTEUxQmFVSkJMRWxCUVVsMFJDeEhRVUZITEZsQlFWbDFSeXhqUVVGdVFpeEZRVUZ0UXp0QlFVTjBReXhSUVVGTk4wSXNVVUZCT0VJc1IwRkJSeXhEUVVGRExFOUJRVVFzUlVGQlZTeFJRVUZXTEVOQlFYWkRPenRCUVVSelF5eDFRa0ZGWkVFc1VVRkJUU3hEUVVGRGVrUXNSMEZCVUN4RFFVRlhMRlZCUVVFd1JDeEhRVUZITEVWQlFVazdRVUZEZEVNc1ZVRkJUVm9zVTBGQlV5eEhRVUZITDBRc1IwRkJSeXhEUVVGRE1rVXNSMEZCUkN4RFFVRklMRU5CUVZOWUxFOUJRVE5DTzBGQlEwRkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEwVXNkVUpCUVZZc1EwRkJhME5ETEZOQlFWTXNRMEZCUTBNc2FVSkJRVFZETzBGQlEwRXNZVUZCVDBvc1UwRkJVeXhEUVVGRFN5eHhRa0ZCYWtJN1FVRkRTQ3hMUVVwMVFpeERRVVpqTzBGQlFVRTdRVUZCUVN4UlFVVXZRbTlETEV0QlJpdENPMEZCUVVFc1VVRkZlRUpETEUxQlJuZENPenRCUVU5MFF5eFJRVUZOYmtRc1YwRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEZtTEVsQlFVRkJMRmRCUVZNc1EwRkJRMmRDTEUxQlFWWXNRMEZCYVVJc1EwRkJha0lzUlVGQmIwSXNRMEZCY0VJN08wRkJRMEZvUWl4SlFVRkJRU3hYUVVGVExFTkJRVU5wUXl4TlFVRldMRU5CUVdsQ2FVSXNTMEZCYWtJc1JVRkJkMElzUTBGQmVFSTdPMEZCUTBGc1JDeEpRVUZCUVN4WFFVRlRMRU5CUVVOcFF5eE5RVUZXTEVOQlFXbENhVUlzUzBGQmFrSXNSVUZCZDBKRExFMUJRWGhDT3p0QlFVTkJia1FzU1VGQlFVRXNWMEZCVXl4RFFVRkRhVU1zVFVGQlZpeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFtdENMRTFCUVhCQ096dEJRVU5CYmtRc1NVRkJRVUVzVjBGQlV5eERRVUZEYTBJc1UwRkJWanM3UVVGRFFXNUNMRWxCUVVGQkxGZEJRVmNzUTBGQlEwTXNWMEZCUkN4RFFVRllPMEZCUTBnc1IwRmtUU3hOUVdOQk8wRkJRMGh2UkN4SlFVRkJRU3hQUVVGUExFTkJRVU5ETEV0QlFWSXNRMEZCWXpOSExFZEJRV1E3UVVGRFFTeFZRVUZOTEVsQlFVazBSeXhMUVVGS0xFTkJRVlVzYlVSQlFWWXNRMEZCVGp0QlFVTklPenRCUVVORUxGTkJRVThzUTBGQlF6TkVMRXRCUVVRc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZOQlFWTTFReXhYUVVGVUxFTkJRWEZDVEN4SFFVRnlRaXhGUVVGMVEwTXNUMEZCZGtNc1JVRkJiVVk3UVVGREwwVXNUVUZCU1U4c1MwRkJiVUlzUjBGQlJ5eEZRVUV4UWp0QlFVTkJVaXhGUVVGQlFTeEhRVUZITEVOQlFVTTJSeXhWUVVGS0xFTkJRV1ZTTEU5QlFXWXNRMEZCZFVJc1ZVRkJRVk1zU1VGQlNTeEZRVUZKTzBGQlF6TkNMRkZCUVVsQkxFbEJRVWtzV1VGQldVTXNhMEpCUVhCQ0xFVkJRWGRETzBGQlEzQkRka2NzVFVGQlFVRXNTMEZCU3l4SFFVRkhWQ3hOUVVGTkxFTkJRVU1yUnl4SlFVRkVMRVZCUVU4M1J5eFBRVUZQTEVsQlFVbEVMRWRCUVd4Q0xFTkJRVTRzUTBGQk5rSnZRaXhOUVVFM1FpeERRVUZ2UTFvc1MwRkJjRU1zUTBGQlVqdEJRVU5JTzBGQlEwb3NSMEZLUkR0QlFVdEJMRk5CUVU5QkxFdEJRVkE3UVVGRFNEczdRVUZGVFN4VFFVRlRkMGNzWjBKQlFWUXNRMEZCTUVKRExFbEJRVEZDTEVWQlFXOUVReXhKUVVGd1JDeEZRVUZuUmp0QlFVTnVSaXhOUVVGTmFrVXNTMEZCYVVJc1IwRkJSenRCUVVOMFFuSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJyUWp0QlFVVjBRbk5ETEVsQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVVOQk8wRkJRMGwwUXl4TlFVRkJRU3hGUVVGRkxFVkJRVVVzU1VGRVVqdEJRVVZKTkVNc1RVRkJRVUVzUlVGQlJTeEZRVUZGTzBGQlEwRXhReXhSUVVGQlFTeERRVUZETEVWQlFVVXNTVUZFU0R0QlFVVkJPRUlzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUmtnc1QwRkdVanRCUVUxSlVTeE5RVUZCUVN4RlFVRkZMRVZCUVVVN1FVRk9VaXhMUVVSQkxFVkJVMEU3UVVGRFNYaERMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJTTzBGQlJVbERMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUXl4UlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1JVRkJWU3hEUVVGV08wRkJSRW9zVDBGR1VEdEJRVXRKVlN4TlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFExWXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zVDBGTVVEdEJRVkZKVHl4TlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFExQXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zVDBGU1VEdEJRVmRKV1N4TlFVRkJRU3hGUVVGRkxFVkJRVVVzTWtKQlFXTXNUVUZCWkN4RFFWaFNPMEZCV1VsRkxFMUJRVUZCTEVWQlFVVXNSVUZCUlN3MFFrRkJaU3hQUVVGbU8wRkJXbElzUzBGVVFTeEZRWFZDUVR0QlFVTkphRUlzVFVGQlFVRXNSVUZCUlN4RlFVRkZMRWxCUkZJN1FVRkZTVU1zVFVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBORExGRkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUTBGQlVDeEZRVUZWTEVOQlFWWTdRVUZFU2l4UFFVWlFPMEZCUzBsUExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRVQ3hSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZFU2p0QlFVeFFMRXRCZGtKQkxFVkJaME5CTzBGQlEwbEdMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJTTzBGQlJVa3JRaXhOUVVGQlFTeERRVUZETEVWQlFVVTdRVUZEUXpkQ0xGRkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVTkRMRU5CUkVRc1JVRkZReXhEUVVaRU8wRkJSRW9zVDBGR1VEdEJRVkZKT0VJc1RVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlEwTTVRaXhSUVVGQlFTeERRVUZETEVWQlFVVXNRMEZEUXl4RFFVUkVMRVZCUlVNc1EwRkdSRHRCUVVSS0xFOUJVbEE3UVVGalNTdENMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5ETDBJc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlEwTXNSMEZFUkN4RlFVVkRMRWRCUmtRN1FVRkVTaXhQUVdSUU8wRkJiMEpKWjBNc1RVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlEwTm9ReXhSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZFU2l4UFFYQkNVRHRCUVhWQ1NVOHNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME5RTEZGQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVSS0xFOUJka0pRTzBGQk1FSkphVU1zVFVGQlFVRXNSVUZCUlN4RlFVRkZPMEZCUTBGcVF5eFJRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkVTQ3hQUVRGQ1VqdEJRVFpDU1d0RExFMUJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJiRU1zVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUkVnN1FVRTNRbElzUzBGb1EwRXNRMEZHYTBJN1FVRnZSWFJDY1VNc1NVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQmNFVnJRanRCUVhGRmRFSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJUdEJRWEpGYTBJc1IwRkJNVUk3UVVGMVJVRXNUVUZCVFVVc1UwRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEVzVlVGQlVUUkRMRWxCUVZJN1FVRkRTU3hUUVVGTExFMUJRVXc3UVVGRFNUTkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEyZENMRTFCUVZZc1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJjRUk3UVVGRFFXaENMRTFCUVVGQkxGTkJRVk1zUTBGQlEybERMRTFCUVZZc1EwRkJhVUl5UWl4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEZRVUV3UWl4RFFVRXhRanRCUVVOQk5VUXNUVUZCUVVFc1UwRkJVeXhEUVVGRGFVTXNUVUZCVml4RFFVRnBRakpDTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVhKQ0xFVkJRVEJDUVN4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVFNVFqdEJRVU5CTlVRc1RVRkJRVUVzVTBGQlV5eERRVUZEYVVNc1RVRkJWaXhEUVVGcFFpeERRVUZxUWl4RlFVRnZRakpDTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVhoQ08wRkJRMEUxUkN4TlFVRkJRU3hUUVVGVExFTkJRVU5yUWl4VFFVRldPMEZCUTBFN08wRkJRMG9zVTBGQlN5eFRRVUZNTzBGQlEwbHNRaXhOUVVGQlFTeFRRVUZUTEVOQlFVTm5RaXhOUVVGV0xFTkJRV2xDTkVNc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQmNrSXNSVUZCTUVJc1EwRkJNVUk3UVVGRFFUVkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEybENMRXRCUVZZc1EwRkJaMEl5UXl4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGd1FpeEZRVUY1UWtFc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQk4wSXNSVUZCYTBNc1EwRkJiRU1zUlVGQmNVTXNRMEZCY2tNc1JVRkJkME1zUTBGQmVFTXNSVUZCTWtOQkxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFTOURMRVZCUVc5RUxFbEJRVWxCTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVRWRU8wRkJRMEUxUkN4TlFVRkJRU3hUUVVGVExFTkJRVU5wUWl4TFFVRldMRU5CUVdkQ01rTXNTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJjRUlzUlVGQmVVSkJMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRVGRDTEVWQlFXdERMRU5CUVd4RExFVkJRWEZETEVOQlFYSkRMRVZCUVhkRExFTkJRWGhETEVWQlFUSkRRU3hKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUV2UXl4RlFVRnZSQ3hEUVVGd1JEdEJRVU5CTlVRc1RVRkJRVUVzVTBGQlV5eERRVUZEYTBJc1UwRkJWanRCUVZwU096dEJRV05CYkVJc1JVRkJRVUVzVTBGQlV5eERRVUZEUXl4UFFVRldPMEZCUTBOT0xFVkJRVUZCTEV0QlFVc3NRMEZCUTBNc1JVRkJUaXhEUVVGVkxFTkJRVllzUTBGQlJDeERRVUUwUWswc1JVRkJOVUlzUTBGQlowTXhReXhEUVVGb1F5eEhRVUZ2UTNkRExGTkJRVk1zUTBGQlEwY3NTVUZCT1VNN1FVRkRRU3hUUVVGUFVpeExRVUZRTzBGQlEwZzdPMEZCUlUwc1UwRkJVMnRGTEZWQlFWUXNRMEZCYjBKdVNDeEhRVUZ3UWl4RlFVRjVRMjlJTEZGQlFYcERMRVZCUVRoRk8wRkJRMnBHTEUxQlFVMURMR0ZCUVdFc1IwRkJSM2hFTEdkQ1FVRm5RaXhEUVVGRE4wUXNSMEZCUkN4RFFVRjBRenRCUVVOQkxFMUJRVTF6U0N4UlFVRlJMRWRCUVVkb1J5eFZRVUZWTEVOQlFVTXJSaXhoUVVGaExFTkJRVU5ETEZGQlFXWXNRMEZCTTBJN1FVRkJRU3hOUVVOSlF5eFZRVUZWTEVkQlFVZEdMR0ZCUVdFc1EwRkJRMFVzVlVGQlpDeERRVUY1UW5oSExFdEJRWHBDTEVOQlFTdENMRWRCUVM5Q0xFVkJRVzlETEVOQlFYQkRMRVZCUVhWRGVVY3NTVUZCZGtNc1JVRkVha0k3UVVGQlFTeE5RVVZKUXl4VFFVRlRMRWRCUVVkS0xHRkJRV0VzUTBGQlEwa3NVMEZHT1VJN1FVRkJRU3hOUVVkSlF5eFZRVUZWTEVkQlFVZE1MR0ZCUVdFc1EwRkJRMHNzVlVGSUwwSTdRVUZCUVN4TlFVbEpReXhUUVVGVExFZEJRVWNzUTBGQlEwNHNZVUZCWVN4RFFVRkRka1lzU1VGQlpDeEpRVUZ6UWl4WlFVRjJRaXhGUVVGeFEyWXNTMEZCY2tNc1EwRkJNa01zUjBGQk0wTXNSVUZCWjBRc1EwRkJhRVFzUlVGQmJVUkJMRXRCUVc1RUxFTkJRWGxFTEVkQlFYcEVMRVZCUVRoRUxFTkJRVGxFTEVWQlFXbEZRU3hMUVVGcVJTeERRVUYxUlN4SFFVRjJSU3hGUVVFMFJVVXNSMEZCTlVVc1EwRkJaMFlzVlVGQlFYRkdMRU5CUVVNN1FVRkJRU3hYUVVGSmJrWXNVVUZCVVN4RFFVRkRiVVlzUTBGQlJDeERRVUZTTEVkQlFXTXNSMEZCYkVJN1FVRkJRU3hIUVVGcVJpeERRVXBvUWp0QlFVRkJMRTFCUzBselFpeFZRVUZWTEVkQlFVZFFMR0ZCUVdFc1EwRkJRMDhzVlVGTUwwSTdRVUZOUVN4TlFVRkpReXhSUVVGUkxFZEJRVWNzYjBKQlFXWTdPMEZCUTBFc1RVRkJTVlFzVVVGQlNpeEZRVUZqTzBGQlExWXNVVUZCVFZVc1UwRkJVeXhIUVVGSFZpeFJRVUZSTEVOQlFVTlhMRWxCUVZRc1EwRkJaVU1zVFVGQlppeERRVUZ6UWl4VlFVRkJReXhKUVVGSk8wRkJRVUVzWVVGQlNVRXNTVUZCU1N4RFFVRkRReXhQUVVGTUxFbEJRV2RDV0N4VlFVRm9RaXhKUVVFNFFsVXNTVUZCU1N4RFFVRkRSU3hOUVVGTUxFbEJRV1ZXTEZOQlFUZERMRWxCUVRCRVVTeEpRVUZKTEVOQlFVTkhMRTlCUVV3c1NVRkJaMEpXTEZWQlFUbEZPMEZCUVVFc1MwRkJNVUlzUTBGQmJFSTdRVUZEUVN4UlFVRkpTU3hUUVVGVExFTkJRVU5vUXl4TlFVRmtMRVZCUTBrclFpeFJRVUZSTEVkQlFVZERMRk5CUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQllVOHNTMEZCZUVJN1FVRkRVRHM3UVVGRFJDeE5RVUZOUXl4UlFVRnJRaXhIUVVGSE8wRkJRM1pDUXl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEzcElMRTFCUVVGQkxFTkJRVU1zUlVGQlJTeERRVU5ETzBGQlEwa3dTQ3hSUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFVUR0QlFVVkpNMFlzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBOQkxGVkJRVUZCTEVOQlFVTXNSVUZCUlhsRkxGRkJSRW83UVVGRlF6ZEZMRlZCUVVGQkxFTkJRVU1zUlVGQlJXOUdMRkZCUmtvN1FVRkhRMWNzVlVGQlFVRXNRMEZCUXl4RlFVRkZlRWtzUjBGQlJ5eERRVUZEZVVrc1UwRklVanRCUVVsRFF5eFZRVUZCUVN4RFFVRkRMRVZCUVVVc09FSkJRV2xDWkN4VlFVRnFRaXhEUVVwS08wRkJTME5sTEZWQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVV4TU8wRkJUVU5ETEZWQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVU1TU8wRkJUME5ETEZWQlFVRkJMRVZCUVVVc1JVRkJSV3hDTzBGQlVFdzdRVUZHVUN4UFFVUkVPMEZCUkVvc1MwRkViMEk3UVVGcFFuWkNhRVlzU1VGQlFVRXNRMEZCUXl4RlFVRkZMRVZCYWtKdlFqdEJRV3RDZGtKdFJ5eEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRMnhITEUxQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORE9VSXNVVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRME1zUTBGRVJDeEZRVVZETEVOQlJrUTdRVUZFU2p0QlFVUktMRXRCYkVKdlFqdEJRVEJDZGtJNFFpeEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRXhRbTlDTEVkQlFUTkNPMEZCTkVKQkxFMUJRVTF0Unl4UFFVRmpMRWRCUVVjN1FVRkRia0ppTEVsQlFVRkJMRTlCUVU4c1JVRkJSVmdzVlVGRVZUdEJRVVZ1UW1Fc1NVRkJRVUVzVDBGQlR5eFpRVUZMVml4VlFVRk1MRU5CUmxrN1FVRkhia0pUTEVsQlFVRkJMRTFCUVUwc1JVRkJSVllzVTBGSVZ6dEJRVWx1UWxrc1NVRkJRVUVzUzBGQlN5eEZRVUZGVWp0QlFVcFpMRWRCUVhaQ08wRkJUVUVzVTBGQlR5eERRVUZEVXl4UlFVRkVMRVZCUVZkVExFOUJRVmdzUTBGQlVEdEJRVU5JT3p0QlFVVk5MRk5CUVZORExGZEJRVlFzUTBGQmNVSm9TaXhIUVVGeVFpeEZRVUV5UTJsS0xGTkJRVE5ETEVWQlFUQkdPMEZCUXpkR0xFMUJRVWwwUml4RlFVRkZMRWRCUVVjc2IwSkJRVlE3UVVGRFFTeE5RVUZOZFVZc1dVRkJXU3hIUVVGSGJFb3NSMEZCUnl4RFFVRkRlVWNzVFVGQlNpeERRVUZYZWtNc1QwRkJhRU03UVVGRFFXdEdMRVZCUVVGQkxGbEJRVmtzUTBGQlEycEdMSFZDUVVGaUxFTkJRWEZEUXl4VFFVRlRMRU5CUVVORExHbENRVUV2UXp0QlFVTkJMRTFCUVUxblJpeFhRVUZYTEVkQlFVZHVTaXhIUVVGSExFTkJRVU4zUnl4TFFVRktMRU5CUVZWNFF5eFBRVUU1UWp0QlFVTkJiVVlzUlVGQlFVRXNWMEZCVnl4RFFVRkRiRVlzZFVKQlFWb3NRMEZCYjBORExGTkJRVk1zUTBGQlEwTXNhVUpCUVRsRE8wRkJRMEVzVFVGQlRXbEdMRTFCUVUwc1IwRkJSME1zVVVGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xGRkJRWFpDTEVOQlFXWTdRVUZEUVN4TlFVRk5ReXhIUVVGSExFZEJRVWRJTEUxQlFVMHNRMEZCUTBrc1ZVRkJVQ3hEUVVGclFpeEpRVUZzUWl4RFFVRmFPMEZCUlVGS0xFVkJRVUZCTEUxQlFVMHNRMEZCUXpWRExFdEJRVkFzUjBGQlpUSkRMRmRCUVZjc1EwRkJReTlGTEhGQ1FVRmFMRWRCUVc5RExFTkJRVzVFTzBGQlEwRm5SaXhGUVVGQlFTeE5RVUZOTEVOQlFVTXpReXhOUVVGUUxFZEJRV2RDZVVNc1dVRkJXU3hEUVVGRE9VVXNjVUpCUVdJc1IwRkJjVU1zUTBGQmNrUTdRVUZEUVcxR0xFVkJRVUZCTEVkQlFVY3NRMEZCUlVVc1UwRkJUQ3hEUVVGbGVrb3NSMEZCWml4RlFVRnZRaXhEUVVGd1FpeEZRVUYxUWl4RFFVRjJRaXhGUVVFd1FtOUtMRTFCUVUwc1EwRkJRelZETEV0QlFXcERMRVZCUVhkRE5FTXNUVUZCVFN4RFFVRkRNME1zVFVGQkwwTTdRVUZGUVN4TlFVRk5hVVFzVDBGQlR5eEhRVUZIVGl4TlFVRk5MRU5CUVVOUExGTkJRVkFzUlVGQmFFSTdPMEZCUTBFc1RVRkJTVllzVTBGQlNpeEZRVUZsTzBGQlExZ3NVVUZCVFZjc1ZVRkJWU3hIUVVGSFdDeFRRVUZUTEVOQlFVVnFRaXhOUVVGWUxFTkJRV3RDTEZWQlFVRTJRaXhMUVVGTE8wRkJRVUVzWVVGQlNVRXNTMEZCU3l4RFFVRkRiRWdzUTBGQlRpeEpRVUZYSzBjc1QwRkJaanRCUVVGQkxFdEJRWFpDTEVOQlFXNUNPMEZCUTBFc1VVRkJTVVVzVlVGQlZTeERRVUZET1VRc1RVRkJaaXhGUVVOSmJrTXNSVUZCUlN4SFFVRkhhVWNzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4RFFVRmpha2NzUlVGQmJrSTdRVUZEVURzN1FVRkRSQ3hOUVVGTmEwY3NTMEZCU3l4SFFVRkhPMEZCUTFaRExFbEJRVUZCTEVOQlFVTXNSVUZCUlZvc1dVRkJXU3hEUVVGRE9VVXNjVUpCUkU0N1FVRkZWalZETEVsQlFVRkJMRU5CUVVNc1JVRkJSVEpJTEZkQlFWY3NRMEZCUXk5RkxIRkNRVVpNTzBGQlIxWlVMRWxCUVVGQkxFVkJRVVVzUlVGQlJrRXNSVUZJVlR0QlFVbFdhRUlzU1VGQlFVRXNRMEZCUXl4RlFVRkZLMGNzVDBGS1R6dEJRVXRXYmtnc1NVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlRFOHNSMEZCWkR0QlFVOUJMRk5CUVU4c1EwRkJRMjlDTEVWQlFVUXNSVUZCUzJ0SExFdEJRVXdzUTBGQlVEdEJRVU5JSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1IzSnZkWEJUYUdGd1pTd2dWR1Y0ZEVSaGRHRXNJRkpsWm1WeVpXNWpaVWxFTENCUVlYUm9VMmhoY0dVc0lFWnBiR3hUYUdGd1pTd2dVM1J5YjJ0bFUyaGhjR1VzSUZSeVlXNXpabTl5YlZOb1lYQmxMQ0JKYldGblpVRnpjMlYwTENCR2IyNTBNU3dnUm05dWRITXNJRUZ6YzJWMGN5QjlJR1p5YjIwZ0p5NHZZVzVwYldGMGFXOXVKMXh1YVcxd2IzSjBJSHNnVUdGMGFFMWhhMlZ5SUgwZ1puSnZiU0FuTGk5d1lYUm9KMXh1YVcxd2IzSjBJSFYxYVdRZ1puSnZiU0FuZFhWcFpDOTJOQ2RjYm1sdGNHOXlkQ0I3SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMHNJR1Z1WTI5a1pVeHBibVZLYjJsdUxDQmxibU52WkdWTWFXNWxRMkZ3TENCbGJtTnZaR1ZVWlhoMFFXNWphRzl5SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEluWEc1Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxibVJsY2loa2IyMDZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ3dnWW1GelpVUnZiVDg2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrNklFZHliM1Z3VTJoaGNHVmJYU0I3WEc0Z0lDQWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFSbGVIUkZiR1Z0Wlc1MElIeDhJR1J2YlNCcGJuTjBZVzVqWlc5bUlGTldSMGx0WVdkbFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHUnZiU0JwYm5OMFlXNWpaVzltSUZOV1IwZEZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaVzVrWlhKSGNtOTFjQ2hrYjIwc0lHSmhjMlZFYjIwcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYm1SbGNrZHNlWEJvS0dSdmJTd2dZbUZ6WlVSdmJTbGNiaUFnSUNCOVhHNTlYRzVjYm5SNWNHVWdWbWx6ZFdGc1IzSnZkWEJKZEdWdElEMGdVR0YwYUZOb1lYQmxJSHdnUm1sc2JGTm9ZWEJsSUh3Z1UzUnliMnRsVTJoaGNHVWdmQ0JVY21GdWMyWnZjbTFUYUdGd1pWeHVYRzVtZFc1amRHbHZiaUJoWkdSV2FYTjFZV3hGYm1OdlpHbHVaM01vYVhSbGJYTTZJRlpwYzNWaGJFZHliM1Z3U1hSbGJWdGRMQ0J6ZEhsc1pYTTZJRU5UVTFOMGVXeGxSR1ZqYkdGeVlYUnBiMjRzSUdSdmJUODZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ3dnWW1GelpVUnZiVDg2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUdsbUlDaHpkSGxzWlhNdWMzUnliMnRsSUNZbUlITjBlV3hsY3k1emRISnZhMlVnSVQwOUlDZHViMjVsSnlrZ2UxeHVJQ0FnSUNBZ0lDQnBkR1Z0Y3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVPaUFuYzNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWXpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJSE4wZVd4bGN5NXpkSEp2YTJVaExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbk5zYVdObEtEQXNJRE1wTG0xaGNDZ29jbUYzT2lCemRISnBibWNwSUQwK0lIQmhjbk5sU1c1MEtISmhkeWtnTHlBeU5UVXBMbU52Ym1OaGRDZ3hLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJ3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTV6ZEhKdmEyVlBjR0ZqYVhSNUlIeDhJQ2N4SnlrZ0tpQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCM09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nY0dGeWMyVkdiRzloZENoemRIbHNaWE11YzNSeWIydGxWMmxrZEdnZ2ZId2dKekVuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGpPaUJsYm1OdlpHVk1hVzVsUTJGd0tITjBlV3hsY3k1emRISnZhMlZNYVc1bFkyRndLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHFPaUJsYm1OdlpHVk1hVzVsU205cGJpaHpkSGxzWlhNdWMzUnliMnRsVEdsdVpXcHZhVzRwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoemRIbHNaWE11Wm1sc2JDQW1KaUJ6ZEhsc1pYTXVabWxzYkNBaFBUMGdKMjV2Ym1VbktTQjdYRzRnSUNBZ0lDQWdJR2wwWlcxekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGs2SUNkbWJDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCak9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nYzNSNWJHVnpMbVpwYkd3aExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbk5zYVdObEtEQXNJRE1wTG0xaGNDZ29jbUYzT2lCemRISnBibWNwSUQwK0lIQmhjbk5sU1c1MEtISmhkeWtnTHlBeU5UVXBMbU52Ym1OaGRDZ3hLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJ3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTVtYVd4c1QzQmhZMmwwZVNCOGZDQW5NU2NwSUNvZ01UQXdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ2ZWeHVJQ0FnSUd4bGRDQndiM05ZSUQwZ01Dd2djRzl6V1NBOUlEQXNJRzl3WVdOcGRIa2dQU0F4TURCY2JpQWdJQ0JwWmlBb1pHOXRJQ1ltSUdKaGMyVkViMjBwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWW1GelpWUnlZVzV6Wm05eWJTQTlJR05oYkdOMWJHRjBaVUpoYzJWVWNtRnVjMlp2Y20wb1pHOXRMQ0JpWVhObFJHOXRLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmlZWE5sUWtKdmVDQTlJR0poYzJWRWIyMHVaMlYwUWtKdmVDZ3BYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxaa0pDYjNnZ1BTQmtiMjB1WjJWMFFrSnZlQ2dwWEc0Z0lDQWdJQ0FnSUhCdmMxZ2dQU0JpWVhObFZISmhibk5tYjNKdExtVWdLeUJ5WldaQ1FtOTRMbmdnTFNCaVlYTmxRa0p2ZUM1NFhHNGdJQ0FnSUNBZ0lIQnZjMWtnUFNCaVlYTmxWSEpoYm5ObWIzSnRMbVlnS3lCeVpXWkNRbTk0TG5rZ0xTQmlZWE5sUWtKdmVDNTVYRzRnSUNBZ0lDQWdJRzl3WVdOcGRIa2dQU0J3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTV2Y0dGamFYUjVJSHg4SUNjeEp5a2dLaUF4TURCY2JpQWdJQ0I5WEc0Z0lDQWdhWFJsYlhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSNU9pQmNJblJ5WENJc1hHNGdJQ0FnSUNBZ0lIQTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHczZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOWUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMWxjYmlBZ0lDQWdJQ0FnSUNBZ0lGMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWVRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01UQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCck9pQXdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdzNklHOXdZV05wZEhsY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMnM2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3M2SURCY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMkU2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3M2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnVaR1Z5UjJ4NWNHZ29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lHSmhjMlZFYjIwL09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXBPaUJIY205MWNGTm9ZWEJsVzEwZ2UxeHVJQ0FnSUdOdmJuTjBJR2R5YjNWd09pQkhjbTkxY0ZOb1lYQmxJRDBnZTF4dUlDQWdJQ0FnSUNCMGVUb2dYQ0puY2x3aUxGeHVJQ0FnSUNBZ0lDQnBkRG9nVzEwc1hHNGdJQ0FnSUNBZ0lHSnRPaUF3TEZ4dUlDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2NHOXpkRUZqZEdsdmJuTWdQU0FvY0dGMGFFMWhhMlZ5T2lCUVlYUm9UV0ZyWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG5WdWFXWnZjbTBvS1Z4dUlDQWdJQ0FnSUNCbmNtOTFjQzVwZENFdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlVG9nSjNOb0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUd0ek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nY0dGMGFFMWhhMlZ5TG5CaGRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXRPaUJrYjIwdWFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzUjViR1Z6SUQwZ2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvWkc5dEtWeHVJQ0FnSUNBZ0lDQmhaR1JXYVhOMVlXeEZibU52WkdsdVozTW9aM0p2ZFhBdWFYUWhJR0Z6SUZacGMzVmhiRWR5YjNWd1NYUmxiVnRkTENCemRIbHNaWE1zSUdSdmJTd2dZbUZ6WlVSdmJTbGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHUnZiU0JwYm5OMFlXNWpaVzltSUZOV1IwTnBjbU5zWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNablRHVnVaM1JvSUQwZ1pHOXRMbkl1WW1GelpWWmhiRnh1SUNBZ0lDQWdJQ0J6ZG1kTVpXNW5kR2d1WTI5dWRtVnlkRlJ2VTNCbFkybG1hV1ZrVlc1cGRITW9VMVpIVEdWdVozUm9MbE5XUjE5TVJVNUhWRWhVV1ZCRlgxQllLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlJRDBnYzNablRHVnVaM1JvTG5aaGJIVmxTVzVUY0dWamFXWnBaV1JWYm1sMGMxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9UV0ZyWlhJZ1BTQnVaWGNnVUdGMGFFMWhhMlZ5S0NsY2JpQWdJQ0FnSUNBZ2NHRjBhRTFoYTJWeUxtMXZkbVZVYnloeUxDQXdLVnh1SUNBZ0lDQWdJQ0J3WVhSb1RXRnJaWEl1WVhKalZHOG9jaXdnY2l3Z01Dd2dNU3dnTUN3Z2Npd2dNaUFxSUhJcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNWhjbU5VYnloeUxDQnlMQ0F3TENBeExDQXdMQ0J5TENBd0tWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXVZMnh2YzJWUVlYUm9LQ2xjYmlBZ0lDQWdJQ0FnY0c5emRFRmpkR2x2Ym5Nb2NHRjBhRTFoYTJWeUtWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pHOXRJR2x1YzNSaGJtTmxiMllnVTFaSFJXeHNhWEJ6WlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGd1MyVjVPaUFvSjNKNEp5QjhJQ2R5ZVNjcFcxMGdQU0JiSjNKNEp5d2dKM0o1SjExY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNKNExDQnllVjBnUFNCdFlYQkxaWGt1YldGd0tHdGxlU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkbWRNWlc1bmRHZ2dQU0JrYjIxYmEyVjVYUzVpWVhObFZtRnNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRtZE1aVzVuZEdndVkyOXVkbVZ5ZEZSdlUzQmxZMmxtYVdWa1ZXNXBkSE1vVTFaSFRHVnVaM1JvTGxOV1IxOU1SVTVIVkVoVVdWQkZYMUJZS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjJaMHhsYm1kMGFDNTJZV3gxWlVsdVUzQmxZMmxtYVdWa1ZXNXBkSE5jYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGMGFFMWhhMlZ5SUQwZ2JtVjNJRkJoZEdoTllXdGxjaWdwWEc0Z0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1dGIzWmxWRzhvY25nc0lEQXBYRzRnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aHllQ3dnY25rc0lEQXNJREVzSURBc0lISjRMQ0F5SUNvZ2Nua3BYRzRnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aHllQ3dnY25rc0lEQXNJREVzSURBc0lISjRMQ0F3S1Z4dUlDQWdJQ0FnSUNCd1lYUm9UV0ZyWlhJdVkyeHZjMlZRWVhSb0tDbGNiaUFnSUNBZ0lDQWdjRzl6ZEVGamRHbHZibk1vY0dGMGFFMWhhMlZ5S1Z4dUlDQWdJSDBnWld4elpTQnBaaUFvWkc5dElHbHVjM1JoYm1ObGIyWWdVMVpIVEdsdVpVVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRndTMlY1T2lBb0ozZ3hKeUI4SUNkNE1pY2dmQ0FuZVRFbklId2dKM2t5SnlsYlhTQTlJRnNuZURFbkxDQW5lREluTENBbmVURW5MQ0FuZVRJblhWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCYmVERXNJSGd5TENCNU1Td2dlVEpkSUQwZ2JXRndTMlY1TG0xaGNDaHJaWGtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1puVEdWdVozUm9JRDBnWkc5dFcydGxlVjB1WW1GelpWWmhiRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzWm5UR1Z1WjNSb0xtTnZiblpsY25SVWIxTndaV05wWm1sbFpGVnVhWFJ6S0ZOV1IweGxibWQwYUM1VFZrZGZURVZPUjFSSVZGbFFSVjlRV0NsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkbWRNWlc1bmRHZ3VkbUZzZFdWSmJsTndaV05wWm1sbFpGVnVhWFJ6WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkRmdnUFNCTllYUm9MbTFwYmloNE1Td2dlRElwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzltWm5ObGRGa2dQU0JOWVhSb0xtMXBiaWg1TVN3Z2VUSXBYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhkR2hOWVd0bGNpQTlJRzVsZHlCUVlYUm9UV0ZyWlhJb0tWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXViVzkyWlZSdktIZ3hJQzBnYjJabWMyVjBXQ3dnZVRFZ0xTQnZabVp6WlhSWktWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXViR2x1WlZSdktIZ3lJQzBnYjJabWMyVjBXQ3dnZVRJZ0xTQnZabVp6WlhSWktWeHVJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hrYjIwZ2FXNXpkR0Z1WTJWdlppQlRWa2RRWVhSb1JXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9SR0YwWVNBOUlHUnZiUzVuWlhSQmRIUnlhV0oxZEdVb0oyUW5LU0I4ZkNBbkoxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9UV0ZyWlhJZ1BTQnVaWGNnVUdGMGFFMWhhMlZ5S0hCaGRHaEVZWFJoS1Z4dUlDQWdJQ0FnSUNCd2IzTjBRV04wYVc5dWN5aHdZWFJvVFdGclpYSXBYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFFiMng1WjI5dVJXeGxiV1Z1ZENCOGZDQmtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFFiMng1YkdsdVpVVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHOXBiblJ6SUQwZ1pHOXRMbkJ2YVc1MGMxeHVJQ0FnSUNBZ0lDQnBaaUFvY0c5cGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNtRmliR1ZRYjJsdWRITTZJRVJQVFZCdmFXNTBXMTBnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNod2IybHVkSE1wWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFJZSUQwZ2FYUmxjbUZpYkdWUWIybHVkSE11Y21Wa2RXTmxLQ2h3TENCMktTQTlQaUJOWVhSb0xtMXBiaWh3TENCMkxuZ3BMQ0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwV1NBOUlHbDBaWEpoWW14bFVHOXBiblJ6TG5KbFpIVmpaU2dvY0N3Z2Rpa2dQVDRnVFdGMGFDNXRhVzRvY0N3Z2RpNTVLU3dnTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQmhkR2hOWVd0bGNpQTlJRzVsZHlCUVlYUm9UV0ZyWlhJb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG0xdmRtVlVieWh3YjJsdWRITmJNRjB1ZUNBdElHOW1abk5sZEZnc0lIQnZhVzUwYzFzd1hTNTVJQzBnYjJabWMyVjBXU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaWEpoWW14bFVHOXBiblJ6TG1admNrVmhZMmdvS0hZc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E4UFNBd0tTQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9UV0ZyWlhJdWJHbHVaVlJ2S0hZdWVDQXRJRzltWm5ObGRGZ3NJSFl1ZVNBdElHOW1abk5sZEZrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFCdmJIbG5iMjVGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG1Oc2IzTmxVR0YwYUNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFKbFkzUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWhjRXRsZVRvZ0tDZDNhV1IwYUNjZ2ZDQW5hR1ZwWjJoMEp5bGJYU0E5SUZzbmQybGtkR2duTENBbmFHVnBaMmgwSjExY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNkcFpIUm9MQ0JvWldsbmFIUmRJRDBnYldGd1MyVjVMbTFoY0NoclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzWm5UR1Z1WjNSb0lEMGdaRzl0VzJ0bGVWMHVZbUZ6WlZaaGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNablRHVnVaM1JvTG1OdmJuWmxjblJVYjFOd1pXTnBabWxsWkZWdWFYUnpLRk5XUjB4bGJtZDBhQzVUVmtkZlRFVk9SMVJJVkZsUVJWOVFXQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRtZE1aVzVuZEdndWRtRnNkV1ZKYmxOd1pXTnBabWxsWkZWdWFYUnpYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoZEdoTllXdGxjaUE5SUc1bGR5QlFZWFJvVFdGclpYSW9LVnh1SUNBZ0lDQWdJQ0J3WVhSb1RXRnJaWEl1Ylc5MlpWUnZLREFzSURBcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXNhVzVsVkc4b2QybGtkR2dzSURBcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXNhVzVsVkc4b2QybGtkR2dzSUdobGFXZG9kQ2xjYmlBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWd3TENCb1pXbG5hSFFwWEc0Z0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1amJHOXpaVkJoZEdnb0tWeHVJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loa2IyMHBYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UbThnYVcxd2JHVnRaVzUwWVhScGIyNGdabTkxYm1RZ1ptOXlJSE4yWnlCbmNtRndhR2xqY3lCbGJHVnRaVzUwTGljcFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmJaM0p2ZFhCZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJtUmxja2R5YjNWd0tHUnZiVG9nVTFaSFIwVnNaVzFsYm5Rc0lHSmhjMlZFYjIwL09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXBPaUJIY205MWNGTm9ZWEJsVzEwZ2UxeHVJQ0FnSUd4bGRDQnBkR1Z0Y3pvZ1IzSnZkWEJUYUdGd1pWdGRJRDBnVzExY2JpQWdJQ0JrYjIwdVkyaHBiR1JPYjJSbGN5NW1iM0pGWVdOb0tHNXZaR1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTQnBibk4wWVc1alpXOW1JRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhNZ1BTQnlaVzVrWlhJb2JtOWtaU3dnWW1GelpVUnZiU0I4ZkNCa2IyMHBMbU52Ym1OaGRDaHBkR1Z0Y3lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJQ0FnY21WMGRYSnVJR2wwWlcxelhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5Wlc1a1pYSlFiR0ZwYmtkc2VYQm9LSFI1Y0dVNklDZHlaV04wSnlCOElDZGxiR3hwY0hObEp5d2dZWEpuY3pvZ2JuVnRZbVZ5VzEwcE9pQkhjbTkxY0ZOb1lYQmxJSHRjYmlBZ0lDQmpiMjV6ZENCbmNtOTFjRG9nUjNKdmRYQlRhR0Z3WlNBOUlIdGNiaUFnSUNBZ0lDQWdkSGs2SUZ3aVozSmNJaXhjYmlBZ0lDQWdJQ0FnYVhRNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVUb2dKM05vSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcmN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGs2SUNkemRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJiTVN3Z01Td2dNU3dnTVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIYzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F6b2dNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lBeE1EQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hqT2lCbGJtTnZaR1ZNYVc1bFEyRndLQ2RpZFhSMEp5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR282SUdWdVkyOWtaVXhwYm1WS2IybHVLQ2R0YVhSbGNpY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNU9pQW5abXduTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1d6RXNJREVzSURFc0lERmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3M2SURFd01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhrNklDZDBjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdzNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F6b2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNVEF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVRBd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF4TURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnJPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOaE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdzNklEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGMHNYRzRnSUNBZ0lDQWdJR0p0T2lBd0xGeHVJQ0FnSUNBZ0lDQm9aRG9nWm1Gc2MyVmNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdjR0YwYUUxaGEyVnlJRDBnYm1WM0lGQmhkR2hOWVd0bGNpZ3BYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psWTNRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG0xdmRtVlVieWd3TENBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWhoY21keld6QmRMQ0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwYUUxaGEyVnlMbXhwYm1WVWJ5aGhjbWR6V3pCZExDQmhjbWR6V3pGZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWd3TENCaGNtZHpXekZkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwYUUxaGEyVnlMbU5zYjNObFVHRjBhQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RsYkd4cGNITmxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXRiM1psVkc4b1lYSm5jMXN3WFN3Z01DbGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1aGNtTlVieWhoY21keld6QmRMQ0JoY21keld6RmRMQ0F3TENBeExDQXdMQ0JoY21keld6QmRMQ0F5SUNvZ1lYSm5jMXN4WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aGhjbWR6V3pCZExDQmhjbWR6V3pGZExDQXdMQ0F4TENBd0xDQmhjbWR6V3pCZExDQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRTFoYTJWeUxtTnNiM05sVUdGMGFDZ3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCaGRHaE5ZV3RsY2k1MWJtbG1iM0p0S0NrN1hHNGdJQ0FnS0dkeWIzVndMbWwwSVZzd1hTQmhjeUJRWVhSb1UyaGhjR1VwTG10eklTNXJJRDBnY0dGMGFFMWhhMlZ5TG5CaGRHaGNiaUFnSUNCeVpYUjFjbTRnWjNKdmRYQmNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbGJtUmxjbFJsZUhRb1pHOXRPaUJUVmtkVVpYaDBSV3hsYldWdWRDd2dabTl1ZEV4cGMzUS9PaUJHYjI1MGN5azZJRnRVWlhoMFJHRjBZU3dnUm05dWRERmRJSHRjYmlBZ0lDQmpiMjV6ZENCamIyMXdkWFJsWkZOMGVXeGxJRDBnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2hrYjIwcFhHNGdJQ0FnWTI5dWMzUWdabTl1ZEZOcGVtVWdQU0J3WVhKelpVWnNiMkYwS0dOdmJYQjFkR1ZrVTNSNWJHVXVabTl1ZEZOcGVtVXBMRnh1SUNBZ0lDQWdJQ0JtYjI1MFJtRnRhV3g1SUQwZ1kyOXRjSFYwWldSVGRIbHNaUzVtYjI1MFJtRnRhV3g1TG5Od2JHbDBLQ2NzSnlsYk1GMHVkSEpwYlNncExGeHVJQ0FnSUNBZ0lDQm1iMjUwVTNSNWJHVWdQU0JqYjIxd2RYUmxaRk4wZVd4bExtWnZiblJUZEhsc1pTeGNiaUFnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kQ0E5SUdOdmJYQjFkR1ZrVTNSNWJHVXVabTl1ZEZkbGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnWm05dWRFTnZiRzl5SUQwZ0tHTnZiWEIxZEdWa1UzUjViR1V1Wm1sc2JDQjhmQ0FuY21kaUtEQXNNQ3d3S1NjcExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbTFoY0NocElEMCtJSEJoY25ObFNXNTBLR2twSUM4Z01qVTFLU3hjYmlBZ0lDQWdJQ0FnZEdWNGRFRnVZMmh2Y2lBOUlHTnZiWEIxZEdWa1UzUjViR1V1ZEdWNGRFRnVZMmh2Y2x4dUlDQWdJR3hsZENCbWIyNTBUbUZ0WlNBOUlIVjFhV1FvS1Z4dUlDQWdJR2xtSUNobWIyNTBUR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbWIyNTBSWGhwYzNRZ1BTQm1iMjUwVEdsemRDNXNhWE4wSVM1bWFXeDBaWElvWm05dWRDQTlQaUJtYjI1MExtWkdZVzFwYkhrZ1BUMGdabTl1ZEVaaGJXbHNlU0FtSmlCbWIyNTBMbVpUZEhsc1pTQTlQU0JtYjI1MFUzUjViR1VnSmlZZ1ptOXVkQzVtVjJWcFoyaDBJRDA5SUdadmJuUlhaV2xuYUhRcFhHNGdJQ0FnSUNBZ0lHbG1JQ2htYjI1MFJYaHBjM1F1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkRTVoYldVZ1BTQm1iMjUwUlhocGMzUmJNRjB1Wms1aGJXVWhYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJSFJsZUhSRVlYUmhPaUJVWlhoMFJHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ1pEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2F6b2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2REb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjem9nWm05dWRGTnBlbVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtT2lCbWIyNTBUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRNklHUnZiUzVwYm01bGNraFVUVXdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxT2lCbGJtTnZaR1ZVWlhoMFFXNWphRzl5S0hSbGVIUkJibU5vYjNJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzY3pvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmpPaUJtYjI1MFEyOXNiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjRG9nZTMwc1hHNGdJQ0FnSUNBZ0lHMDZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR0U2SUZ0ZFhHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElHWnZiblJFWldZNklFWnZiblF4SUQwZ2UxeHVJQ0FnSUNBZ0lDQm1SbUZ0YVd4NU9pQm1iMjUwUm1GdGFXeDVMRnh1SUNBZ0lDQWdJQ0JtVjJWcFoyaDBPaUJnSkh0bWIyNTBWMlZwWjJoMGZXQXNYRzRnSUNBZ0lDQWdJR1pUZEhsc1pUb2dabTl1ZEZOMGVXeGxMRnh1SUNBZ0lDQWdJQ0JtVG1GdFpUb2dabTl1ZEU1aGJXVmNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRnQwWlhoMFJHRjBZU3dnWm05dWRFUmxabDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxibVJsY2tsdFlXZGxLR1J2YlRvZ1UxWkhTVzFoWjJWRmJHVnRaVzUwTENCaGMzTmxkRXhwYzNRL09pQkJjM05sZEhNcE9pQmJVbVZtWlhKbGJtTmxTVVFzSUVsdFlXZGxRWE56WlhSZElIdGNiaUFnSUNCc1pYUWdhV1FnUFNCMWRXbGtLQ2xjYmlBZ0lDQmpiMjV6ZENCa2IyMUlaV2xuYUhSV1lXd2dQU0JrYjIwdWFHVnBaMmgwTG1KaGMyVldZV3hjYmlBZ0lDQmtiMjFJWldsbmFIUldZV3d1WTI5dWRtVnlkRlJ2VTNCbFkybG1hV1ZrVlc1cGRITW9VMVpIVEdWdVozUm9MbE5XUjE5TVJVNUhWRWhVV1ZCRlgxQllLVnh1SUNBZ0lHTnZibk4wSUdSdmJWZHBaSFJvVm1Gc0lEMGdaRzl0TG5kcFpIUm9MbUpoYzJWV1lXeGNiaUFnSUNCa2IyMVhhV1IwYUZaaGJDNWpiMjUyWlhKMFZHOVRjR1ZqYVdacFpXUlZibWwwY3loVFZrZE1aVzVuZEdndVUxWkhYMHhGVGtkVVNGUlpVRVZmVUZncFhHNGdJQ0FnWTI5dWMzUWdZMkZ1ZG1GeklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblkyRnVkbUZ6SnlsY2JpQWdJQ0JqYjI1emRDQmpkSGdnUFNCallXNTJZWE11WjJWMFEyOXVkR1Y0ZENnbk1tUW5LVnh1WEc0Z0lDQWdZMkZ1ZG1GekxuZHBaSFJvSUQwZ1pHOXRWMmxrZEdoV1lXd3VkbUZzZFdWSmJsTndaV05wWm1sbFpGVnVhWFJ6SUNvZ00xeHVJQ0FnSUdOaGJuWmhjeTVvWldsbmFIUWdQU0JrYjIxSVpXbG5hSFJXWVd3dWRtRnNkV1ZKYmxOd1pXTnBabWxsWkZWdWFYUnpJQ29nTTF4dUlDQWdJR04wZUNFdVpISmhkMGx0WVdkbEtHUnZiU3dnTUN3Z01Dd2dZMkZ1ZG1GekxuZHBaSFJvTENCallXNTJZWE11YUdWcFoyaDBLVnh1WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZVlZ5YkNBOUlHTmhiblpoY3k1MGIwUmhkR0ZWVWt3b0tWeHVJQ0FnSUdsbUlDaGhjM05sZEV4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWE56WlhSRmVHbHpkQ0E5SUdGemMyVjBUR2x6ZENFdVptbHNkR1Z5S0dGemMyVjBJRDArSUdGemMyVjBMbkFnUFQwZ1pHRjBZVlZ5YkNsY2JpQWdJQ0FnSUNBZ2FXWWdLR0Z6YzJWMFJYaHBjM1F1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUWdQU0JoYzNObGRFVjRhWE4wV3pCZExtbGtJVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0JoYzNObGRDQTlJSHRjYmlBZ0lDQWdJQ0FnYURvZ1pHOXRTR1ZwWjJoMFZtRnNMblpoYkhWbFNXNVRjR1ZqYVdacFpXUlZibWwwY3l4Y2JpQWdJQ0FnSUNBZ2R6b2daRzl0VjJsa2RHaFdZV3d1ZG1Gc2RXVkpibE53WldOcFptbGxaRlZ1YVhSekxGeHVJQ0FnSUNBZ0lDQnBaQ3hjYmlBZ0lDQWdJQ0FnY0RvZ1pHRjBZVlZ5YkN4Y2JpQWdJQ0FnSUNBZ1pUb2dNVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVzJsa0xDQmhjM05sZEYxY2JuMGlYWDA9IiwiLypcbiAqIEdlbmVyYXRlZCBieSBQRUcuanMgMC4xMC4wLlxuICpcbiAqIGh0dHA6Ly9wZWdqcy5vcmcvXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHBlZyRzdWJjbGFzcyhjaGlsZCwgcGFyZW50KSB7XG4gIGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfVxuICBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7XG59XG5cbmZ1bmN0aW9uIHBlZyRTeW50YXhFcnJvcihtZXNzYWdlLCBleHBlY3RlZCwgZm91bmQsIGxvY2F0aW9uKSB7XG4gIHRoaXMubWVzc2FnZSAgPSBtZXNzYWdlO1xuICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gIHRoaXMuZm91bmQgICAgPSBmb3VuZDtcbiAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICB0aGlzLm5hbWUgICAgID0gXCJTeW50YXhFcnJvclwiO1xuXG4gIGlmICh0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHBlZyRTeW50YXhFcnJvcik7XG4gIH1cbn1cblxucGVnJHN1YmNsYXNzKHBlZyRTeW50YXhFcnJvciwgRXJyb3IpO1xuXG5wZWckU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlID0gZnVuY3Rpb24oZXhwZWN0ZWQsIGZvdW5kKSB7XG4gIHZhciBERVNDUklCRV9FWFBFQ1RBVElPTl9GTlMgPSB7XG4gICAgICAgIGxpdGVyYWw6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgbGl0ZXJhbEVzY2FwZShleHBlY3RhdGlvbi50ZXh0KSArIFwiXFxcIlwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiY2xhc3NcIjogZnVuY3Rpb24oZXhwZWN0YXRpb24pIHtcbiAgICAgICAgICB2YXIgZXNjYXBlZFBhcnRzID0gXCJcIixcbiAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RhdGlvbi5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZXNjYXBlZFBhcnRzICs9IGV4cGVjdGF0aW9uLnBhcnRzW2ldIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgICAgPyBjbGFzc0VzY2FwZShleHBlY3RhdGlvbi5wYXJ0c1tpXVswXSkgKyBcIi1cIiArIGNsYXNzRXNjYXBlKGV4cGVjdGF0aW9uLnBhcnRzW2ldWzFdKVxuICAgICAgICAgICAgICA6IGNsYXNzRXNjYXBlKGV4cGVjdGF0aW9uLnBhcnRzW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gXCJbXCIgKyAoZXhwZWN0YXRpb24uaW52ZXJ0ZWQgPyBcIl5cIiA6IFwiXCIpICsgZXNjYXBlZFBhcnRzICsgXCJdXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW55OiBmdW5jdGlvbihleHBlY3RhdGlvbikge1xuICAgICAgICAgIHJldHVybiBcImFueSBjaGFyYWN0ZXJcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZW5kIG9mIGlucHV0XCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3RoZXI6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGF0aW9uLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gIGZ1bmN0aW9uIGhleChjaCkge1xuICAgIHJldHVybiBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGl0ZXJhbEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXCIvZywgICdcXFxcXCInKVxuICAgICAgLnJlcGxhY2UoL1xcMC9nLCAnXFxcXDAnKVxuICAgICAgLnJlcGxhY2UoL1xcdC9nLCAnXFxcXHQnKVxuICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceDAnICsgaGV4KGNoKTsgfSlcbiAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg3Ri1cXHg5Rl0vZywgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceCcgICsgaGV4KGNoKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc0VzY2FwZShzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXFxdL2csICdcXFxcXScpXG4gICAgICAucmVwbGFjZSgvXFxeL2csICdcXFxcXicpXG4gICAgICAucmVwbGFjZSgvLS9nLCAgJ1xcXFwtJylcbiAgICAgIC5yZXBsYWNlKC9cXDAvZywgJ1xcXFwwJylcbiAgICAgIC5yZXBsYWNlKC9cXHQvZywgJ1xcXFx0JylcbiAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MEZdL2csICAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgwJyArIGhleChjaCk7IH0pXG4gICAgICAucmVwbGFjZSgvW1xceDEwLVxceDFGXFx4N0YtXFx4OUZdL2csIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgnICArIGhleChjaCk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RhdGlvbikge1xuICAgIHJldHVybiBERVNDUklCRV9FWFBFQ1RBVElPTl9GTlNbZXhwZWN0YXRpb24udHlwZV0oZXhwZWN0YXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RlZChleHBlY3RlZCkge1xuICAgIHZhciBkZXNjcmlwdGlvbnMgPSBuZXcgQXJyYXkoZXhwZWN0ZWQubGVuZ3RoKSxcbiAgICAgICAgaSwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRpb25zW2ldID0gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RlZFtpXSk7XG4gICAgfVxuXG4gICAgZGVzY3JpcHRpb25zLnNvcnQoKTtcblxuICAgIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChpID0gMSwgaiA9IDE7IGkgPCBkZXNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGRlc2NyaXB0aW9uc1tpIC0gMV0gIT09IGRlc2NyaXB0aW9uc1tpXSkge1xuICAgICAgICAgIGRlc2NyaXB0aW9uc1tqXSA9IGRlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlc2NyaXB0aW9ucy5sZW5ndGggPSBqO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25zWzBdO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbnNbMF0gKyBcIiBvciBcIiArIGRlc2NyaXB0aW9uc1sxXTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgKyBcIiwgb3IgXCJcbiAgICAgICAgICArIGRlc2NyaXB0aW9uc1tkZXNjcmlwdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVGb3VuZChmb3VuZCkge1xuICAgIHJldHVybiBmb3VuZCA/IFwiXFxcIlwiICsgbGl0ZXJhbEVzY2FwZShmb3VuZCkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG4gIH1cblxuICByZXR1cm4gXCJFeHBlY3RlZCBcIiArIGRlc2NyaWJlRXhwZWN0ZWQoZXhwZWN0ZWQpICsgXCIgYnV0IFwiICsgZGVzY3JpYmVGb3VuZChmb3VuZCkgKyBcIiBmb3VuZC5cIjtcbn07XG5cbmZ1bmN0aW9uIHBlZyRwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuXG4gIHZhciBwZWckRkFJTEVEID0ge30sXG5cbiAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMgPSB7IHN2Z19wYXRoOiBwZWckcGFyc2VzdmdfcGF0aCB9LFxuICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uICA9IHBlZyRwYXJzZXN2Z19wYXRoLFxuXG4gICAgICBwZWckYzAgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gW107XG4gICAgICAgICAgZm9yICh2YXIgY21kcz1bXSxpPTA7aTxkYXRhLmxlbmd0aDtpKyspIGNtZHM9Y21kcy5jb25jYXQuYXBwbHkoY21kcyxkYXRhW2ldKTtcbiAgICAgICAgICB2YXIgZmlyc3Q9Y21kc1swXTtcbiAgICAgICAgICBpZiAoZmlyc3QgJiYgZmlyc3QuY29kZT09J20nKXsgLy8gUGVyIHNwZWMsIGZpcnN0IG1vdmV0byBpcyBuZXZlciByZWxhdGl2ZVxuICAgICAgICAgICAgZGVsZXRlIGZpcnN0LnJlbGF0aXZlO1xuICAgICAgICAgICAgZmlyc3QuY29kZSA9ICdNJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNtZHM7XG4gICAgICAgIH0sXG4gICAgICBwZWckYzEgPSBmdW5jdGlvbihmaXJzdCwgbW9yZSkgeyByZXR1cm4gbWVyZ2UoZmlyc3QsbW9yZSkgfSxcbiAgICAgIHBlZyRjMiA9IC9eW01tXS8sXG4gICAgICBwZWckYzMgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJNXCIsIFwibVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNCA9IGZ1bmN0aW9uKGMsIGZpcnN0LCBtb3JlKSB7XG4gICAgICAgICAgdmFyIG1vdmUgPSBjb21tYW5kcyhjLFtmaXJzdF0pO1xuICAgICAgICAgIGlmIChtb3JlKSBtb3ZlID0gbW92ZS5jb25jYXQoY29tbWFuZHMoYz09J00nID8gJ0wnIDogJ2wnLG1vcmVbMV0pKTtcbiAgICAgICAgICByZXR1cm4gbW92ZTtcbiAgICAgICAgfSxcbiAgICAgIHBlZyRjNSA9IC9eW1p6XS8sXG4gICAgICBwZWckYzYgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJaXCIsIFwielwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tbWFuZHMoJ1onKSB9LFxuICAgICAgcGVnJGM4ID0gL15bTGxdLyxcbiAgICAgIHBlZyRjOSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIkxcIiwgXCJsXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMxMCA9IGZ1bmN0aW9uKGMsIGFyZ3MpIHsgcmV0dXJuIGNvbW1hbmRzKGMsYXJncykgfSxcbiAgICAgIHBlZyRjMTEgPSAvXltIaF0vLFxuICAgICAgcGVnJGMxMiA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIkhcIiwgXCJoXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMxMyA9IGZ1bmN0aW9uKGMsIGFyZ3MpIHsgcmV0dXJuIGNvbW1hbmRzKGMsYXJncy5tYXAoZnVuY3Rpb24oeCl7IHJldHVybiB7eDp4fX0pKSB9LFxuICAgICAgcGVnJGMxNCA9IC9eW1Z2XS8sXG4gICAgICBwZWckYzE1ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiVlwiLCBcInZcIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzE2ID0gZnVuY3Rpb24oYywgYXJncykgeyByZXR1cm4gY29tbWFuZHMoYyxhcmdzLm1hcChmdW5jdGlvbih5KXsgcmV0dXJuIHt5Onl9fSkpIH0sXG4gICAgICBwZWckYzE3ID0gL15bQ2NdLyxcbiAgICAgIHBlZyRjMTggPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJDXCIsIFwiY1wiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMTkgPSBmdW5jdGlvbihhLCBiLCBjKSB7IHJldHVybiB7IHgxOmEueCwgeTE6YS55LCB4MjpiLngsIHkyOmIueSwgeDpjLngsIHk6Yy55IH0gfSxcbiAgICAgIHBlZyRjMjAgPSAvXltTc10vLFxuICAgICAgcGVnJGMyMSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIlNcIiwgXCJzXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMyMiA9IGZ1bmN0aW9uKGIsIGMpIHsgcmV0dXJuIHsgeDI6Yi54LCB5MjpiLnksIHg6Yy54LCB5OmMueSB9IH0sXG4gICAgICBwZWckYzIzID0gL15bUXFdLyxcbiAgICAgIHBlZyRjMjQgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJRXCIsIFwicVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMjUgPSBmdW5jdGlvbihhLCBiKSB7IHJldHVybiB7IHgxOmEueCwgeTE6YS55LCB4OmIueCwgeTpiLnkgfSB9LFxuICAgICAgcGVnJGMyNiA9IC9eW1R0XS8sXG4gICAgICBwZWckYzI3ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiVFwiLCBcInRcIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzI4ID0gL15bQWFdLyxcbiAgICAgIHBlZyRjMjkgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJBXCIsIFwiYVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMzAgPSBmdW5jdGlvbihyeCwgcnksIHhyb3QsIGxhcmdlLCBzd2VlcCwgeHkpIHsgcmV0dXJuIHsgcng6cngsIHJ5OnJ5LCB4QXhpc1JvdGF0aW9uOnhyb3QsIGxhcmdlQXJjOmxhcmdlLCBzd2VlcDpzd2VlcCwgeDp4eS54LCB5Onh5LnkgfSB9LFxuICAgICAgcGVnJGMzMSA9IGZ1bmN0aW9uKHgsIHkpIHsgcmV0dXJuIHsgeDp4LCB5OnkgfSB9LFxuICAgICAgcGVnJGMzMiA9IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4qMSB9LFxuICAgICAgcGVnJGMzMyA9IGZ1bmN0aW9uKHBhcnRzKSB7IHJldHVybiBwYXJ0cy5qb2luKCcnKSoxIH0sXG4gICAgICBwZWckYzM0ID0gL15bMDFdLyxcbiAgICAgIHBlZyRjMzUgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCIwXCIsIFwiMVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMzYgPSBmdW5jdGlvbihiaXQpIHsgcmV0dXJuIGJpdD09JzEnIH0sXG4gICAgICBwZWckYzM3ID0gZnVuY3Rpb24oKSB7IHJldHVybiAnJyB9LFxuICAgICAgcGVnJGMzOCA9IFwiLFwiLFxuICAgICAgcGVnJGMzOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIsXCIsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDAgPSBmdW5jdGlvbihwYXJ0cykgeyByZXR1cm4gcGFydHMuam9pbignJykgfSxcbiAgICAgIHBlZyRjNDEgPSBcIi5cIixcbiAgICAgIHBlZyRjNDIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLlwiLCBmYWxzZSksXG4gICAgICBwZWckYzQzID0gL15bZUVdLyxcbiAgICAgIHBlZyRjNDQgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJlXCIsIFwiRVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDUgPSAvXlsrXFwtXS8sXG4gICAgICBwZWckYzQ2ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiK1wiLCBcIi1cIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzQ3ID0gL15bMC05XS8sXG4gICAgICBwZWckYzQ4ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIjBcIiwgXCI5XCJdXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDkgPSBmdW5jdGlvbihkaWdpdHMpIHsgcmV0dXJuIGRpZ2l0cy5qb2luKCcnKSB9LFxuICAgICAgcGVnJGM1MCA9IC9eWyBcXHRcXG5cXHJdLyxcbiAgICAgIHBlZyRjNTEgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCIgXCIsIFwiXFx0XCIsIFwiXFxuXCIsIFwiXFxyXCJdLCBmYWxzZSwgZmFsc2UpLFxuXG4gICAgICBwZWckY3VyclBvcyAgICAgICAgICA9IDAsXG4gICAgICBwZWckc2F2ZWRQb3MgICAgICAgICA9IDAsXG4gICAgICBwZWckcG9zRGV0YWlsc0NhY2hlICA9IFt7IGxpbmU6IDEsIGNvbHVtbjogMSB9XSxcbiAgICAgIHBlZyRtYXhGYWlsUG9zICAgICAgID0gMCxcbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgID0gW10sXG4gICAgICBwZWckc2lsZW50RmFpbHMgICAgICA9IDAsXG5cbiAgICAgIHBlZyRyZXN1bHQ7XG5cbiAgaWYgKFwic3RhcnRSdWxlXCIgaW4gb3B0aW9ucykge1xuICAgIGlmICghKG9wdGlvbnMuc3RhcnRSdWxlIGluIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzdGFydCBwYXJzaW5nIGZyb20gcnVsZSBcXFwiXCIgKyBvcHRpb25zLnN0YXJ0UnVsZSArIFwiXFxcIi5cIik7XG4gICAgfVxuXG4gICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uc1tvcHRpb25zLnN0YXJ0UnVsZV07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhdGlvbigpIHtcbiAgICByZXR1cm4gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGVjdGVkKGRlc2NyaXB0aW9uLCBsb2NhdGlvbikge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb24gIT09IHZvaWQgMCA/IGxvY2F0aW9uIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKVxuXG4gICAgdGhyb3cgcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKFxuICAgICAgW3BlZyRvdGhlckV4cGVjdGF0aW9uKGRlc2NyaXB0aW9uKV0sXG4gICAgICBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksXG4gICAgICBsb2NhdGlvblxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBsb2NhdGlvbikge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb24gIT09IHZvaWQgMCA/IGxvY2F0aW9uIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKVxuXG4gICAgdGhyb3cgcGVnJGJ1aWxkU2ltcGxlRXJyb3IobWVzc2FnZSwgbG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbih0ZXh0LCBpZ25vcmVDYXNlKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJsaXRlcmFsXCIsIHRleHQ6IHRleHQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRjbGFzc0V4cGVjdGF0aW9uKHBhcnRzLCBpbnZlcnRlZCwgaWdub3JlQ2FzZSkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiY2xhc3NcIiwgcGFydHM6IHBhcnRzLCBpbnZlcnRlZDogaW52ZXJ0ZWQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRhbnlFeHBlY3RhdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImFueVwiIH07XG4gIH1cblxuICBmdW5jdGlvbiBwZWckZW5kRXhwZWN0YXRpb24oKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJlbmRcIiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcykge1xuICAgIHZhciBkZXRhaWxzID0gcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdLCBwO1xuXG4gICAgaWYgKGRldGFpbHMpIHtcbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICBwID0gcG9zIC0gMTtcbiAgICAgIHdoaWxlICghcGVnJHBvc0RldGFpbHNDYWNoZVtwXSkge1xuICAgICAgICBwLS07XG4gICAgICB9XG5cbiAgICAgIGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3BdO1xuICAgICAgZGV0YWlscyA9IHtcbiAgICAgICAgbGluZTogICBkZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogZGV0YWlscy5jb2x1bW5cbiAgICAgIH07XG5cbiAgICAgIHdoaWxlIChwIDwgcG9zKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHApID09PSAxMCkge1xuICAgICAgICAgIGRldGFpbHMubGluZSsrO1xuICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXRhaWxzLmNvbHVtbisrO1xuICAgICAgICB9XG5cbiAgICAgICAgcCsrO1xuICAgICAgfVxuXG4gICAgICBwZWckcG9zRGV0YWlsc0NhY2hlW3Bvc10gPSBkZXRhaWxzO1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVMb2NhdGlvbihzdGFydFBvcywgZW5kUG9zKSB7XG4gICAgdmFyIHN0YXJ0UG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhzdGFydFBvcyksXG4gICAgICAgIGVuZFBvc0RldGFpbHMgICA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhlbmRQb3MpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiB7XG4gICAgICAgIG9mZnNldDogc3RhcnRQb3MsXG4gICAgICAgIGxpbmU6ICAgc3RhcnRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogc3RhcnRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgfSxcbiAgICAgIGVuZDoge1xuICAgICAgICBvZmZzZXQ6IGVuZFBvcyxcbiAgICAgICAgbGluZTogICBlbmRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogZW5kUG9zRGV0YWlscy5jb2x1bW5cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQpIHtcbiAgICBpZiAocGVnJGN1cnJQb3MgPCBwZWckbWF4RmFpbFBvcykgeyByZXR1cm47IH1cblxuICAgIGlmIChwZWckY3VyclBvcyA+IHBlZyRtYXhGYWlsUG9zKSB7XG4gICAgICBwZWckbWF4RmFpbFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCA9IFtdO1xuICAgIH1cblxuICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckYnVpbGRTaW1wbGVFcnJvcihtZXNzYWdlLCBsb2NhdGlvbikge1xuICAgIHJldHVybiBuZXcgcGVnJFN5bnRheEVycm9yKG1lc3NhZ2UsIG51bGwsIG51bGwsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihleHBlY3RlZCwgZm91bmQsIGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBwZWckU3ludGF4RXJyb3IoXG4gICAgICBwZWckU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlKGV4cGVjdGVkLCBmb3VuZCksXG4gICAgICBleHBlY3RlZCxcbiAgICAgIGZvdW5kLFxuICAgICAgbG9jYXRpb25cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc3ZnX3BhdGgoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBbXTtcbiAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEucHVzaChzMik7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXBzKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzAoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cHMoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXAoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBbXTtcbiAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBbXTtcbiAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2Vtb3ZldG8oKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBbXTtcbiAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2VkcmF3dG9fY29tbWFuZCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBbXTtcbiAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZWRyYXd0b19jb21tYW5kKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkcmF3dG9fY29tbWFuZCgpIHtcbiAgICB2YXIgczA7XG5cbiAgICBzMCA9IHBlZyRwYXJzZWNsb3NlcGF0aCgpO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VsaW5ldG8oKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWN1cnZldG8oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbW92ZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMyk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IFtzNSwgczZdO1xuICAgICAgICAgICAgICBzNCA9IHM1O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0KHMxLCBzMywgczQpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VjbG9zZXBhdGgoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjNS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM3KCk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaW5ldG8oKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbGluZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMTEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyKTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTMoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW51bWJlcigpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMTQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTYoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzE3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzEwKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMxOShzMSwgczMsIHM1KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzIwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc21vb3RoX2N1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzIyKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzIzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTAoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50KCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI1KHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGMyNi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjcpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyYygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzI4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyOSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZWxsaXB0aWNhbF9hcmNfYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2Vub25uZWdhdGl2ZV9udW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWZsYWcoKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJHBhcnNlZmxhZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMChzMSwgczMsIHM1LCBzNywgczksIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbnVtYmVyKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzMShzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vub25uZWdhdGl2ZV9udW1iZXIoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCgpO1xuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzMyKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlcigpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgczIgPSBwZWckcGFyc2VzaWduKCk7XG4gICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczMgPSBwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCgpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgIHMxID0gczI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJHBhcnNlc2lnbigpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzMzKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWZsYWcoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMzQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM1KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzM2KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWNvbW1hX3dzcCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIHMyID0gcGVnJHBhcnNld3NwKCk7XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEgPSBbczEsIHMyLCBzM107XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYSgpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzNygpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vjb21tYSgpIHtcbiAgICB2YXIgczA7XG5cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICBzMCA9IHBlZyRjMzg7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZmxvYXRpbmdfcG9pbnRfY29uc3RhbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIHMyID0gcGVnJHBhcnNlZnJhY3Rpb25hbF9jb25zdGFudCgpO1xuICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczMgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICBzMSA9IHMyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMiA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM0MChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VmcmFjdGlvbmFsX2NvbnN0YW50KCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgczIgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgczMgPSBwZWckYzQxO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczMsIHM0XTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICAgICAgczMgPSBwZWckYzQxO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Mik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM0MChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBvbmVudCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzQzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NCk7IH1cbiAgICB9XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMyA9IHBlZyRwYXJzZXNpZ24oKTtcbiAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczMsIHM0XTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjNDAoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc2lnbigpIHtcbiAgICB2YXIgczA7XG5cbiAgICBpZiAocGVnJGM0NS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDYpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gW107XG4gICAgaWYgKHBlZyRjNDcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ4KTsgfVxuICAgIH1cbiAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgaWYgKHBlZyRjNDcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDgpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzQ5KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXdzcCgpIHtcbiAgICB2YXIgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGM1MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTEpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMzcoKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJnZShmaXJzdCxtb3JlKXtcbiAgICAgIGlmICghbW9yZSkgcmV0dXJuIFtmaXJzdF07XG4gICAgICBmb3IgKHZhciBhPVtmaXJzdF0saT0wLGw9bW9yZS5sZW5ndGg7aTxsO2krKykgYVtpKzFdPW1vcmVbaV1bMV07XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgY21kcyA9IHttOidtb3ZldG8nLGw6J2xpbmV0bycsaDonaG9yaXpvbnRhbCBsaW5ldG8nLHY6J3ZlcnRpY2FsIGxpbmV0bycsYzonY3VydmV0bycsczonc21vb3RoIGN1cnZldG8nLHE6J3F1YWRyYXRpYyBjdXJ2ZXRvJyx0OidzbW9vdGggcXVhZHJhdGljIGN1cnZldG8nLGE6J2VsbGlwdGljYWwgYXJjJyx6OidjbG9zZXBhdGgnfTtcbiAgICBmb3IgKHZhciBjb2RlIGluIGNtZHMpIGNtZHNbY29kZS50b1VwcGVyQ2FzZSgpXT1jbWRzW2NvZGVdO1xuICAgIGZ1bmN0aW9uIGNvbW1hbmRzKGNvZGUsYXJncyl7XG4gICAgICBpZiAoIWFyZ3MpIGFyZ3M9W3t9XTtcbiAgICAgIGZvciAodmFyIGk9YXJncy5sZW5ndGg7aS0tOyl7XG4gICAgICAgIHZhciBjbWQ9e2NvZGU6Y29kZSxjb21tYW5kOmNtZHNbY29kZV19O1xuICAgICAgICBpZiAoY29kZT09Y29kZS50b0xvd2VyQ2FzZSgpKSBjbWQucmVsYXRpdmU9dHJ1ZTtcbiAgICAgICAgZm9yICh2YXIgayBpbiBhcmdzW2ldKSBjbWRba109YXJnc1tpXVtrXTtcbiAgICAgICAgYXJnc1tpXSA9IGNtZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuXG4gIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcblxuICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHBlZyRyZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHBlZyRmYWlsKHBlZyRlbmRFeHBlY3RhdGlvbigpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IoXG4gICAgICBwZWckbWF4RmFpbEV4cGVjdGVkLFxuICAgICAgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocGVnJG1heEZhaWxQb3MpIDogbnVsbCxcbiAgICAgIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoXG4gICAgICAgID8gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MgKyAxKVxuICAgICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJG1heEZhaWxQb3MsIHBlZyRtYXhGYWlsUG9zKVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN5bnRheEVycm9yOiBwZWckU3ludGF4RXJyb3IsXG4gIHBhcnNlOiAgICAgICBwZWckcGFyc2Vcbn07XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxuXG4vLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG9cbi8vIGltcGxlbWVudGF0aW9uLiBBbHNvLCBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mKG1zQ3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7XG5cbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG4gIHJldHVybiAoW2J0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1dKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9