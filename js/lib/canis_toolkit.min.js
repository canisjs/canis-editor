!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=144)}([function(t,e,r){var n=r(2),i=r(18),a=r(11),o=r(12),s=r(19),c=function(t,e,r){var u,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,y=t&c.B,m=d?n:v?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),k=b.prototype||(b.prototype={});for(u in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[u])?m:r)[u],h=y&&f?s(l,n):g&&"function"==typeof l?s(Function.call,l):l,m&&o(m,u,l,t&c.U),b[u]!=l&&a(b,u,h),g&&k[u]!=l&&(k[u]=l)};n.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(49)("wks"),i=r(33),a=r(2).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),i=r(108),a=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),i=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),i=r(11),a=r(14),o=r(33)("src"),s=r(154),c=(""+s).split("toString");r(18).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,r,s){var u="function"==typeof r;u&&(a(r,"name")||i(r,"name",e)),t[e]!==r&&(u&&(a(r,o)||i(r,o,t[e]?""+t[e]:c.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||s.call(this)})},function(t,e,r){var n=r(0),i=r(3),a=r(24),o=/"/g,s=function(t,e,r,n){var i=String(a(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(s),n(n.P+n.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(50),i=r(24);t.exports=function(t){return n(i(t))}},function(t,e,r){var n=r(51),i=r(32),a=r(15),o=r(23),s=r(14),c=r(108),u=Object.getOwnPropertyDescriptor;e.f=r(7)?u:function(t,e){if(t=a(t),e=o(e,!0),c)try{return u(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),i=r(9),a=r(78)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),i=r(18),a=r(3);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),i=r(50),a=r(9),o=r(6),s=r(94);t.exports=function(t,e){var r=1==t,c=2==t,u=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var v,g,y=a(e),m=i(y),b=n(s,d,3),k=o(m.length),S=0,A=r?p(e,k):c?p(e,0):void 0;k>S;S++)if((h||S in m)&&(g=b(v=m[S],S,y),t))if(r)A[S]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return S;case 2:A.push(v)}else if(f)return!1;return l?-1:u||f?f:A}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),i=r(2),a=r(3),o=r(0),s=r(66),c=r(102),u=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),v=r(6),g=r(136),y=r(35),m=r(23),b=r(14),k=r(44),S=r(4),A=r(9),T=r(91),w=r(36),x=r(17),_=r(37).f,M=r(93),E=r(33),O=r(5),P=r(26),C=r(56),F=r(53),I=r(96),j=r(46),R=r(61),N=r(38),L=r(95),D=r(125),V=r(8),G=r(16),B=V.f,Y=G.f,X=i.RangeError,W=i.TypeError,q=i.Uint8Array,U=Array.prototype,z=c.ArrayBuffer,H=c.DataView,J=P(0),Q=P(2),Z=P(3),$=P(4),K=P(5),tt=P(6),et=C(!0),rt=C(!1),nt=I.values,it=I.keys,at=I.entries,ot=U.lastIndexOf,st=U.reduce,ct=U.reduceRight,ut=U.join,ft=U.sort,lt=U.slice,ht=U.toString,pt=U.toLocaleString,dt=O("iterator"),vt=O("toStringTag"),gt=E("typed_constructor"),yt=E("def_constructor"),mt=s.CONSTR,bt=s.TYPED,kt=s.VIEW,St=P(1,function(t,e){return _t(F(t,t[yt]),e)}),At=a(function(){return 1===new q(new Uint16Array([1]).buffer)[0]}),Tt=!!q&&!!q.prototype.set&&a(function(){new q(1).set({})}),wt=function(t,e){var r=d(t);if(r<0||r%e)throw X("Wrong offset!");return r},xt=function(t){if(S(t)&&bt in t)return t;throw W(t+" is not a typed array!")},_t=function(t,e){if(!(S(t)&&gt in t))throw W("It is not a typed array constructor!");return new t(e)},Mt=function(t,e){return Et(F(t,t[yt]),e)},Et=function(t,e){for(var r=0,n=e.length,i=_t(t,n);n>r;)i[r]=e[r++];return i},Ot=function(t,e,r){B(t,e,{get:function(){return this._d[r]}})},Pt=function(t){var e,r,n,i,a,o,s=A(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=M(s);if(null!=h&&!T(h)){for(o=h.call(s),n=[],e=0;!(a=o.next()).done;e++)n.push(a.value);s=n}for(l&&c>2&&(f=u(f,arguments[2],2)),e=0,r=v(s.length),i=_t(this,r);r>e;e++)i[e]=l?f(s[e],e):s[e];return i},Ct=function(){for(var t=0,e=arguments.length,r=_t(this,e);e>t;)r[t]=arguments[t++];return r},Ft=!!q&&a(function(){pt.call(new q(1))}),It=function(){return pt.apply(Ft?lt.call(xt(this)):xt(this),arguments)},jt={copyWithin:function(t,e){return D.call(xt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(xt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(xt(this),arguments)},filter:function(t){return Mt(this,Q(xt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return K(xt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(xt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(xt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(xt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(xt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ut.apply(xt(this),arguments)},lastIndexOf:function(t){return ot.apply(xt(this),arguments)},map:function(t){return St(xt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(xt(this),arguments)},reduceRight:function(t){return ct.apply(xt(this),arguments)},reverse:function(){for(var t,e=xt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(xt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(xt(this),t)},subarray:function(t,e){var r=xt(this),n=r.length,i=y(t,n);return new(F(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,v((void 0===e?n:y(e,n))-i))}},Rt=function(t,e){return Mt(this,lt.call(xt(this),t,e))},Nt=function(t){xt(this);var e=wt(arguments[1],1),r=this.length,n=A(t),i=v(n.length),a=0;if(i+e>r)throw X("Wrong length!");for(;a<i;)this[e+a]=n[a++]},Lt={entries:function(){return at.call(xt(this))},keys:function(){return it.call(xt(this))},values:function(){return nt.call(xt(this))}},Dt=function(t,e){return S(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Vt=function(t,e){return Dt(t,e=m(e,!0))?l(2,t[e]):Y(t,e)},Gt=function(t,e,r){return!(Dt(t,e=m(e,!0))&&S(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?B(t,e,r):(t[e]=r.value,t)};mt||(G.f=Vt,V.f=Gt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Gt}),a(function(){ht.call({})})&&(ht=pt=function(){return ut.call(this)});var Bt=p({},jt);p(Bt,Lt),h(Bt,dt,Lt.values),p(Bt,{slice:Rt,set:Nt,constructor:function(){},toString:ht,toLocaleString:It}),Ot(Bt,"buffer","b"),Ot(Bt,"byteOffset","o"),Ot(Bt,"byteLength","l"),Ot(Bt,"length","e"),B(Bt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,c){var u=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[u],y=d||{},m=d&&x(d),b=!d||!s.ABV,A={},T=d&&d.prototype,M=function(t,r){B(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,At)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;c&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[p](r*e+i.o,n,At)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,i){f(t,d,u,"_d");var a,o,s,c,l=0,p=0;if(S(r)){if(!(r instanceof z||"ArrayBuffer"==(c=k(r))||"SharedArrayBuffer"==c))return bt in r?Et(d,r):Pt.call(d,r);a=r,p=wt(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw X("Wrong length!");if((o=y-p)<0)throw X("Wrong length!")}else if((o=v(i)*e)+p>y)throw X("Wrong length!");s=o/e}else s=g(r),a=new z(o=s*e);for(h(t,"_d",{b:a,o:p,l:o,e:s,v:new H(a)});l<s;)M(t,l++)}),T=d.prototype=w(Bt),h(T,"constructor",d)):a(function(){d(1)})&&a(function(){new d(-1)})&&R(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,i){var a;return f(t,d,u),S(r)?r instanceof z||"ArrayBuffer"==(a=k(r))||"SharedArrayBuffer"==a?void 0!==i?new y(r,wt(n,e),i):void 0!==n?new y(r,wt(n,e)):new y(r):bt in r?Et(d,r):Pt.call(d,r):new y(g(r))}),J(m!==Function.prototype?_(y).concat(_(m)):_(y),function(t){t in d||h(d,t,y[t])}),d.prototype=T,n||(T.constructor=d));var E=T[dt],O=!!E&&("values"==E.name||null==E.name),P=Lt.values;h(d,gt,!0),h(T,bt,u),h(T,kt,!0),h(T,yt,d),(c?new d(1)[vt]==u:vt in T)||B(T,vt,{get:function(){return u}}),A[u]=d,o(o.G+o.W+o.F*(d!=y),A),o(o.S,u,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*a(function(){y.of.call(d,1)}),u,{from:Pt,of:Ct}),"BYTES_PER_ELEMENT"in T||h(T,"BYTES_PER_ELEMENT",e),o(o.P,u,jt),N(u),o(o.P+o.F*Tt,u,{set:Nt}),o(o.P+o.F*!O,u,Lt),n||T.toString==ht||(T.toString=ht),o(o.P+o.F*a(function(){new d(1).slice()}),u,{slice:Rt}),o(o.P+o.F*(a(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!a(function(){T.toLocaleString.call([1,2])})),u,{toLocaleString:It}),j[u]=O?E:P,n||O||h(T,dt,P)}}else t.exports=function(){}},function(t,e,r){var n=r(131),i=r(0),a=r(49)("metadata"),o=a.store||(a.store=new(r(134))),s=function(t,e,r){var i=o.get(t);if(!i){if(!r)return;o.set(t,i=new n)}var a=i.get(e);if(!a){if(!r)return;i.set(e,a=new n)}return a};t.exports={store:o,map:s,has:function(t,e,r){var n=s(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=s(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){s(r,n,!0).set(t,e)},keys:function(t,e){var r=s(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),i=r(4),a=r(14),o=r(8).f,s=0,c=Object.isExtensible||function(){return!0},u=!r(3)(function(){return c(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return u&&l.NEED&&c(t)&&!a(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),i=Array.prototype;null==i[n]&&r(11)(i,n,{}),t.exports=function(t){i[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(110),i=r(79);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(21),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},function(t,e,r){var n=r(1),i=r(111),a=r(79),o=r(78)("IE_PROTO"),s=function(){},c=function(){var t,e=r(76)("iframe"),n=a.length;for(e.style.display="none",r(80).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;n--;)delete c.prototype[a[n]];return c()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=c(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(110),i=r(79).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";var n=r(2),i=r(8),a=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];a&&e&&!e[o]&&i.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),i=r(123),a=r(91),o=r(1),s=r(6),c=r(93),u={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,v,g,y=h?function(){return t}:c(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(a(y)){for(p=s(t.length);p>b;b++)if((g=e?m(o(d=t[b])[0],d[1]):m(t[b]))===u||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=i(v,m,d.value,e))===u||g===f)return g}).BREAK=u,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,i=r(14),a=r(5)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),i=r(5)("toStringTag"),a="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:a?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),i=r(24),a=r(3),o=r(82),s="["+o+"]",c=RegExp("^"+s+s+"*"),u=RegExp(s+s+"*$"),f=function(t,e,r){var i={},s=a(function(){return!!o[t]()||"​"!="​"[t]()}),c=i[t]=s?e(l):o[t];r&&(i[r]=c),n(n.P+n.F*s,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(u,"")),t};t.exports=f},function(t,e){t.exports={}},function(module,exports,__webpack_require__){"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var TimingSpec=function(){function TimingSpec(){_classCallCheck(this,TimingSpec),this._offset=0,this._reference=TimingSpec.timingRef.previousStart}return _createClass(TimingSpec,[{key:"replaceOffsetConst",value:function replaceOffsetConst(constants){var _this=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.offset?void 0===constants.get(this.offset)?0===this.offset.indexOf("calc")?(this.offset=this.offset.substring(0,this.offset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.includes(e)&&("number"==typeof t?_this.offset=_this.offset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+_this.offset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset,constants)?this.offset=eval(this.offset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset)?this.offset=constants.get(this.offset):status.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:this.offset&&"object"===_typeof(this.offset)&&"string"==typeof this.offset.minOffset&&(void 0===constants.get(this.offset.minOffset)?0===this.offset.minOffset.indexOf("calc")?(this.offset.minOffset=this.offset.minOffset.substring(0,this.offset.minOffset.length-1).substring(5),constants.forEach(function(t,e,r){_this.offset.minOffset.includes(e)&&("number"==typeof t?_this.offset.minOffset=_this.offset.minOffset.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+_this.offset.minOffset.replace(/\s/g,"")+'"'})}),CanisUtil.checkEquation(this.offset.minOffset,constants)?this.offset.minOffset=eval(this.offset.minOffset):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.offset.minOffset)?this.offset.minOffset=constants.get(this.offset.minOffset):status.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'})}},{key:"calELeOffsetTime",value:function(t){var e=this,r=new Map,n=1e6;return"object"===_typeof(this.offset)&&t.forEach(function(t,r){n>parseFloat(t["data-datum"][e.offset.field])&&(n=parseFloat(t["data-datum"][e.offset.field]))}),t.forEach(function(t,i){var a=0;"number"==typeof e.offset?a=e.offset:"object"===_typeof(e.offset)&&(a=e.offset.minOffset*parseFloat(t["data-datum"][e.offset.field])/n),r.set(i,a)}),r}},{key:"calOffsetTime",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===n.size){var i=0;switch(this.reference){case TimingSpec.timingRef.previousStart:i=t+this.offset-r;break;case TimingSpec.timingRef.previousEnd:i=e+this.offset-r;break;case TimingSpec.timingRef.absolute:i=this.offset+r;break;default:i=t+this.offset-r}return i}var a=this,o=new Map,s=1e6;return"object"===_typeof(this.offset)&&n.forEach(function(t,e){s>parseFloat(t["data-datum"][a.offset.field])&&(s=parseFloat(t["data-datum"][a.offset.field]))}),n.forEach(function(n,i){var c=0;switch("number"==typeof a.offset?c=a.offset:"object"===_typeof(a.offset)&&(c=a.offset.minOffset*parseFloat(n["data-datum"][a.offset.field])/s),a.reference){case TimingSpec.timingRef.previousStart:o.set(i,t+c-r);break;case TimingSpec.timingRef.previousEnd:o.set(i,e+c-r);break;case TimingSpec.timingRef.absolute:o.set(i,c+r);break;default:o.set(i,t+c-r)}}),o}},{key:"reference",set:function(t){if(void 0!==t){var e=TimingSpec.transRef(t);Object.keys(TimingSpec.timingRef).includes(e)&&(this._reference=t)}},get:function(){return this._reference}},{key:"offset",set:function(t){void 0!==t&&("number"==typeof t?this._offset=Math.floor(t/(1e3/TimingSpec.FRAME_RATE))*(1e3/TimingSpec.FRAME_RATE):"object"!==_typeof(t)&&"string"!=typeof t||(this._offset=t))},get:function(){return this._offset}}],[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}]),TimingSpec}();TimingSpec.FRAME_RATE=20,TimingSpec.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"},TimingSpec.dataBindAttrs=["field","minOffset","minDuration"];var _default=TimingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n,i=r(54),a=r(105),o=(n=r(75))&&n.__esModule?n:{default:n};function s(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function l(t,e,r){return e&&f(t.prototype,e),r&&f(t,r),t}var h=function(){function t(){u(this,t)}return l(t,null,[{key:"arrIsContained",value:function(t,e){if(e.length>t)return!1;for(var r=0,n=e.length;r<n;r++)if(!t.includes(e[r]))return!1;return!0}},{key:"checkEquation",value:function(t,e){if(t=t.replace(/\s/g,""),/^[\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]$/.test(t))return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]{2,}/.test(t))return!1;if(/\(\)/.test(t))return!1;for(var r,n=[],i=0;i<t.length;i++)if("("===(r=t.charAt(i)))n.push("(");else if(")"===r){if(!(n.length>0))return!1;n.pop()}if(0!==n.length)return!1;if(/\([\x\÷\+\-\*\/]/.test(t))return!1;if(/[\x\÷\+\-\*\/]\)/.test(t))return!1;if(/[\x\÷\+\-\*\/]\(/.test(t))return!1;if(/\)[\x\÷\+\-\*\/]/.test(t))return!1;for(var a,o=t.replace(/[\(\)\x\÷\+\-\*\/]{1,}/g,"`").split(","),s=0;s<o.length;s++)if(a=o[s],/[A-Z]/i.test(a)&&void 0===e.get(a))return!1;for(var c=t.split(","),u=0;u<c.length;u++)if(void 0!==e.get(c[u]))if(null==c[u+1]);else if("+"!==c[u+1]&&"."!==c[u+1]&&"-"!==c[u+1]&&"x"!==c[u+1]&&"÷"!==c[u+1]&&"("!==c[u+1]&&")"!==c[u+1])return!1;return!0}},{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=c(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var i=t.keys()[n];r.set(i,this.deepClone(t.get(i)))}}for(var a in t)t.hasOwnProperty(a)&&(r[a]=this.deepClone(t[a]));return r}},{key:"arrayIntersact",value:function(t,e){return t.filter(function(t){return e.includes(t)})}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,i=t.split("");if(2===t.length)r=e=parseInt(i[0].toString()+i[1].toString(),16),n=e;else if(3===t.length)e=parseInt(i[0].toString()+i[0].toString(),16),r=parseInt(i[1].toString()+i[1].toString(),16),n=parseInt(i[2].toString()+i[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(i[0].toString()+i[1].toString(),16),r=parseInt(i[2].toString()+i[3].toString(),16),n=parseInt(i[4].toString()+i[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,i=0;i<r.length|(n=r[i]);i++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"discretizePathToPnts",value:function(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttributeNS(null,"d",t);for(var n=r.getTotalLength()/e,i=[],a=0;a<e;a++){var o=r.getPointAtLength(n*a);i.push([o.x,o.y])}return i}},{key:"checkDSameShape",value:function(t,e){var r=!1;if(void 0!==t&&void 0!==e){var n=[],i=[],a=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g);if("string"==typeof t?n=(t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(a):t instanceof Array&&(n=t),"string"==typeof e?i=(e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(a):e instanceof Array&&(i=e),r=n.length===i.length)for(var o=0;o<n.length;o++){if(n[o].substring(0,1)!==i[o].substring(0,1)){r=!1;break}}}else console.error("undefined d in checkDSameShape!");return r}},{key:"findDStartEnd",value:function(t){var e=0,r=0,n=0,i=0,a=0,o=0;if(t)for(var s=0;s<t.length;s++){var c=t[s].substring(0,1),u=t[s].substring(1).split(",");switch(c){case"M":case"m":e=parseFloat(u[0]),r=parseFloat(u[1]);break;case"L":case"T":a=parseFloat(u[0]),o=parseFloat(u[1]);break;case"l":case"t":n=parseFloat(u[0]),i=parseFloat(u[1]);break;case"H":a=parseFloat(u[0]);break;case"h":n=parseFloat(u[0]);break;case"V":o=parseFloat(u[0]);break;case"v":i=parseFloat(u[0]);break;case"C":a=parseFloat(u[4]),o=parseFloat(u[5]);break;case"c":n=parseFloat(u[4]),i=parseFloat(u[5]);break;case"S":case"Q":a=parseFloat(u[2]),o=parseFloat(u[3]);break;case"s":case"q":n=parseFloat(u[2]),i=parseFloat(u[3]);break;case"A":case"a":n=2*parseFloat(u[0]),i=2*parseFloat(u[1])}}else console.error("wrong d in findDStartEnd!");return{startX:e,startY:r,endX:a,endY:o,relativeEndX:n,relativeEndY:i}}},{key:"checkValidOffsetDCmd",value:function(t,e,r,n){return Math.abs(n-t)<1||Math.abs(r-t)<1||Math.abs(n-e-t)<1}},{key:"dTrans",value:function(t,e,r){var n=this,i=r.type,a=[!1,!1,!1,!1];void 0!==r.mergeType&&(a=r.mergeType),a[0]=i===o.default.actionTypes.translateX||i===o.default.actionTypes.translateXY||a[0],a[1]=i===o.default.actionTypes.translateY||i===o.default.actionTypes.translateXY||a[1],a[2]=i===o.default.actionTypes.scaleX||i===o.default.actionTypes.scaleXY||a[2],a[3]=i===o.default.actionTypes.scaleY||i===o.default.actionTypes.scaleXY||a[3];var s="";if(void 0!==t&&void 0!==e){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var c=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),u=t.match(c),f=e.match(c),l=this.checkDSameShape(u,f);console.log("same shape: ",l),l&&function(){var t,e,i=0,o=0,c=n.findDStartEnd(u),l=n.findDStartEnd(f);t=l.startX-c.startX,e=l.startY-c.startY,void 0!==c.relativeEndX&&void 0!==l.relativeEndX?(i=l.relativeEndX-c.relativeEndX,o=l.relativeEndY-c.relativeEndY):(i=l.endX-c.endX-t,o=l.endY-c.endY-e),console.log("diff XY: ",t,e,"diff scale XY: ",i,o);var h=a[0]?t:0,p=a[1]?e:0,d=a[2]?i:0,v=a[3]?o:0;if(a[2]&&(h+=i),a[3]&&(p+=o),console.log("merge type: ",r.mergeType,a,h,p,d,v),u)for(var g=function(r){var c=u[r].substring(0,1),l=u[r].substring(1),g=f[r].substring(1);s+=c;var y=l.split(","),m=g.split(",");switch(c){case"M":case"m":var b=parseFloat(y[0])+(a[0]?t:0),k=parseFloat(y[1])+(a[1]?e:0),S=n.checkValidOffsetDCmd(b,i,parseFloat(y[0]),parseFloat(m[0])),A=n.checkValidOffsetDCmd(k,o,parseFloat(y[1]),parseFloat(m[1]));s+=(S?b:m[0])+","+(A?k:m[1]);break;case"L":case"T":var T=parseFloat(y[0])+h,w=parseFloat(y[1])+p,x=n.checkValidOffsetDCmd(T,i,parseFloat(y[0]),parseFloat(m[0])),_=n.checkValidOffsetDCmd(w,o,parseFloat(y[1]),parseFloat(m[1]));s+=(x?T:m[0])+","+(_?w:m[1]);break;case"l":case"t":var M=parseFloat(y[0])+d,E=parseFloat(y[1])+v,O=n.checkValidOffsetDCmd(M,i,parseFloat(y[0]),parseFloat(m[0])),P=n.checkValidOffsetDCmd(E,o,parseFloat(y[1]),parseFloat(m[1]));s+=(O?M:m[0])+","+(P?E:m[1]);break;case"S":case"Q":case"C":var C="C"===c?3:2;y.forEach(function(t,e){var r=0,c=0;e%2==0?(c=i,a[2]?(r=parseFloat(t)+(1+e/2)*h/C,c=(1+e/2)*i/C):r=parseFloat(t)+h):(c=o,a[3]?(r=parseFloat(t)+(1+Math.floor(e/2))*p/C,c=(1+Math.floor(e/2))*p/C):r=parseFloat(t)+p);var u=n.checkValidOffsetDCmd(r,c,parseFloat(t),parseFloat(m[e]));s+=(u?r:m[e])+(e===y.length-1?"":",")});break;case"s":case"q":case"c":var F="c"===c?3:2;y.forEach(function(t,e){var r=0,i=0;e%2==0?(r=parseFloat(t)+(1+e/2)*d/F,i=(1+e/2)*d/F):(r=parseFloat(t)+(1+Math.floor(e/2))*v/F,i=(1+Math.floor(e/2))*v/F);var a=n.checkValidOffsetDCmd(r,i,parseFloat(t),parseFloat(m[e]));s+=(a?r:m[e])+(e===y.length-1?"":",")});break;case"H":var I=parseFloat(l)+h,j=n.checkValidOffsetDCmd(I,i,parseFloat(l),parseFloat(g));s+=j?I:g;break;case"h":var R=parseFloat(l)+d,N=n.checkValidOffsetDCmd(R,i,parseFloat(l),parseFloat(g));s+=N?R:g;break;case"V":var L=parseFloat(l)+p,D=n.checkValidOffsetDCmd(L,o,parseFloat(l),parseFloat(g));s+=D?L:g;break;case"v":var V=parseFloat(l)+v,G=n.checkValidOffsetDCmd(V,o,parseFloat(l),parseFloat(g));s+=G?V:g;break;case"A":y.forEach(function(t,e){var r=0,c=0;5===e?(c=i,r=parseFloat(t)+h):6===e?(c=o,r=parseFloat(t)+p):r=0===e&&a[2]?parseFloat(t)+i/2:1===e&&a[3]?parseFloat(t)+o/2:parseFloat(t);var u=n.checkValidOffsetDCmd(r,c,parseFloat(t),parseFloat(m[e]));s+=(u?r:m[e])+(e===y.length-1?"":",")});break;case"a":y.forEach(function(t,e){var r=0,c=0;5===e?(c=i,r=parseFloat(t)+d):6===e?(c=o,r=parseFloat(t)+v):r=0===e&&a[2]?parseFloat(t)+i/2:1===e&&a[3]?parseFloat(t)+o/2:parseFloat(t);var u=n.checkValidOffsetDCmd(r,c,parseFloat(t),parseFloat(m[e]));s+=(u?r:m[e])+(e===y.length-1?"":",")});break;default:s+=l}if("z"===c.toLowerCase())return"break"},y=0;y<u.length;y++){if("break"===g(y))break}}()}else console.error("undefined d in dTrans!");return s}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},i=0;i<Object.keys(n).length|(r=Object.keys(n)[i]);i++){var a="object"===c(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,a)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],i=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,a=void 0;a=i.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,a.index)),n.push(a[0])}var s=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(s.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var c=[],u=null,f=!0;if(s.forEach(function(t){if(f)if("M"!==t.command){if(!u)return f=!1;if("m"!==t.command){var e=u,r=t.command===t.command.toLowerCase()?u.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(c.push([e,r]),u=r):f=!1}else u=u.map(function(e,r){return e+t.parameters[r]})}else u=t.parameters.slice(-2)}),f)return{type:"lines",data:c}}if(s.every(function(t){return"MmLlAaZz".includes(t.command)})&&s.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(s.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var i=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(i.cx)||isNaN(i.cy)||l.push({...i,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var i=t*r+e*n,a=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(i/a);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,i,a,o,s,c,u){var f,l,h,p,d,v=2*Math.PI;n<0&&(n=-n),i<0&&(i=-i);var g=Math.sin(a),y=Math.cos(a),m=(e-c)/2,b=(r-u)/2,k=(e+c)/2,S=(r+u)/2,A=y*m+g*b,T=y*b-g*m,w=A*A/(n*n)+T*T/(i*i);w>1&&(n*=Math.sqrt(w),i*=Math.sqrt(w));var x=n*i,_=n*T,M=i*A,E=_*_+M*M,O=Math.sqrt(Math.abs((x*x-E)/E));o==s&&(O=-O);var P=O*_/i,C=-O*M/n;f=y*P-g*C+k,l=g*P+y*C+S;var F=(A-P)/n,I=(A+P)/n,j=(T-C)/i,R=(T+C)/i;for(h=t.radian(1,0,F,j),p=t.radian(F,j,-I,-R);p>v;)p-=v;for(;p<0;)p+=v;for(0!=s&&0!=s||(p-=v),d=h+p;d>v;)d-=v;for(;d<0;)d+=v;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==s||1==s}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,i,a,o){a=a<0?a+2*Math.PI:a,n=0===n?0:n-1,i+=1;var s=(o=o<0||a>o?o+2*Math.PI:o)-a<=Math.PI?0:1,c=t.polarToCartesian(e,r,i,o),u=t.polarToCartesian(e,r,i,a),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,a),h=!1;return c.x===u.x&&c.y===u.y&&(u.y-=1,l.y-=1,h=!0),h?["M"+c.x,c.y,"A"+i,i,0,s,1,u.x,u.y,"M"+l.x,l.y,"A"+n,n,0,s,0,f.x,f.y+"Z"].join(","):["M"+c.x,c.y,"A"+i,i,0,s,0,u.x,u.y,"L"+l.x,l.y,"A"+n,n,0,s,1,f.x,f.y,"L"+c.x,c.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var i=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(i=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(i=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(i=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),i||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var a=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",a)}}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",i=0;i<300;i++){var a=e.getPointAtLength(r*i);n+=0===i?"M"+a.x+","+a.y:"L"+a.x+","+a.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,n=(0,a.parseSVG)(r),o=new i.PathMaker;return n.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new i.PathMaker(t);return r.uniform(),[e,r]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",s=t.match(a);if(s){var c=s[0].substring(0,1),u="0",f="0";if("m"===c||"M"===c){var l=s[0].substring(1).split(",");u=l[0],f=l[1]}for(var h=0;h<s.length;h++){var p=s[h].substring(0,1),d=s[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,i,h,p,d,e,u,r);break;case"h":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,i,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var v=d.split(","),g=0;g<v.length;g++)o=g%2==0?this.calNumTrans(o,i,h,p,v[g],e,u,r):this.calNumTrans(o,i,h,p,v[g],e,f,n),g!==v.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,i,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(u)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var S=d.split(","),A=0;A<S.length;A++)A===S.length-2?(o=this.calNumTrans(o,i,h,p,S[A],e,"1",0),o+=" "):A===S.length-1?o=this.calNumTrans(o,i,h,p,S[A],e,"1",0):o+=S[A]+" "}}}return o}},{key:"calNumTrans",value:function(t,e,r,n,i,a,o,s){if(n=n.toLowerCase(),a)if(void 0!==e.get(n)){for(var c=e.get(n),u=!1,f=0;f<c.length;f++)if(c[f].cmdIdx===r){t+=o,u=!0;break}u||(t+=i)}else t+=i;else i.length>0&&(t+=parseFloat(i)+s);return t}},{key:"calTransD",value:function(t,e,r,n,i){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a="";if(0===r)a=t;else if(1===r)a=e;else for(var o=0,s=n.length;o<s;o++)a+=(0===o?"M":"L")+((i[o][0]-n[o][0])*r+n[o][0])+","+((i[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(a+="Z"),a}},{key:"arcTransition",value:function(t,e,r,n,i,a){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var s=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=s(t,e),r=s(t,r),n=s(r,n),n=s(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var c=a||function(t,e,r){return r*(e-t)+t};return[c(t,r,i),c(e,n,i)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var i=[],a=0;a<e.length;a++)void 0!==e[a]&&i.push(e[a].d?e[a].d:"m0,0");i.length>0&&t.compareD(i,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],i=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),a=1;a<t.length;a++)for(var o=t[a],c=(o=(o=o.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),u=0;u<i.length;u++)if(void 0===c[u]){var f=i[u].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=u,l.diffAttrIdxs=[];for(var h=i[u].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=c[u].substring(0,1),v=c[u].substring(1),g=i[u].substring(1);if(v!==g){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=u,y.diffAttrIdxs=[];for(var m=v.split(","),b=g.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var S=!1,A=0;A<e.get(d).length;A++)if(e.get(d)[A].cmdIdx===y.cmdIdx){S=!0,e.get(d)[A].diffAttrIdxs=[].concat(s(new Set([].concat(s(e.get(d)[A].diffAttrIdxs),s(y.diffAttrIdxs)))));break}S||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",i=0;i<e.length;i++)e[i].indexOf("translate")>=0?n=e[i]:e[i].indexOf("scale")>=0&&(r=e[i]);var a=["0","0"],o="1";return""!==n&&(a=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(a[0]),parseFloat(a[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=h,h.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var p=function(){function t(){u(this,t),this.chartWidth=0,this.chartHeight=0}return l(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=p;var d=function(){function t(){u(this,t)}return l(t,[{key:"construcor",value:function(t,e,r,n,i){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=i}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(s(Object.keys(t)),s(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var i=new RegExp(/[0-9\.,\s]/g);return t.d.replace(i,"")===e.d.replace(i,"")}return n.every(function(t){return r.indexOf(t)>=0})}}]),t}();e.AssetTemplate=d},function(t,e,r){var n=r(18),i=r(2),a=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),i=r(10),a=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[a])?e:i(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return i.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return s.PathMaker}}),e.MaskType=e.default=void 0;var n,i=r(145),a=(n=r(73))&&n.__esModule?n:{default:n},o=r(104),s=r(72);function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var u,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?i.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,a,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.Alpha;if(e instanceof i.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return a=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,a.root),a}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var a=e.root.layers.indexOf(r.root);if(a>0){var o=e.root.layers[a-1];0!=n&&t[n-1].root==o||t.splice(n,0,new i.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,a.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new i.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&c(e.prototype,r),n&&c(e,n),t}();e.default=f,e.MaskType=u,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(u||(e.MaskType=u={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var i={jsMovin:new(((n=r(54))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=i},function(t,e,r){var n=r(15),i=r(6),a=r(35);t.exports=function(t){return function(e,r,o){var s,c=n(e),u=i(c.length),f=a(o,u);if(t&&r!=r){for(;u>f;)if((s=c[f++])!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),i=r(24);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),c=n(r),u=s.length;return c<0||c>=u?t?"":void 0:(a=s.charCodeAt(c))<55296||a>56319||c+1===u||(o=s.charCodeAt(c+1))<56320||o>57343?t?s.charAt(c):a:t?s.slice(c,c+2):o-56320+(a-55296<<10)+65536}}},function(t,e,r){var n=r(4),i=r(20),a=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},function(t,e,r){var n=r(5)("iterator"),i=!1;try{var a=[7][n]();a.return=function(){i=!0},Array.from(a,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var a=[7],o=a[n]();o.next=function(){return{done:r=!0}},a[n]=function(){return o},t(a)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var a=r.call(t,e);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,r){"use strict";r(127);var n=r(12),i=r(11),a=r(3),o=r(24),s=r(5),c=r(97),u=s("species"),f=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),p=!a(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!a(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[u]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=r(o,h,""[t],function(t,e,r,n,i){return e.exec===c?p&&!i?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=g[0],m=g[1];n(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),i=r(0),a=r(12),o=r(41),s=r(30),c=r(40),u=r(39),f=r(4),l=r(3),h=r(61),p=r(43),d=r(83);t.exports=function(t,e,r,v,g,y){var m=n[t],b=m,k=g?"set":"add",S=b&&b.prototype,A={},T=function(t){var e=S[t];a(S,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||S.forEach&&!l(function(){(new b).entries().next()}))){var w=new b,x=w[k](y?{}:-0,1)!=w,_=l(function(){w.has(1)}),M=h(function(t){new b(t)}),E=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});M||((b=e(function(e,r){u(e,b,t);var n=d(new m,e,b);return null!=r&&c(r,g,n[k],n),n})).prototype=S,S.constructor=b),(_||E)&&(T("delete"),T("has"),g&&T("get")),(E||x)&&T(k),y&&S.clear&&delete S.clear}else b=v.getConstructor(e,t,g,k),o(b.prototype,r),s.NEED=!0;return p(b,t),A[t]=b,i(i.G+i.W+i.F*(b!=m),A),y||v.setStrong(b,t,g),b}},function(t,e,r){for(var n,i=r(2),a=r(11),o=r(33),s=o("typed_array"),c=o("view"),u=!(!i.ArrayBuffer||!i.DataView),f=u,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=i[h[l++]])?(a(n.prototype,s,!0),a(n.prototype,c,!0)):f=!1;t.exports={ABV:u,CONSTR:f,TYPED:s,VIEW:c}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,s,c=arguments[1];return i(this),(e=void 0!==c)&&i(c),null==t?new this:(r=[],e?(n=0,s=a(c,arguments[2],2),o(t,!1,function(t){r.push(s(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(71)),i=l(r(75)),a=l(r(107)),o=l(r(47)),s=r(48),c=r(55),u=r(74),f=r(54);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=g(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._id,t.chartIdx,t.selector,t._align=e.alignTarget.object,t.grouping=new a.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t.leaves=[],t.marksInOrder=[],t.anisAligned=[],t.alignOnData=!1,t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms",this.allMarkAni.forEach(function(t,r){for(var n,i=0;i<t.actionAttrs.length|(n=t.actionAttrs[i]);i++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)})}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;console.log("going to map to lottie spec: ",this.allMarkAni),this.allMarkAni.forEach(function(r,n){for(var a=function(a){var l=r.actionAttrs[a];if(l.duration>0){var h=document.getElementById(n);if(l.type===i.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),v=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===i.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,u.getBoundingBox)(h);c.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),c.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&c.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var a=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,g=0;g<t.to.length;g++)if(t.to[g][0]===n){o=t.from[g][1],f=t.to[g][1];break}a.forEach(function(t){if("shape"===t){var e,r,a=p(s.CanisUtil.transDToLottieSpec(o),2);e=a[0],o=a[1];var u=p(s.CanisUtil.transDToLottieSpec(f),2);r=u[0],f=u[1],c.globalVar.markLayers.get(n).setAnimatableProperty("x",d,v,e[0],r[0],i.default.transToLottieAction(l.easing)),c.globalVar.markLayers.get(n).setAnimatableProperty("y",d,v,e[1],r[1],i.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=s.CanisUtil.toLottieRGBA(o),f=s.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);c.globalVar.markLayers.get(n).setAnimatableProperty(t,d,v,o,f,i.default.transToLottieAction(l.easing))})}else a.forEach(function(e){c.globalVar.markLayers.get(n).setAnimatableProperty(e,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else c.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else if(l.type===i.default.actionTargets.mask){var g,y=(0,u.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case i.default.targetAnimationType.wipe:case i.default.targetAnimationType.move:case i.default.targetAnimationType.appear:g=f.LayerFactory.boundingBox(h);break;case i.default.targetAnimationType.circle:(g=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),g.setStaticProperty("anchorY",y[3]/2);break;case i.default.targetAnimationType.wheel:var b=s.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],S=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];g=f.LayerFactory.ellipse(k,S,m,m);var A=t.finalStatus.get(n)[l.chartIdx].startAngle,T=t.finalStatus.get(n)[l.chartIdx].endAngle;g.setStaticProperty("trimOffset",-A/Math.PI/2*360-90),l.attribute[0].to=1-(T-A)%(2*Math.PI)/(2*Math.PI),g.setStaticProperty("strokeWidth",2*m),g.setStaticProperty("fillOpacity",0)}var w=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),x=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){g.setAnimatableProperty(t.attrName,w,x,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))}),c.globalVar.jsMovin.addMask(g,c.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)a(l)})}},{key:"transAlign",value:function(t){switch(t){case this.alignTarget.withEle:return"withEle";case this.alignTarget.withObj:return"withObj"}}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.allMarkAniTrans.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear(),e.aniIdx=0}}],(l=[{key:"replaceConstants",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.replaceOffsetConst(t,e),"undefined"!==this.grouping&&this.grouping.replaceDelayConst(t,e),this.actions.forEach(function(r){r.replaceOffsetConst(t,e),r.replaceDurationConst(t,e)})}},{key:"translate",value:function(t,e,r,n){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.id=t.id,this.reference=t.reference,this.offset=t.offset,this.align=t.align,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var s,c=[[]],u=0;u<t.effects.length|(s=t.effects[u]);u++)s.reference===o.default.timingRef.previousStart||void 0===s.reference?c[c.length-1].push(u):c.push([u]);console.log("action index to merge: ",c);var f=[],l=[i.default.actionTypes.translateX,i.default.actionTypes.translateY,i.default.actionTypes.translateXY,i.default.actionTypes.scaleX,i.default.actionTypes.scaleY,i.default.actionTypes.scaleXY];c.forEach(function(e){var r={},n=!1,a=0,o=[!1,!1,!1,!1];e.forEach(function(e){var s=t.effects[e];l.includes(s.type)?(n=!0,a++,Object.keys(s).forEach(function(t){r[t]=s[t]}),o[0]=s.type===i.default.actionTypes.translateX||s.type===i.default.actionTypes.translateXY||o[0],o[1]=s.type===i.default.actionTypes.translateY||s.type===i.default.actionTypes.translateXY||o[1],o[2]=s.type===i.default.actionTypes.scaleX||s.type===i.default.actionTypes.scaleXY||o[2],o[3]=s.type===i.default.actionTypes.scaleY||s.type===i.default.actionTypes.scaleXY||o[3]):f.push(s)}),n&&(a>1&&(r.type=i.default.actionTypes.mergedTransition,r.mergeType=o),f.push(r))}),console.log("merged actions: ",f);for(var h,p=0;p<f.length|(h=f[p]);p++){h.chartIdx=t.chartIdx;var d=i.default.transToVisualAttrAction(h,t.chartIdx,e,n,a);console.log("translated visual action: ",d);for(var v,g=0;g<d.length|(v=d[g]);g++){var y=new i.default;y.initAction(v),this.actions.push(y)}}}}},{key:"calAniTime",value:function(t){var r,n=this,a=!1;void 0!==this.align&&e.animations.forEach(function(t,i){n.align.target===t.id&&(r=t,n.align.type===e.alignTarget.withEle&&(a=!0,n._grouping=t.grouping))}),void 0!==r&&r.anisAligned.push("".concat(this.chartIdx,"_").concat(this.selector));for(var o,c=this,u=new Map,f=0;f<t.length|(o=t[f]);f++){for(var l,v=new Map,g=0;g<this.actions.length|(l=this.actions[g]);g++)if("object"===d(l.duration)){var y=e.domMarks.get(o)["data-datum"],m=parseFloat(y[l.duration.field]),b=void 0===l.duration.minDuration?300:l.duration.minDuration;v.set(l.duration.field,[m,b])}u.set(o,v)}var k=p(i.default.calActionDuration(this.actions,u,e.domMarks),3),S=k[0],A=k[1],T=k[2],w=[],x=[];if(a){var _=p(this._grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,a),2);w=_[0],x=_[1]}else{var M=p(this.grouping.arrangeOrder(t,e.domMarks,this.root,this.reference,a),2);w=M[0],x=M[1]}a&&(this.root.children=x),this.marksInOrder=w,this.leaves=x;for(var E,O=new Map,P=0;P<this.marksInOrder.length|(E=this.marksInOrder[P]);P++){for(var C,F={},I=0;I<e.visualAttrs.length|(C=e.visualAttrs[I]);I++)if(void 0===e.domMarks.get(E)[C])switch(C){case"opacity":F[C]=1;break;case"width":F[C]=e.domMarks.get(E).bbWidth;break;case"height":F[C]=e.domMarks.get(E).bbHeight;break;case"x":F[C]=e.domMarks.get(E).bbX;break;case"y":F[C]=e.domMarks.get(E).bbY;break;case"cx":void 0!==e.domMarks.get(E).cx?F[C]=e.domMarks.get(E).cx:F[C]=e.domMarks.get(E).bbX+e.domMarks.get(E).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(E).cy?F[C]=e.domMarks.get(E).cy:F[C]=e.domMarks.get(E).bbY+e.domMarks.get(E).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(E).innerRadius?F[C]=e.domMarks.get(E).innerRadius:F[C]=0;break;case"outterRadius":void 0!==e.domMarks.get(E).outterRadius?F[C]=e.domMarks.get(E).outterRadius:F[C]=Math.sqrt(Math.pow(e.domMarks.get(E).bbWidth/2,2)+Math.pow(e.domMarks.get(E).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(E).startAngle?F[C]=e.domMarks.get(E).startAngle:F[C]=0;break;case"endAngle":void 0!==e.domMarks.get(E).endAngle?F[C]=e.domMarks.get(E).endAngle:F[C]=2*Math.PI}else F[C]=e.domMarks.get(E)[C];void 0===e.finalStatus.get(E)&&e.finalStatus.set(E,[]),e.finalStatus.get(E).push(F),O.set(E,{startTime:0,totalDuration:S.get(E),actionAttrs:[]})}var j=new Map;if(void 0!==this.align)switch(this.align.type){case e.alignTarget.withEle:j=this.calTimeAsEle(O,r);break;case e.alignTarget.withObj:j=this.calTimeAsObj(O,r)}else j=this.calTimeAsObj(O,r);O.forEach(function(t,r){var n={startTime:t.startTime+j.get(r),totalDuration:t.totalDuration,actionAttrs:[]};c.updateAniStartAndEndTime(n);for(var a,o=0;o<T.length|(a=T[o]);o++){for(var u,f=new i.default,l=Object.keys(a),h=0;h<l.length|(u=l[h]);h++)if(f[u]=a[u],"_duration"===u&&"object"===d(a[u])){var p=e.domMarks.get(r)["data-datum"],v=A.get(a[u].field);f[u]=a[u].minDuration*parseFloat(p[a[u].field])/v}else"offsetStart"===u&&(f[u]=a[u].get(r));f.animationType===i.default.targetAnimationType.custom?s.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}O.set(r,n)}),O.forEach(function(t,r){for(var n=0,i=0;i<t.actionAttrs.length;i++)t.actionAttrs[i].startTime=t.startTime+t.actionAttrs[i].offsetStart,t.actionAttrs[i].startTime+t.actionAttrs[i].duration>n&&(n=t.actionAttrs[i].startTime+t.actionAttrs[i].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var a=e.allMarkAni.get(r).startTime,o=a+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=a<t.startTime?a:t.startTime;var s=t.startTime+t.totalDuration;o=o>s?o:s,e.allMarkAni.get(r).totalDuration=o-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}})}},{key:"calTimeAsEle",value:function(t,r){var i=this,a=this;this.root.align=this.align,r.leaves.forEach(function(t){var r=t.marks;t.leafStart=1e5,t.leafEnd=0,r.forEach(function(r){var n=e.allMarkAni.get(r);n.startTime<t.leafStart&&(t.leafStart=n.startTime),n.startTime+n.totalDuration>t.leafEnd&&(t.leafEnd=n.startTime+n.totalDuration)})});var o=new Map;if(r.leaves.forEach(function(t,e){var r=[];t.marks.forEach(function(t){var e;void 0!==n.default.marksWithSameDatum.get(t)&&(e=r).push.apply(e,h(n.default.marksWithSameDatum.get(t)))}),r=[].concat(h(new Set(r)));for(var i,c=0,u=a.leaves.length;c<u|(i=a.leaves[c]);c++)void 0===o.get(c)&&o.set(c,[]),s.CanisUtil.arrIsContained(r,i.marks)&&(o.get(c).push(e),a.alignOnData=!0)}),this.alignOnData){var c=this.leaves.length,u=0,f=function(e){var n=r.leaves[o.get(e)[0]],a=i.leaves[e-1],s=i.leaves[e],c="",f="";void 0!==s?(f=s.id,void 0===n?void 0!==a&&(a.leafStart=1e5,a.leafEnd=0,a.marks.forEach(function(e){var r=t.get(e);r.startTime<a.leafStart&&(a.leafStart=r.startTime),r.startTime+r.totalDuration>a.leafEnd&&(a.leafEnd=r.startTime+r.totalDuration)}),u=i.calOfstTimeForLastAni(s,a,t)):(s.alignTo=n.id,void 0===n.alignWithLeaves&&(n.alignWithLeaves=[]),n.alignWithLeaves.push(s),c=n.id,u=i.calOfstTimeForLastAni(s,n,t))):u=0;var l="".concat(i.chartIdx,"_").concat(i.selector);i.updateLastAnimationTiming(r,n,u,c,f,l)};for(v=0;v<c;v++)f(v)}else for(var l=this.leaves.length>r.leaves.length?this.leaves.length:r.leaves.length,p=0,d=function(n){var a=r.leaves[n],o=i.leaves[n-1],s=i.leaves[n],c="",u="";void 0!==s?(u=s.id,void 0===a?void 0!==o&&(o.leafStart=1e5,o.leafEnd=0,o.marks.forEach(function(t){var r=e.allMarkAni.get(t);r.startTime<o.leafStart&&(o.leafStart=r.startTime),r.startTime+r.totalDuration>o.leafEnd&&(o.leafEnd=r.startTime+r.totalDuration)}),p=i.calOfstTimeForLastAni(s,o,t)):(s.alignTo=a.id,void 0===a.alignWithLeaves&&(a.alignWithLeaves=[]),a.alignWithLeaves.push(s),c=a.id,p=i.calOfstTimeForLastAni(s,a,t))):p=0;var f="".concat(i.chartIdx,"_").concat(i.selector);i.updateLastAnimationTiming(r,a,p,c,u,f)},v=0;v<l;v++)d(v);return this.calAniOffset(t,void 0,e.alignTarget.withEle)}},{key:"calOfstTimeForLastAni",value:function(t,r,n){var i=0;t.start=1e6,t.end=0;var a=0;switch(this.reference){case o.default.timingRef.previousStart:return a=r.leafStart,t.marks.forEach(function(e){var o=n.get(e).totalDuration;n.get(e).startTime=a,a+o-r.leafEnd>i&&(i=a+o-r.leafEnd),a<t.start&&(t.start=a),a+o>t.end&&(t.end=a+o)}),i;case o.default.timingRef.previousEnd:return a=r.leafEnd,r.alignWithLeaves.forEach(function(t){void 0!==t.leafEnd?t.leafEnd>a&&(a=t.leafEnd):t.marks.forEach(function(t){if(void 0!==e.allMarkAni.get(t)){var r=e.allMarkAni.get(t).startTime+e.allMarkAni.get(t).totalDuration;r>a&&(a=r)}})}),t.marks.forEach(function(e){var r=n.get(e).totalDuration;n.get(e).startTime=a,a+r>i&&(i=r),a<t.start&&(t.start=a),a+r>t.end&&(t.end=a+r)}),i}}},{key:"updateLastAnimationTiming",value:function(t,r,n,i,a,o){var s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6];if(""!==i&&t.leaves.forEach(function(t){t.id===i&&(void 0===t.alignWith&&(t.alignWith=[]),t.alignWith.push(o),void 0===t.alignWithIds&&(t.alignWithIds=[]),t.alignWithIds.push(a))}),void 0!==r){var c,u=this;t.leaves.forEach(function(i){var a=r.leafStart;if(void 0===a&&(a=1e7,r.marks.forEach(function(t){e.allMarkAni.get(t).startTime<a&&(a=e.allMarkAni.get(t).startTime)})),void 0!==i.leafStart){if(i.leafStart>a){var o=1e5;i.marks.forEach(function(r){e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime<o&&(o=e.allMarkAni.get(r).startTime),e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>i.leafEnd&&(i.leafEnd=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),i.leafEnd>t.animationEndTime&&(t.animationEndTime=i.leafEnd),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n})}),i.leafStart=o}}else i.marks.forEach(function(r){e.allMarkAni.get(r).startTime>a&&(e.allMarkAni.get(r).startTime+=n,e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration>t.animationEndTime&&(t.animationEndTime=e.allMarkAni.get(r).startTime+e.allMarkAni.get(r).totalDuration),e.allMarkAni.get(r).actionAttrs.forEach(function(t){t.startTime+=n}))})}),t.anisAligned.length>0&&t.anisAligned.forEach(function(t){if(t!=="".concat(u.chartIdx,"_").concat(u.selector)){for(var i,a=e.animations.get(t),o=0,s=r.alignWithLeaves.length;o<s;o++){for(var c=r.alignWithLeaves[o],f=0,l=a.leaves.length;f<l;f++)if(c.id===a.leaves[f].id){i=c;break}if(void 0!==i)break}u.updateLastAnimationTiming(a,i,n,"","","",!1)}}),void 0!==t.align&&s&&t.align.type===e.alignTarget.withEle&&(e.animations.forEach(function(e,r){t.align.target===e.id&&(c=e)}),u.updateLastAnimationTiming(c,r,n,"","",""))}}},{key:"calTimeAsObj",value:function(t,r){return this.grouping.calTimeWithTree(this.root,-1,-1,t),this.root.timingRef=this.reference,this.root.offset=this.offset,this.root.align=this.align,this.root.aniId=this.id,this.calAniOffset(t,r,e.alignTarget.withObj)}},{key:"calAniOffset",value:function(t,r,n){var i=1e4;return t.forEach(function(t,e){t.startTime<i&&(i=t.startTime)}),n===e.alignTarget.withEle?this.calELeOffsetTime(e.domMarks):void 0===r?this.calOffsetTime(0,0,i,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,i,e.domMarks)}},{key:"updateAniStartAndEndTime",value:function(t){t.startTime<this.animationStartTime&&(this.animationStartTime=t.startTime),t.startTime+t.totalDuration>this.animationEndTime&&(this.animationEndTime=t.startTime+t.totalDuration)}},{key:"id",set:function(t){void 0===this._id&&(void 0!==t?this._id=t:(this._id="ani"+e.aniIdx,e.aniIdx++))},get:function(){return this._id}},{key:"align",set:function(t){void 0!==t&&"object"===d(t)&&(this._align=t)},get:function(){return this._align}}])&&v(r.prototype,l),m&&v(r,m),e}();m.FIRST_ANI_ID="ani0",m.aniIdx=0,m.alignTarget={withEle:"element",withObj:"object"},m.alignAttrs=["target","type"],m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.markClass=new Map,m.allMarks=[],m.attrs=["id","selector","grouping","effects","offset","reference","align"],m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map,m.allMarkAniTrans=new Map;var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=r(48),a=(n=r(106))&&n.__esModule?n:{default:n},o=r(55);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return e&&c(t.prototype,e),r&&c(t,r),t}var f=function(){function t(e,r,n){s(this,t),this.id=e,this.type=r,this.source=n}return u(t,null,[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,i=0;i<t.length;i++){var a=t[i];if(void 0!==a.start&&void 0!==a.end){var o=parseInt(a.start),s=parseInt(a.end);if(s<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var c=a.source.split("/"),u=void 0===a.id?c[c.length-1]:a.id,f=o;f<=s;f++)r.push({id:u+f,source:a.source+f+".dsvg"})}else r.push(a)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var i=new Map;t.charts=[];for(var a=[],o=0,s=0,c=!1,u=0;u<e.length;u++)if(e[u].type===t.CHART_URL){var f=new XMLHttpRequest,l="file:"===document.location.protocol?0:200,p=void 0;if(f.open("GET",e[u].source,!1),f.overrideMimeType("text/html;charset=utf-8"),f.send(null),f.status===l){var d=document.createElement("div");d.innerHTML=f.responseText;var v=(p=d.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(v[2]),s=parseFloat(v[3]),t.charts.push(new h(p)),i.set(e[u].id,t.charts.length-1)}else 404===f.status&&(a.unshift(u),c=!0,n.info={type:"error",msg:"Can not find "+e[u].source+" ! Please check the url.",errSpec:'"source":"'+e[u].source.replace(/\s/g,"")+'"'})}else{var g=document.createElement("div");g.innerHTML=e[u].source;var y=g.children[0],m=y.getAttribute("viewBox").split(" ");o=parseFloat(m[2]),s=parseFloat(m[3]),t.charts.push(new h(y)),i.set(e[u].id,t.charts.length-1)}for(var b=0;b<a.length;b++)e.slice(a[b],1);return void 0!==r?t.facetViews(i,r):this.viewport.setViewport(o,s),c}},{key:"removeTransAndMerge",value:function(){for(var e=this,r=new Map,n=0;n<t.charts.length;n++)t.charts[n].svgContent.setAttribute("trans","0,0"),t.removeTransitions(t.charts[n].svgContent.children[0],r);Array.from(r).map(function(t){return t[1]}).forEach(function(t){t.forEach(function(r){e.marksWithSameDatum.set(r,t)})}),this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],i=0;i<r.views[0].frames.length;i++){for(var a=[],o=0;o<r.views.length;o++){var s=r.views[o].frames[i];void 0!==e.get(s)?a.push(t.charts[e.get(s)].svgContent.cloneNode(!0)):console.warn("chart name "+s+" is undefined !")}a.length===r.views.length&&n.push(a)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],s=0,c=0,u=s,f=c,l=0;l<n.length;l++){var p=n[l];s=parseFloat(p[0].getAttribute("width")),c=parseFloat(p[0].getAttribute("height")),u=s,f=c;var d=p[0].getAttribute("viewBox").split(" "),v=parseFloat(d[2]),g=parseFloat(d[3]),y=i.CanisUtil.getTransformAttrs(p[0].children[0]);switch(p[0].children[0].setAttribute("transform","translate("+y.transNums[0]+","+y.transNums[1]+")"),e){case a.default.facetType.row:f*=p.length,p[0].setAttribute("height",c*p.length),p[0].setAttribute("viewBox","0 0 "+v+" "+c*p.length);break;case a.default.facetType.col:u*=p.length,p[0].setAttribute("width",s*p.length),p[0].setAttribute("viewBox","0 0 "+s*p.length+" "+g)}for(var m=function(t){var r=p[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,u=0;u<o.length;u++){var f=o[u],l=i.CanisUtil.getTransformAttrs(f);switch(e){case a.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(c+20)*t)+") scale("+l.scaleNum+")");break;case a.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(s+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}p[0].children[0].appendChild(f)}},b=0;b<p.length;b++)m(b);o.push(new h(p[0]))}t.charts=o,this.viewport.setViewport(u,f)}},{key:"mergeCharts",value:function(){for(var e=this,r=new Set,n=new Map,a=new Map,o=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],s={},c=0;c<o.length;c++)s[o[c]]=null;for(var u=function(i){e.markSetsDuringTrans[i]={enter:[],update:[],exit:[]};var c=t.charts[i].svgContent;console.log("tmpChart: ",c);var u=c.querySelectorAll(".mark");u.length>0&&[].forEach.call(u,function(e){var c=e.getAttribute("id");r.add(c);for(var u={},f=0;f<o.length;f++)u[o[f]]="textContent"===o[f]?e.innerHTML:e.getAttribute(o[f]);void 0===n.get(c)&&n.set(c,new Array(t.charts.length).fill(s)),n.get(c)[i]=u,a.set(c,e.outerHTML)})},f=0;f<this.charts.length;f++)u(f);t.changedAttrs=[];var l=i.CanisUtil.deepClone(o);n.forEach(function(e,r){for(var n=0;n<l.length;n++){for(var i=!0,a=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){a=e[o];break}for(var s=0;s<e.length;s++)if(void 0!==e[s]&&e[s][l[n]]!==a[l[n]]){t.changedAttrs.push(l[n]),i=!1;break}i||l.splice(n,1)}});var h=new Map;t.changedAttrs.indexOf("d")>=0&&(h=i.CanisUtil.findDiffCmds(n)),console.log("changed attributes: ",t.changedAttrs),r=Array.from(r);var p=new Map;for(f=0;f<t.charts.length;f++)for(var d=0;d<r.length;d++)if(void 0===p.get(r[d])&&p.set(r[d],!1),0===t.charts[f].svgContent.querySelectorAll("#"+r[d]).length){p.get(r[d])&&(this.markSetsDuringTrans[f].exit.push(r[d]),p.set(r[d],!1));var v=a.get(r[d]),g=document.createElement("div");g.innerHTML=v;for(var y=g.children[0],m={},b=0;b<t.changedAttrs.length;b++)if("y"===t.changedAttrs[b]&&t.changedAttrs.indexOf("height")>=0){var k=(y.getAttribute("y")?parseFloat(y.getAttribute("y")):0)+(y.getAttribute("height")?parseFloat(y.getAttribute("height")):0);y.setAttribute("y",k),m.y=k}else if("d"===t.changedAttrs[b]){var S=void 0;y.getAttribute("d")&&(S=i.CanisUtil.setPathDValue(y.getAttribute("d"),!0,0,0,h)),y.setAttribute("d",S),m.d=S}else"textContent"===t.changedAttrs[b]?(y.innerHTML="",m.textContent=""):"fill"===t.changedAttrs[b]||"stroke"===t.changedAttrs[b]?(void 0===y.getAttribute(t.changedAttrs[b])&&y.setAttribute(t.changedAttrs[b],"#FFFFFF"),m[t.changedAttrs[b]]=y.getAttribute(t.changedAttrs[b])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[b])?"x2"===t.changedAttrs[b]?(y.setAttribute("x2",parseFloat(y.getAttribute("x1"))),m.x2=parseFloat(y.getAttribute("x1"))):"y2"===t.changedAttrs[b]?(y.setAttribute("y2",parseFloat(y.getAttribute("y1"))),m.y2=parseFloat(y.getAttribute("y1"))):m[t.changedAttrs[b]]=parseFloat(y.getAttribute(t.changedAttrs[b])):(y.setAttribute(t.changedAttrs[b],0),m[t.changedAttrs[b]]=0);v='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+y.outerHTML+"</svg>";var A=(new DOMParser).parseFromString(v,"image/svg+xml").lastChild.children[0];t.charts[f].svgContent.querySelector("#chartContent").appendChild(A),n.get(r[d])[f]=m}else p.get(r[d])?this.markSetsDuringTrans[f].update.push(r[d]):(this.markSetsDuringTrans[f].enter.push(r[d]),p.set(r[d],!0));console.log("mark sets between charts: ",t.markSetsDuringTrans),t.dataTrans=new Map;for(var T=0;T<r.length;T++){for(var w=n.get(r[T]),x=[],_=0;_<w.length;_++){for(var M={},E=0;E<t.changedAttrs.length;E++)["width","height","r"].includes(t.changedAttrs[E])?M[t.changedAttrs[E]]=100*w[_][t.changedAttrs[E]]/w[0][t.changedAttrs[E]]:M[t.changedAttrs[E]]=w[_][t.changedAttrs[E]];x.push(M)}t.dataTrans.set(r[T],x),t.charts[0].svgContent.querySelector("#"+r[T]).setAttribute("data-transition",JSON.stringify({dataTrans:x},null,"\t"))}return console.log("chart 0: ",t.charts[0]),t.charts[0].svgContent}},{key:"getBBoxes",value:function(){var t=document.getElementById("visChart").querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e,r){void 0!==e.style.fill&&e.style.fill&&(void 0!==e.getAttribute("fill")&&e.getAttribute("fill")||e.setAttribute("fill",e.style.fill),e.style.fill=null),void 0!==e.style.stroke&&e.style.stroke&&(void 0!==e.getAttribute("stroke")&&e.getAttribute("stroke")||e.setAttribute("stroke",e.style.stroke),e.style.stroke=null),void 0!==e.style.strokeWidth&&e.style.strokeWidth&&(void 0!==e.getAttribute("stroke-width")&&e.getAttribute("stroke-width")||e.setAttribute("stroke-width",e.style.strokeWidth),e.style.strokeWidth=null),"none"===e.getAttribute("stroke")&&e.setAttribute("stroke-width",0);var n=e.getAttribute("transform"),a=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var o=e.getAttribute("data-datum"),s=JSON.parse(o);Array.isArray(s)&&(s=s[0]);for(var c=e.getAttribute("class").split(" "),u="",f=0,l=c.length;f<l;f++)if("mark"===c[f]){u=c[f+1];break}s.mShape=u;var h=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(h=!0)});var p=e.getAttribute("id");if(h)this.nonDataMarkDatum.set(p,s);else{this.dataMarkDatum.set(p,s);var d={};Object.keys(s).forEach(function(t){0!==t.indexOf("_")&&(d[t]=s[t])}),d.mShape="";var v=JSON.stringify(d);void 0===r.get(v)&&r.set(v,[]),r.get(v).push(p)}}if(e.classList.contains("axis")||e.classList.contains("legend")){console.log("datum: ",e.getAttribute("data-datum"));var g=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(g)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),g=g[0]),e.classList.contains("axis"))void 0===this.chartUnderstanding[g.position]&&(this.chartUnderstanding[g.position]=[]),this.chartUnderstanding[g.position].push("position");else if(e.classList.contains("legend"))for(var y in g)void 0===this.chartUnderstanding[g[y]]&&(this.chartUnderstanding[g[y]]=[]),this.chartUnderstanding[g[y]].push(y)}if(n){n=(n=n.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var m="",b="",k=0;k<n.length;k++)n[k].indexOf("translate")>=0?b=n[k]:n[k].indexOf("scale")>=0&&(m=n[k]);var S=b.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",m),"g"===e.tagName?e.setAttribute("trans",parseFloat(S[0])+parseFloat(a[0])+","+(parseFloat(S[1])+parseFloat(a[1]))):i.CanisUtil.transShape(e,parseFloat(S[0])+parseFloat(a[0]),parseFloat(S[1])+parseFloat(a[1]))}else"g"===e.tagName?e.setAttribute("trans",a.join(",")):i.CanisUtil.transShape(e,parseFloat(a[0]),parseFloat(a[1]));if(e.children.length>0)for(var A=0;A<e.children.length;A++)t.removeTransitions(e.children[A],r)}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}]),t}();f.CHART_URL="url",f.CHART_CONTENT="content",f.charts=[],f.attrs=["id","source","start","end"],f.changedAttrs=[],f.viewport=new i.Viewport,f.dataTrans=new Map,f.markSetsDuringTrans=[],f.svgChart,f.chartUnderstanding={mShape:["shape"]},f.dataMarkDatum=new Map,f.marksWithSameDatum=new Map,f.nonDataMarkDatum=new Map;var l=f;e.default=l;var h=function(){function t(e){s(this,t),this.svgContent=e,this.scales=this.findScales(),this.oriCoords=this.findOriCoords()}return u(t,[{key:"findScales",value:function(){}},{key:"findOriCoords",value:function(){}}]),t}();t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(105);function i(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,s;return e=t,s=[{key:"a2c",value:function(t,e,r,n,i,a,o,s,c,u){var f,l=120*Math.PI/180,h=Math.PI/180*(+i||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,s,c,s,c];if(u)T=u[0],w=u[1],S=u[2],A=u[3];else{t=(f=d(t,e,-h)).x,e=f.y,s=(f=d(s,c,-h)).x,c=f.y,Math.cos(Math.PI/180*i),Math.sin(Math.PI/180*i);var v=(t-s)/2,g=(e-c)/2,y=v*v/(r*r)+g*g/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(a==o?-1:1)*Math.sqrt(Math.abs((m*b-m*g*g-b*v*v)/(m*g*g+b*v*v))),S=k*r*g/n+(t+s)/2,A=k*-n*v/r+(e+c)/2,T=Math.asin((e-A)/n),w=Math.asin((c-A)/n);T=t<S?Math.PI-T:T,w=s<S?Math.PI-w:w,T<0&&(T=2*Math.PI+T),w<0&&(w=2*Math.PI+w),o&&T>w&&(T-=2*Math.PI),!o&&w>T&&(w-=2*Math.PI)}var x=w-T;if(Math.abs(x)>l){var _=w,M=s,E=c;w=T+l*(o&&w>T?1:-1),s=S+r*Math.cos(w),c=A+n*Math.sin(w),p=this.a2c(s,c,r,n,i,0,o,M,E,[w,_,S,A])}x=w-T;var O=Math.cos(T),P=Math.sin(T),C=Math.cos(w),F=Math.sin(w),I=Math.tan(x/4),j=4/3*r*I,R=4/3*n*I,N=[t,e],L=[t+j*P,e-R*O],D=[s+j*F,c-R*C],V=[s,c];if(L[0]=2*N[0]-L[0],L[1]=2*N[1]-L[1],u)return[L,D,V].concat(p);for(var G=[],B=0,Y=(p=[L,D,V].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;B<Y;B++)G[B]=B%2?d(p[B-1],p[B],h).y:d(p[B],p[B+1],h).x;return G}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var i=3*(n-3*r+3*e-t),a=6*(r-2*e+t),o=3*(e-t),s=1/0,c=-1/0;if(a*a-4*i*o>=0){var u=Math.sqrt(a*a-4*i*o);[1,-1].map(function(t){return(t*u-a)/2/i}).forEach(function(i){if(i>0&&i<1){var a=Math.pow(1-i,3)*t+3*Math.pow(1-i,2)*i*e+3*(1-i)*i*i*r+Math.pow(i,3)*n;s=Math.min(s,a),c=Math.max(c,a)}})}return s=Math.min(s,t,n),c=Math.max(c,t,n),[s,c]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,i){n>=i.length-1||r.push(t*(1-e)+i[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=this.calculateHighlyOrder(r,t),a=this.calculateHighlyOrder(i,t),o=this.calculateHighlyOrder(a,t);return[i[0],a[0],o[0],a[1],i[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,i(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,a,o){this.path.i.push([r-a,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([a,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,r,a)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(a,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,i,a){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+i,this.currentY+a)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,a,o,s,c){for(var u=t.a2c(this.currentX,this.currentY,e,r,n,a,o,s,c);u.length>=6;){var f=u.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,i,a,o){this.arcTo(t,e,r,n,i,this.currentX+a,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,i(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,i(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,a,o){if(a<=0)return r.v.push(n),void r.i.push(e.path.i[a]);for(var s=e.path.o,c=e.path.i,u=[o[a-1][0],s[a-1][0]+o[a-1][0],c[a][0]+n[0],n[0]],f=[o[a-1][1],s[a-1][1]+o[a-1][1],c[a][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(i(u))),d=e.calculateBezierSplit.apply(e,[h].concat(i(f))),v=u[0],g=p.shift()-v,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,S=d[1],A=d.shift()-S;r.o.push([g,k]),r.i.push([m,A]),r.v.push([y,S]),u=p,f=d}var T=u.shift(),w=u.shift()-T,x=u[1],_=u.shift()-x,M=f.shift(),E=f.shift()-M,O=f[1],P=f.shift()-O;r.o.push([w,E]),r.i.push([_,P]),r.v.push([x,O])}),this.path=r,this.uniform()}}}])&&a(e.prototype,r),s&&a(e,s),t}();e.PathMaker=s},function(t,e,r){var n=r(148),i=r(149);t.exports=function(t,e,r){var a=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var s=0;s<16;++s)e[a+s]=o[s];return e||i(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function i(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),i=t.getBBox();return[r.e+i.x,r.f+i.y,i.width+1,i.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=i,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/i(t,e)):0}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_ChartSpec=_interopRequireDefault(__webpack_require__(71)),_GlobalVar=__webpack_require__(55),_jsmovin=__webpack_require__(54),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ActionSpec=function(_TimingSpec){function ActionSpec(){var t;return _classCallCheck(this,ActionSpec),(t=_possibleConstructorReturn(this,(ActionSpec.__proto__||Object.getPrototypeOf(ActionSpec)).call(this))).chartIdx=0,t._extend="",t._type=ActionSpec.actionTypes.appear,t.animationType="",t._easing=ActionSpec.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t.oriActionType,t}return _inherits(ActionSpec,_TimingSpec),_createClass(ActionSpec,[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?_jsmovin.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.delay,this.duration=t.duration,this.easing=t.easing,this.oriActionType=t.oriActionType,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"replaceDurationConst",value:function replaceDurationConst(constants){var _this3=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.duration?void 0===constants.get(this.duration)?0===this.duration.indexOf("calc")?(this.duration=this.duration.substring(0,this.duration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.includes(e)&&("number"==typeof t?_this3.duration=_this3.duration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+_this3.duration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration,constants)?this.duration=eval(this.duration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration)?this.duration=constants.get(this.duration):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:this.duration&&"object"===_typeof(this.duration)&&"string"==typeof this.duration.minDuration&&(void 0===constants.get(this.duration.minDuration)?0===this.duration.minDuration.indexOf("calc")?(this.duration.minDuration=this.duration.minDuration.substring(0,this.duration.minDuration.length-1).substring(5),constants.forEach(function(t,e,r){_this3.duration.minDuration.includes(e)&&("number"==typeof t?_this3.duration.minDuration=_this3.duration.minDuration.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+_this3.duration.minDuration.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.duration.minDuration,constants)?this.duration.minDuration=eval(this.duration.minDuration):status.info={type:"error",msg:"Wrong equation.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.duration.minDuration)?this.duration.minDuration=constants.get(this.duration.minDuration):status.info={type:"error",msg:"MinDuration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(ActionSpec.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(ActionSpec.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){"number"==typeof t?this._duration=Math.floor(t/(1e3/_TimingSpec2.default.FRAME_RATE))*(1e3/_TimingSpec2.default.FRAME_RATE):"string"!=typeof t&&"object"!==_typeof(t)||(this._duration=t)},get:function(){return this._duration}}],[{key:"assignActionTmpls",value:function(t){var e=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.actionTmpls.clear(),t.forEach(function(t){t.name&&void 0!==t.name||(t.name=""),e.actionTmpls.set(t.name,t)}),this.actionTmpls.forEach(function(t,n){var i=t.extend;if(i&&void 0!==i){var a=e.actionTmpls.get(i);void 0!==a?(Object.keys(a).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=a[e])}),delete t.extend,e.actionTmpls.set(n,t)):r.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+i+'"'}}})}},{key:"replaceActionTmpls",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t.extend&&void 0!==t.extend){var r=this.actionTmpls.get(t.extend);return void 0!==r?(Object.keys(r).forEach(function(e){"name"!==e&&void 0===t[e]&&(t[e]=r[e])}),delete t.extend,t):(e.info={type:"error",msg:"cannot find the inherited template.",errSpec:'"extend":"'+t.extend+'"'},t)}return t}},{key:"transToVisualAttrAction",value:function(t,e,r,n){arguments.length>4&&void 0!==arguments[4]&&arguments[4];var i=[];if((t=this.replaceActionTmpls(t)).type!==ActionSpec.actionTypes.transition){var a={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?_TimingSpec2.default.FRAME_RATE:t.duration,type:ActionSpec.actionTargets.mask,oriActionType:t.type};switch(t.type){case ActionSpec.actionTypes.appear:a.duration=1e3/_TimingSpec2.default.FRAME_RATE,a.animationType=ActionSpec.targetAnimationType.fade,a.type=ActionSpec.actionTargets.mark,a.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.disappear:a.duration=1e3/_TimingSpec2.default.FRAME_RATE,a.animationType=ActionSpec.targetAnimationType.fade,a.type=ActionSpec.actionTargets.mark,a.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.fade:a.animationType=ActionSpec.targetAnimationType.fade,a.type=ActionSpec.actionTargets.mark,a.attribute=[{attrName:"opacity",from:0,to:1}];break;case ActionSpec.actionTypes.fadeOut:a.animationType=ActionSpec.targetAnimationType.fade,a.type=ActionSpec.actionTargets.mark,a.attribute=[{attrName:"opacity",from:1,to:0}];break;case ActionSpec.actionTypes.grow:a.type=ActionSpec.actionTargets.mark,a.animationType=ActionSpec.targetAnimationType.grow,a.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.degrow:a.type=ActionSpec.actionTargets.mark,a.animationType=ActionSpec.targetAnimationType.grow,a.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wipeBottom:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"scaleY",from:.5,to:0}];break;case ActionSpec.actionTypes.wipeOutFromTop:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeTop:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromBottom:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wipeLeft:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.wipeOutFromRight:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeRight:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"scaleX",from:1,to:0}];break;case ActionSpec.actionTypes.wipeOutFromLeft:a.animationType=ActionSpec.targetAnimationType.wipe,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"scaleX",from:0,to:1}];break;case ActionSpec.actionTypes.circle:a.animationType=ActionSpec.targetAnimationType.circle,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case ActionSpec.actionTypes.circleOut:a.animationType=ActionSpec.targetAnimationType.circle,a.maskType=_jsmovin.MaskType.Alpha,a.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case ActionSpec.actionTypes.wheel:a.animationType=ActionSpec.targetAnimationType.wheel,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case ActionSpec.actionTypes.wheelOut:a.animationType=ActionSpec.targetAnimationType.wheel,a.maskType=_jsmovin.MaskType.InvertAlpha,a.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case ActionSpec.actionTypes.translateX:case ActionSpec.actionTypes.translateY:case ActionSpec.actionTypes.translateXY:case ActionSpec.actionTypes.scaleX:case ActionSpec.actionTypes.scaleY:case ActionSpec.actionTypes.scaleXY:case ActionSpec.actionTypes.mergedTransition:console.log("test transition: ",_ChartSpec.default.dataTrans,e),a.animationType=ActionSpec.targetAnimationType.custom,a.type=ActionSpec.actionTargets.mark;var o=[],s=[];_ChartSpec.default.dataTrans.forEach(function(r,i){if(e<r.length&&n.includes(i)){var a=r[e-1].d,c=r[e].d;console.log("calculating dtrans: ",i);var u=_Util.CanisUtil.dTrans(a,c,t);"mark109"===i&&(console.log("trans from",a),console.log("trans to",c),console.log("transed",u)),o.push([i,a]),s.push([i,u]),r[e-1].d=u,_ChartSpec.default.dataTrans.set(i,r)}}),console.log("translated ",_ChartSpec.default.dataTrans),a.attribute=[{attrName:"d",from:o,to:s}]}i.push(a)}return console.log("action json in attributes: ",i),i}},{key:"calActionDuration",value:function(t,e,r){for(var n=0,i=-1e5,a=0,o=0,s=!1,c=function(e){var c=void 0,u=new Map;c=t[e].calOffsetTime(a,o,0,r),e>0&&t[e-1].animationType===ActionSpec.targetAnimationType.mistake&&c.forEach(function(r,n){c.set(n,r-t[e-1].offset)});var f=1e6,l=-1e5;t[e].offsetStart=new Map,c.forEach(function(r,a){var o=0;"object"===_typeof(t[e].duration)?(s=!0,o=r):"number"==typeof t[e].duration&&(o=r+t[e].duration),u.set(a,o),t[e].offsetStart.set(a,r),r<f&&(f=r),o>l&&(l=o),r<n&&(n=r),o>i&&(i=o)}),a=f,o=l},u=0;u<t.length;u++)c(u);var f=i-n,l=new Map,h=new Map;return s?(e.forEach(function(t,e){t.forEach(function(t,e){(void 0===h.get(e)||t[0]<h.get(e))&&h.set(e,t[0])})}),e.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=h.get(e);r+=t[1]*t[0]/n}),l.set(e,f+r)})):e.forEach(function(t,e){l.set(e,f)}),[l,h,t]}},{key:"transToLottieAction",value:function(t){switch(t){case ActionSpec.easingType.easeLinear:return _jsmovin.EasingFactory.linear();case ActionSpec.easingType.easeInQuad:return _jsmovin.EasingFactory.easeInQuad();case ActionSpec.easingType.easeOutQuad:return _jsmovin.EasingFactory.easeOutQuad();case ActionSpec.easingType.easeInOutQuad:return _jsmovin.EasingFactory.easeInOutQuad();case ActionSpec.easingType.easeInCubic:return _jsmovin.EasingFactory.easeInCubic();case ActionSpec.easingType.easeOutCubic:return _jsmovin.EasingFactory.easeOutCubic();case ActionSpec.easingType.easeInOutCubic:return _jsmovin.EasingFactory.easeInOutCubic()}}}]),ActionSpec}(_TimingSpec2.default);ActionSpec.actionTmpls=new Map,ActionSpec.attrs=["extend","type","offset","reference","easing","duration"],ActionSpec.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",test:"test",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",translateX:"translate X",translateY:"translate Y",translateXY:"translate XY",scaleX:"scale X",scaleY:"scale Y",scaleXY:"scale XY",text:"text",mergedTransition:"merge transition",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},ActionSpec.actionTargets={mark:"mark",mask:"mask"},ActionSpec.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",test:"test",grow:"grow",custom:"custom",mistake:"mistake"},ActionSpec.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var _default=ActionSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){var n=r(4),i=r(2).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(2),i=r(18),a=r(29),o=r(109),s=r(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(49)("keys"),i=r(33);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),i=r(1),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),i=r(81).set;t.exports=function(t,e,r){var a,o=e.constructor;return o!==r&&"function"==typeof o&&(a=o.prototype)!==r.prototype&&n(a)&&i&&i(t,a),t}},function(t,e,r){"use strict";var n=r(21),i=r(24);t.exports=function(t){var e=String(i(this)),r="",a=n(t);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),i=r(0),a=r(12),o=r(11),s=r(46),c=r(88),u=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,v,g,y){c(r,e,d);var m,b,k,S=function(t){if(!h&&t in x)return x[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},A=e+" Iterator",T="values"==v,w=!1,x=t.prototype,_=x[l]||x["@@iterator"]||v&&x[v],M=_||S(v),E=v?T?S("entries"):M:void 0,O="Array"==e&&x.entries||_;if(O&&(k=f(O.call(new t)))!==Object.prototype&&k.next&&(u(k,A,!0),n||"function"==typeof k[l]||o(k,l,p)),T&&_&&"values"!==_.name&&(w=!0,M=function(){return _.call(this)}),n&&!y||!h&&!w&&x[l]||o(x,l,M),s[e]=M,s[A]=p,v)if(m={values:T?M:S("values"),keys:g?M:S("keys"),entries:E},y)for(b in m)b in x||a(x,b,m[b]);else i(i.P+i.F*(h||w),e,m);return m}},function(t,e,r){"use strict";var n=r(36),i=r(32),a=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},function(t,e,r){var n=r(60),i=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),i=r(5)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||a[i]===t)}},function(t,e,r){"use strict";var n=r(8),i=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},function(t,e,r){var n=r(44),i=r(5)("iterator"),a=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||a[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=function(t){for(var e=n(this),r=a(e.length),o=arguments.length,s=i(o>1?arguments[1]:void 0,r),c=o>2?arguments[2]:void 0,u=void 0===c?r:i(c,r);u>s;)e[s++]=t;return e}},function(t,e,r){"use strict";var n=r(31),i=r(126),a=r(46),o=r(15);t.exports=r(87)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,i,a=r(52),o=RegExp.prototype.exec,s=String.prototype.replace,c=o,u=(n=/a/,i=/b*/g,o.call(n,"a"),o.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(u||f)&&(c=function(t){var e,r,n,i,c=this;return f&&(r=new RegExp("^"+c.source+"$(?!\\s)",a.call(c))),u&&(e=c.lastIndex),n=o.call(c,t),u&&n&&(c.lastIndex=c.global?n.index+n[0].length:e),f&&n&&n.length>1&&s.call(n[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)}),n}),t.exports=c},function(t,e,r){"use strict";var n=r(59)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,i,a,o=r(19),s=r(116),c=r(80),u=r(76),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++g]=function(){s("function"==typeof t?t:Function(t),e)},n(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:v&&v.now?n=function(t){v.now(o(m,t,1))}:d?(a=(i=new d).port2,i.port1.onmessage=b,n=o(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in u("script")?function(t){c.appendChild(u("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),i=r(99).set,a=n.MutationObserver||n.WebKitMutationObserver,o=n.process,s=n.Promise,c="process"==r(20)(o);t.exports=function(){var t,e,r,u=function(){var n,i;for(c&&(n=o.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(c)r=function(){o.nextTick(u)};else if(!a||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);r=function(){f.then(u)}}else r=function(){i.call(n,u)};else{var l=!0,h=document.createTextNode("");new a(u).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},function(t,e,r){"use strict";var n=r(10);function i(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},function(t,e,r){"use strict";var n=r(2),i=r(7),a=r(29),o=r(66),s=r(11),c=r(41),u=r(3),f=r(39),l=r(21),h=r(6),p=r(136),d=r(37).f,v=r(8).f,g=r(95),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,S=n.DataView,A=n.Math,T=n.RangeError,w=n.Infinity,x=k,_=A.abs,M=A.pow,E=A.floor,O=A.log,P=A.LN2,C=i?"_b":"buffer",F=i?"_l":"byteLength",I=i?"_o":"byteOffset";function j(t,e,r){var n,i,a,o=new Array(r),s=8*r-e-1,c=(1<<s)-1,u=c>>1,f=23===e?M(2,-24)-M(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=_(t))!=t||t===w?(i=t!=t?1:0,n=c):(n=E(O(t)/P),t*(a=M(2,-n))<1&&(n--,a*=2),(t+=n+u>=1?f/a:f*M(2,1-u))*a>=2&&(n++,a/=2),n+u>=c?(i=0,n=c):n+u>=1?(i=(t*a-1)*M(2,e),n+=u):(i=t*M(2,u-1)*M(2,e),n=0));e>=8;o[l++]=255&i,i/=256,e-=8);for(n=n<<e|i,s+=e;s>0;o[l++]=255&n,n/=256,s-=8);return o[--l]|=128*h,o}function R(t,e,r){var n,i=8*r-e-1,a=(1<<i)-1,o=a>>1,s=i-7,c=r-1,u=t[c--],f=127&u;for(u>>=7;s>0;f=256*f+t[c],c--,s-=8);for(n=f&(1<<-s)-1,f>>=-s,s+=e;s>0;n=256*n+t[c],c--,s-=8);if(0===f)f=1-o;else{if(f===a)return n?NaN:u?-w:w;n+=M(2,e),f-=o}return(u?-1:1)*n*M(2,f-e)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function D(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function G(t){return j(t,52,8)}function B(t){return j(t,23,4)}function Y(t,e,r){v(t[m],e,{get:function(){return this[r]}})}function X(t,e,r,n){var i=p(+r);if(i+e>t[F])throw T(b);var a=t[C]._b,o=i+t[I],s=a.slice(o,o+e);return n?s:s.reverse()}function W(t,e,r,n,i,a){var o=p(+r);if(o+e>t[F])throw T(b);for(var s=t[C]._b,c=o+t[I],u=n(+i),f=0;f<e;f++)s[c+f]=u[a?f:e-f-1]}if(o.ABV){if(!u(function(){k(1)})||!u(function(){new k(-1)})||u(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var q,U=(k=function(t){return f(this,k),new x(p(t))})[m]=x[m],z=d(x),H=0;z.length>H;)(q=z[H++])in k||s(k,q,x[q]);a||(U.constructor=k)}var J=new S(new k(2)),Q=S[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||c(S[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[F]=e},S=function(t,e,r){f(this,S,"DataView"),f(t,k,"DataView");var n=t[F],i=l(e);if(i<0||i>n)throw T("Wrong offset!");if(i+(r=void 0===r?n-i:h(r))>n)throw T("Wrong length!");this[C]=t,this[I]=i,this[F]=r},i&&(Y(k,"byteLength","_l"),Y(S,"buffer","_b"),Y(S,"byteLength","_l"),Y(S,"byteOffset","_o")),c(S[m],{getInt8:function(t){return X(this,1,t)[0]<<24>>24},getUint8:function(t){return X(this,1,t)[0]},getInt16:function(t){var e=X(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=X(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return N(X(this,4,t,arguments[1]))},getUint32:function(t){return N(X(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(X(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(X(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){W(this,1,t,L,e)},setUint8:function(t,e){W(this,1,t,L,e)},setInt16:function(t,e){W(this,2,t,D,e,arguments[2])},setUint16:function(t,e){W(this,2,t,D,e,arguments[2])},setInt32:function(t,e){W(this,4,t,V,e,arguments[2])},setUint32:function(t,e){W(this,4,t,V,e,arguments[2])},setFloat32:function(t,e){W(this,4,t,B,e,arguments[2])},setFloat64:function(t,e){W(this,8,t,G,e,arguments[2])}});y(k,"ArrayBuffer"),y(S,"DataView"),s(S[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=S},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(71)),i=l(r(106)),a=l(r(47)),o=l(r(70)),s=r(48),c=r(55);r(150);var u=l(r(107)),f=l(r(75));function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e,r,n,i,a,o){try{var s=t[a](o),c=s.value}catch(t){return void r(t)}s.done?e(c):Promise.resolve(c).then(n,i)}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this._constants=new Map,this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,l,y,m;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=t;this.chartSpecs=[];var o=n.default.chartPreProcessing(a.charts,r),s=v(o,2);if(a.charts=s[0],this.hasError=s[1],this.hasError)return a;for(var u=0;u<a.charts.length;u++){var f=void 0===a.charts[u].id?"chart"+u:a.charts[u].id,l=void 0===a.charts[u].type?n.default.CHART_URL:a.charts[u].type,h=new n.default(f,l,a.charts[u].source);this.chartSpecs.push(h)}if(a.facet&&(this.facet=new i.default(a.facet.type,a.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError)return a;c.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart),c.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart);var p=[];return a.animations.forEach(function(t){if(void 0!==t.elements){var e=void 0===t.id?t.selector:t.id;Object.keys(t.elements).forEach(function(r){if(void 0!==t.elements[r]){var n={id:e.concat(".",r,".effects[",0,"]"),marksetType:r,selector:t.selector};Object.keys(t.elements[r]).forEach(function(e){n[e]=t.elements[r][e]}),p.push(n)}})}else p.push(t)}),a.animations=p,a}},{key:"compareSpec",value:function(t){var e=!1;return(void 0!==this.currentSpec.constants&&JSON.stringify(t.constants)!==JSON.stringify(this.currentSpec.constants)||void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.marksWithSameDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear()),this.currentSpec=t,e}},{key:"checkAttrs",value:function(t,e,r){for(var n=Object.keys(e),i=!1,a=0,o=n.length;a<o;a++)if(!t.includes(n[a])){i=!0;var s=e[n[a]],c='"'+n[a]+'":';isNaN(Number(s))?"object"===d(s)?c+=JSON.stringify(s):c+='"'+s+'"':c+=""+s,r.info={type:"error",msg:'Illegal attribute name "'+n[a]+'".',errSpec:c.replace(/\s/g,"")};break}return i}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var i=0,s=t.charts.length;i<s&&!(r=this.checkAttrs(n.default.attrs,t.charts[i],e));i++){if(!t.charts[i].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}if(t.charts[i].source.indexOf(".dsvg")<0&&(!t.charts[i].start||!t.charts[i].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}}for(var c=0,u=t.animations.length;c<u&&!(r=this.checkAttrs(o.default.attrs,t.animations[c],e));c++){if(!t.animations[c].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(!t.animations[c].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[c]).replace(/\s/g,"")};break}if(t.animations[c].reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.animations[c].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[c].reference.replace(/\s/g,"")+'"'};break}if(t.animations[c].align&&"object"===d(t.animations[c].align)){if(r=this.checkAttrs(o.default.alignAttrs,t.animations[c].align,e))break;if(void 0!==t.animations[c].align.type&&!Object.keys(o.default.alignTarget).includes(o.default.transAlign(t.animations[c].align.type))){r=!0,e.info={type:"error",msg:"The value of align has to be one of: element or object.",errSpec:'"type":"'+t.animations[c].align.type.replace(/\s/g,"")+'"'};break}}if(t.animations[c].offset&&"object"===d(t.animations[c].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[c].offset,e)))break;if(t.animations[c].grouping&&(r=this.checkGroupingSpec(t.animations[c].grouping,e)))break;for(var l=0,h=t.animations[c].effects.length;l<h&&!(r=this.checkAttrs(f.default.attrs,t.animations[c].effects[l],e));l++){if(!t.animations[c].effects[l].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[c].effects[l]).replace(/\s/g,"")};break}if(!Object.values(f.default.actionTypes).includes(t.animations[c].effects[l].type)){r=!0,e.info={type:"error",msg:'Invalid effect type "'+t.animations[c].effects[l].type+'".',errSpec:'"type":"'+t.animations[c].effects[l].type.replace(/\s/g,"")+'"'};break}if(t.animations[c].effects[l].offset&&"object"===d(t.animations[c].effects[l].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[c].effects[l].offset,e)))break;if(t.animations[c].effects[l].duration&&"object"===d(t.animations[c].effects[l].duration)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[c].effects[l].duration,e)))break;if(t.animations[c].effects[l].easing&&!Object.values(f.default.easingType).includes(t.animations[c].effects[l].easing)){r=!0,e.info={type:"error",msg:'Invalid easing type "'+t.animations[c].effects[l].easing+'".',errSpec:'"easing":"'+t.animations[c].effects[l].easing.replace(/\s/g,"")+'"'};break}}}return r}},{key:"checkGroupingSpec",value:function(t,e){if("number"==typeof t||"string"==typeof t){var r="number"==typeof t?'"grouping":'+t:'"grouping":"'+t.replace(/\s/g,"")+'"';return e.info={type:"error",msg:"Invalid grouping value.",errSpec:r},!0}if(this.checkAttrs(u.default.attrs,t,e))return!0;if(t.reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.reference)))return e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0;if(t.sort&&"object"===d(t.sort)){if(this.checkAttrs(u.default.sortAttrs,t.sort,e))return!0}else if("number"==typeof t.sort)return e.info={type:"error",msg:"Invalid sort value.",errSpec:'"sort":'+t.sort},!0;return!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(y=regeneratorRuntime.mark(function t(e){var r,i,l,p,d,v,g=this,y=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(r=y.length>1&&void 0!==y[1]?y[1]:{},JSON.stringify(r),this.hasError=!1,this.hasError){t.next=37;break}if(o.default.resetAll(),u.default.frames.clear(),u.default.framesMark.clear(),0!==e.charts.length){t.next=18;break}o.default.domMarks.clear(),o.default.allMarks=[],n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={mShape:["shape"]},o.default.animations.clear(),o.default.markClass.clear(),f.default.actionTmpls.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=37;break;case 18:return c.globalVar.jsMovin.setFrameRate(a.default.FRAME_RATE),i=this.compareSpec(e),t.next=22,this.preprocessCharts(e,i,r);case 22:if((l=t.sent).constants&&void 0!==l.constants&&(this.constants=l.constants),l.effectTmpls&&void 0!==l.effectTmpls&&f.default.assignActionTmpls(l.effectTmpls,r),this.animations=l.animations,console.log("animations in canisObj",this.animations),!Array.isArray(this.animations)){t.next=37;break}d=function(t){var e=g.animations[t],i=document.createElement("div");document.body.appendChild(i),i.innerHTML=n.default.charts[e.chartIdx].svgContent.outerHTML,console.log("animation json going to process: ",e,n.default.markSetsDuringTrans);var a=i.querySelectorAll(e.selector),c=n.default.markSetsDuringTrans[e.chartIdx][e.marksetType],u=[],f=[],l="";a.length>0&&[].forEach.call(a,function(t,e){var r=t.getAttribute("id");void 0!==c&&c.includes(r)&&(l=l.concat("#",r,","),u.push(r),f.push(t))}),l=l.substring(0,l.length-1),console.log("the selector is: ",l),g.animations[t].selector=l,console.log("marks in this aniunit: ",u,l);var d=[];if([].forEach.call(i.querySelectorAll(".mark"),function(t){d.push(t.getAttribute("id"));for(var e=t.getAttribute("class").split(" "),r="",n=0,i=e.length;n<i;n++)"mark"===e[n]&&(r=e[n+1]);o.default.markClass.set(t.getAttribute("id"),r)}),o.default.allMarks=[].concat(h(new Set([].concat(h(o.default.allMarks),d)))),0===f.length)return"number"==typeof e.selector?r.info={type:"error",msg:"The selector need to be a CSS selector",errSpec:'"selector":'+e.selector}:r.info={type:"error",msg:"The selector "+e.selector+" selects no marks",errSpec:'"selector":"'+e.selector.replace(/\s/g,"")+'"'},"continue";e.selector=g.sortSelector(e.selector);for(var v=[],y=0;y<n.default.changedAttrs.length;y++)v.push(n.default.changedAttrs[y]);var m=void 0,b=e.chartIdx+"_"+e.selector;if("0_.mark"===b&&(b="0_#".concat(o.default.allMarks.join(", #"))),void 0!==o.default.animations.get(b)?(m=o.default.animations.get(b)).translate(e,v,!0,u,r):((m=new o.default).translate(e,v,!1,u,r),o.default.animations.set(b,m)),void 0===m.align&&void 0!==p&&(m.align={target:p.id,type:o.default.alignTarget.withObj}),g.constants.size>0&&m.replaceConstants(g.constants,r),f.length>0){var k=new Map;[].forEach.call(f,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id"),r=t.getAttribute("class");if(void 0===k.get(r)?k.set(r,0):k.set(r,k.get(r)+1),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var i=s.CanisUtil.toJSON(t),a=s.CanisUtil.discretizePath(i);if(a){if("lines"===a.type)for(var c=0;c<a.data.length;c++)i.attr["x"+(1+2*c)]=a.data[c][0][0],i.attr["y"+(1+2*c)]=a.data[c][0][1],i.attr["x"+(2+2*c)]=a.data[c][1][0],i.attr["y"+(2+2*c)]=a.data[c][1][1];else for(var u=Object.keys(a.data),f=0;f<u.length;f++){var l=u[f];"radius"===l?a.data[l].length>1?(i.attr.innerRadius=a.data[l][0].rx+1,i.attr.outterRadius=a.data[l][1].rx-1):(i.attr.innerRadius=0,i.attr.outterRadius=a.data[l][0].rx-1):i.attr[l]=a.data[l]}t=s.CanisUtil.toDOM(i)}}for(var p={},d=[].concat(h(t.attributes)),v=0;v<d.length;v++){var g=d[v];p[g.name]=t.getAttribute(g.name)}var y=document.getElementById(e);p.bbWidth=y.getBBox().width,p.bbHeight=y.getBBox().height,p.bbX=y.getBBox().x,p.bbY=y.getBBox().y,p.content=t.textContent,p.id=e;var m=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(m)&&(m=m[0]),m.clsIdx="a".concat(k.get(r)),void 0!==n.default.nonDataMarkDatum.get(e)&&(n.default.nonDataMarkDatum.get(e).clsIdx="a".concat(k.get(r))),p["data-datum"]=m,p.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(p["stroke-dasharray"]=document.getElementById(e).getTotalLength(),p["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var b=s.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==b&&b&&"pies"===b.type&&(p.cx=b.data.cx,p.cy=b.data.cy,p.startAngle=(b.data.clockwise?b.data.startAngle:b.data.endAngle)-1/(2*Math.PI),p.endAngle=(b.data.clockwise?b.data.endAngle:b.data.startAngle)+4*Math.PI+1/(2*Math.PI),b.data.radius.length>1?(p.innerRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[1].rx:b.data.radius[0].rx,p.outterRadius=b.data.radius[0].rx>b.data.radius[1].rx?b.data.radius[0].rx:b.data.radius[1].rx,p.outterRadius++):(p.innerRadius=0,p.outterRadius=b.data.radius[0].rx+1))}o.default.domMarks.set(e,p)}}})}m.calAniTime(u),o.default.animations.get(b).alignOnData=m.alignOnData,p=m,document.body.removeChild(i)},v=0;case 30:if(!(v<this.animations.length)){t.next=37;break}if("continue"!==d(v)){t.next=34;break}return t.abrupt("continue",34);case 34:v++,t.next=30;break;case 37:case"end":return t.stop()}},t,this)}),m=function(){var t=this,e=arguments;return new Promise(function(r,n){var i=y.apply(t,e);function a(t){p(i,r,n,a,o,"next",t)}function o(t){p(i,r,n,a,o,"throw",t)}a(void 0)})},function(t){return m.apply(this,arguments)})},{key:"sortSelector",value:function(t){var e=t.split(", ");return e.length>0?(e.sort(function(t,e){return parseInt(t.substring(5))-parseInt(e.substring(5))}),e.join(", ")):t}},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.default.renderAnimation(r),o.default.mapToLottieSpec();var n=c.globalVar.jsMovin.toJSON();return t.lottieJSON=n,r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"constants",set:function(t){var e=this;this._constants.clear(),t.forEach(function(t){e._constants.set(t.name,t.value)})},get:function(){return this._constants}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if(r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length,console.log("assigning animations: ",r,JSON.stringify(t,null,2)),r>1)for(var n=function(r){var n=s.CanisUtil.deepClone(t);n[0].reference=a.default.timingRef.previousEnd;var i=new Map,o=n.map(function(t){if(t.chartIdx=r,void 0!==t.id){var e=r+"."+t.id;i.set(t.id,e),t.id=e}return void 0!==t.align&&(void 0!==i.get(t.align.target)?t.align.target=i.get(t.align.target):console.warn("aligning with an id that does not exist!")),t});e.push.apply(e,h(o))},i=1;i<r;i++)n(i);console.log("assigned animations: ",JSON.stringify(e,null,2)),this._animations=e},get:function(){return this._animations}}])&&g(e.prototype,r),l&&g(e,l),t}();y.lottieJSON="";var m=y;e.default=m,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,i;return e=t,i=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),i&&n(e,i),t}();e.EasingFactory=i},function(t,e,r){var n=r(147).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var i in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)i in t&&(t[i]+=t.relative?t[n[i]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,i;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.warn('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),i=t.range[0].match(e),a=t.range[1].match(e);if(r===n){t.frames=[];for(var o=i;o<=a;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.warn("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var i=0;i<e.length;i++)if(e[i].frames.length<r)for(var a=e[i].frames[e[i].frames.length-1],o=r-e[i].frames.length;o>0;)e[i].frames.push(a),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),i&&n(e,i),t}();i.facetType={row:"row",col:"column"};var a=i;e.default=a,t.exports=e.default},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _TimingSpec2=_interopRequireDefault(__webpack_require__(47)),_Util=__webpack_require__(48);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var GroupingSpec=function(_TimingSpec){function GroupingSpec(){var t;return _classCallCheck(this,GroupingSpec),(t=_possibleConstructorReturn(this,(GroupingSpec.__proto__||Object.getPrototypeOf(GroupingSpec)).call(this)))._groupBy="id",t._reference=_TimingSpec2.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}return _inherits(GroupingSpec,_TimingSpec),_createClass(GroupingSpec,[{key:"replaceDelayConst",value:function replaceDelayConst(constants){var _this2=this,status=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof this.delay&&(void 0===constants.get(this.delay)?0===this.delay.indexOf("calc")?(this.delay=this.delay.substring(0,this.delay.length-1).substring(5),constants.forEach(function(t,e,r){_this2.delay.includes(e)&&("number"==typeof t?_this2.delay=_this2.delay.replace(new RegExp(e,"gm"),""+t):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+_this2.delay.replace(/\s/g,"")+'"'})}),_Util.CanisUtil.checkEquation(this.delay,constants)?this.delay=eval(this.delay):status.info={type:"error",msg:"Wrong equation.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}):status.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}:"number"==typeof constants.get(this.delay)?this.delay=constants.get(this.delay):status.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}),void 0!==this.grouping&&this.grouping.replaceDelayConst(constants,status)}},{key:"initGrouping",value:function(t){this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new GroupingSpec,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new GroupingSpec,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,e,r,n,i){return GroupingSpec.frames.clear(),GroupingSpec.framesMark.clear(),0===Object.keys(r).length?(r.groupRef="root",r.id=GroupingSpec.nodeId,GroupingSpec.frames.set(GroupingSpec.nodeId,!0),GroupingSpec.nodeId++,r.children=[],r.marks=t,r.timingRef=void 0===n?_TimingSpec2.default.timingRef.previousStart:n,r.delay=0,this.generateTree(r,e)):this.updateTree(r,e),this.getMarkOrderAndLeaves(r,i)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,i=this.delay;if(void 0!==this.grouping){var a=!1;if(void 0!==t.children[0]&&(a=t.children[0].groupRef===r),a){for(var o,s=new Map,c=0;c<t.children.length|(o=t.children[c]);c++)this.grouping.updateTree(o,e),s.set(o.refValue,o),o.timingRef=n,o.delay=i;this.sortNodes(this.sort,t,s,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,e){for(var r,n=this.groupBy,i=this.reference,a=this.delay,o=new Map,s=0;s<t.marks.length|(r=t.marks[s]);s++){var c=e.get(r)["data-datum"],u=void 0;if(void 0!==e.get(r)[n])u=e.get(r)[n];else{if(void 0!==e.get(r)[n]||void 0===c[n])return void console.warn("error: grouping by an unknown attribute");u=c[n]}if(void 0!==o.get(u))o.get(u).marks.push(r);else{var f={};f.id=GroupingSpec.nodeId,GroupingSpec.nodeId++,f.groupRef=n,"id"===f.groupRef&&(f.definedById=this.definedById),f.refValue=u,f.timingRef=i,f.delay=a,f.children=[],f.marks=[r],o.set(u,f)}}if(this.sortNodes(this.sort,t,o,e),void 0!==this.grouping)for(var l,h=0;h<t.children.length|(l=t.children[h]);h++)this.grouping.generateTree(l,e)}},{key:"sortNodes",value:function(t,e,r,n){switch(e.children=[],_typeof(t.order)){case"object":for(var i,a=0;a<t.order.length|(i=t.order[a]);a++){if(!isNaN(Number(i))){var o=Number(i);void 0!==r.get(o)&&(e.children.push(r.get(o)),0)}void 0!==r.get(i)&&(e.children.push(r.get(i)),0)}break;case"string":var s=!0;if(r.forEach(function(t,e){t.marks.length>1&&(s=!1)}),void 0!==t.field&&s){var c=t.field,u=[].concat(_toConsumableArray(r)),f=t.order;u.sort(function(t,e){var r=t[1].marks[0],i=e[1].marks[0],a="",o="",s=n.get(r)["data-datum"],u=n.get(i)["data-datum"];return void 0!==n.get(r)[c]&&"undefined"!==n.get(i)[c]?(a=n.get(r)[c],o=n.get(i)[c]):void 0===n.get(r)[c]&&void 0!==s[c]&&void 0===n.get(i)[c]&&void 0!==u[c]&&(a=s[c],o=u[c]),isNaN(parseFloat(a))||(a=parseFloat(a)),isNaN(parseFloat(o))||(o=parseFloat(o)),f===GroupingSpec.orderTypes.ascending?a>=o?1:-1:f===GroupingSpec.orderTypes.descending?o>=a?1:-1:f===GroupingSpec.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var l,h=0;h<u.length|(l=u[h]);h++)e.children.push(l[1])}else{var p=[].concat(_toConsumableArray(r));t.order===GroupingSpec.orderTypes.ascending?p.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===GroupingSpec.orderTypes.descending?p.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===GroupingSpec.orderTypes.random&&p.sort(function(t,e){return Math.random()>=.5?1:-1});for(var d,v=0;v<p.length|(d=p[v]);v++)e.children.push(d[1])}break;default:r.forEach(function(t,r){e.children.push(t),0})}}},{key:"appendFrame",value:function(t,e,r,n){!GroupingSpec.frames.get(t)||0!==r&&r!==n-1?GroupingSpec.frames.set(e,!1):GroupingSpec.frames.set(e,!0)}},{key:"getMarkOrderAndLeaves",value:function(t,e){var r=[],n=[];if(null!=t){var i=[];for(t.parentGroupRef=[],t.parentGroupRefValue=[],i.unshift(t);0!=i.length;){var a=i.shift(),o=a.children;if(o.length<=0)(a.definedById||!a.definedById&&1===a.parentGroupRef.length)&&(e&&(a.children=[],a.parentGroupRef=[a.parentGroupRef[0]],a.parentGroupRefValue=[a.parentGroupRefValue[0]],a.groupRef="id",a.refValue=a.marks[0]),n.push(a)),r=[].concat(_toConsumableArray(r),_toConsumableArray(a.marks));else{"id"!==a.children[0].groupRef||"root"===a.groupRef||a.children[0].definedById||(e&&(a.children=[],a.parentGroupRef=[a.parentGroupRef[0]],a.parentGroupRefValue=[a.parentGroupRefValue[0]],a.groupRef="id",a.refValue=a.marks[0]),n.push(a));for(var s=0;s<o.length;s++)o[s].parentGroupRef=[].concat(_toConsumableArray(a.parentGroupRef),[a.groupRef]),o[s].parentGroupRefValue=[].concat(_toConsumableArray(a.parentGroupRefValue),[a.refValue]),i.push(o[s])}}}return[r,n]}},{key:"calTimeWithTree",value:function(t,e,r,n){if(t.children.length>0)for(var i=0;i<t.children.length;i++)i>0?this.calTimeWithTree(t.children[i],t.children[i-1].start,t.children[i-1].end,n):this.calTimeWithTree(t.children[i],-1,-1,n);switch(t.timingRef){case _TimingSpec2.default.timingRef.previousStart:t.start=e+t.delay;break;case _TimingSpec2.default.timingRef.previousEnd:t.start=r+t.delay;break;case _TimingSpec2.default.timingRef.absolute:t.start=t.delay;break;default:t.start=e+t.delay}-1===e&&(t.start=0),t.end=0;for(var a=0;a<t.marks.length;a++)n.get(t.marks[a]).startTime+=t.start,n.get(t.marks[a]).startTime+n.get(t.marks[a]).totalDuration>t.end&&(t.end=n.get(t.marks[a]).startTime+n.get(t.marks[a]).totalDuration);if(1===t.marks.length){var o=t.marks[0];GroupingSpec.frames.get(t.id)?GroupingSpec.framesMark.set(o,!0):void 0===GroupingSpec.framesMark.get(o)&&GroupingSpec.framesMark.set(o,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=_TimingSpec2.default.transRef(t);Object.keys(_TimingSpec2.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){"number"==typeof t?t>=1e3/_TimingSpec2.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/_TimingSpec2.default.FRAME_RATE:"string"==typeof t&&(this._delay=t)},get:function(){return this._delay}}]),GroupingSpec}(_TimingSpec2.default);GroupingSpec.attrs=["groupBy","reference","delay","sort","grouping"],GroupingSpec.sortAttrs=["order","field"],GroupingSpec.orderTypes={ascending:"ascending",descending:"descending",random:"random"},GroupingSpec.nodeId=0,GroupingSpec.frames=new Map,GroupingSpec.framesMark=new Map;var _default=GroupingSpec;exports.default=_default,module.exports=exports.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(76)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),i=r(15),a=r(56)(!1),o=r(78)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),c=0,u=[];for(r in s)r!=o&&n(s,r)&&u.push(r);for(;e.length>c;)n(s,r=e[c++])&&(~a(u,r)||u.push(r));return u}},function(t,e,r){var n=r(8),i=r(1),a=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,c=0;s>c;)n.f(t,r=o[c++],e[r]);return t}},function(t,e,r){var n=r(15),i=r(37).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(7),i=r(34),a=r(57),o=r(51),s=r(9),c=r(50),u=Object.assign;t.exports=!u||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=u({},t)[r]||Object.keys(u({},e)).join("")!=n})?function(t,e){for(var r=s(t),u=arguments.length,f=1,l=a.f,h=o.f;u>f;)for(var p,d=c(arguments[f++]),v=l?i(d).concat(l(d)):i(d),g=v.length,y=0;g>y;)p=v[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:u},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),i=r(4),a=r(116),o=[].slice,s={},c=function(t,e,r){if(!(e in s)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),s=function(){var n=r.concat(o.call(arguments));return this instanceof s?c(e,n.length,n):a(e,n,t)};return i(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,i=r(45).trim,a=r(82),o=/^[-+]?0[xX]/;t.exports=8!==n(a+"08")||22!==n(a+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,i=r(45).trim;t.exports=1/n(r(82)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(85),i=Math.pow,a=i(2,-52),o=i(2,-23),s=i(2,127)*(2-o),c=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),u=n(t);return i<c?u*(i/c/o+1/a-1/a)*c*o:(r=(e=(1+o/a)*i)-(e-i))>s||r!=r?u*(1/0):u*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var a=t.return;throw void 0!==a&&n(a.call(t)),e}}},function(t,e,r){var n=r(10),i=r(9),a=r(50),o=r(6);t.exports=function(t,e,r,s,c){n(e);var u=i(t),f=a(u),l=o(u.length),h=c?l-1:0,p=c?-1:1;if(r<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,u));return s}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=a(r.length),s=i(t,o),c=i(e,o),u=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===u?o:i(u,o))-c,o-s),l=1;for(c<s&&s<c+f&&(l=-1,c+=f-1,s+=f-1);f-- >0;)c in r?r[s]=r[c]:delete r[s],s+=l,c+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(97);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(52)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),i=r(4),a=r(101);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(65)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(i(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,i=r(36),a=r(41),o=r(19),s=r(39),c=r(40),u=r(87),f=r(126),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),v=h?"_s":"size",g=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,u){var f=t(function(t,n){s(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=n&&c(n,r,t[u],t)});return a(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var r=d(this,e),n=g(r,t);if(n){var i=n.n,a=n.p;delete r._i[n.i],n.r=!0,a&&(a.n=i),i&&(i.p=a),r._f==n&&(r._f=i),r._l==n&&(r._l=a),r[v]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,r){var n,i,a=g(t,e);return a?a.v=r:(t._l=a={i:i=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=a),n&&(n.n=a),t[v]++,"F"!==i&&(t._i[i]=a)),t},getEntry:g,setStrong:function(t,e,r){u(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(65)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,i=r(2),a=r(26)(0),o=r(12),s=r(30),c=r(113),u=r(135),f=r(4),l=r(42),h=r(42),p=!i.ActiveXObject&&"ActiveXObject"in i,d=s.getWeak,v=Object.isExtensible,g=u.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return u.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(65)("WeakMap",y,m,u,!0,!0);h&&p&&(c((n=u.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,a(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,i){if(f(e)&&!v(e)){this._f||(this._f=new n);var a=this._f[t](e,i);return"set"==t?this:a}return r.call(this,e,i)})}))},function(t,e,r){"use strict";var n=r(41),i=r(30).getWeak,a=r(1),o=r(4),s=r(39),c=r(40),u=r(26),f=r(14),l=r(42),h=u(5),p=u(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,a){var u=t(function(t,n){s(t,u,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&c(n,r,t[a],t)});return n(u.prototype,{delete:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).has(t):r&&f(r,this._i)}}),u},def:function(t,e,r){var n=i(a(e),!0);return!0===n?v(t).set(e,r):n[t._i]=r,t},ufstore:v}},function(t,e,r){var n=r(21),i=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),i=r(57),a=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(58),i=r(4),a=r(6),o=r(19),s=r(5)("isConcatSpreadable");t.exports=function t(e,r,c,u,f,l,h,p){for(var d,v,g=f,y=0,m=!!h&&o(h,p,3);y<u;){if(y in c){if(d=m?m(c[y],y,r):c[y],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:n(d)),v&&l>0)g=t(e,r,d,a(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}y++}return g}},function(t,e,r){var n=r(6),i=r(84),a=r(24);t.exports=function(t,e,r,o){var s=String(a(t)),c=s.length,u=void 0===r?" ":String(r),f=n(e);if(f<=c||""==u)return s;var l=f-c,h=i.call(u,Math.ceil(l/u.length));return h.length>l&&(h=h.slice(0,l)),o?h+s:s+h}},function(t,e,r){var n=r(7),i=r(34),a=r(15),o=r(51).f;t.exports=function(t){return function(e){for(var r,s=a(e),c=i(s),u=c.length,f=0,l=[];u>f;)r=c[f++],n&&!o.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}}},function(t,e,r){var n=r(44),i=r(142);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,i){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),i=r.n(n),a=r(70),o=r.n(a),s=r(103),c=r.n(s);window.canis={canisObj:{},frameRate:i.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new c.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return c.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,i=r(104),a=r(146),o=r(74),s=(n=r(73))&&n.__esModule?n:{default:n},c=r(72);function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function v(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var g=function(){function t(e){h(this,t),v(this,"root",void 0),v(this,"anchor",void 0),v(this,"position",void 0),v(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,i=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],c=t[e].k.filter(function(t){return t.t==i});if(c.length)r=c[0];else{r={t:i,s:this.getDefaultProperty(e)};var u=t[e].k.reduce(function(t,e){return e.t<i?t+1:t},0);t[e].k.splice(u,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=a:r.s=!s||a instanceof Array?a:[a]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){v(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var i=this.root.shapes[0].it;i.splice(i.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,i;this.timeRange[t]=1,this.updateTimeRange(),e instanceof c.PathMaker&&(e.uniform(),e=e.path);var a=u(this.commonPropertyMapping(t),3);if(r=a[0],n=a[1],i=a[2],!n||void 0===i)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==i&&(this.convertToStaticProperty(r,n),i>=0?r[n].k[i]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,a,s){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),s||(s=i.EasingFactory.linear()),n instanceof c.PathMaker||a instanceof c.PathMaker){if([n,a].forEach(function(t){return t instanceof c.PathMaker&&t.uniform()}),n instanceof c.PathMaker&&a instanceof c.PathMaker){var f=n.path.v.length-1,l=a.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:a,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),a.upsample(Math.round(d/l))}}var v=u([n,a].map(function(t){return t instanceof c.PathMaker?t.path:t}),2);n=v[0],a=v[1]}var g,y,m,b=!0,k=u(this.commonPropertyMapping(t),3);if(g=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var S=(g=this.root.t).d.k[0].s,A=JSON.parse(JSON.stringify(S)),T=JSON.parse(JSON.stringify(S));A.t=n,T.t=a,n=A,a=T,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,a,s),new Error("Not a valid key.")}g&&y&&void 0!==m&&(this.convertToAnimatableProperty(g,y),this.addKeyframe(g,y,m,e,n,s,b),this.addKeyframe(g,y,m,r,a,i.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=g;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,a.render)(t)};return new g(r)}},{key:"rect",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("rect",[r,n])]};return new g(i)}},{key:"ellipse",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("ellipse",[r,n])]};return new g(i)}},{key:"ref",value:function(t){return new g({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,i=this,c=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:c),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,s.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(i.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=c[0]+c[2]+1,h.h=c[1]+c[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var v=f;v.ty=4,v.ks=this.generateTransform(c),v.shapes=(0,a.render)(t)}break;case 2:var y=f,m=u((0,a.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,a.render)(t);break;case 5:var S=f,A=(0,o.getBaselineHeight)(t),T=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];S.ks.p.k=[c[0]+c[2]*T,c[1]+c[3]-A,0],S.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var w=u((0,a.renderText)(t,r),2),x=w[0],_=w[1];S.t=x,r.list.filter(function(t){return t.fName==_.fName}).length||r.list.push(_)}return new g(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=c,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new i.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),i=r.fontFamily.split(",")[0].trim(),s=r.fontStyle,c=r.fontWeight,u=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,a.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==i&&t.fStyle==s&&t.fWeight==c});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:u}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:i,fWeight:"".concat(c),fStyle:s,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,a.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var i=t.width.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),s=o.getContext("2d");o.width=3*i.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,s.drawImage(t,0,0,o.width,o.height);var c=o.toDataURL();if(e){var u=e.filter(function(t){return t.p==c});u.length&&(r=u[0].id)}var f={h:n.valueInSpecifiedUnits,w:i.valueInSpecifiedUnits,id:r,p:c,e:1};return[r,f]};var n,i=r(72),a=(n=r(73))&&n.__esModule?n:{default:n},o=r(74);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function c(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=c(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var i=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var i=0,a=0,s=100;if(r&&n){var c=(0,o.calculateBaseTransform)(r,n),u=n.getBBox(),f=r.getBBox();i=c.e+f.x-u.x,a=c.f+f.y-u.y,s=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[i,a]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:s},sk:{k:0},sa:{k:0}})}(r.it,i,t,e)};if(t instanceof SVGCircleElement){var a=t.r.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var c=a.valueInSpecifiedUnits,u=new i.PathMaker;u.moveTo(c,0),u.arcTo(c,c,0,1,0,c,2*c),u.arcTo(c,c,0,1,0,c,0),u.closePath(),n(u)}else if(t instanceof SVGEllipseElement){var f=s(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new i.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=s(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),v=d[0],g=d[1],y=d[2],m=d[3],b=Math.min(v,g),k=Math.min(y,m),S=new i.PathMaker;S.moveTo(v-b,y-k),S.lineTo(g-b,m-k),n(S)}else if(t instanceof SVGPathElement){var A=t.getAttribute("d")||"",T=new i.PathMaker(A);n(T)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var w=t.points;if(w.length){var x=Array.prototype.slice.call(w),_=x.reduce(function(t,e){return Math.min(t,e.x)},0),M=x.reduce(function(t,e){return Math.min(t,e.y)},0),E=new i.PathMaker;E.moveTo(w[0].x-_,w[0].y-M),x.forEach(function(t,e){e<=0||E.lineTo(t.x-_,t.y-M)}),t instanceof SVGPolygonElement&&E.closePath(),n(E)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var O=s(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),P=O[0],C=O[1],F=new i.PathMaker;F.moveTo(0,0),F.lineTo(P,0),F.lineTo(P,C),F.lineTo(0,C),F.closePath(),n(F)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,i){this.message=t,this.expected=e,this.found=r,this.location=i,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+i(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?a(t.parts[e][0])+"-"+a(t.parts[e][1]):a(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function i(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function a(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,i,a=new Array(t.length);for(e=0;e<t.length;e++)a[e]=(i=t[e],r[i.type](i));if(a.sort(),a.length>0){for(e=1,n=1;e<a.length;e++)a[e-1]!==a[e]&&(a[n]=a[e],n++);a.length=n}switch(a.length){case 1:return a[0];case 2:return a[0]+" or "+a[1];default:return a.slice(0,-1).join(", ")+", or "+a[a.length-1]}}(t)+" but "+function(t){return t?'"'+i(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,i={},a={svg_path:gt},o=gt,s=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},c=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,i=e.length;n<i;n++)r[n+1]=e[n][1];return r}(t,e)},u=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Dt(t,[e]);return r&&(n=n.concat(Dt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Dt("Z")},v=/^[Ll]/,g=lt(["L","l"],!1,!1),y=function(t,e){return Dt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Dt(t,e.map(function(t){return{x:t}}))},S=/^[Vv]/,A=lt(["V","v"],!1,!1),T=function(t,e){return Dt(t,e.map(function(t){return{y:t}}))},w=/^[Cc]/,x=lt(["C","c"],!1,!1),_=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},M=/^[Ss]/,E=lt(["S","s"],!1,!1),O=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},P=/^[Qq]/,C=lt(["Q","q"],!1,!1),F=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},I=/^[Tt]/,j=lt(["T","t"],!1,!1),R=/^[Aa]/,N=lt(["A","a"],!1,!1),L=function(t,e,r,n,i,a){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:i,x:a.x,y:a.y}},D=function(t,e){return{x:t,y:e}},V=function(t){return 1*t},G=function(t){return 1*t.join("")},B=/^[01]/,Y=lt(["0","1"],!1,!1),X=function(t){return"1"==t},W=function(){return""},q=",",U=ft(",",!1),z=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),$=/^[+\-]/,K=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,it=lt([" ","\t","\n","\r"],!1,!1),at=0,ot=[{line:1,column:1}],st=0,ct=[],ut=0;if("startRule"in e){if(!(e.startRule in a))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=a[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){at<st||(at>st&&(st=at,ct=[]),ct.push(t))}function vt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function gt(){var t,e,r,n,a;for(t=at,e=[],r=Rt();r!==i;)e.push(r),r=Rt();if(e!==i)if((r=function(){var t,e,r,n,a,o;if(t=at,(e=yt())!==i){for(r=[],n=at,a=[],o=Rt();o!==i;)a.push(o),o=Rt();for(a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;){for(r.push(n),n=at,a=[],o=Rt();o!==i;)a.push(o),o=Rt();a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i)}r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())===i&&(r=null),r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i?(t,t=e=s(r)):(at=t,t=i)}else at=t,t=i;else at=t,t=i;return t}function yt(){var e,r,n,a,o,s;if(e=at,(r=function(){var e,r,n,a,o,s,c;e=at,u.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(f));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=xt())!==i?(o=at,(s=Ot())===i&&(s=null),s!==i&&(c=bt())!==i?o=s=[s,c]:(at=o,o=i),o===i&&(o=null),o!==i?(e,r=l(r,a,o),e=r):(at=e,e=i)):(at=e,e=i)}else at=e,e=i;return e}())!==i){for(n=[],a=at,o=[],s=Rt();s!==i;)o.push(s),s=Rt();for(o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i);a!==i;){for(n.push(a),a=at,o=[],s=Rt();s!==i;)o.push(s),s=Rt();o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i)}n!==i?(e,e=r=c(r,n)):(at=e,e=i)}else at=e,e=i;return e}function mt(){var e;return(e=function(){var e,r;e=at,h.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(p));r!==i&&(e,r=d());return e=r}())===i&&(e=function(){var e,r,n,a;e=at,v.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(g));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=bt())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,m.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(b));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=kt())!==i?(e,r=k(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,S.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(A));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=kt())!==i?(e,r=T(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,w.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(x));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=St())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,M.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(E));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=At())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,P.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(C));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,I.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(j));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=xt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,R.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(N));if(r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=wt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=c(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}()),e}function bt(){var t,e,r,n,a,o;if(t=at,(e=xt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=c(e,r)):(at=t,t=i)}else at=t,t=i;return t}function kt(){var t,e,r,n,a,o;if(t=at,(e=Mt())!==i){for(r=[],n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=c(e,r)):(at=t,t=i)}else at=t,t=i;return t}function St(){var t,e,r,n,a,o;return t=at,(e=xt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=xt())!==i?((a=Ot())===i&&(a=null),a!==i&&(o=xt())!==i?(t,t=e=_(e,n,o)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function At(){var t,e,r,n;return t=at,(e=xt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=xt())!==i?(t,t=e=O(e,n)):(at=t,t=i)):(at=t,t=i),t}function Tt(){var t,e,r,n;return t=at,(e=xt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=xt())!==i?(t,t=e=F(e,n)):(at=t,t=i)):(at=t,t=i),t}function wt(){var t,e,r,n,a,o,s,c,u,f,l;return t=at,(e=_t())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=_t())!==i?((a=Ot())===i&&(a=null),a!==i&&(o=Mt())!==i&&Ot()!==i&&(s=Et())!==i?((c=Ot())===i&&(c=null),c!==i&&(u=Et())!==i?((f=Ot())===i&&(f=null),f!==i&&(l=xt())!==i?(t,t=e=L(e,n,o,s,u,l)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function xt(){var t,e,r,n;return t=at,(e=Mt())!==i?((r=Ot())===i&&(r=null),r!==i&&(n=Mt())!==i?(t,t=e=D(e,n)):(at=t,t=i)):(at=t,t=i),t}function _t(){var t,e;return t=at,(e=Ct())===i&&(e=jt()),e!==i&&(t,e=V(e)),t=e}function Mt(){var t,e,r,n;return t=at,e=at,(r=It())===i&&(r=null),r!==i&&(n=Ct())!==i?e=r=[r,n]:(at=e,e=i),e===i&&(e=at,(r=It())===i&&(r=null),r!==i&&(n=jt())!==i?e=r=[r,n]:(at=e,e=i)),e!==i&&(t,e=G(e)),t=e}function Et(){var e,r;return e=at,B.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(Y)),r!==i&&(e,r=X(r)),e=r}function Ot(){var t,e,r,n,a;if(t=at,e=[],(r=Rt())!==i)for(;r!==i;)e.push(r),r=Rt();else e=i;if(e!==i)if((r=Pt())===i&&(r=null),r!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i?t=e=[e,r,n]:(at=t,t=i)}else at=t,t=i;else at=t,t=i;if(t===i){if(t=at,e=at,(r=Pt())!==i){for(n=[],a=Rt();a!==i;)n.push(a),a=Rt();n!==i?e=r=[r,n]:(at=e,e=i)}else at=e,e=i;e!==i&&(t,e=W()),t=e}return t}function Pt(){var e;return 44===t.charCodeAt(at)?(e=q,at++):(e=i,0===ut&&dt(U)),e}function Ct(){var e,r,n,a;return e=at,r=at,(n=function(){var e,r,n,a,o;e=at,r=at,(n=jt())===i&&(n=null);n!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ut&&dt(J)),a!==i&&(o=jt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i);r===i&&(r=at,(n=jt())!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ut&&dt(J)),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i));r!==i&&(e,r=z(r));return e=r}())!==i?((a=Ft())===i&&(a=null),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i),r===i&&(r=at,(n=jt())!==i&&(a=Ft())!==i?r=n=[n,a]:(at=r,r=i)),r!==i&&(e,r=z(r)),e=r}function Ft(){var e,r,n,a,o;return e=at,r=at,Q.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ut&&dt(Z)),n!==i?((a=It())===i&&(a=null),a!==i&&(o=jt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i),r!==i&&(e,r=z(r)),e=r}function It(){var e;return $.test(t.charAt(at))?(e=t.charAt(at),at++):(e=i,0===ut&&dt(K)),e}function jt(){var e,r,n;if(e=at,r=[],tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ut&&dt(et)),n!==i)for(;n!==i;)r.push(n),tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ut&&dt(et));else r=i;return r!==i&&(e,r=rt(r)),e=r}function Rt(){var e,r;return e=at,nt.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ut&&dt(it)),r!==i&&(e,r=W()),e=r}var Nt={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Lt in Nt)Nt[Lt.toUpperCase()]=Nt[Lt];function Dt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Nt[t]};for(var i in t==t.toLowerCase()&&(n.relative=!0),e[r])n[i]=e[r][i];e[r]=n}return e}if((r=o())!==i&&at===t.length)return r;throw r!==i&&at<t.length&&dt({type:"end"}),vt(ct,st<t.length?t.charAt(st):null,st<t.length?pt(st,st+1):pt(st,st))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,i=r;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(96),r(257),r(127),r(258),r(128),r(259),r(260),r(261),r(262),r(263),r(131),r(133),r(134),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(7),o=r(0),s=r(12),c=r(30).KEY,u=r(3),f=r(49),l=r(43),h=r(33),p=r(5),d=r(109),v=r(77),g=r(155),y=r(58),m=r(1),b=r(4),k=r(9),S=r(15),A=r(23),T=r(32),w=r(36),x=r(112),_=r(16),M=r(57),E=r(8),O=r(34),P=_.f,C=E.f,F=x.f,I=n.Symbol,j=n.JSON,R=j&&j.stringify,N=p("_hidden"),L=p("toPrimitive"),D={}.propertyIsEnumerable,V=f("symbol-registry"),G=f("symbols"),B=f("op-symbols"),Y=Object.prototype,X="function"==typeof I&&!!M.f,W=n.QObject,q=!W||!W.prototype||!W.prototype.findChild,U=a&&u(function(){return 7!=w(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=P(Y,e);n&&delete Y[e],C(t,e,r),n&&t!==Y&&C(Y,e,n)}:C,z=function(t){var e=G[t]=w(I.prototype);return e._k=t,e},H=X&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},J=function(t,e,r){return t===Y&&J(B,e,r),m(t),e=A(e,!0),m(r),i(G,e)?(r.enumerable?(i(t,N)&&t[N][e]&&(t[N][e]=!1),r=w(r,{enumerable:T(0,!1)})):(i(t,N)||C(t,N,T(1,{})),t[N][e]=!0),U(t,e,r)):C(t,e,r)},Q=function(t,e){m(t);for(var r,n=g(e=S(e)),i=0,a=n.length;a>i;)J(t,r=n[i++],e[r]);return t},Z=function(t){var e=D.call(this,t=A(t,!0));return!(this===Y&&i(G,t)&&!i(B,t))&&(!(e||!i(this,t)||!i(G,t)||i(this,N)&&this[N][t])||e)},$=function(t,e){if(t=S(t),e=A(e,!0),t!==Y||!i(G,e)||i(B,e)){var r=P(t,e);return!r||!i(G,e)||i(t,N)&&t[N][e]||(r.enumerable=!0),r}},K=function(t){for(var e,r=F(S(t)),n=[],a=0;r.length>a;)i(G,e=r[a++])||e==N||e==c||n.push(e);return n},tt=function(t){for(var e,r=t===Y,n=F(r?B:S(t)),a=[],o=0;n.length>o;)!i(G,e=n[o++])||r&&!i(Y,e)||a.push(G[e]);return a};X||(s((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===Y&&e.call(B,r),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),U(this,t,T(1,r))};return a&&q&&U(Y,t,{configurable:!0,set:e}),z(t)}).prototype,"toString",function(){return this._k}),_.f=$,E.f=J,r(37).f=x.f=K,r(51).f=Z,M.f=tt,a&&!r(29)&&s(Y,"propertyIsEnumerable",Z,!0),d.f=function(t){return z(p(t))}),o(o.G+o.W+o.F*!X,{Symbol:I});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=O(p.store),it=0;nt.length>it;)v(nt[it++]);o(o.S+o.F*!X,"Symbol",{for:function(t){return i(V,t+="")?V[t]:V[t]=I(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),o(o.S+o.F*!X,"Object",{create:function(t,e){return void 0===e?w(t):Q(w(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:$,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var at=u(function(){M.f(1)});o(o.S+o.F*at,"Object",{getOwnPropertySymbols:function(t){return M.f(k(t))}}),j&&o(o.S+o.F*(!X||u(function(){var t=I();return"[null]"!=R([t])||"{}"!=R({a:t})||"{}"!=R(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,R.apply(j,n)}}),I.prototype[L]||r(11)(I.prototype,L,I.prototype.valueOf),l(I,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(49)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),i=r(57),a=r(51);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),c=a.f,u=0;s.length>u;)c.call(t,o=s[u++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(111)})},function(t,e,r){var n=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return i(n(t),e)}})},function(t,e,r){var n=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(n(t))}})},function(t,e,r){var n=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(112).f})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(114)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(81).set})},function(t,e,r){"use strict";var n=r(44),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(115)})},function(t,e,r){var n=r(8).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||r(7)&&n(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),i=r(17),a=r(5)("hasInstance"),o=Function.prototype;a in o||r(8).f(o,a,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),i=r(117);n(n.G+n.F*(parseInt!=i),{parseInt:i})},function(t,e,r){var n=r(0),i=r(118);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(20),o=r(83),s=r(23),c=r(3),u=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,v=p.prototype,g="Number"==a(r(36)(v)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,a=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var o,c=e.slice(2),u=0,f=c.length;u<f;u++)if((o=c.charCodeAt(u))<48||o>i)return NaN;return parseInt(c,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(g?c(function(){v.valueOf.call(r)}):"Number"!=a(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?u(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;k.length>S;S++)i(d,b=k[S])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),i=r(21),a=r(119),o=r(84),s=1..toFixed,c=Math.floor,u=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*u[r],u[r]=n%1e7,n=c(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=u[e],u[e]=c(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==u[t]){var r=String(u[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,r,n,s,c=a(this,f),u=i(t),v="",g="0";if(u<0||u>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(c*d(2,69,1))-69)<0?c*d(2,-e,1):c/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=u;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),g=p()}else l(0,r),l(1<<-e,0),g=p()+o.call("0",u);return g=u>0?v+((s=g.length)<=u?"0."+o.call("0",u-s)+g:g.slice(0,s-u)+"."+g.slice(s-u)):v+g}})},function(t,e,r){"use strict";var n=r(0),i=r(3),a=r(119),o=1..toPrecision;n(n.P+n.F*(i(function(){return"1"!==o.call(1,void 0)})||!i(function(){o.call({})})),"Number",{toPrecision:function(t){var e=a(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),i=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),i=r(120),a=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&a(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),i=r(118);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,r){var n=r(0),i=r(117);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,r){var n=r(0),i=r(121),a=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+a(t-1)*a(t+1))}})},function(t,e,r){var n=r(0),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),i=r(85);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,r){var n=r(0),i=r(86);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(122)})},function(t,e,r){var n=r(0),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,a=0,o=0,s=arguments.length,c=0;o<s;)c<(r=i(arguments[o++]))?(a=a*(n=c/r)*n+1,c=r):a+=r>0?(n=r/c)*n:r;return c===1/0?1/0:c*Math.sqrt(a)}})},function(t,e,r){var n=r(0),i=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n;return 0|i*a+((65535&r>>>16)*a+i*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(121)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(85)})},function(t,e,r){var n=r(0),i=r(86),a=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(a(t-1)-a(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),i=r(86),a=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(a(t)+a(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),i=r(35),a=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?a(e):a(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),i=r(15),a=r(6);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=a(e.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(e[s++])),s<n&&o.push(String(arguments[s]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(59)(!0);r(87)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),i=r(59)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(89),o="".endsWith;n(n.P+n.F*r(90)("endsWith"),"String",{endsWith:function(t){var e=a(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),s=void 0===r?n:Math.min(i(r),n),c=String(t);return o?o.call(e,c,s):e.slice(s-c.length,s)===c}})},function(t,e,r){"use strict";var n=r(0),i=r(89);n(n.P+n.F*r(90)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(84)})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(89),o="".startsWith;n(n.P+n.F*r(90)("startsWith"),"String",{startsWith:function(t){var e=a(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),r=a(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),i=r(232);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,r){"use strict";var n=r(3),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-5e13-1))})||!n(function(){a.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:a},function(t,e,r){var n=Date.prototype,i=n.toString,a=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=a.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),i=Date.prototype;n in i||r(11)(i,n,r(235))},function(t,e,r){"use strict";var n=r(1),i=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(58)})},function(t,e,r){"use strict";var n=r(19),i=r(0),a=r(9),o=r(123),s=r(91),c=r(6),u=r(92),f=r(93);i(i.S+i.F*!r(61)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,i,l,h=a(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(h);if(g&&(v=n(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(r=new p(e=c(h.length));e>y;y++)u(r,y,g?v(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)u(r,y,g?o(l,v,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),i=r(92);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=[].join;n(n.P+n.F*(r(50)!=Object||!r(22)(a)),"Array",{join:function(t){return a.call(i(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),i=r(80),a=r(20),o=r(35),s=r(6),c=[].slice;n(n.P+n.F*r(3)(function(){i&&c.call(i)}),"Array",{slice:function(t,e){var r=s(this.length),n=a(this);if(e=void 0===e?r:e,"Array"==n)return c.call(this,t,e);for(var i=o(t,r),u=o(e,r),f=s(u-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(i+h):this[i+h];return l}})},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(9),o=r(3),s=[].sort,c=[1,2,3];n(n.P+n.F*(o(function(){c.sort(void 0)})||!o(function(){c.sort(null)})||!r(22)(s)),"Array",{sort:function(t){return void 0===t?s.call(a(this)):s.call(a(this),i(t))}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(0),a=r(22)([].forEach,!0);n(n.P+n.F*!a,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,r){var n=r(4),i=r(58),a=r(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),i=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(56)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(a)),"Array",{indexOf:function(t){return o?a.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=r(21),o=r(6),s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(c||!r(22)(s)),"Array",{lastIndexOf:function(t){if(c)return s.apply(this,arguments)||0;var e=i(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,a(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(125)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(95)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),i=r(26)(5),a=!0;"find"in[]&&Array(1).find(function(){a=!1}),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),i=r(26)(6),a="findIndex",o=!0;a in[]&&Array(1)[a](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(a)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),i=r(83),a=r(8).f,o=r(37).f,s=r(60),c=r(52),u=n.RegExp,f=u,l=u.prototype,h=/a/g,p=/a/g,d=new u(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,u(h)!=h||u(p)==p||"/a/i"!=u(h,"i")}))){u=function(t,e){var r=this instanceof u,n=s(t),a=void 0===e;return!r&&n&&t.constructor===u&&a?t:i(d?new f(n&&!a?t.source:t,e):f((n=t instanceof u)?t.source:t,n&&a?c.call(t):e),r?this:l,u)};for(var v=function(t){t in u||a(u,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=o(f),y=0;g.length>y;)v(g[y++]);l.constructor=u,u.prototype=l,r(12)(n,"RegExp",u)}r(38)("RegExp")},function(t,e,r){"use strict";r(128);var n=r(1),i=r(52),a=r(7),o=/./.toString,s=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?s(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!a&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=o.name&&s(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),i=r(6),a=r(98),o=r(62);r(63)("match",1,function(t,e,r,s){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var c=n(t),u=String(this);if(!c.global)return o(c,u);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(c,u));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=a(u,i(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),i=r(9),a=r(6),o=r(21),s=r(98),c=r(62),u=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(63)("replace",2,function(t,e,r,d){return[function(n,i){var a=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,a,i):r.call(String(a),n,i)},function(t,e){var i=d(r,t,this,e);if(i.done)return i.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=s(h,a(l.lastIndex),y))}for(var k,S="",A=0,T=0;T<m.length;T++){b=m[T];for(var w=String(b[0]),x=u(f(o(b.index),h.length),0),_=[],M=1;M<b.length;M++)_.push(void 0===(k=b[M])?k:String(k));var E=b.groups;if(p){var O=[w].concat(_,x,h);void 0!==E&&O.push(E);var P=String(e.apply(void 0,O))}else P=v(w,h,x,_,E,e);x>=A&&(S+=h.slice(A,x)+P,A=x+w.length)}return S+h.slice(A)}];function v(t,e,n,a,o,s){var c=n+t.length,u=a.length,f=p;return void 0!==o&&(o=i(o),f=h),r.call(s,f,function(r,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(c);case"<":s=o[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>u){var h=l(f/10);return 0===h?r:h<=u?void 0===a[h-1]?i.charAt(1):a[h-1]+i.charAt(1):r}s=a[f-1]}return void 0===s?"":s})}})},function(t,e,r){"use strict";var n=r(1),i=r(114),a=r(62);r(63)("search",1,function(t,e,r,o){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var s=n(t),c=String(this),u=s.lastIndex;i(u,0)||(s.lastIndex=0);var f=a(s,c);return i(s.lastIndex,u)||(s.lastIndex=u),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(60),i=r(1),a=r(53),o=r(98),s=r(6),c=r(62),u=r(97),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(63)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var a,o,s,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(a=u.call(d,i))&&!((o=d.lastIndex)>l&&(c.push(i.slice(l,a.index)),a.length>1&&a.index<i.length&&h.apply(c,a.slice(1)),s=a[0].length,l=o,c.length>=p));)d.lastIndex===a.index&&d.lastIndex++;return l===i.length?!s&&d.test("")||c.push(""):c.push(i.slice(l)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,i,n):d.call(String(i),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var u=i(t),h=String(this),v=a(u,RegExp),g=u.unicode,y=(u.ignoreCase?"i":"")+(u.multiline?"m":"")+(u.unicode?"u":"")+(p?"y":"g"),m=new v(p?u:"^(?:"+u.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var k=0,S=0,A=[];S<h.length;){m.lastIndex=p?S:0;var T,w=c(m,p?h:h.slice(S));if(null===w||(T=l(s(m.lastIndex+(p?0:S)),h.length))===k)S=o(h,S,g);else{if(A.push(h.slice(k,S)),A.length===b)return A;for(var x=1;x<=w.length-1;x++)if(A.push(w[x]),A.length===b)return A;S=k=T}}return A.push(h.slice(k)),A}]})},function(t,e,r){"use strict";var n,i,a,o,s=r(29),c=r(2),u=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),v=r(40),g=r(53),y=r(99).set,m=r(100)(),b=r(101),k=r(129),S=r(64),A=r(130),T=c.TypeError,w=c.process,x=w&&w.versions,_=x&&x.v8||"",M=c.Promise,E="process"==f(w),O=function(){},P=i=b.f,C=!!function(){try{var t=M.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(O,O)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==_.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(t){}}(),F=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},I=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,i=1==t._s,a=0,o=function(e){var r,a,o,s=i?e.ok:e.fail,c=e.resolve,u=e.reject,f=e.domain;try{s?(i||(2==t._h&&N(t),t._h=1),!0===s?r=n:(f&&f.enter(),r=s(n),f&&(f.exit(),o=!0)),r===e.promise?u(T("Promise-chain cycle")):(a=F(r))?a.call(r,c,u):c(r)):u(n)}catch(t){f&&!o&&f.exit(),u(t)}};r.length>a;)o(r[a++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){y.call(c,function(){var e,r,n,i=t._v,a=R(t);if(a&&(e=k(function(){E?w.emit("unhandledRejection",i,t):(r=c.onunhandledrejection)?r({promise:t,reason:i}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",i)}),t._h=E||R(t)?2:1),t._a=void 0,a&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){y.call(c,function(){var e;E?w.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),I(e,!0))},D=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw T("Promise can't be resolved itself");(e=F(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,u(D,n,1),u(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,I(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};C||(M=function(t){d(this,M,"Promise","_h"),p(t),n.call(this);try{t(u(D,this,1),u(L,this,1))}catch(t){L.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(M.prototype,{then:function(t,e){var r=P(g(this,M));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=E?w.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&I(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new n;this.promise=t,this.resolve=u(D,t,1),this.reject=u(L,t,1)},b.f=P=function(t){return t===M||t===o?new a(t):i(t)}),l(l.G+l.W+l.F*!C,{Promise:M}),r(43)(M,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!C,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!C),"Promise",{resolve:function(t){return A(s&&this===o?M:this,t)}}),l(l.S+l.F*!(C&&r(61)(function(t){M.all(t).catch(O)})),"Promise",{all:function(t){var e=this,r=P(e),n=r.resolve,i=r.reject,a=k(function(){var r=[],a=0,o=1;v(t,!1,function(t){var s=a++,c=!1;r.push(void 0),o++,e.resolve(t).then(function(t){c||(c=!0,r[s]=t,--o||n(r))},i)}),--o||n(r)});return a.e&&i(a.v),r.promise},race:function(t){var e=this,r=P(e),n=r.reject,i=k(function(){v(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return i.e&&n(i.v),r.promise}})},function(t,e,r){"use strict";var n=r(135),i=r(42);r(65)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),i=r(66),a=r(102),o=r(1),s=r(35),c=r(6),u=r(4),f=r(2).ArrayBuffer,l=r(53),h=a.ArrayBuffer,p=a.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,g=i.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||u(t)&&g in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(o(this),t);for(var r=o(this).byteLength,n=s(t,r),i=s(void 0===e?r:e,r),a=new(l(this,h))(c(i-n)),u=new p(this),f=new p(a),d=0;n<i;)f.setUint8(d++,u.getUint8(n++));return a}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(66).ABV,{DataView:r(102).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),i=r(10),a=r(1),o=(r(2).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=i(t),c=a(r);return o?o(n,e,c):s.call(n,e,c)}})},function(t,e,r){var n=r(0),i=r(36),a=r(10),o=r(1),s=r(4),c=r(3),u=r(115),f=(r(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){a(t),o(e);var r=arguments.length<3?t:a(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(u.apply(t,n))}var c=r.prototype,p=i(s(c)?c:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,r){var n=r(8),i=r(0),a=r(1),o=r(23);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){a(t),e=o(e,!0),a(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),i=r(16).f,a=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(a(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),i=r(1),a=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(88)(a,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new a(t)}})},function(t,e,r){var n=r(16),i=r(17),a=r(14),o=r(0),s=r(4),c=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,u,f=arguments.length<3?e:arguments[2];return c(e)===f?e[r]:(o=n.f(e,r))?a(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:s(u=i(e))?t(u,r,f):void 0}})},function(t,e,r){var n=r(16),i=r(0),a=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(a(t),e)}})},function(t,e,r){var n=r(0),i=r(17),a=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(a(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),i=r(1),a=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!a||a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(137)})},function(t,e,r){var n=r(0),i=r(1),a=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return a&&a(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),i=r(16),a=r(17),o=r(14),s=r(0),c=r(32),u=r(1),f=r(4);s(s.S,"Reflect",{set:function t(e,r,s){var l,h,p=arguments.length<4?e:arguments[3],d=i.f(u(e),r);if(!d){if(f(h=a(e)))return t(h,r,s,p);d=c(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,n.f(p,r,l)}else n.f(p,r,c(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,r){var n=r(0),i=r(81);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),i=r(56)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(10),c=r(94);n(n.P,"Array",{flatMap:function(t){var e,r,n=a(this);return s(t),e=o(n.length),r=c(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(21),c=r(94);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=a(this),r=o(e.length),n=c(e,0);return i(n,e,e,r,0,void 0===t?1:s(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),i=r(59)(!0);n(n.P,"String",{at:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(64),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(64),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),i=r(24),a=r(6),o=r(60),s=r(52),c=RegExp.prototype,u=function(t,e){this._r=t,this._s=e};r(88)(u,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(i(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in c?String(t.flags):s.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=a(t.lastIndex),new u(n,e)}})},function(t,e,r){r(77)("asyncIterator")},function(t,e,r){r(77)("observable")},function(t,e,r){var n=r(0),i=r(137),a=r(15),o=r(16),s=r(92);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),c=o.f,u=i(n),f={},l=0;u.length>l;)void 0!==(r=c(n,e=u[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(0),i=r(140)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},function(t,e,r){var n=r(0),i=r(140)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(67),"Object",{__defineGetter__:function(t,e){o.f(i(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(67),"Object",{__defineSetter__:function(t,e){o.f(i(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(67),"Object",{__lookupGetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(67),"Object",{__lookupSetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(141)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(141)("Set")})},function(t,e,r){r(68)("Map")},function(t,e,r){r(68)("Set")},function(t,e,r){r(68)("WeakMap")},function(t,e,r){r(68)("WeakSet")},function(t,e,r){r(69)("Map")},function(t,e,r){r(69)("Set")},function(t,e,r){r(69)("WeakMap")},function(t,e,r){r(69)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),i=r(20);n(n.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),i=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*i}})},function(t,e,r){var n=r(0),i=r(143),a=r(122);n(n.S,"Math",{fscale:function(t,e,r,n,o){return a(i(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)+(n>>>0)+((i&a|(i|a)&~(i+a>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)-(n>>>0)-((~i&a|~(i^a)&i-a>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>16,s=n>>16,c=(o*a>>>0)+(i*a>>>16);return o*s+(c>>16)+((i*s>>>0)+(65535&c)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),i=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*i}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(143)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>>16,s=n>>>16,c=(o*a>>>0)+(i*a>>>16);return o*s+(c>>>16)+((i*s>>>0)+(65535&c)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),i=r(18),a=r(2),o=r(53),s=r(130);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,i.Promise||a.Promise),r="function"==typeof t;return this.then(r?function(r){return s(e,t()).then(function(){return r})}:t,r?function(r){return s(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),i=r(101),a=r(129);n(n.S,"Promise",{try:function(t){var e=i.f(this),r=a(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,i(r),a(n))}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.map,s=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:a(arguments[2]),n=o(i(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var c=s.get(e);return c.delete(r),!!c.size||s.delete(e)}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.get,c=n.key,u=function(t,e,r){if(o(t,e,r))return s(t,e,r);var n=a(e);return null!==n?u(t,n,r):void 0};n.exp({getMetadata:function(t,e){return u(t,i(e),arguments.length<3?void 0:c(arguments[2]))}})},function(t,e,r){var n=r(133),i=r(142),a=r(28),o=r(1),s=r(17),c=a.keys,u=a.key,f=function(t,e){var r=c(t,e),a=s(t);if(null===a)return r;var o=f(a,e);return o.length?r.length?i(new n(r.concat(o))):o:r};a.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return a(i(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.key,c=function(t,e,r){if(o(t,e,r))return!0;var n=a(e);return null!==n&&c(t,n,r)};n.exp({hasMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(10),o=n.key,s=n.set;n.exp({metadata:function(t,e){return function(r,n){s(t,e,(void 0!==n?i:a)(r),o(n))}}})},function(t,e,r){var n=r(0),i=r(100)(),a=r(2).process,o="process"==r(20)(a);n(n.G,{asap:function(t){var e=o&&a.domain;i(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),i=r(2),a=r(18),o=r(100)(),s=r(5)("observable"),c=r(10),u=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,v=function(t){return null==t?void 0:c(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},b=function(t,e){u(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:c(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=v(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=v(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=v(r.complete);t=n?n.call(r,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var S=function(t){f(this,S,"Observable","_f")._f=c(t)};l(S.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(a.Promise||i.Promise)(function(r,n){c(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),i.unsubscribe()}},error:n,complete:r})})}}),l(S,{from:function(t){var e="function"==typeof this?this:S,r=v(u(t)[s]);if(r){var n=u(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:S)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(S.prototype,s,function(){return this}),n(n.G,{Observable:S}),r(38)("Observable")},function(t,e,r){var n=r(2),i=r(0),a=r(64),o=[].slice,s=/MSIE .\./.test(a),c=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*s,{setTimeout:c(n.setTimeout),setInterval:c(n.setInterval)})},function(t,e,r){var n=r(0),i=r(99);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,r){for(var n=r(96),i=r(34),a=r(12),o=r(2),s=r(11),c=r(46),u=r(5),f=u("iterator"),l=u("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,y=d[v],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||s(k,f,h),k[l]||s(k,l,y),c[y]=h,m))for(g in n)k[g]||a(k,g,n[g],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag",u="object"==typeof t,f=e.regeneratorRuntime;if(f)u&&(t.exports=f);else{(f=e.regeneratorRuntime=u?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(C([])));m&&m!==n&&i.call(m,o)&&(g=m);var b=w.prototype=A.prototype=Object.create(g);T.prototype=b.constructor=w,w.constructor=T,w[c]=T.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===T||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},x(_.prototype),_.prototype[s]=function(){return this},f.AsyncIterator=_,f.async=function(t,e,r,n){var i=new _(k(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},x(b),b[c]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=C,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var c=i.call(o,"catchLoc"),u=i.call(o,"finallyLoc");if(c&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;O(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:C(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),v}}}function k(t,e,r,n){var i=e&&e.prototype instanceof A?e:A,a=Object.create(i.prototype),o=new P(n||[]);return a._invoke=function(t,e,r){var n=l;return function(i,a){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw a;return F()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=M(o,r);if(s){if(s===v)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=S(t,e,r);if("normal"===c.type){if(n=r.done?d:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(t,r,o),a}function S(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function A(){}function T(){}function w(){}function x(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(t){var e;this._invoke=function(r,n){function a(){return new Promise(function(e,a){!function e(r,n,a,o){var s=S(t[r],t,n);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"==typeof u&&i.call(u,"__await")?Promise.resolve(u.__await).then(function(t){e("next",t,a,o)},function(t){e("throw",t,a,o)}):Promise.resolve(u).then(function(t){c.value=t,a(c)},o)}o(s.arg)}(r,n,e,a)})}return e=e?e.then(a,a):a()}}function M(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,M(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=S(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function C(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,a=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:F}}function F(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),i=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,